Mish is a new novel activation function proposed in this paper It has shown promising results so far and has been adopted in several packages including TensorFlowAddons SpaCy Tok Vec Layer Thinc SpaCys official NLP based ML library Echo AI CNTKX Extension of Microsofts CNTK FastAIDev Darknet Yolov BeeDNN Library in C GenEfficientNetPyTorch dnet All benchmarks analysis and links to official package implementations can be found in this repository It would be nice to have Mish as an option within the activation function group This is the comparison of Mish with other conventional activation functions in a SEResNet for CIFAR se Since December both gonumblas and gonummatrix have been deprecated and migrated to gonumgonum f b blas add deprecation notice c dec matrix add deprecation notice As gomod at declares module gonumorgv gonum this PR includes the changes to use gonumorgv gonum as import paths in knnknngo linearmodelslinearregressiongo metricspairwisechebyshevgo metricspairwisecranberrago metricspairwisemanhattango This is for ID DecisionTrees Specifically If a node has only one child which leads to the leaf node then that leaf node is not set as type leafNode I do not know if it is just for me But it does seem so This is true even if that leaf node is connected to other parent which have more than one child The current model Save feature stores models to a file with the given filename Would it be possible to support a slightly different interface that takes an ioWriter to save or ioReader to load This would enable use cases such as saving models to S buckets or databases without having to go via the filesystem first Happy to work on a PR if youd consider it I was experimenting with the randomforest in the ensemble package The code a little bit simplified looks like this forest ensembleNewRandomForesttrees features forestFittrainData predictions err forestPredicttestData err forestSavemodelFile currentForest ensembleNewRandomForesttrees features err currentForestLoadmodelFile predictionsCurrent err currentForestPredicttestData fmtPrintlncurrentForest When i save the forest a file is made But when i load the Forest and print it the BaggedModel is empty I was first recognizing it when i tried to load the model and make predictions with the same TestData i think there should be the same accuracy but its not Also the Confusion Matrix shows fields with NaN Is there another way to save and restore the model or am i doing anything wrong Im trying to create a Test instance without CSV but I dont understand some functions in base My structure is like out out dont matter for now I only want to create the initial Already I do this testData baseNewStructuralCopytrainData I need use the original structure testDataExtend Only one item test this create default spec baseResolveAttributestestData testDataAllClassAttributes Work testDataSetspec byte Dont Work spec baseResolveAttributestestData testDataAllClassAttributes testDataSetspec byte The error is panic Tried to call set with bytes should be Thank you Is there a function that can easily transform a slice or a map to an instance or to somehow directly use raw data for the prediction algorithm Panics should not be part of a library They cause unnecessary core dumps and quit the parent process which can be dangerous if used in production Theres several places where errors could be bubbled up but are instead caught by panics