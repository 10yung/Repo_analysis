It would be useful to add a function lets say for example mapSafe that could handle an exception of another type for example kt suspend fun V Any U Any E Exception D Exception SuspendableResultV EmapSafetransform suspend V U SuspendableResultU D try when this is SuspendableResultSuccess SuspendableResultSuccesstransformvalue is SuspendableResultFailure SuspendableResultFailureerror catch ex Exception SuspendableResulterrorex as D Havent tested this Thoughts Hello guys Ive some validations like val factoryIdExists ResultLong Exception ResultofproductDtofactoryfactoryId val factoryExists ResultFactoryDto Exception ResultoffactoryServicegetFactoryfactoryIdExistsget val validations ValidationfactoryIdExists factoryExists What if we could add a label to each validation so it would be easier to present the validation that failed to an API client for example Do you think that it would be worth If so I can design it Thanks Kotlin introduces a new built in type called ResultT docs in the standard library stdlib and in the kotlin package Do you have an opinion on it It seems to have taken a lot of inspiration from this library but with one big difference It doesnt have an equivalent to flatMap for operations that return a new ResultT It also doesnt place any constraints on errors which are typed as Throwable The immediate inconvenience after upgrading my project to kotlin is that I now need to explicitly add the import to use comgithubkittinunfresultResult The KEEP can be seen here Whenever an unexpected exception gets thrown while evaluating a function with Result it leads to an unintuitive ClassCastException Here is a simple example kotlin import comgithubkittinunfresultResult import orgjunitjupiterapiTest import kotlintestfail internal class ResultExceptionClassCastTest class MyException Exception Test fun Unexpected exception leads to unintuitive ClassCastException ResultofString MyException operationsomething fold failNot reached private fun operationit String String throw IllegalArgumentException return never reached it Is there something that I as a library user can do to handle this better Is this an issue with the library The simple solution would be to expect an Exception or Throwable and then to cast to the expected type if it indeed is that type but this doesnt seem like a very good solution Would you be open to a PR to add multiplatform support to this project Could you publish your library to maven central It is causing issues for people who do not have jcenter setup See 