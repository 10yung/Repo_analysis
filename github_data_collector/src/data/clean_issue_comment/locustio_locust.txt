In locustio there is a very odd bug that prevents the setup method from using requests to make HTTP requests When doing an HTTP POST request the setup function unexpectedly returns No exception is printed but the remainder of the function does not execute This is what my code looks like edited down for confidentiality class MyLocustHttpLocust def setupself printCreating test data response requestspost jsontestdata assert responsestatuscode printCreated test data I added a trycatch to my code and apparently the requestspost call throws a GreenletExit exception After much consternation I was able to narrow the issue down to gevent It appears that the geventssl modules call to selfwaitselfreadevent timeoutexcSSLErrorReadTimeout on line throws this GreenletExit error Important note this error does not manifest in locustio or lower Let me know if youd like some help fixing this I imagine its a pretty simple one Describe the bug Related to whats being reported are not milliseconds but actually milliseconds Expected behavior For my specific case I observe about a foursecond response time for an endpoint Im testing but whats reported is more like seconds on average Actual behavior See above Steps to reproduce selfevident Environment OS MacOS latest Python version Locust version Locust command line that you ran just launched it with my module Locust file contents anonymized if necessary irrelevant Click pause during operation The interface statistics in the report are wrong For example the report counts times of an interface execution but times of actual execution OS Python version Locust version Describe the bug When starting locust using docker in Mac OS I am unable to access web UI However its works on Ubuntu Steps to reproduce git clone cd locustexamplesdockercompose dockercompose up d Expected behavior should be successfully loaded from chrome Actual behavior Unable to access from chrome However if running on Ubuntu I am able to access Environment settings OS Macos Catalina with Docker Desktop version Python version From latest locustiolocust docker image Locust version Latest locustiolocust docker image This PR makes a small change to how URLs are created when a Host is specified Previously the URL was built by using string concatenation This changes it to use urljoin This fixes the edge case where a host is entered containing a trailing slash ie rather than Once merged it should work with or without trailing a slash supersedes Describe the bug Autoscaling of slaves feature was added by enabling the recalculation and update of users per slave when a new slave connects But in my testing the first slave always has a considerably higher amount of users running from it Expected behavior Every slave should be running roughly the same amount of users after rebalancing Actual behavior The first slave is at users and CPU where the others are at users and CPU Screen Shot at Screen Shot at Logs from the first slave locustlargeslave bc rr INFOlocustmain Starting Locust locustlargeslave bc rr INFOlocustrunners Hatching and swarming clients at the rate clientss locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts locustlargeslave bc rr INFOlocustrunners Killing locusts Steps to reproduce Run a load test autoscale slaves from to Environment settings OS Docker image on k s Python version official docker image Locust version Describe the bug I have a locustfile like this The LightSet and HeavySet s onstop method is never called The background is I want to do some cleanup works in LightSet and HeavySet respectively Is there anyway to do it python from locust import HttpLocust task TaskSet constant class LightSetTaskSet task def light self printLight def onstopself printLight stop class HeavySetTaskSet task def heavy self printHeavy def onstopself printHeavy stop class LightAndHeavySetTaskSet tasks LightSet HeavySet class UserHttpLocust taskset LightAndHeavySet waittime constant host localhost Expected behavior The LightSet and HeavySet s onstop should be called Or there is a workaround to do the cleanup for child TaskSet Actual behavior The LightSet and HeavySet s onstop is not called I cannot find a way to do itBy looking at Docs and StackOverflow Steps to reproduce Environment settings OS Mac OS Python version Locust version Steps Start a test in masterslave mode ie locust f testpy noweb host t csvfullhistory csv master master Then start a slave locust f testpy noweb host slave Error Following exception is listed twice meERRORstderr Traceback most recent call last meERRORstderr meERRORstderr File srcgeventgreenletpy line in geventgreenletGreenletrun meERRORstderr meERRORstderr File UsersmePythonVersionslocustlibpython sitepackageslocuststatspy line in statswriter writestatcsvsbasefilepath statshistoryenabled meERRORstderr meERRORstderr File UsersmePythonVersionslocustlibpython sitepackageslocuststatspy line in writestatcsvs fwritestatshistorycsvstatshistoryenabled n meERRORstderr meERRORstderr File UsersmePythonVersionslocustlibpython sitepackageslocuststatspy line in statshistorycsv strintsgetcurrentresponsetimepercentilex or for x in PERCENTILESTOREPORT meERRORstderr meERRORstderr File UsersmePythonVersionslocustlibpython sitepackageslocuststatspy line in listcomp strintsgetcurrentresponsetimepercentilex or for x in PERCENTILESTOREPORT meERRORstderr meERRORstderr File UsersmePythonVersionslocustlibpython sitepackageslocuststatspy line in getcurrentresponsetimepercentile raise ValueErrorStatsEntryuseresponsetimescache must be set to True if we should be able to calculate the current response time percentile meERRORstderr meERRORstderr ValueError StatsEntryuseresponsetimescache must be set to True if we should be able to calculate the current response time percentile meERRORstderr meERRORstderr T Z meERRORstderr meERRORstderr Greenlet at x b b ef statswritermaster True failed with ValueError Describe the bug Latest version While spawning a distributed cluster of around slaves per master seeing slowness in the way slaves register to master Till slaves it happens within seconds but after that slaves VM is of core register to master every second Due to this overall it takes too much time to spawn a cluster of slaves This issue was clearly not present in version a and is present in the latest version I have a setup of virtual machines core each on Azure and requirement is to setup big clusters of unique external IPs to do the test I am easily able to reproduce this in latest version of locust with python and also For the time being I rolled back to a version of locust and everything seems to be working fine and I am able to spawn the same cluster with same set of scripts OS Debian Python version Locust version latest 