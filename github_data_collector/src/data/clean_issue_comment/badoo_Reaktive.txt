The iOS sample code contains a retain loop The ViewController owns the KittenView and the KittenView owns the ViewController Personally I am not very familiar with the used approach which is not entirely idiomatic for SwiftiOS so not entirely sure what the best fix would be Chaining multiple test functions is currently not supported kotlin val versions versionsReaderreadtest assertError value wont compile because assertError returns Unit This should be easy kotlin fun TestObserverassertError assertTrueisError Source did not fail to kotlin fun TestObserverassertError TestObserver assertTrueisError Source did not fail return this And I dont think itll break anyones code After publication is finished try to use them as dependencies Unpublished version is available with username password API key provided Can be done in ways Build samplemppmodule with changed dependencies Create synthetic modules which should be synced and built only on publishing step Following problem Reaktive can be exposed to Swift because it is not based on coroutines But calling its operators does not look nice We need to investigate if we can provide Swift extensions Do we need it Please react with Thanks fat frameworks not available for macos Cache only GRADLEHOMEcachesbuildcache otherwise we wont fit in GB limit It is not a problem to download dependencies again Make DarwinTestTask cacheable by exposing target as Input String it is not serializable Enable cache via orggradlecachingtrue Compare git tag and version in Gradle If they differs use git tag version Then create issue or create pull request with fix simple string replacement in buildgradle file Use GitHub package manager GitHub package manager does not support mavens snapshots