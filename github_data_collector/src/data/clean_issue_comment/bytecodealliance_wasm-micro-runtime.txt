Happy year friends We are excited to inform that a major WAMR release is on the way Here we would like to give headsup for the new features and the minor changes to the embedding APIs WAMR Ahead of Time compiler The warmc compiler is introduced for compiling the WASM bytecode to a native module The runtime AoT module loader is designed for both embedded environments where no system module loader is available and the Linux system With WAMR AoT the applications can run amazingly fast and the runtime binary size gets even smaller KB That brings WAMR to a larger scope of usages The X architecture is supported in the first AoT version and the support for more architectures is on the plan Streamlined building process and menu configuration The code directory structure is reorganized to fit the AoT changes and the building process is greatly enhanced to ease the procedure of embedding WAMR in your software and creating specific WASM APP SDK for your products The new introduced wamrsdk tool builds the WAMR into SDK packages which include both runtime SDK for embedding by your project software and APP SDK for developing WASM application The WAMR application framework is departed from the libc and now moved to a dedicated folder Every subfolder under it is a component that is configurable for compilation The developers can create new subfolders for introducing new components to the application framework The header files of configured components are automatically copied into the final SDK package C embedding API minor change for future multi threading support Here is how to call wasm function from C code currently env wasmruntimecreateexecenvstacksize argv if wasmruntimecallwasminst env func argvbuf wasmruntimeclearexceptioninst To support multi threading in the future we have changed the interface a bit execenv wasmruntimecreateexecenvmoduleinst stacksize argv if wasmruntimecallwasmexecenv func argvbuf the return value is stored in argv printffib function return d n argv The execenv argument now is a structure and moduleinst is a field member of it We are sorry it will require changes to the software which is embedding the WAMR however the change should be fairly small OSMACOSX doesnt seem to be defined in cmake hi there do you have any plans to support the ESP xtensafreertos ive been having a bash at porting this but its well a lot over my head cheers ryan The WebAssembly wg has been working on a standard cc API for runtimes to increase compatibility V is the current reference implementation and it would be awesome if WAMR followed For example it would allow constrained applications that originally use V for their prototype to switch to WAMR when they move to the constrained domain Ive been playing around with buildroot a system that makes it easy to build custom Linux images for embedded devices like Raspberry Pi I was able to create an image for a Pi with little effort that boots in seconds Im investigating how to make WAMR a userspace package and it doesnt seem too hard Has anyone else considered this Anyone with buildroot experience who might be able to help Can be used on nrf with zephyr and gccarmnoneeabi This question is from the sample wasmmicroruntimesamplessimplewasmappsconnectionc WASM does not support irreducible CFG which may be produced in the basic block representation for some languagescompilers AFAIK irreducible CFG must be removed using the relooper algorithm or similar before WASM is generated According to some sources it seems that this was a design decision motivated by JS JIT engines V etc WASM is a cool idea but it looks like a refurbished syntactic variant ASMJS rather than the promised universal binary format I wonder if there is any hope that projects like yours can push WASM design further or support alternative proposals like Microwasm which IMHO looks better from a compiler designer perspective Theres only Zephyr and Linux support Someone else already asked about macOS so heres a Windows one So yeah are there any plans for supporting Windows And how much of the C standard library if any at all does this already support WASI is still a work in progress and it doesnt support C yet but hopefully both projects will do so at some point and work together if possible 