 Summary Event bus code seems complex Lets make it as simple as possible Context Motivation Unneeded complexity should be removed The complexity of the event bus was just something I noticed at some point Summary Aruba exposes a large set of API methods into the test environment It would be cleaner to access these through a dedicated object Expected Behavior Something like ruby it has some behavior do arubawritefilefootxt arubaruncommandandstopbar footxt end Current Behavior ruby it has some behavior do writefilefootxt runcommandandstopbar footxt end Possible Solution This needs to be changed in several steps Create object that provides these methods Implement currently exposed methods in terms of this object Deprecate direct use of exposed methods Remove exposed methods Context Motivation Arubas API is massive and testing it clearly is difficult because the methods are exposed to Arubas specs as well Also exposing these through a real object makes it clearer for end users to see where the methods they call come from Summary Improve Rubocop LineLength And a few other minor styles Details Rebase and fix up an old PR fixing up some LineLength issues How Has This Been Tested CI Screenshots if appropriate Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to not work as expected x Refactoring cleanup of codebase without changing any existing functionality Update documentation Checklist NB Ive not updated the TODO as I want to standardise the TODO first by doing some additional cleanups and removing some patches around certain methods so we have a single source of truth Summary Aruba warns when its API methods are called with an absolute path but this warning is not very informative Expected Behavior When the user calls an Aruba API method with an absolute path Aruba reports the file and line of the user code or cucumber step so the user can fix it Current Behavior Aruba complains about expandpath being called even if that happens through several steps inside Arubas implementation Steps to Reproduce for bugs See for an example of a scenario using an absolute file name Context Motivation See Summary Arubas tests take too long Especially on JRuby but on MRI theyre still take quite long Lets make them faster Possible Solutions Test edge cases as unit tests instead of using an endtoend test This will probably mean moving them from cucumber to rspec Figure out a way to reduce indirection Current feature tests often do a nested cucumber run which itself does a nested run of some Ruby program Steps to Reproduce for bugs Look at a typical Travis build Context Motivation Development is slow when you need to wait that long for a build to finish Summary The current Dockerfile is outdated and the current support for development with Docker is too complex Expected Behavior The Dockerfile is uptodate and provides a Ruby version that is supported by Aruba The Dockerfile is easy to update for Aruba developers even if they do not use Docker every day The Dockerfile and dockercomposeyml are well documented and do not contain any mystery parts Developing with docker uses standard docker command line tools The Dockerfile uses an existing image provided by the Ruby community Current Behavior The Dockerfile is long and complex The Dockerfile builds its own Ruby The Dockerfile provides Ruby The Rakefile provides a complicated set of tasks to run tests with docker There is a dockercompose file but it is only used to provide settings for the rake task which thus duplicates dockercompose functionality Possible Solution Clean up Dockerfile basing it on the ruby base image Provide clear instructions on how to use docker andor dockercompose directly Remove dockerrelated rake tasks Context Motivation Were dropping support for Ruby and I just noticed it is what is provided by the current Dockerfile These sections are meant as guidance for you If something doesnt fit you can just skip it Summary Stuff that should go into Details Describe your changes in detail Motivation and Context Why is this change required What problem does it solve If it fixes an open issue please link to the issue here How Has This Been Tested Please add tests for changes to the code otherwise we probably wont merge it Please describe in detail how you tested your changes Include details of your testing environment tests ran to see how your change affects other areas of the code etc Screenshots if appropriate Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to not work as expected Refactoring cleanup of codebase without changing any existing functionality Update documentation Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help Ive added tests for my code My change requires a change to the documentation I have updated the documentation accordingly Summary Aruba console uses its own history file I dont think it should Expected Behavior History for aruba console should be appended to the general IRB history Current Behavior Aruba console stores its history in arubahistory Possible Solution Remove the code setting the relevant IRB options as well as Arubas configuration option Context Motivation Having this history separate makes it harder to reuse existing history from general IRB use Other specialpurpose consoles eg rails console also do not keep a separate history Summary When activating the blanket announcer with announce the commandcontent announcer announces the full binary file if the command happens to be a binary file This is bad and shouldnt happen Expected Behavior When annotating a scenario with announce announced output should be useful for the developer Current Behavior When annotating a scenario with announce all announcers are activated The commandcontent announcer is one of them If the command is a binary eg ruby the full binary is output filling the terminal with a large amount of garbage Possible Solutions Have the commandcontent not output binaries Do not include commandcontent in the announcers activated by announce I think is the best option since it also removes the need for warnings about binaries in the documentation about the commandcontent announcer Steps to Reproduce for bugs Create a scenario annotated with announce Have the scenario run ruby version Run the scenario Context Motivation This came up while examining as mentioned in Your Environment If youre reporting a bug include as many relevant details about the environment you experienced the bug in Version used master maybe also still Operating System and version Linux Summary Using append to file cuke shouldnt cause syntax error unexpected endofinput expecting keywordend SyntaxError Expected Behavior It wouldnt cause the error above Current Behavior It does cause the error above Code similar to this can be produced def pathtopagename selfsendpagenamesplit pushpathjointosym end ThenI should see string do text expectpageto havecontenttext endWhenI go to the session establish page do This is the problematic line visit pathtosession establish end Possible Solution Check for newline characters If one isnt found add one Adding an extra newline even in the worst circumstance is just a bad style but not adding one can occassionally cause issues concatenating end and Given or When for example Steps to Reproduce for bugs Use cuke write to file Use cuke append to file in the same scenario with an identical path Context Motivation This is present in both scenario and background scenario contexts Ive tagged this as a bug because it does feel something that shouldnt happen 