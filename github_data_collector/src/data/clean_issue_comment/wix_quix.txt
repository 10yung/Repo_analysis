current implementation run and download streams the results via DownloadController on query execution start Download event is used to send the link to the client Quixfrontend opens a new tab and starts the download while receiving rest of execution events in the note Drawbacks of this approach Code is a bit more complex as we need to pause query execution until quixfrontend opens the download link Download link must be sent to the same backend that started the execution thus complicating horizontal scaling of quixbackend proposed improvement instead of streaming results to browser stream them into one of many cloud storage systems s for example and upon completion send the link to browser via Download event what should be updated on startSubQuery in DownloadBuilder we must create a new file that will store the results on addSubQuery in DownloadBuilder we will append column names and append bulks of results on endSubQuery in DownloadBuilder we will close the file and send Download event to quixfrontend DownloadConfig should be updated to include details of cloud storage installationmd should be updated to include the steps needed to enable cloud storage during run and download scenario We dont have a presto installed when we create a note the only type we have is BQ this is the console Deprecation warning use momentupdateLocalelocaleName config to change an existing locale momentdefineLocalelocaleName config should only be used for creating a new locale See for more info appbundlejs windowcontrollersControllers is deprecated Do not use it for UA detection appbundlejs The Notification permission may only be requested in a secure context quixcycofun Requesting Notification permission outside a short running usergenerated event handler is deprecated and will not be supported in the future quixcycofun TypeError scopevm is undefined conf withOptions digest safeDigest subscribe controller step verb fulfilled appbundlejs TypeError plugin is undefined appbundlejs TypeError scopevm is undefined conf withOptions digest apply onBlur dispatch handle appbundlejs TypeError plugin is undefined appbundlejs TypeError scopevm is undefined conf withOptions digest safeDigest subscribe controller step verb fulfilled appbundlejs TypeError plugin is undefined appbundlejs Source map error Error request failed with status Resource URL Source Map URL actionsjsmap Day Created a History page Added History to navbar Created mock data for history page Added click handlers that run the playground Initial research on infinite scrolling Day Connected to the service proxy to the presto DB More UI customizations and tweaks Merged last week backend history code Added History service and entities Day Sorting support Filtering support Day Pagination support Styling Better filtering and filter results highlighting Day Polishing styling Added initial tests Creating final PR Wrapping up Docs detailed status table tbody tr thTypeth tdNew Featureth tr tr thIssueth tdTerraform provisioning for QUIX Ossth tr tr thChangeth tdQUIX Demo Setup on AWS via Terraformth tr tbody table Description This pull request adds provisioning via Terraform the QUIX with MySQL on top of AWS RDS and Presto on AWS ECS with AWS FARGATE Terraform state and lock is saved in AWS S AWS DynamoDB Copyright By making a contribution to this project I certify that a The contribution was created in whole or in part by me and I have the right to submit it under the MIT and Apache licenses or b The contribution is based upon previous work that to the best of my knowledge is covered under an appropriate open source license and I have the right under that license to submit that work with modifications whether created in whole or in part by me under the MIT or Apache licenses or c The contribution was provided directly to me by some other person who certified a b or c and I have not modified it d I understand and agree that this project and the contribution are public and that a record of the contribution including all personal information I submit with it is maintained indefinitely and may be redistributed consistent with this project or the open source licenses involved To use dockercompose f dockercomposeesprebuiltyml up Elasticsearch will be at elasticsearch You can use Kibana to query it example of errors from thisshowSyntaxErrors plugingetConfigsyntaxValidation how to reproduce create presto note in demo remove presto from modules list restart dockercompose and load the notebook with presto note Sort on header click filter on header pivot table Consider disabling certain features if result set is too large Dual axis chart Heatmap