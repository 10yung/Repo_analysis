This PR tries to support building samples on Linux with minimal changes related issues checklists x Replace window handling with GLFW x CMake support for building samples on Linux Fixing broken samples Testing on both Windows and Linux Reviews known issues Most samples destroying window before destroying surface which causes segfault Raytracing sample doesnt compile not really sure why SurfaceCapabilities sample also doesnt compile now Currently it only works with XCB surfaces Not sure we can support more platforms In order to use the dynamic loader without causing including vulkanhpp to pull in windowsh I was including vulkanhpp as follows C define VULKANHPPENABLEDYNAMICLOADERTOOL define VULKANHPPDISPATCHLOADERDYNAMIC include vulkanvulkanhpp And manually implementing the dynamic loader myself in a separate file This was working in but does not work with the current version which I picked up to resolve due to the initvkInstance const vkDevice const function on DispatchLoaderDynamic on line it creates a vkDynamicLoader instance which with the given define rules does not exist I am on a MAC and using clion IDE When I clone this repo and all submodules I am able to load the CMakeListstxt project and compile and run with no trouble But when I load the CMakeListstxt project in the samples InitInstance folder I get the following error when compiling UsersjeffprojectspersonalVulkanHppsamples InitInstance InitInstancecpp fatal error vulkanvulkanhpp file not found I see the vulkanvulkanhpp from the root directory How do the sample projects find this file Hello Is there specific reason why Linux build is Unhandled platform Seems like an easy thing to do GLFW is already there Hello Ive been trying to port an application that Ive been writing on Mac over to windows and Im using CMake However the compile is failing with the error C VulkanSDK Include vulkanvulkanhpp error C PFNvkVoidFunction VkInstanceconst char cannot convert argument from vkInstance to VkInstance C VulkanSDK Include vulkanvulkanhpp note No userdefinedconversion operator available that can perform this conversion or the operator cannot be called repeating over and over again The line number goes from to at which point make just gives up because we exceeded errors Im compiling with stdc This compiles just fine on mac Of course Ive changed the CMakeListstxt to link to the correct libraries and include dirs Im using CLions built in CMake on Windows bit and Im building using C Program Files JetBrains CLion bin cmake win bin cmakeexe build C Users PATH TO MY PROJECT BUILD DIR target all It would be really great if structs could be initialized with designated initializers C eg auto createInfo vkPipelineTessellationStateCreateInfo patchControlPoints Currently this is prevented by The fact that structs define custom constructors The fact that most structs have a private StructureType member Default initialization is performed in the constructor instead of using default member initializers A possible solution for all these issues might be the following construction EDIT note that this original suggestion was not a good idea since the resulting struct will not be guaranteed to have the correct memory layout templateStructureType s struct StructureBase private StructureType sType s struct PipelineInputAssemblyStateCreateInfo StructureBaseStructureTypeePipelineInputAssemblyStateCreateInfo no constructors setters operators as before no private sType member all fields use default member initializers const void pNext nullptr PipelineInputAssemblyStateCreateFlags flags PipelineInputAssemblyStateCreateFlags PrimitiveTopology topology PrimitiveTopologyePointList Bool primitiveRestartEnable To achieve backwards compatibility constructors could still be defined unless disabled by an explicit define An alternative to inheriting from a StructureBase template type would be another define that changes the sType members from private to public Any thoughts flextGL and volk already have custom headers with Vulkan API support ie meta loaders I want to suggest generation another header instead of vulkanh or vulkanvulkanh if fully make possible to choice another header for example vulkanflextVkh or vulkanvolkh The ArrayProxy class in functions like vkCommandBuffersetViewport and such has definitely proven its useful however in the various vkCreateInfo constructors the absence is sorely felt with many structs having objectCount and pObjects members to specify in the constructor Its especially notable when either nullptr or object are so frequently used It would be particularly useful to have an overloaded alternate constructor that replaced uint t objectCount T pObjects with ArrayProxyT objects as it does in the vk commands For example for fixed viewports vkPipelineViewportStateCreateInfo viewportState viewport scissor could be replaced by vkPipelineViewportStateCreateInfo viewportState viewport scissor With OpenXR on the horizon and apparently following the same model as Vulkan in terms of exposing the API in a machine readable XML format it might be useful to try to abstract some of this repository so that it can be reused with the OpenXR API once its available I would like to work on marking UniqueHandle operations especially the constructors and destructor as noexcept As far as I can see vkDevicedestroy functions dont throw anything and return void There are a couple of ways that I can think of on how to go about implementing this Just mark them as noexcept and just assume that no destroy operations will throw Add introspection to UniqueHandleTraits to see if underlying destroydeleter operation is noexcept and have UniqueHandle operations base on that Have UniqueHandle operations which calls the deleter types destroy function depend on whether that destroy function is noexcept Furthermore have the destroy function base on its corresponding vkDevicedestroys noexceptiness I would like to know if my assumption about destroy operations is correct and on your preference on how to implement this EDIT Additionally noexcept for nonUnique handle types