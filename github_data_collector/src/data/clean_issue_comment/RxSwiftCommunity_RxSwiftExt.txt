Adding WatchOS target to the project that enables Carthage to build it Based on the request in IRT other traits theres no real value to add it to Completable we could add to Maybe and Single in a separate PR This PR has a single failing test I cant really put my finger on whats going on there the same test passes for Signal but fails for Driver If anyone can take a poke at it thatd be great Thanks Currently withUnretained defined only for Observable Wouldnt it be useful to add it for all traits I am open for discussion about Dangerfile Sadly I failed to found generic example in RxSwiftCommunity swift compactMap predicate nil prefered over filterMap predicate map nil Hi everyone Im using the cascade operator in many kinds of scenarios and Im very grateful for it There is an issue though when for some reason the last observable completes immediately ie in a synchronous manner the resulting cascading observable will not complete I believe that is because of the if initialized test when subscribing to underlying observables For example if the last observable in the list is a justwhatever the cascade will never complete It looks like its a regression that was introduced with commit The following test can help understand the issue its red at the moment swift func testSynchronousCompletion let xs schedulercreateHotObservable next next next next next completed asObservable let ys schedulercreateHotObservable next completed Intself asObservable let zs ObservableIntjust let res schedulerstart ObservableInt in Observablecascade xs ys zs XCTAssertEqualresevents next completed its just next PublishSubject is not working with ignoreErrors function because ignoreErrors is synonym of retry But PublishSubject cant retry by contract cause its not operation swift let subject PublishSubjectInt subjectignoreErrorssubscribeonNext print subjectonNext subjectonErrorRxErrorunknown subjectonNext subjectonNext output INFINIRYLOOP In this code I can think the sequence cant terminated on error and yes its not terminated but its not right by contract of Observable So I think this operator is mislead and I suggest to remove it RxSwift added the CompactMap operator which overlaps with the current RxSwiftExt unwrap method Should we deprecate the use of the unwrap method in favour of the new compactMap naming Hello I tried to include RxSwiftExt in my carthfile and had some errors my env swift version Apple Swift version swiftlang clang Target x appledarwin Xcode E swiftlint carthage My carthfile github AlamofireAlamofire github AlamofireAlamofireImage github MoyaMoya github ReactiveXRxSwift github ReactiveCocoaReactiveSwift github RxSwiftCommunityRxSwiftExt github RxSwiftCommunityRxGesture github RxSwiftCommunityRxDataSources Xcode throws a lots of Use of undeclared type Element Greetings I came up with an operator I would like to propose The WIP name is overridingScan but I would gladly consider better names you might suggest The idea behind it is to make an operator that works the same way scan does but so that an accumulated value can be reset to some other value that comes from a different observable like so a b scan Here the intermediate sum produced by applying the accumulation function of the scan operator over the sequence b is overridden by a value coming from the sequence a Once this happens this value becomes the new seed and the following accumulating operation uses it as the last sum for all the subsequent values from b This idea came to my mind when I wanted to achieve the behavior when the new items can be appended to an array using the scan operator but so that the array can also be refreshed and filled with completely new values eg scrolling down a table view loads new cells but scrolling it up refreshes it entirely Normally this is achieved using aflatMapLatest bscanstartWith but in this scenario a should always come before b A possible workaround is astartWithseed but it will emit an initial value that might be unwanted The usefulness of this operator might seem questionable but I decided to propose it anyway This PR doesnt include a readme section or a playground demo yet Any feedback is greatly appreciated