Updates orgscalasbtsbt from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalasbt artifactId sbt details labels libraryupdate semverpatch I took a TypedDataset of case class A grouped it mixing the order of two columns of the same type resulting in a tupled dataset I had to do this way dont ask To get stuff right again I selected the columns in the right order again and finally used as A again to get me back a nice TypedDataset of my type A Expected Behaviour Everything just as it has been right columns ending up in the right place Actual behaviour The mixed up columns werent put in the right order by the select I issued at the end I suspect the quirk is somewhere within as A but i cannot pinpoint it tbh Here a small reproducer scala import frameless import framelesssyntax import framelessfunctionsaggregatefirst min create spark session implicit val sparkSession SparkSession session case class ConfusingColumnsname String company String created Long val data ConfusingColumnsJoe snakeoil Inc L ConfusingColumnsBarb ACME L ConfusingColumnsJoe snakeoil Inc L Nil val ds TypedDataset ConfusingColumns TypedDatasetcreatedata val grouped ds groupBy dscompany agg firstdsname mindscreated val confused grouped select grouped grouped grouped as ConfusingColumns confuseddatasetshow Output compare the case classes in data above namecompanycreated snakeoil Inc Joe ACME Barb Continuing on the upgrade changes and once that scalasteward eased the way we could complete the migration to scalatest This can help on automatic migrations by scalasteward for next releases Updates orgscalatestscalatest from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalatest artifactId scalatest details details summaryApplied Migrationssummary details labels testlibraryupdate semverminor scalafixmigrations It seems like frameless isnt aware of the TypedDataset schema when it contains only primitive types Simple example to generate one would be scala val ds TypedDataset Int TypedDatasetcreateList val col ds col Leads to E No column Symbol with shapelesstagTagged String of type A in Int E L ds col Eventhough printSchema shows root integer nullable false Adding an as Tuple Int creates an other error could not find implicit value for parameter as framelessopsAs IntInt After some operations on TypedDataset one can easily endup with dataset of primitive types and be blocked I feel there should be at least some implicits in framless to provide an As for primitive types frameless Symbol literal deprecated since Scala Currently there is no way to call several joins in chain ON condition fails to work with types It makes code much less readable because of hardtoread variables names Currently it looks like that explode on Maps wont work Kindly add support Hi I have recently started exploring frameless and trying to figure out joins Especially left and right joins Would it be possible to add additional examples in the documentation It would really make it helpful I can currently only find examples for inner joins Thanks Vic This pull request provides capability to derive Injection instances for enum types Frameless currently allows custom encoders to be defined for unsupported types For example see below implicit val genderToInt Injection Gender Int Injection case Male case Female case Other case Male case Female case Other This definition is rather mechanical and makes a good candidate for generic programming Considering how widely enum types are used in big data usually just defined using strings I hope this PR brings something useful to the table