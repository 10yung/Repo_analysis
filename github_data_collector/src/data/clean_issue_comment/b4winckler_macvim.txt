 Web Optimization Project Beta The Web Optimization Project is a project that will automatically optimizes files in git repositories by compressing them losslessly This project was created by Devedse in an effort to save the world smirk If you have any questions feel free to create an issue or join the gitter chat Join the chat at Optimization The Web Optimization Project optimized this repository All optimizations compressions are done losslessly and no quality data is lost This is also verified afterwards by the Wop so you can be sure that your images are exactly the same Commits Commit Information Value Version Support file extension PNG JPG JPEG GIF BMP Statistics Stats Value Total bytes saved in this commit KB Files optimized in this repository FileName Original Size Optimized Size Bytes Saved Successful disabledbmp B B B True enabledbmp B B B True hi actionmakepng B B B False hi actionmakepng B B B True vim x gif B B B True vim x png B B B False vim x gif B B B True vim x png B B B False vim x gif B B B True vim x png B B B False vimlogogif KB KB B True tearoffbmp B B B True toolsbmp KB KB B False tools bmp KB KB B False Advancedpng KB KB B True Generalpng KB KB B True ibeampng B B B False vimnoshadow png KB KB KB True x cancelpng KB KB B True AquaTabNewpng KB B KB True AquaTabNewPressedpng KB B KB True AquaTabNewRolloverpng KB B KB True AquaTabsBackgroundpng KB B KB True AquaTabsDownpng KB B KB True AquaTabsDownGraphitepng B B B True AquaTabsDownNonKeypng B B B True AquaTabsSeparatorpng B B B True AquaTabsSeparatorDownpng B B B True overflowImagepng B B B True overflowImage xpng KB B KB True overflowImagePressedpng B B B True overflowImagePressed xpng KB B KB True pipng KB B KB True TabCloseFrontpng B B B True TabCloseFront xpng KB B KB True TabCloseFrontPressedpng B B B True TabCloseFrontPressed xpng KB B KB True TabCloseFrontRolloverpng B B B True TabCloseFrontRollover xpng KB B KB True TabNewMetalpng KB B KB True TabNewMetal xpng KB B KB True TabNewMetalPressedpng KB B KB True TabNewMetalPressed xpng KB B KB True TabNewMetalRolloverpng KB B KB True TabNewMetalRollover xpng KB B KB True Warningpng KB B KB True startpagegif KB KB B True Attentionpng KB KB B True Copypng B B B True Cutpng KB KB B True FindHelppng KB KB B True FindNextpng KB B B True FindPrevpng KB B B True Helppng KB KB B True LoadSesnpng KB KB KB True Makepng KB KB B True Openpng KB KB B True Pastepng KB B B True Printpng KB KB B True Redopng KB KB B True Replacepng KB KB B True RunCtagspng KB KB B True RunScriptpng KB KB B True Savepng KB KB B True SaveAllpng KB KB B True SaveSesnpng KB KB KB True TagJumppng KB KB B True Undopng KB KB B True ToolbarLbmp KB KB B False ToolbarMbmp B B B True When you set a borderless style on a subclasses window in the original behavior in which you could progressively draw partially on a stale window seems to be gone it blanks the thing after each draw Its totally unclear to me whether the CoreText engine as written was ever correct or maybe it just accidentally worked no documentation on the internets seems to indicate youre allowed to only draw CoreGraphics updates to a window in drawRect This works around it by drawing onto a background layer as soon as we receive the event from the vim backend and then simply copying the layer out to the window in drawRect nnfullscreen seems to work as do most common operations resizing is still wonkyugly any tips here appreciated not sure quite what Ill do and I havent dealt with DrawSignDrawType yet maintainers am I on the right track here Any tips addreses though not fully yet The use of a HTTP SUFeedURL opens the user up to a RCE vulnerability by MiTM attacks when the update feed is fetched See There have been complaints about the tab style in fullscreen mode for a long time Whydofullscreentabslookdifferent howcanimaketheactivemacvimtabmoreobviousinfullscreenmode It is easier for eyes to use the Metal style consistently in both normal mode and fullscreen mode See the following screenshots for comparison Before the patch img width altscreen shot at src After the patch img width altscreen shot at src Ive been using this simple fix for a couple of years and I think it might be better to send a PR for this Do you agree with me In the past months ive kept in sync MacVim with Vim development merging patches with the same process used by Bj rn Vim HG Git Merge In this pull request you have the latest Vim version and if you find this useful i can provide regular pull requests to keep in sync MacVim with Vim steady development process the decimal separator is a comma I did a little rearrangement of the methods that are called during the fullscreen animation and its almost working The problem When the animation finishes a gray line appears on the right side of the screen Call to self resizeWindowToFitContentSize vimView desiredSize keepOnScreenYES at the end of all animations fixes it but still for a second theres an annoying blink If anyone has any clues how to fix this it will be great annoyinggreycolumn 