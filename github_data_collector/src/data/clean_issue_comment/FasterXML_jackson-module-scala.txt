Hi I am using comfasterxmljacksonmodule jacksonmodulescala I am using a deserializer to read json message post into kafka At a time we faced a javalangClassCastException javalangInteger cannot be cast to javalangLong I dig into this issue and found the related issues in github and the FAQ that indicate to annotate offending field with JsonDeserialize I tried this with no success My case class look like this adapt like the one in the test case case class AnnotatedOptionLongWithDashJsonDeserializecontentAs classOf javalangLong valuelong Option Long I try to understand why the test in scala module works but not our code and found that this is because the property contain a dash and we kept the dash in the scala props Disgusting I finally try to add JsonProperty annotation to remove the dash and its working I am not sure this issue is related to jackson deserialization and can be fix or its scalajava that do something when a property have a dash in it At least it can help to add a note about this in the workarounds of the FAQ Here some tests case to reproduce the issue import comfasterxmljacksonannotationJsonProperty import comfasterxmljacksondatabindObjectMapper import comfasterxmljacksondatabindannotationJsonDeserialize import comfasterxmljacksonmodulescalaDefaultScalaModule ScalaObjectMapper import orgscalatestMatchers WordSpec case class AnnotatedOptionLongJsonDeserializecontentAs classOf javalangLong valueLong Option Long case class AnnotatedOptionLongWithDashJsonDeserializecontentAs classOf javalangLong valuelong Option Long case class AnnotatedOptionLongWithDashButChangeToCamelCaseJsonPropertyvaluelong JsonDeserializecontentAs classOf javalangLong valueLong Option Long class JacksonSerializationIssueTest extends WordSpec with Matchers val objectMapper new ObjectMapper with ScalaObjectMapper objectMapperregisterModulenew DefaultScalaModule def deserialize T data Array Byte implicit m Manifest T T try objectMapperreadValuedata catch case e Throwable throw new RuntimeExceptionError deserializing JSON message e def serialize T data T Array Byte try objectMapperwriteValueAsBytesdata catch case e Throwable throw new RuntimeExceptionError serializing JSON message e def useOptionLongv Option Long Long vmap getOrElse same as in test source of jackon library in check deserialization val v deserialize AnnotatedOptionLong valueLong getBytes v shouldBe AnnotatedOptionLongSome L v valueLongget shouldBe L serialize from case class then deserialize and then apply the method that will fail val v JacksonMapperdeserialize AnnotatedOptionLong JacksonMapperserializeAnnotatedOptionLongSome v shouldBe AnnotatedOptionLongSome L v valueLongget shouldBe L useOptionLongv valueLong shouldBe failing test because of backtick prop name either if we apply the annotation JsonDeserializecontentAs classOf javalangLong in check deserialization val v deserialize AnnotatedOptionLongWithDash valuelong getBytes v shouldBe AnnotatedOptionLongWithDashSome L v valuelongget shouldBe L serialize from case class then deserialize and then apply the method that will fail val v JacksonMapperdeserialize AnnotatedOptionLongWithDash JacksonMapperserializeAnnotatedOptionLongWithDashSome v shouldBe AnnotatedOptionLongWithDashSome L v valuelongget shouldBe L useOptionLongv valuelong shouldBe working solution because we rename the prop with a dash to a camel case prop in check deserialization val v deserialize AnnotatedOptionLongWithDashButChangeToCamelCase valuelong getBytes v shouldBe AnnotatedOptionLongWithDashButChangeToCamelCaseSome L v valueLongget shouldBe L serialize from case class then deserialize and then apply the method that will fail val v JacksonMapperdeserialize AnnotatedOptionLongWithDashButChangeToCamelCase JacksonMapperserializeAnnotatedOptionLongWithDashButChangeToCamelCaseSome v shouldBe AnnotatedOptionLongWithDashButChangeToCamelCaseSome L v valueLongget shouldBe L useOptionLongv valueLong shouldBe Initial question from google groups Im trying to serialize and deserialize an abstract class that has a type parameter but the deserialization isnt working Instead of deserializing the JSON into an object of the type parameters class Jackson deserializes it into a Map so Im unable to read the objects properties Here is the code scala import comfasterxmljacksonannotationJsonSubTypes JsonTypeInfo import comfasterxmljacksondatabindObjectMapper import comfasterxmljacksonmodulescalaDefaultScalaModule object GithubExample JsonTypeInfo use JsonTypeInfoIdNAME include JsonTypeInfoAsPROPERTY property type JsonSubTypesArray new JsonSubTypesTypevalue classOf ResultWrapperSuccess new JsonSubTypesTypevalue classOf ResultWrapperFailure trait ResultWrapperInterface T protected def obj T case class ResultWrapperSuccess T result T extends ResultWrapperInterface T override protected def obj T result case class ResultWrapperFailure F failure F extends ResultWrapperInterface F override protected def obj F failure case class Username String age Option Int def mainargs Array String Unit val mapper new ObjectMapper mapperregisterModuleDefaultScalaModule val user UserJohn Smith Some val serializedUser mapperwriteValueAsStringuser printlns serializedUser serializedUser val deserializedUser mapperreadValueserializedUser classOf User printlns deserializedUser deserializedUser printlns deserializedUsername deserializedUsername val wrapperSuccess ResultWrapperSuccess User user val serializedSuccess mapperwriteValueAsStringwrapperSuccess printlns serializedSuccess serializedSuccess val deserializedSuccess mapperreadValueserializedSuccess classOf ResultWrapperInterface User deserializedSuccess match case ResultWrapperFailure case success ResultWrapperSuccess User printlns success success printlns successresult successresult printlns successresultname successresultname The first part when we serialize and deserialize the User object works just fine The code breaks on when it tries to access successresultname because successresult is somehow a Map instead of a User Here is the output scala serializedUser nameJohn Smithage deserializedUser UserJohn SmithSome deserializedUsername John Smith serializedSuccess typeGithubExampleResultWrapperSuccessresultnameJohn Smithage success ResultWrapperSuccessMapname John Smith age successresult Mapname John Smith age Exception in thread main javalangClassCastException scalacollectionimmutableMapMap cannot be cast to GithubExampleUser at GithubExamplemainGithubExamplescala at GithubExamplemainGithubExamplescala As evidenced by the logs the serialization seems to be working just fine Is there something I need to change to get the deserialization working I get this exception Can not construct instance of scalautilTry problem abstract types either need to be mapped to concrete types have custom deserializer Compilation fails due to major changes in jacksondatabind NOTE moved from jacksondatabind on Sep by cowtowncoder Version Jackson probably also We have an API server that receives requests then makes ElasticSearch requests using the elastic s library The JSON parsing is done using Jackson under the hood We ve noticed a lot of threads blocked on the synchronized blocks in the LRUMap data structure which seems to be contributing to slow performance on our API server Several threads are blocked on puts to the map for example javalangThreadState BLOCKED on object monitor at comfasterxmljacksondatabindutilLRUMapputIfAbsentLRUMapjava waiting to lock x be a comfasterxmljacksondatabindutilLRUMap at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryconstructMapLikeTypeTypeFactoryjava at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon constructTypeJacksonSupportscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperanonfunconstructType ScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperLambda applyUnknown Source at scalacollectionimmutableListmapListscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon constructTypeJacksonSupportscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperanonfunconstructType ScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperLambda applyUnknown Source at scalacollectionimmutableListmapListscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon constructTypeJacksonSupportscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperanonfunconstructType ScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperLambda applyUnknown Source at scalacollectionimmutableListmapListscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon constructTypeJacksonSupportscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperreadValueScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperreadValueScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon readValueJacksonSupportscala at comsksamuelelastic shttpResponseHandlerfromEntityResponseHandlerscala at modelsesESHttpClientBackendGetMappingHttpExecutableanon handleESHttpClientBackendscala at comsksamuelelastic shttpHttpClientanonfunexecute HttpClientscala at comsksamuelelastic shttpHttpClientLambda applyUnknown Source at scalautilSuccessanonfunmap Tryscala at scalautilSuccessmapTryscala at scalaconcurrentFutureanonfunmap Futurescala at scalaconcurrentFutureLambda applyUnknown Source at scalaconcurrentimplPromiseliftedTree Promisescala at scalaconcurrentimplPromiseanonfuntransform Promisescala at scalaconcurrentimplPromiseLambda applyUnknown Source at scalaconcurrentimplCallbackRunnablerunPromisescala at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava and another thread blocked on clear javalangThreadState BLOCKED on object monitor at javautilconcurrentConcurrentHashMapclearConcurrentHashMapjava locked x a javautilconcurrentConcurrentHashMapTreeBin at comfasterxmljacksondatabindutilLRUMapclearLRUMapjava at comfasterxmljacksondatabindutilLRUMapputIfAbsentLRUMapjava locked x be a comfasterxmljacksondatabindutilLRUMap at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromParamTypeTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromAnyTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryresolveSuperInterfacesTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryfromClassTypeFactoryjava at comfasterxmljacksondatabindtypeTypeFactoryconstructMapLikeTypeTypeFactoryjava at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon constructTypeJacksonSupportscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperanonfunconstructType ScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperLambda applyUnknown Source at scalacollectionimmutableListmapListscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperconstructTypeScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon constructTypeJacksonSupportscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperreadValueScalaObjectMapperscala at comfasterxmljacksonmodulescalaexperimentalScalaObjectMapperreadValueScalaObjectMapperscala at comsksamuelelastic sjsonJacksonSupportanon readValueJacksonSupportscala at comsksamuelelastic shttpResponseHandlerfromEntityResponseHandlerscala at modelsesESHttpClientBackendGetMappingHttpExecutableanon handleESHttpClientBackendscala at comsksamuelelastic shttpHttpClientanonfunexecute HttpClientscala at comsksamuelelastic shttpHttpClientLambda applyUnknown Source at scalautilSuccessanonfunmap Tryscala at scalautilSuccessmapTryscala at scalaconcurrentFutureanonfunmap Futurescala at scalaconcurrentFutureLambda applyUnknown Source at scalaconcurrentimplPromiseliftedTree Promisescala at scalaconcurrentimplPromiseanonfuntransform Promisescala at scalaconcurrentimplPromiseLambda applyUnknown Source at scalaconcurrentimplCallbackRunnablerunPromisescala at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava Based on heap dumps we see that the typeCache map in TypeFactory is getting filled up quickly with type information for the JSON objects we re parsing then the map is getting cleared then the process is repeated quickly Since the clear operation is relatively expensive and inside a synchronized block it blocks all other threads from making progress and this can happen repeatedly in a short period of time We could replace the ConcurrentHashMap with a synchronized LinkedHashMap with an LRU eviction policy andor increase the size of the cache Either way clearing the cache seems like an inefficient solution especially when many threads are trying to use the cache This is the part of FasterXMLjacksondatabind that relates to changes to the jacksonmodulescala project Adding power support Here is my scala code scala case class Ab B class Bid Int JsonIgnore def x id object MyApp def mainargs Array String Unit val objectMapper new ObjectMapper objectMapperregisterModuleDefaultScalaModule val a objectMapperreadValueb classOf A I get the following exception when I run this code Exception in thread main comfasterxmljacksondatabindexcMismatchedInputException Cannot construct instance of B although at least one Creator exists no intIntargument constructorfactory method to deserialize from Number value at Source Stringb line column through reference chain A b at comfasterxmljacksondatabindexcMismatchedInputExceptionfromMismatchedInputExceptionjava at comfasterxmljacksondatabindDeserializationContextreportInputMismatchDeserializationContextjava at comfasterxmljacksondatabindDeserializationContexthandleMissingInstantiatorDeserializationContextjava at comfasterxmljacksondatabinddeserValueInstantiatorcreateFromIntValueInstantiatorjava at comfasterxmljacksondatabinddeserstdStdValueInstantiatorcreateFromIntStdValueInstantiatorjava at comfasterxmljacksondatabinddeserBeanDeserializerBasedeserializeFromNumberBeanDeserializerBasejava at comfasterxmljacksondatabinddeserBeanDeserializerdeserializeOtherBeanDeserializerjava at comfasterxmljacksondatabinddeserBeanDeserializerdeserializeBeanDeserializerjava at comfasterxmljacksondatabinddeserSettableBeanPropertydeserializeSettableBeanPropertyjava at comfasterxmljacksondatabinddeserBeanDeserializerdeserializeWithErrorWrappingBeanDeserializerjava at comfasterxmljacksondatabinddeserBeanDeserializerdeserializeUsingPropertyBasedBeanDeserializerjava at comfasterxmljacksondatabinddeserBeanDeserializerBasedeserializeFromObjectUsingNonDefaultBeanDeserializerBasejava at comfasterxmljacksondatabinddeserBeanDeserializerdeserializeFromObjectBeanDeserializerjava at comfasterxmljacksondatabinddeserBeanDeserializerdeserializeBeanDeserializerjava at comfasterxmljacksondatabindObjectMapperreadMapAndCloseObjectMapperjava at comfasterxmljacksondatabindObjectMapperreadValueObjectMapperjava at MyAppmainMapperTestscala at MyAppmainMapperTestscala However when Bx is defined as def x the deserialization works fine How is that possible Is this a bug in jackson or in jacksonmodulescala or did I miss something CWE Inclusion of Functionality from Untrusted Control Sphere CWE Download of Code Without Integrity Check The build files indicate that this project is resolving dependencies over HTTP instead of HTTPS Any of these artifacts could have been MITM to maliciously compromise them and infect the build artifacts that were produced Additionally if any of these JARs or other dependencies were compromised any developers using these could continue to be infected past updating to fix this This vulnerability has a CVSS v Base Score of This isnt just theoretical POC code has existed since to maliciously compromise a JAR file inflight See MITM Attacks Increasingly Common See Comcast continues to inject its own code into websites you visit over HTTP Source Locations Public Disclosure Option File for a CVE A project maintainer for this project should probably file for a CVE number to inform the public about this vulnerability in the build for this project The goal is to inform the public that there was a potential for published build artifacts to have been maliciously compromised in earlier releases If a maintainer on this project works for or is associated with a CNA please have them file it with them cvemitreorgcverequestidhtml Otherwise an open source CVE should be filed for here iwantacveorg Option Manually validate the release artifacts If this projects build is fully reproducible An alternative to filing for a CVE is to go back and build the earlier releases with the HTTPS patch applied to confirm the artifacts were not tampered when they were built This can be done by comparing the hashes of the artifacts built locally with the ones published If the hashes of all previous artifacts match those that are published you can safely assume that the releases were not tampered with Again this assumes that the build if fully reproducible and will require significantly more work