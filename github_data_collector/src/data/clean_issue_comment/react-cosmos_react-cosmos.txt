I thought Id give some feedback on how the could be better Im happy to help with some of these items but better to write them down and discuss them first x The website works really well as a marketing site right now but it doesnt really capitalize on that by calling users to action It should tell them to Get Started or Install with either a big button to some docs or with a CLI command they can run to get going maybe even both x The website also doesnt really help people who are looking for docs Linking to GitHub is a good start but its not my first choice when looking for a nicer documentation experience It would be great if the website had full documentation but even just having a Documentation link that sends you to the README would be better x Designwise the site is beautiful but the scroll animations are a bit annoying when youre trying to find something quickly on the page Firing the animations once on the way down is okay and maybe making them a little bit shorter timewise and more subtle but they should be mostly static after that It would also be great if the site respected prefersreducedmotion as some users like myself get slightly nauseous when theres lots of animation One of the biggest things that Ive found drives adoption of open source projects is finding out that a bunch of bigger companies use the project too Early on in Babel when I introduced the babeljsiousers page it quickly became one of the highest traffic pages When people see names like Facebook Netflix Mozilla etc they feel like the project has been well vetted already You might not even realize how many big companies are using your project until you start asking for them to tell you x If possible it would be great if you could find a way to embed Cosmos itself onto the homepage even if it is just iframed in Especially if you could use something like to guide them through all the different features Alternatively the homepage could use more screenshots demoing the functionality of Cosmos People like to see what you are talking about more than they like reading about it x The Benefits section are good points but some of them may not be obvious to users and they may want additional information It would be great to have some sort of subtext that drives each point home and puts them in context x React Cosmos can be used in powerful ways Snapshot and visual regression tests are possible this sounds like a roundabout way of telling people they have to do work to set it up So for starters you should try to make both of these really really easy to setup and second you should emphasize how easy it is to setup Also Open Platform is kinda a bold claim that sounds like marketing it would be better to say something like Extensible x I appreciate that you dont bother mentioning Storybook on the website A lot of users will ask you for that comparison but itll only do one of two things Make the project seem bitter about Storybook or make it seem like the benefits arent all that significant Its much better to focus on making your users so happy they spread the word for you Focus on what makes Cosmos an amazing tool and the rest really does follow That being said you should have something to say to people when they ask you what the difference is from Storybook I would again focus on the experience of Cosmos over Storybook and how youre a much more focused project with just React support for now and youre being very detail oriented I also just want to put out there that I think its important that the website has all of the docs on how to use Cosmos READMEs dont drive nearly as much adoption as websites and even really well done docs on GitHub dont have the same impact as a website with even poorly done docs People will say the project isnt well documented if the site doesnt contain lots of documentation Sorry if this was too much of a brain dump Ive worked on a lot of marketing sites for projects like Babel Yarn and Flow so I have a lot of strong opinions Youve done a great job already though Whats wrong Our repo has a large number of files its a huge Rails app HMR was very slow in our app seconds By setting watchDirs frontendcomponents I was able to speed HMR up to seconds Curiously if the component and fixture file are in the root of the repo the rebuild is ms I tried every combination I could think of and the only way to keep the HMR rebuild in that ms range and still keep components in our frontendcomponents directory is to set watchDirs which despite what you might think still watches fixtures and the component files just fine So Cosmos is working well for me now but there must be something funny going on with the watchDirs code as it seems like it should not work when set to an empty array Steps to reproduce Apologies but I wasnt able to create a minimal reproducible case Happy to test an possible fixes in our repo though User info This is the console output when using watchDirs frontendcomponents Server console output Cosmos webpack build invalidated by frontendcomponentsbuttonjs webpack building webpack built ddb fbb afc fe in ms Browser console output HMR bundle rebuilding clientjsreloadtrue overlayfalse HMR bundle rebuilt in ms processupdatejs HMR Checking for updates on the server processupdatejs HMR Updated modules processupdatejs HMR frontendcomponentsbuttonjs processupdatejs HMR frontendcomponentsfixturesbuttonfixturejs processupdatejs HMR nodemodulesreactcosmosdistpluginswebpackclientuserDepsjs processupdatejs HMR App is up to date Cosmos version alpha And the browser console output when using watchDirs HMR bundle rebuilding clientjsreloadtrue overlayfalse HMR bundle rebuilt in ms processupdatejs HMR Checking for updates on the server processupdatejs HMR Updated modules processupdatejs HMR frontendcomponentsbuttonjs processupdatejs HMR frontendcomponentsfixturesbuttonfixturejs processupdatejs HMR nodemodulesreactcosmosdistpluginswebpackclientuserDepsjs processupdatejs HMR App is up to date Whats wrong When using yarn plug n play I cannot run cosmos since it tries to import the debug package without having it declared in its dependencies although I dont know if this is because yarn is more strict with respect to dependencies I cloned the reactcosmos repo and added debug to packagesreactcosmospackagejson and it worked reactcosmosvoyager is missing lodash