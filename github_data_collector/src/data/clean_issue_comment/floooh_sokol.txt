When building the Android examples sokolaudioh fails to build fips build grep error sokolsokolaudioh error undefined reference to slCreateEngine sokolsokolaudioh error undefined reference to SLIIDENGINE sokolsokolaudioh error undefined reference to SLIIDVOLUME sokolsokolaudioh error undefined reference to SLIIDVOLUME sokolsokolaudioh error undefined reference to SLIIDVOLUME sokolsokolaudioh error undefined reference to SLIIDANDROIDSIMPLEBUFFERQUEUE sokolsokolaudioh error undefined reference to SLIIDPLAY clang error linker command failed with exit code use v to see invocation Environment MacBook Pro OSX Catalina This is easiest to see with the imguimetal sample when you resize the OS window from the right side the contents of the window exhibit an ugly judder effect This appears to be the same issue discussed here What s happening is often the new Metal frame doesn t arrive in time and it draws a stretched version of the previous frame instead Tristan Hume provides a test program that seems to fix the issue written in Swift but its pretty easy to port to Objective C Note that it doesnt include any animation all of the rendering is explicit rather than happening on a timer or being synced to the display refresh rate which might be fine for a purely event driven application but not for one that does smooth animation As far as I understand it MTKView which sokolapph appears to be using provides displaysynced updates automatically but it appears that it may not be configurable enough to fix the issue you may have to use CAMetalLayer directly in a custom subclass of NSView that implements the CALayerDelegate protocol Theres an Apple sample app here that demonstrates how to implement a displaysynced render loop using CVDisplayLink Unfortunately I havent personally succeeded in modifying this demo to fix the resize judder issue although I could have easily missed something Ive only just started learning how to use explicit graphics APIs like Metal Ive mostly used Unity for my graphics projects so far and would love to know if you have any insight into how to fix this issue properly Currently the only supported matrix type is x For any D ops a x matrix is all that is required Hi just a question do you have any intention or plans to support Wayland on Linux Theres a lot of STUFF that needs doing for Wayland and fitting it into a singleheader library may not be desirable so its pretty reasonable if you arent going to do it but I was wondering if youd given any thought about how it might work with sokolapphs existing design blockquote classtwittertweetp langen dirltra href possible idea for sokolgl that should be easy to do add an option to record draw lists begindrawend gt list Can be very useful because often you want to visualize things in an algorithm that runs only once Even better if one can then redraw only up to a pointp mdash c de eAngeloPesce kenpex a href ablockquote Possible API sglbeginlistvoid sgllist sglendlistvoid sgldrawlistsgllist possibly sgldeletelistsglist When inside beginend list cmd and vertex recording goes into separate and persistent list buffers I discovered Sokol a few days ago and notice that i dont need to use SDLGLFW with it because of sokolapp since it already does what i normally want with sdl windowsmouseinput My question is how far will I go with sokol alone without hitting some problem that will make me rethink the use of SDL Looks like i dont need SDL anymore which is great single dependency P but i m missing something obvious here See branch with HTML and OSX implemented for Linux support see but only with usercreated offscreen render targets to reproduce Start mrtsapp with the Metal backend resize and watch memory usage Currently the resizedevent is fired in the windowDidResize event check what happens if this is moved into the frame loop just like on Windows About of the time when I launch on macOS my app fails to launch in fullscreen and is instead shown in a window When I run in fullscreen and switch between spaces the sokol app sometimes becomes unresponsive beach ball It works correctly if I instead use cmdtab to switch between apps When its frozen if I cmdtab away and back it becomes responsive again This is on macOS latest sokol code Your sokolfetch header is an awesome way to load resources in parallel while keeping the interactivity of the application animated loading screens but it currently assumes that the only critical time an application spends is in the fetching of the resources Most of the times decoding processing the fetched resource like decoding jpeg data preparing the mipmaps takes a significant percent of the time It would be awesome if we had a ready state similar to dispatched fetched states that will be called from the IO thread in order to processdecodeparse the resource in parallel The idea is that after the ready state we would use the fetched or another processed state to handle the resource in the main thread in order to upload the decodedprocessed buffer on the GPU or any other operation that needs these data ready available in the main thread minimizing the time spent on the main thread Im not sure if this idea fits into the sokolfetch library or it should be another more generic sokoltasks library I couldnt find a similar quality C library like yours that could satisfy my needs and I would love to see that happening