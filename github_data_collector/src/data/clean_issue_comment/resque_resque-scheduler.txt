When I did vulnerability diagnosis at my company the vulnerability scanner found the delayedsearch page is susceptible to XSS This fixes that issue There doesnt seem to be a simple way to turn off the scheduler once it has started If I have queues each processing jobs at a certain interval what is the recommended way to halt one queue from processing but allow another queue to keep processing If this is not possible is there a simple way to turn off the scheduler altogether see delayedcancelnow calls Resqueremovedelayedjobfromtimestamp which expects the job to be queued in the queue that defined in the job class But its not always the case In our codebase we sometimes dont define queues at all and either defining the queue in resquescheduleryml or Resqueenqueueatwithqueue I suggest showing queue column in the delayed jobs search result passing the queue as a parameter to delayedcancelnow and using jobtohashwithqueue to encode the job This will also help it deal with constants that are not autoloaded and dependent on Rails lazy load I am unable to start resquescheduler process in the background by using the BACKGROUNDyes flag The command which i am using is BACKGROUNDyes usrbinbundle exec usrbinrake environment resquescheduler RAILSENVdevelopment resquescheduler process starts successfully after running this but the rake process doesnt exit as it should after providing the BACKGROUNDyes flag After the schedules get loaded instead of running the scheduler in the background jobs start getting enqueued in the foreground resquescheduler INFO Rails T Schedules Loaded resquescheduler INFO Rails T queueing RequeueThrottledJob requeuethrottledjob Checked this on a different terminal ec userip ps aux grep resque grep scheduler ec user Sl resquescheduler development Schedules Loaded Strange thing to note here is that this issue doesnt appear when using rails application The rake process exits and resquescheduler starts running in the background as soon as the schedules get loaded These are the OS and package versions im using OS Amazon Linux resquescheduler ruby rails I have a situation where K dynamic jobs were created before we realized that this approach was not going to work were using a static schedule now that is much saner To clean up all of the persisted schedules using the public interface is straightforward ruby Resqueschedulekeys YAMLloadfilepath to schedule filekeyseach do toremove Resqueremovescheduletoremove end However this will not only make one hdel call to redis for each key but will also reload the entire schedule each time I can imagine a simple change to the removeschedule method that would allow a variable number of schedules to be removed at once ruby def removescheduleschedules scheduleseach schedule nonpersistentschedulesdeleteschedule redishdelpersistentschedules schedules redissaddscheduleschanged schedulesfirst reloadschedule end What do you guys think about that Happy to make a PR if that makes sense As the fix in is merged onto master it will make sense to make a new release semantically versioned as a patch release for v since it fixes a bug in v Although I wrote this in the merged PR I am creating this as a separate issue for you maintainers to keep track of Release patch for v containing PR Once again thanks for your work of maintaining this library Open source maintentance sometimes is hard boring and perhaps even unrelated as maintainers often move forward to other projects Thanks for your work finddelayedselection works but not the enqueue function The jobs remain queued up Heres what I was trying to do result Resquefinddelayedselection args args jobid selfshowingmetaautocanceljobid ap result class ActiveJobQueueAdaptersResqueAdapterJobWrapper args jobclass AdvanceShowingJob jobid bfce cdec bca f c b a providerjobid null queuename default priority null arguments ajglobalid gidschedulerapiShowing eautocancel executions locale en queue default result Resqueenqueuedelayedselection args args jobid selfshowingmetaautocanceljobid ap result Right now were using a TimeWithZone date saved on an object for the enqueueat time In some cases it wont properly enqueue unless I add a duration for instance enqueueatobjecttimewithzone HandlerClass objectid vs enqueueatobjecttimewithzone seconds HandlerClass objectid In both cases the time passed to enqueueat is a TimeWithZone The interesting thing is I can see the second job appear in the delayed queue but not the first However if I use removedelayed it will remove both jobs making me think it might be something to do with the timestamp