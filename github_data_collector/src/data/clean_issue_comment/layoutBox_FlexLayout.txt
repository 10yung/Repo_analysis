Bumps rubyzip from to details summaryRelease notessummary Sourced from rubyzips releases v Security Add validateentrysizes option so that callers can trust an entrys reported size when using extract This option defaults to false for backward compatibility in this release but you are strongly encouraged to set it to true It will default to true in rubyzip New Feature Add addstored method to simplify adding entries without compression Tooling Documentation Add more gem metadata links v Do not rewrite zip files opened with openbuffer that have not changed Tooling Documentation Update examplerecursiverb in README Hold CI at trusty for now automatically pick the latest ruby patch version use rbx and hold jruby at details details summaryChangelogsummary Sourced from rubyzips changelog Security Add validateentrysizes option so that callers can trust an entrys reported size when using extract This option defaults to false for backward compatibility in this release but you are strongly encouraged to set it to true It will default to true in rubyzip New Feature Add addstored method to simplify adding entries without compression Tooling Documentation Add more gem metadata links Do not rewrite zip files opened with openbuffer that have not changed Tooling Documentation Update examplerecursiverb in README Hold CI at trusty for now automatically pick the latest ruby patch version use rbx and hold jruby at details details summaryCommitssummary e d ea Merge pull request from rubyzipv c e e Bump version to d fe b Merge pull request from rubyzipchecksize cb ae Warn when an entry size is invalid f Default validateentrysizes to false for release f c Validate entry sizes when extracting b fa ci skip Update changelog ca Check expected entry size in addstored test bf Merge pull request from hainesraddstored ecb ZipFileaddstored to add uncompressed files Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Resolves Isolates all the C NonC code Adds a swift package manifest with targets for FlexLayout FlexLayoutYoga and FlexLayoutYogaKit Moves the public headers to the target include target folder per Apples documentation NSENUM typedefs dont seem to be translated to Swift enums when imported via a module Because of that static values were added to the various NSENUM types as extensions when in the context of a Swift package Perhaps theres a build setting to eliminate the need for that I have a selector and when i switch accountypes i want to hide certain textFields and the others come to Top Any ideas Example left top right bottom You can add small helper to make UIStackView like UI with spacing between items swift Set offset from other items in same container Assign same spacing for all items in container to make spacing like in UIStackView This method conflicts with setting vertical padding and margin discardableResult func spacingVertical value CGFloat Flex let offset value return paddingVerticaloffsetmarginVerticaloffset Set offset from other items in same container Assign same spacing for all items in container to make spacing like in UIStackView This method conflicts with setting horizontal padding and margin discardableResult func spacingHorizontal value CGFloat Flex let offset value return paddingHorizontaloffsetmarginHorizontaloffset Use like this swift view view view flexaddItemdirectioncolumndefine flex in flexaddItemview spacingVertical flexaddItemview spacingVertical flexaddItemview spacingVertical view flexaddItemdirectioncolumndefine flex in flexaddItemview spacingVertical Hello any plans to support Swift Package Manager soon Just asking If taking Bool as parameter we can use this function as we use isHidden property in UIView It will be more convenient I think Constraint doesnt work with flex layout I tried to add UILabel below flex layout without success Flex layout with adjusted height IntrinsicContentSize of flex container is Hello I made some layout like this holderViewflexdirectioncolumndefine flex in flexaddItemimageViewaspectRatio flexaddItemmarginTop directionrowalignItemscenterdefine flex in flexaddItembookmarkwidth height marginRight flexaddItemtitleLabelgrow And after some time I want to update layout and for example remove something holderViewflexdirectioncolumndefine flex in flexaddItemimageViewaspectRatio But in this case removed view bookmark titleLabel did not disappear from layout but they continue to layout in flex at the top of holderView Is this a bugfeature or I do something wrong The only solution I found is holderViewremoveAllSubviews holderViewflexdirection More interesting happened if I call initial layout several times In this case UIView created by flexaddItem duplicate again and again Old instances become empty but continue to layout in flex Currently I am achieving it via combination of margin on inner view and spacerviews I have following UI structure in a height adjustable UITableViewCell let textContainer UIView spaceBetween doesnt seem to add any space here textContainerflexdirectioncolumnalignItemsstartjustifyContentstartdefine flex in flexaddItemtickerContainergrow flexaddItemtitleLabelgrow marginVertical flexaddItemsubtitleLabelgrow flexdirectionrowpadding justifyContentstartdefine flex in flexaddItemimageViewaspectRatio flexaddItemsize Spacer view flexaddItemtextContainergrow shrink Using spacer view is good because if I change the flexdirection to column dynamically the spacer view still works as expected My concern with using spacerviews and margins is that we need the ability to hide certain labels In that case UI wont be consistent anymore because margins will be hidden andor spacer view should be hidden as well What are some of the easier ways to handle this 