I rewrote the library from scratch to get rid of all the old stuff CoffeeScript Grunt etc It is now written in ES and uses WebpackBabel to build The selectors should be the same as in previous version some may be a bit better combining between selector types is new The interface is changed should be simpler now All the original features are there but some options are renamed or merged You can see the migration instructions in documentation Same as but without jasmine update as requested in Florent When I ran npm audit I got a lot of security issues reported So I updated the packages Also note that I use browserlist in order to transpile into code supported by browsers whose market share is above using this line in packagejson Is it fine for you browserslist not dead Florent A quite simple patch to fix test stability feat Added idwhitelist and classwhitelist options feat Added rootnode option to get relative CSS selector feat Added a getoptions option Setting getoptions to a function that accepts an element as a parameter invokes the function for updating the options before the selector is generated In effect options become dynamic per element refactor Polyfill Arrayfind is moved from the test to src module refactor Removed polyfill Arrayfind updated READMEmd fczbkk I need the rootnode option for one of my projects Since the option doesnt change the original behaviour I will be grateful if it is kept Otherwise I need to maintain a fork works on Chrome should work on Firefox and any browser that supports the javascript synthax for URLs You might want to externally load the class for maintenance sake but as a proof of concept I found that simply including the minfied version was the easiest and good enough you might not like the phrasing I chose so feel free to change it Looks like a robust library Might you consider moving from CoffeeScript to ES including with ES Modules export Id recommend Rollup Thanks Hi me again sorry Im running this bit of code in the console documentaddEventListener mouseover functionevent var CSSstring findCSSPatheventtarget consolelogCSSstring where the findCSSPath function is just a wrapper for your css selector generator On the whole this works as expected Ive tested it on quite a few sites However on Im getting a silent failure from the code No errors but no CSS path sent to the console Eventually it causes Chrome to crash Theres clearly something odd about the structure of the site I dont know if this is the kind of thing you want reported but Im struggling to find the problem This works fine for most cases but breaks down with an error for some elements with Uncaught TypeError Cannot read property querySelectorAll of null img width altscreen shot at pm src The error in my case came when using this on this page and clicking on a div in Choose a datacenter region Im seeing an issue where a website with a large amount of classes on the html element causes the getCombinations to lock up on the following code for i k ref itemslength ref k ref k ref i ref k k for j l ref resultlength ref l ref l ref j ref l l resultpushresult j concatitems i In my case I have classes that are returned by getAllSelectors which I assume are generated by the UI libraries running on the website 