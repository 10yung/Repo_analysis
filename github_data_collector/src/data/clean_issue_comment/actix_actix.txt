The TryFutureExt extension trait offers functions like andthen and maperr for futures that return Result types It would be great to have these functions available on ActorFuture as well Allow the use of any type inside a ResponseFuture like Option instead of Result See doc test for details Also see This example works with actix It stoped working with and I found no mention of this in changes Also nothing about this in the docs or my googling didnt turn up the right doc Is this a regression rust pub struct MyActorAsync impl Actor for MyActorAsync type Context actixContextSelf fn started mut self ctx mut SelfContext debugMyActorAsync alive deriveDebug pub struct MyError impl stdfmtDisplay for MyError fn fmt self f mut stdfmtFormatter stdfmtResult writef DunnoWhat impl stderrorError for MyError fn source self Option dyn stderrorError static None pub struct MyQuestion impl Message for MyQuestion type Result ResultVecString MyError impl HandlerMyQuestion for MyActorAsync type Result Boxdyn FutureItem VecString Error MyError fn handle mut self question MyQuestion ctx mut ContextSelf SelfResult let fut futuresfutureokvectoowned Boxnewfut This is the error with rust error E the trait bound stdboxedBoxdyn futuresfutureFutureError actorMyError Item stdvecVecstdstringString static actixhandlerMessageResponseactorMyActorAsync actorMyQuestion is not satisfied srcactorrs impl HandlerMyQuestion for MyActorAsync in this impl item type Result Boxdyn FutureItem VecString Error MyError the trait actixhandlerMessageResponseactorMyActorAsync actorMyQuestion is not implemented for stdboxedBoxdyn futuresfutureFutureError actorMyError Item stdvecVecstdstringString static help the following implementations were found stdboxedBoxdyn actixfutActorFutureActor A Output stdresultResultI E static as actixhandlerMessageResponseA M error aborting due to previous error For more information about this error try rustc explain E error could not compile arangoq To learn more run the command again with verbose I noticed that there is actixioFramedWrite but there is no corresponding actixioFramedRead Is there a reason for this Since Futures doesnt require a Ok and an Err type anymore I see no reason for the MessageResponseA M for a ResponseActFutureA T to require that T is a Result The current code also doesnt add any constrains to the I and E used on the ResultI E so using any static type T for the ResponseActFuture here does seam more appropriated since its more generic Im trying implement some asynchronous actor response that uses the Actors self reference on actix v but I cant get it to work on the account of some lifetime bounds error Ive separated a small example that contains the error Rust use actixprelude deriveMessage rtyperesult Resultusize struct Msg struct MyActor impl Actor for MyActor type Context ContextSelf impl HandlerMsg for MyActor type Result ResponseActFutureSelf Resultusize fn handle mut self msg Msg mut ContextSelf SelfResult Boxnewselfreplyintoactorself impl MyActor async fn reply self Resultusize Ok But this gives me the following error error E cannot infer an appropriate lifetime for autoref due to conflicting requirements srcmainrs Boxnewselfreplyintoactorself note first the lifetime cannot outlive the anonymous lifetime defined on the method body at srcmainrs fn handle mut self msg Msg mut ContextSelf SelfResult Boxnewselfreplyintoactorself note so that reference does not outlive borrowed content srcmainrs Boxnewselfreplyintoactorself note but the lifetime must be valid for the static lifetime note so that the expression is assignable srcmainrs Boxnewselfreplyintoactorself note expected stdboxedBoxdyn actixfutActorFutureActor MyActor Output stdresultResultusize static found stdboxedBoxdyn actixfutActorFutureActor MyActor Output stdresultResultusize Ive tried to implement this using the ActorFuture and the them combinator but I get similar errors this is what I tried Rust fn handle mut self msg Msg mut ContextSelf SelfResult Boxnew async intoactorself then act actixfutwrapfutureactreply The problem seams to be that I can only have static references for the future I return but since the future will be handled by the Actor itself shouldnt it be able to use its own reference Are there examples for asynchronously handling messages I have only been able to find the doc example on ActorFuture witch is even a little bit outdated but its a bit of a different context since that doesnt use a reference to the actor on the futures it chains This PR fixes the ring example which terminates after just a few tens of messages is sent instead of waiting for all messages to flow through the ring which makes for a very misleading benchmark which is why I noticed Also adds some more informative output such as messages sent per second I know very little of actix as I started playing around with it today and I expect someone who knows actix to be able to do better but this is at least an improvement over the current state I have a actixweb API project and if the code inside the SyncArbiter crash the API get in a limbo state I start with rust pub fn runserver Result DbErr let sys actixrtSystemnewApi let pool DbopenserverNone let address AddrDbExecutor SyncArbiterstart move DbExecutorpoolclone let mut server HttpServernewmove Appnew dataaddressclone impl FromactixMailboxError for ServiceError fn fromerror actixMailboxError ServiceError ServiceErrorInternalServerErrorformat error Now maybe a unwrap fail Then I get LATER i get InternalServerErrorMailbox has closed When this error show up is unclear what cause it I wish the MailboxError have attached the cause And from it ALL THE REQUESTS WILL FAIL with the same error I wish the error only be for the request that cause it only not for all Exist a way to catch handle or restart it Attempting to create an alpine docker container with a rust program I faced with the following error error cannot produce procmacro for actixwebcodegen v as the target x unknownlinuxmusl does not support these crate types Is there a way to solve it Something seems to take out the stdfmtDisplay derive my bet is on derivemore most probably by use actixprelude because its actually the only actix use line I have in the code error cannot find derive macro Display in this scope srccontrollerrs deriveDebug Display error E controllerControllerError doesnt implement stdfmtDisplay srcrestserverrs impl ResponseError for ControllerError controllerControllerError cannot be formatted with the default formatter help the trait stdfmtDisplay is not implemented for controllerControllerError note in format strings you may be able to use or for prettyprint instead If I explicitly try to use stdfmtDisplay I get an additional warning warning unused import stdfmtDisplay srccontrollerrs use stdfmtDisplay note warnunusedimports on by default Explicitly using the derivemoreDisplay fixes that but its yet another dependency Im not keen on actually having