After almost years of developing and maintaining this project Ive decided that its time to archive this and all other repositories in the Fine Uploader organization and effectively shut down the project Ive decided to do this for a number of reasons here are a few I no longer have any use for an enterpriseclass JS upload library like Fine Uploader in my personal life or in any work projects I lack the motivation to continue to contribute to this project I lack the free time at this point in my life to continue to maintain and develop a project of this scale and the codebase has languished for a little while already Ive grown tired of continuously defending my inactivity and decisions against trolls on Twitter the issue tracker and elsewhere Its draining and I dont have the patience or energy to deal with it any longer These same people expect to impose their shortsighted and nongeneralized values and goals on a project for which they have contributed nothing and are not willing to maintain The sense of entitlement from a small but vocal minority that do not understand FOSS and refuse to understand it is very much a concern and Im simply not interested in shrugging that off anymore There isnt sufficient momentum behind this project any longer as such I havent been able to find the appropriate dedication from the community to not only continue developing this library but to maintain it going forward The first incarnation of this codebase is almost years old and the last major refactorrewrite was years ago Thats an eternity in frontend code years The amount of time required to bring the codebase back up to speed and adjust the mistakes I made years ago as a new frontend developer are simply not possible due to time and motivation constraints Im going to archive the project shortly but anyone of course is free to fork it and do whatever they please as this repo will still be available albeit in readonly mode Ive also locked this issue as Im not soliciting input Ive created this for transparency purposes For everyone that has helped out on this long journey I appreciate your efforts and I hope you understand that its time for this project to fade off into the sunset Fine Uploader was my first opportunity to develop something meaningful on the frontend and Ive been able to grow tremendously as a developer as a result I know Fine Uploader has been an important attribute of many applications and Im glad I was able to be a part of that Type of issue Bug report Uploader type Traditional S Note Support requests cannot be accepted due to lack of time details summaryBug Reportsummary Fine Uploader version Browsers where the bug is reproducible Any browser Operating systems where the bug is reproducible macOS Exact steps required to reproduce the issue For example Multiple uploads on validate on item limit eg Drag too many files eg All relevant Fine Uploaderrelated code that you have written Your Fine Uploader template markup if using Fine Uploader UI and the issue is UIrelated simply copy and paste your template markup Detailed explanation of the problem describe the bug here details Fine Uploader Caught exception in onError callback thisuploadDataretrieve is undefined utiljs qqlog utiljs log uploaderbasicapijs safeCallback uploaderbasicapijs wrapCallbacksselfoptionscallbacks callbackName uploaderbasicapijs batchError uploaderbasicapijs batchError uploaderapijs onValidateBatchCallbackSuccess uploaderbasicapijs qqbind utiljs handleCheckedCallback uploaderbasicapijs prepareItemsForUpload uploaderbasicapijs prepareItemsForUpload uploaderapijs addFiles uploaderbasicapijs processingDroppedFilesComplete uploaderapijs uploadDroppedFiles dndjs onDrop dndjs then promisejs onDrop dndjs attachEvents dndjs and therefore any callbacks hang then Type of issue x Bug report Uploader type x Traditional details summaryBug Reportsummary Fine Uploader version Browsers where the bug is reproducible Firefox Operating systems where the bug is reproducible Windows Exact steps required to reproduce the issue For example Set autoUpload false Add a blob addFiles blob Call uploadStoredFiles All relevant Fine Uploaderrelated code that you have written javascript src is a base encoded image fetchsrc thenres resblob thenblob uploadermethodsaddFiles blob uploadermethodsuploadStoredFiles details Detailed explanation of the problem details Blob uploads only work with auto upload It fails if autoUpload is set to false and uploadStoredFiles is called subsequently It returns No files error details Hi thanks for this great library I found one issue when using stopOnFirstInvalidFile and dialog elements in Chrome Type of issue x Bug report Feature request Uploader type x Traditional S Azure details summaryException when you use stopOnFirstInvalidFile true option and native dialogssummary Fine Uploader version Browsers where the bug is reproducible Chrome Operating systems where the bug is reproducible Windows Exact steps required to reproduce the issue Use validationstopOnFirstInvalidFile true because you dont want to stop uploading files when you select a lot of files and some of them dont pass validation because their extensions is not provided in validationallowedExtensions list Use HTML dialog element in template Drag and drop two files with extensions that are not specified on validationallowedExtensions list Error in browser occurs and uploader state is messed up visible loader after you close dialog And when you close dialog you got loader thats still visible Looks that we try to call showModal on already opened HTMLDialogElement and this is causing error Quick fix is to just not use dialog element and use alert or some other custom popup But since dialog are in default templates and normally just works out of the box on Chrome it would be nice to have it working in this case also I guess the best experience is to show second message after first one is close to resemble behavior of alert calls but simply showing first message and ignoring other would be ok too at least there wont be an error All relevant Fine Uploaderrelated code that you have written Just parts of code because I cant share everything js const fineUploader new qqFineUploader element element template templateDomElement validation stopOnFirstInvalidFile false allowedExtensions jpg jpeg png showMessage message alertmessage html div classqqtotalprogressbarcontainerselector qqtotalprogressbarcontainer div roleprogressbar ariavaluenow ariavaluemin ariavaluemax classqqtotalprogressbarselector qqprogressbar qqtotalprogressbardiv div dialog classqqalertdialogselector stylemarginleftauto marginrightauto div classqqdialogmessageselectordiv div classqqdialogbuttons button typebutton classqqcancelbuttonselectorHtmlGetResourceClosebutton div dialog Stack trace templatingjs Uncaught DOMException Failed to execute showModal on HTMLDialogElement The element already has an open attribute and therefore cannot be opened modally at qqTemplatingshowDialog at ObjectshowMessage at qqFineUploaderitemError at qqFineUploadervalidateFileOrBlobData at qqFineUploaderonValidateCallbackSuccess at ObjectonSuccess at qqFineUploaderhandleCheckedCallback at details Type of issue Bug report X Feature request Uploader type X Traditional S Azure details summaryFeature Requestsummary Allow resume data to be removed for a particular file iduuid to allow the possibility of restarting an upload without resuming details Type of issue Bug report X Feature request Uploader type X Traditional S Azure details summaryFeature Requestsummary The getResumableFilesData function could return a few extra bits of interesting information eg the amount already uploaded number of total parts and the id of the localStorage key In fact I think it might already be trying to add the key to the object but it is retrieving it from the wrong place uploadDatakey instead of just key if uploadDatakey datakey uploadDatakey Would it be possible to also return these in the getResumableFilesData data structure details Type of issue Bug report x Feature request Uploader type Traditional S x Azure details summaryGetSasKey cache storage to avoid asking for a new sas key if the last one is still valid for a long time summary If a sas key has a lifetime of minutes and the last request was made seconds before it is not required to request a new one It is more important with concurrent calls many calls for a same sas key We use MB chunks and concurrent is enabled Mb is a good compromise for bad connections and concurrent helps good connections Before each PUT request a call is made to get a fresh SaS key Our SasKey duration is minutes Client may avoid requesting the server for a fresh SasKey during for instance minute Why this avoid for a very good connection to got many getSasKey request while the SasKey is still valid Why not much more than minute for bad connections to avoid having an invalid saskey for a given block blob Possible evolutions an option to specify a sasKeyStorage if not set still as actually and if one is given then fineupload will try to use it first before sending a request not as good as the first one because not good with all browsers an option to avoid adding timestamp withcacheburst method so that the server can set an http cache respone to minute for instance browser cache details Type of issue Bug report x Feature request Uploader type Traditional x S Azure details summary Im creating a crossdevice application Im using reactnative web to build a web and native application sharing code I almost nailed it using the fineuploader to upload a video to S using the fineuploader library But unfortunately I couldnt get it to work for native I got it to work in Reactjs using the basic uploader without the dropzone you provide because of reactnative doesnt use html and css Here is my example js import qq from fineuploaderlibcores let file eventtargetfiles let uploader new qqs FineUploaderBasic request endpoint endpoint accessKey accessKey uploaderaddFilesname filename blob file Amazing how easy this was im retrieving the file via a file input On react native I use Expo ImagePicker The FineUploaderBasic is perfect but it lives in the same file which uses code for the Element which i dont need This code contains documentcreateElementinput navigatoruserAgent and probably more code which is not available in reactnative So when I import fineuploaderlibcores I get errors like Cant find document Is it possible that the FineUploaderBasic would live in its own file So you can import it separate like import FineUploaderBasic from fineuploaderlibcores FineUploaderBasic summary Feature request details reactnativeweb is really cool sharing almost all your code over native and web Probably more people would like to upload videos to S easily via the fineuploader library details Type of issue Bug report x Feature request Uploader type x Traditional S Azure Note Support requests cannot be accepted due to lack of time details summaryFeature Request Allow to reorder images in the drag n drop area updating an index attribute in themsummary details summaryFeature Request Allow to reorder images in the drag n drop area updating an index attribute in themsummary Feature request details Add the possibility of reordering images once uploaded Assign an index to every image and allow reordering them through drag n drop We are building this interface where first we are uploading the images to our local server and then later after posting a form this images will fly to a remote location As part of the requirements for the job we have the chance of ordering the uploaded images before submitting details Type of issue Bug report x Feature request Uploader type x Traditional x S x Azure details summaryFeature Requestsummary Feature request details I think it is better to provide a use case You have a video stream recorderwebcam audio desktop etc During recording it generates Blobs which must be uploaded to S Currently Fineuploader suppots only complete files which will be splitted to chunks and uploaded Request is to provide more low level API for multipart chunked uploading for example javascript let fileId uploaderInstancecreateMultipartUpload uploaderInstanceaddChunkfileId blob uploaderInstanceaddChunkfileId blob uploaderInstanceaddChunkfileId blob uploaderInstancecompleteMultipartUploadfileId details 