Since building and testing are free on Github at least for now this will enable them Seems it was missing a Y at the end Im working on implementing an xmlrpc client in rust but I cant get Values to deserialize correctly For example integer values have this format xml valuei i value I have these struct enum definitions rust deriveDebug Deserialize PartialEq Serialize serderename value struct Value value Type deriveDebug Deserialize PartialEq Serialize enum Type serderename int alias i Integer serderename value i serderename boolean Boolean serderename value bool serderename string String serderename value String serderename double Double serderename value f However this expects duplicate value tags surrounding the int like this valuevaluei i valuevalue If I add the transparent serde attribute to Value like this rust deriveDebug Deserialize PartialEq Serialize serdetransparent rename value struct Value value Type It drops both value tags and only accepts strings like i i where I think transparent should drop only the inner value tag rust definition deriveDebug Deserialize PartialEq struct After serderename value body OptionString xml fragment After CDATA some string After body field is set to None PR fixes some of this behavior with the existing interactions of serde and reader but overall the implementation needs to be revisited Heres the issues Ive encountered so far Inner enums without rename will fail to deserialize Inner enums with rename attribute will fail to deserialize unless the rename is value flatten attribute does not work Vector of enums will fail to deserialize regardless of rename usage Nested containers without rename of value will fail to deserialize Ive been trying to make things work better in my PR but the rest of these issues would take a significant overhaul of the code escapeunescape tries to recognize HTML entities so hard that it simply fails on nonentity character sequence that contains and Simple case xml aa ba causes an error XmlEscapeErrorUnrecognizedSymbol Okb Should not it ignore such sequences and leave them as is This PR fixes issues with nested struct and enum serialization where the struct name will be serialized multiple times or enum name will serialized Unit variant enums are supported as well I have an XML with inner element I write some code using quickxml with serde but It seems I could not serializedeserialize with same struct here is the code use serdeSerialize Deserialize use quickxmlDeError use quickxmldefromstr use quickxmlsetostring const XML str rInfoContent ContentInfo deriveDebug Deserialize PartialEq Serialize pub enum Data serderename Info Info serderenameContent content u fn main let data ResultData DeError fromstrXML if let Okresult data It seems fromstr success and I can fetch the value printlnresult is result It outputs tostring result ErrUnsupportedserializestructvariant printlntostring result tostring result else println dataerrunwrap Hi the way features work in cargo is that any crate in your dependency tree can enable additional features for its dependencies and each dependency crate is only compiled once with all features merged thus they must only add additional APIs without breaking what was before Ie enabling the encoding feature should provide new structs and functions or just improve existing ones without changing their signature Also the readerDecoder struct is not public and not documented but Readerdecoder is I guess either both or none should be public Hi I want to parse a MB XML file with serde I used serdexmlrs and it is painfully slow I hacked my way through serdexmlrss code to make it work with quickxml instead the APIs are very similar after all and that sped it up tremendously from s to s But I dont want to deserialize an entire MB XML into a giant struct which has loads of small heapallocated vecs inside it when all I want is to scan for a specific element inside it and deserialize just that one I thought of using quickxmls events to reach the element I want then readtoend to get the whole element as a big text block and then use serdexmlrs to parse the text block as xml except this approach loses all namespacingencoding info I also thought of implementing some sort of fromelementxmlreader startelement which would give a partial Deserializer object which is my current favorite option Thoughts Any better ways to do this