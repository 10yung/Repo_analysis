eg to enable debug info I have not been able to identify the cause of xargo not building this application but I have attached the build log here Any help would be much appreciated thanks dumplog The application is just a simple hello world application the command used is xargo build target thumbv mnoneeabi dumplog the xargotoml contains only targetthumbv mnoneeabidependenciesstd I believe my xargo is fully updated and yet while trying to build a small nostd binary it fails I was trying to build a custom target but also find that it fails for the builtin host target From looking through the issues this looks similar to the failures that were fixed by Version xargo version xargo cargo nightly b a f f Failing case xargo build target x appledarwin warning Patch rustcstdworkspacecore v Userscrustuptoolchainsnightlyx appledarwinlibrustlibsrcrustsrctoolsrustcstdworkspacecore was not used in the crate graph Check that the patched package version and available features are compatible with the dependency requirements If the patch has a different version from what is locked in the Cargolock file run cargo update to use the new version This may also occur with an optional dependency that is not enabled Compiling core v Userscrustuptoolchainsnightlyx appledarwinlibrustlibsrcrustsrclibcore Finished release optimized targets in s error failed to load source for a dependency on compilerbuiltins Caused by Unable to update Userscrustuptoolchainsnightlyx appledarwinlibrustlibsrcrustsrclibcompilerbuiltins Caused by failed to read Userscrustuptoolchainsnightlyx appledarwinlibrustlibsrcrustsrclibcompilerbuiltinsCargotoml Caused by No such file or directory os error error cargo build release manifestpath varfolders fl rcfr d s xy vd rtnvv gnTxargo N Ub sxQilYCargotoml target x appledarwin p compilerbuiltins failed with exit code Some note run with RUSTBACKTRACE for a backtrace windows IOT or for some newer laptops ie full desktop arm in windows pine has a build also for iot however with rust ports firefox etc are also easier and or roll your own cheep windowslinux Kiosks In in Blueprintfrom and Blueprintpush several invocations of Pathexists were added Since git sources are not available on the filesystem this has broken builds using git sources after was merged Since toolsrustcstdworkspacecore will not be found on disk the necessary patch section will not be inserted This only applies if your installed rustsrc component is not up to date but see always adds a patch section to Xargos Cargotomls but there is no way to override the crate it points to It always uses the crate it find in rustsrc even if std or core itself is built using a path or git source This leads to two different incompatible core crates in the dependency tree See for more issues with git sources Ive come up with different approaches to fix this not sure which one is best If there is a std crate in the blueprint compute toolsrustcstdworkspacecore from that path or use the same git and use that as the patch If there is a std crate in the blueprint find the spec of the core dependency how would this work if std is a git dependency then generate a rustcstdworkspacecore crate in the tempdir with that core Then use that temp crate as the patch Use the existing logic from to generate the patch by default Let users specify their own patch es in Xargotoml Ive recently been told that setting the environment variable RUSTCBOOTSTRAP makes a standard rustc build able to build nightlyonly crates Maybe this could be used to not require a nightly build for compiling libcore Is there a way to suppress xargos metadata and extrafilename behavior Im compiling to o successfully and then I need to link with a different linker and then objcopy so discovering this random string thwarts automation Trying to build for armnoneeabi as though it had a pointer width of bits causes an error could not compile core with no further elaboration and rebuilding with verbose reveals that rustc segfaults To reproduce xargo new lib segfaultrepro cd segfaultrepro echo llvmtarget armnoneeabi datalayout emep i v a n S linkerflavor gcc targetendian little targetpointerwidth targetcintwidth arch arm os none armsegfaultjson xargo build target armsegfault verbose Changing the llvm target to aarch noneelf and the arch to aarch or changing the target file to claim that pointers are bit will fix the segfault Im actually not sure if this is a rustc bug or a xargo bug as I lack the knowledge to do this with rustc without xargo sorry if this is in the wrong place Hi When I compile with xargo I get error E unresolved import core I dont want to explicitly import core because that will break the regular cargo build cargo the name core is defined multiple times Im running RUSTTARGETPATHpwd xargo build target x unknownlinuxsgx release x unknownlinuxsgxjson arch x cpu x datalayout emei f n S dynamiclinking true env sgx exeallocationcrate allocsystem executables true haselftls true hasrpath true linkerflavor gcc linkerisgnu true llvmtarget x unknownlinuxgnu maxatomicwidth os linux positionindependentexecutables true prelinkargs gcc Wlasneeded Wlznoexecstack m relrolevel full stackprobes true targetcintwidth targetendian little targetfamily unix targetpointerwidth vendor unknown Xargotoml dependencies alloc panicunwind panicabort dependenciesstd path xargomystd stage dependenciesrand path xargomyrand stage dependenciesmyserialize path xargomyserialize stage 