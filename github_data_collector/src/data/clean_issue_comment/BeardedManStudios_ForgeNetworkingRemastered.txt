An example of this is in the SomeNetworkObjectcs used for additive scenes There is a new function which you can override in a NetworkBehaviour called RegisterCustomRPCsNetworkObject This is called before NetworkStart so the behaviournetworkObject will still be null at this time hence why it has a argument NetworkObject which is a valid NetworkObject Inside the RegisterCustomRPCs you can register RPCs like you normally would except you have can register the RPC and youll get the id back for example private byte RPCSERVERTESTRPC protected override void RegisterCustomRPCsNetworkObject networkObject baseRegisterCustomRPCsnetworkObject RPCSERVERTESTRPC networkObjectRegisterRpcServerTestRPC ServerTestRPC typeofint typeofstring then like then you can use the RPC like you normally would Aside from that you can also register rpcs from another MonoBehaviour its completely the same as hooking into the networkBehaviournetworkStarted event but instead we have a custom one for registering rpcs which is networkBehaviourregisterCustomRPCs its completely the same as the parent one and is invoked just after RegisterCustomRPCsNetworkObject networkObject For as testing goes I use this in Wobbly Life and works for very complicated NetworkBehaviours with multiple Monobehaviours registering rpcs For testing in the current branch Ive added some example code in SomeNetworkObjectcs Dotnet core is more perfomant and suited to running backend console applications This has been tested and works without any issues Version Number and Operating Systems Latest Unity Forge Remastered Git Summary Connecting between MultiplayerMenu over Master Server to a different device on different IP works Player hosts Player on different ip and device puts in IP on MultiplayerMenu clicks join both players are now in Lobby scene chatting setting team colours changing name etc works perfectly master server shows they registered nats working great etc Added screenshots one showing MultiplayerMenu and Lobby working fine and other showing ServerBrowser and Lobby with its error But not when a player tries to join using ServerBrowser it does not The host shows up on ServerBrowser code looks same for joining in ServerBrowser as MultiplayerMenu but the game acts as if networkObjects do not exist Reproduce Using the default scenes provided unchanged except for IPs buildsprojects one to host and one to view hosts both go to lobby Add yoursmine if requested master server and nat IP on the canvasServerBrowser script and on canvasMultiplayerMenu script on their scenes Build Add MultiplayerMenu as Lobby as in build settings Play click host on MultiplayerMenu on the master server exe you can see they connect and get registered Build Add ServerBrowser as Lobby as in build settings Play build host shows on screen click join on the host Lobby scene loads the joining player to host flashes up for a second before disappearing type in chat for example on players side any interaction with rpcs or syncvars displays errors that seem to link to networkObjects not being there NetworkManager has been instantiated and initialised everything looks to be same as MultiplayerMenu joining but the outcomes are not Optional Discord Username JesusLuvsYooh MMconnect SBconnect When debugging issue I noticed a bit of inconsistency in taskthread management especially when it comes to joining all background threads on shutdownsession reset This pull request is aimed to improve this situation use BeardedManStudiosThreadingTask for all task needs instead of SystemThreading directly added thread join support BMSThreadingTaskWaitAll in any infinite loops use NetWorkerIsActiveSession checks instead of just IsBound to cover EndingSession requests NetWorkerEndSession now uses TaskWaitAll instead of an arbitrary s wait fixed NetworkingPlayerBackgroundServerPing to use nonzero wait time and actually ping the server Version Number and Operating Systems b d bf e f c bf cc ec aa Expected behavior Loading a list of servers via a master server list should show game name player count ping etc Actual behavior Instead shows Server Offline The game can still be connected to as normal using NAT punchthrough Steps to reproduce In settings disable LAN discovery and enable master server list with a working master server feel free to use mine at if you havent got one running Run two instances and have one host The server will appear in browser with Server offline and no pingplayercount Go to your router settings and open the port used by SQP default The server info now correctly displays Im not too familiar with the NAT punchthrough code but from looking it it briefly it looks like it could do with a refactor so it can be reused by the SQP Does that sound right If so I can find some time to take a deeper look at it and potentially fix but Id need to know if the NatHolePunch server dll would need updating also Optional Discord Username Cerzi Version Number and Operating Systems Windows bit Unity Actual behavior Attempting to send reliable RPC per FixedUpdate causes the system to overflow and no further RPCs can be sent Steps to reproduce Clone this fork Build the game Run two instances Note the values in the top right of the screen for the CLIENT Every fixedupdate the client attempts to a single reliable RPC Around or are sent successfully before they stop being received Load CubeForgeGame scene in UnityEditor and toggle reliable on the RPC Tester component to off Rejoin and note that the RPCs are successfully received Yes sending reliable RPCs a second is probably a bad idea but the fact that this used to work mostly but now causes catastrophic failure suggests a bug somewhere in recent refactored code Optional Discord Username Cerzi By default only the owner will be able to send RPCs to a network object You can also assign a master networking player that can call RPCswhile not being allowed to set fields using csharp networkObjectAssignMasterNetworkingPlayer If you want to allow anyone to send RPCslike before the change you can use csharp networkObjectAllowPublicRpcs true AssignMaster and AllowPublicRpcs should be only used on the server Version Number and Operating Systems Forge Networking Remastered Version Unity f Personal Expected behavior The client joins without an InvalidCastException Actual behavior The client joins with an InvalidCastException this error refers to the SyncPlayerNetworkObject As a result the clients game experience is not what it should be Steps to reproduce Download Link Download Build and run the project host the game with the builded one and connect with Unity in play mode Click the start game button on the host Optional Discord Username Lijpe Lynn After a discussion on discord it was discovered that the ReadThread could encounter a Connection Reset Socket exception while trying to connect to a server that is not running The expected behaviour here would be to trigger a connectAttempFailed event but the exception will close the socket and the loop checking for the connection attempts will be terminated early without firing the event Thank you for andreivreja for finding the possible solution Version Number and Operating Systems Latest master and develop Currently proximity checks are done based on the sending and receiving players proximity location This setup works fine if the server only owns one object Eg in a listen server setup where each client has one network object it owns This setup on the otherhand would not work if the server would own multiple objects as there is no easy way to set the correct proximity location in this case