 Observed behavior We are trying to get ccls to work on our somewhat messy and complicated C codebase We have it indexing and mostly working but we get some strange error hints in VSCode that stands out and I cant figure out where they come from To take one we can look at this line of code int mediaBitrate mediagetPLEXATTRIBUTEBITRATE which tells us no matching member function for call to getccls PropertyContainerh candidate function template not viable no known conversion from PlexMedia to PropertyContainer for object argument PropertyContainerh candidate function not viable no known conversion from PlexMedia to PropertyContainer for object argument PropertyContainerh candidate template ignored could not match T against int PropertyContainerh candidate function not viable requires single argument name but arguments were provided Via various inheritances this is the method that should be called templateclass T T getconst string name const T defaultValueT This of course builds just fine and I can copy and paste the line from cclslog and dont see any errors after I add back the arguments to include our PCH We build ccls with llvm since this is what we use to build the application One developer said that the error seemed to have gone away when he built ccls locally against llvm Is there something that was made better in upstream versions and we should just upgrade Does it matter much if the version of llvm ccls is linked to differs from the compiler we use Expected behavior Not an error on this line Steps to reproduce System information ccls version git describe tags long cef f ae fa clang version OS Linux and macOS behaves the same way Editor VSCode Language client and version vscodeccls Some lsp servers provide marked doc string Both VSCode and lspuidoc support rendering marked string Correctly rendered doc string is more readable than plain text Screenshot form vscode rust Selection Screenshot from lspui python It would be good to have C comments prettified doxygen or standardese Ref LSP Spec about markup content Ref Clang helpers for documentation comments Ref lspuidoc supports MarkupContent Setup TravisAppVeyorAzureGitHub Actions also integrate the LGTMcom for the code static analysis It might be a good idea also to run the clanganalyzer too The README homepage from cocnvim shows a small demo for TypeScript where it automatically adds an include when a specific function is written and the import is missing Im currently using cocnvim ccls Is there a way that if I write printfHello world it will automatically add include stdioh to the top of the file Would like to see this Observed behavior Completion works properly when inheriting from templated struct but not when using struct directly c template typename U typename V struct A using type void template typename U struct B AU U template typename U struct C typename AU Utype completion doesnt work typename BUtype completion works Expected behavior Inside the definition of C ccls should complete both typename AUtype and typename BUtype after one types the double colon but it only provides completion for the latter Steps to reproduce Copy the above code in neovim with cocnvim and ccls set up Inside the definition of C type typename AU and request code completion System information ccls version git describe tags long gbd e clang version a b a exp OS Linux Editor NVIM v dev Language client and version cocnvim ff ec b I wasnt sure whether my idea of supporting extra reference methods with a slight extension of the language server protocol would work so I implemented this proofofconcept Unfortunately it turned out that I dont really know c On the other hand the code works The corresponding code implementing the client side is here And this is the summary of the reference codeActionKind extension I hope you find this useful and Im eager to receive your feedback Hi MaskRay I noted one thing with completion inside function I enter a few symbols for local variable or class member but usually I have function from stdkeywords instead of local stuff Same thing happens I I have local variable and type with similar names I would expect that when I enter something that matches with results by caseeg log not Log I will have local variable on top But I enter something with different cases then I would expect best match Seems like with types it works as expected Thank you in advance source code ccls version e Observed behavior Minimal example ls ah bcpp compilecommandsjson cat ah pragma once struct A include ah cat bcpp include ah int mainvoid return cat compilecommandsjson directory pathtoworkspace command clang c o pathtoworkspacebo pathtoworkspacebcpp stdc Wall Werror m file pathtoworkspacebcpp If you open ah in your favorite editor you should get a diagnostic redefinition of A Expected behavior pragma once should ensure that the cyclic include of ah is harmless Steps to reproduce See the minimal example above System information ccls version clang version OS Ubuntu generic Editor VSCode Language client and version vscodeccls Additional info I was able to verify that the issue doesnt occur with ccls version I didnt have a build available on hand for any inbetween releases to bisect it further Observed behavior For code containing nonUTF documentation comments eg in a latin encoded source file the strings are included verbatim in the JSONRPC output generated by ccls resulting in invalid JSON Expected behavior ccls should detect invalidunknown encoding and handle it gracefully ie omit the documentation string Reencoding is probably not an option because clang already does not understand nonUTF source code ie GCCs finputcharset and fexeccharset are not fully implemented Steps to reproduce testcpp convert this to latin eg using iconv and hover over the symbol in Emacseglot D cument tion int foo return Gives the following error jsonrpc warning Invalid JSON jsonrpc id resultcontents D cument tionlanguagecvalueint foo rangestartline character endline character System information ccls version g b f clang version 