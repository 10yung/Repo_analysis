Hey has anyone tried KIF with SwiftUI I did some quick experiments and it doesnt seem to work I will have more time for digging into this later Just wanted to know if someone has already tried that Thanks Hi there Im still experimenting with KIF to test a view controller but Im stuck because I cant get the tap simulation to work swift testerwaitForViewwithAccessibilityIdentifier helpcell This is OK testertapViewwithAccessibilityIdentifier helpcell This is not working Upon investigation to the frameworks code I found out that the reason tapView is not working is because the private selector touchesEvent in UIApplication returns nil therefore we got a nil UIEvent passed to UIApplications sendEvent img width altScreen Shot at src My questions What is UIApplications touchesEvent and why it returns nil in my test case Any suggestions on how to fix that Thanks We have an issue where we have a ScrollView that is being scrolled in the background behind a modal This is causing issues because hitting the bottom of the scrollview causes some network requests to get kicked off and the UIs backing data model gets refreshed Wed prefer to be able to avoid this scrolling in this case Some possible overlapping paths to mitigating this Dont scroll scrollviews that arent isProbablyTappable eg theyre covered by a modal Add an optout method to the viewTester for autoscroll behavior when trying when finding matches similar to how validateEnteredText modifies the behavior of actor text typing Add an optoutin for allowing the tableviewcollectionview matcher autoscrolling behavior to scroll the last row or few rows into view preventing batched fetches on hitting the end of the view Some annotation on views maybe via accessibilityTrait or accessibilityIdentifier in the app to indicate that theyre paginated results controller and may fetch more results at the end This could be used to alter default behavior in approach The first approach is more likely to break some tests and have collateral damage because it alters the matching behavior always That said it does seem like generally reasonable behavior The second approach is a bit safer because it is optin but it isnt nearly as nice of a developer friendly API It is weird to need to think about this when writing a test and seems like it should be able to be handled automatically That said Im sure that some apps are more reliant on paginated scroll on hitting the bottom of the list and KIF probably triggers that quite a bit The first approach still doesnt help in the case where the scrollview is tappable on the screen Something like this would probably help in the case called out in issue CC ElyasNaranjeeSani For the third approach it seems generally safe to do but like approach it isnt the most intuitive thing to need to think about when writing a test There is some risk also that different apps have different behaviors of when they decide to prefetch data might need to be configurable eg last N rows Changing the default behavior to not scroll to the bottom would likely break a bunch of tests However combined with something like approach itd probably cause less breakage For the fourth approach Im concerned about the contract being too informal esp if relying on the identifier or something like that I dont see any clearly correct accessibility traits that make sense to key off of Maybe there is a better variant Im not thinking of UIModernBarButtons userInteractionEnabled property has a default value NO this can be fixed by append a class type for voidisNavigationItemView I cant seem to find any documentation about such a feature am I missing something I wanted to add KIF in my project with a new package manager in Xcode Swift Package but that error is encountered has no Packageswift manifest for version what i should do Within an XCTest target Im trying to create wrappers to move our app into the background and foreground using XCUIDevice to click on the home button and XCUIApplication to move it to the foreground within our Kif tests The code is simple To move the app to the background Im using this XCUIDevicesharedpressXCUIDeviceButtonhome And to move it to the foreground Im using this XCUIApplicationactivate Yet XCUIApplicationactivate causes an NSInternalInconsistancyException No target application path specified via test configuration Am I simply doing this wrong or is XCUIApplication not compatible with KIF tests Thanks caught NSInternalInconsistencyException App called statusBar or statusBarWindow on UIApplication this code must be changed as theres no longer a status bar or status bar window Use the statusBarManager object on the window scene instead CoreFoundation x fff b bde exceptionPreprocess libobjcAdylib x fff b b objcexceptionthrow CoreFoundation x fff b NSException raiseformatarguments Foundation x fff eb f NSAssertionHandler handleFailureInMethodobjectfilelineNumberdescription UIKitCore x fff f UIApplication createStatusBarWithRequestedStyleorientationhidden UIKitCore x fff UIApplication statusBarWindow GreenLight x f eaa c KIFUITestActor tapStatusBar GreenLight x f db WBKifHomeTimeLineSub Tests testFeedRepostToComposer CoreFoundation x fff b f c invoking CoreFoundation x fff b cd f NSInvocation invoke XCTest x edbd XCTestCase invokeTest blockinvoke XCTest x ee e XCTestCaseFailures performFailableBlocktestCaseRunshouldInterruptTest XCTest x ee XCTestCaseFailures performTurningExceptionsIntoFailuresInterruptAfterHandlingblock XCTest x edbcc a XCTestCase invokeTest blockinvoke XCTest x edbc e XCTestCase testContextPerformInScope XCTest x edbc c XCTestCase invokeTest XCTest x edbe ed XCTestCase performTest blockinvoke XCTest x ee e XCTestCaseFailures performFailableBlocktestCaseRunshouldInterruptTest XCTest x ee XCTestCaseFailures performTurningExceptionsIntoFailuresInterruptAfterHandlingblock XCTest x edbe XCTestCase performTest blockinvoke XCTest x ee a XCTContext runInContextForTestCaseblock XCTest x edbdb XCTestCase performTest XCTest x ee XCTest runTest XCTest x edb a XCTestSuite performTest blockinvoke XCTest x edb XCTestSuite performProtectedSectionForTesttestSection XCTest x edb b XCTestSuite performTest XCTest x ee XCTest runTest XCTest x edb a XCTestSuite performTest blockinvoke XCTest x edb XCTestSuite performProtectedSectionForTesttestSection XCTest x edb b XCTestSuite performTest XCTest x ee XCTest runTest XCTest x edb a XCTestSuite performTest blockinvoke XCTest x edb XCTestSuite performProtectedSectionForTesttestSection XCTest x edb b XCTestSuite performTest XCTest x ee XCTest runTest XCTest x ee e XCTTestRunSession runTestsAndReturnError blockinvoke XCTest x ee XCTTestRunSession runTestsAndReturnError blockinvoke XCTest x edd e XCTestObservationCenter observeTestExecutionForBlock XCTest x ee fd XCTTestRunSession runTestsAndReturnError XCTest x ed b d XCTestDriver runTestsAndReturnError XCTest x ee e XCTestMain libXCTestBundleInjectdylib x ce be copyhelperblocke s CoreFoundation x fff afb ec CFRUNLOOPISCALLINGOUTTOABLOCK CoreFoundation x fff afb CFRunLoopDoBlocks CoreFoundation x fff af ee CFRunLoopRun CoreFoundation x fff af b CFRunLoopRunSpecific GraphicsServices x fff cbb GSEventRunModal UIKitCore x fff a UIApplicationMain Weibo x c c e main libdylddylib x fff bcf start x x ps use Xcode A a This PR fix issue I just changed UIWebView by WKWebview because first one is deprecated in iOS and each time to upload binary to Apple you receive a warning Just submitted my app to TestFlight and got an email with the error ITMS Deprecated API Usage Apple will stop accepting submissions of apps that use UIWebView APIs See for more information I was wondering if all the code related to UIWebView will have to be removed and only keep WKWebView It was just a warning the build ended up being available on TestFlight but I think this is something that will have to be addressed at some point