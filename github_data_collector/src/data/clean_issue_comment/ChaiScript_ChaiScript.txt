There are two warnings when compiling with GCC or clang warning explicit bycopy capture of this redundant with bycopy capture default warning typedef locally defined but not used Wunusedlocaltypedefs This change removes and it compacts the lambda capture clause in Issue this pull request references Changes proposed in this pull request Compiler Used MSVC Operating System Windows Architecture ARMx bit bitetc X Expected Behavior I need to use couple of scripts in my application which have to use some global c functions to have access to c vars or other internal application things Because of that ive create singletone Script manager which maps global functions to chai in constructor But then im using another ChaiScript instance it doesnot see the fucntion registered in Script manager instance of ChaiScript Actual Behavior Two instances of ChaiScript cant share functions Minimal Example to Reproduce Behavior ChaiScript chai using PlainLog voidconst stdstring chaiaddfunPlainLog mystdout log chaievalRlogHello World ChaiScript anotherchai anotherchaievalRlogHello World from another script throws exception Hi Sorry to ask this question but I genuinely want to know Why would I use ChaiScript over other engines such as V Edit Besides the fact that its like impossible to get build and use V in a basic project mkdir tmp cmake make results in fatal error stringview missing at multiple places if you build with only C support ChaiScript requires a C compiler to build with support for variadic templates It has been tested with gcc and clang with libcxx For more information see the build dashboard So the requirements should actually mention that you need C support Issue this pull request references Changes proposed in this pull request implemented unit test which is validating whether a lambda from Chaiscript could return a boolean value without throwing any exception the same test case is checking also whether lambda with boolean return value could be called peacefully from Chaiscript After pull request will be resolved this test will pass for now its producing failed checks homedraghanprogrammingChaiScriptmyChaiScriptcmakebuilddebugcompiledtests compiledtests is a Catch v host application Run with for options Lambdas can return boolean homedraghanprogrammingChaiScriptmyChaiScriptunittestscompiledtestscpp homedraghanprogrammingChaiScriptmyChaiScriptunittestscompiledtestscpp FAILED CHECKNOTHROW result chaifunction due to unexpected exception with message bad any cast homedraghanprogrammingChaiScriptmyChaiScriptunittestscompiledtestscpp FAILED CHECK result true with expansion false true Hello World ObjectCopyCountTest ObjectCopyCountTestObjectCopyCountTest ObjectCopyCountTest ObjectCopyCountTest Test making vector adding config item returning vector St vectorI ReturnedConvertedConfigSaIS EE Info x bfc numiterations somethingelse astring string afunction found at A ok test cases passed failed assertions passed failed Process finished with exit code When a script function returning a boolean is called from C code ChaiScript tries to initialize a BoxedNumber with the returned value A bad any cast exception is then raised The proposed modification checks if the return value is a possibly cvref qualified bool before instantiating the BoxedNumber leading to a boxedcast instead I would like to start a discussion on how fibers could be added to ChaiScript if that is possible My biggest pain point as a user using it for a game is that ChaiScript is missing fiberscoroutines Particularly I am interested in stackful coroutines such as those found in Wren language and Lua I would be happy to know about the changes needed if any and how difficult it would be to add this feature upstream in the future whether having a dependency optional in Boostcoroutine or fiber is acceptable etc Expected Behavior var obj fromjsonmyJsonStr objmyField Should work See here for more context Actual Behavior var obj fromjsonmyJsonStr objmyField Does not work Implementation This implementation makes native field access work class JsonObject var contents def JsonObjectstring jsonStr thiscontents fromjsonjsonStr def JsonObjectMap contents thiscontents contents def methodmissingstring name Vector v var field thiscontents name if fieldtypename Map return JsonObjectfield else return field Hi Id love to know when new updates are planned and which ones Especially documentation and tool integration is dearly missing I think Do you have a roadmap maybe so we know what to expect Or have you abandoned the project Compiler Used MSVC Operating System Windows Architecture ARMx bit bitetc Chaiscript version v Just realized I didnt have the updated version Calling from C to Chaiscript using stdfunction is super slow For example you want to process a element array in Chaiscript but want the C code to iterate through it and call your Chaiscript function for each element ProcessListfunThing Does something with thing return true Continues looping The C code might have an array of size and calls that funThing for each element This can get super expensive Its faster to just copy the data into an array pass it to Chaiscript then process the list in Chaiscript 