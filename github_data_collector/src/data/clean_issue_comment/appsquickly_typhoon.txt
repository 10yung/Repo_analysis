Storyboard inject is not working in swift Always Im getting null I have created two Assembiles Application and Presentation and added into plist Applicationswift import UIKit import Typhoon class Application TyphoonAssembly func appDelegate AnyObject return TyphoonDefinitionwithClassAppDelegateself configuration definition in definitioninjectPropertyselectorsetter AppDelegatehomeStoryboard with selfhomeStoryboard definitioninjectPropertyselectorsetter AppDelegateloginStoryboard with selfloginStoryboard as AnyObject objc func homeStoryboard AnyObject return TyphoonDefinitionwithClassTyphoonStoryboardself configuration definition in definitionuseInitializerselectorTyphoonStoryboardinitnamefactorybundle parameters initializer in initializerinjectParameterwith Home initializerinjectParameterwith self initializerinjectParameterwith Bundlemain as AnyObject objc func loginStoryboard AnyObject return TyphoonDefinitionwithClassTyphoonStoryboardself configuration definition in definitionuseInitializerselectorTyphoonStoryboardinitnamefactorybundle parameters initializer in initializerinjectParameterwith Login initializerinjectParameterwith self initializerinjectParameterwith Bundlemain as AnyObject objc func aboutStoryboard AnyObject return TyphoonDefinitionwithClassTyphoonStoryboardself configuration definition in definitionuseInitializerselectorTyphoonStoryboardinitnamefactorybundle parameters initializer in initializerinjectParameterwith About initializerinjectParameterwith self initializerinjectParameterwith Bundlemain as AnyObject Presentationswift import UIKit import Typhoon class Presentation TyphoonAssembly private var application Application func sideMenuViewController SideMenuViewController return TyphoonDefinitionwithClassSideMenuViewControllerself configuration definition in definitioninjectPropertyselectorsetter SideMenuViewControllerhomeStoryboard with selfapplicationhomeStoryboard definitioninjectPropertyselectorsetter SideMenuViewControlleraboutStoryboard with selfapplicationaboutStoryboard as SideMenuViewController func homeViewController HomeViewController return TyphoonDefinitionwithClassHomeViewControllerself configuration definition in as HomeViewController func aboutViewController AboutViewController return TyphoonDefinitionwithClassAboutViewControllerself configuration definition in as AboutViewController AppDelegateswift import UIKit import SlideMenuControllerSwift UIApplicationMain class AppDelegate UIResponder UIApplicationDelegate var window UIWindow objc var homeStoryboard AnyObject objc var loginStoryboard AnyObject fileprivate func createMenuView let homeViewController homeStoryboardinstantiateViewControllerwithIdentifier HomeViewController as HomeViewController let sideMenuViewController homeStoryboardinstantiateViewControllerwithIdentifier SideMenuViewController as SideMenuViewController let nvc UINavigationController UINavigationControllerrootViewController homeViewController UINavigationBarappearancetintColor UIColorwhite UINavigationBarappearancebarTintColor UIColordarkGray sideMenuViewControllerhomeViewController nvc let slideMenuController ExSlideMenuControllermainViewControllernvc leftMenuViewController sideMenuViewController SlideMenuOptionscontentViewScale slideMenuControllerdelegate homeViewController as SlideMenuControllerDelegate selfwindowbackgroundColor UIColorred green blue alpha selfwindowrootViewController slideMenuController selfwindowmakeKeyAndVisible func logout let loginViewController loginStoryboardinstantiateViewControllerwithIdentifier Login as LoginViewController if selfwindowrootViewControllerpresentedViewController nil selfwindowrootViewControllerdismissanimated false if let loginViewController loginViewController selfwindowrootViewControllerpresentloginViewController animated false completion nil func application application UIApplication didFinishLaunchingWithOptions launchOptions UIApplicationLaunchOptionsKey Any Bool Override point for customization after application launch selfcreateMenuView return true func applicationWillResignActive application UIApplication Sent when the application is about to move from active to inactive state This can occur for certain types of temporary interruptions such as an incoming phone call or SMS message or when the user quits the application and it begins the transition to the background state Use this method to pause ongoing tasks disable timers and invalidate graphics rendering callbacks Games should use this method to pause the game func applicationDidEnterBackground application UIApplication Use this method to release shared resources save user data invalidate timers and store enough application state information to restore your application to its current state in case it is terminated later If your application supports background execution this method is called instead of applicationWillTerminate when the user quits func applicationWillEnterForeground application UIApplication Called as part of the transition from the background to the active state here you can undo many of the changes made on entering the background func applicationDidBecomeActive application UIApplication Restart any tasks that were paused or not yet started while the application was inactive If the application was previously in the background optionally refresh the user interface func applicationWillTerminate application UIApplication Called when the application is about to terminate Save data if appropriate See also applicationDidEnterBackground How inject storyboard in swift Why homestory board object is getting null in AppDelegate Im having an issue with the sample app see comment And while trying to investigate further and see if I could fixed I noticed that the TyphoonAssemblyBuilderTests that are responsible for checking the piece of code that throws the exception are not being run When installed through Carthage Task failed with exit code usrbinxcrun xcodebuild project UsersalekzernovDownloadsenegyhouserev CarthageCheckoutsTyphoonTyphoonxcodeproj scheme Typhoon configuration Release derivedDataPath UsersalekzernovLibraryCachesorgcarthageCarthageKitDerivedData F aTyphoon sdk iphonesimulator destination platformiOS Simulatorid D D C F B F B destinationtimeout ONLYACTIVEARCHNO CODESIGNINGREQUIREDNO CODESIGNIDENTITY CARTHAGEYES build launched in UsersalekzernovDownloadsenegyhouserev CarthageCheckoutsTyphoon help me please Hi Im trying to use Typhoon in the iMessage Extension of IOS with partial luck Only manual integration works plist integration doesnt This issue is pretty similar to and it looks like you fixed it but for some reason my class properties dont get injected automatically even though I followed the instructions on your docs Heres a link to the sample project I created Its a simple project containing two targets Host app If you run it you see that automatic injection works Extension app If you run it you see that automatic injection doesnt work the property myClass doesnt get injected and remains nil Can you please help me understand where the issue is Thanks Liran I am trying to modularize my Assembly files per the instructions but it doesnt seem to be working when I have a base Assembly class written in Objective C thats being accessed by another Assembly written in Swift The injected assembly isnt nil but I get a EXCBADACCESS error when I try to pull anything off of it Is this a known limitation or am I doing something explicitly wrong Im currently using Typhoon v When I was previously using this seemed to work Here is my code for reference ObjC Assembly interface CoreComponents TyphoonAssembly implementation CoreComponents Preferences preferences return TyphoonDefinition withClass Preferences class configuration TyphoonDefinition definition definition useInitializerselectorgetInstance Swift Asssembly public class DeviceComponents TyphoonAssembly public var coreComponents CoreComponents public dynamic func peripheralManager Any return TyphoonDefinitionwithClassPeripheralManagerself configuration definition in definitionuseInitializerselectorPeripheralManagerinitpreferences initializer in initializerinjectParameterwith selfcoreComponentspreferences Steps to repro In header objc property strong nonatomic readonly ApplicationAssembly assembly In impl objc ProfilePreviewHelper profilePreviewHelper return TyphoonDefinition withClass ProfilePreviewHelper class configuration TyphoonDefinition definition definition injectPropertyselectorassembly definition injectPropertyselectorprofileService definition injectPropertyselectorrootController with selfassembly rootController definition injectPropertyselectorcandidatesService definitionscope TyphoonScopeWeakSingleton when no TyphoonConfigFile key is set otherwise use that Hi It seems that plist automatic activation doesnt work in share extension since the extension doesnt have an app delegate and the swizzled method is never being called Are there any plans to add a support for the Typhoon in the extensions Thanks Hi Ive tried to use the new release but there were some API changes that I cannot understand Some of them cause the app to crash Here goes a list of issues TyphoonAssemblyActivator was deprecated Some of our assemblies are not listed in the plist file and thus we have the following code to manually activate them interface FactoryAssembly TyphoonAssembly end implementation FactoryAssembly id init self super init if self self activate return self end implementation FactoryAssembly id init self super init if self self activate return self end After checking the docs it was not clear how to refactor this Could you please provide some more insights here Plist activation Modularizing Assemblies The order used when declaring the assemblies in the plist file was not relevant until now However with this new version it has changed somehow interface SupportStoryboardViewFactoryAssembly TyphoonAssemblySupportStoryboardViewFactoryProtocol propertynonatomic strong readonly ServiceAssembly serviceAssembly propertynonatomic strong readonly CommonStoryboardViewFactoryAssembly commonStoryboardFactoryAssembly end If serviceAssembly is declared after SupportStoryboardViewFactoryAssembly the following code will crash idHelpCenterArticleDetailsViewModelProtocol helpCenterArticleDetailsViewModelNSString articleID return TyphoonDefinition withClass HelpCenterArticleDetailsViewModel class configuration TyphoonDefinition definition definition useInitializerselectorinitWithSupportServiceinesServicesupportAssemblysettingsServicearticleID parameters TyphoonMethod initializer initializer injectParameterWith selfserviceAssembly supportService initializer injectParameterWith selfserviceAssembly inesService initializer injectParameterWithself initializer injectParameterWith selfserviceAssembly settingsService initializer injectParameterWitharticleID Moving ServiceAssembly before SupportStoryboardViewFactoryAssembly solves the issue Still due to circular dependencies I cannot follow this approach Any ideas how to handle this Thanks in advance TyphoonStoryboard does not support NSStoryboard on OSX MacOS