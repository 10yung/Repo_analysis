updated add this debug target to Makefile quick documentation in READMEmd add sqlasmmemorygrowthdebug to npm test This PR is assuming that we do want to continue actively supporting the asmjs build targets and do not want to enable the memory growth in the existing distsqlasmdebugjs build target originally proposed as part of PR Running the following statement sql SELECT e On this Gives me this result set e Infinity I know its not supposed to be Infinity because of this DB Fiddle Schema SQLite v Query SELECT e e e View on DB Fiddle This isnt the only example of doubles being lossy for some reason unknown to me Ive seen cases where I had decimal places being cut off numbers being rounded up and down etc Is there a workaround for this This is just an idea of how it may be possible to support developers who need to build with nonstandard functions Here is an example where I support UPPER and LOWER functions that can handle many EU characters properly This idea includes some comments that I think should be considered in srcapicoffee that can help make it easier for people like myself to add custom functions in the future I suspect there should be a much smarter way to do this by using an array of FuncDef structures like they do in extensionfunctionsc for example I will very likely continue with the kind of solution proposed here to support the needs of my customer with hope for a more standardized solution someday Hi great project Is there a way to configure initSqlJs to look for an embedded arraybuffer of the wasm file and thus avoid the extra fetch I know this may sound strange but I have a use case where Im embedding a full app in a single html file and thats obviously how its run as well but simply loading the html file in a browser Thus an extra fetch isnt really possible for several reasons but I cant seem to figure out if theres a supported way to do this I worked around it by doing something like this javascript sqljs embedded in another script element sqlWASM is loaded as a buffer converted to a simple array of numbers and then a Uin array is built from this array and used as the return from our fetch override below const sqlWASM Uint Arrayfrom sqlWASM config locateFile filename embedded const actualFetch windowfetch windowfetch url rest if url embedded return Promiseresolve ok true arrayBuffer sqlWASMbuffer else actualFetchurl rest This works really well actually I can now load a single html file that has sqljs fully embedded with no additional dependencies Load time is pretty good too about half a second on average worst timing Ive seen was around ms Since bandwidth isnt an issue it comes down to initialization time Anything subsecond is magical anything seconds is fully acceptable and only at seconds do we consider there being an issue with load time Anyway its obviously a bit of an edge case but if theres some kind of supported way of doing this Id probably rather do that Penny for your thoughts Im working on combining between sqljs IndexedDB and Angular here everything was so normal until I found this under my desk corejs ERROR Error Uncaught in promise TypeError Cannot set property SQL of undefined TypeError Cannot set property SQL of undefined at sqlwasmdebugjs at doRun sqlwasmdebugjs at run sqlwasmdebugjs at runCaller sqlwasmdebugjs at removeRunDependency sqlwasmdebugjs at receiveInstance sqlwasmdebugjs at receiveInstantiatedSource sqlwasmdebugjs at ZoneDelegateinvoke zoneevergreenjs at ObjectonInvoke corejs at ZoneDelegateinvoke zoneevergreenjs at resolvePromise zoneevergreenjs at zoneevergreenjs at zoneevergreenjs at ZoneDelegateinvoke zoneevergreenjs at ObjectonInvoke corejs at ZoneDelegateinvoke zoneevergreenjs at Zonerun zoneevergreenjs at zoneevergreenjs at ZoneDelegateinvokeTask zoneevergreenjs at ObjectonInvokeTask corejs After some frustrating night I managed to dig deep to the source thanks for providing the sqlwasmdebugjs btw and found this on line javascript this SQL Database Database As far as I know about this keyword the keyword was very trivial Alright so far so good This in functions calls points to the global object It is not so simple though This behavior only applies when not in strict mode When in strict mode this in functions is undefined Curiously Ive made some speculation that this in line was referring to window global object which I found the SQL subobject under window object in your native html template I made a dirty workaround here and found my code was running successfully finally Heres the workaround in line to Line javascript window SQL Database Database for i in window SQL Module i window SQL i As for conclusion would you mind to manage this module on strict mode Thank you so much for this great library I wrote a c function and compiled using the command emcc libalternatecasec s WASM s EXPORTEDFUNCTIONS alternatecase s EXTRAEXPORTEDRUNTIMEMETHODS ccall cwrap s ASSERTIONS o publicalternatecasejs Here is my C function includestdioh includestringh includectypeh includeemscriptenh int main return char alternatecasechar str char initialptr initialptr str for int i i str i if i str tolowerstr else str toupperstr str return initialptr Indexhtml DOCTYPE html html head meta charsetutf titleMy first Web Assembly Demotitle head body h MY first web assembly demoh Output is in Javascript console main button idexecute classbuttonExecutebutton pre idoutput Results will be displayed here pre main body script srcdistsqlwasmjsscript script srcalternatecasejsscript script typetextjavascript srcexportingcfunctionjsscript html I took the sqlwasmjs from this repository alternatecasejs is the compiled file from emcc This is the exportingcfunctionjs config locateFile filename distsqlwasmwasm initSqlJsconfigthenfunctionSQL Create the database var db new SQLDatabase Run a query without reading the results const func cwrapalternatecasestring string dbcreatefunctionaltcase func sqlstr CREATE TABLE hello a int b char sqlstr INSERT INTO hello VALUES hello sqlstr INSERT INTO hello VALUES world dbrunsqlstr Run the query without returning anything dbrunINSERT INTO hello VALUES alternatecaseawdqwdq Inserts and Hello world dbrunSELECT altcaseb from hello It is throwing this error in the console Error wrong number of arguments to function altcase And it accepts only arguments Note if I try from browser console I am able to use the function and get the output How to use this as custom function Also how to create custom function in web workers and use it Bug report Describe the bug Trying to use sqljs in a nextjs project throws an error while trying to initialize the module To Reproduce Steps to reproduce the behavior please provide code snippets or a repository npx createnextapp nextsqljs cd nextsqljs npm i sqljs Inside pagesindexjs js import initSQL from sqljs const Page consoleloginitSQL consoleloginitSQL initSQLthenSQL consolelogSQL const db new SQLDatabase consolelogdb return null export default Page npm run dev See Error in Console Expected behavior Ability to import and use sqljs like in the example provided here Screenshots MozillaConsole ChromeConsole Additional context Also without defining fs in nextconfigjs sqlwasmjs throws a module not found error about the fs module My guess is that I should change my config settings to support wasm but Im not really familiar with that Issue in nextjs repo I get an error with sqlwasmjs while sqlasmjs works fine both async and sync fetching of the wasm failed failed to asynchronously prepare wasm abortboth async and sync fetching of the wasm failed at Error at jsStackTrace nodemodulessqljsdistsqlwasmdebugjs at jsStackTrace nodemodulessqljsdistsqlwasmdebugjs My environment sqljs v Nodejs v MacOS v My code javascript requiresqljs fails requirenodemodulessqljsdistsqlwasmjs fails requirenodemodulessqljsdistsqlasmjs works I am currently having to call export every time I need to save to indexedDB for persistence The problem is export greatly increases the save time taken and I cannot save just the SQLJS object due to the new SQLdatabase constructor not being able to handle that Is there any way around this or could this be a possible enhancement Hi there I am pretty new to SQL Can anyone help me with my question Is it possible to use this library in android with html and javascript in webview and my db as Sqllite default android Db If not is there any other way Thanks in advancerelaxed 