Add all the composable styled system props and what tags use them Hello Is there a way to store my spectacle presentation as a json or html This PR will introduce our overhauled docs broken out into the following subset categories Basic Concepts Advanced Concepts API Reference FAQ We should gut all aestheticsrelated lint rules and let prettier do the work for us Something closer to what we have in spectaclecli for example Originally posted by ryanroemer After lands Update all JS MDX examples to point to equivalent spectaclecli instructions Update Netlify config to point to master for target branch after we release Update travisyml to remove taskrewrite from branches configuration I just created my first presentation following the instructions using the classic boilerplate and tried the exportandprint option What I noticed is that the font changed from Montserrat to Open Sans Condensed compared to just the export option or using the normal presentation mode It seems that the createTheme function adjusts the screen CSS but not the print CSS This could mess with the layout of slides so in my opinion both fonts should be set to Montserrat We conceivably have these related packages that might be best served in a monorepo spectacle spectaclecli spectaclewebpackmdxloader spectaclerollupmdxloader Consider if moving to monorepo makes sense If so move to yarn workspaces lerna Deprecate spectaclecli repo Release everything from monorepo Question Hello From following your issuesPRs I can tell youve got a major rewrite underway taskrewrite Its exciting FormidableSpectacle is devoting the resources to do this I would love to hear for those in the audience What are your major goals for this rewrite What problems with the existing codebase do you aim to address Do you want help from the community If so how can the community best help Background InfoAttempts Im a frequent spectacle user THANK YOU SO MUCH So much so that I maintain a fork of spectacleboilerplate with a ton of customizations which has led me down a few rabbit holes in the code base to see why yall might undertake this endeavor But Im curious what you all are up to with this and I did try to do my due diligence in finding out whats up but dont see much information other than lots of pull requests Have you read Formidables Code of Conduct By filing an Issue you are expected to comply with it including treating everyone with respect Question How to implement a preexisting react hash router with Deck Background InfoAttempts I tried creating history as import createHashHistory from history export default createHashHistory Later I set the history prop in Deck but I am getting redirected to path from my original path slider Can I configure it to sliderid 