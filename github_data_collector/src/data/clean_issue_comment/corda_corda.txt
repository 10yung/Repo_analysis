 Added allure test report plugin to buildgradle files Added Epic annotation to categorise the tests draft PR have this code tested Corda Open Source I connect to my node using the standalone shell The config file looks like this My RPC user which I used to log in the standalone shell doesnt have the permission to run CreateEvolvableShokenType flow Running flow list shows that flow And the user is able to start the flow batch addTransactions method introduced to allow the optimization for multiple inserts prefetching added to DBTransactionStorage two avoid many round trips to database for multiple inserts There is room for improvement current implementation attempts to minimize number of necessary changes optimized combining of vault updates to avoid quadratic runtime Just a check that ensures the notary is in the whitelist before starting up Documentation change only Gradle version is used in all samples and cordapp templates Additionally the link in the docs for is actually pointing to gradle DESCRIBE YOUR CHANGES HERE DO NOT FORGET PR Checklist x Have you run the unit integration and smoke tests as described here x If you added public APIs did you write the JavaDocs x If the changes are of interest to application developers have you added them to the changelog docssourcechangelogrst and potentially the release notes docssourcereleasenotesrst x If you are contributing for the first time please read the contributor agreement now and add a comment to this pull request stating that your PR is in accordance with the Developers Certificate of Origin Thanks for your code its appreciated Notary cannot be excluded from the list of signers for nonnotarized transactions because notary cannot sign during the later finality phase Corda CE Tokens RC I have a REST API that queries my Mint node and returns its balance all the tokens on my Mint node are held by the Mint This API returns different results when ran multiple times consequently I use Postman several times within minutes or so and it randomly returns a different balance I dont run any code between those calls ie no issue transfer or redeem commands Below is my code public MapString BigDecimal getNodeBalanceNotBlank String myTokenTypeId Latest version of my EvolvablableTokenType EvolvableMyTokenType myTokenType MyTokenUtilsgetLatestMyTokenTypeproxy myTokenTypeId Only tokens held by the Mint QueryCriteria queryCriteria QueryUtilitiesKtheldTokenAmountCriteria myTokenTypetoPointermyTokenTypegetClass proxynodeInfogetLegalIdentitiesget Based off the code from Corda documentation API Vault Query int pageNumber DEFAULTPAGENUM final int pageSize long totalResults long totalBalance do PageSpecification pageSpec new PageSpecificationpageNumber pageSize VaultPageFungibleToken results proxyvaultQueryByWithPagingSpecFungibleTokenclass queryCriteria pageSpec totalResults resultsgetTotalStatesAvailable if totalResults return CollectionssingletonMapNode Balance BigDecimalvalueOf ListStateAndRefFungibleToken pageMyTokens resultsgetStates Is it possible the below line is behaving randomly long pageBalance pageMyTokensstream mapToLongt tgetStategetDatagetAmountgetQuantitysum totalBalance pageBalance pageNumber while pageSize pageNumber totalResults BigDecimal bigTotalBalance BigDecimalvalueOftotalBalance MyToken has fraction digits meaning one MyToken BigDecimal fractions BigDecimalvalueOfMathpow myTokenTypegetFractionDigits BigDecimal nodeBalance bigTotalBalancedividefractions return CollectionssingletonMapNode Balance nodeBalance I ran the webserver with remote debug and monitored the values of pageBalance and totalBalance Im not using order by in my query but notice how for the first pages the results are identical in the API calls but the numbers in the th page are different even though the records are the same I didnt issue transfer or redeem any tokens between API calls in fact I didnt call any code other than pressing the send button inside Postman to call the API Calling API Calling same API again Page balance Total so far Page balance Total so far Page balance Total so far Page balance Total so far Page balance Total so far Btw the correct balance is the second API call I use the below query in my pgAdmin select sumamount from fungibletoken Holder is Mint node where holder OUXXX OXXX LLondon CGB and transactionid outputindex in select transactionid outputindex from vaultstates Only tokens where contractstateclassname comr cordalibtokenscontractsstatesFungibleToken Only unconsumed and statestatus Regardless of which returned number is the correct balance how is it that the same code is returning different results Looks like vaultQueryByWithPagingSpec has a problem I created the following repository with an example that has the exact same code that I used to calculate the balance but sadly I wasnt able to reproduce the error but I hope that its still a good starting point for your investigation Im also attaching a video as a zip file that shows you the odd behavior in my real code on Google Cloud unfortunately I cannot share that code but the example repo has the same code that the API uses In the video I query the database to show the correct balance and I keep calling the API initially it shows the wrong number and then suddenly the returned number changes and shows the correct balance Demozip Initially I opened this issue in the Tokens SDK repo but Roger Willis did his own tests and couldnt reproduce it either and he also suggested opening the issue in Corda repo since its related to querying the vault with pagination Any hints on what could be the cause I wasnt able to reproduce with the provided example repo or the real code locally the problem only happens in DEV on GCP Google Cloud 