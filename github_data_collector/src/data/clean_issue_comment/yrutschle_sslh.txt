Im looking at if its possible to have SSLH in transparent mode while routing traffic to other LAN clients In order to run multiple services behind a single IPv I use an Apache reverse proxy with SNI and VirtualHosts This works fine but one service Windows Server R Remote Web AccessSSTP VPN running on an IIS server is limited behind an Apache reverse proxy The SSTP VPN part doesnt work because Apache doesnt understand the SSTP data packets and it cannot handle them I put SSLH in front of Apache and Apache now runs on localhost So the connection path is SSLH Apache local VirtualHost Reverse Proxy to LAN server For Windows RWASSTP to work I use an SNI rule to match the RWASSTP hostname and forward all traffic to the IIS server in the LAN rather than going through Apache because it causes issues IIS can handle if the request is for the RWA https interface or if its an SSTP VPN connection natively This works fine without transparent mode When enabling transparent mode Apache works but traffic to the IIS server doesnt flow This seems to be somewhat expected as the iptables example indicates it only works when SSLH and other protocols are running on the same server However for IIS this isnt the case It is most certainly routing related I was wondering if anyone had success working with transparent mode when routing traffic to other LAN clients It looks like TPROXY is a possible avenue but the example is Linux to Linux can TPROXY work from Linux to Windows Hi I tried to set up sslh as described here What works if I set transparent to false and do NOT set up the the ip routing rules I can connect to my httpd as expected if I set transparent to true and do still NOT set up the ip routing rules I can no longer connect as expected with transparency the httpd should try to send to an address it cant reach as far as I understand if I set transparent to true and DO set up the routing rules connection works again as expected BUT in this case the access log of my httpd nginx still logs my local address xxxxxx as the remote ip even though wireshark shows TCP packets going from to xxxxxx which is the remote address Im connecting from A similar thing happens on SSH I can login via ssh to port through transparent sslh but ssh shows my login coming from the local IP address again Wireshark shows here that sshd sends its packets to I dont understand how this happens And as the ip routing setup or the iptables setup mentioned in the docs only affect the outgoing packets from sshdhttpd this behaviour is not due to me choosing ip rules vs iptables right So something goes wrong in sslh I have the same behaviour with sslh from debian and from master branch bae ab e First off sslh is wonderful and works great This is not a bug more of a How do I do this sort of question as I dont quite understand how support is on over the email chain End goal I want to add a TURN server into the sslhcfg file What is happening right now Per all the READMEs I am suppose to add a REGEX from this website that looks something like x x x x E x E x x x x E in order to forward the traffic to my coturn server However no idea how to make matches so that this gets turned on What Ive tried This line in the sslhcfg file name tls host localhost port alpnprotocols stunturn loglevel tfook true Any thoughts or insights to regex besides having my cat play on my keyboard to generate regex queries in order to enable it for coturn would be greatly appreciated Thanks in advance Hi I cant get working both OpenVPN and https in transparent mode SSLH is on a NGINX server IP and need to pass openvpn traffic to another server https traffic goes on localhost Heres my configuration I used root to debug DAEMONOPTSuser root transparent listen openvpn ssl pidfile varrunsslhsslhpid v Here are the iptables ip route configuration that I used sbiniptables t mangle N SSLH sbiniptables t mangle A OUTPUT protocol tcp outinterface eth sport jump SSLH sbiniptables t mangle A OUTPUT protocol tcp outinterface eth sport jump SSLH sbiniptables t mangle A SSLH jump MARK setmark x sbiniptables t mangle A SSLH jump ACCEPT ip rule add fwmark x lookup ip route add local dev lo table Syslog extract Sep myserver sslh accepted fd Sep myserver sslh writing deferred on fd Sep myserver sslh probing for openvpn Sep myserver sslh connecting to family len Sep myserver sslh forward to openvpn failedconnect Connection timed out Sep myserver sslh connect Connection timed out SSL works fine When I remove transparent from cmdline openvpn works What am I missing Thanks in advance Hello I have problem with sslh connection Some http transfers return as chunked with errors I dont see something strange in logs What information to diagnose this Thank you Hello Can I use transparent connection only for some connections For example http with transparent connection and ssh without With the current master d c and conf struct Im getting a segmentation fault when I run sslh foreground p p tls ssh Its very reproducible hopefully you can easily see this issue as well Thanks Please reopen We can reproduce exactly the same issue on our production environment and it seems also to affect connections that come from normal browsers Key factors to reproduce the issue the issue gets active when we have about connections running through sslh if there are fewer connections there are no problems but even when the issue is active some requests come through our curl based nagios checks are constantly flapping then it not only affects curl based requests but also our webapp that is running https and wss through the sslh the issue seems to be correlated to our upgrade from openssl to openssl one day later the issue started to appear Originally posted by rrschmidt in This change presents a new configuration style for sslh with systemd unit files Where previously the global sslh configuration would be in etcsslhcfg the new configuration layout is etcsslhcfg For each file located in etcsslh ending in cfg the systemd generator will automatically generate the accompanying socket and dropin configurations Individual system service files for each configuration are not required and instead are covered by a single service template sslhsercice which takes the name of the desired sslh configuration as a target The new system follows the structure Config File etcsslhexamplecfg Systemd Socket sslhexamplesocket Systemd Forking Service sslhexampleservice Systemd Select Service sslhselectexampleservice Systemd DropIn Configuration SYSTEMDRUNDIRsslh sslhselectexampleservicedexampleconf Note SYSTEMDRUNDIR is provided to the systemdsslhgenerator binary when invoked by systemd and is thus portable to multiple distributions Generator Changes Added Early systemd generator error logging through devkmsg Fixed memory and file descriptor leaks Added a global systemd service for sslhselect Added systemddropin configurations to prevent the system from running both sslh forking and select units simultaneously and to associate a configurations unit with its respective systemd socket configuration So here is a working solution for the previous transparent rules if you are routing to localhost like this sslh listen ssh localhost listen host port keepalive true protocols name ssh service ssh host localhost port fork true Say your servers interface ip is and you have this rule iptables t mangle A OUTPUT p tcp o eth sport j SSLH tcpdump now shows outgoing LAN IP addresses from ssh server on port on the loopback interface since sslh and the ssh server communicates via localhost means that packages from is to someone who connected directly towards port and not you can just apply another rule which prevents them from being routed towards the loopback interface iptables t mangle A OUTPUT p tcp o eth s sport j ACCEPT iptables t mangle A OUTPUT p tcp o eth sport j SSLH Originally posted by Stenudd in 