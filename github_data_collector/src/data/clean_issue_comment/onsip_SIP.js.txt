This is a work in progress branch for version Its being rebased on devmaster as work continues there Includes remove old api remove old tests update documentation new READMEmd TODO Describe the bug The SDP in latest chrome have changed from Plan B to Unified plan Unified Plan Transition Guide JavaScript This causes to have many audios when switch from a device to another when do a reinvite or a unhold as described in issue Yes we can use the senderreplaceTrack API for that purpose what I use now as a workaround but this does not change the fact that the reinvite is now broken if the constraints options have changed when do reinvite or unhold And even if replaceTrack work I have to acquire the user media by myself If I use sessionDecriptionHandleracquire it broke the sender because it try to remove the previous track and then there is no chance to replace it adding the track without reinvite it simply does not work Also after acquire the user media I have to manually trigger the trackAdded and userMedia event If I dont do that sipjs dont understand that the user media has changed and dont stop it correctly when terminate Here is my workaround code js sessionsessionDescriptionHandlerWebRTCgetUserMediaconstraintsthenstreams streamsgetTracksforEachtrack sessionsessionDescriptionHandlerpeerConnectiongetSendersforEachsender sendertrack sendertrackkind trackkind senderreplaceTracktrack sessionsessionDescriptionHandlerobservertrackAdded sessionsessionDescriptionHandleremituserMedia streams Logs v o IN IP s t agroupBUNDLE amsidsemantic WMS D NrImu kLms dLkhRwl RsyVV xF TCdL maudio UDPTLSRTPSAVPF cIN IP artcp IN IP acandidate udp typ host generation networkid aiceufragLb r aicepwdJvCypppemtwF gDfLX NJx aiceoptionstrickle afingerprintsha C E CAB B FDB D FDD E DFE asetupactpass amid aextmap urnietfparamsrtphdrextssrcaudiolevel aextmap aextmap urnietfparamsrtphdrextsdesmid aextmap urnietfparamsrtphdrextsdesrtpstreamid aextmap urnietfparamsrtphdrextsdesrepairedrtpstreamid arecvonly amsid D NrImu kLms dLkhRwl RsyVV xF TCdL a a b e b b eef ec d artcpmux artpmap opus artcpfb transportcc afmtp minptime useinbandfec artpmap ISAC artpmap ISAC artpmap G artpmap PCMU artpmap PCMA artpmap CN artpmap CN artpmap CN artpmap telephoneevent artpmap telephoneevent artpmap telephoneevent artpmap telephoneevent assrc cnametEKkzyFtv z vxcA assrc msid D NrImu kLms dLkhRwl RsyVV xF TCdL a a b e b b eef ec d assrc mslabel D NrImu kLms dLkhRwl RsyVV xF TCdL assrc label a a b e b b eef ec d maudio UDPTLSRTPSAVPF cIN IP artcp IN IP aiceufragLb r aicepwdJvCypppemtwF gDfLX NJx aiceoptionstrickle afingerprintsha C E CAB B FDB D FDD E DFE asetupactpass amid aextmap urnietfparamsrtphdrextssrcaudiolevel aextmap aextmap urnietfparamsrtphdrextsdesmid aextmap urnietfparamsrtphdrextsdesrtpstreamid aextmap urnietfparamsrtphdrextsdesrepairedrtpstreamid asendrecv amsidjnxyznbOkzjOBETtQ w sqxQgfXR KgmVU s f bfba e a b ad c c d artcpmux artpmap opus artcpfb transportcc afmtp minptime useinbandfec artpmap ISAC artpmap ISAC artpmap G artpmap PCMU artpmap PCMA artpmap CN artpmap CN artpmap CN artpmap telephoneevent artpmap telephoneevent artpmap telephoneevent artpmap telephoneevent assrc cnametEKkzyFtv z vxcA assrc msidjnxyznbOkzjOBETtQ w sqxQgfXR KgmVU s f bfba e a b ad c c d assrc mslabeljnxyznbOkzjOBETtQ w sqxQgfXR KgmVU s assrc labelf bfba e a b ad c c d To Reproduce if possible Steps to reproduce the behavior Invite with a constraint Change constraint Do a reinvite or an unhold There is no more outgoing audio Expected behavior When do a reinvite or and unhold with another constraint sipjs automatically acquire the new media and trigger the track added event Observed behavior The outgoing audio is lost Environment Information Asterisk Chrome Additional context Also in latest Chrome unified plan there is no candidates on new audios when do a reinvite I have tried to create a modifier to correct this but I had not good results for now This is may related to this Describe the bug A clear and concise description of what the bug is All indicate that setting peerConnectionOptions will overwrite them and cause audio to stop Sure enough this is the case Can I get a response on how you expect iceCheckingTimeout to be lowered We can post logs but it seems pretty logical whats going on If I set peerConnectionOptions the code will use them directly and is missing whatever defaults are supposed to be in there Something isnt right after touching peerConnectionOptions since setting an ice timeout of or higher should be the same as default behavior iceCheckingTimeout is the only parameter being tweaked Logs Please include a gist or attached file with full logs If this is not included the first response will likely be requesting them To Reproduce if possible Steps to reproduce the behavior We are using invite accept sessionDescriptionHandlerOptions to have persession ice timeouts Set a sessionDescriptionHandlerOptionspeerConnectionOptionsiceCheckingTimeout to the default No audio Expected behavior How do we change iceCheckingTimeout Observed behavior No audio over RTP Environment Information Asterisk Sipjs Additional context Add any other context about the problem here Is your feature request related to a problem Please describe Maintainers of SIPjs have made clear in several instances that using a custom MediaStream as a source instead of getUserMedia should be done through the implementation of a custom SessionDescriptionHandler Im fine with that In however the library has been rewritten in typescript and most of the methods of WebSessionDescriptionHandler are now private This means that to implement the rather small change from one is required to reimplement the whole getDescription method while previously overwriting acquire was enough Duplicating everything adds to the maintenance burden as it forces to track every change to the upstream class Bugs can easily slip through It also means duplicating the whole class including modifier handling ICE etc which are already solved problems Describe the solution youd like Because of that would it be possible to devise a way to only override the acquisition part of WebSessionDescriptionHandler ideally only the actual stream creation part I can imagine two ways this could be implemented depending on what fits the library style best while not adding much maintenance burden to SIPjs itself through inheritance using a protected getMediaStreamsconstraints any PromiseMediaStream method through inheritance by splitting getDescription into individually overridable parts though some sort of callback in the SessionDescriptionHandlerOptions interface or in events Also due to the way the library uses different options in different contexts in this case UA sessionDescriptionHandlerFactoryOptions at creation time but constructor options at INVITE time it might be useful to pass the options along to whatever solution is chosen Describe alternatives youve considered I tried implementing a modifier that would add mediastream tracks and call createOffer again but this fails due to Firefox complaining that you cannot call createOffer twice I could not find any other hook or overridable methods that could make this feature available easily Additional context I need to create a session without requesting user device access Describe the bug The WebSocket transport connection timeout does not trigger a reconnection attempt The reconnection attempt is only triggered when the WebSocket itself times out which can take a very long time upwards of minute Logs To Reproduce if possible Steps to reproduce the behavior Create a UserAgent with a list of dummy wsServers and logging enabled const userAgent new UA transportOptions wsServers wssexamplecom wssexamplenet wssexampleorg connectionTimeout maxReconnectionAttempts reconnectionTimeout uri foobarcom password foobar log level Expected behavior Each connection attempt times out after three seconds One second after the connection times out a new connection attempt is made with the next WS server in the list Observed behavior Each connection attempt times out after three seconds One minute later a new connection attempt is made with the next WS server in the list Environment Information SIPjs Version Chrome Version Official Build bit Additional context NA Describe the bug SIP over Webscoket specification clearly states WebSocket messages can be transported in either UTF text frames or binary frames SIP RFC allows both text and binary bodies in SIP requests and responses Therefore SIP WebSocket Clients and SIP WebSocket Servers MUST accept both text and binary frames But binary messages cause parse error no CRLF found not a SIP message discarded Logs no CRLF found not a SIP message discarded To Reproduce if possible na Expected behavior Binary websocket frames Buffer are accepted Observed behavior Binary websocket frames are ignored Environment Information Backend Server and version cannot share proprietary backend Browser and version Google Chrome Official Build bit Additional context I suppose tha parsing function parseMessage should also accept ArrayBuffer Describe the bug When instantiating a new SIPUA and websocket connetion fails with failed Error in connection establishment netERRCONNECTIONCLOSED registrationFailed event never fires Logs siplogtxt To Reproduce some values obscured with foo and bar javascript const config transportOptions wsServers wssfoonet traceSip true uri foobarcom password foo rel SIPCsupportedSUPPORTED userAgentString foo register true hackViaTcp true log level debug sessionDescriptionHandlerFactoryOptions peerConnectionOptions rtcConfiguration iceServers urls stunstun googlecom urls turnfoo transporttcp username websip credential websip const ua new SIPUAconfig uaonregistrationFailed handleRegistrationFailed function handleRegistrationFailed consoleerrorREGISTRATION FAILED never called Expected behavior registrationFailed event should be fired after websocket connection retries have been exhausted Observed behavior registrationFailed event never fires after websocket connection fails consistently Environment Information This is an Electron Chrome app using sipjs v Same behavior observed with sipjs v Describe the bug There is no ICE candidates when I try to escalate audio only call to video call sessionreinvite sessionDescriptionHandlerOptions RTCOfferOptions iceRestart true constraints audio true video aspectRatio Looks like this happens because waitForIceGatheringComplete does not wait because isIceGatheringComplete is true because its reINVITE and ICE was completed for the firstinitial INVITE createOfferOrAnswer writable true value function createOfferOrAnswer RTCOfferOptions modifiers thenfunction onSetLocalDescriptionSuccess return selfwaitForIceGatheringComplete Logs txt To Reproduce if possible Steps to reproduce the behavior Make audio only call Escalate to video call Expected behavior SDP should contains ICE candidates Observed behavior New stream does not have ICE candidates Environment Information sipjs Chrome and FireFox on windows I suspect Im not alone in having options which I commonly pass to methods such as accept and invite For example I have some code that looks like this javascript var CALLOPTIONS sessionDescriptionHandlerOptions constraints audio true video false var placeCall function userAgent target var session userAgentinvitetarget CALLOPTIONS var answerCall function session sessionacceptCALLOPTIONS This all worked great at first But then I found that having multiple different SIP sessions active for different extensions led to weird problems like hanging up a call remotely not actually disconnecting the call in the browser I eventually realized that what was happening is that I was passing the same object in and the different methods were mutating it eg we set optionextraHeaders at My local solution was to replace CALLOPTIONS with a makeCallOptions function which just returns that object so as to not end up having eg two different sessions sharing the same extraHeaders array However it took me several hours of sustained debugging to figure out that was what I needed and I doubt Im the only person who this will happen to I think we could avoid this by cloning the options object when its passed in so that where we now say javascript options options we would instead say something like javascript options SIPUtilscloneoptions then people wont get tripped up Obviously that would require us to define a new SIPUtilsclone method for which I normally use something like jQuery or lodash but which we could probably just draw from If this seems like a worthwhile idea I would be happy to file a pull request I have problem with example example code of attaching media The trackAdded callback is always called twice in both inbound and outbound calls In the second call Chrome throws The play request was interrupted by a new load request My code works anyway I hear interlocutor and he hears me I fixed this console error by running play only in the second call js var trackAdded sessionontrackAdded function var pc sessionsessionDescriptionHandlerpeerConnection if trackAdded var remoteStream new MediaStream pcgetReceiversforEachfunctionreceiver remoteStreamaddTrackreceivertrack remoteAudiosrcObject remoteStream remoteAudioplay trackAdded How this callback should look It may be related with but it was while trackAdded was introduced in I tested it on and Im migrating from EDIT With my fix I cant hear interlocutor on FF