Currently ShipIt is compiled with the source of ReactiveCocoa and Mantle vs linking the frameworks that are distributed with Squirrel This causes some issues in certain environments where ShipIt cant figure out which copy of the objects to use This PR fixes that First it takes out all of the Mantle and ReactiveCocoa from the Copy Sources build step in ShipIt Next it links against the Mantle and ReactiveCocoa frameworks in ShipIt Lastly it adds a post build stage to link the compiled ShipIt binary to the Mantle and ReactiveCocoa frameworks using their location when distributed in Squirrel I have a codesigned Electron app to which Im trying to add autoupdate functionality I have set up a Lambda function at which returns a status JSON response that looks like this json upgradeStatus minor url Product Namezip I can paste that URL into my browser and it will download the file without a problem Despite this I get the error Error Update check failed The server sent an invalid response Try again later which is coming from SQRLUpdaterm ObjectiveC is looks quite foreign to me though so its hard to understand what is causing the error to be thrown As far as I can tell I am doing everything I should be to get updates working Is there something else I need to be doing A recent change to Squirrel attempted to link to ReactiveCocoa and Mantle in ShipIt vs copying and compiling their source files into the ShipIt binary This was done because in certain environments dylib was loading multiple copies of the classes which was causing errors in ReactiveCocoas assertions This PR actually removes the dependency classes from the Copy Files build step It adds an additional build step to relink ReactiveCocoa and Mantle using executablepath instead of rpath as rpath linking was causing the same double loading problem in certain environments Is there a way to notarize an app with Squirrel in it Im trying to submit it for notarization but I get Hardened Runtime is not enabled ShipIt must be rebuilt with support for the Hardened Runtime Enable the Hardened Runtime capability in the project editor then test your app rebuild your archive and upload again Ive set Enable Hardened Runtime on ShipIt target but didnt help ShipIt repeatedly crashes every few seconds on my Mac Assertion failure in RACSignalOperations and blockinvoke UserssattardprojectsSquirrelMacCarthageCheckoutsReactiveCocoaReactiveCocoaRACSignalOperationsm A follow up for The issue was never solved and it creates a big bunch of problems to many of us Nothing you can do about it The problem still exist on macOS Mojave Hello I noticed that release doesnt contain initWithUpdateRequestupdateRequest requestForDownloadrequestForDownload in SQRLUpdaterh This method has been added back to SQRLUpdaterh in current master via Are there any plans to cut a new release containing this change among others Im happy to help if I can Thanks Shipit is respawning every second how to I get rid of that thing Apparently some lunatic in Microsoft Teams and Postman decided to use it for software update can we shut it down Thanks Aug iMacYann ShipIt Installation error Error DomainSQRLShipItRequestErrorDomain Code Could not read update request UserInfoNSLocalizedDescriptionCould not read update request NSUnderlyingError x fe Error DomainNSCocoaErrorDomain Code The file ShipItStateplist couldn t be opened because there is no such file UserInfoNSFilePathvarrootLibraryCachescommicrosoftteamsShipItShipItStateplist NSUnderlyingError x fe c Error DomainNSPOSIXErrorDomain Code No such file or directory A lot my users are reporting an error when trying to update the app It throws a code with domain SQRLUpdaterError Any idea what this can be Or how I can debug this further It doesnt happen on my machine so I have no way to reproduce it and I dont know what the error means Thanks in advance Ive noticed that released versions of Squirrelframework contain temporary DSStore files in the following locations SquirrelframeworkDSStore SquirrelframeworkVersionsDSStore SquirrelframeworkVersionsADSStore I was able to find that Squirrelframework contains these DSStore files in various macOS apps by using the following command find Applications name DSStore type f print I think the build script can include some code to remove these unnecessary DSStore files