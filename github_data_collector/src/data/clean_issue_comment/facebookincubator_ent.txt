Added small helper function to get all enum values MaxLen adds a length validator for this field Operation fails if the length of the string is greater than the given value func b stringBuilder MaxLeni int stringBuilder bdescSize i bdescValidators appendbdescValidators funcv string error if lenv i return errorsNewvalue is less than the required length return nil return b This is a WIP PR as we need to add a fixture logic to the migration to make this change backward compatible Fixes Title is self explanatory Its a known issue we found today and currently working on a backward compatibility fix for it Should be addressed soon Hi I found that the generated table names conflicted with Golang keywords when using ent When I use Package as the table name try to generate code using ent golang type Package struct bash entc generate entschema The error message is too long I deleted the path format file entpackagecreatego expected operand found package and more errors You can see that the structure name is converted to lowercase in the t Type Package string function If I use the words Package or Type as the database table name it will be converted to package or type which will conflict with the Golang keywords Note the fourth line of code generated below this will produce an error golang var pa Packageconfig pcconfig spec sqlgraphCreateSpec Table packageTable ID sqlgraphFieldSpec Type fieldTypeUUID Column packageFieldID I think it can be solved by using the following method like Change the package name golang package package package package And add the package alias golang import githubcomusernamerepositorypackage import package githubcomusernamerepositorypackage I wanted to submit the PR after fixing it myself but when I modified importtmpl it didnt work and I didnt find the reason so I gave up Hi just started playing around with ent and ran into compiler errors with the generated code I have a mixin that looks something like this go type LabelMixin struct func LabelMixin Fields entField return entField fieldStringlabelNotEmpty When compiling this produces an error along the lines of serverentphone ent phone wherego Label redeclared in this block previous declaration at ent phone phonego Looking at the generated code we see this go in phonewherego Label applies equality check predicate on the label field Its identical to LabelEQ func Labelv string predicatePhone return predicatePhonefuncs sqlSelector sWheresqlEQsCFieldLabel v in phonephonego const Label holds the string label denoting the phone type in the database Label phone FieldID holds the string denoting the id field in the database FieldID id FieldCreatedAt holds the string denoting the createdat vertex property in the database FieldCreatedAt createdat FieldUpdatedAt holds the string denoting the updatedat vertex property in the database FieldUpdatedAt updatedat FieldLabel holds the string denoting the label vertex property in the database FieldLabel label FieldNumber holds the string denoting the number vertex property in the database FieldNumber number FieldPrimary holds the string denoting the primary vertex property in the database FieldPrimary primary Table holds the table name of the phone in the database Table phones Might be worth catching those during codegen or somehow making sure the names cannot collide Its not really an issue for me so feel free to close Ill just use a different name for now The TIMESTAMP data type is used for values that contain both date and time parts TIMESTAMP has a range of UTC to UTC The DATETIME type is used for values that contain both date and time parts MySQL retrieves and displays DATETIME values in YYYYMMDD hhmmss format The supported range is to Its a great experimental ent feature to be able to store structs as Json in a database table I have a few questions regarding this feature How to search for data within JSON How to extract only specific fields from JSON Is there a plan to standardize the abstraction for common use cases What should be the syntax to write nested JSON queries In the meantime I believe that ent should have the primitives to allow ent users to write those queries even without outofthebox support Examples for JSON queries sql search sqlite SELECT FROM users jsoneachuserdata WHERE jsonextractjsoneachvalue email LIKE criteria filter specific values in sqlite select value jsonextractuserdata email from entry where id filter specific values in postgres SELECT user email AS useremail FROM users If I read the documentation right the way to implement search would be a custom predicate I am not sure how a custom select statement with only specific fields can be generated Is the way to go a custom select Selectt Columnsname age statement I think the challenge will be to find a good syntax for JSON extraction specifically for nested fields and its unclear to me how the mapping to entities should look like Are there any plans to support soft deletes That is assuming the File schema has a deletedat column the code go clientFile Delete WherefileUpdatedAtLTdate Execctx Would execute approximately sql UPDATE files SET deletedat NOW WHERE updatedat and go clientFile Query Allctx Would execute approximately sql SELECT FROM files WHERE deletedat IS NULL It would be nice to have some way to create insert multiple entities of the same type at once