 Issue description Section of the spam tutorial shows example of the use of the Keras classifier with labels generated by the label model However the test accuracy of the logreg is while test accuracy of the logreg trained on the dev set only is The accuracy of the ScikitLearn with Rounded Labels is In addition accuracy of the label model alone section is As the test accuracy of the logreg with the label model is not great its difficult to see how it supports the tutorials conclusion We observe an additional boost in accuracy over the LabelModel by multiple points By using the label model to transfer the domain knowledge encoded in our LFs to the discriminative model we were able to generalize beyond the noisy labeling heuristics Can you please check whether the spam tutorial is correct Code examplerepro steps See the spam tutorial Expected behavior I expected a multipoint increase in test accuracy over LabelModel as described in the tutorial System info NA this issue is about the spam tutorial Description of proposed changes save and load method for Trainer to serialize the optimizer trainer config dependent on whether model has been fitted with that Trainer instance Related issues Fixes issue Test plan testtrainerpy adapted saveloadtest Checklist Need help on these Just ask x I have read the CONTRIBUTING document I have updated the documentation accordingly x I have added tests to cover my changes I have run tox e complex andor tox e spark if appropriate x All new and existing tests passed I have seen the tutorial on the spam classification where among other things it is taught how to use labeling and transformation functions But I see a limitation of the features snorkel provides when it comes to multiclass classification as this example is strictly meant for a binary classification problem Isnt it better to include more features or perharps add an example where we can see the use of snorkel in order to label more than classes For instance I have a problem involving classes For what I see as work around is to use labeling functions per each class for instance treating each class one at a time as if it is a binary case The best would be to tackle all in one go any suggestion besides the one I am thinking about I first used conda install snorkel c condaforge to install snorkel on Windows Anaconda It went successfully Unfortunately I got ModuleNotFoundError No module named snorkellabeling error when I try to use it Following other issues who have the same problem I tried to use conda install snorkel c condaforge to install the as indicated in the readme But I got the UnsatisfiableError UnsatisfiableError The following specifications were found to be incompatible with each other Package tqdm conflicts for snorkel tqdm version Package sqlite conflicts for python sqlite version a a a a Package numpy conflicts for snorkel numpy version Package vc conflicts for python vc version a a Package pandas conflicts for snorkel pandas version Package pip conflicts for python pip Package scikitlearn conflicts for snorkel scikitlearn version Package scipy conflicts for snorkel scipy version Package vs runtime conflicts for python vs runtime version a Package pytorch conflicts for snorkel pytorch version Package networkx conflicts for snorkel networkx version Package tensorboardx conflicts for snorkel tensorboardx version Hi was wondering if there are any examples of snorkel classifier out of the box The tutorials showcase the keras api with probabilistic labels but curious to compare with the snorkel package Any help appreciated Thanks Is your feature request related to a problem Please describe Other dependencies for my project like torchvision fastbert allennlp all require that at least torch some require torch while snorkel uses Describe the solution youd like Update torch dependency to Describe alternatives youve considered I can have separate environments for running snorkel and running actual NLP but thats a messy solution and dependencies should be up to date anyways Is your feature request related to a problem Please describe I love snorkellabelingfilterunlabeleddataframe I want a pyspark equivalent snorkellabelingfilterunlabeledsparkrdd or snorkellabelingfilterunlabeledsparkdataframe Describe the solution youd like Implement the same filtering for pysparksqlDataFrames or pysparkRDDs Describe alternatives youve considered I am just implementing this myself at the moment I dont see an alternative to this function Additional context The numpyndarray in for example Ltrain returned by SparkLFApplier may have to be serialized into something else so Spark can use it SparkLFApplier could then optionally return this format if it makes that easier Issue description I wanted to specify the reliability of different weakly supervised LFs to the LabelModel I noticed that we can specify these as precision priors through the precinit parameter to the LabelModelfit method However precinit parameter seems to only accept scalar values Providing an array with precision value of each LF throws the following error AttributeError Traceback most recent call last ipythoninput e ea ad in module lm snorkellabelingLabelModel lmfitLtrain precinitprecinit nepochs lr logfreq seed ypred lmpredictLtrain AppData Local Continuum anaconda envs snorkel lib sitepackages snorkel labeling model labelmodelpy in fitself Ltrain Ydev classbalance kwargs logginginfoComputing O selfgenerateOLshift selfinitparams Estimate mu AppData Local Continuum anaconda envs snorkel lib sitepackages snorkel labeling model labelmodelpy in initparamsself if isinstanceselftrainconfigprecinit int float selfprecinit selftrainconfigprecinit torchonesselfm if selfprecinitshape selfm raise ValueErrorfprecinit must have shape selfm AppData Local Continuum anaconda envs snorkel lib sitepackages torch nn modules modulepy in getattrself name return modules name raise AttributeError object has no attribute format typeselfname name def setattrself name value AttributeError LabelModel object has no attribute precinit Code examplerepro steps Below is a short code snippet to reproduce this error within a jupyter notebook python import numpy as np import snorkellabeling numlfs numsamples Ltrain nprandomrandint sizenumsamples numlfs dtypenpint precinit nprandomrand lm snorkellabelingLabelModel lmfitLtrain precinitprecinit nepochs lr logfreq seed ypred lmpredictLtrain dflfsummary snorkellabelingLFAnalysisLtrainlfsummaryY ypred estweightslmgetweights displaydflfsummary System info How you installed Snorkel conda pip source conda OS Windows Python version Snorkel version Im trying to extend slicing functions to multi label classification tasks For the moment snorkel only supports binary classification Here is the computation of slice attention predictorconfidences torchcat Compute the confidence using score of the positive class Fsoftmaxoutput dim unsqueeze for output in predictoroutputs dim attentionweights Fsoftmax indicatorpreds predictorconfidences selftemperature dim My questions Why using the prediction of the positive class as confidence score What should we use in multi class label case Is your feature request related to a problem Please describe The first time a user tries to use the SpacyPreprocessor they hit they following error File stdin line in module File Usersbradenanaconda libpython sitepackagesspacyinitpy line in load return utilloadmodelname overrides File Usersbradenanaconda libpython sitepackagesspacyutilpy line in loadmodel raise IOErrorErrorsE formatnamename OSError E Cant find model encorewebsm It doesnt seem to be a shortcut link a Python package or a valid path to a data directory Describe the solution youd like We know the line where the spacy model is called and should be able to catch that Exception and download it if its missing 