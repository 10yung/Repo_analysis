A few months ago I migrated internal errors to xerrors since it is part of go now I thought it might make sense to use the latest feature directly from the std lib and use also correct error wrapping This change adds command line support for preparerename Updates golanggo Both of determineEnv and determineRootDirs calls take ms on MacBook Pro Right now they are needed in most cases only for overlay processing Optimize call them only when overlays are set Dont load deps by go list if NeedDeps wasnt set Before that deps were loading if NeedImports was set fix jsonrpc result no pending id always waits for a response What this PR does Add a new flag repairgroup If true forcing to repair imports group regardless of how they were originally grouped Fixed Why What goimports does not do example import testing context githubcomSirupsenlogrus The imports will keep intact because testing and context are considered in two different sections Manually correct If we delete the blank line goimports will resort imports correctly input import testing context githubcomSirupsenlogrus after formatting import context testing githubcomSirupsenlogrus Root case When goimports formats the imports it puts imports into different sections by successive lines and sorts them in each section It turns out that sorting will only happens in the same section In order to solve this problem we only need to consider all imports in one group regardless of how they were originally grouped Result of use repairgroup input package foo githubcomorgrepo foo import context os githubcomorgrepo foobar githubcomorgrepo foobaz githubcomorgrepo quux githubcomthirdpartyrepo runs goimports repairgroup local githubcomorgrepo output package foo githubcomorgrepo foo import context os githubcomorgrepo quux githubcomthirdpartyrepo githubcomorgrepo foobar githubcomorgrepo foobaz Added two flags to optionally convert the generated constant names to upper or lower case Not sure if this is within the scope of stringer or not But I have encountered multiple occasions where this could be useful This pull request adds support for a param directive to goyacc Per this StackExchange question its currently hard to pars some form of context to the yacc parser in goyacc ie emulate the param command in traditional yacc A typical use case would be to parse the Parse function to context as to where to build its parse tree This patch attempts to remedy this in an idiomatic manner by adding the facility to add multiple fields to the ParserImpl struct as specified in a param directive IE param foo bar adds the line foo bar to the ParserImpl struct which can be referred to as rcvr The goyacc Parse function is declared func rcvr ParserImpl Parselex Lexer int Things Ive thought of other than this patch ParserImpl cannot be changed by the y file so the obvious solution to add fields to it is before this patch right out which is a pity As Lexer is an interface I could stuff the parser context into the Lexer implementation then force type convert lex to that implementation assuming my parser always used the same lexer but this seems pretty disgusting for which read nonidiomatic Moreover there is seemingly no way to put a usergenerated line at the top of the Parse function like c yylexlexerc so in the many tens of places I want to refer to this variable I have to use the rather ugly form yylexlexerc rather than just c Normally Id use param in normal yacc C well bison anyway but that doesnt exist in goyacc before this patch Id like to avoid postprocessing my generated go file with sed or perl for what are hopefully obvious reasons I want to be able to goyacc parse more than one file at once so a global variable is not possible and global variables are hardly idiomatic commit message follows Add support for a param option similar to Bisons in a golang idiomatic manner Each param option specified adds a field to the ParserImpl struct If none are specified output is byteforbyte identical to goyaccs output before this commit Signedoffby Alex Bligh alexalexorguk 