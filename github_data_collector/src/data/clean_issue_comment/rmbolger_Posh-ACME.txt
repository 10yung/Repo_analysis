Hey rmbolger Im working on a script to get multiple certs and push those to respective servers And I do not want to save Private Key for all our certs in plain text For now I implemented another function that converts SecureString Read from a file to plain text and pass that to PfxPass Is there a possibility for this be implemented as a SecureString or does that cause other issues on other platforms Any chance of getting support for Dyncom DNS Per the initial conversation in it would be nice to have a perorder setting that will always generate a new certificate private key on renewals This will involve a new property on PAOrder objects and an additional parameter like AlwaysNewKey on functions that currently have a NewKey function While we could just repurpose NewKey that would mean losing the ability to only generate new keys on demand Ive never really liked how GetDnsPluginHelp works Its functional but awkward and I find myself just going to the plugins nicely formatted usage guide rather than visually parsing the help output Most of the time Im just looking for a quick reference on the plugin specific parameters Im not sure where I really want to go with this though A way to query those plugin specific parameters would be great Even better would be a way to generate a sample hashtable with the parameters that the user could just set values on A quick way to open a browser to the usage guide would also be nice Plugin parameters are currently serialized to disk using PowerShells native ExportCliXmlImportCliXml cmdlets Historically on Windows when the CliXml cmdlets encounter a secure variable such as SecureString and PSCredential PowerShell utilizes DPAPI to securely encrypt the data with a combination of machine and user specific keys such that only the current user on the current machine can decrypt it Unfortunately there is no DPAPI equivalent on nonWindows platforms and PowerShell Core from simply threw an exception if you tried to serialize secure variables Most plugins now have insecure parameter sets that explicitly avoid secure variables to workaround this problem PowerShell Core finally added a fix that prevented the exceptions but didnt actually add encryption to the serialized data Instead the strings are just obfuscated by converting their raw byte arrays to a string The larger NET Core steering committee has since deemed the SecureString type deprecated and suggests new development not utilize it which means PowerShell Core will likely never support native encryption for serialized secure variables on nonWindows Functionally as of PowerShell nonWindows users dont need to worry about explicitly using the insecure parameter sets on plugins anymore But Id still like to offer some sort of encryptedbydefault functionality ConvertToSecureString and ConvertFromSecureString have always supported an explicit encryption key It wouldnt be that hard to generate a new random key the first time the module is loaded and use that to do the encryption The problem is where to securely store that key in a way that works everywhere Realistically the initial implementation will likely just store it in a file with the rest of the PoshACME config But its still better than nothing The down side to this plan is that the CliXml cmdlets dont support using explicit keys So were going to have to roll our own plugin parameter serialization which is doable but obviously not as easy as just passing a hashtable to a native cmdlet It may also mean a limitation on the types of parameters allowed for plugins to keep the code as simple as possible The up side is that I can switch from XML to JSON which everything else were storing already uses The other benefit this would is that even encrypted configs would now be portable between users or platforms Though portability should probably still be optin on Windows for those people who like the DPAPI default that limits decryption to same usermachine Id love to get some feedback from anyone else on this plan I realize the vast majority of this modules users are on Windows So this may end up being a lot of work just for the principle of the thing Any thought to adding support for a single command for the HTTP Challenge like there is for the DNS challenge Maybe something like this NewPACertificate domaincom AcceptTOS Install ChallengeType HTTP HttpArgs Pathc inetserv domaincom 