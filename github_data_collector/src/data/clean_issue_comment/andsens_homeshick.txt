When I just run homeshick refresh dotfiles confirm with y and run it again it says my dotfiles are outdated uh michaelheubergerbinarykitchen homeshick refresh dotfiles outdated dotfiles outdated homeshick refresh The castles dotfileshomeshick are outdated pull yN y pull dotfiles pull homeshick michaelheubergerbinarykitchen homeshick refresh dotfiles outdated dotfiles outdated homeshick refresh The castles dotfileshomeshick are outdated pull yN y pull dotfiles pull homeshick michaelheubergerbinarykitchen Would be great being able to dryrun some commands especially link in order to make sure of what would happen before it actually does homeshick link dryrun From the homesick readme If you need to add further configuration steps you can add these in a file called homesickrc in the root of a castle Once youve cloned a castle with a homesickrc run the configuration with homesick rc CASTLE The contents of the homesickrc file must be valid Ruby code as the file will be executed with Rubys eval construct The homesickrc is also passed the current homesick object during its execution and this is available within the homesickrc file as the self variable As the rc operation can be destructive the command normally asks for confirmation before proceeding You can bypass this by passing the force option for example homesick rc force CASTLE Would there be any interest to add the same thing to homeshick in form of a bash script named homeshickrc at the root of a castle PR brought up the issue of being able to link untracked files Here are two use cases The motivation for this is that I have some dotfiles that are untracked by git since they contain private information but which I still want to link Also when Im working on my emacs configuration I sometimes have new files that I dont want to track right away but theres no way to link them easily since theyre inside a submodule Homesick offers the ability to remove symlinks You can remove symlinks anytime when you dont need them anymore homesick unlink CASTLE Would anybody be interested in having the same functionality in this repo We need to support a semantic versioning update system for homshick in order to mitigate the risk of breaking users castles with a major release ie potential breaking changes In essence we need to change the way pull works with homeshick If the new version homeshick that is being pulled is a new major version breaks backwards compatibility It would prompt the user that there are major breaking changes and that they should read the change log before updating After theyve done so they may homeshick update Im impartial as to the homeshick update command idea A better idea might be prompting the user whether or not we should continue with the pull if it is a major release This would require that the pull command have an f where it wouldnt prompt for version changes We should implement this feature with convention So that it can be applied to any castle Maybe it could use a VERSION txt file in the root of the repo that would be a semantic version to check As discussed in it can be very useful at times to fiddle with git repos by using homeshick To do that homeshick needs to stop skipping files and folders named git when linking However some things still need to be skipped The git folder in the root of a castle since that is a folder managed by git and not the user The git files in submodules of a repo The git folders in submodules of a repo for older git versions if I remember correctly git switched to just managing all submodules in the git folder of the root repository so we need the git version where that changed homeshick diff castle file file Should diff the current files against the ones in the castle useful before linking to know whats getting clobbered or should be merged in The check command is a rather complicated piece of code and is not even complete without which would make it even more complex Additionally it is slow since it has to connect to the remote upstream to check for updates I do not use this command very much myself and was wondering whether a depreciation would be in order The two use scenarios as I can see it are Run check to see if there are any changes on the upstream remotes which is a stupid scenario because after that you would probably run pull anyways so why not just run pull immediately You are wondering if there is anything you have not pushed upstream yet Scenario is very much an edge case and not enough of a feature to warrant an entire command iron core has forked the repo and implemented a nifty feature linking based on the machine os Files are disambiguated by appending OS to them This would make a lot of sense for crossplatform deployments of eg Sublime Text which stores its config in HOMELibraryApplication SupportSublime Text on OSX and in HOMEconfigsublimetext on Linux That would allow you to create a repo like so HOMEhomesickrepos subl home LibraryosOSXApplicationUser settings configosLinuxconfigUser settings settings Preferencessublimesettings He also added hostname disambiguation but I think that would kill the simplicity of it The downside of course is that any hashmarks in folder names could clash with this feature Any comments EDIT Summary Delimiters So far I have only seen jjlin disagree with the choice of as a delimiter The alternative was lifted from the ClearCase VCS where the argument was also made for a twocharacter delimiter Since there will be a need for an escape character regardless we should stick to a single character delimiter and in the absence of arguments against I say we use it Escape characters Apparantely homeshick works on Cygwin I honestly had no clue so the backslash will definitely break stuff and theres no need to do that Short of smashing a random key on the keyboard maybe we can find something that still makes semantic sense The escape character will be used for all three special characters and for the escape character itself When would the escape character need escaping Only when it preceeds one of the other special characters Filters Filters are ANDed and separated with commas Key and value are separated by a The same escape character for and should also be used for the delimiter Keys should be insensitive and values should be case sensitive just an idea open to suggestions Possible filter keys cmd whether a command is available os the operating system Possible values Linux OSX Cygwin BSD both FreeBSD and OpenBSD any others host Hostname of the system user Username of the executing user envvarname Environment variable values Filter conflicts iron core discovered and fixed another problem see comment below issuecomment What to do when two files with different filters but the same name match Possible solutions iron core solution is to use a scoring mechanism see the fork Instead of scoring a simple ranking could be used No scoring at all simply let the file that comes first alphabetically win No file is picked Tell the user there is a conflict and let him resolve the solution by picking better filters Challenges The problem from Unlink deleted files rears its head a second time homeshick should check if unmatched files with filters are symlinked and remove those symlinks eg an env variable changed This may however be something that should be discussed in issue 