Happens in your latest version Uncaught TypeError Cannot redefine property name Debugged it in the raw compiled ES code and found the cause return ObjectdefinePropertyawaitablenamevalueawaitableconcatasyncFnname The name property has been set without configurable true and is being redefined again when another code requires the same file Id consider adding configurable true See Sorry for not following the issue template but this is simple This template is for bug reports If you are reporting a bug please continue on If you are here for another reason such as a feature request change or question you can disregard this template What version of async are you using Which environment did the issue occur in Node versionbrowser version v What did you do Please include a minimal reproducable case illustrating issue considering this js const queue requireasyncqueue var q queuefunctiontask callback consolelogexecuting taskname function doSomething return status message success others var result doSomething callbackresult qerrorfunctionerror task consoleerrorerror taskname error qpushname foo functionresult consolelogfinished processing done status resultstatus What did you expect to happen can pass anything to callback stop global error handler if i had handled in a specific callback callback can handle error and result that are passed from worker What was the actual result executing foo finished processing done status error foo object Object worker can not pass result to callback it will treat as an error and once i create a global error handler i cannot stop it in my callback like this js qerrorfunctionerror task consoleerrorunhandled error occur error in taskname task qpushname foo functionresult error if error consolelogerror return false or return error even throw new Error return false return error throw new Errorsomething unexpected happened error consolelogfinished processing done status resultstatus return true means everything is ok everything is handled return true This template is for bug reports If you are reporting a bug please continue on If you are here for another reason such as a feature request change or question you can disregard this template What version of async are you using Latest Which environment did the issue occur in Node versionbrowser version Node Version What did you do Please include a minimal reproducable case illustrating issue Generate huge task into Async Queue with async type process function it somehow become slow down when processing running for job for first time minutes reboot running for job for second time minutes no reboot running for job for third time hours What did you expect to happen it should took minutes for jobs constantly What was the actual result running for job for first time minutes reboot running for job for second time minutes no reboot running for job for third time hours This template is for bug reports If you are reporting a bug please continue on If you are here for another reason such as a feature request change or question you can disregard this template What version of async are you using Which environment did the issue occur in Node versionbrowser version Nodejs What did you do Please include a minimal reproducable case illustrating issue cradleasyncwaterfall next consolelog nextnull a next consoleloga nextnull err b consolelogb outputs cradleasyncwaterfall next consolelog nextnull a next consoleloga next err b consolelogb outputs undefined cradleasyncwaterfall next consolelog next a next consoleloga nextnull err b consolelogb outputs Function and throws the error TypeError next is not a function What did you expect to happen On that last of three code examples I expected output undefined In general I expected that tasks can receive implicit undefined just as the finalCallback can receive implicit undefined Is this caused by the fact that we cannot read the next task prototype list of params and construct a series of undefined callback What was the actual result as stated above This template is for bug reports If you are reporting a bug please continue on If you are here for another reason such as a feature request change or question you can disregard this template What version of async are you using Which environment did the issue occur in Node versionbrowser version node What did you do Please include a minimal reproducable case illustrating issue js fileajs var a requirefilebjs consolelogstr astr filebjs const async requireasync asyncwaterfall functionerr result exportsstr result What did you expect to happen I expect the output is str hello world What was the actual result It is str undefined I searched for so many solutions But I could not find one workable This template is for bug reports If you are reporting a bug please continue on If you are here for another reason such as a feature request change or question you can disregard this template What version of async are you using v and also master branch until The example source codes are as below javascript const results asyncuntilfunction testpage cb cbnull pagenext null function iternext fetchPageurl err body if err return nexterr results resultsconcatbodyobjects nexterr body function done err all pages have been fetched But test function can have only callback function argument It cannot receive page argument When I print out arguments in the above test function it has only a function as arguments Please check this whilst The example source codes are as below javascript var count asyncwhilst function testcb cbnull count function itercallback count setTimeoutfunction callbacknull count function err n seconds have passed n In test function semicolon seems to be located at the wrong position Maybe the below code is intended javascript function testcb cbnull count And in parameter description of test asynchronous truth test to perform before each execution of iteratee Invoked with I think its last sentence seems to be modified as Invoked with callback according to the parameter description of until What version of async are you using Which environment did the issue occur in Node versionbrowser version node What did you do Please include a minimal reproducible case illustrating issue Javascript use strict const delay timeout return new Promiseresolve setTimeoutresolve timeout const myAsyncFunction async function return asyncmapLimit async num await delay consolelognum return num myAsyncFunctionthenresult consolelogresult What did you expect to happen The code should output Then at the end of the mapLimit the code should log the array What was the actual result The code outputs The final then is never called the await on the asyncmapLimit just hangs I discovered after some trial and error that while thenable objects are not supported out of the box they are supported by asyncasyncify since it checks for then instead of if its an instance of a Promise This is an example of a situation where you would need to use asyncasyncify even in an environment that natively supports async functions I came across this when using the Knex QueryBuilder which returns a thenable not a Promise What version of async are you using Which environment did the issue occur in Node versionbrowser version node npm browser NA What did you do Please include a minimal reproducable case illustrating issue Issue has a thread in stackoverflow Basically I have this code async requireasync let numPromise asyncmapLimit functionnum callback setTimeoutfunction num num consolelognum callbacknull num numPromise thenresult consolelogsuccess result catch consolelogno success What did you expect to happen Execute without errors numPromise should contain a Promise console should log and success What was the actual result It throws an error TypeError Cannot read property then of undefined Note When I use the promiseasync module instead of async then this code works well Documentation says that asyncmapLimit and others return a Promise when no callback is supplied but I get undefined Couldnt find any working sample yet please also see my suggestion on the need samples issue Now that with v x my app is breaking since its browserify babelify configuration doesnt transform nodemodules by default See for background Suggestion is to add this in your packagejson browserify transform babelify presets babelpresetenv This will ensure that any app using async and building it with browserify babelify gets transpiled correctly Thanks