I have a NavFeature which handles routes NavWishpath String goes in and NavStatemodule String args goes out All my code depends on StoreNavWish NavState Now I want to use a stack with NavStates but I dont want the rest of my code to know that Im using a Stack What is the best way to expose a Storeinterface without the stack but use the stack interrnally This may be by design but it was not immediately obvious and drove me insane this morning I was looking for the logging for an Actor in one of my Features but I was not getting any output Turned out that a refactor recently had the sideeffect of the Feature being instantiated before the LoggingMiddleware was added Is this a case that could be handled or if not maybe it is worth calling attention to in the wiki If SameThreadVerifier is enabled we can capture stack trace where this object was created and then print it on assertion error or add it as a cause It should help with debugging such errors How can I handle multiple Feature to View bindings Where ViewModels should be merged into one to render in View Do you have any examples of this Multiplatform framework implementation of MVICore Consists of several steps Move current implementation of MVICore to mpp module without any dependencies Source Sink Cancellable types Binder BaseFeature ActorReducerFeature ReducerFeature Middleware Setup build and publishing for mpp modules x Create a wrapped version for RxJava based on mpp implementation Deprecate current implementation and replace it with typealiases to help with migration Implement wrapped versions for coroutines and Reaktive Document changes Hi guys Do you have any examples best practices how you tests yours features Could you please help me to find out better solutions to configurate custom views I have different features on one screen Each feature has its own view The app has a dynamic theme Each view has one inputstate I need to set theme settings for each view I hope that anybody has some ideas or any examples of how to do it in the best way Hi In best practices you wrote next code class BootstrapperImpl private val feature Feature BootstrapperWish override fun invoke ObservableWish feature newsmap SomeWishOfFeature But i cant understand best way to do this map because news is ObservableSource and dont have map function Maybe you have some ktx extensions for this Now i do this class BootstrapperImpl private val feature Feature BootstrapperWish override fun invoke ObservableWish Observablecreate emitter val newsListener object ObserverFeature News override fun onNextnews Feature News whennews elseemitteronNextWishUpdate override fun onComplete emitteronComplete override fun onSubscribed Disposable override fun onErrore Throwable featurenewssubscribenewsListener We need to decide what to do in Bootstrapper based in the initial state quite often Right now this needs to be passed manually to implementation constructor which is quite inconvenient when eg deciding the initial state based on TimeCapsule as a reference cannot be stored for it inside constructor Proposed solution is to change Bootstrapper and BaseFeature so that initial state is passed automatically to invocation Tracking issue of what has beenwill be done and for which milestone x Source parameter in connection x Connector transformer from source to source x MemoFeature x Model watcher Previous state in newsPublisher and postProcessor Add initial state to Bootrstrapper invocation Multi platform framework support Parameter to delay feature start 