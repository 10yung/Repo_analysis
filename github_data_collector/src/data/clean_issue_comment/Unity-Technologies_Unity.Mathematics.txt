 Orginally tracked internally at Unity by xoofx UnityMathematics is designed to work well with burst but is not efficient with regular C mostly because all vector types are passed back and forth tofrom the stack C is now providing the in modifier that allows to pass implicitly by ref a readonly argument Usage of in could mitigate the performance degradation of using UnityMathematics in plain C Will need to ensure that the Burst codegen is not affected by this too Why are halfXMinMaxValue constants defined as floats instead of halfs It breaks the very common pattern of var initializedHalf half MaxValue which is a bit weird I can see it making sense when used in logic code but Im not convinced that offsets the confusion from implicit initialization Hi I understand the naming convention of alllowercase provides the benefits as described here As a counterbalancing point I just wanted to provide my impression that usability is lowered though when it comes to Unity usage like this var jobHandle Entities WithNameRotationSpeedSystemForEach ForEachref Rotation rotation in RotationSpeedForEach rotationSpeed rotationValue mathmul mathnormalizerotationValue quaternionAxisAngle mathup rotationSpeedRadiansPerSecond deltaTime ScheduleinputDependencies where now suddenly functions are using different case rules Generally its also harder to parse in your mind multiple words if they dont use camelcase eg lengthsq contains both the plural lengths as well as the intended length sq Another stumbling block is generally to have some functions start with a lowercase this flavor and others with uppercase classic Unity as it makes it harder on the eye to understand what is a function during broad scanning Of course those are just splitseconds reading stumbling blocks but Im having flashbacks to how the PHP language grew over time to make different functions use different underscore case or haystackneedle parameter ordering rules increasing usability Again I understand there are benefits to alllowercase so please just take it as it is an impression from a developer so you can better gauge the costs The way you chose to do it may still be better in sum Currently only the float function is implemented It would be great to have something like this please public static double mulquaternion q double v double t crossqvaluexyz v return v qvaluew t crossqvaluexyz t It doesnt appear that we have a convenience function to extract the upper left float x from a float x Currently you must extract manually return new float x mc xyz mc xyz mc xyz Add this as a convenience function I know that Burst is promising crossplatform floating point determinism in the future but thats not only a high bar to cross its a problem almost nobody has solved before it also limits the usability of deterministic computation to Burst compiled jobs Having general access to fixed point computations be it Q or Q bit could make it much easier to have universally available deterministic decimal computations Hello I think some may agree that support for byte vector types would come in handy For example when working on textures since Color already uses four bytes underneath If there is no reason against it i will look forward to it The greetings I have forked this masterbranch and from this masterbranch I have edited mathcs of which you can see here Specificially from line to line are my additions I am also including them below this text so you can see in this field of text what I have proposed to add but cannot since I cannot seem to figure out how to do a request for pull summaryReturns the angle in degrees from to between two float ssummary public static float anglefloat from float to return mathdegreesmathacosmathdotmathnormalizefrom mathnormalizeto summaryReturns the signed angle in degrees from to between two float ssummary public static float anglesignedfloat from float to float angle mathacosmathdotmathnormalizefrom mathnormalizeto float cross mathcrossfrom to angle mathsignmathdotmathup cross return mathdegreesangle If they are already in there let me know where Preferably through documentation on your webcite