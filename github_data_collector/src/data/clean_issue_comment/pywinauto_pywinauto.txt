 Use the pywinautobaseapplication as the main source for Application module Fix methods links in the Applicaiton documentation Mention WindowsLinux specific implementations of Application I am not sure how deep into the Windows API pywinauto dives or where the line is drawn until something is not considered GUI Here are some things I wrote for accessing different portions of the Windows API they might be useful and they might not I wanted to share dealing with ctypes and the Windows API does truly suck So if there is anything in here that can make things a bit easier or maybe something that you have not gotten around to adding I have already done Windows core audio interface Just about all of the control available from the sound control panel available in python plus some extras like detecting audio output and what program is outputting itaudio detection is done one of ways the first way is able to capture the program name the audio is coming from This is not always available This mechanism does not really know if there is sound being heard only if there is something playing The second way detects audio output and audio input This is a true reading if audio can be heard this is going to let you know There is an adjustable tolerance that can be supplied to filter out any hiss or noise Needs some work to support python x This project I am going to split into projects One will be a decoder and the other will handle the nitty gritty of getting the IR signals from the receiver On the latter I am going to add one decoder to it the ability to decode MCE codes The decoding portion if going to take a while longer for me to finish up as there is a seemingly endless number of ir protocols https githubcom kdschlosser pyWinMCERemote still a work in progress Windows virtual desktop management no need to say more Fixes the problems that occur with Windows virtual locals and Python Supports all languages that are supported by Windows I also threw in native text for the language name and country name and for the hell of it you can also get an icon of the flag for the country I did those things because I never understood why a language selection the available languages and countries would always be the same language I thought it would be better to have the text for a selection be in that languages alphabet Windows API errors rolled into a single file The data types that are missing from ctypes Windows processes process management esentially Windows named pipes pure python named pipes lines of the Windows SDK ported to python does not run python would probably see this thing getting loaded and try to run away to be used as a reference or maybe you would rather copy and paste what is needed to save a bunch of time It is not perfect there may be some errors one is there is no consideration for packing so be sure to check the windows API docs The file structure is identical to the Windows SDK If there is a specific file of the API that is wanted and I do not already have it converted let me know takes me a few hours to port a line file Feature request Expected Behavior Somewhat humanlikenatural mouse movement PyAutoGUI and others have this functionality see doco Actual Behavior Mouse simply disappears from one place and appears in another Steps to Reproduce the Problem Any code to move the mouse Short Example of Code to Demonstrate the Problem python import pywinauto time pywinautomousemovecoords timesleep pywinautomousemovecoords Reported here in the comment Expected Behavior An item in the combobox is selected Actual Behavior After correct behavior an unrelated combobox is changed and expanded Short Example of Code to Demonstrate the Problem I tried the following source by the NewControls in VCSamples VCSamplesVC SamplesMFCVisual C Feature PackNewControls newcontrol source py launch the app app Applicationuiastartr newcontrolsexe dlg appwindowtitlere NewControls get combobox with resource ID combobox dlgchildwindowautoid select a combobox item comboboxselectImage on right In this example I try to change only the Image Location combobox but the Appearance combobox is operated and expanded without collapsing note I used backenduia because I want to use resource ID of MFC When changing the source to select with number excomboboxselect the source cannot work After removing source under do health check and apply workaround for Qt combo box if necessary in select method of ComboBoxWrapper class the program worked fine Specifications Pywinauto version Python version and bitness Python bit Platform and OS Windows This is the first time I have written to the github So if there is a problem in my writing I would be glad if you could point out Expected Behavior Do the code with a seconds delay between clicks Actual Behavior It waits seconds between clicks Steps to Reproduce the Problem Open notepad Run code Check print log Short Example of Code to Demonstrate the Problem from pywinauto import application timings import time app applicationApplication app connecttitlere Notas In portuguese Notepad is translated to Bloco de Notas so change to your system name app app windowtitlere Notas same here app app wrapperobject timingsTimingsafterclickinputwait timingsTimingsaftersetcursorposwait starttime timeperfcounter for i in range app clickinputbuttonleft coords printBetween clicks took strtimeperfcounterstarttime seconds starttime timeperfcounter Specifications Pywinauto version Python version and bitness bit Platform and OS Windows Extra info If you move the mouse physically it forces a faster response time doing the expected result at the root folder and in the OS specific implementations Its broken in branch atspi PR Unit tests must be written to make sure it will not be broken in the future I tried to screenshot a window without border and I followed this code Expected Behavior The screenshot was supposed to have no border like the image shown in the link Actual Behavior But I got an error from python saying that AttributeError RECT object has no attribute width It seems like the error is from inside the basewrapperpy in captureasimageself rect where the attribute width was used Specifications Pywinauto version Python version and bitness Platform and OS Windows I dont have to stick to this method so any way of taking a borderless screenshot of a window is welcomed I just think it might be worthy to mention this issue here Expected Behavior Actual Behavior Steps to Reproduce the Problem Short Example of Code to Demonstrate the Problem Specifications Pywinauto version Python version and bitness Platform and OS 