 Feature request scale but keep thickness or change thickness but keep bounding box size the gif below is close to my intent thanks intent Resolves Bug report This example from your docs doesnt work at all imageonload function e consolelogenaturalWidth enaturalHeight enaturalWidthenaturalHeight are undefined I tried to use something like this var img svgimageurltoimage imgonloadfunction consolelogthisimagenodewidthbaseValvalue consolelogthisimagewidth BUT sometimes i get zeros in both console outputs same page reload without code change I think mine loadhandler is in same orderlevel as your internal handler which fills those values tested on Chrome webpack typescript Bug report There is no type definition for the Runnerpersist method which prevents a Typescript project from building when using that method A persist method also exists on the Timeline class with slightly different comment about what the value should be though the function declarations are the same Runner Stores how long a runner is stored after beeing sic done thispersist thisisDeclarative true null Timeline Determines how long a runner is hold in memory Can be a dt or truefalse thispersist Fiddle Uncomment the persist usage line Explanation Expect Persist method exists that takes an optional boolean on Runner and Timeline classes in svgjsdts Actual Typescript compile fails to compile a typescript file that has Runnerpersist usage Error error TS Property persist does not exist on type Runner scales documentation looks like this scale returns itself animate yes The scale method will take an x and y value scalex y elementscale Looking at the code scale in fact takes an optional twocoordinate center of scaling vanishing point It can be called in these ways scalefactor scalexFactor yFactor scalefactor centerX centerY scalexFactor yFactor centerX centerY rotates documentation mentions the center argument so scales should too I personally find it confusing that scale scales relative to the center of the object by default different from a raw SVG transform so Id suggest also mentioning that the default is relative to the center of the element like rotates documentation does Happy to submit a PR if you can remind me where the documentation lives Bug report svgusecenter will set the wrong position Fiddle fiddle here with svgjs the two symbols blue squares should be at the same position Explanation situation we define a svgsymbol we svguse that symbol we svgusecenter the symboluse problem usecenter behaves like usemove and svguse ends up at the wrong position speculation use has no bbox or size and symbol size dont propagate to symboluse size problem usebbox red squares is wrong the boundingbox has a wrong xy position Notes move should be used when possible faster center should be used only when necessary slower this took me some hours to get it right and i guess its worth to document situation we have a rect filled with a pattern and we want to drag the rect problem the pattern will not move with the rect solution put the rect inside a nested SVG document and make that draggable why cos the pattern position is relative to its first parent SVG document fiddle stackoverflow js create canvas var draw SVGsize addTocanvas pattern of checkerboard var patt drawpattern pattrect fillcolor fff pattrect pattrect move nested svg document var nested drawnested rect pattern nestedrect fillpatt drag on nesteddraggable bad solution use the dragmove handler to update the pattern origin js this works too but its slow group draggable var group drawgroupdraggable move handler groupondragmove e const x y edetailbox pattmovex y rect with pattern var r grouprect fillpatt not helping pattattr patternContentUnits objectBoundingBox patternUnits objectBoundingBox I dont know if its a bug really But the ForeignObject element does not seem to work as expected for me I tried this pretty simple code javascript var draw SVGaddTobodysize var forObj drawforeignObject var text SVGtextareaFoo exampletextarea forObjaddtext Here is the code running in Fiddle On my browsers Chrome Firefox the textarea element is not showing at all The weird thing here is that the textarea exists in the DOM I can inspect it and see it in the DOM tree but its not considered as html element by the browser no CSS default styles applied not editable content is not displayed Maybe I did something wrong Thanks Feature request deep delete objects Im a long time user of svgjs and am really appreciative of your effort I know I can remove an element using remove but somehow it still takes up processing to edit items in the containing container after the element has been removed I use svg js as part of a dynamic UI with lots of zooming and rearranging and although I try where I can to modify existing elements sometimes I feel the need to remove old ones that are no longer used especially in long sessions when things start to slow down Also perhaps a related request I use paths markers to make arrowed lines and it seems they take longer to update than to make from scratch Can this be mitigated Benefits memory savings for long running programs I think the syntax to achieve this should be js rectdestroy 