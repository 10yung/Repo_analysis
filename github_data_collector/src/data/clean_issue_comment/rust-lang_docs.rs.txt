 Please note we wont enable network access or allow the crate to write in readonly directories to avoid compromising the security of docsrs itself Crate name jniandroidsys Build failure link Requested RAM limit GB Requested timeout As is minutes Why your crate needs the resource increases rustdocexe alone uses GB of memory on windows when executed via cargo doc nodeps features apilevel all forcedefine as this crate includes generated source code to bind to the entire Android API While the build logs obliquely mention SIGKILL Im assuming this is from similar memory use on linux exceeding memory limits Previous builds have finished in approximately minutes so the default timeout at is probably fine Ignore yanked versions Ignore prerelease versions Add lots of tests Note this now queries releasesversion instead of cratesversions so that I have accessed to releasesyanked This shouldnt affect behavior but if a previous bug set cratesversions to something different it will no longer be seen Closes closes r pietroalbini If you need a system dependency added for your crate to build consider making a PR to instead of opening an issue here There are detailed instructions for this at Crate name stm f discovery Build failure link Additional details Crates targeting ARM CortexM processors fail to build because docsrs currently doesnt support the thumbv targets This can be worked around by setting the default target to x unknownlinuxgnu per toml packagemetadatadocsrs defaulttarget x unknownlinuxgnu Possibly related to eg looks like a normal release while shows that its been yanked dockworker which is a docker client library Building this crate failed on docsrs Crate name dockworker Build failure link Additional details On my local machine Ubuntu LTS building succeeds Closes This is coming from Somehow theres a case where reqpath has a module thats not the same as targetname but also not a target Maybe a renamed crate This is all the information I have from the logs detailssummarybacktracesummary Jan docsrs cratesfyi thread unnamed panicked at index out of bounds the len is but the index is srcwebrustdocrs Jan docsrs cratesfyi stack backtrace truncated Jan docsrs cratesfyi corepanickingpanicboundscheck Jan docsrs cratesfyi at srclibcorepanickingrs Jan docsrs cratesfyi cratesfyiwebrustdocrustdochtmlserverhandler Jan docsrs cratesfyi F as ironmiddlewareHandlerhandle Jan docsrs cratesfyi allocboxedBoxdyn ironmiddlewareHandler as ironmiddlewareHandlerhandle Jan docsrs cratesfyi cratesfyiwebroutesBlockBlacklistedPrefixes as ironmiddlewareHandlerhandle Jan docsrs cratesfyi allocboxedBoxdyn ironmiddlewareHandler as ironmiddlewareHandlerhandle Jan docsrs cratesfyi routerrouterRouterhandlemethod Jan docsrs cratesfyi routerrouterRouter as ironmiddlewareHandlerhandle Jan docsrs cratesfyi ironmiddlewareChaincontinuefromhandler Jan docsrs cratesfyi ironmiddlewareChain as ironmiddlewareHandlerhandle Jan docsrs cratesfyi allocboxedBoxdyn ironmiddlewareHandler as ironmiddlewareHandlerhandle Jan docsrs cratesfyi cratesfyiwebCratesfyiHandler as ironmiddlewareHandlerhandle Jan docsrs cratesfyi ironironRawHandlerH as hyperserverHandlerhandle Jan docsrs cratesfyi hyperserverWorkerHhandleconnection Jan docsrs cratesfyi hyperserverlistenerspawnwithclosure Jan docsrs cratesfyi note Some details are omitted run with RUSTBACKTRACEfull for a verbose backtrace details Most of these are partially addressed in but it would be better to have unit tests Off the top of my head proc macros should work but only for default target because of bugs in cargo all targets are built anything thats not only bin is built including cdylib rlib etc viewing source works building with dockercompose from scratch no cache works expensive doesnt need to be run on every commit including on hosts other than x unknownlinuxgnu renamed crates work eg constellationrs constellation go to latest version works and doesnt crash This would make me much more comfortable fixing and Same as but now it doesnt crash when viewing source code r pietroalbini 