This is similar to which only addressed execbatch In conjunction with specifically the owner option please consider adding a perm flag accepting the standard four digit permission format as a filter Hey there Im not sure if this is possible with fd already sorry if it is but wouldnt it make sense to not buffer command output by default when using j threads For example bash fd type directory maxdepth threads exec bash c date sleep Currently fd will buffer the output of bash and only display it after the process exits But in this particular case since bash will always run consecutively and not in parallel I think it would make sense to not buffer them What do you think Thanks Attempts to fix I was looking for sockets but noticed some other file types are missing as well From find type t True if the file is of the specified type Possible file types are as follows b block special c character special d directory f regular file l symbolic link p FIFO s socket equivalently via the Open Group sysstath linked from Wikipedia SIFMT Type of file SIFBLK Block special SIFCHR Character special SIFIFO FIFO special SIFREG Regular SIFDIR Directory SIFLNK Symbolic link SIFSOCK Socket For reference fd offers the following filetype filters currently according to help t type filetype Filter the search by type multiple allowable filetypes can be specified f or file regular files d or directory directories l or symlink symbolic links x or executable executables e or empty empty files or directories Using the find command with the lname parameter makes it easy to find all matching symbolic links for example find lname libarchive I can find all the symbolic links from the libarchive directory Im mainly dealing with the issue of dotfiles not showing up when fd is used with fzf export FZFDEFAULTCOMMANDfd type file to efficiently list files on disk Clearly the default of not including hidden files is reasonable but the one exception to this is dotfiles eg vimrc configterminatorconfig profile all files that I will actually edit quite often There seem to be approaches add to the fd invocation to explicitly include files from git lsfiles somehow Its unclear how to do this cleanly Its unclear if it is a reasonable thing to ask fd itself to have a custom flag to whitelist git tracked files for us But if that exists it is perfect for this situation run fd H and add many patterns svn git etc to the ignore This is probably sane but I dont know it doesnt give me warm and fuzzies Ideas Hi Here are some details rustc version rustc e uname a Darwin nucleus Darwin Kernel Version Wed Sep PDT rootxnu RELEASEX x port version Version To demonstrate the problem I reinstalled fd as below cargo install fdfind force Updating cratesio index Installing fdfind v Compiling libc v Compiling memchr v Compiling bitflags v Compiling fsextra v Compiling lazystatic v Compiling cc v Compiling unicodewidth v Compiling log v Compiling regexsyntax v Compiling cfgif v Compiling strsim v Compiling ansiterm v Compiling nix v Compiling vecmap v Compiling versioncheck v Compiling samefile v Compiling fnv v Compiling void v Compiling quickerror v Compiling ansiterm v Compiling threadlocal v Compiling crossbeamutils v Compiling walkdir v Compiling humantime v Compiling lscolors v Compiling crossbeamchannel v Compiling termsize v Compiling atty v Compiling numcpus v Compiling textwrap v Compiling ahocorasick v Compiling bstr v Compiling clap v Compiling regex v Compiling ctrlc v Compiling globset v Compiling ignore v Compiling jemallocsys v Compiling jemallocator v Compiling fdfind v Finished release optimized targets in s Replacing Usersrobincargobinfd Replaced package fdfind v with fdfind v executable fd The resulting binary segfaults as follows cd tmp fd oystersclamsandcockles Segmentation fault On prying with lldb I see this lldb which fd lldb target create Usersrobincargobinfd Current executable set to Usersrobincargobinfd x lldb r Process launched Usersrobincargobinfd x Process stopped thread queue comapplemainthread stop reason EXCBADACCESS code address x frame x d fdrjemjetcachebinflushsmall fdrjemjetcachebinflushsmall x d movq rax rax x a shlq x rax x a sarq x rax x a andq x rax Target fd stopped lldb bt thread queue comapplemainthread stop reason EXCBADACCESS code address x frame x d fdrjemjetcachebinflushsmall frame x b fdtcacheflushcache frame x bb fdtcachedestroy frame x cd fdrjemjetsdcleanup frame x d e fdrjemjemalloctsdboot frame x f b fdjemallocconstructor frame x eb dyldImageLoaderMachOdoModInitFunctionsImageLoaderLinkContext const frame x eba a dyldImageLoaderMachOdoInitializationImageLoaderLinkContext const frame x e dyldImageLoaderrecursiveInitializationImageLoaderLinkContext const unsigned int char const ImageLoaderInitializerTimingList ImageLoaderUninitedUpwards frame x e c dyldImageLoaderprocessInitializersImageLoaderLinkContext const unsigned int ImageLoaderInitializerTimingList ImageLoaderUninitedUpwards frame x e c dyldImageLoaderrunInitializersImageLoaderLinkContext const ImageLoaderInitializerTimingList frame x d b dylddyldinitializeMainExecutable frame x d aab dylddyldmainmachoheader const unsigned long int char const char const char const unsigned long frame x d dylddyldbootstrapstartdyld MachOLoaded const int char const dyld MachOLoaded const unsigned long frame x d dylddyldstart lldb Note that the problem goes away if I build fd in debug mode cargo install fdfind debug force Updating cratesio index Installing fdfind v Compiling libc v Compiling memchr v Compiling bitflags v Compiling cc v Compiling fsextra v Compiling log v Compiling lazystatic v Compiling unicodewidth v Compiling cfgif v Compiling regexsyntax v Compiling vecmap v Compiling nix v Compiling strsim v Compiling ansiterm v Compiling samefile v Compiling fnv v Compiling void v Compiling versioncheck v Compiling ansiterm v Compiling quickerror v Compiling threadlocal v Compiling crossbeamutils v Compiling walkdir v Compiling humantime v Compiling lscolors v Compiling crossbeamchannel v Compiling ahocorasick v Compiling bstr v Compiling termsize v Compiling atty v Compiling numcpus v Compiling textwrap v Compiling jemallocsys v Compiling clap v Compiling regex v Compiling ctrlc v Compiling globset v Compiling ignore v Compiling fdfind v Compiling jemallocator v Finished dev unoptimized debuginfo targets in s Replacing Usersrobincargobinfd Replaced package fdfind v with fdfind v executable fd cd tmp fd oystersclamsandcockles echo Happy to provide any other info as needed Thanks There is a dead PR already submitted for issue I thought I would propose a smaller change thats more likely to be accepted into the codebase Happy to take feedback and change the design if needed in the interest of getting this closed Closes fd is great for listing the files that match some pattern but if I want to know more details about those files eg permissions size owner modification date I need to run them through ls or exa fd pattern x ls l isnt such a great experience though it isnt colored the order is random and the columns dont align if the file sizes arent similar Given that l is the most common flag to ls why not also support it in fd