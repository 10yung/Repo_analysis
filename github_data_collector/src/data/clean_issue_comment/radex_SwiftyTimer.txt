Please make it support for Swift Code works on its own just config stuff This was required in my project to be able to use after and every methods for timers that need to update the UI The timer needs to run in commonModes to be able to update the UI while scrolling It keep the same behaviour as previously and the signature is backward compatible I added a new start function because the splat operator is not available in Swift hence the need to create a new one that takes an array as parameters Feedbacks are welcome I will adjust the PR accordingly Hello I want to make a function that starts the timer unless there is a bool true in params eg animateStatusIconstop true in that case I want to stop the timer Does anyone have an idea whats going on here The timer starts but no matter what I do it wont stop swift func animateStatusIconstop Bool nil let icon NSImagenamed statusIcon let iconActive NSImagenamed statusIconActive let timer Timerevery seconds selfstatusItemimage icon Timerafter seconds selfstatusItemimage iconActive ifstop true printstop printshould stop now timerinvalidate else printstop printstart timerstart The following code worked with but crashes with Swift let timer NSTimerevery printdo something timerfire The internal refactoring of not using NSTimer initializers might be the problem PRs appreciated Nonscheduling initializers are currently defined as static methods because there was a bug in Foundation causing a crash I believe it was fixed but I dont remember when exactly its possible it was only iOS El Capitan and it still wont work on iOS etc If someone could verify this we could add initializers that are appropriately marked as available PRs appreciated Extending Int and Double with properties second seconds minute etc seems like a rather bad idea Theres two problems with this Anyone using your code in a project with other rdparty code that wants to do something similar will have a compiletime naming collision making it impossible to use either one Its weaklytyped Youre still taking NSTimeInterval as your actual time type and all it takes is for someone to accidentally leave off the minutes and theyll get the wrong time This isnt a huge issue as NSTimeInterval is used everywhere to mean seconds and people are used to it but we can still do better The better approach is to use an actual Duration type that requires the user to type the unit as part of the constructor With the rubylike approach you can just say NSTimerafter but with a proper strong type theres no way to do this Id suggest something like swift A type that represents a given duration public struct Duration Comparable Hashable Printable DebugPrintable The time interval of the Duration in seconds let seconds NSTimeInterval The time interval of the Duration in minutes var minutes NSTimeInterval return seconds The time interval of the Duration in hours var hours NSTimeInterval return seconds The time interval of the Duration in milliseconds Submillisecond values are truncated var milliseconds Int return Int seconds The time interval of the Duration in microseconds Submicrosecond values are truncated var microseconds Int return Int seconds The time interval of the Duration in nanoseconds var nanoseconds Int return Int seconds Construct a Duration for a given number of seconds public initseconds NSTimeInterval selfseconds seconds Construct a Duration for a given number of minutes public initminutes NSTimeInterval selfinitseconds minutes Construct a Duration for a given number of hours public inithours NSTimeInterval selfinitseconds hours Construct a Duration for a given number of milliseconds Use Int because milliseconds are generally not floatingpoint values public initmilliseconds Int selfinitseconds NSTimeIntervalmilliseconds Construct a Duration for a given number of microseconds public initmicroseconds Int selfinitseconds NSTimeIntervalmicroseconds Constructs a Duration for a given number of nanoseconds How much tolerance does a timer actually support public initnanoseconds Int selfinitseconds NSTimeIntervalnanoseconds public var description String TODO Display humanreadable string with multiple units return toStringseconds public var debugDescription String return Duration seconds public var hashValue Int return secondshashValue public func lhs Duration rhs Duration Duration return Durationseconds lhsseconds rhsseconds public func lhs Duration rhs Duration Duration return Durationseconds lhsseconds rhsseconds NB Dont implement multiplicationdivision that doesnt make any sense for durations As such we dont conform to IntegerArithmeticType either public func lhs Duration rhs Duration Bool return lhsseconds rhsseconds public func lhs Duration rhs Duration Bool return lhsseconds rhsseconds This way you can then say NSTimerafterDurationseconds You could also experiment with replacing all those initializers with static functions instead eg static func secondsseconds NSTimeInterval so that way you can say NSTimerafterseconds 