In Intern the server listens on localhost which is fine when running a browser on the local machine but doesnt necessarily work when trying to serve to browsers on other hosts or in VMs This option would be distinct from serverUrl which is the address a remote uses to get back to the host In Intern the test server run son port by default or a port specified by the user Intern should understand a serverPort option of auto or something similar that would allow it to autoselect an open port Run the websocket server and the http server over the same port This would simplify configuration no more socketPort and the server code itself the websocket init code would be initialized with the http server When killing Intern pre with ctrlc the console output is repeated Tunnel started Created remote session internet explorer on WINDOWS f d ae bea b afc d eb Suite internet explorer on WINDOWS ERROR Error Syntax error srccoreloadersdefaultts internet explorer on WINDOWS functionallibProxiedSession functional get URL s internet explorer on WINDOWS functionallibProxiedSession functional get local file s internet explorer on WINDOWS functionallibProxiedSession functional get coverage s internet explorer on WINDOWS functionallibProxiedSession functional quit coverage s internet explorer on WINDOWS functionallibProxiedSession functional setHeartbeatInterval s internet explorer on WINDOWS functionalwebdriverCommand error handling initialiser throws s internet explorer on WINDOWS functionalwebdriverCommand error handling invalid async command s internet explorer on WINDOWS functionalwebdriverCommand error handling catch recovery s internet explorer on WINDOWS functionalwebdriverCommand initialisation s CCommand was canceled node r tsconfigpathsregister testInternbininternjs run C config ci environments ie Listening on localhost ws Tunnel started Created remote session internet explorer on WINDOWS f d ae bea b afc d eb Suite internet explorer on WINDOWS ERROR Error Syntax error srccoreloadersdefaultts internet explorer on WINDOWS functionallibProxiedSession functional get URL s internet explorer on WINDOWS functionallibProxiedSession functional get local file s internet explorer on WINDOWS functionallibProxiedSession functional get coverage s internet explorer on WINDOWS functionallibProxiedSession functional quit coverage s internet explorer on WINDOWS functionallibProxiedSession functional setHeartbeatInterval s internet explorer on WINDOWS functionalwebdriverCommand error handling initialiser throws s internet explorer on WINDOWS functionalwebdriverCommand error handling invalid async command s internet explorer on WINDOWS functionalwebdriverCommand error handling catch recovery s internet explorer on WINDOWS functionalwebdriverCommand initialisation s Done testing npm ERR Test failed See above for more details Now that Edge Chromium is out verify that Intern and pre work with it In Intern pre if a test session is started for IE and possibly other browsers and killed with ctrlC webdriver servers may be left running Intern should try to ensure that any child processes are killed if it is interrupted The goal of this ticket is to propose improvements to Interns WebDriver API What changes if any would make the WebDriver API easier to use in Intern Several improvements that have been suggested would give Intern a more flexibly way to specify and use locators throughout the rest of the API would allow method chaining on Elements as well as commands would simplify the process creating webdriver helper functions Description During the feature detection tests before my functional tests run IE is stalling at the purple foo step in the test After foo displays it maximizes the window before it stalls so maybe its related to that Steps to reproduce Run the attached tests npm run server then npm test Expected result Feature detection should complete fairly quickly Actual result Feature detection stalls for about ten minutes then continues to the functional tests Intern version Any additional information Selenium IE driver interntestzip According to the JSONWireProtocol spec which is what defines the moveto command can take a null element in which case the command operates relative to the current mouse position However SessionprototypemoveMouseTo currently fills in an emptynull element with a reference to the documentElement At least in Mac Chrome with chromedriver this causes an error in the moveMouseTo command unknown error Failed to execute getComputedStyle on Window parameter is not of type Element This error does not occur for Firefox with geckodriver Regardless moveMouseTo shouldnt behave this way by default since null should be a valid element The goal of this issue is to consider how Interns general testing API can be improved for version For example Intern presents its plugin API which requires an intern global as the default way to add user functionality and to access built in functionality such as test interfaces For example the canonical way to access the object interface is with ts const describe it interngetPlugininterfacebdd This was done primarily to enable interoperability with browsers which dont have native loaders However the nonloader case is more the exception than the rule and the getPlugin API is a nonstandard way to load modules Manymost users tend to just import the object interface directly from internlibinterfacesobject and rely on something like webpack to handle inbrowser module loading So one potential minor API improvement would be to make importing the testing interfaces simpler ts import describe it from intern or import describe it from interninterfaces A more general improvement would be to clearly indicate what parts of Intern are intended to be consumed by users and which are internal eg internlibxxx is internal