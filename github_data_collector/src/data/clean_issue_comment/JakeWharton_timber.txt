Added the HyperlinkedDebugTree class that creates Logs that include hyperlinks to the calling line This way you can just click on the Tag and directly jump to the source Very useful in big projects I think this should be included in some form as otherwise people who use the library wont know that this is even a possibility I certainly didnt D The class also has a boolean variable that controls whether or not to show the method name too So planting it either looks like this TimberplantHyperlinkedDebugTreefalse Or because its default value is true TimberplantHyperlinkedDebugTree This then looks similar to this with clickable Hyperlinks D AddItemFragmentkt logMessage D AddItemFragmentkt logMessage there is no space after the only here because I had to mark it as a link If you want to merge this PR but I forgot something like Testing or perhaps stuff like adding it in the Changelog tell me At some point this might even be useful in the Readme file but thats just my opinion Embedded lint rules get inheritted transitively through dependencies When a libary author wants to use Timber it then requires all consumers of that library to either use Timber or configure their tooling to ignore all Timber lint checks Its an additional cost to consumers that shouldnt even need to know what logging implementation a library is using This cost is especially high as Android Studios code analysis has its own separate configuration inspection profiles that does not use the lintOptions in the buildgradle or lintxml Inspection profiles exist in the idea metadata folder and it is considered bad practice to include that folder in source control repositories So consumers would either need to configure each checkouts Timber lint rules independently or they would need to go against good practice by committing the idea metadata folder to their source control repository Neither of these is a good approach I propose a build variant that does not contain the embedded lint rules such that published builds of libraries can use said variant and not cause unneccessary trouble for their consumers Im not sure that its a bug but heres whats happening This happens in one specific scenario We have a JNI component that calls callback methods In debug it works fine however in release timber trows IllegalStateException Synthetic stacktrace didnt have enough elements The proguard is in fact used Currently we work around this issue by doing Timbertagsomething to specify an explicit tag Its not clear what might be the reason why it crashes only in this scenario the JNI attached thread has less stack frames perhaps and how to workaround or fix this properly since getTag is final Please advise When you have to use Timber with a delegator currently you log just the delegator class sad Or when you change logging tool just in one place and do not change every log call in code this can be very easy places you probably need a delegator With this PR you can solve this in my point of view elegant First thanks for this awesome library The idea is to allow timber to serialize the args that you send into the log and be able to get the objects in custom TimberTree Currently the trees just get the message and tag but not the args with its own types One idea Timberomy message myCustomObjectInstance And then on the tree allow to receive that custom object This is helpfull if you have a lot of kotlin sealed event classes for instance and want to log into some analytics with properties on it This commit adds a Gradle plugin that enables one to rewrite Logx calls into Timberx calls in any upstream libraries Theres some basic configuration options available via a timber extension configureTimberExtension variantNameFilter it debug classNameFilter itstartsWithcomfoobarlog The rewritten implementation at callsites isnt very performant so I wouldnt recommend to use it in production Hi I am using Timber on my app and I use my own HttpLoggingInterceptor to get the logs from OkHttp library that I use it I have a request that returns from server with https status code and after that I get this error on logs javautilUnknownFormatConversionException Conversion at javautilFormatterFormatSpecifierconversionFormatterjava at javautilFormatterFormatSpecifierinitFormatterjava at javautilFormatterFormatSpecifierParserinitFormatterjava at javautilFormatterparseFormatterjava at javautilFormatterformatFormatterjava at javautilFormatterformatFormatterjava at javalangStringformatStringjava at timberlogTimberTreeformatMessageTimberjava at timberlogTimberTreeprepareLogTimberjava at timberlogTimberTreedTimberjava at timberlogTimber dTimberjava at timberlogTimberdTimberjava at commyappAndroidLoggerdAndroidLoggerkt at commyappLoggingInterceptorlogLoggingInterceptorkt at okhttp loggingHttpLoggingInterceptorinterceptHttpLoggingInterceptorjava at okhttp internalhttpRealInterceptorChainproceedRealInterceptorChainjava at okhttp internalhttpRealInterceptorChainproceedRealInterceptorChainjava at okhttp RealCallgetResponseWithInterceptorChainRealCalljava at okhttp RealCallexecuteRealCalljava I think it tries to print the response and it is a html content and from there comes this error Can it be fixed somehow Hi I am using Timber on my app and I use my own HttpLoggingInterceptor to get the logs from OkHttp library that I use it I make a request to server and the url contains a serial Number that looks like this D B B When the library try to log the url I get this error javautilIllegalFormatConversionException a LjavalangObject at javautilFormatterFormatSpecifierfailConversionFormatterjava at javautilFormatterFormatSpecifierprintFloatFormatterjava at javautilFormatterFormatSpecifierprintFormatterjava at javautilFormatterformatFormatterjava at javautilFormatterformatFormatterjava at javalangStringformatStringjava at timberlogTimberTreeformatMessageTimberjava at timberlogTimberTreeprepareLogTimberjava at timberlogTimberTreedTimberjava at timberlogTimber dTimberjava at timberlogTimberdTimberjava at commyappAndroidLoggerdAndroidLoggerkt at commyappLoggingInterceptorlogLoggingInterceptorkt at okhttp loggingHttpLoggingInterceptorinterceptHttpLoggingInterceptorjava at okhttp internalhttpRealInterceptorChainproceedRealInterceptorChainjava at okhttp internalhttpRealInterceptorChainproceedRealInterceptorChainjava at okhttp RealCallgetResponseWithInterceptorChainRealCalljava at okhttp RealCallexecuteRealCalljava How can it be fixed I think the problem is with it see the serialNumber as a HEXADECIMALFLOAT and when it try to print the conversion fails Fixes on a perTree basis Replaces given the new internal tagdetermination logic Add DebugTreeignoreForTaggingClass to allow more classes to be ignored when the tag is inferred from the stacktrace This is useful for anyone needing to wrap Timber eg for use in a Javaonly module Also changes fqcnIgnore from a list into a set because only its contains method is used 