 If you do not respect this template your pull request will be closed Your pull request title should be short detailed and understandable for all Also please add it in the CHANGELOG file under Unreleased section If your pull request fixes an open issue please link to the issue I have added the tests to cover my changes I have updated the documentation accordingly I have read the CONTRIBUTING document Summary Details and comments I could not access the image in the algorithms description It looks to me as follows If you do not respect this template your pull request will be closed Your pull request title should be short detailed and understandable for all Also please add it in the CHANGELOG file under Unreleased section If your pull request fixes an open issue please link to the issue I have added the tests to cover my changes I have updated the documentation accordingly I have read the CONTRIBUTING document Summary URL of QISKit Community Tutorial broken in QuantumCoinGameipynb update it to Details and comments related to issue URL of QISKit Community Tutorial broken in QuantumCoinGameipynb update it to Summary Add simple examples to simulate locally Add two data set files Details and comments The scripts come from my bachelor thesis in physics in which I ran some tests using FFQRAM routine by Park et al to enhance the distance based classifier proposed by Schuld et al Summary I added two new script to the qisintro section one on basis gate decomposition of arbitrary singlequbit unitary operators and their respective controlled versions and another for twoqubit unitary operators Details and comments In the first script I write new functions that find the parameters of a u gate and the ZYZ decomposition to implement a given arbitrary x unitary matrix I also write functions that convert these circuits into the controlled version of the original gate I test all functions using randomly generated x unitary matrices In the second script I explain the KAK method on which most twoqubit basis gate decompositions are based apply the Qiskit builtin function twoqubitcnotdecompose to find the basis gate decomposition of an arbitrary x unitary gate and also write a function that generates its controlled version via diagonalization Again I test all methods used via randomly generated x unitaries I added the relevant figures for both scripts to the qisintro folder If you do not respect this template your pull request will be closed Your pull request title should be short detailed and understandable for all Also please add it in the CHANGELOG file under Unreleased section If your pull request fixes an open issue please link to the issue I have added the tests to cover my changes I have updated the documentation accordingly I have read the CONTRIBUTING document Summary This PR adds a tutorial notebook to introduce the usage of the new implementation of the adaptive VQE algorithm Details and comments This should not be merged before Qiskitqiskitaquapull is merged because it depends on the new features of that PR I would like to give credits to arsenyko who cleaned up the notebook and extended it a lot since we worked on this project at Qiskit Camp qiskitcommunityqiskitcampeurope issues If you do not respect this template your pull request will be closed Your pull request title should be short detailed and understandable for all Also please add it in the CHANGELOG file under Unreleased section If your pull request fixes an open issue please link to the issue I have added the tests to cover my changes I have updated the documentation accordingly I have read the CONTRIBUTING document Summary Details and comments Hi We have recently proposed a game that can be played on a quantum computer here QuantumPoker incuding jupyter notebooks We would like to contribute this game to your games section as well If you think this is a good idea please tell us what we should do Kind regards Franz This code was taken from here I changed some import statements because they were outdated and now the qft is returning instead of for inputs of all s The output for qft quasm reads OPENQASM include qelib inc qreg q creg c h q u q h q u q h q u q h q cu q q h q cu q q cu q q h q measure q c measure q c measure q c As oppose to the original OPENQASM include qelib inc qreg q creg c h q u q h q u q h q u q h q cu q q h q cu q q cu q q h q measure q c measure q c measure q c I believe the problem is here but I cant seem to solve it if anyone could help that would be great thanks import math importing Qiskit from qiskit import Aer IBMQ from qiskit import QuantumRegister ClassicalRegister QuantumCircuit execute from qiskitprovidersibmq import leastbusy useful additional packages from qiskittoolsjupyter import from qiskittoolsvisualization import plothistogram provider IBMQloadaccount nqubit input state for QFT that produces output def inputstatecirc q n for j in rangen circhq j circu mathpifloat j q j inverse def qftcirc q n nqubit QFT on q in circ for j in rangen for k in rangej circcu mathpifloat jk q j q k circhq j q QuantumRegister c ClassicalRegister qft QuantumCircuitq c inputstateqft q qftqft q for i in range qft measureq i c i printqft qasm run on local simulator backend Aergetbackendqasmsimulator simulate executeqft backendbackend shots result simulategetcounts qiskitjobstatus Use the IBM Quantum Experience backend leastbusyIBMQbackendssimulatorFalse shots jobexp executeqft backendbackend shotsshots results jobexpresult plothistogramresultsgetcounts 