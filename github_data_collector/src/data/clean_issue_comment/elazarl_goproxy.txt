 has huge impact on speed of processing with this change the RSA and ECDSA keys are created within init and used when needed This is quick fix please set it to some configuration variable if you consider that it is useful to generate them on each request I dont think this would impact the security on client side The goproxy doesnt handle a continue or doesnt provide an example to show how to handle the continue This seems to be a problem for proxies in general from what I can tell I havent had the time to debug this thoroughly but there seems to be a change in go for managing expectcontinue requests that seems to break goproxy See Clients that send large payloads for PUT requests such as aws s as an example expect a continue response for an expect header request An expect header looks like this Expect continue The proxy should respond with a Continue but instead we see bad requests due to timeouts as the s server is still waiting for the body What is odd is that this all works with go but breaks with go and I havent had the time to dig deeper into the issue but maybe the old golang version doesnt handle expect continue is my guess and now with go it does and so we need to handle it in the proxy Now when I get RemoteAddr use respRequestRemoteAddr I get How can I get the real remote ip address I am trying to workaround by launching a goproxy server that would forward requests to another proxy pxy goproxyNewProxyHttpServer pxyTrProxy httpProxyURLproxyurl go func err httpListenAndServelocalhost pxy hLogOnErrorerr Requests to http are OK but https are not using the proxy Is it possible to add a proxy to the hijacked connection The Connect constants arent documented Expected them to be Workaround Had to resort to source code to try to understand what they do how to install in linux Shoud i install go envirnment first Related to Proposal is to not panic on HTTP CONNECT but simply close the TCP connection More a sane behaviour as it will not result in denial of service The library relies on httpHijacker to do CONNECT According to the interface isnt implemented by HTTP connections by design and as such this isnt supported by this library See this as a feature request to support it i have try this below but not worked proxyOnRequestDoFuncfuncreq httpRequest ctx goproxyProxyCtx request httpRequest response httpResponse proxyTr httpTransportProxy funcrequest httpRequest url urlURL e error ip GetNewProxy fmtPrintlnNew ip ip return urlParseip return req nil I want to do like this but cant make it work Hope anyone can give me a hint client goproxy socks real web server