Describe the bug this is not possible with the new version xaml metroWindowCommands Button ContenticonPacksPackIconMaterialDesign KindHelp metroWindowCommands it throws Error XLS Type iconPacksPackIconMaterialDesign is used like a markup extension but does not derive from MarkupExtension To Reproduce Steps to reproduce the behavior Set up a new MetroWindow Add a Button like shown above try to compile It doesnt work Expected behavior iconPacksPackIconMaterialDesign KindHelp should show me the Icon Screenshots If applicable add screenshots to help explain your problem Desktop Environment please complete the following information IconPacks Version Visual Studio NET Framework Happy coding Tim Hi I have just updated from version to and found out that icons created with PackIconExtension have default width and height set to and these properties are not nullable Thus setting icon size in styles is not working in WPF anymore local value has higher priority Seems that this is related to commit c e c c c e eb d c a Is there any chance to fix this Thanks MS has a Set of Cloud AI specific icons They are all provided as svg files Should this be added to MahApps You find them here We can use the IconPacks browser to find the awesome icons without compile and find the exe file Microsoft published the icons of VSCode Would love to see it in MahAppsIconPacks Existing libraries are not that good Hello It could be that this is the wrong forum for a question regarding IconPacks but since I could not find any information about I give it a try How can I bind an icon Label ContenticonPacksMaterial CalendarToday Width Height I would like to bind the icon depending on a status variable I know I should create an converter IValueConverter but I am not sure how to do that Could you at least give me a hint how such an StatusToIcon converter looks like Would appreciate any comment Thanks Regards It would be cool to have an awesome icon logo for this library itself This icon logo will then be used then here on the GitHub repository and for the NuGet packages If you have an idea about an icon or if you have time and you are a designer then go for it Your name will be honored and linked to your site or whatever here on this repo and can be find at the README Its also possible to pay out your work Thx First of all I must say I cant thank you enough for all the time and effort that your MahApps projects had saved me in my projects Ive got a suggestion on API design of this project The main idea came to my mind by looking at how we use Brush Brushes classes with Foreground property on a control Through years Ive learned that using generic classes along with xaml is not good idea It will make headaches for the developer down the road Like having you defined different styles with exactly same xaml code for different TKind in PackIconBaseTKind The following classes are just for demonstration of the idea so it will be easier to understand Design The first class stores the icon data Its like Brush class or even Color class read on and youll find out why It can even contain other properties like the preferred Brush to draw it with which can be ignored when it is null In IconPresenter control template and the Foreground of IconPresenter would be used instead ContentPropertyPathData public class IconData Freezable public static IconData Empty static IconData Empty new IconData public IconData public IconDatastring pathData PathData pathData private static readonly DependencyProperty PathDataProperty DependencyPropertyRegister nameofPathData typeofstring typeofIconData new PropertyMetadatanull Bindabletrue CategoryAppearance public string PathData get string GetValuePathDataProperty set SetValuePathDataProperty value protected override Freezable CreateInstanceCore return new IconData The next class is an example of our libraries of icons like Brushes class but for Modern icons public static class ModernIcons private static readonly object CupcakeKey new object private static readonly object BeerKey new object private static readonly IDictionaryobject IconData Icons new Dictionaryobject IconData CupcakeKey new IconDataM A C H C A H C A H C A H C A H C C C C M H L H L Z BeerKey new IconDataM H L C V A L H V M C V C V M V H V H M V H V H M C V C C V C M C V C C V C M C V C C V C M C C C C C C C C C C C C C C C Z public static IconData Cupcake Icons CupcakeKey public static IconData Beer Icons BeerKey And the last one is the control which hosts the icon public class IconPresenter Control private static readonly DependencyProperty DataProperty DependencyPropertyRegister nameofData typeofIconData typeofIcon new PropertyMetadatanull Bindabletrue CategoryAppearance public IconData Data get IconData GetValueDataProperty set SetValueDataProperty value Usage iconsIconPresenter DataxStatic iconsModernIconsCupcake In my initial search I couldnt find a way to implement some kind of converter in designer to use strings instead of xStatic iconsModernIconsCupcake just like we use Red in a foreground property But even though I could find one I would definitely not find a way to have intellisense for that The developer can even have their own icons defined and use it in the same manner by StaticResource controlsIconData xKeyCustomIconM V L V A A V L V L V L V L L V L V L ZcontrolsIconData And then iconsIconPresenter DataStaticResource CustomIcon Implementation We can define an XSD file and a couple of corresponding XML files for each icon pack Then have a T text template to generate classes The resulting solution structure will be much cleaner and easier to maintain NuGet We would have MahAppsMetroIconPacksCore which contains the IconData and IconPresenter classes And a separate package for each icon pack like MahAppsMetroIconPacksModern which contain classes like ModernIcons And another package MahAppsMetroIconPacks which have dependency on all of the mentioned packages Browser For browser application compatibility we can use attributes on static properties of the icon pack classes For name description tags etc Advantages Cleaner and simpler resulting solution structure which is easier to maintain It is more resource dictionary friendly in expandability aspect We have just one IconPresenter class across application to have its default style set Developers can easily define preferred brushes for icons They are not a simple shape Developers can use their custom icons along with our predefined icons in the same manner If developers wants to organize their used icons in an application They can have their own icons repository class defined And this way they can easily switch between icons for an specific purpose public static class ApplicationIcons private static readonly object AppIconKey new object private static readonly object NewKey new object private static readonly IDictionaryobject IconData Icons new Dictionaryobject IconData AppIconKey ModernIconsCupcake NewKey MaterialIconsPlusCircleOutline public static IconData AppIcon Icons AppIconKey public static IconData New Icons NewKey Further discussion We can even forget about the ModernIcons and similar classes and add resource dictionaries for different icon packs and add another property named BasedOn on IconData to help the developer have an alternative solution for the ApplicationIcons class discussed above If you prefer xaml based solutions for UI problems But I like it more in C manner you know its a library and other people shouldnt be able to modify it easily But this doesnt mean having BasedOn property is wrong And of course we should handle possible loops in BasedOn parents Or maybe we can have another class named Icon which is responsible for storing things like Fill brush along with IconData I like this idea more Summary So suggested classes and their responsibilities are as following IconData Storing path data of the icon MaterialIcons Storing IconData of the known icons in each icon pack IconPresenter A control which shows the icon Icon Storing other info about icon like Fill brush along with IconData An IconData must be easily convertable to an Icon If defined IconPresenter would use this instead of IconData So its kinda like Brush class and IconData is kinda like Color class Additionally suggested but it would be nice to have something like this And at the end I must say fixing FlowDirection in the default style as it is now for hosting controls is a bad idea Sometimes we want the icon to adapt the hosting windows FlowDirection For example an arrow for the GO button By overriding its FlowDirection in the default style it doesnt inherit its value from its parent container anymore so it has to be maintained manually and that is definitely a problem By using suggested IconData Or Icon class we can overcome this problem too but again I strongly advise against it to have it hardcoded inside the library One can use the alternative suggested approach in ApplicationIcons class for their specific requirement Im open to any kind of discussionsuggestion about this idea and in ways which it is not practical And of course Im willing to help in implementing it because I dont think it takes more than couple of weekends