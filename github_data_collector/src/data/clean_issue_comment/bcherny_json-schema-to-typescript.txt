We are using a schema to include other schemas to generate eg Schema schema type object id schemalookupschemajson title Lookup Data anyOf ref ratingauthorityschemajson ref regionschemajson ref countryschemajson ref distributorschemajson ref managinglabschemajson ref contenttagschemajson ref ratingauthorityratingschemajson However the output only includes the first in the anyOf list ie export type LookupData Region Country Distributor ManagingLab ContentTag etc etc Is this a know issue and is there a workaround is adding the ability to specify multiple file input for this library An additional feature would be to allow the user to specify a single file output for a multi file input and have everything be concatenated into the single file output Currently a check is in place in the CLI to throw an error when the user attempts this operation Awesome project thanks Im using Python and pydantic to export JSONSchemas python from pydantic import BaseModel class MyModelBaseModel id int name str readonly bool printMyModelschemajsonindent This outputs the schema json title MyModel type object properties id title Id type integer name title Name type string readonly title Readonly type boolean required id name readonly When runthrough jsonschematotypescript the output has types for each schema property typescript This file was automatically generated by jsonschematotypescript DO NOT MODIFY IT BY HAND Instead modify the source JSONSchema file and run jsonschematotypescript to regenerate this file export type Id number export type Name string export type Readonly boolean export interface MyModel id Id name Name readonly Readonly k string any Can you suggest a way to suppress the exported types for these fields even if they have titles More like this typescript This file was automatically generated by jsonschematotypescript DO NOT MODIFY IT BY HAND Instead modify the source JSONSchema file and run jsonschematotypescript to regenerate this file export interface MyModel id number name string readonly boolean k string any I use this library to compile but get the warining nodemodulesprettier prettierindexjs Critical dependency the request of a dependency is an expression nodemodulesprettier prettierindexjs Critical dependency the request of a dependency is an expression nodemodulesprettier prettierindexjs Critical dependency the request of a dependency is an expression nodemodulesprettier prettierthirdpartyjs Critical dependency the request of a dependency is an expression Hi there First of all thanks for your efforts Ive been using this tool with much success and find it very effective Second Im experiencing a repeated issue when Im converting openapi schemas of type array namely this TypeError commentsplit is not a function at generateComment Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcgeneratorjs at generateStandaloneInterface Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcgeneratorjs at declareNamedInterfaces Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcgeneratorjs at generate Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcgeneratorjs at Objectanonymous Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcindexjs at step Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcindexjs at Objectnext Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcindexjs at fulfilled Usersnaamanhirschfeldworkspacepolyrepoyodaapispecsnodemodulesjsonschematotypescriptdistsrcindexjs Expected Behaviour Generate typescript definitions from json schema Generate interface that defines some fields that are optional and also defines a type for all other properties of that object ts interface Foo bar string baz string k string string However this throws an Type Error due to propstring translating to prop string undefined To fix this undefined has to be added to the keyvalue definition ts interface Foo bar string baz string k string string undefined json ts should do this automatically Actual Behaviour json ts does not add that undefined and generates an invalid typescript definition Reproduce this behaviour json ts node typescript os ubuntu detailssummaryjson schemasummary p json schema title Benchmark result report format type array additionalItems false items description executions of benchmark tests type object properties test type string description name of the benchmark session tags description set of tags associated with this benchmark session tags can be used to filter benchmark execution runs and for execution results comparison criteria for generic supplemental information use annotations type object properties jvm type string description predefined tag to identify jvm flavors clr type string description predefined tag to identify clr versions runtime type string description predefined tag to identify runtime used to execute tests eg Nodejs go agentOperationMode type string enum disabled CIM description defines specific agent operational modes additionalProperties type string annotations description Annotations contain benchmark execution specific information This information is purely informational and cannot be used to in test result filtering or comparison type object additionalProperties type string iterations description results of each iteration executed in the benchmark session type array items type object properties numOperations type number description number of operations executed in this iteration measurements ref definitionsMeasurementValueContainer required numOperations measurements additionalItems false measurements description discrete measurements done outside of iterations scope eg measure memory before and after benchmark session ref definitionsMeasurementValueContainer profilingResults description result string of optional profiling session to be elaborated in more detail type string units description optional unit definitions for measurements type object properties additionalProperties type string default nsop examples ns s ms nsop sop msop bytessec kbsec mbsec reqsec bytes kB MB GB KiB MiB GiB additionalProperties false required test iterations definitions MeasurementValueContainer type object description container for measurement values properties duration type number description wall clock duration additionalProperties type number p details detailssummaryts definitionssummary p ts tslintdisable This file was automatically generated by jsonschematotypescript DO NOT MODIFY IT BY HAND Instead modify the source JSONSchema file and run jsonschematotypescript to regenerate this file export type BenchmarkResultReportFormat name of the benchmark session test string set of tags associated with this benchmark session tags can be used to filter benchmark execution runs and for execution results comparison criteria for generic supplemental information use annotations tags predefined tag to identify jvm flavors jvm string predefined tag to identify clr versions clr string predefined tag to identify runtime used to execute tests eg Nodejs go runtime string defines specific agent operational modes agentOperationMode disabled CIM k string string Annotations contain benchmark execution specific information This information is purely informational and cannot be used to in test result filtering or comparison annotations k string string results of each iteration executed in the benchmark session iterations number of operations executed in this iteration numOperations number measurements MeasurementValueContainer k string any discrete measurements done outside of iterations scope eg measure memory before and after benchmark session measurements wall clock duration duration number k string number result string of optional profiling session to be elaborated in more detail profilingResults string optional unit definitions for measurements units k string string container for measurement values export interface MeasurementValueContainer wall clock duration duration number k string number p details a good idea of adding support for this so we can add this documentation out of the box when we generate the interfaces Resolves Im a little unclear on the structure of the project so any feedback on the PR is gratefully received This is a little exploratory and I have no idea if this can be said to implement the feature from json schema draft but I think it covers enough for my needs Support const values new in v Input json id schema title Foo required bar additionalProperties false properties bar const true Expected output ts export interface Foo bar true Current output ts export interface Foo bar k string any This feature was mentioned in but as the scope of that is a bit too big for beginning contributors I thought I would split this feature out Any hints for jsonschematotypescript newbies would be much appreciated Addresses Tests seem to do what I expect and the snapshot file generates what I want as well Im hopeful this can be merged and released soon or at least reviewed and I can reply to feedback ASAP Thanks