This is a relatively naive implementation that does the same iteration over files but with etcruma prepended to the path if none were found in the local directory Note that the type of configpath has been changed from Path to PathBuf to allow for joining the directory with the file name This could be avoided by simply adding the absolute path of each potential file in etc to DEFAULTCONFIGFILES but I considered that a bit too hardcoded Additionally I changed DEFAULTCONFIGFILES from a static to a const as its my understanding that its best practice to use const when possible Should close Ive just come into the matrix world and would like to contribute to home server development From the look of it Dendrite seems to be the defacto nextgen homeserver to supercede Synapse there seems to be more activity on the project and its affiliated with the official matrix team as well However personally I like Rust a bit more as a language and after reading some of the design documents on Dendrite Im also not super convinced by their ambitions on event based architecture Whats rumas current status and have you considered its position wrt Dendrite in future In particular I would be interested to know how it would differentiate from Dendrite Otherwise I feel like it might be better to concentrate effort on developing a reliable homeserver It would be a nice addition if ruma would also look for a config file in etc or etcruma or similar as it would make the server setup less dependent on the servers working directory and is also standard behaviour for a wellbehaved unix service Ive been trying to think of ways to work on the project while we wait for asyncawait and the async library ecosystem to settle and it occurred to me that theres never been any explicit statement of the goals of the project It often comes up in discussions over Matrix and Twitter but itd be useful to have written down both as a way to guide us during development and as a place to refer to people asking about the project Here are my initial thoughts about the projects goals What Ruma is A fully functional interoperable Matrix homeserver with federation A Rust library for consuming the Matrix APIs A suite of libraries for building Rust software that integrates with Matrix Product focus Scale the homeserver should support both small and large scale deployments Performance the homeserver should run with a minimum of memory and CPU load Stability Ruma software should minimize the possibility of unrecoverable runtime errors Improving the ecosystem Spec compliant Ruma should be a forcing function for completeness and correctness of the Matrix spec All information needed to implement Ruma should be unambiguously explained in the spec Whenever implementation would require looking at the details of an existing implementation the spec should be improved to clarify instead Rust maturity Ruma should be a proving ground for the suitability of Rust The needs of the project should provide feedback upstream to the developers of Rust and Rust libraries to improve and stabilize Id love to hear other peoples thoughts about what theyd like Ruma to focus on Feedback about the organization and wording of the above goals would be appreciated too Hi there I am sure you all are aware about the situation as following A specific group is on Slack or another proprietary service A specific amount of users and potential users prefer an open source solution A bot system tends to clutter the interface and needs the confirmation of the community leadership A community leader often decides to do nothing since heshe is scared to split the community Another issue is that Matrix is decentralized instead of distributed This solution is pretty naive since my insight into the internals are quite shortsighted Ship a Docker container with puppets included Consider to add a GUI in order to setup the credentials Use Ruma in order to let each user host its own instance This provides open interaction with the existing proprietary solutions The integration with Slack and Co happens completely independent and is native in the experience I am pretty sure that there are some hardcore issues since it would be probably already the preferred deployment method I guess So I post this primarily to get the answer Why smile Im creating this issue as a place to keep track of the things in the Rust and Matrix ecosystems that are completely blocking or slowing the progress of Ruma the homeserver as well as supporting libraries We can use it to track the status of these blockers and as a place to link people wondering about the status of the project Rust blocking implementation Release of http blocks the use of these shared HTTP types being used in rumaapi the integration of these types in hyper and the integration of these types in downstream web frameworks wed consider using such as Gotham Rocket a renewed version of Iron or something we build ourselves on Hyper Adoption of the http crate in hyper tracking issue blocks adoption of an httpcratebased hyper in web frameworks we might want to use Adoption of the http crate in an async web framework blocks our ability to use an httpcratebased rumaapi with said web framework Stabilization of asyncawait RFC tracking issue blocks ergonomic use of async code Choosing a web framework once they all support asyncawait Rust blocking stabilizationrelease Stablization of impl Trait RFC RFC and RFC tracking issue blocks ergonomic performant use of async code Note Part of impl Trait has been stabilized but its not yet usable in traits Stabilization of the TryFrom and TryInto traits RFC tracking issue blocking stable use of fallible type conversions used in several places in Ruma Stabilization of procedural macros RFC tracking issue blocking stabilization of rumaapimacros and in turn rumaclientapi plus planned rumaapi crates like rumafederationapi Matrix blocking implementation Clientserver API specification r or whatever the release after r ends up being blocks some aspects of progress on the clientserver API notably endtoend encryption support A stable release of the serverserver API specification blocks rumafederationserver A stable release of the application service API specification blocks future application services in Rust using Ruma libraries A stable release of the identity service API specification blocks a future identity service in Rust using Ruma libraries A stable release of the push gateway API specification blocks a future push gateway in Rust using Ruma libraries Matrix blocking stabilizationrelease This is just a list of issues weve opened against the Matrix spec in the process of building Ruma It includes places where things are wrongmisleadingundocumented At least some of these are likely to be resolved in new versions of the specs listed above the GET form of login has gone missing from swagger and spec search spec says the only possible JSON body parameter is searchcategories but the example also has orderby and groupings Document all event keys shown in examples Spec is unclear about what is stored in the content repository Spec does not explain the values of string keys in the searchs response Handling the reason field in kick and ban endpoints Explain the bindemail parameter to the registration endpoint better Enumerate all events created when a room is created Document event size errors Provide a full reference of all the different error codes Grammar for completely opaque APIs Grammar for room IDs and event IDs Document grammar for device IDs Document semanticsguarantees around transaction IDs Explain the rationale for accountpassword authentication search API lies and claims that it takes a v filter Specify format of originserverts Superceded by Timestamp time zone Presence list API response does not match mpresence schema StrippedState schema is inconsistent Currently we fetch the whole room timeline and then we discard events based on the timeline limit GET roomsroomidstateeventtype GET roomsroomidstateeventtypestatekey 