Some future ideas for more optimal circumstances on PS The PS GPU memory is fast enough to flush and refill textures multiple times per frame according to the developers of Metal Gear Solid who had up to MB of textures onscreen at times inside the MB VRAM total not including memory used for buffers It may be possible to use similar techniques to achieve better results in this demo I feel better looking textures could be used with the above method and storing these in the main MB RAM and sending them to the GPU as needed the PS has a GBs memory bus so the potential is undoubtedly there Using recent gsKit tools available on github may also give the code some cleaner syntax and possibly expand the available libraries Different video modes I would say that a x i mode and a x p mode would be optimal however x at i would also be very interesting a few games used this for a i mode and this could look great on HDTVs possibly with antialiasing Keep this project up though Its nice to see demos like this arise on the PS I recommend you check out the gsKit hires sample code for an idea of what you might be able to do this seems like a relatively simple scene and one programmer was able to get a rotating D teapot running at native x a x background texture and all with antialiasing at FPS Would be cool to see some improvements here from code like that Ill be happy to send in a PR for this Ive tried launching the PS version of this demo using uLaunchELF on my PAL PS slim and it seems to work without any issues It might be worth adding that the PS demo was tested on real hardware as well I can provide photos of it running as well if theres interest Hi a version for the Godot Engine would be nice as soon as at least a beta is released I might do a pull request then If you can get your hands on a DFX Voodoo card it would be awesome to test it on Glide Im adding this as an issue mostly because I want to do it but I cant commit any time to it yet or rather cant predict when Ill find some time to do it However it should be a good exercise for anyone DirectXTK Theres a few um less than best practices in the WebGL code I didnt look at the others examples looking up uniform and attribute locations every frame at render time instead of once at init time assigning properties to WebGLObjects that could be null Theres also questionable issues like forcing x That might make sense on desktop PCs where youd be hard pressed to find a display thats only x but it makes far less sense on a browser that might be viewed in a phone where the phone is trying to emulate x resolution Another is using devicePixelRatio Does that happen on your c version In other words if you open an x window are you getting x pixels or x devicePixelRatio Other random stuff Setting the size of the canvas directly is kind of an antipattern You should let CSS choose the size on the web Vertex Buffer Objects are available pretty much universally on WebGL In fact its only IE and Edge that not the actual hardware so if you want to use them you can either just use them and tell IE and Edge users theyre SOL or you can use polyfill that will just fill it in on IE and EDGE Would you be interested in a PR that deals with those issues 