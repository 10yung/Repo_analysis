 I did not look deep into karafka source code but looks like karafka leverages process isolation for consumer isolation Is the consumergroup tightly coupled to the process or the consumer class itself The costs associated with spawning a separate JVM per consumer group may not be scalable for JRuby and might be better to run multiple threads in the JVM It might add the possibility of running multiple consumers in different consumer groups within the same process where using a single consumer to subscribe to multiple topics is not feasible Im confident that this approach may not fit in libraries like karafka itself where majority of users run MRI Ruby I just want to hear your thoughts on the approach ref from Adithyacopart I have been trying to connect karafka app to heroku kafka addon but I get the following error I T INFO Fetching cluster metadata from kafkasslec xxxxcompute amazonawscom Traceback most recent call last from homefarhanrvmgemsruby gemsrubykafka libkafkaclusterrb in addtargettopics from homefarhanrvmgemsruby gemsrubykafka libkafkaclusterrb in refreshmetadata from homefarhanrvmgemsruby gemsrubykafka libkafkaclusterrb in clusterinfo from homefarhanrvmgemsruby gemsrubykafka libkafkaclusterrb in fetchclusterinfo from homefarhanrvmgemsruby gemsrubykafka libkafkaclusterrb in each from homefarhanrvmgemsruby gemsrubykafka libkafkaclusterrb in block in fetchclusterinfo from homefarhanrvmgemsruby gemsrubykafka libkafkabrokerrb in fetchmetadata from homefarhanrvmgemsruby gemsrubykafka libkafkabrokerrb in sendrequest from homefarhanrvmgemsruby gemsrubykafka libkafkaconnectionrb in sendrequest from homefarhanrvmgemsruby gemsrubykafka libkafkainstrumenterrb in instrument from homefarhanrvmgemsruby gemsactivesupport libactivesupportnotificationsrb in instrument from homefarhanrvmgemsruby gemsrubykafka libkafkaconnectionrb in block in sendrequest from homefarhanrvmgemsruby gemsrubykafka libkafkaconnectionrb in open from homefarhanrvmgemsruby gemsrubykafka libkafkaconnectionrb in new from homefarhanrvmgemsruby gemsrubykafka libkafkasslsocketwithtimeoutrb in initialize from homefarhanrvmgemsruby gemsrubykafka libkafkasslsocketwithtimeoutrb in connectnonblock OpenSSLSSLSSLError SSLconnect returned errno stateerror certificate verify failed unspecified certificate verification error Following is the configuration in karafkarb setup do config configkafkaseedbrokers ENV KAFKAURL tossplitmap strip if ENV KAFKATRUSTEDCERT tmpcafile Tempfilenewkafkacacerts tmpcafilewriteENVfetchKAFKATRUSTEDCERT tmpcafileclose configkafkasslcacertfilepath tmpcafilepath end if ENV KAFKACLIENTCERT ENV KAFKACLIENTCERTKEY configkafkasslclientcert ENV KAFKACLIENTCERT configkafkasslclientcertkey ENV KAFKACLIENTCERTKEY end configclientid asyncprocessor end What I tried OpenSSLSSLVERIFYPEER OpenSSLSSLVERIFYNONE But then I get different error ERROR Failed to assign partitions to messages in TutorialTopic Maybe helpful point Since it is a shared cluster I have a config in heroku name KAFKAPREFIX not sure what to do with it tried appending it to the topic but in vain What am I missing Info ruby karafka Hello I have problem with responder in rubyrails setup From rails console I see that responder starts to connect with I T INFO Fetching cluster metadata from kafkalocalhost D T DEBUG topicmetadata Opening connection to localhost with client id deliveryboy But as you can see from my configuration file and server output I have a broker with different port and clientid Is there something missing from configuration for responder to work or can someone give me any hints why is it acting like this Karafka server output Karafka framework version Application client id exampleapp Backend inline Batch fetching false Batch consuming false Boot file homekylliREPOSlendifykarafkarb Environment development Kafka seed brokers kafka Configuration NV RAILSENV development ENV KARAFKAENV ENV RAILSENV require Fileexpandpathconfigenvironment FILE Railsapplicationeagerload class KarafkaApp KarafkaApp setup do config configkafkaseedbrokers w kafka configclientid exampleapp configbackend inline configbatchfetching false end consumergroupsdraw do consumergroup example do topic orders do consumer OrderConsumer end end end end KarafkaAppboot Responder file class OrderResponder ApplicationResponder topic order def respondcreditapplication respondto order creditapplication end end And in my code I use responder as OrderRespondercallself We need to benchmark if params payload is faster then paramspayload plus if we will gain anything more if we will remove those methods Refs In order to query the apps status instead of subscribing to the apps events and storing or sending them an endpoint like healthjson could provide a simple JSON with the apps status reason in case of error and some other useful information Now we have a responder that by default runs an instance buffers and dispatches in a single run via the class call method We can also initialize the instance and run it manually but that does not allow us to have a long running buffering responder I would like to have a possibility to long buffer data and dispatch it when needed Im currently working on a multithreaded framework for batching and enqueueing data into a background ruby thread This could be used to leverage the Karafka framework and provide multi threaded flow with having a single consumer group The development of rdkafkaruby is in progress Once some neded features are available we could migrate to it Things required x Check the config validators quality and the way they operate x Migrate producer WaterDrop x Normalize the settings x drop jruby support for Karafka ecosystem instrumentation batch processing batch metadata or a way to calculate those settings normalization Docs Long running loop hooks for beforeafter poll and other lifecycle moments Regexp support for topic subscription Several settings related to Kafka are not between Karafka and kafka It would be good to normalize that to match Kafka conventions mbj 