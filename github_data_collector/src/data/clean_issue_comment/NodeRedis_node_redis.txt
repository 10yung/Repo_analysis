Hi in the past few years I find a critical bug in my production env My production env use noderedis When the network disconnect the noderedis will run the retrystrategy that I specified and then the noderedis connection closedBut noderedis will not reconnect to the redis server again when the network is ok So my production env always throw an error The connection is already closed in the error log always Then I have to restart my node server to fix this In my production env the retrystrategy is js retrystrategy function options consolelogretrystrategy options if optionserror optionserrorcode ECONNREFUSED End reconnecting on a specific error and flush all commands with a individual error return new ErrorThe server refused the connection if optionstotalretrytime End reconnecting after a specific timeout and flush all commands with a individual error return new ErrorRetry time exhausted if optionsattempt End reconnecting with built in error return new ErrorAttempt time exhausted reconnect after return Mathminoptionsattempt I doubt a very long time why this would happended So I dig into the source codes the noderedis version is It has this bug too Then I find the reason js function handleofflinecommand self commandobj var command commandobjcommand var err msg if selfclosing selfenableofflinequeue command commandtoUpperCase if selfclosing if selfstreamwritable msg The connection is not yet established and the offline queue is deactivated else msg Stream not writeable else msg The connection is already closed err new errorClassesAbortError message command cant be processed msg code NRCLOSED command command if commandobjargslength errargs commandobjargs utilsreplyinorderself commandobjcallback err else debugQueueing command for next server connection selfofflinequeuepushcommandobj selfshouldbuffer true When the connection is down then the ready is false and stream is not writable And handleofflinecommand will handle this At this time the closing is always true so it will throw an AbortError So I donot know why retry connection to de redis server in this scope I fix this code like this and it works js function handleofflinecommand self commandobj var command commandobjcommand var err msg if selfclosing selfenableofflinequeue ifselfstream null selfstreamdestroyed retryconnectionself null else selfofflinequeuepushcommandobj command commandtoUpperCase if selfclosing if selfstreamwritable msg The connection is not yet established and the offline queue is deactivated else msg Stream not writeable else msg The connection is already closed err new errorClassesAbortError message command cant be processed msg code NRCLOSED command command if commandobjargslength errargs commandobjargs utilsreplyinorderself commandobjcallback err else debugQueueing command for next server connection selfofflinequeuepushcommandobj selfshouldbuffer true I donot know it will has any other logic code relatively although I fix it and it work well So I hope you give me a reliable solution thksThe code is a little bit messy so I very want to rewrite your noderedis using asyn await But I have no time in this year Version is released in why not release the latest commit getting ReplyError ERR syntax error error even though data is getting set await thismsetAsync key data can someone help I notice that there hasnt been a release in more than two years on is that intentional This recent issue was closed with the response that the library is still active so maybe theres something missing in the docs For example this PR was merged in but theres no release for it on npm Should we be installing with something like npm install NodeRedisnoderedis to get from github directly Or should we do something else like install rediscommands separately If so can the right process be documented Version What noderedis and what redis version is the issue happening on noderedis redis Redis server v Platform What platform version Node version v NPM version Centos Linux localhost el x Description Description of your issue stack traces from errors and code that reproduces the issue I have redis server installed on systems and I have configured the node project on local machine and trying to connect to the other system When the redis service is running on my machine I can connect to other system There is a failure when redisserver on my machine is down I can access the redis on the other machine and there are no selinux or firewall related issues Below mentioned is the stack trace Error Redis connection to failed connect ECONNREFUSED at TCPConnectWrapafterConnect as oncomplete netjs errno ECONNREFUSED code ECONNREFUSED syscall connect address port gitter Version Platform Node JS on MacOS Mojave Description as the title said I expect when the db option is provided it will fire select command on connect using the db option provided regardless whether url provides db number or not How to reproduce const redis requireredis const url redis const client rediscreateClientdb url url clientselecteddb this will return instead of which I expect clientsetfoo bar upon checking on rediscli this is written to db not on db gitter Version Redis version Node Redis Platform NodeJS v on WSL Ubuntu on Windows x microsoftstandard Redis on Windows Microsoft Windows Version Description If I connect to the redis server on Windows from node redis on WSL using the IP WSL Interface of the host everything works fine Also it works if I connect from WSL to the server using the domainlocal is not needed here or when I connect to the redis server running on WSL without localsee Note But if I connect to the redis server using the hostnamehostname of the real machinelocal I get the following error js Error Redis connection to hostname of the real machinelocal failed getaddrinfo ENOTFOUND hostname of the real machinel ocal hostname of the real machinelocal at GetAddrInfoReqWraponlookup as oncomplete dnsjs Emitted error event at at RedisClientonerror homedandaydreamnodemodulesredisindexjs at Socketanonymous homedandaydreamnodemodulesredisindexjs at Socketemit eventsjs at emitErrorNT internalstreamsdestroyjs at emitErrorAndCloseNT internalstreamsdestroyjs at processtickCallback internalprocessnexttickjs Notes If you do not include the local in WSL the hostname will resolve to the WSL VM and not the host I can also connect to the redis server and enter commands using the Command telnet hostname of the real machinelocal Hello Is there a way to have a callback for xadd something like redisClientxaddstreamName functionerrresp consolelogresp I tried and had errors Thanks Mike Pull Request checklist Please make sure to review and check all of these items x Does npm test pass with this change including linting x Is the new or changed code fully tested x Is a documentation update included if this change modifies existing APIs or introduces new ones NOTE these things are not required to open a PR and can be done afterwards while the PR is open Description of change update redisparser to for removing hiredis to support node fix eslint errors fix some of existing errors add nodejs to travis ci add nodejs to appveyor ci I think we could do without the bluebird now 