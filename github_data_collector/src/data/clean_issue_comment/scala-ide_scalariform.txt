We are using Scalastyle along with Scalafmt In our codebase we have at least one instance of this private def someFunctionName argument ADT OneDataType AnotherDataType AThirdDataType In the case of a long function declaration like this Scalastyle using Scalariform complains about rule NoWhitespaceBeforeLeftBracketChecker being broken since there is a space after ADT However the arguments to ADT are so long that Scalafmt breaks it into multiple lines Thus Scalastyle complains Is there a good fix for this One way is to disable this specific rule but when it doesnt apply to multiple lines its a good rule Another fix is of course to create a class for this argument such that it fits in one line While this works bash scalariform class AxInt yint class A x Int y int Adding a trailing comma crashes scalariform bash scalariform class AxInt yInt Exception in thread main javalangIllegalArgumentException requirement failed Parse tokens differ from expected Actual TokenCLASSclass class TokenVARIDA A TokenLPAREN TokenVARIDx x TokenCOLON TokenVARIDInt Int TokenCOMMA TokenVARIDy y TokenCOLON TokenVARIDInt Int TokenRPAREN TokenNEWLINES expected TokenCLASSclass class TokenVARIDA A TokenLPAREN TokenVARIDx x TokenCOLON TokenVARIDInt Int TokenCOMMA TokenVARIDy y TokenCOLON TokenVARIDInt Int TokenCOMMA TokenRPAREN TokenNEWLINES parseResult CompilationUnitStatSeqNoneSomeFullDefOrDclListListTmplDefListTokenCLASSclass classTokenVARIDA ANoneListNoneSomeParamClausesNoneListParamClauseTokenLPAREN NoneSomeParamListListNoneTokenVARIDx xSomeTokenCOLON TypeListTypeListGeneralTokensListTokenVARIDInt IntNoneListTokenCOMMA ParamListListNoneTokenVARIDy ySomeTokenCOLON TypeListTypeListGeneralTokensListTokenVARIDInt IntNoneTokenRPAREN SomeTokenCOMMA NoneNoneNoneListTokenNEWLINES NoneTokenEOF at scalaPredefrequirePredefscala at scalariformformatterSpecificFormatterfullFormatSpecificFormatterscala at scalariformformatterSpecificFormatterfullFormatSpecificFormatterscala at scalariformformatterScalaFormatteranon fullFormatScalaFormatterscala at scalariformformatterScalaFormatterformatAsEditsScalaFormatterscala at scalariformformatterScalaFormatterformatScalaFormatterscala at scalariformcommandlineMainanonfunprocess Mainscala at scalariformcommandlineMaintransformSysInToSysOutMainscala at scalariformcommandlineMainprocessMainscala at scalariformcommandlineMainmainMainscala at scalariformcommandlineMainmainMainscala The same happens with trailing commas in functions bash scalariform def fxInt yInt x y Exception in thread main javalangIllegalArgumentException requirement failed Parse tokens differ from expected Actual TokenDEFdef def TokenVARIDf f TokenLPAREN TokenVARIDx x TokenCOLON TokenVARIDInt Int TokenCOMMA TokenVARIDy y TokenCOLON TokenVARIDInt Int TokenRPAREN TokenEQUALS TokenVARIDx x TokenPLUS TokenVARIDy y TokenNEWLINE expected TokenDEFdef def TokenVARIDf f TokenLPAREN TokenVARIDx x TokenCOLON TokenVARIDInt Int TokenCOMMA TokenVARIDy y TokenCOLON TokenVARIDInt Int TokenCOMMA TokenRPAREN TokenEQUALS TokenVARIDx x TokenPLUS TokenVARIDy y TokenNEWLINE parseResult CompilationUnitStatSeqNoneSomeFullDefOrDclListListFunDefOrDclTokenDEFdef defTokenVARIDf fNoneParamClausesNoneListParamClauseTokenLPAREN NoneSomeParamListListNoneTokenVARIDx xSomeTokenCOLON TypeListTypeListGeneralTokensListTokenVARIDInt IntNoneListTokenCOMMA ParamListListNoneTokenVARIDy ySomeTokenCOLON TypeListTypeListGeneralTokensListTokenVARIDInt IntNoneTokenRPAREN SomeTokenCOMMA NoneNoneSomeExprFunBodyTokenEQUALS NoneExprListInfixExprListCallExprNoneTokenVARIDx xNoneListNoneTokenPLUS NoneListCallExprNoneTokenVARIDy yNoneListNonefalseListTokenNEWLINE NoneTokenEOF at scalaPredefrequirePredefscala at scalariformformatterSpecificFormatterfullFormatSpecificFormatterscala at scalariformformatterSpecificFormatterfullFormatSpecificFormatterscala at scalariformformatterScalaFormatteranon fullFormatScalaFormatterscala at scalariformformatterScalaFormatterformatAsEditsScalaFormatterscala at scalariformformatterScalaFormatterformatScalaFormatterscala at scalariformcommandlineMainanonfunprocess Mainscala at scalariformcommandlineMaintransformSysInToSysOutMainscala at scalariformcommandlineMainprocessMainscala at scalariformcommandlineMainmainMainscala at scalariformcommandlineMainmainMainscala With alignParameters as false my code formats as Importance goal strategy strategy strategy strategy decCommodityInd decMoodInd decCurLeaderOpinionInd incAltLeaderOpinionInd With alignParameters as true it formats as Importance goal strategy strategy strategy strategy decCommodityInd decMoodInd decCurLeaderOpinionInd incAltLeaderOpinionInd If I replace the constant with a variable it behaves reasonably true val numIter ImportancenumIter goal strategy strategy strategy strategy decCommodityInd decMoodInd decCurLeaderOpinionInd incAltLeaderOpinionInd false val numIter ImportancenumIter goal strategy strategy strategy strategy decCommodityInd decMoodInd decCurLeaderOpinionInd incAltLeaderOpinionInd My configuration through sbt is import scalariformformatterpreferences ThisBuild scalariformPreferences scalariformPreferencesvalue setPreferenceAlignArguments true setPreferenceAlignParameters true setPreferenceDoubleIndentConstructorArguments true setPreferenceDoubleIndentMethodDeclaration true setPreferenceFirstArgumentOnNewline Prevent setPreferenceIndentLocalDefs true setPreferenceIndentSpaces In this file I think the code between the format OFF and format ON should not be reformatted but it is Scalariform SNAPSHOT runtime Scala M or addSbtPluginorgscalariform sbtscalariform would be desirable IMO With AlignParameters and AlignArguments on when arguments or parameters are named on function call even when they are all in the same line if the first arguments name is shorter than the second spaces are added between the name and the assignment seemingly trying to align it with the second As in functionarg muchLongerArg functionarg muchLongerArg I cant think of any situation where this behaviour can be desired This pull request resolves When I have an anonymous function that returns another anonymous function I would like to keep the arguments of each consecutive layer in a separate line However Scalariform moves them all into a single line and I could not find a configuration key to change this behaviour Heres an example Before object Main def foo Int Int String x Int y Int x After object Main def foo Int Int String x Int y Int x This issue may be similar to but it is not a duplicate In particular the example from is not being reformatted I use SBT with Scala and sbtscalariform with scalariform It seems that the change that breaks my example has been deliberately introduced by commit a bbde b e b ac b aa c a scala def fimplicit i Int j Int Unit is formatted to scala def fimpliciti Int j Int Unit default config orgscalariform sbtscalariform sbtversion I usually follow the python convention of leaving blank lines after the imports section before the body of the code It would be nice to have a setting to get this spacing convention