The Ethereum network recently went through a hardfork which allows users to call the Blake b compression function F directly in their smart contracts to offer better interoperability with ZCash network See details of the EIP here including a link to the specification of the function F in question Currently all the clients are rolling their own implementation of function F because no libraries expose this one directly We develop KEVM a K implementation of the EVM and rely on cryptopp for several other cryptographic primitives For now we will roll our own implementation of F as well but this is a shame because it means that all the clients are not benefiting from having a single welltested implementation of this function even though the function already exists for the most part The function in question in this library is the following One key difference is that the exposed F needed by Ethereum clients must be parametric in the number of rounds run whereas the implementation here hardcodes rounds Is it possible to expose in the header an implementation of F which Ethereum clients can use must be parametric in the number of rounds If people are agreeable to this we can offer to make the implementationPR ourselves and submit it here Im just wondering if theres any appetite for this really Right now internal headers public headers implementation and test files are all piled together into a jumbled mess Would it not be much better to clean this up Id be happy to help with this effort I think it would also make things much simpler with respect to other build systems I maintain a cmake build file for the project and I keep getting odd regressions due to not knowing which files I need for the build and which ones are part of the testing and benchmarking As reported on the mailing list by Philippe Antoine at Regression in Elliptic Curve Operation on brainpoolP r I have been doing differential fuzzing about elliptic curve cryptography with different libraries including cryptopp On August the th ossfuzz found the first regression after about one year I think this is dut to commit My output is the following point ffffff ffffffff ff ff ff c eb c ace e cb cb f b c ed ce dc bignum a mbedlts de bae dbe f aa b add b fb b fdc af fb be c c e c cfe a c c d b d be b f a acf a a d abba e libecc de bae dbe f aa b add b fb b fdc af fb be c c e c cfe a c c d b d be b f a acf a a d abba e libecc de bae dbe f aa b add b fb b fdc af fb be c c e c cfe a c c d b d be b f a acf a a d abba e openssl de bae dbe f aa b add b fb b fdc af fb be c c e c cfe a c c d b d be b f a acf a a d abba e gcrypt de bae dbe f aa b add b fb b fdc af fb be c c e c cfe a c c d b d be b f a acf a a d abba e cryptopp f bad b f f a f e eca d bb a c b bb ee b f ba e ebbf ae a ed ca db fd c ae dc ee f e That means when I multiply by the point on the curve brainpoolP r x ffffff ffffffff ff ff ff y c eb c ace e cb cb f b c ed ce dc I get a different result than all the other libraries From a private email by J n Jan r MessageID bd e e c c f bamailmunicz Subject Vulnerability disclosure During our research into security of elliptic curve cryptography implementations on smartcards and in software libraries we have discovered timing leakage in the ECDSA signature generation in the Crypto library Vulnerability description When performing ECDSA over binary field curves Crypto leaks the bitlength of the nonce used in scalar multiplication It also leaks some other currently unknown information see the attached plots specifically the msbhistpng plot This leakage can be abused if an attacker is able to measure the duration of signing of a few hundreds or thousands of known messages The attacker can then use a lattice attack based on the Hidden Number Problem to reconstruct the private key used as demonstrated in even remotely See the attached plots and heatmaps for details of the leakage on the standard sect r curve based on the level of noise present in the attackers measurements the lattice attack is very sensitive to noise and willingness to tradeoff computation time the attack would require from to k signatures The private key recovery itself assuming a noise free set of just enough signatures would then take a few minutes The leakage is somewhat present in ECDSA over prime field curves as well but much smaller I do not know the cause of this ECTester D Boneh R Venkatesan Hardness of computing the most significant bits of secret keys in DiffieHellman and related schemes B B Brumley N Tuveri Remote Timing Attacks are Still Practical It appears nearly all versions of Crypto are affected Based on some research of antique Crypto I believe that means Crypto and forward Crypto was released March Also posted to the mailing list at ECDSA timing leaks Ive build a cryptography implementation differential fuzzer that has been running on OSSFuzz for a few weeks and has found some nice bugs I will be integrating Crypto support for my fuzzer into OSSFuzz shortly Would any of the maintainers like to be notified of automated bug reports If so please give me one or more email addresses linked to a Google account I noticed that someone had commenced OSSFuzz integration did anything come of this Im also running a bignum differential fuzzer on OSSFuzz Would you be interested in writing Crypto support for this fuzzer As reported on the mailing list at Stream Cipher Panama Decoder question The issue appears to affect builds where the inline assembly is engaged GCC and MS have the issue Clang does not have the issue The issue is also present in Crypto AutoSeededRandomPool prng stdstring plainHighschool students who have been protesting against changes to colleges and the university system also seized on the mood of protest and stepped up their blockades stdstring cipherhex recover recover cipherbin SecByteBlock key iv prngGenerateBlockkey keysize prngGenerateBlockiv ivsize PanamaCipherLittleEndianEncryption enc encSetKeyWithIVkey keysize iv ivsize PanamaCipherLittleEndianDecryption dec decSetKeyWithIVkey keysize iv ivsize StringSource plain true new StreamTransformationFilterenc new HexEncodernew StringSinkcipherhex works fine recover plain StringSource cipherhex true new HexDecodernew StringSinkcipherbin StringSource cipherbin true new StreamTransformationFilterdec new StringSinkrecover encResynchronizeiv ivsize decResynchronizeiv ivsize does not work recover Highschool students who have been protesting against changes S m Q StringSource cipherhex true new HexDecodernew StreamTransformationFilterenc new StringSinkrecover stdcout One stdcout recover stdendl stdcout Two stdcout recover stdendl ARMv adds cpu support for SHA SHA SM and SM This ticket will track the changes to the CPU gear to support ARMv SHA SHA SM and SM will be added under different tickets SM is a part Chinese national standard for public key algorithms including digital signatures and elliptic curves See SM Digital Signature Algorithm We recently received some private emails asking for several Chinese algorithms The email also pointed out US and some European algorithms have good coverage in the library This issue is a follow up to Add support for ECGDSA and ECKCDSA specifically about the support of ECKCDSA after the implementation of ECGDSA Thanks for your hard work on this library Argon winning the PHC made it a great choice for a memory hard KDF BLAKE is already implemented here so I think it would be a bit less work than a fresh implementation Ive found some useful writeups here although there doesnt seem to be any work in the past couple months 