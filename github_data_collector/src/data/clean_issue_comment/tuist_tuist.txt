Resolves Short description This pull request implements verbose logging so that any System or File commands are printed to the console This only partially resolves Ideally we can introduce a more advanced logging system such as however this would require a larger refactor which is likely unworth it at this moment Solution Add API to allow for FileHandler and System to print verbose Short description Headers with a Project visibility were getting a PROJECT attribute in their build file in the generated project Project headers in Xcode however have no attributes set when set manually in the UI As it happens setting any arbitrary value defaults to Project visibility in Xcode hence why this worked thus far Solution To make generated project more inline with Xcode we can omitt setting attributes for project headers Implementation x Update BuildPhaseGenerator x Update change log Test Plan Run tuist generate within fixturesiosappwithframeworksFramework Verify the generated project has MyProjectClassh set to Project visbility in the generated project It would be awesome if there was a way to pass a simple parameters or flags to the generate command We have complex project and I would like to generate it separately for development and production app store builds I tried using env variables PRODUCTIONtrue tuist generate with following code in Projectswift swift import Foundation import ProjectDescription let isDev ProcessInfoprocessInfoenvironment PRODUCTION nil But the isDev variable is always true Any ideas how to make at least env vars propagate inside Currently when creating a scheme we can only specify build test run and archive actions Profile and analyze will always pick the default build configurations I find there is which adds archive action Im wondering if there are any difficulties in adding profile or analyze actions or simply because people rarely use them I would love to help to add the support Short description Weve noticed the scheme generation is not always stable The order of testable targets in a scheme could change after regenerating the project Its reproducible when multiple testable targets depend on the same target framework or app within a single project ie ProjectA AppTarget UnitTestsTarget dependencies AppTarget UITestsTarget dependencies AppTarget Solution Sorted testable targets Updated one of the unit tests to reproduce the issues and avoid regression in the future Updated the integration tests to cover multiple testable targets user case Implementation x Sort testable targets in SchemeGenerator x Update CHANGELOG Describe the bug When generating the manifest target to edit Projectswift the folder hierachy starts from my root directory See image for a clear depiction Expected I would expect it to generate me folders relative to the current working path To Reproduce tuist edit Screenshots Additional context Add any other context about the problem here Part of Short description To aid profiling Tuist large fixtures are needed Solution Create a small command line tool to generate large fixtures Usage sh swift run FixtureGenerator projects targets sources Implementation x Add fixture generator Update change log Test Plan Run swift run within fixturesstresstest Run tuist generate within fixturesstresstestFixture Verify the generated fixure is valid Experiment with different number of sources targets projects to benchmark Tuist Questions Does this look like a reasonable approach to generating fixtures Any better tools techniques we can apply here to make this easier to maintain scale extend Needproblem There are quite a lot of types that are available as part of ProjectDescription module It could be considered as Tuists public API and we should have some guidelines how to introduce changes to it Motivation As part of thinking about there was a discussion about unifying the way we include files and resources to the generated project We currently have several different types that handle this and tweaking them would potentially introduce a breaking change for people using Tuist Of course not touching anything in ProjectDescription module is not a viable option so I think we should have some sort of information on how to approach the problem Unresolved questions Is this something that feels relevant for everyone else working on Tuist Should we avoid doing breaking changes at all costs or introduce them if we feel it improves the experience considerably Making additive changes should be fine but what exactly is considered an additive change Would there be a way to automate checking for breaking changes or we just try to flag it in code review Needproblem Is there any way to declare my own generation functions and use them instead of default ones For example I have internal frameworks I use the same template for target settings each target has some unique information like name identifier source path tests path Each target has the same setup so Projectswift is copy paste Is there any way to create something like this companynameframeworkname String source String tests String let projectSettings let targets let schemes Projectname name settings projectSettings targets targets schemes schemes Use companynameframework in Projectswift file for each framework instead of duplication creating targets settings schemes Im opening this issue to include the points that wed like to discuss in our next sync call Feel free to update the description of this issue to add more points General intro welcome new joiners Tuist usage updates a round the table update of how everyone is getting along with Tuist any issues blockers kwridan Performance Optimising generation proposal ollieatkinson Always good to talk over any open PRs and how to unblock them ollieatkinson Theres also been some hesitation on my side in regards to starting new work knowing we are thinking of moving towards a reactive architecture are we still considering this and should we start prepping some RFC documents Open Issues API Stability Guidelines