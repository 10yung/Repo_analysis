Hi im unable to share the C driver although it shows up a password authentication mechanism Typically we enter the org useridpassword Can you please confirm Thanks PS Here is the error message ERROR for jupyterjupyter Cannot create container for service jupyter bDrive sharing failed for an unknown reason Cannot auto complete in the juyter lab Unable to use shortcut keys TabShiftVersion Jupyter notebook no problem lgo python yunabelgoextension Click is invalid condaEnv roothzvcontentembedding bin lgo kernel F kernelgo Failed to create a server Failed to read open no such file or directory goroutine running githubcomgolangglogstacks xc c xc d x a xcc dataalgorithmsrcgithubcomgolanggloggloggo xd githubcomgolangglogloggingToutput x b eea xc xc x b f x x d x dataalgorithmsrcgithubcomgolanggloggloggo x c githubcomgolangglogloggingTprintf x b eea xc x b f b x d xc dde x x dataalgorithmsrcgithubcomgolanggloggloggo x d githubcomgolangglogFatalf x b f b x d xc dde x x dataalgorithmsrcgithubcomgolanggloggloggo x mainkernelMain xc x xc dataalgorithmsrcgithubcomyunabelgocmdlgointernalkernelgo x mainmain dataalgorithmsrcgithubcomyunabelgocmdlgointernalmaingo x lgointernal failed exit status I install this project with go on CentOS while lgo install I got a error Install lgo to homejupyterlgopath Building libstdso Building lgo core package Building thirdparty packages in GOPATH Installing lgointernal githubcomyunabelgocmdlgointernal typeMO lsdMr missing section for relocation target typeFEeY FdU typeMO lsdMr reloc RCALL to nonelf symbol typeFEeY FdU outertypeFEeY FdU SABIALIAS Failed to build lgointernal exit status google provides me no help Is there something wrong with go yunabe Thanks a lot for this project I went through the original blog announcement and was wondering whether any documentation currently discusses the way that this project is made possible meaning in terms of how you could take a compiled language and make it act much like it is interpretable in Jupyter If I followed correctly youve not built your own custom interpreter mirroring the language spec official go compiler so I assume this project may be utilizing compiler features maybe initially meant for IDE and lately called language server development Even if I happen to be so far correct I am very happy to learn a bit more Im happy to use this for data science together with gonum if I can only understand a bit more about the architecture choices upfront to avoid implied limitations an so forth Thanks again for this project and thanks in advance for your comments We have stabilised the graph API in gonum so Ive taken up trying your graphpracbinder with the following URL however it doesnt build Failing with briefly because mybinder doesnt allow raw copiable text logs to be see Running in a ad be gonumorgv gonumgraphformatsdotinternalerrors gosrcgonumorgv gonumgraphformatsdotinternalerrorserrorsgo undefined stringsBuilder gosrcgonumorgv gonumgraphformatsdotinternalerrorserrorsgo undefined stringsBuilder So presumably the docker image has a go standard library Is there a more recent version Im trying to install lgo and get the following error bash go get githubcomyunabelgocmdlgo go get d githubcomyunabelgocmdlgointernal lgo install Install lgo to homemaximgolgo Building libstdso tmpgobuild b libstdso Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x fd Erratum found and fixed at tmpgolink o section offset x fedc Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x fd Erratum found and fixed at tmpgolink o section offset x fedc Building lgo core package tmpgobuild b libstdso Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x fd Erratum found and fixed at tmpgolink o section offset x fedc Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x fd Erratum found and fixed at tmpgolink o section offset x fedc Building thirdparty packages in GOPATH Installing lgointernal tmpgobuild b libstdso Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x fd Erratum found and fixed at tmpgolink o section offset x fedc Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x c Erratum found and fixed at tmpgolink o section offset x fd Erratum found and fixed at tmpgolink o section offset x fedc githubcomyunabelgocmdlgointernal typeMO lsdMr reloc RCALLARM to nonelf symbol typeFEeY FdU outertypeFEeY FdU SABIALIAS Failed to build lgointernal exit status go version output go version go linuxarm uname a Linux odroidc ARCH SMP PREEMPT Sat Feb MST aarch GNULinux Hello Maybe a naive question after my lack of understanding of how a Jupyter cell execution works for a compiled programming language Is it possible to optimise each command execution in avoid calling go install when there is no import in the executed cell this would provide as well a workaround for the issue of slowness in go versions F gojupyterscaffoldgo Failed to echo heartbeat request interrupted system call goroutine running githubcomgolangglogstacks xc b e xc a x x d homeyunabelocalgocodesrcgithubcomgolanggloggloggo xd githubcomgolangglogloggingToutput x a a xc xc c x fe a x xb x homeyunabelocalgocodesrcgithubcomgolanggloggloggo x githubcomgolangglogloggingTprintDepth x a a x x xc ef x x homeyunabelocalgocodesrcgithubcomgolanggloggloggo x c githubcomgolangglogFatalDepth x xc ef x x homeyunabelocalgocodesrcgithubcomgolanggloggloggo x f mainglogLoggerFatal x f a b xc d x homeyunabelocalgocodesrcgithubcomyunabelgocmdlgointernalkernelgo xa githubcomyunabelgojupytergojupyterscaffoldloggerWrapperFatalf x a x f a b x c x xc fa x x homeyunabelocalgocodesrcgithubcomyunabelgojupytergojupyterscaffoldloggergo x d githubcomyunabelgojupytergojupyterscaffoldServerLoopfunc xc a homeyunabelocalgocodesrcgithubcomyunabelgojupytergojupyterscaffoldgojupyterscaffoldgo x created by githubcomyunabelgojupytergojupyterscaffoldServerLoop homeyunabelocalgocodesrcgithubcomyunabelgojupytergojupyterscaffoldgojupyterscaffoldgo x I need to install lgo on the whole system Therefore I set GOPATH to usrlocalgo during installation and LGOPATH to usrlocallgo I set the right permissions for my user in LGOPATH When the user try to execute lgo run with a composite GOPATH like HOMEgousrlocalgo currently homejovyangousrlocalgo heres what happen import fmt cant load package package githubcomyunabelgosess b d a dexec cannot find package githubcomyunabelgosess b d a dexec in any of usrlibgo srcgithubcomyunabelgosess b d a dexec from GOROOT homejovyangosrcgithubcomyunabelgosess b d a dexec from GOPATH usrlocalgosrcgithubcomyunabelgosess b d a dexec E maingo Failed to build a shared library of githubcomyunabelgosess b d a dexec exit status When I change the GOPATH to usrlocalgo without colons everything works again Its a bit annoying since my home is a Docker volume and usrlocalgo is what was setup during the docker build Would there be a way to keep both paths with lgo