I came to Robert with a question about the possibility of adding an offset to the raw input data as a convenience efficiency function of gpujs For example when using graphical mode and drawing a image composited out of many other images my use case It could be useful to simply offset the input with something like kernelsetOutputimage image To give an optional xy offset for each placed image My first attempt at this involved trying to offset the data when loading images in webgl in backendwebgl kernelvaluehtmlimagearrayjs line there are offsets and widths that can be set This worked well but unfortunately due to a limitation in webgl It only works with positive offsets not negative ones there was a workaround here but because it uses a canvas it might be too slow In response to this limitation Robert suggested just modifying the kernel function like so In this case the offset functionality is not provided by the gpujs library and required that the user add a modest amount of extra lines to their kernel The question came up of whether it would make sense to include this type of function wrapper in general in gpujs or it user should just write it manually like shown if they need it Is there any interest in providing an offsets type of option to gpujs image or other inputs to avoid user having to do manual bound checks and index adjustment like in the example If so I may look into creating the api If you dont mind add a fun gif or meme but no pressure A GIF or MEME to give some spice of the internet If you dont mind add a fun gif or meme but no pressure A GIF or MEME to give some spice of the internet What is wrong Ex run takes really long Where does it happen Ex In GPUjs when trying to run a math function in nodejs on my mac How do we replicate the issue Please be specific as possible Use dashes or numbers to create a list of steps How important is this Expected behavior ie solution What do you think should have happened Other Comments js let matix let matix let kernel guicreateKernel function transform m m do something return value kernelsetOutput kernel matrix matrix Just a few Questions How to find out m or m dimensions widthheightdepth In my case m can have different widths x sizes I tried arrayprototypelength like m length which failed Transpiler should replace arrayprototypelength by a command known to gpu Trying out workarounds passing in dimensions via constants failed kernelsetConstants m x y fails with exception Obviously the type cannot be handled Transpiler does not manage to run type transformation Trying another workaround kernelsetConstants m dim runs niceley but produces messy results Obviously passing in an array as constant mixes up the matrices m andor m passed into the function transform see at the top Transpiler threadconstants interferes with function parameters When on the top navigation links work as expected If i am on any of those pages and hit F or move fwdback with browser controls the links all go to a error page Only way to get to various pages it to get back to and use the top navigation links Frustrating I found a way to implement higherorder functions in GLSL but it seems that gpujs doesnt have this feature yet Since there are no function pointers in GLSL gpujs could use a struct as a pointer to each function struct function int x function Sin return function function Cos return function float callfunction funcfloat x iffunc Sin return sinx else iffunc Cos return cosx vec mapfunction funcvec a this function can be overloaded for different array sizes vec a forint i i i a i callfunca i return a JavaScript functions like Functionprototypecall Arrayprototypemap and Arrayprototypereduce could probably be translated to GLSL in this way I noticed that the link to the kernel playground in READMEmd is broken Is there another link that still works What is wrong Only some output elements are counted This happens for large matrixes for example I am trying to multiply x by x This is my kernel const kernel gpucreateKernel functiona b let sum for var i i i sum a thisthready i b i thisthreadx return sum output loopMaxIterations The output stops at row by th element so the row with index looks like And then only zeros are present The matrixes are ok numeric js can multiply them correctly Where does it happen It happens with react native the expo extension In the browser it works fine How do we replicate the issue Setup reactnative project Add gpujs and extension for me I need to import GPU from gpujs not GPU from gpujs probably some babel config try to multiply some random matrixes How important is this Expected behavior ie solution All elements are counted Other Comments Thanks for help What is wrong Ex run takes really long When I use a webgl context kernel map and a custom return type like Array the subKernelResultmap variable is declared as float and produces a fragment shader compiling error This do not happen with webgl context WebGL Where does it happen Ex In GPUjs when trying to run a math function in nodejs on my mac When using createKernelMap with the returnType Array in a webgl context How do we replicate the issue Please be specific as possible Use dashes or numbers to create a list of steps Create and use a webgl context Create a KernelMap with returnType Array Run the kernel How important is this On a scale from where is the most important how would you rate it Expected behavior ie solution What do you think should have happened That it works like with webgl Other Comments Edit The problem is in the WebGL KernelgetKernelString implementation For WebGL there is only made a difference bewteen int and float but not the other data types The switchcacse form WebGL for the different datatypes is missing What is wrong When I set Array D as data type for arguments or constants the memory usage and cpu continuously rises until the browser tab dies after some time Where does it happen Ex In GPUjs when trying to run a math function in nodejs on my mac In GPUjs when trying to set the data type to Array D with the kernel settings argumentTypes or constantTypes How do we replicate the issue Please be specific as possible Use dashes or numbers to create a list of steps gpucreateKernelfunctionarg do stuff output graphical true argumentsTypes arg Array D Some loop which calls the kernel eg FPS How important is this On a scale from where is the most important how would you rate it Expected behavior ie solution What do you think should have happened No memory leak Memory and cpu usage should stay stable after the starting of the loop Other Comments Other arguments wit data type ArrayTexture do not produce a memory leak but I need the data type Array D data type What is wrong When accessing surrounding pixel in on the y axis which are out of bounds it wraps to the other site of the texture instead of failing or similar For example if you have a x texture and want to access myTexture you will get the value of myTexture At the moment this only happens for the y axis Where does it happen When accessing a value of texture on the y axis when it is out of bounds How do we replicate the issue See the explanation above How important is this On a scale from where is the most important how would you rate it Expected behavior ie solution What do you think should have happened This should be consistent for the x axis as well Best this is configurable Other Comments 