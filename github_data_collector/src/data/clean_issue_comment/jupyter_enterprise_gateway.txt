hi we had deployed the EG with SSL enabled We would like to know how to configure the ssl at the KIP Pls provide some pointers surya Since updating the conditional volume mounts I have encountered a new issue While having resource quotas and limits in any given namespace where the Enterprise Gateway is deployed The EG and the Kernels are not spawning because the following specs are missing in the templates kernelpodyamlj name kernelpodname resources limits cpu memory Gi nvidiacomgpu if kernelworkingdir is defined workingDir kernelworkingdir endif volumeMounts Enterprise Gateway Deployment YAML snippet image elyraenterprisegatewaydev resources limits cpu memory Gi nvidiacomgpu Image puller daemonset YAML snippet image elyrakernelimagepullerdev resources limits cpu memory Gi nvidiacomgpu Basically in all the templates there is no definition for limits this blocks the pods from spawning in a namespace where these limits and quotas are defined I think this is something that can be catched with an Admission Controller but might be a good idea to implement it in the templates Im not sure how to pass those variables so in my own setup I hardcoded the limits in the templates I browsed some issues but I dont think this is mentioned somewhere already Correct me if Im wrong kevinbates With NB x we dont need the NB KG dependency anymore which can considerably simplify the image used when integrating with JupyterHub Description The EG instance becomes unresponsive returning HTTP Internal Server Error to the client In the EG logs the EG is repeatedly querying for the state of the Spark Application Every second which is failing I have not found a way to reproduce the issue Restarting the EG instance works but this is a frequently occurring issue Once every days The YARN API its using to query the state of the application is working and returning the state of the spark application Going through the stack trace I observed that resourcemanager object of YarnClusterProcessProxy becomes None because of which the query is failing Screenshots Logs Stack trace of EG W EnterpriseGatewayApp Query for application application state failed with exception HTTPConnectionPoolhostrmurl portrmport Max retries exceeded with url wsv clusterappsapplication state Caused by NewConnectionErrorurllib connectionHTTPConnection object at x f d cf Failed to establish a new connection Errno Resource temporarily unavailable Continuing E ioloop Exception in callback bound method KernelRestarterpoll of jupyterclientiolooprestarterIOLoopKernelRestarter object at x f b Traceback most recent call last File usrsharemlpjeglibpython sitepackagestornadoiolooppy line in run return selfcallback File usrsharemlpjeglibpython sitepackagesjupyterclientrestarterpy line in poll if not selfkernelmanagerisalive File usrsharemlpjeglibpython sitepackagesjupyterclientmanagerpy line in isalive if selfkernelpoll is None File usrsharemlpjeglibpython sitepackagesenterprisegatewayservicesprocessproxiesyarnpy line in poll state selfqueryappstatebyidselfapplicationid File usrsharemlpjeglibpython sitepackagesenterprisegatewayservicesprocessproxiesyarnpy line in queryappstatebyid return responsedata state AttributeError NoneType object has no attribute data Environment Enterprise Gateway Version Platform Spark YARN Cluster Mode OS Debian kernelimagepuller is not supporting to pull images from private registries I suppose that the best way would be to enable pulling images from private registries by passing KIPIMAGEREGISTRYUSER and KIPIMAGEREGISTRYPASSWORD env variables In a kubernetes setup this could be easily used in combination with a secret containing the user and login The python docker client supports this using the authconfig parameter to dockerimagespull def pullself repository tagNone kwargs Args repository str The repository to pull tag str The tag to pull authconfig dict Override the credentials that are found in the config for this request authconfig should contain the username and password keys to be valid platform str Platform in the format os arch variant How possible would it be to do this I think the difficulty here is making a processproxy that does similar things to the ssh one and the docker one and also passing which docker image to run a notebook in Is this something you would be interested in having a pull request if I get the time to implement it Can you see any pitfalls or reason this doesnt already exist Feature Request for configuring the request queue size in JEG Description Due to the following issue all subsequent requests are queued at JEG during Kernel Launch In case of Spark kernels kernel startup can take more than seconds If two users are using the same JEG instance and if one user has launched a kernel the other users requests which might not be a kernel launch request are queued for that duration Gateway timeouts generally set in the order of minutes acts as a guardrail for not making the user wait indefinitely but waiting for timeouts and eventually not getting a response from JEG still leads to a bad user experience I suggest a request queue size configuration is set at JEG level which takes in the number of requests n that can be queued at JEG If n th request is received it should be rejected and sent back with a proper Error message HTTP XX Gateway is busy executing other requests Environment Enterprise Gateway Version Platform YARN Description If the menu item Restart kernel is pressed in JupyterLab the frontend loses connection to the kernel After restart cells never return output I am playing with a custom class derived from RemoteProcessProxy but I am able to reproduce the issue with DistributedProcessProxy Screenshots Logs From what I see from the logs on a start there are connections to all set of ports while on restart hb and stdin is never being reconnected Start D EnterpriseGatewayApp Received connection info for KernelID d cbae ab f b bfd from host dcc u shellport iopubport stdinport controlport hbport ip key b b d b fb f a a transport tcp signaturescheme hmacsha kernelname commport D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp Connecting to tcp I EnterpriseGatewayApp Kernel started d cbae ab f b bfd D EnterpriseGatewayApp Kernel args env PATH cmsharedappsjupyter bincmsharedappscmnpmconfigurablehttpproxy bincmlocalappspython bincmlocalappscmsetupbincmlocalappsclustertoolsbincmlocalappscmdsbincmlocalappscmdbincmlocalappsenvironmentmodules binusrlocalsbinusrlocalbinusrsbinusrbincmlocalappsenvironmentmodules binbinsbinrootbintmpdmitrysshrcWkYa KERNELLAUNCHTIMEOUT KERNELWORKINGDIR homecmsupport KERNELUSERNAME cmsupport kernelname pythonslurm D EnterpriseGatewayApp Opening websocket apikernels d cbae ab f b bfd channels D SingleUserNotebookApp handlers Connection is ready ws tornadowebsocketWebSocketClientConnection object at x aaabe b D EnterpriseGatewayApp Getting buffer for d cbae ab f b bfd D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp activity on d cbae ab f b bfd status busy D EnterpriseGatewayApp activity on d cbae ab f b bfd status idle Restart D EnterpriseGatewayApp Received connection info for KernelID d cbae ab f b bfd from host dcc u shellport iopubport stdinport controlport hbport ip key bc a da a b cb c transport tcp signaturescheme hmacsha kernelname commport D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp Clearing buffer for d cbae ab f b bfd D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp Refreshing kernel session for id d cbae ab f b bfd I EnterpriseGatewayApp Kernel restarted d cbae ab f b bfd D EnterpriseGatewayApp Connecting to tcp D EnterpriseGatewayApp activity on d cbae ab f b bfd status busy D EnterpriseGatewayApp activity on d cbae ab f b bfd status idle D EnterpriseGatewayApp Kernel info reply received d cbae ab f b bfd D SingleUserNotebookApp managers Restart kernel response OK netstat also shows a reduced set of opened connections Environment jupyterclient jupytercore jupyterenterprisegateway jupyterkernelgateway jupyterhub jupyterlab jupyterlabserver ipykernel ipython OS Centos One of the features added in PR was the ability for users to specify peruser volume mounting by specifying KERNELVOLUMEMOUNTS and KERNELVOLUMES values in the env stanza of the apikernels POST requests json body We need to document an example of how that would be accomplished It could be as simple as taking the example from This issue came up during the review of PR which references the location within the docs Why cant we use Skaffold to build the kernel images in a separate project 