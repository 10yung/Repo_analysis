Allows an ActiveInteractionInvalidInteractionError to behave in a similar way as ActiveRecordRecordInvalid which exposes the failed record ActiveInteractionInvalidInteractionError exposes interaction attribute which includes failing interaction This feature allows for better inspection of why interaction failed and therefore makes feedback to consumers of interaction errors more flexible Take for example a Rails controller action which might need to be rescued and whose error details need to be passed to the frontend ruby class FooController ApplicationController rescuefrom ActiveInteractionInvalidInteractionError do exception render json errors exceptioninteractionerrorsdetails status unprocessableentity end def update result FoosUpdaterun permittedparams render json result serializer FooSerializer status updated end end Currently the given method can only check values on toplevel filters or hash filters Given a set of filters like this array lineitems do hash do integer amount string description default nil end end I would love to be able to do something like givenlineitems description Ive hacked together a rudimentary version of this for now def givenlineitemfieldindex field interactioninputsdiglineitems indexkeyfield end I am trying to use the predicate methods to conditionally validate inputs in a Rails app I copied the exact UpdateAccount class to manually test the example you have there just in case I had a weird syntax issue etc and got an undefined error undefined method firstname for UpdateAccount Did you mean firstname firstname The documentation seemed to suggest that these methods are automatically generated for all of the inputs given is that correct or am I misunderstanding the proper way to access these I am using activeinteraction in a Rails instance When we pass params from controller action to an interaction ActionControllerParameters indifferent access becomes a hash with symbolized keys for the first level values and stringified keys for the nd level values h a b c before h b c h b c h a h a after h b c error h a nil Hello Im migrating some old codebase and I encountered one unexpected issue on this interactor works just fine ruby ClassnewActiveInteractionBase boolean open default false Whereas on actually on anything it fails ruby prymain ClassnewActiveInteractionBase boolean open default false ActiveInteractionInvalidFilterError open is a reserved name I investigated that a bit and it comes from a href particular check in InputProcessora While I understand why it might be potentially dangerous to have such collisions Im wondering if there shouldnt be an option to allow me to have a filter with reserved name Im totally fine with keeping current behaviour as default of course so this should be more like a enhancement than a breaking change wdyt There is a test for showing issue failing so far I have an interaction that uses compose in its callback If there are some errors returned from inner interaction the ActiveInteractionInterrupt exception is thrown and caught nowhere Example class ChildFailingInteraction ActiveInteractionBase def execute errorsaddbase end end class ParentInteraction ActiveInteractionBase setcallback execute before composingfailinginteraction def composingfailinginteraction composeChildFailingInteraction end def execute end end Calling ParentInteractionrun leads to ActiveInteractionInterrupt exception If the composeChildFailingInteraction is placed in the execute its okay and the exception is caught Fixes nested attribute errors see if the name is corresponding Reason why it was not working is that the array is not directly addressed via the attribute name ruby def attributeattribute baserespondtoattributetosgsub d z end attribute data even though the attribute data is existing My fix corrects this behaviour and test are running fine I didnt create so many PR in my life until now so please feel free to correct me I dunno why but as far as I know since Rails error messages are nestable see and it looks like its not working correctly ActiveInteractor is merging them to base though which is wrong in my opinion Please correct me but for me this seems like a bug which prevents a certain use case for me right now ruby class ChildInteraction ActiveInteractionBase array data do object class Fixnum end def execute errorsadddata tessst end end class RootInteraction ActiveInteractionBase array data do object class Fixnum end def execute composeChildInteraction data data end end RootInteractionrundata errorstoh baseData tessst instead of data tessst I tried it by setting configactiverecordindexnestedattributeerrors true like mentioned in the link above but it doesnt work either 