Hello I need to store the IP address in requests but unfortunately I couldnt Please guide me to do this Regards Telescope Version Laravel Version PHP Version Database Driver Version MySQL Description Were running our application Google App Engine and Id like to use Telescope in our development environment One challenge with App Engine is that because its a serverless solution theres no way to run anything from a console The simple reason is that you dont have any kind of dedicated server thats yours servers spin up and down as needed As such migrations and other console commands run accomplished by setting up an endpoint that fires the command such as artisanmigrate This leads me to my problem When Telescope determines whether or not to include the migrations it checks thisapprunningInConsole Hmm In our case its not running the console and never will be This becomes a blocker in running the Telescope migrations A workaround could be to use the APPRUNNINGINCONSOLE env variable but Im reluctant to use that as the application really isnt running in the console Im happy to make a PR for this Could we add a TELESCOPEINCLUDEMIGRATIONS env variable to forego the console check Or perhaps add a telescopemigrate console command to explicitly run the migrations Open to ideas Steps To Reproduce Create an endpoint that runs php artisan migratefresh and echos the command output Manually hit the endpoint Notice the Telescope migrations are not included Telescope Version Laravel Version PHP Version Description The date format of the value for the field createdat of the table telescopeentries doesnt match what is specified in the query grammar when inserting new rows In telescope the async requests will fail with a error due to the mismatch ex telescopetelescopeapirequeststag before take familyhash or telescopetelescopeapiexceptionstag before take familyhash localERROR Trailing data userId exception object InvalidArgumentExceptioncode Trailing data at vagrantwwwvhostshermesrifrafitvendornesbotcarbonsrcCarbonTraitsCreatorphp stacktrace vagrantwwwvhostshermesrifrafitvendornesbotcarbonsrcCarbonTraitsCreatorphp Carbon CarbonrawCreateFromFormatU NULL vagrantwwwvhostshermesrifrafitvendorlaravelframeworksrcIlluminateSupportDateFactoryphp Carbon CarboncreateFromFormatU vagrantwwwvhostshermesrifrafitvendorlaravelframeworksrcIlluminateSupportFacadesFacadephp Illuminate Support DateFactorycallcreateFromForma Array vagrantwwwvhostshermesrifrafitvendorlaravelframeworksrcIlluminateDatabaseEloquentConcernsHasAttributesphp Illuminate Support Facades FacadecallStaticcreateFromForma Array vagrantwwwvhostshermesrifrafitvendorlaravelframeworksrcIlluminateDatabaseEloquentConcernsHasAttributesphp Illuminate Database Eloquent ModelasDateTime vagrantwwwvhostshermesrifrafitvendorlaravelframeworksrcIlluminateDatabaseEloquentConcernsHasAttributesphp Illuminate Database Eloquent ModelgetAttributeValuecreatedat vagrantwwwvhostshermesrifrafitvendorlaravelframeworksrcIlluminateDatabaseEloquentModelphp Illuminate Database Eloquent ModelgetAttributecreatedat vagrantwwwvhostshermesrifrafitvendorlaraveltelescopesrcStorageDatabaseEntriesRepositoryphp Illuminate Database Eloquent Modelgetcreatedat Of course Ive also tried changing the table field type but in that case the insert will fail Steps To Reproduce In my case Ive extended the MySqlGrammar this way php namespace App Database Query Grammars class MySqlGrammar extends Illuminate Database Query Grammars MySqlGrammar public function getDateFormat return U and registered it in the AppServiceProvider php class AppServiceProvider extends ServiceProvider Bootstrap any application services return void public function boot DBconnectionsetQueryGrammarnew App Database Query Grammars MySqlGrammar As a temporary solution Ive wrapped the setQueryGrammar in a condition php if TelescopeisRecording DBconnectionsetQueryGrammarnew App Database Query Grammars MySqlGrammar Telescope Version Laravel Version PHP Version Description After installing Telescope test runner on Heroku started giving me this error PHP Fatal error Allowed memory size of bytes exhausted tried to allocate bytes in appvendorlaraveltelescopesrcWatchersFetchesStackTracephp on line during the testsetup script that seeds the database the seeder isnt that heavy but it does a couple of things D it surely doesnt exceed memory limit on my local even when setting memory limit to M When investigating the issue on Heroku I tried adding env nameTELESCOPEENABLED valuefalse to my phpunitxml but it didnt have any effect Only preventing discovery via composerjson extra laravel dontdiscover laraveltelescope and adding if thisapprunningUnitTests thisappregister Laravel Telescope TelescopeServiceProviderclass thisappregisterTelescopeServiceProviderclass to my AppServiceProviderregister did the trick While Im fine with preventing package discovery Id think that setting TELESCOPEENABLED flag should be enough to prevent Telescope As far as Im aware of installing Telescope creating a seeder that is resource heavy and running it on Heroku test runner is enough to replicate the issue however Im unable to replicate it at this moment Telescope Version Laravel Version PHP Version Database Driver Version Description if getCallerFromStackTrace doesnt return an array QueryWatcherphp at line will throw an exception ErrorException Trying to access array offset on value of type null Steps To Reproduce Any scenario in which getCallerFromStackTrace cant find a caller In my case I ran a test contained in a vendor component that had to write to a test database I see that debug bar has a nice future hydrated models witch count how many eloquent models are build in memory It is very important for performance measure I think it would be a nice future in telescope and help a lot of people to debug memory usage and build faster apps It would be nice to add startDate and endDate to query options and filter them against createdat examples Telescope Version Laravel Version PHP Version Description There are cases where you have models that only implement the Authorizable contract and not also the Authenticable contract If you need a pivot model to scope permissions to a group for example you might only want authorization capabilities and nothing more The GateWatcher is not able to record these cases and there will be an exception I think it makes more sense to require an Authorizable there Steps To Reproduce Create a regular model apply php use Illuminate Contracts Auth Access Authorizable as AuthorizableContract use Illuminate Foundation Auth Access Authorizable and finally try to use the can method on an instance of that model with the GateWatcher enabled What are your thoughts on this Telescope Version v Laravel Version PHP Version Database Driver Version irrelevant Description When using a queued listener it is impossible to have typed properties declared in that listeners class php class SomeListener implements ShouldQueue use InteractsWithQueue var SubscriptionService private SubscriptionService subscriptionService param SubscriptionService subscriptionService public function constructSubscriptionService subscriptionService thissubscriptionService subscriptionService public function handle When Telescope is enabled code above will produce an error Typed property App Listeners SomeListenersubscriptionService must not be accessed before initialization Steps To Reproduce Create any queued listener and enable Telescope Issue is caused by ExtractTagsmodelsFor method php protected static function modelsForarray targets models foreach targets as target models collectnew ReflectionClasstargetgetPropertiesmapfunction property use target propertysetAccessibletrue value propertygetValuetarget This throws error if value instanceof Model return value elseif value instanceof EloquentCollection return valueflatten collapsefilterall return collectArrcollapsemodelsunique There are possible workarounds do not use typed properties always initiate typed property defacto allow nullable values and set null as default IMHO developer should not be forced to either not use typed properties or allow null values in properties Ive got very simple fix for that but not sure if that is sufficient probably not Simply there should be check if a property has been initialized before it can be accessed php protected static function modelsForarray targets models foreach targets as target models collectnew ReflectionClasstargetgetPropertiesmapfunction property use target propertysetAccessibletrue Check if property is initialized for PHP if PHPVERSIONID isobjecttarget propertyisInitializedtarget return value propertygetValuetarget if value instanceof Model return value elseif value instanceof EloquentCollection return valueflatten collapsefilterall return collectArrcollapsemodelsunique If proposed solution is acceptable I can create MR for that It would be nice to add a configuration entry to disable gravatar if it doesnt already exists I didnt see it in the docs Possible usecases and concerns Offline servers Privacy I dont use Gravatar at all so I dont want my email address to be sent to them with everything that implies in terms of security and privacy Another possibility would be to allow customising avatars URL so we can use thirdpartyselfhosted avatarhosting services