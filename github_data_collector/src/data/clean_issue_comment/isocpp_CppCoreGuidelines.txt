Hello long time no sees Finally we completed the translation of C Core Guidelines to Korean It is based on the version of September Also we changed the design of a web site It is based on mkdocs Links Well update the document for Thanks Added example to CP Use an async to spawn a concurrent task I and R seem to address the same issue thus I propose removing R and moving some of its contents into I Review of a submitted change to clangtidy for a check implementing I revealed conflicting interpretations of whether to warn about nonconst variables in anonymous namespace Therefor this patch also includes a suggestion to add the excplicit exception that variables in anonymous namespace should not be considered global As discussed in narrow is specified to throw if the narrowing cast loses information and narrowcast is specified to tolerate loss of information Should the GSL also define a narrowing cast that has the precondition that the source value is representable in the destination type May I ask a clarifying question regarding the items in Section T Templates Concepts such as T Prefer the shorthand notation for simple singletype argument concepts Is it correct that these examples reflect the proposed syntax in the Concepts TS which however slightly differs from the syntax ultimately adopted for C For instance where the Concepts TS allows a shorthand syntax void sortSortable C will demand void sortSortable auto to keep the syntactic distinction between the nontemplate function sort that accepts type Sortable vs the constrained template function that constrains the type with which it may be instantiated using the Sortable concept This is based on reading that P r reflects what was will be accepted into C If my understanding is correct then should we expect future updatesclarifications regarding the relationship between the Concepts TS and C Concepts or perhaps an update to reflect C concepts I did read FAQ which makes it clear that the guidelines reflect C Concepts TS Still readers may read section T out of context when trying to learn concepts F If your function may not throw declare it noexcept Enforcement Flag throwing swap move destructors and default constructors Emphasis mine C Make destructors noexcept C Make move operations noexcept C Make swap noexcept No rule for default constructors E Destructors deallocation and swap must never fail Same Given the close relationship between the movedfrom state and defaultconstructed state it seems this guidelines missing C A polymorphic class should suppress copying is IMHO a bit off for two reasons it doesnt consider exception classes which must be copy constructible suppress copying may make the reader think they should explicitly disable copying but thats not necessary if the base class is already noncopyable So I suggest rewording the guideline to A polymorphic nonexception class should not be copyable Throughout the guidelines the expression may not is sometimes used to mean its possible that it doesnt sometimes to mean must not In fact both usages are possible in English but this ambiguity doesnt seem good for a technical document See also lt thanks Paul Smith for providing that link I suggest as a drafting rule to always avoid may not Rules I and R seem to be one and the same rule Maybe one of them should be removed The GSL section used to have an ownerT template presented which is no longer there Was there a decision to remove it at some point I kind of liked it Anyway ownerT is still being used in several places in the guidelines document P exampls I alternative I enforcement I example F title and throughout etc etc So what gives Has owner been dropped or hasnt it