What kind of issue is this Question This issue tracker is not the place for questions If you want to ask how to do something or to understand why something isnt working the way you expect it to use Stack Overflow Bug report If you ve found a bug spend the time to write a failing test Bugs with tests get fixed Here s an example X Feature Request Start by telling us what problem you re trying to solve Often a solution already exists Don t send pull requests to implement new features without first getting our support Sometimes we leave features out on purpose to keep the project small Description of the issue Im trying to achieve a scenario that is very common but with Moshi isnt so trivial as I thought Im coming from Gson that is simpler to use but Im aware of its many disadvantages I have endpoint definitions that use generic types like this GETapijson suspend fun T test ResultT This is used because ResultT contains a standard structure basically as defined below JsonClassgenerateAdapter true data class ResultT var data T null var timestamp OffsetDateTime null As you may see it is used to track common information like the server timestamp and eventually in the future may have the ID of the request to match logs or something like that But the problem is that Moshi adapter for this class isnt called how it should by Retrofit I explain below which results in this error comexamplemyapplication EMainActivity Error handling JSON data javalangIllegalArgumentException Unable to create converter for comexamplemyapplicationapiResultT for method RemoteServicetest at retrofit UtilsmethodErrorUtilsjava at retrofit HttpServiceMethodcreateResponseConverterHttpServiceMethodjava at retrofit HttpServiceMethodparseAnnotationsHttpServiceMethodjava at retrofit ServiceMethodparseAnnotationsServiceMethodjava at retrofit RetrofitloadServiceMethodRetrofitjava at retrofit Retrofit invokeRetrofitjava at javalangreflectProxyinvokeProxyjava at Proxy testUnknown Source at comexamplemyapplicationMainActivityhandleWithMoshiRetrofitConverterMainActivitykt at comexamplemyapplicationMainActivityonCreate invokeSuspendMainActivitykt at kotlincoroutinesjvminternalBaseContinuationImplresumeWithContinuationImplkt at kotlinxcoroutinesDispatchedTaskrunDispatchedTaskkt at kotlinxcoroutinesschedulingCoroutineSchedulerrunSafelyCoroutineSchedulerkt at kotlinxcoroutinesschedulingCoroutineSchedulerWorkerexecuteTaskCoroutineSchedulerkt at kotlinxcoroutinesschedulingCoroutineSchedulerWorkerrunWorkerCoroutineSchedulerkt at kotlinxcoroutinesschedulingCoroutineSchedulerWorkerrunCoroutineSchedulerkt Caused by javalangIllegalArgumentException No JsonAdapter for T with no annotations for T data for comexamplemyapplicationapiResultT at comsquareupmoshiMoshiLookupChainexceptionWithLookupStackMoshijava at comsquareupmoshiMoshiadapterMoshijava at comexamplemyapplicationapiResultJsonAdapterinitResultJsonAdapterkt at javalangreflectConstructornewInstance Native Method at javalangreflectConstructornewInstanceConstructorjava at comsquareupmoshiinternalUtilgeneratedAdapterUtiljava at comsquareupmoshiStandardJsonAdapters createStandardJsonAdaptersjava at comsquareupmoshiMoshiadapterMoshijava at comsquareupmoshiMoshiadapterMoshijava at retrofit convertermoshiMoshiConverterFactoryresponseBodyConverterMoshiConverterFactoryjava at retrofit RetrofitnextResponseBodyConverterRetrofitjava at retrofit RetrofitresponseBodyConverterRetrofitjava at retrofit HttpServiceMethodcreateResponseConverterHttpServiceMethodjava more Caused by javalangIllegalArgumentException No JsonAdapter for T with no annotations at comsquareupmoshiMoshiadapterMoshijava more Firstly I thought the problem was with Moshi generated adapter But then I made a simple test code that uses Moshi directly to parse the text and then try the same with a Retrofit call The Moshi part of handling it is a little bit confusing maybe the generated adapter code could be improved for this kind of scenarios but it works very well So I ended up thinking that this may be the way Retrofit call Moshi converter Any thoughts or ideas PS I know I could create a response model for each of my response possibilities but I really dont think that this would be a solution I dont see at least right now why Retrofit Moshi couldnt handle this kind of use case except for the fact that it isnt implemented yet which seems to be the case When I added MultiDex to the Android project In lower versions of Android like the I get the following error Edalvikvm Could not find class javalanginvokeMethodHandlesLookup referenced from method retrofit PlatforminvokeDefaultMethod Heres how I added Multiplex My gradle module defaultConfig multiDexEnabled true other code dependencies implementation comandroidsupportmultidex implementation comsquareupokhttp okhttp implementation comsquareupretrofit retrofit implementation comsquareupretrofit convertergson other code My application class public class BaseApplication extends MultiDexApplication other code My Manifest application androidnameBaseApplication other code application My retrofit clinte public class ApiClient private static final String BASEURL BaseApplicationAPIURL private static Retrofit retrofit null public static Retrofit getClient if retrofit null retrofit new RetrofitBuilder baseUrlBASEURL clientgetOkHttpClient addConverterFactoryGsonConverterFactorycreate build return retrofit public static OkHttpClient getOkHttpClient return new OkHttpClientBuilder readTimeout TimeUnitSECONDS connectTimeout TimeUnitSECONDS addInterceptornew Interceptor Override public Response interceptNonNull InterceptorChain chain throws IOException Request original chainrequest Request request originalnewBuilder methodoriginalmethod originalbody build return chainproceedrequest build Some of the solutions I found in search were Use retrofit version or below Disable Multiplex and resize the project to the point that it does not need to be multiplexed But I dont want to use these methods because I always want to use the latest version of retrofit also cannot reduce the project size It seems the newest version implementation comsquareupretrofit converterscalars has not convertFactory support Follow code val retrofit Retrofit RetrofitBuilder baseUrl addConverterFactoryScalarsConverterFactorycreate build It will report a no metafactory error if I downgrade to this code will work as well I know that Retrofit does not allow the Call without any return types developer should have to add some object in return type like GET CallResponseJsonObject checkStatusUrl String url Above is client application request checking status of data In this request client app gets two types of different responses success with body accepted without body Client app have to call this request with an interval of or n seconds whenever in response client app gets accepted response If other than it gets different status code then client app stops this calling this request So in this case client app accept return type of ResponseJsonObject In accepted response there is no body So it is gives error Retrofit error javaioEOFException End of input at line column I changed this ResponseJsonObject to ResponseObject ResponseString but still gives same above error So I solved this issue by changing return type of request from ResponseJsonObject to ResponseVoid as it is suggested here GET CallResponseVoid checkStatusUrl String url Now above request is working fine for accepted response But not working when client app gets success response in that response server sends body in it In Response object app can not gets body because of return type Void In above request of return type I use Response object like CallResponse I use this object because client app needs to check HTTP status code like etc I changed from CallResponse to CallResponseBody but it does not return status code Only CallResponse object returns HTTP status code In same request how can I handle nullempty body if I get accepted status code body data if I get success status code I know that Retrofit does not allow Call without type like CallResponseVoid or CallResponseJsonObject and is not able to map empty body but what if one of developer have above use case How can it will be solve I dont know about any standardization of accepting body only if not in is there any standard way to do this POSTdriverlogin suspend fun loginBody paramMapStringAny ResultString ex var param mapOf password to phone to serviceloginparam use MapStringAny when use it case Throwable throwabel is javalangIllegalArgumentException Parameter type must not include a type variable or wildcard javautilMapjavalangString parameter Im calling an api getting weird values returned with key values being totally mixed up On postman Im getting the correct values returned but with retrofit its not correct Postman companyLogo CompanyLogoEZYCOMP jpg Retrofit companyLog netmyappmvvm DOkHttp o I tried adding a custom converter but it does not work return RetrofitBuilder clientokkHttpclient baseUrlapiConstantsURL addConverterFactoryHtmlGsonConverter addConverterFactoryGsonConverterFactorycreategson build x Bug report If you ve found a bug spend the time to write a failing test Bugs with tests get fixed Here s an example Getting response in retrofit get url parameter whereas same get url works with httpurl connection with same configuration any idea My application is crashing when I am launching it and I can see the reason is Retrofit in Android Studio Logcat javalangNoClassDefFoundError Failed resolution of Lretrofit Platform at retrofit RetrofitBuilderinitRetrofitjava at commyappwebservicesWSClientgetRetroFitAPIListenerWSClientjava at commyappbaseMyApplicationonCreateMyApplicationkt at androidappInstrumentationcallApplicationOnCreateInstrumentationjava at androidappActivityThreadhandleBindApplicationActivityThreadjava at androidappActivityThreadwrap Unknown Source at androidappActivityThreadHhandleMessageActivityThreadjava at androidosHandlerdispatchMessageHandlerjava at androidosLooperloopLooperjava at androidappActivityThreadmainActivityThreadjava at javalangreflectMethodinvokeNative Method at comandroidinternalosRuntimeInitMethodAndArgsCallerrunRuntimeInitjava at comandroidinternalosZygoteInitmainZygoteInitjava Caused by javalangClassNotFoundException Didnt find class retrofit Platform on path DexPathList zip file dataappcommyappvSwSFvUUzjH IiAxsw SAbaseapk nativeLibraryDirectories dataappcommyappvSwSFvUUzjH IiAxsw SAlibarm systemlib systemvendorlib at dalviksystemBaseDexClassLoaderfindClassBaseDexClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava at retrofit RetrofitBuilderinitRetrofitjava at commyappwebservicesWSClientgetRetroFitAPIListenerWSClientjava at commyappbaseMyApplicationonCreateMyApplicationkt at androidappInstrumentationcallApplicationOnCreateInstrumentationjava at androidappActivityThreadhandleBindApplicationActivityThreadjava at androidappActivityThreadwrap Unknown Source at androidappActivityThreadHhandleMessageActivityThreadjava at androidosHandlerdispatchMessageHandlerjava at androidosLooperloopLooperjava at androidappActivityThreadmainActivityThreadjava at javalangreflectMethodinvokeNative Method at comandroidinternalosRuntimeInitMethodAndArgsCallerrunRuntimeInitjava at comandroidinternalosZygoteInitmainZygoteInitjava EAndroidRuntime FATAL EXCEPTION main In buildgradle I am using implementation comsquareupretrofit retrofit implementation comsquareupretrofit convertergson implementation comsquareupretrofit adapterrxjava implementation comsquareupokhttp logginginterceptor Two days ago I was able to run the application successfully after of hours effort and found success with a clean and build the Gradle answer provided here Retrofit Issue But now again I am facing this issue and cannot able to run the app from the last hours of effort which is impacting my project delivery without any cause Anyone is here who can help me asap My line of code where I am meeting this exception is public static WSClientListener getRetroFitAPIListener Retrofit retrofit new RetrofitBuilder This retrofit builder say no class deffound error baseUrlWSUtilsBASEURL clientgetHttpClientbuild addConverterFactoryGsonConverterFactorycreatenew GsonBuilder setLenient create addCallAdapterFactoryRxJava CallAdapterFactorycreate build return retrofitcreateWSClientListenerclass Documentation It would be nice if the official documentation explains how to use Retrofit together with coroutines together with the best practices regarding the asynchronous handling of requests My students need to implement their calls using Retrofit and coroutines following the tutorials in the Udacity course but for documentation Im relying on not always the best medium articles instead of official docs Kind regards Jens What kind of issue is this x Feature Request Start by telling us what problem you re trying to solve Often a solution already exists Don t send pull requests to implement new features without first getting our support Sometimes we leave features out on purpose to keep the project small img width altScreenshot at AM src it will be good if we can show where to find the new version by providing them with a link 