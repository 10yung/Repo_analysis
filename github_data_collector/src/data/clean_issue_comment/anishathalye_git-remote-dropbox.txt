I believe that today if you dont want to trust the cloud with your source code you really cant use github gitlab vso bitbucket or even dropbox because if you dont want your source code outside your premises then it limits your options to zero But what if you were to perform client side encryption such that it was transparent to the git user Ideally this would be done to a filesystem that git talks to locally and what gets pushed the cloud doesnt even look like a git repository This as opposed to using an existing git repository and then performing clientside encryption to the individual files It seems to me that gitremotedropbox is in a unique scenario Since its already providing its own protocol it can and does store the actual files in any way that they like So if it encrypted the data with the private key being local you can truly store stuff on the cloud that cannot be looked at by anyone other than someone who has a private key Dropbox is pretty good for hosting large files It would be really cool if we could support something kind of like gitlfs in gitremotedropbox and provide a really nice seamless user experience We currently store all objects as loose objects on the remote This means that theres no delta compression I havent thought of a storage format and purely clientside protocol that allows for packing delta compression similar to gits ondisk format It would be super cool if it is possible to do this because thatll mean that repositories will consume a lot less space on Dropbox We dont do any garbage collection on the remote so any dangling objects will remain on the remote I havent figured out a way to do this that works on the client side and is safe with regards to concurrent operations As a first step it might be nice to write a separate script that performs GC on the remote thats only meant to be used when there are no concurrent operations This should be pretty easy to write essentially git lsremote then git revlist objects for all the SHAs and then delete whats not listed After that it might be nice to investigate if its possible to design the remote helper so that it can perform GC Currently we dont support the dryrun option Its worth investigating to see if its possible without too much work Currently we dont support shallow cloning Its worth investigating to see if its possible to do this without too much work Currently setting up gitremotedropbox involves creating a Dropbox API app and then generating an OAuth token for it This takes about a minute to do and its a onetimething but it would be good if it could be streamlined to take even less time It would be great if the helper could prompt the user to go through some kind of OAuth setup flow Doing this in such a way that we dont have to hardcode API app secrets would be great Im not sure if its possible though Were already pretty good about figuring out which objects the remote is missing see the design document but we dont actually verify that every object were uploading is actually missing from the server Doing an extra round trip to the server to check if the file is already present isnt a great idea But unnecessarily uploading a large file isnt a great idea either If we could write files in a way such that we abort writing if theres a conflict that would be great Because git objects are contentaddressed if theres a conflict that means the object already exists on the remote It may be the case that the add write mode behaves the way we want failing fast when a file already exists 