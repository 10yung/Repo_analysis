rust let auth hello let span spanLevelINFO auth let span spanenter dosomething fn dosomething let span Spancurrent How to get field auth value from span Feature Request Crates This would probably be a new subscriber implementation Motivation Apple has a builtin OS facility for adding spans that show up when profiling in Instruments signposts this is a video API documentation is here Proposal It would be great to have an adapter to turn tracing spans into signposts so that we could reuse tracing annotations to get useful profiler data Alternatives It looks like pcwalton has some existing code in this area although it seems to be using a lowerlevel API and Im not sure if its compatible with the new OS facilities Feature Request Motivation Im writing a rd party library for instrumenting programs with tracing spans that I would like to be able to test using the tracing test framework without having to vendor the test framework or write my own test subscriber Proposal Publish the contents of tracingtracingtestssupport and any other necessary machinery so that they can be added as a dev dependency to spandoc and tests can be created that verify span entry and exit ordering It is not necessary for the tracing crates themselves to depend on the published version via cratesio Eliza has some worries about introducing a need to maintain API stability into the test framework not depending on the published version should make this a less important concern its okay if the published version drifts from the actively used version by the main tracing crates so long as the core functionality that is published to cratesio still works Alternatives Alternatively I can just vendor support files into my crate and depend on them in the same way that tracing crates do Bug Report Version tracingsubscriber Platform Linux bit Description I am getting the following build error error E failed to resolve maybe a missing crate EnvFilter tracingsubscriber srcfmtmodrs withenvfiltercrateEnvFilterfromdefaultenv maybe a missing crate EnvFilter That happens with toml tracingsubscriber version defaultfeatures false features chrono fmt I have to add the envfilter feature to make it go away Feature Request Crates tracing root readme Motivation Now that weve added a lot of usage examples to the repo root and tracing crates README files theyve started to get quite long Proposal Maybe we should add a table of contents with links to the different sections Alternatives Alternatively we couldnot do this Bug Report Thank you for reporting an issue Please fill in as much of the template below as youre able Version tracingsubscriber v alpha Platform Linux linuxbox generic Ubuntu SMP Tue Nov UTC x x x GNULinux Description There seems to be a memory leak or something that looks like a memory leak that is related to tracingsubscriber Here is a screenshot of heaptrack with an app that heavily uses tracing Several of the growing wedges seem to be related to tracing Eg and Is it possible that there is some perspan data that is not being properly cleaned up Even if this is not a real memory leak but just something that will grow until there is memory pressure it makes it very difficult to find the real memory leak I will remove all tracing spans again and check if this makes a difference WRT mem usage Bug Report Version tracing tracinglog tracingsubscriber Platform Darwin xxxxxlocal Darwin Kernel Version Sat Oct PDT rootxnu RELEASEX x Crates tracingsubscriber Description Ive just migrated from log and envlogger to use tracing instead and Ive found that the way RUSTLOG is parsed is not the same between the two Specifically the following RUSTLOGdebugtokiopostgresinfohyperserverresponseinfo Means With envlogger treat all loggers as DEBUG except for tokiopostgres and hyperserverresponse With EnvFilterfromdefaultenv treat all loggers as DEBUG This then overrides the explicit setting of INFO for the other two so they are DEBUG as well Resolves Currently spans and events can only be enableddisable on a global subscriber basis This PR adds perlayer filtering in tracingsubscriber which means that layers can conditionally filter spans and events without impacting others layers In practice this enables layers to conditionally filter on metadata like source and levels and forward those spans and events to different outputs sinks This also allows for the creation of sampling or ratelimiting filters With this PR customers will be able to write something like rust let errfilter FilterFnnewmetadata metadatalevel LevelWARN metadatalevel LevelERROR let infofilter FilterFnnewmetadata metadatalevel LevelINFO let err fmtLayerbuilder withwriteriostderr finish let info fmtLayerbuilder withwriteriostdout finish let subscriber Registrydefault withinfowithfilterinfofilter witherrwithfiltererrfilter tracingsubscribersetglobaldefaultsubscriberexpectUnable to set global subscriber Still to do Documentation Examples Implementing all of Layers methods on Filtered Feature Request Crates tracingsubscriber Motivation Im implementing a Subscriber similar to Formatter in many ways and would like to reuse the span allocation it makes use of in spanStore Proposal Is it safe to expose these types as directly usable That would probably be my preference to avoid having to implement my own slablockingetc setup Alternatives Is it possible to imagine a version of the crate where all IO is done in layers separately from the span and metadata management Maybe Subscriber could be blanket impld for structs that implement some smaller trait named something like Storage Motivation Some embedded platform do not have support for threadlocal Solution I believe its okay to use a static mut var instead This is hidden behind an unsafeglobal feature