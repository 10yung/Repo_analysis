Examples and from the spec are ignored in the test suite however if they are removed from this list they pass Is there another reason that they are ignored Found this while modifying the tests for The current implementation incorrectly parses examples and in the spec rust test fn ex use yamlrustYamlLoader let docs YamlLoaderloadfromstr tbunwrap asserteqdocs asvecunwrap asstrunwrap b thread ex panicked at assertion failed left right left tb right b src mainrs Looking at the tests I see this file which appears to be generated from this file However much of the information tested by the C tests is lost in this transformation Most notably the contents of scalar values and tags are not tested Is there a reason for this I think it would be nice to see this information included in the tests performed by the crate Im guessing this is due to technical difficulties with parsing the arguments in the conversion script andor converting them from C syntax to rust while trying to think through how I could implement this I found it also unclear why untagged values in the C tests sometimes have a tag of and other times a tag of Ahh thats covered in section Resolved Tags of the spec Currently tags are only emitted on Scalar events and not on MappingStart or SequenceStart This in turn leads to a shortcoming in serdeyaml where tags cannot be used on arraylike variants of an enum yaml vec Notice that libyaml supports tags on all three of these events This will be a breaking change as it will require adding new fields to pub enum Event Would you consider supporting YAML comments with this library It does appear to be a feature of Gos YAML library for example and would be helpful when wanting to edit YAML files whilst preserving comments Fixes It also fixes the issue where clippy wasnt available on some nightlies so this got ran sporadically by using the new rustup feature to give us the latest nightly that has clippy in it The build is still failing but thats fixed by Fix spelling in several places mostly variable names error string literals and documentation although one test function was renamed In certain situations yamlrust fails to handle strings starting with a UTF encoded byte order mark Plenty of software such as notepadexe inserts BOMs automatically so I think its something yamlrust should be aware of Currently yamlrust scans like this ufefftest Scalar ufefftest Scalar ufeff n ntest Scalar ufeff DocumentStart Scalartest Scalar ufeff ntest ScanErrormapping values are not allowed in this context All but the last one parse successfully Im not sure exactly what the correct behavior is here but I dont think we can push the burden of sanitization onto users Thoughts Hi I want to leverage yamlrust to open modify and save Unity scene files Out the gate Ive hit multiple issues Cant parse common scene files This is due to the error mapping values are not allowed in this context at line column Scene files frequently contains lines such as this u stripped This is apparently a common issue This may be invalid YAML Im not sure Missing tag support Unity makes heavy use of document tags If yamlrust can load a unity scene file then emitting it back out drops all of the document tags This is a catastrophic failure u Different emitter style Unitys YAML is compact mLocalPosition x y z yamlrust is not mLocalPosition x y z Number may be invalid YAML syntax in which case it should probably be handled separately and more explicitly But and seem like they should be correct to fix