In Ubuntu I compiled a simple binary as follows cat etcosrelease grep PRETTYNAME PRETTYNAMEUbuntu gcc pg g o tabc sabcc gcc pg g fnoplt o tabcnoplt sabcc Their tracing result is different and uftrace cannot trace library calls for fnoplt compiled binary uftrace F main tabc DURATION TID FUNCTION main a b c us getpid us c us b us a us main uftrace F main tabcnoplt DURATION TID FUNCTION main a b us c us b us a us main It makes t nopltlibcall failed diff runtestpy vdp O t nopltlibcall diff result of pg O expect result b c getpid c c b nopltlibcall NG Here is GCC compiler info gcc v Using builtin specs COLLECTGCCgcc COLLECTLTOWRAPPERusrlibgccx linuxgnu ltowrapper OFFLOADTARGETNAMESnvptxnone OFFLOADTARGETDEFAULT Target x linuxgnu Configured with srcconfigure v withpkgversionUbuntu ubuntu withbugurlfileusrsharedocgcc READMEBugs enablelanguagescadacgobrigdfortranobjcobjc prefixusr withgccmajorversiononly programsuffix programprefixx linuxgnu enableshared enablelinkerbuildid libexecdirusrlib withoutincludedgettext enablethreadsposix libdirusrlib enablenls enablebootstrap enableclocalegnu enablelibstdcxxdebug enablelibstdcxxtimeyes withdefaultlibstdcxxabinew enablegnuuniqueobject disablevtableverify enablelibmpx enableplugin enabledefaultpie withsystemzlib withtargetsystemzlib enableobjcgcauto enablemultiarch disablewerror witharch i withabim withmultiliblistm m mx enablemultilib withtunegeneric enableoffloadtargetsnvptxnone withoutcudadriver enablecheckingrelease buildx linuxgnu hostx linuxgnu targetx linuxgnu Thread model posix gcc version Ubuntu ubuntu This PR contains various script fixes including build Fix withoutlibpython for python script Show an warning if interpreter is not available tests Fix script engine tests Signedoffby Honggyu Kim honggyukpgmailcom This PR mainly fixes the problems when testing i under x It fixes tests in i under x environment fulldemangle NG NG NG NG NG NG NG NG NG NG argint NG NG NG NG NG SK SK SK SK SK retval NG NG NG NG NG SK SK SK SK SK argorder NG NG NG NG NG SK SK SK SK SK argfloat NG NG NG NG NG SK SK SK SK SK argmixed NG NG NG NG NG SK SK SK SK SK argstack NG NG NG NG NG SK SK SK SK SK argvariadic NG NG NG NG NG SK SK SK SK SK It fixes tests in arm bit environment mallocimpl TM TM TM TM TM TM TM TM TM TM argint NG NG NG NG NG SK SK SK SK SK retval NG NG NG NG NG SK SK SK SK SK argorder NG NG NG NG NG SK SK SK SK SK mallochook TM TM TM TM TM TM TM TM TM TM malloctsd TM TM TM TM TM TM TM TM TM TM mallocfork TM TM TM TM TM TM TM TM TM TM Fixed Signedoffby Honggyu Kim honggyukpgmailcom Here is a test program c cat floatc include stdioh float floataddfloat a float b fprintfstderr a f b f n a b return a b int mainint argc char argv double a a floatadd return a It shows floating point numbers in normal execution gcc pg g floatc file aout aout ELF bit LSB executable ARM EABI version SYSV aout a b It also shows correct numbers with simple uftrace record execution uftrace record nolibcall noevent aout a b uftrace record nolibcall noevent debugdomain uftrace aout uftrace checking binary aout uftrace removing uftracedataold directory uftrace creating threads for recording uftrace using homehonggyuusrliblibmcountso library for tracing a b uftrace child terminated with exit code uftrace reading uftracedatatasktxt file uftrace flushing uftrace a d c However the floating point numbers are somehow printed incorrect values if uftrace tries to record an argument uftrace record A floataddfparg nolibcall noevent aout a b uftrace replay DURATION TID FUNCTION main us floatadd us main The result is same with autoargs uftrace record a nolibcall noevent aout a b Hey before talking about the commit details I want to wish you all the joy of a Happy New Year This commit is about saving RFLAGS in stack prior to calling mcountentry and similar functions that could change it GDB and other tracingdebugging tools save it as well I only modified these files for tonight archx mcountS archx dynamicS archx fentryS The ones left for x are xrayS cygprofile and plthookS namhyung Thank you for your review Ill update the ones left in parallel with the review line EDIT Im not really sure about the need to save the flag for PLT hooks Here is the test result in i diff runtestpy vdp O t demangle diff result of pg O m expect result main libcstartmain demangle NG Here is the test result in ARM bit diff runtestpy vdp O t demangle diff result of pg O expect result main c demangle NG There are many argument test failures in i arch argint NG NG NG NG NG SK SK SK SK SK retval NG NG NG NG NG SK SK SK SK SK argorder NG NG NG NG NG SK SK SK SK SK argfloat NG NG NG NG NG SK SK SK SK SK argmixed NG NG NG NG NG SK SK SK SK SK argreg NG NG NG NG NG SK SK SK SK SK argstack NG NG NG NG NG SK SK SK SK SK argvariadic NG NG NG NG NG SK SK SK SK SK The test was done with compiling uftrace as follows ARCHi CFLAGSm LDFLAGSm configure make The runtestpy has to be modified to compile target programs in i mode as follows diff diff git atestsruntestpy btestsruntestpy index a ab atestsruntestpy btestsruntestpy class TestBase defaultcflags fnoinline fnobuiltin fnoipacp fnoomitframepointer DFORTIFYSOURCE defaultcflagsappendm def initself name result langC cflags ldflags sorttask serialFalse tmp tempfilemkdtempprefixtests name Here are the test details diff runtestpy vdp O t argint diff result of pg O m expect result intsub intmul intmul intdiv argint NG diff runtestpy vdp O t retval diff result of pg O m expect result intsub intmul intmul intdiv retval NG diff runtestpy vdp O t argorder diff result of pg O m expect result intsub intmul x intmul intdiv argorder NG diff runtestpy vdp O t argfloat diff result of pg O m expect result floatsub floatmul floatdiv floatmul floatdiv main argfloat NG diff runtestpy vdp O t argmixed diff result of pg O m expect result main mixedadd mixedadd nan mixedsub x x ff mixedmul mixeddiv mixedmul mixeddiv nan mixedstrargument return argmixed NG diff runtestpy vdp O t argreg diff result of pg O m expect result main mixedadd mixedsub x mixedmul mixeddiv mixedstrargument mixedadd mixedsub mixedmul mixeddiv nan mixedstr main argreg NG diff runtestpy vdp O t argstack diff result of pg O m expect result foo many many pass argstack NG diff runtestpy vdp O t argvariadic diff result of pg O m expect result main variadicprint c s d ld lu lld f a hello variadicprint c s d ld lu lld f a hello vsnprintf print c s d ld lu lld f argvariadic NG It might be failed to find a correct python version used for scripting Its because python version is found by the python binary but not by finding python library actually used The current implementation finds python version as follows python c import sysconfig printsysconfiggetconfigvars LDVERSION m However python config finds different version This patch is to find the correct version by parsing the output of python config libs python config libs sed sl python m g python m python config libs sed sl python m g python m This might be a corner case fix but to support many more different environments Signedoffby Honggyu Kim honggyukpgmailcom This patch is to fix the following crash uftrace script S scriptscountpy record tabc WARN libpython mso cannot be loaded Segmentation fault core dumped Signedoffby Honggyu Kim honggyukpgmailcom The following example records library calls of uftrace itself uftrace record force uftrace nopager tabc DURATION TID FUNCTION us monstartup us cxaatexit main a b c us getpid us c us b us a us main The following example only wants to record arguments of uftrace itself not the arguments of target tabc binary But it fails as follows uftrace record force a uftrace nopager tabc DURATION TID FUNCTION us monstartup us cxaatexit fstack homehonggyuworkuftraceutilsfstackc readtaskustack ERROR record missing argument info for getpid Its because UFTRACE related environmental variables are passed unexpectly so we need to reset all the environmental variables when new uftrace is started