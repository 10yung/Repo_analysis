It seems to me that lithtml or litelement polymer etc Are addressing roughly the same space Can someone please summarize the difference in terms of performance I get that its a different API more thinking about raw bottleneck issues Thanks Started implementing incrementaldom into twing and now finished the first kinda working version I know there are many things wrong with the current implementation Let me know what you think about the concept of having twingtwig and incrementaldom combined Official Twing package Modified Twing package or Playground It would be great to have a module build that can be run directly in the browser For quick demos and experimentation I dont want to set up a bundler dy already started working on this here It would be nice to give the engine a window element which it should render from Hello Im using IDOM to manipulate my HTML DOM which works perfectly fine Here is a code snippet to illustrate my point The main page The static one html DOCTYPE html html langen head meta charsetUTF meta nameviewport contentwidthdevicewidth initialscale meta httpequivXUACompatible contentieedge titleSome Titletitle head body div idappdiv body html Now when the user hits the home page the app gets the following component content homepagecomponenthtml html div classcontainer h Welcome Homeh helloworldformhelloworldform div helloworldcomponenthtml html form submitthissubmitFormel input typetext nameusername value thisusername form Im using Twoway data binding which is applied in the username input as when the thisusername property is changed the input value is changed as well and vice versa When any change happens to any property ie thisusername i rerun the patcher from the homepagecomponenthtml as it will go through all elements from the top the helloworld component is removed and its content is added instead For example the actual output in the browser will be something like html div classcontainer h Welcome Homeh form submitthissubmitFormel input typetext nameusername value thisusername form div Now my question As i mentioned earlier im applying the patch function to my app tag which contains the content of the homepagecomponenthtml file Should i leave the helloworld tag in the dom and apply the patch function to that element ie the dom will look like html div classcontainer h Welcome Homeh helloworld form submitthissubmitFormel input typetext nameusername value thisusername form helloworld div Or leaving the patch function to the app element Using an Object form to trigger prop over attribute setting doesnt work with Boolean objects because they always resolve to true when applied to boolean DOM properties expecting native booleans such as checkboxchecked a new Boolean false consolelog a outputs true consolelog avalueOf outputs false By adding something like this to the inside of setProp this can be easily resolved Convert Boolean objects to native boolean values if value instanceof Boolean value valuevalueOf Hey guys The section of elementVoid has some incorrect information Description A combination of elementOpen followed by elementClose and Usage import elementClose from incrementaldom Since im new here so i dont know how to fix For now elementOpen supports custom element tag names but what if its required to create custom element extended from builtin Like in this example from MDN js let el documentcreateElementul is expandinglist That seems to be not implemented Is there any possible workaround or solution to that Tricks in notificationsnodesAdded Any hope that will ever get added Running npm audit for this library currently produces the following output npm audit security report Run npm update jsyaml depth to resolve vulnerabilities Moderate Denial of Service Package jsyaml Dependency of npmcheck dev Path npmcheck depcheck jsyaml More info Moderate Denial of Service Package jsyaml Dependency of npmcheck dev Path npmcheck preferredpm whichpm loadyamlfile jsyaml More info High Code Injection Package jsyaml Dependency of npmcheck dev Path npmcheck depcheck jsyaml More info High Code Injection Package jsyaml Dependency of npmcheck dev Path npmcheck preferredpm whichpm loadyamlfile jsyaml More info Run npm update lodash depth to resolve vulnerabilities High Prototype Pollution Package lodash Dependency of bazelkarma dev Path bazelkarma karma lodash More info High Prototype Pollution Package lodash Dependency of bazelkarma dev Path bazelkarma karmasaucelauncher sauceconnectlauncher lodash More info High Prototype Pollution Package lodash Dependency of eslint dev Path eslint lodash More info High Prototype Pollution Package lodash Dependency of karma dev Path karma lodash More info High Prototype Pollution Package lodash Dependency of mocha dev Path mocha yargsunparser lodash More info High Prototype Pollution Package lodash Dependency of npmcheck dev Path npmcheck callsiterecord lodash More info High Prototype Pollution Package lodash Dependency of npmcheck dev Path npmcheck depcheck lodash More info High Prototype Pollution Package lodash Dependency of npmcheck dev Path npmcheck inquirer lodash More info High Prototype Pollution Package lodash Dependency of npmcheck dev Path npmcheck lodash More info High Prototype Pollution Package lodash Dependency of sinon dev Path sinon nise sinonjsformatio sinonjssamsam lodash More info High Prototype Pollution Package lodash Dependency of npmcheck dev Path npmcheck depcheck babeltraverse babeltypes lodash More info High Prototype Pollution Package lodash Dependency of npmcheck dev Path npmcheck depcheck babeltraverse lodash More info Is it possible to have these dependencies updated to remove some or all of the vulnerabilities Apparently Angulars new render engine to be released within the next months will be based on incremental dom the approach not this library Given that this project is not really being updated and that there is no official template supporting for it because it cannot be built outside of the internal Google repo would this mean that future projects in Google who would want to use the incremental dom approach would choose Angular leaving this project obsolete If Angular comes with everything that incrementaldom library can do and it is lightweight enough I do not see why not