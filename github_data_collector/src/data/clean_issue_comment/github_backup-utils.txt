In GHE the removal of the MySQL stored audit logs code will complete This PR deletes the code that was added to backuputils in to support audit logs in MySQL Note that this can only be merged into master once is released In order to avoid issues with the absence of the auditentries table in certain scenarios Do not try to backup the table if it doesnt exist Do not try to restore the schema if the snapshot doesnt contain one This PR backports to stable In order to avoid issues with the absence of the auditentries table in certain scenarios Do not try to backup the table if it doesnt exist Do not try to restore the schema if the snapshot doesnt contain one it might be useful to see how long a restore takes Therefore it would be helpful if the gherestore command could print out a timestamp at the beginning and the end of the run Something like Checking for leaked keys in the backup snapshot that is being restored No leaked keys found Connect githubsuperservercom OK v WARNING All data on GitHub Enterprise appliance githubsuperservercom v will be overwritten with data from snapshot T Please verify that this is the correct restore host before continuing Type yes to continue yes Starting restore of githubsuperservercom with backuputils v from snapshot T Start time Stopping cron and githubtimerd Restoring UUID Restoring MySQL database Restoring Redis database Restoring Git repositories Restoring Gists Warning Gist backup missing Skipping Restoring GitHub Pages Restoring SSH authorized keys Restoring storage data Restoring custom Git hooks Restoring Elasticsearch indices Restoring Audit logs Restoring hookshot logs Configuring appliance Starting cron Restoring SSH host keys End time Runtime h Restore of githubsuperservercom from snapshot T finished There is no warning reported when backing up an appliance where pages is disabled however when restoring this backup to a staging instance the following warning is reported Restoring GitHub Pages Warning Pages backup missing Skipping Is it possible for us to not report this as a warning if it is know that pages is disabled As someone who went through this process for the first time I wanted to make note of some things in the guide that I was confused by and propose some wording that might help save others from questions Added note about creating a new backupconfig file example command to do that Added for running those ghe commands cc skhalife glennwester nielspineda Right now a restore attempt of an incompatible backup version eg ghe gbu backup of version can fail during the restore at some point Compatiblity should be checked before anything is restored and the utility should fail I picked the checked versions somewhat arbitrarily based on the versions shipped with Debian Stretch The intention is to encourage users to update If these versions are not met then everything works as before as we only print a warning if the versions are not met Please note This commit introduces Perl as dependency However this should not be a problem as Git depends on Perl as well Since Git is required by backuputils we can assume that Perl is installed on the backup host When looking at why our GHE backups were taking so long I noticed that various operations are CPU constrained on gzip compressiondecompression For example when dumping the MySQL database I witnessed the MySQL process consume minutes of CPU time total and the gzip process it was piping to consuming minutes of CPU time Put another way if the compressor could ingest the line speed that MySQL dumping is capable of emitting GHE backups would complete minutes faster on this instance on just the MySQL data bits alone On the decompression side the MySQL archive consumed minutes of CPU time with gzip Large backup operations could be substantially faster if a modern faster compression library were used I personally recommend zstd which yields better and faster compression than zlibgzip at defaultnormal compression levels I zstd compressed the MySQL dump of our GHE instance using level the default and the resulting archive was the size of the gzip version and took far less CPU to compress On the decompression side it required s of CPU versus s In summary various GHE backup operations are CPU constrained by gzip compression Replacing gzip with something more modern like zstd will make these operations faster substantially so on larger GHE instances