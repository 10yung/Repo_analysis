I have a directory which contains other directories which contain proto files In the end I want to have generated rs files from that proto files in folder In the examples I see I need to manually add all the protobuf files this isnt really what I want because that is too much handwork Is it possible to just say this is a directory find and generate all rs files and put them into the output directory The Chars struct cant use the serde Serialize or Deserialize traits Ive uploaded a repo to show what Im doing that causes the issue It includes the proto file protouserproto the generated file srcuserrs and the build script that converts them The issue is this cargo check Compiling protobufbug v protobufbug error E the trait bound protobufcharsChars serdeSerialize is not satisfied srcuserrs cfgattrfeature withserde deriveSerialize Deserialize the trait serdeSerialize is not implemented for protobufcharsChars note required by serdeserSerializeStructserializefield error E the trait bound protobufcharsChars serdeDeserialize is not satisfied srcuserrs cfgattrfeature withserde deriveSerialize Deserialize the trait serdeDeserialize is not implemented for protobufcharsChars note required by serdedeSeqAccessnextelement error E the trait bound protobufcharsChars serdeDeserialize is not satisfied srcuserrs cfgattrfeature withserde deriveSerialize Deserialize the trait serdeDeserialize is not implemented for protobufcharsChars note required by serdedeMapAccessnextvalue error aborting due to previous errors For more information about this error try rustc explain E error could not compile protobufbug To learn more run the command again with verbose System info protoc version libprotoc uname a Linux amd SMP Debian x GNULinux Turning off the CarlLercheBytes option for Strings fixes the issue but then youre not using bytes for strings anymore Hi Could you please let me know how to get EnumDescriptor and MessageDescriptor since they are removed latest master branch Thanks so much C The standard protobuf implementation provides methods to pack and unpack Any values These methods automatically set and check the typeurl field protobuf release has broken prometheus Could you yank it and rerelease it as cpp googleprotobufDescriptor desc googleprotobufDescriptorPoolgeneratedpool FindMessageTypeByNamemypkgMyType googleprotobufMessage message googleprotobufMessageFactorygeneratedfactory GetPrototypedescNew how can i create a Message instance by mpkgMyType thanks a lot Im working with hundreds of proto files so its not practical for me to manually set up a module hierarchy to mirror the protobuf package hierarchy Some of these proto files have the same name as others So even if I did something in my buildrs like suggested here then Id still run into trouble with the output What Id really like is an option in protobufcodegenpure controlled via Customize to automatically generate a directory hierarchy and Rust module hierarchy to match the protobuf package hierarchy If youre open to the idea I could take a swing at implementing this First of all thanks for this great repository stepancheg I find my self wanting to implement the enum slightly differently for some reasons simplified match unknown value from future proto definition expansion is kept something like rust pub enum EnumType UNKNOWN VALUE VALUE Undefinedi impl protobufProtobufEnum for EnumType fn fromi value i EnumType match value EnumTypeUNKNOWN EnumTypeVALUE EnumTypeVALUE i EnumTypeUndefinedi So in the place where I want to match the emun value instead of matching for option as well as the enum I can just do rust fn dosomething match propertyenumtypevalue EnumTypeUNKNOWN EnumTypeVALUE EnumTypeVALUE EnumTypeUndefinedi printlnformatundefined enum type value i compares to rust fn dosomething match propertyenumtypevalue Somevalue match value EnumTypeUNKNOWN EnumTypeVALUE EnumTypeVALUE None printlnundefined enum type value and it is lost Im new to rust so the code gen macro is a bit overwhelming to me I could not figure out where I can try this change unfortunately I think this implementation certainly simplifies the usage of enum utilising of the more powerful rust enum compares to other languages and makes the generated code more future prove following the same concept how protobuf definition can be expanded Thanks When using codegen to generate codes it can fail on windows platform when the input protos are scanned instead listed by hand file not found in file descriptors grpctesting controlproto files grpctestingpayloadsproto grpctestingstatsproto grpctestingcontrolproto grpctestingemptyproto grpctestingmessagesproto grpctestingservicesproto grpctestingtestproto src libcore optionrs stack backtrace stdsyswindowsbacktracesetframes at rustca f df fbb b f caaad f a f ea c src libstd sys windows backtrace modrs stdsyswindowsbacktraceunwindbacktrace at rustca f df fbb b f caaad f a f ea c src libstd sys windows backtrace modrs stdsyscommonbacktraceprint at rustca f df fbb b f caaad f a f ea c src libstd syscommon backtracers stdsyscommonbacktraceprint at rustca f df fbb b f caaad f a f ea c src libstd syscommon backtracers stdpanickingdefaulthookclosure at rustca f df fbb b f caaad f a f ea c src libstd panickingrs stdpanickingdefaulthook at rustca f df fbb b f caaad f a f ea c src libstd panickingrs stdpanickingrustpanicwithhook at rustca f df fbb b f caaad f a f ea c src libstd panickingrs stdpanickingcontinuepanicfmt at rustca f df fbb b f caaad f a f ea c src libstd panickingrs stdpanickingrustbeginpanic at rustca f df fbb b f caaad f a f ea c src libstd panickingrs corepanickingpanicfmt at rustca f df fbb b f caaad f a f ea c src libcore panickingrs coreoptionexpectfailed at rustca f df fbb b f caaad f a f ea c src libcore optionrs coreoptionOptionprotobufdescriptorFileDescriptorProtoexpectprotobufdescriptorFileDescriptorProto at rustca f df fbb b f caaad f a f ea c src libcore optionrs protobufcodegengen at C Users travis cargo registry src githubcom ecc db ec protobufcodegen src librs protobufcodegengenandwrite at C Users travis cargo registry src githubcom ecc db ec protobufcodegen src librs Developer may not have protoc installed bundle binaries inside the crate can solve a common compilation error that protoc is missing