Handling requests from an upstream server or tor is a must If the upstream server is local it becomes encumbering to use ports on a localhost interface for IPC Enter Unix Domain Sockets I would like to build a simple file server returning a html file with a directory tree but I cant find how I can make a route that takes a path with in it rust routerrequest GET path PathBuf handlepathpathaspath Responseempty This route does not seem to match something like localhost srcmainrs I would like to have several deep directories in my server root so I would like to extract a full path from a route url How would I do this with rouille Recent Rust version marked the try macro as deprecated This patch replaces all usages of the try macro with the recommended question mark operator This PR removes the unused dependency on term which is no longer maintained and has a RUSTSEC advisory Having the term dependency causes warnings when running cargo audit in reverse dependencies Closes In Rust it is generally preferred to write use statements to import macros Due to the implementation details of the macros in rouille using cratelocal macros within macros it is currently impossible to import them that way There are two ways to fix this To stay compatible with Rust versions below localinnermacros To be futureproof crate Im unsure which option would be more suitable for rouille but I am willing to implement either of these changes Edit Just realized that the minimum Rust version for this project is already above The router macro expands to a series of if statements instead of an if else if else chain or a match statement This means that the compiler cannot tell that only a single handler can run and so the compiler will complain about values being used multiple times if they are moved into route handlers The threadpool crate has a lot of overhead Consider switching to something like uvth Fixes A basic requirement to run a web server in production is to be able to stop handling new requests but continue processing inflight requests to completion This way you can spin up a new version switch requests to it and then gracefully shutdown the old one Now that polltimeout exists the only missing piece is a join method to join the underlying executor For the threadpool executor this is trivial as it has a join method for the thread executor it would need to start keeping around JoinHandles