 Does your log mention database corruption no Please do post actual bug reports and feature requests When running the container image without setting the STGUIADDRESS variable the container logs INFO Access the GUI via the following URL This looks like the socket is bound to localhost but it is not in the image by default This is in my opinion misleading Version Information Syncthing Version syncthing v Fermium Flea go linuxamd dockersyncthingnet UTC OS Version CentOS Browser Version if applicable for GUI issues Sometimes Out of sync List overflows b f f c eff ff a a ab Looks like the first filename is too long v Linux bit Chrome Summary Restoring deleted file versions via the web UI works but in some cases it wrongly shows an error that it didnt work Steps to reproduce The wrong error is not shown in all cases and Im not sure what makes the cases when it is shown special But if it is happening it is quite simple to reproduce Select one or more files to restore via the web UI and confirm An error is shown that renaming didnt work for each file although all of them could be restored eg Screenshot Screenshot With could be restored I mean that the files were under stversions before trying to restore them Syncthings versioning put them there as expected After restoring the files they are again under their old location as expected Expected behavior The dialog is just closed unless restoring actually didnt work Further information The full error message C P from the web browser to see the full paths looks like this Some items could not be restored archownstuffexperimentalosx mingww qt d x pkgtarxz rename runmediadevelrepostversionsarchownstuffexperimentalosx syncthingmingww qt d x pkgtarxztmp runmediadevelrepostversionsarchownstuffexperimentalosx mingww qt d x pkgtarxz no such file or directory So apparently theres some intermediate file called syncthingtmp involved Not sure whether thats supposed to happen or not In theory it should be possible to rename the file runmediadevelrepostversionsarchownstuffexperimentalosx mingww qt d x pkgtarxz directly right The Syncthing log doesnt contain anything related Further UI issues One screenshot looks also darkened as if a modal dialog was still open However I could reproduce this problem only once and it is likely just some weird bootstrap problem Id rather not elide the text of such error messages and instead just wrap it or show a scroll bar Otherwise one has to C P the message to get the full information which is quite inconvenient Version Information Syncthing Version v Environment Arch Linux using official Go package x ext file system What happened looked at text file using Markor on Android device saw was old version looked at syncthing on same Android device was working fine but may have been dormant not synced for a while due to power saving or other Android feature looked at text file using Markor on same Android device not changed looked at text file on PC latest file is overwritten by old version and no conflict file present What you expected to happen instead conflict detected with a copy of the latest text file Any steps to reproduce the problem I think this has happened before to me I assume but would need help to capture logs etc Is Android Syncthing dormant and does not see the new version Does Markor write to the old file when it is opened Perhaps Syncthing on Android treats the old file as a new change Maybe Syncthing on PC does not know that Android has not taken the latest version but assumes if has Comment If long time dormant syncthing devices come on line and offer touched files since their last sync do they by design overwrite without conflict detection other files more recently synced but older touch times Version Information Syncthing Version v OS Version Linux bit generic Ubuntu SMP Thu Nov UTC x x x GNULinux Browser Version na Android Syncthing December Related Im not proposing this as a production change just putting it out there for discussion Our leveldb implementation has sometimes worried me in terms of lack of transaction support and in some cases less than responsive maintainership I wanted to try Badger and see what happens and Ive been running with it myself for a couple of months now There are no performance advantages that Ive been able to measure on the contrary its a little bit slower and uses more memory It has real transactions though As long as big files synchronization especially initial one is IOintensive task Id like to see IO hard drive utilization in the Web UI along the CPU and memory lines Purpose Implement native browser push notifications on some import events See Status For now notifications are handled clientside the tab must be always open to receive notifications Events As discussed here some events need to be notified to user Here the status of implementation Event Status Comments GUI looses connection to Syncthing Also notify when connection is restored A error has occurred on the GUIside eg parsing error when reading the JSON returned by Syncthings API Same as network connection losing A notification has been emitted through Syncthings API yes theres already an API for that x The synchronization of a local folder has been completed The synchronization of a remote folder on device X has been completed x A new device wants to connect x A device wants to share a folder x Global x Add option in setting panel Make notifications messages translatable Screenshots screencapture Testing First you need to enable notifications in settings panel as show in the screenshot above I your browser doesnt support push notification or youve blocked them the checkbox is disabled A notification is shown when The GUI lost connection with the server turn off the server The GUI restore the connection with the server turn back on the server A local folder finish syncing Add a file on another device in the shared folder Ive drafted this PR to have feedback on implementations and priorities before going too deeper in it Ill be happy to here back from you about this feature When pulling we go once over all needed files in the db and then at various later points do lookups in the db In the meantime changes may happen eg thats the only explanation I have for This PR moves db access through dbFileSet to dbSnapshot which can be obtained from dbFileSet The huge diff on lowlevelgo and transactiongo is just copying over the methods that created a transaction at the beginning to actually be methods on transactions themselves Maybe it would be worth keeping utility functions on dbFileSet that allow access without taking a snapshot I would definitely make especially some testing code shorter then again I think it has some merit being force to think about snapshots potential concurrent db changes when dealing with the db says On Mac OS and Windows patterns are always caseinsensitive On macOS at least case sensitivity depends on the file system and is not global Either Syncthing knows this and is case sensitive on case sensitive filesystems and the document is wrong or Syncthing is case insensitive on case sensitive filesystems and does not do the right thing I do not know about Windows but perhaps theres a similar problem I just noticed that syncthing was using GiB memory on my Raspberry Pi GiB available GiB swap on SD card which slowed down things a lot This happened while uploading files ca MiB each to the only other remote device that was online It looks a bit similar to but after upgrading to this did not happen again despite transferring larger files several times After restarting syncthing the transfers continued normally with memory usage staying below MiB so unfortunately I cant reproduce this issue Anyway I got a memory profile and a screenshot of the web GUI from the problem I hope this helps Database tuning is set to small I dont remember touching any other advanced option