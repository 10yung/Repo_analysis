 PR Summary Fixes When PowerShell throws an error due to not being able to resolve an attribute type we sift through the AST to determine whether SupportsShouldProcess has been set on a function Also cleans up some of the logic so its not all nested ass PR Checklist x PR has a meaningful title Use the present tense and imperative mood when describing your changes x Summarized changes x Change is not breaking x Make sure all cs ps and psm files have the correct copyright header x Make sure youve added a new test if existing tests do not effectively test the code changed andor updated documentation x This PR is ready to merge and is not Work in Progress If the PR is work in progress please add the prefix WIP to the beginning of the title and remove the prefix when the PR is ready PR Summary Fixes UseCompatibleSyntax used to erroneously advise that dynamic member expressions dont work in PS Now it does not PR Checklist x PR has a meaningful title Use the present tense and imperative mood when describing your changes x Summarized changes x Change is not breaking x Make sure all cs ps and psm files have the correct copyright header x Make sure youve added a new test if existing tests do not effectively test the code changed andor updated documentation x This PR is ready to merge and is not Work in Progress If the PR is work in progress please add the prefix WIP to the beginning of the title and remove the prefix when the PR is ready PR Summary Fixes Unfortunately this issue could only be reproduced when PSSA is hosted within PSES where the root of the workspace becomes the working directory of the runspace pool which causes GetCommand PathToScriptps to return a command type of ExternalScript which then makes it into the command cache and causes the false positve The fix is to search only for cmdletsfunctions where the implicit Get aliasing applies PR Checklist x PR has a meaningful title Use the present tense and imperative mood when describing your changes x Summarized changes x Change is not breaking x Make sure all cs ps and psm files have the correct copyright header Make sure youve added a new test if existing tests do not effectively test the code changed andor updated documentation x This PR is ready to merge and is not Work in Progress If the PR is work in progress please add the prefix WIP to the beginning of the title and remove the prefix when the PR is ready The UseLiteralInitializerForHashtable should prevent programmers to inconsiderately build hash tables with a default comparison other then the default case sensitive PowerShell behavior It should not prevent a programmer from building a case sensitive hash table at all Hash tables are often used to handle program data but they might also be used to store custom input data whether or not case sensitive and the desired output might highly depend on the customers usedcase In other words it is good that I get a warning on PowerShell hashtable hashtable new and PowerShell hashtable NewObject TypeName hashtable But if I wellconsiderate explicitly set the comparison mode like PowerShell hashtable HashTable New StringComparer Ordinal I expect the warning to be suppressed see also How to create a case sensitive Hashtable without generating a PSScriptAnalyzer warning Steps to reproduce PowerShell InvokeScriptAnalyzer ScriptDefinition HashTable New StringComparer Ordinal Expected behavior No warnings Actual behavior none Use literal initializer for creating a hashtable as they are caseinsensitive by default Environment data PSScriptAnalyzer version Tested both Windows PowerShell and PowerShell Core I use this script with Powershell v Citrix farm with W Powershell h hTestOk controlNameTest writeLog psversiontableoutstring writeLog Test compatibility if hcontrolName eq ok writeLog Test hcontrolName else writeLog dont works a property Length writeLog Array aproperty typeExpression int staticMemberMaxValue writeLog StatictypeExpressionstaticMember method Trim sb writeLog Method Methodmethod Avoid ParseError sb I run PSSA version with this settings Powershell ExcludeRules PSAvoidGlobalVarsPSAvoidUsingWMICmdlet Check if the scripts uses cmdlets that are compatible PS Rules PSUseCompatibleSyntax This turns the rule on setting it to false will turn it off Enable true List the targeted versions of PowerShell here TargetVersions PSUseCompatibleCommands Turns the rule on Enable true Lists the PowerShell platforms we want to check compatibility with TargetProfiles PowerShell Version Operating System Windows Server win x x framework When I run PSSA under PS v I get this result Powershell InvokeScriptAnalyzer path pssaps Settings ScriptAnalyzerSettingspsd RuleName Severity ScriptName Line Message PSUseCompatibleSyntax Warning pssaps The dynamic member invocation syntax hcontrolName is not available by default in PowerShell versions PSUseCompatibleSyntax Warning pssaps The dynamic member invocation syntax hcontrolName is not available by default in PowerShell versions PSUseCompatibleSyntax Warning pssaps The dynamic member invocation syntax aproperty is not available by default in PowerShell versions PSUseCompatibleSyntax Warning pssaps The dynamic member invocation syntax typeExpressionstaticMember is not available by default in PowerShell versions PSUseCompatibleSyntax Warning pssaps The dynamic member invocation syntax xmember is not available by default in PowerShell versions PSUseCompatibleSyntax Warning pssaps The dynamic method invocation syntax Methodmethod is not available by default in PowerShell versions PSUseCompatibleSyntax Warning pssaps The dynamic member invocation syntax EnvironmentVariableTarget enumVal is not available by default in PowerShell versions But when I read my logs the rule message The dynamic member invocation syntax seems incorrect and do not match the specifications in the Windows PowerShell Language Specification Version file chapter Member access Name Value PSVersion WSManStackVersion SerializationVersion CLRVersion BuildVersion PSCompatibleVersions PSRemotingProtocolVersion Test compatibility Test Ok Array Static Error The following Error see Methodmethod is saved by ExportCliXml Powershell eimportclixml Server Path fileps xml e invoke member w expression name Au caract re Server Path fileps sb CategoryInfo OperationStopped NotImplementedException FullyQualifiedErrorId SystemNotImplementedException eExceptionselect Message invoke member w expression name Data SystemManagementAutomationInterpreterInterpretedFrameInfo InnerException TargetSite SystemObject VisitInvokeMemberExpressionSystemManagementAutomationLanguageInvokeMemberExpressionAst StackTrace SystemManagementAutomationLanguageCompilerVisitInvokeMemberExpressionInvokeMemberExpressionAst invokeMemberExpressionAst SystemManagementAutomationLanguageCompilerVisitCommandExpressionCommandExpressionAst commandExpressionAst SystemManagementAutomationLanguageCompilerVisitPipelinePipelineAst pipelineAst SystemManagementAutomationLanguageCompilerCompileTrappableExpressionList exprList StatementAst stmt SystemManagementAutomationLanguageCompilerCompileStatementListWithTrapsReadOnlyCollection statements ReadOnlyCollection traps List exprs List temps SystemManagementAutomationLanguageCompilerVisitStatementBlockStatementBlockAst statementBlockAst SystemManagementAutomationLanguageCompilerCaptureAstResultsAst ast CaptureAstContext context MergeRedirectExprs generateRedirectExprs SystemManagementAutomationLanguageCompilercDisplayClass eVisitExpandableStringExpressi onb dExpressionAst e SystemLinqEnumerableWhereSelectEnumerableIterator MoveNext SystemCollectionsGenericList ctorIEnumerable collection SystemDynamicUtilsCollectionExtensionsToReadOnly T IEnumerable enumerable SystemLinqExpressionsExpressionNewArrayInitType type IEnumerable initializers SystemManagementAutomationLanguageCompilerVisitExpandableStringExpressionExpandableStringEx pressionAst expandableStringExpressionAst SystemManagementAutomationLanguageCompilerGetCommandArgumentExpressionCommandElementAst element SystemManagementAutomationLanguageCompilerVisitCommandCommandAst commandAst SystemManagementAutomationLanguageCompilerVisitPipelinePipelineAst pipelineAst SystemManagementAutomationLanguageCompilerCompileTrappableExpressionList exprList StatementAst stmt SystemManagementAutomationLanguageCompilerCompileStatementListWithTrapsReadOnlyCollection statements ReadOnlyCollection traps List exprs List temps SystemManagementAutomationLanguageCompilerCompileSingleLambdaReadOnlyCollection statements ReadOnlyCollection traps String funcName IScriptExtent entryExtent IScriptExtent exitExtent SystemManagementAutomationLanguageCompilerCompileNamedBlockNamedBlockAst namedBlockAst String funcName SystemManagementAutomationLanguageCompilerVisitScriptBlockScriptBlockAst scriptBlockAst SystemManagementAutomationLanguageCompilerCompileCompiledScriptBlockData scriptBlock Boolean optimize SystemManagementAutomationCompiledScriptBlockDataCompileUnoptimized SystemManagementAutomationCompiledScriptBlockDataCompileBoolean optimized SystemManagementAutomationDlrScriptCommandProcessorInit SystemManagementAutomationCommandDiscoveryCreateCommandProcessorForScriptScriptBlock scriptblock ExecutionContext context Boolean useNewScope SessionStateInternal sessionState SystemManagementAutomationPipelineOpsAddCommandPipelineProcessor pipe CommandParameterInternal commandElements CommandBaseAst commandBaseAst CommandRedirection redirections ExecutionContext context SystemManagementAutomationPipelineOpsInvokePipelineObject input Boolean ignoreInput CommandParameterInternal pipeElements CommandBaseAst pipeElementAsts CommandRedirection commandRedirections FunctionContext funcContext SystemManagementAutomationInterpreterActionCallInstruction RunInterpretedFrame frame SystemManagementAutomationInterpreterEnterTryCatchFinallyInstructionRunInterpretedFrame frame HelpLink Source SystemManagementAutomation HResult Moreover the rule should be of severity Error when I try to know if my code is compatible with Powershell v unless I did not understand the use and the behavior of this rule Why indicate that some syntax is problematic when it is not Steps to reproduce Input script formatted already as expected PowerShell Function a Function b GetContent blah match foo SetContent bleh AnotherStatement WriteHost hi b exit a Expected behavior The example above after formatted looks the same Actual behavior After a chain of more than commands which spans several lines the formatter loses one level of indentation Using triggers the same problem powershell Function a Function b GetContent blah match foo SetContent bleh AnotherStatement WriteHost hi b exit a Environment data Provide the output of the following commands PowerShell PSVersionTable Name Value PSVersion PSEdition Desktop PSCompatibleVersions BuildVersion CLRVersion WSManStackVersion PSRemotingProtocolVersion SerializationVersion GetModule ListAvailable PSScriptAnalyzerVersion ForEachObject ToString Problem to be solved PowerShell theoretically supports parameters whose name can consist only from numbers For example this is a valid declaration powershell function p switch if Yes else No However it is very hard to call properly this script This one will not work none PS homeiiric p No PS homeiiric p No This is because parser will think is a negative number rather than a parameter name in this instance Proper hard way would be to use splatting powershell params true PS p params Yes Generally this is not the only example of such unusable parameters See response by vexx in PowerShell repo issue Summary of the new feature Create a PSSA rule that warns when such parameters are created so users are aware ahead of time that theyre making parameters that they wont be able to refer to Hi I run this command in powershell and encounter this error Possible to advice me on the error InvokeScriptAnalyzer Path D ABC Folder SubFolder Device ps fix Error InvokeScriptAnalyzer Cannot determine line endings as the text probably contain mixed line endings Parameter name text At line char InvokeScriptAnalyzer Path D ABC Folder SubFolder Device ps CategoryInfo NotSpecified InvokeScriptAnalyzer ArgumentException FullyQualifiedErrorId SystemArgumentExceptionMicrosoftWindowsPowerShellScriptAnalyzerCommandsInvokeScriptAnalyzerCommand Steps to reproduce Create filefolder structure as how in the image create test folder create Targetps in it can be empty create file in sub folders sub sub testps with Targetps open test folder in VSCode if it already open then F Reload Window get false positive resource ctempsubsub testps owner generateddiagnosticcollectionname code PSAvoidUsingCmdletAliases severity message Targetps is implicitly aliasing Get Targetps because it is missing the Get prefix This can introduce possible problems and make scripts hard to maintain Please consider changing command to its full name source PSScriptAnalyzer startLineNumber startColumn endLineNumber endColumn Environment data Provide the output of the following commands PowerShell PS C temp PSVersionTable Name Value PSVersion preview PSEdition Core GitCommitId preview OS Microsoft Windows Platform Win NT PSCompatibleVersions PSRemotingProtocolVersion SerializationVersion WSManStackVersion PS C temp GetModule ListAvailable PSScriptAnalyzerVersion ForEachObject ToString Currently you can create functions cmdlets with parameters with ValueFromPipeline or ValueFromPipelineByPropertyName but if you forget the process block only the last pipeline object will be processed by the cmdlet instead of all of them resulting in unexpected behavior that can slip through the cracks unnoticed until you pipe a batch of objects to the commandlet and realize that it only processed one of them PSScriptAnalyzer should default to warning developers to use the process block when they use ValueFromPipeline or ValueFromPipelineByPropertyName attributes in a function cmdlet PowerShell Function Broken CmdletBinding Param ParameterValueFromPipeline int ToPrint ToPrint Function Correct CmdletBinding Param ParameterValueFromPipeline int ToPrint process ToPrint Broken only was output PSScriptAnalyzer ought to be catching this Correct were each output as you would expect 