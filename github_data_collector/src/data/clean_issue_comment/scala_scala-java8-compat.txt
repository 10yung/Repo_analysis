Ive been using the aws dynamodb async sdk but I find that I cannot catch exceptions after I convert a CompletableFuture to Scala When I run client createTabletableSchemacreateTableRequesttableName thenApply Unit Unit exceptionally case Throwable exception is now property handled I can successfully catch the exception However when I run import scalacompatjava FutureConverterstoScala val cf client createTabletableSchemacreateTableRequesttableName toScalacfrecover case Throwable never gets executed I cannot actually catch the exception Any clues on why Recent travis build The and versions show error hometravisbuildscalascalajava compattargetjavascalacompatjava StreamShapeLowPriorityjava error illegal combination of modifiers public and protected error protected abstract class BaseStreamShapeT extends javalangObject S extends javautilstreamBaseStream S St extends scalacompatjava collectionImplStepper implements scalacompatjava StreamShapeT S error The generated file In cases like Spark functions need to be serialized So the FromJavaFunction and the likes should have a default constructor and be serializable Currently when a CompletionStage fails with a RuntimeException this is wrapped in a CompletionException When converting CompletionStage to a Scala Future this is not unwrapped thus making it cumbersome recover from it with an extra recover step that throws the original wrapped exception for example The JAR for version had a fullypopulated manifest generated by BND but doesn t nor does the JAR produced by building HEAD manually I haven t figured out why that is yet I think the documentation regarding function conversion is wrong at least the java code example and doesnt compile To convert a java function to a scala function like in baz I have to write the following import static scalacompatjava JFunction instead of return barfunctionConvertersasScalaFromFunctionf where should functionConverters come from return barfuncf It says here that the CompletionStage returned by FutureConverters doesnt support the toCompletableFuture interface at all However it can be used fine to retrieve the value of a completed future andor wait for it That functionality is currently used by eg akka The documentation could probably be extended to reflect that waiting getting is fine but completing is not Maybe I missed it but it would be great to have an online published version of the scaladocs See paulps comment here gist In private class CF T extends CompletableFuture T with Try T Unit as an example So if a Java user downcasts to CompletableFuture it wont go haywire 