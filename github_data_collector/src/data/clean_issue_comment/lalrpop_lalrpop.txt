lalrpop rust I was trying to extend the tutorial to be able to parse variable assignment string to parse x a got an error that the token is not recognized Test code rust test fn test let mut errors Vecnew let expr langExprsParsernew parse mut errors x unwrap asserteq format expr Added to lalrpop rust use crateastExpr Opcode Assignment AssignCode pub Asgnmnt Assignmentinput VarIdent AssignOp Expr AssignmentOp VarIdent input str r AZaz AZaz AZaz AssignOp AssignCode AssignCodeAssign Added to astrs rust pub enum Assignmentast Op ast str AssignCode BoxExpr deriveCopy Clone pub enum AssignCode Assign After that to understand the error I removed error manipulation code and got the following error teststest stdout thread teststest panicked at called Resultunwrap on an Err value UnrecognizedToken token Token x expected r src libcore resultrs I know this issue has been raised in and but I think I might have a way around it that isnt too clumsy Marwes comments here about the approach that Gluon takes Couldnt the Lines struct from Gluon be generated prior to lexing It could then be passed into the parser Since Lines is available to the parser the line and column number could be found with startL TOKEN endR Am I on to something or not Itd be nice to get treesitter grammars autogenerated from lalrpop grammars likely by some sort of commandline tool Thisd be a first step towards for at least Neovim Atom and I believe VSCode see looks like it was broken by Added an annotation not to skip the whitespace An example would be rust use stdstrFromStr LALR noskipwhitespace grammar match r alpha digit WORD EQUAL EXPAND PIPE else r digit NUMBER r s WS pub Command String s SimpleCommand PIPE s SimpleCommand format command command s s sSimpleCommand format s SimpleCommand String eSimpleCommandElement format command parameters e eSimpleCommandElement WS pParams format command parameters e p SimpleCommandElement String wWords w aAssignment WS sSimpleCommandElement format assign a s Params String wWords println parameter w format parameter w wWords WS pParams println parameter w p format parameter w p Assignment String w WORD EQUAL w Words format w w wWORD EQUAL format w Words String wWord w wWordeWords println words word w e format word w e Word String wWORD println w wtostring eExpand e Expand String EXPAND wWORD println expand w format expand w The following grammar grammar pub Foo ra b goes into an infinite loop with the input c From my limited debugging of this it seems to continuously parse an empty a token instead of detecting c as an invalid token I guess ideally lalrpop would detect potentially empty regexes at build time but this seems like it should at least error at runtime the writeuses call as defined within lalrpopsrcrustmodrs requires a prefix be passed to it to populate the output It appears based on the decision at lines if the prefix is an empty string it will output nothing even if an output is required This patch aims to provide a default string which can be prefixed when required The goal is to address Make the code in the book the same as the calculator directory Add some explanation about grammer in errorrecoverymd To work around this issue otherwise all tokens referenced in grammar need to be exported from crate Is there a simple example on how to create a language that is indentationbased with lalrpop