According to the log following parameters are used to extract the package Info Using HewlettPackard silent switches PDF FC Program Files SCConfigMgr Driver Automation Tool Temp HPBIOSTemp ZBook Studio x G Convertible Workstation Extract S E The PDF parameter dosen t seem to work I downloaded the BIOS exe file manually please see the attachment Im referring to the setting within Package Options Clean Up Unused Drivers Remove drivers not referenced by driver packages I assume this is to remove the previous driver package source locations which were dependent upon beforehand but now becoming superseded So as of now if I run the tool and it finds a newer version of biosdrivers available for download the older biosdriver files remain on the server even though they are no longer being targeted Thank you So I was attempting to use this script on a Dell Optiplex and the script kept failing Looking at the logs below is what it was detecting Manufacturer determined as Dell Computer model determined as OptiPlex Computer SKU determined as OptiPlex Fallback SKU determined as After this once it finds the driver package we see this in the logs Attempting to find a match for driver package Drivers Dell OptiPlex Windows x Unable to match computer model using detection method SystemSKU OptiPlex Fallback from SystemSKU match found for computer model instead using detection method SystemSKU Driver package does not meet computer model manufacturer and operating system and architecture criteria Drivers Dell OptiPlex Windows x So we can see the script detects the SKU as a fallback and the model as the SKU I didnt dig into the SKU detection logic but figured Id look at the fallback as if its detecting that it should still work Looking at the script there are only references to the FallBackSKU variable and those are as follows Line FallBackSKU regex MatchesOEMString S ValueTrimStart TrimEnd Line if not string IsNullOrEmptyFallBackSKU WriteCMLogEntry Value Fallback SKU determined as FallBackSKU Severity So really the variable is detected filled and logged but never used To make it work I simply added a clause to the if statement on line which now reads if PackagePackageManufacturer match ComputerManufacturer and PackagePackageName match OSName and PackagePackageName match OSImageArchitecture and PackagePackageDescription match SystemSKU or PackagePackageDescription match FallBackSKU The change is the statement after the last and Previously it didnt reference the FallBackSKU variable but now that it does if either the SystemSKU or FallBackSKU are in the package description which was already the case with the then the statement will evaluate as true This worked as a fix at so there may be a better way to fix this but thats what I found that worked for my scenario Please let me know if you need any additional information validation or testing Hi Theres an issue with InvokeCMApplyDriverPackageps on line The DISM command will fail if theres a space in the driver path I changed it from DriverDriverINFFullName to DriverDriverINFFullName which solved it in our environment hi all Dont know if this is the right place or what first post I think the driver automation tool is the best things since SCCM came out the old version found an issue downloading Lenovo X Gen Gen and Yoga gen drivers in the automation tool for windows in the automation tool i select the proper fields in the automation tool when the automation tool downloads the drivers it downloads the wrong version example or drivers when i choose after a lot of troubleshooting and XML combing I think the script or the automation tool is ending with the wrong search info with the date stamp in the name of the EXE file Lenovo uses with the windows version of tpx carbonmt hq hr k k w exe this driver file is obviously for check to verify Hope this helps a few of you figure out why drivers may not be working correctly proxy settings in dat doesnt seem to be working work around is to set it on internet explorer settings and leave dat settings blank Bug Description If a wrong package id which is not a operating system image package is defined in the task sequence variable OSImagePackageId the script failed with the following error during an OSD tasksequence Snippet from smstslog LOG CommandLine X WINDOWS system windowspowershell v powershellexe NoProfile NonInteractive ExecutionPolicy Bypass Command C SMSTaskSequence Packages P InvokeCMApplyDriverPackageps URI PrimarySiteServerConfigMgrWebServiceConfigMgrasmx SecretKey MYSECRETKEY Filter Drivers OSImageTSVariableName OSImagePackageId exit LASTEXITCODE bor int not and not LASTEXITCODE LOG time date componentRunPowerShellScript context type thread filemaincpp LOG Executing command line Run PowerShell Script with options LOG time date componentRunPowerShellScript context type thread fileCommandLinecpp LOG Process completed with exit code LOG time date componentRunPowerShellScript context type thread fileCommandLinecpp LOG C SMSTaskSequence Packages P InvokeCMApplyDriverPackageps Cannot validate argument on parameter LOG time date componentRunPowerShellScript context type thread filemaincpp LOG InputObject The argument is null or empty Provide an argument that is not null or empty and then try the command LOG time date componentRunPowerShellScript context type thread filemaincpp LOG again LOG time date componentRunPowerShellScript context type thread filemaincpp LOG At line char LOG time date componentRunPowerShellScript context type thread filemaincpp LOG C SMSTaskSequence Packages P InvokeCMApplyDriverPackage LOG time date componentRunPowerShellScript context type thread filemaincpp LOG LOG time date componentRunPowerShellScript context type thread filemaincpp LOG CategoryInfo InvalidData InvokeCMApplyDriverPackageps ParameterBindingValidationException LOG time date componentRunPowerShellScript context type thread filemaincpp LOG FullyQualifiedErrorId ParameterArgumentValidationErrorInvokeCMApplyDriverPackageps LOG time date componentRunPowerShellScript context type thread filemaincpp LOG LOG time date componentRunPowerShellScript context type thread filemaincpp LOG PowerShell command line returned code LOG time date componentRunPowerShellScript context type thread filemaincpp ApplyDriverPackagelog LOG SCConfigMgr InvokeCMApplyDriverPackage Version LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file LOG Driver download package process initiated LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file LOG Manufacturer determined as HewlettPackard LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file LOG Computer model determined as HP EliteBook G LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file LOG Computer SKU determined as B LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file LOG Retrieved a total of driver packages from web service LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file LOG Attempting to detect OS Image data from task sequence running in DeploymentType BareMetal LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file LOG Multiple OS Image objects detected Objects will be matched against provided task sequence variable name OSImagePackageId to determine the correct object LOG time date componentApplyDriverPackage contextNT AUTHORITY SYSTEM type thread file Root Cause The function GetOSImageData does not validate if the given PackageId is a valid Operating System Image package If the PackageId is not an Operating System Image package the function does not return anything This results in an ParameterArgumentValidationError exception when the script runs the following line Line powershell OSDetails GetOSDetails InputObject OSImageVersion Solution Description The function GetOSImageData now perform a check if the variable PSCustomObject is null when trying to select the OS Image matching the value in the task sequence variable OSImageTsVariableName If the value is null a log entry is created and the script exits with the exit code Hello I have been having some issues with the Dell BIOS management and I was wondering if theres a workaround to my issue Dell BIOS updates are weird because you cant just upgrade to the latest version you have to do it incrementally based on the BIOS version currently installed in the system Please let me know if theres a workaround if not we will do these models manually then Thanks So we tried to put the Webservice behind a load balancer to make HTTPS sligtly easier And the Webservice is returning the wrong address Basically it should be but it Returns This causes a Connection error in the script I noticed this by testing the Webservice using SoapUI where it seemed to work without problems But i did notice the wrong address being returned Current workaround we are using is just adding a WebServiceURL CORRECTADDRESS to the script Im still verifying if this is a Webservice problem or a im an idiot that has configured something wrong problem But i thought i would let you know regardless 