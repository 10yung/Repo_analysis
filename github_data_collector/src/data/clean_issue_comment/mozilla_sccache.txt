 BLAKE is designed to be a very high performance cryptographic hash The BLAKE team has shown significantly higher singlethread performance than SHA on modern server hardware This change resulted in a minor improvement to observed local build times Comparison cargo check on sccache repo at commit e bba ae cea aba b a a with a warm cache for each hash Ten samples were collected for each hash SHA mean seconds BLAKE mean seconds This data shows a mean improvement of seconds about My statistics skills are rough but this appears to be a very statistically significant improvement This test was performed on an Intel i K and a fairly ancient SATA SSD It would be interesting to see a test result from a higher performance machine The BLAKE teams performance analysis shows x faster single threaded performance vs SHA on an AWS c dmetal instance details summaryRaw datasummary sha initial cold build m sbr blake initial cold build m sbr sha build times s m s m s s m s s m s m s s sbr blake build times s s s s m s s s s s sbr details Related issues PRs Reevaluate hash function used Use RustCrypto crates Faster hash algorithm Switch from SHA to SHA References Blake repo Blake paper ldd verson prints different entry for interpreter lib ldlinuxx so from old versoin packagetoolchain will package usrlib ldlinuxx so but what we need is lib ldlinuxx so this results in a very confusing error message No such file or directory when sccache try to run rustc with bwrap bash ldd version ldd GNU libc ldd usrbinls linuxvdsoso x ffedc a libcapso usrliblibcapso x f bc e libcso usrliblibcso x f bc f lib ldlinuxx so usrlib ldlinuxx so x f bc ldd version ldd GNU libc ldd usrbinls linuxvdsoso x ffc f libselinuxso lib libselinuxso x ae e libcapso lib libcapso x ae libaclso lib libaclso x ae libcso lib libcso x adeb libpcreso lib libpcreso x adc libdlso lib libdlso x ada d lib ldlinuxx so x ae b libattrso lib libattrso x ad libpthreadso lib libpthreadso x ad c These two commits together should fix the issue of broken builds requiring both a clobber and cacheclear when updating rust toolchain archives We have some code see which has somehow been miscached by sccache and is causing compiler errors We know that the problem goes away when we run the build without the cache Wed like to delete JUST the bad cache product related to this compilation and not any others Is there a good way to do this If we nuke the entire cache it will affect other working uses of the cache Brave browser calculates how much time has been saved avoiding all the trackers It would be great if sccache could guestimate how much compile time has been saved by using it Ive been trying to run sccache on an EC instance with the following config Note Im getting the same errors with IAMROLE and direct keys AWSACCESSKEYID myid AWSSECRETACCESSKEY mykey SCCACHES USESSLtrue SCCACHEBUCKET mybucket RUSTLOGsccachetrace SCCACHESTARTSERVER SCCACHENODAEMON SCCACHEERRORLOGsccachelog sccache sccache log file INFO T Z sccacheserver startserver port INFO T Z sccacheserver No scheduler address configured disabling distributed sccache DEBUG T Z sccachecachecache Trying S Cache my bucket mybucket s amazonawscom TRACE T Z sccachecachecache Using S Cache INFO T Z sccacheserver server started listening on port TRACE T Z sccacheserver incoming connection TRACE T Z sccacheserver handleclient DEBUG T Z sccacheserver handleclient compile TRACE T Z sccacheserver compilerinfo TRACE T Z sccacheserver compilerinfo cache miss TRACE T Z sccachecompilercompiler detectcompiler usrbingcc TRACE T Z sccachecompilercompiler detectccompiler TRACE T Z sccachecompilercompiler compiler Someusrbingcc E tmpsccacheEs ro eOOOtestfilec DEBUG T Z sccachecompilercompiler Found GCC DEBUG T Z sccacheserver checkcompiler Supported compiler DEBUG T Z sccacheserver parsearguments Ok c o crapo crapc DEBUG T Z sccachecompilercompiler crapo getcachedorcompile c o crapo crapc TRACE T Z sccachecompilergcc preprocess TRACE T Z sccachecompilergcc preprocess Someusrbingcc x c E P crapc TRACE T Z sccachecompilerc crapo Preprocessor output is bytes TRACE T Z sccacheutil Hashed files in s DEBUG T Z sccachecompilercompiler crapo generatehashkey took s TRACE T Z sccachecompilercompiler crapo Hash key a e e eebaf db b e ba af b e a c b feb dc e e b b a ba a c dd d e c e d DEBUG T Z sccachesimples credential Using AWS credentials from environment DEBUG T Z sccachesimples s GET WARN T Z sccachecaches Got AWS error ErrorBadHTTPStatus State nexterror None backtrace InternalBacktrace DEBUG T Z sccachecompilercompiler crapo Cache miss in s TRACE T Z sccachecompilergcc compile DEBUG T Z sccachecompilercompiler crapo Compiling locally DEBUG T Z sccachecompilercompiler crapo Compiled in s storing in cache TRACE T Z sccacheserver CompileFinished retcode exit code DEBUG T Z sccachesimples s PUT bucket s amazonawscom a a e e eebaf db b e ba af b e a c b feb dc e e b b a ba a c dd d e c e d TRACE T Z sccachesimples s PUT failed with HTTP status Bad Request DEBUG T Z sccachecompilercompiler crapo Cache write error ErrorMsgfailed to put cache entry in s State nexterror SomeErrorBadHTTPStatus State nexterror None backtrace InternalBacktrace backtrace InternalBacktrace DEBUG T Z sccacheserver Error executing cache write failed to put cache entry in s I assume that the issue is that the requests are made via HTTP and not HTTPS Not that I added SCCACHES USESSLtrue and it didnt seem to make any impact What am I missing Hi Ive created a private S bucket and verified that I can write to it bash export AWSACCESSKEYID export AWSSECRETACCESSKEY export BUCKET echo hi hellotxt aws s cp hellotxt s BUCKETtesttxt aws s cp s BUCKETtesttxt devstdout It prints hi as expected With the same environment variables I start an sccache server bash export SCCACHEBUCKETBUCKET SCCACHESTARTSERVER SCCACHENODAEMON RUSTLOGsccachetrace sccache Now when I try a cargo build somewhere I get lots of failures like this WARN T Z sccachecaches Got AWS error ErrorBadHTTPStatus State nexterror None backtrace InternalBacktrace TRACE T Z sccachesimples s PUT failed with HTTP status Forbidden DEBUG T Z sccachecompilercompiler arrayvec Cache write error ErrorMsgfailed to put cache entry in s State nexterror SomeErrorBadHTTPStatus State nexterror None backtrace InternalBacktrace backtrace InternalBacktrace DEBUG T Z sccacheserver Error executing cache write failed to put cache entry in s ERROR T Z sccacheserver SccacheTransportpoll failed io error ERROR T Z sccacheserver io error Does sccache need anything other than AWSACCESSKEYID and AWSSECRETACCESSKEY to write to s The README says sccache includes experimental Rust support Id like to be able to track the status of this so I have an idea when it will be production ready