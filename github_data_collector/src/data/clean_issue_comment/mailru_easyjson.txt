GOPATHC Users dgorocho Go file located in C Users dgorocho Go Src running command easyjson all fastgo produces error Error parsing fastgo file C Users dgorocho Go Src fastgo is not in GOPATH I am reading a JSON response with a field t that is a unix epoch in milliseconds Currently my approach is to have a private variable in my response that is timestampMs and then a Time function which does the conversion Id prefer if I could just have a Time field in my struct and tell easyjson to parse timeTime using my custom logic Is this possible for the explanation please refer to this PR I have a struct with a required field that is a map If an empty map is passed in the decoder generates code that omits the field ie equivalent to omitempty Is there a way to force empty maps to be generated Issue The goformat package doesnt sort the imports in the canonical form like goimports does which causes the autogenerated files by this tool being changed by the goimports tool or failing the CI if goimports format is enforced there Proposal Use more strict golangorgxtoolsimports package for formatting the output like mockery does for example which would format also the imports and still produce a gofmtcompatible output Like StreamUnmarshalJSONreader ioReader StreamMarshalJSONreader ioWriter It may bring significant performance improvement while impl deserialize streamingly Thanks I have a branch that converts easyjson to be types oriented instead of reflect oriented This removes the need for a Go compiler allows generating for main and my real goal speeds up generation by about x Its obviously a nontrivial patchset and changes the public interface of githubcommailrueasyjsongen I would love to work with you all to get it merged but I want to make sure that the above sounds ok before I go through the work to clean it up the rest of the way Interested I decided to make some benchmarks to compare few libraries And results are shocked me Golang Easyjson Marshal encodejson Benchmarkstd ffjson Min minified json Full json Benchmark results goos windows goarch amd pkg githubcomriftbitprotocolbenches BenchmarkmsgpackvmihailencoMarshal nsop Bop allocsop BenchmarkffjsonMarshalsimplepooling nsop Bop allocsop BenchmarkjsoniteratorMarshalfast nsop Bop allocsop BenchmarkffjsonMarshalsimple nsop Bop allocsop BenchmarkstdMarshal nsop Bop allocsop BenchmarkjsoniteratorMarshal nsop Bop allocsop BenchmarkffjsonMarshalgenerated nsop Bop allocsop BenchmarkeasyjsonMarshal nsop Bop allocsop BenchmarkeasyjsonMarshallexer nsop Bop allocsop BenchmarkmsgpackvmihailencoUnmarshal nsop Bop allocsop BenchmarkffjsonUnmarshalMingenerated nsop Bop allocsop BenchmarkffjsonUnmarshalFullgenerated nsop Bop allocsop BenchmarkeasyjsonUnmarshalMin nsop Bop allocsop BenchmarkeasyjsonUnmarshalMinlexer nsop Bop allocsop BenchmarkeasyjsonUnmarshalFull nsop Bop allocsop BenchmarkeasyjsonUnmarshalFulllexer nsop Bop allocsop BenchmarkjsoniteratorUnmarshalMin nsop Bop allocsop BenchmarkjsoniteratorUnmarshalFull nsop Bop allocsop BenchmarkjsoniteratorUnmarshalFullfast nsop Bop allocsop BenchmarkjsoniteratorUnmarshalMinfast nsop Bop allocsop BenchmarkstdUnmarshalMin nsop Bop allocsop BenchmarkffjsonUnmarshalMinsimple nsop Bop allocsop BenchmarkffjsonUnmarshalFullsimple nsop Bop allocsop BenchmarkstdUnmarshalFull nsop Bop allocsop PASS ok githubcomriftbitprotocolbenches s githubcomriftbitprotocolbenchesstructs no test files githubcomriftbitprotocolbenchesvars no test files Sources are available in repo easyjson ffjson json The chromedpgen tool which makes use of the raw code always encounters issues with slow builds This adds a simple syncRWMutex to the Go module map package path cache variable thats causing problems