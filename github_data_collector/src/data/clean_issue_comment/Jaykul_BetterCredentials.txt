this should resolve and Its not perfect but Ive tested every command with the throw statement removed and they all work Like many admins I use very long secure credentials which are subject to all kinds of typo errors Id like to see a switch added to GetCredential that would validate a credential that was inputted I created this function to validate credentials when they are entered and I use it day to day for this type of functionality It leverages the AccountManagement namespace as described Richard Siddaways blog post Id like to see the functionality added in Here is my function powershell Function GetValidatedCredential SYNOPSIS Retrieves a credential from the user with the standard Windows dialog and then it validates that the password is correct for the account DESCRIPTION Uses the standard dialog with the option to customize the title the prompt text and to prefill a domain name and user name The credential is then tested against the domain to validate that the password is correct If it is not the user is prompted again The user does have the option to click Cancel and exit this function PARAMETER DomainName The domain name of the user to validate PARAMETER DomainUser The username sAMAccountName of the user to validate PARAMETER DialogTitle The title of the dialog presented to request credentials PARAMETER DialogPrompt The prompt of the dialog presented to request credentials EXAMPLE PS C GetValidatedCredential DomainName envUSERDOMAIN DomainUser MyServiceAccount DialogTitle Enter credentials DialogPrompt Enter the credentials for the service account to use NOTES This script is based on Richard Siddaways blog about the SystemDirectoryServicesAccountManagement namespace INPUTS systemstring OUTPUTS pscredential cmdletbinding param parameterMandatory true HelpMessageThe domain name of the account to be validated ValueFromPipelineByPropertyName true string DomainName parameterMandatory true HelpMessage The user name of the account to be validated ValueFromPipelineByPropertyName true string DomainUser parameterValueFromPipelineByPropertyName true string DialogTitle Enter credentials parameterValueFromPipelineByPropertyName true string DialogPrompt Enter the credentials to be validated MyName MyInvocationInvocationName WriteVerbose Message Starting f DateTime Now MyName AddType AssemblyName SystemDirectoryServicesAccountManagement HaveValidCredentials false do Credential HostUIPromptForCredentialDialogTitle DialogPrompt f DomainName DomainUser DomainName if Credential eq null Throw User clicked cancel exiting the script WriteVerbose Message Cancel was clicked exiting this function quietly f MyName if TestPath Path variable Context ContextDispose return null Context NewObject TypeName SystemDirectoryServicesAccountManagementPrincipalContext ArgumentList SystemDirectoryServicesAccountManagementContextType Domain DomainName if ContextValidateCredentialsDomainUser CredentialGetNetworkCredentialPassword HaveValidCredentials true WriteVerbose Message Current provided credentials are valid and password is correct continuing with the installation f MyName until HaveValidCredentials ContextDispose Credential GetCredential is trying to load a credential object even if its not been stored yet This causes an exception to be thrown May be related to as well If we wrap module Line with setting ErrorActionPreference to SilentlyContinue it seems that this would resolve it Alternately I imagine changing the CredentialManagementStore class function Load to not throw an exception on line might be the more elegant solution In SetCredential you can specify the target attribute it would be nice to support target in GetCredential as well This would allow setting the target as some short name and allow easy get requests of the short target name vs username Mainly for use from CLI For example I may want to request the credentials for a client Office login with a username of domainusersomecompanynameonmicrosoftcom but would set the target to compa and be able to easy recall it with getcredential target compa TestCredential and FindCredential don t work as expected The problem lies with the Find function in CredentialManagementcs Because CredWrite alters the names of credentials you are using the function FixTarget to make this alteration transparent when credentials are retrieved Thus FixTarget needs to be applied to the filter argument of the Find function to make that transparent as well Also in the Find function CredEnumerate returns false when it fails In addition to some exceptionworthy problems the failure may be due to there being no credentials that pass the filter ERRORNOTFOUND In the case of ERRORNOTFOUND the Find function should return a null result rather than throwing an exception In my pull request I am proposing changes to the Find function and based on these changes I also added some additional examples for TestCredential and FindCredential TestCredential and FindCredential don t work as expected The problem lies with the Find function in CredentialManagementcs Because CredWrite alters the names of credentials you are using the function FixTarget to make this alteration transparent when credentials are retrieved Thus FixTarget needs to be applied to the filter argument of the Find function to make that transparent as well Also in the Find function CredEnumerate returns false when it fails In addition to some exceptionworthy problems the failure may be due to there being no credentials that pass the filter ERRORNOTFOUND In the case of ERRORNOTFOUND the Find function should return a null result rather than throwing an exception Based on these changes I also added some additional examples for TestCredential and FindCredential In order to support PowerShell Core on platforms other than Windows its necessary to abstract the credential storage part of this module out into something where we can plug in different solutions on different platforms For instance Windows Credential Vault MacOS Keychain Linux DBus secret service or pass Something like Dockers Credential Helpers seems to be the best approach although we cant just use theirs because their plugins and client library are written in Go which doesnt really interop with anything