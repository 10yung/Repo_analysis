 While lib is specified in gitignore the directory is actually committed to the repository This commit deletes these files which are automatically generated upon build so that theres less noise while working on the project Since compiled files are needed for tests also added build stage before running mocka to make sure that we have those in travis pipelines json packagejson scripts build tsc p test tsc p mocha u tdd timeout gitbook gitbook build docs TypeScript wasnt able to build the package because of errors These have been fixed No functionality should be affected these are only syntactic modifications srcinstallbints added tsignore TS wouldnt compile since function is currently not being used ts tsignore function isCygwin srcinstallfetchts modified import ts from import HttpsProxyAgent from httpsproxyagent to import as HttpsProxyAgent from httpsproxyagent srcapits changed property access to use map access since stack is not defined as a valid property of errs type ts from logErrerrstack err to logErrerr stack err The current rolluppluginterser depends on serializejavascript with a security vulnerability This has been patched in version rolluppluginterser v Resolve Also suppressed typescript errors due to style Linking to Will help avoid pitfalls for newcomers NPM audit report Moderate CrossSite Scripting Package serializejavascript Patched in Dependency of jspm Path jspm rolluppluginterser serializejavascript More info Seems like rolluppluginterser already patched in master branch but I dont believe that a version has been released yet jspm map o distimportmapjson production Get this error err jspm Error Unable to locate jspmcore dependency Make sure this is properly installed at Mapperget nodeBuiltinsPkg as nodeBuiltinsPkg homecsrnvmversionsnodev libnodemodulesjspmlibmapindexjs at MappercreateMapAll homecsrnvmversionsnodev libnodemodulesjspmlibmapindexjs at Objectmap homecsrnvmversionsnodev libnodemodulesjspmlibmapindexjs at cliHandler homecsrnvmversionsnodev libnodemodulesjspmlibclijs at Objectanonymous homecsrnvmversionsnodev libnodemodulesjspmlibclijs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at Modulerequire internalmodulescjsloaderjs My packagejson json name topapp version main indexjs license MIT scripts prodmap npx nodearginspectbrk jspm map o distimportmapjson production devDependencies jspmcore httpserver rollup rolluppluginnoderesolve dependencies microfrontenddemoteama microfrontenddemoteamb systemjs type module jspmcore is in devDependencies which is ignored when using production Is this intended Hi guybedford This is my propoal for issue jspm build srcappjs dir dist customplugins jspmpluginsjs with jspmpluginsjs as js const litSass requirepondayrolluppluginlitsass moduleexports buildArgs options return litSass buildArgs and options parameters could be usefull to setup plugins Thanks for your great work Hi guybedford Is there a way to customize Rollup plugins involved in the build process The plugins are instanciated at Maybe an external js function to get an array of custom plugins IMO the only way possible today is to recreate the CLI logic in a separate script Overkill Currently jspm install g mocha would create a global mocha bin in pathtoglobaljspmpackagesbinmocha The idea is that this global pathtoglobaljspmpackagesbin can be added to the PATH to get global bins support When using that mocha command a very common scenario is wanting to ensure you are using the right version of the mocha command locally The suggestion is this what if we make all global commands check the local project process cwd for a local version of that same command and then use that if it is available This seems a very useful property to have for global command installs The downside is opting out of the behaviour if you dont want it but jspm bin g mocha can remain an alias to the global version specifically providing an optout path too jspm itself would certainly take advantage of this feature It would be worthwhile to support GitHub packages at this point as its own registry Either ghp or gpr I forget which is the preferred abbreviation for it at the moment Its relatively straightforward to put this together its simply a matter that I dont personally have any good reason to need to do this yet If anyone is specifically interested in this feature please say so