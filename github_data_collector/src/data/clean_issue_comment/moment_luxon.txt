javascript luxonDateTime local setZoneEuropeAthens keepLocalTime true plusminutes hour Daylight saving time in Greece began at AM on Sunday March and ended at AM on Sunday October All times are in Eastern European Time I expected the hour to be am I doing something wrong Thanks for any pointers PS Was porting from momenttimezone to luxon and this is is one of the tests thats failing Hi I ran a quick benchmark hopefully valid after I noticed my app spending a lot of time in hasSame If I understand it correctly the only difference between tsa unit tsb unit and tsahasSametsb unit is behavior with respect to timezones js a luxonDateTimelocal DateTime ts zone LocalZone loc Locale invalid null weekData null atoISO T start windowperformancenow for let ix ix ix aday aday consolelogwindowperformancenow start VM undefined start windowperformancenow for let ix ix ix ahasSamea day consolelogwindowperformancenow start VM undefined Is it possible to speed up hasSame in the case of equal timezones Description If doing a calculation on DateTime with mixed algebraic signs leads to incorrect results This is true for example when modifying dates in a way that the target month does not have days or the target year is a leapyear Example should be but is DateTimefromISO plusmonths days Analysis Internally the duration months days is shifted to months days milliseconds and during that it is normalized During normalization the algebraic signs are changed and the resulting duration is months days It would be correct if the target month has days but December has days Same issue for leapyears years days is converted to years days should be days if the resulting year is a leap year Reproducible example Version Tested with latest Luxon version Workaround Add units one by one in the right order DateTimefromISO plusmonths plusdays luxoninstallmanual While doing horizontal scroll in this page content override with the left section This seems to be a bug const format weekday long hour numeric minute digit return dttoLocaleStringformat Expected output Actual output If month or year are added to the format object or if weekday is removed hour is correctly formatted as numeric Example On the website its correctly linking to installhtml On GitHubs markdown rendering it yields a DateTimefromISO cant parse timezones containing seconds Note that DateTimetoISO can create such timezone strings I believe fromISO should be able to reverse toISO Heres a brief example const DateTime requireluxon Toronto was UTC from const dateString consolelogOriginal date string dateString const luxonDate DateTimefromFormatdateString yyyyLLdd HHmm zone AmericaToronto consolelogISO date via luxon luxonDatetoISO const fromISO DateTimefromISOluxonDate consolelogfromISODateTime fromISOinvalid truncate the timezone const fromISOTruncated DateTimefromISOluxonDatetoISOsubstring consolelogfromISOtruncated fromISOTruncatedtoISO Output Original date string ISO date via luxon T fromISODateTime Invalid reason unparsable explanation the input T cant be parsed as ISO fromISOtruncated T For what its worth momenttimezone throws an exception when the timezone has seconds and miscalculates the ISO date to T when theyre truncated Value of HTMLs input typetime have below patterns hhmm hhmmss hhmmssS hhmmssSS hhmmssSSS These are expressed in below regular expressions d d d d cf HTML Standard My idea Not tested js function fromHTMLTime text const matched textmatch d d d d if matched return Durationinvalidunparsable the input text cant be parsed as HTML time const getValue index matched index Numbermatched index const hours getValue const minutes getValue const seconds getValue const milliseconds getValue return DurationfromObject hours minutes seconds milliseconds Usage example html input typetime idtimeform value js const timeForm documentgetElementByIdtimeform const value timeFormvalue const duration DurationfromHTMLTimevalue Hi I noticed that in androidappbuildgradle there is an option for changing jsc diff The preferred build flavor of JavaScriptCore For example to use the international variant you can use def jscFlavor orgwebkitandroidjscintl The international variant includes ICU i n library and necessary data allowing to use eg DatetoLocaleString and StringlocaleCompare that give correct results when using with locales other than enUS Note that this variant is about MiB larger per architecture than default def jscFlavor orgwebkitandroidjsc def jscFlavor orgwebkitandroidjscintl It seems we dont have to install jscandroidbuildscripts after react native x I changed and built it it works well so far It might be helpful if readme file can include this solution Thanks