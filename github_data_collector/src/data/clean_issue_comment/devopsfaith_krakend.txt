clone also the request body in the CloneRequest method so shadow backends get the same body sent to regular backends Describe the bug production backend is ok but shadowed backend reports error IO error while reading input message nested exception is orgapachecatalinaconnectorClientAbortException javaioEOFException Unexpected EOF read on the socket To Reproduce Steps to reproduce the behavior Configuration used json endpoint path path path path method PUT extraconfig outputencoding json concurrentcalls headerstopass querystringparams backend urlpattern path path path path encoding json sd static extraconfig host disablehostsanitize true urlpattern path path path path encoding json sd static extraconfig githubcomdevopsfaithkrakendproxy shadow true host disablehostsanitize true Steps to run the software image devopsfaithkrakend Expected behavior A clear and concise description of what you expected to happen Logs If applicable any logs and debugging information Additional context remove CONTAINERB its OK remove CONTAINERA turn off shadow its OK Describe the bug During normal operation of our Krakend based API GW we observed a panic in our version of the CustomErrorEndpointHandler Our version is based on and has two changes we set a value on the context with cSet we do not return the two headers coreKrakenHeaderName and routerCompleteResponseHeaderName Other than that the code is not altered especially the section that is mentioned in the stack trace see below is not changed The line of code that is stated of as the root cause of the panic because of a invalid memory address or nil pointer dereference does not make sense because in if isCacheEnabled the reference variable is a boolean not a pointer and therefore it does not seam possible for this variable to be nil The comment in the mentioned function sigpanic in the runtime package mentiones that it arranges the stack to look like the function where the signal occurred called sigpanic so we asked ourselves if this arranging could be off by one or even more lines This led to the question if the real cause for the nil pointer is the call to cHeader on the next line Interesting is the fact that the request that is logged see last line has a duration of a little bit above of sec and our timeout in the configuration is set to sec Based on this observation it is our guess that the problem is somehow because of a data race that only happens in very rare cases of exact timing that is if the proxy request just returns before the timeout exceeds We looked into the code to figure out where this could lead to a problem we assumed to reuse of the context objects by gin and the overwriting of the ResponseWriters could be the source of the problem which would map to the stated assumption above that the call to cHeader could be part of the problem but we have not been successful so far Have you heard or observed similar panics What do you think about the suggestion below in Additional context To Reproduce We are currently not able to reproduce the error it only happens very rarely Expected behavior The code should not panic Logs Recovery panic recovered runtime error invalid memory address or nil pointer dereference usrlocalgosrcruntimepanicgo x c panicmem panicmemoryError usrlocalgosrcruntimesignalunixgo x ef sigpanic panicmem usrsrcapphandlerfactorygo xa fb f CustomErrorEndpointHandlerfunc if isCacheEnabled gopkgmodgithubcomdevopsfaithkrakendratelimitv d e e jujuroutergingingo x f c NewTokenLimiterMwfunc nextc gopkgmodgithubcomgingonicginv contextgo x c ContextNext chandlers cindex c usrsrcappmetricsmiddlewarego xa cb middlewarefunc cNext gopkgmodgithubcomgingonicginv contextgo x c ContextNext chandlers cindex c usrsrcapprouterenginego xa e f jsonErrorBody cNext gopkgmodgithubcomgingonicginv contextgo x c ContextNext chandlers cindex c usrsrcapprouterenginego xa e d strictTransportSecurityHeader cNext gopkgmodgithubcomgingonicginv contextgo x c ContextNext chandlers cindex c gopkgmodgithubcomgingonicginv recoverygo x af RecoveryWithWriterfunc cNext gopkgmodgithubcomgingonicginv contextgo x c ContextNext chandlers cindex c gopkgmodgithubcomgingonicginv loggergo x ae d LoggerWithConfigfunc cNext gopkgmodgithubcomgingonicginv contextgo x c ContextNext chandlers cindex c gopkgmodgithubcomgingonicginv gingo x a b EnginehandleHTTPRequest cNext gopkgmodgithubcomgingonicginv gingo x a a EngineServeHTTP enginehandleHTTPRequestc usrlocalgosrcnethttpservergo x c serverHandlerServeHTTP handlerServeHTTPrw req usrlocalgosrcnethttpservergo x bf connserve serverHandlercserverServeHTTPw wreq usrlocalgosrcruntimeasmamd s x goexit BYTE x NOP GIN s xxxxxxxxxxxx GET redacted Additional context We observed that in Krakend in most cases where new timeouts are derived from the global request timeout only a percentage of the global timeout is used eg concurrentgo and merginggo and we asked ourselves if it would be beneficial to do the same in endpointgo Hi One of the backend services for my app uses graphql api How can I add that as a backend and expose it as an endpoint in krakend Is your feature request related to a problem Please describe below tells validator can accept jwt token from Authorization or a certain key in Cookie any plan to support extracting jwt token from designated header like xmycompanyauth or etc Describe the solution youd like krakendjosevalidator supports http header name apart form cookie cookiekey when fetching jwt token Describe alternatives youve considered did not think of any alternatives so far Additional context Add any other context or screenshots about the feature request here Is your feature request related to a problem Please describe Given that krakend stateless and every configuration change requires a restart it would be nice to minimize downtime Describe the solution youd like One solution is to use endless http server or something similar It allows us to finish requests on the old version and all new requests are already going to the latest version Additional context I use such a custom version of krakend with endless If there are problems with this proposal it would be nice to add at least the ability to change the http server globally HI I need help thanks I want to output the response header of the backend feedback to the client Is there any parameter that can be configured I havent seen it for a long time Transform headers Seems to have no effect the client does not see the response header endpoint foo extraconfig githubcomdevopsfaithkrakendmartian headerModifier scope request response name XMartian value true Is your feature request related to a problem Please describe Add support of WebAssembly for plugin system It could simplify development plugin in different language using simple API Interesting project like an example Is your feature request related to a problem Please describe Ability to divide traffic between releases andor weights Describe the solution youd like It would be a nice feature that simplify deployment of backends Hi thanks for this great project I think I found a bug on the krakendhttpsecure extension or at best on the krakend documentation The documentation says we can use this extension at endpoint or root level but I couldt make it work at endpoint level Im interested on defining the allowedhosts at root level and override it on some endpoints nevertheless even if I only configure it at endpoint level it doesnt work Here is the configuration file Ive created to test the allowedhosts option version name test extraconfig githubcomdevopsfaithkrakendhttpsecure allowedhosts nohost endpoints endpoint test method GET extraconfig githubcomdevopsfaithkrakendhttpsecure allowedhosts localhost backend host urlpattern todos Im using Docker to run this test with the command bellow docker run p v PWDconfigetckrakend devopsfaithkrakend run config etckrakendkrakendtestjson In this example krakend always return Bad Host even though its overwritten at the endpoint level If I configure it only at the endpoint level the configuration is ignored and the Host header verification isnt executed version name test endpoints endpoint test method GET extraconfig githubcomdevopsfaithkrakendhttpsecure allowedhosts nohost backend host urlpattern todos Is there anything wrong with my configuration or is this really a bug Cheers 