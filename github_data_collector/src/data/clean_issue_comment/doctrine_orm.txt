 This PR is basically but targetted on as suggested Ill copy the text from there Hi This PR is the result of fixing easy issues from the two first levels of Psalm This is the starting point of trying to begin If this goes smoothly my goal is to continue fixing errors by slowly increasing the Psalms levels Eventually the idea would be to add Psalm to the CI and to add template annotation to interfaces and exposed classes to help tools like phpstan and psalm understand Doctrine without the need of stubs or plugins Im always trying to learn so dont hesitate to ask for changes or anything Thanks I didnt expect such difference between master and Great job guys I cant wait for future versions It seems that the CI is broken on I tried to run phpcbf locally but there are massive changes I didnt dare apply them here so there may be some CS errors If the CI is fixed and the errors are still there in the future Ill correct them Ill close some changes there were specific to the master branch due to code movements but lets fix that later Fixes Feature Request Fill in the relevant information below to help triage your issue Q A New Feature yes RFC no BC Break no Summary Laravel has the insertOrIgnore method in his querybuilder it would be great if doctrine also included it What do you think about it Provide a summary of the feature you would like to see implemented Proposing patch Throw LogicException if region is tried to use for READWRITE while implementation doesnt implement ConcurrentRegion This PR is missing Tests as this is draft I will be adding them later if this is approved approach to handle this case Bug Report Q A BC Break no Version Summary When executing a DQL query of it throws a PHP fatal error Current behavior Fatal error Uncaught Error Call to a member function getSqlExecutor on null in homenatCodepersonalfuzzertestdoctrinedqlvendordoctrineormlibDoctrineORMQueryphp Stack trace homenatCodepersonalfuzzertestdoctrinedqlvendordoctrineormlibDoctrineORMAbstractQueryphp Doctrine ORM QuerydoExecute homenatCodepersonalfuzzertestdoctrinedqlvendordoctrineormlibDoctrineORMAbstractQueryphp Doctrine ORM AbstractQueryexecuteIgnoreQueryCacheNULL NULL homenatCodepersonalfuzzertestdoctrinedqltestphp Doctrine ORM AbstractQueryexecute main thrown in homenatCodepersonalfuzzertestdoctrinedqlvendordoctrineormlibDoctrineORMQueryphp on line How to reproduce php require DIR vendorautoloadphp config Doctrine ORM Tools SetupcreateAnnotationMetadataConfiguration empty true em Doctrine ORM EntityManagercreate driver pdosqlite config emcreateQuery execute Expected behavior Parse error Bug Report Q A BC Break Version Summary Entity ORM Entity ORM Tablenamestockinventory ORM CacheusageREADWRITE regionlocking Configuration Bundle for Symfony yaml orm autogenerateproxyclasses kerneldebug entitymanagers default namingstrategy doctrineormnamingstrategyunderscorenumberaware automapping true secondlevelcache regioncachedriver type service id cachedoctrineredis pool dl enabled true regions locking cachedriver type service id cachedoctrineredis pool dl l lockpath kernelcachedirdoctrineormlock While correct configuration would be yaml orm entitymanagers default secondlevelcache regions locking lockpath kernelcachedirdoctrineormlock type filelock Current behavior Running a write into the database will cause php TypeError Argument passed to Doctrine ORM Cache Persister Entity ReadWriteCachedEntityPersisterconstruct must be an instance of Doctrine ORM Cache ConcurrentRegion instance of Doctrine ORM Cache Region Defau ltRegion given called in appvendordoctrineormlibDoctrineORMCacheDefaultCacheFactoryphp on line Exception trace at appvendordoctrineormlibDoctrineORMCachePersisterEntityReadWriteCachedEntityPersisterphp Doctrine ORM Cache Persister Entity ReadWriteCachedEntityPersisterconstruct at appvendordoctrineormlibDoctrineORMCacheDefaultCacheFactoryphp Doctrine ORM Cache DefaultCacheFactorybuildCachedEntityPersister at appvendordoctrineormlibDoctrineORMUnitOfWorkphp Doctrine ORM UnitOfWorkgetEntityPersister at appvendordoctrineormlibDoctrineORMUnitOfWorkphp Doctrine ORM UnitOfWorkexecuteInserts at appvendordoctrineormlibDoctrineORMUnitOfWorkphp Doctrine ORM UnitOfWorkcommit at appvendordoctrineormlibDoctrineORMEntityManagerphp Doctrine ORM EntityManagerflush at projectRelatedFilephp Digging the issue So this is caused due here we are expecting Region interface This is propably correct functionality Here we pass it to the next class which causes this error The problem is in the Persister constructor we are declaring we want this one specific type This should be fixed with a interface abstract class or something Any toughts Or is this something for wontfix How to reproduce Configure previous settings and try persist something to the database Expected behavior Throw a handled exception not a type error Notes Im not sure how this architecture fully works so I would like if somebody else familiar with this would take this With correct configuration this works but I wasnt sure if I should post bug about this however I decided to post it just to make sure this is intended functionality I created a pull request for an issue with SQLFilters related to the EntityManager which is a dependency of the SQLFilter class but not exposed to child classes However Im now faced with another issue related to SQLFilters that is more of the result of the same mentality that continues to haunt me with Doctrine Im certain this wont be met with open arms because its honestly just an disagreement with approach But everything in Doctrine makes the assumption that developers using the library do not know what theyre doing and do not need to extend it freely Situation I need to create an SQLFilter that reads annotations Due to performance implications I need to be able to used the CachedReader as the annotations are already cached and being that its a filter which is applied on every query using the standard AnnotationReader without cache isnt really sufficient The performance hit is real Problem Filters are locked down tight You do not have access to the constructor and the filters after being constructed are not easily accessible So adding dependencies is a bit more of a challenge and nasty and prone to future BC breaks php entityManagergetFiltersgetEnabledFilters multitenancy setAnnotationReadercachedAnnotationReader That is really nasty It shouldnt be I also should be able to write filters and use this lib as needed for proper implementation Without SQLFitlers this ORM simply wouldnt work We need proper multitenancy support which needs to be applied via Filters for relational entity access etc Annotations are the most logical way of handling this Im requesting that SQLFilter design be revisited Id also encourage a bit of a change in mentality towards locking down the library but I realize thats just a difference in opinion and most likely unwelcomed There is no reason for the EntityManager to not be accessible within filters It causes extension writers to do code gymnastics to get the EntityManager Example 