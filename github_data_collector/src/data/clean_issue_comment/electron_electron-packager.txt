 Thanks for filing a pull request Please check off all of the steps as they are completed by replacing with x x I have read the contribution documentation for this project x I agree to follow the code of conduct that this project follows as appropriate x The changes are appropriately documented if applicable x The changes have sufficient test coverage if applicable x The testsuite passes successfully on my local machine if applicable Summarize your changes nodemodulesbin is excluded from the build by default but I also had the following directories in my project nodemodulesmochanodemodulesbin mysubmodulenodemodulesbin mysubmodulenodemodulesmochanodemodulesbin This led to the following issue on packaging Ive modified the pattern to exclude nodemodulesbin directories across the project Note this change actually matches the existing documentation in apimd Bumps semver from to details summaryChangelogsummary Sourced from semvers changelog changes log Add requiresemverpreload to load the entire module without using lazy getter methods Refactor module into separate files for better treeshaking Drop support for very old node versions use constlet functions and classes details details summaryCommitssummary bb c df Add preloadjs into npm package a ce d changelog for e d d c Add semverpreload module to just load the whole thing like it used to be d f update changelog travis and engines versions ed update tap f b d ed document exported modules bbb d Add default npm OSS GitHub settings Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version unless you reopen the PR or upgrade to it yourself dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in your Dependabot dashboard Update frequency including time of day and day of week Pull request limits per update run andor open at any time Automerge options neverpatchminor and devruntime dependencies Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details When handling the icon extendInfo and extraResource options were interpreting relative paths as relative to the current working directory rather than relative to the dir option x I have read the contribution documentation for this project x I agree to follow the code of conduct that this project follows as appropriate x The changes are appropriately documented if applicable x The changes have sufficient test coverage if applicable x The testsuite passes successfully on my local machine if applicable Adding test which shows that crosszip does not preserve symbolic links on windows After this build fails I will add another commit which reverts to show that this worked before Fixing this is only the first step in enabling building macOS packages on windows The next problem is that fsextra is using fsstat instead of fslstat which failes for symbolic links on windows I will open an issue there and see if this is intended or not So the package can not be moved EDIT Or maybe this is only an issue on my machines Because all the fsextra symlink tests are failing on my machine even when running as administrator I will investigate more Preflight Checklist Please ensure youve completed the following steps by replacing with x X I have read the contribution documentation for this project X I agree to follow the code of conduct that this project follows as appropriate X I have searched the issue tracker for a feature request that matches the one I want to file without success Problem Description I would like an error message to be displayed when the wrong version of Powershell is detected Currently electronpackager requires a powershell version of or later Yet all Windows machines only have Powershell version installed by default If using the wrong version of Powershell the electronpackager simply hangs at the extracting step without displaying any error or warning As such the only way to find out the cause of the problem is to come to this forum Proposed Solution I propose that electron packager check the Powershell version if on windows platform and throw an error if it detects the wrong version The powershell version can be detected by running the following command from the system command line powershell Command PSVersionTablePSVersion Alternatives Considered Currently the README lists Powershell as one of its dependencies but Powershell version is not something most Windows users are aware of Additional Information Judging by the number of related issues raised on this board it seems this is a fairly common issue for people on Windows machines Here are some examples Example Example Example I had the same issue myself prior to coming to these boards While I appreciate the effort the dev and support contributors have made to resolve and document these problems it would make electron packager easier for new developers to use if an error were thrown instead of just hanging While I understand that the README file lists dependencies it would make electonpackager an allaround better experience if it throws errors when the Powershell dependency is missing rather than silently hanging Powershell is not something many Windows users use and therefore may not be obvious what the problem is Preflight Checklist Please ensure youve completed the following steps by replacing with x x I have read the contribution documentation for this project x I agree to follow the code of conduct that this project follows as appropriate x I have searched the issue tracker for a feature request that matches the one I want to file without success Problem Description Is your feature request related to a problem Please add a clear and concise description of what the problem is AFAICS apologies if I missed smth electronpackager has a way to ignore paths from getting copied to the output artifact but blacklisting is a risky way to decide what goes in Add a file with sensitive info to the repo forget to add it to ignore and BAM A whitelist is stable and does answer directly the question what goes into the artifact Proposed Solution Describe the solution youd like in a clear and concise manner In the best of worlds you should just follow npm pack meaning respect the files section in packagejson and if none respect the npmignore or just stick to the current ignore flag Thanks for filing an issue If you have questions about usage see Please check off all of the steps as they are completed by replacing with x x I have read the contribution documentation for this project x I agree to follow the code of conduct that this project follows as appropriate x I have searched the issue tracker for an issue that matches the one I want to file without success Please describe your issue On MacOS If you trigger a User Notification from a renderer process eg via a Native Addon the notification is given a placeholder icon because the owning app the Helper lacks an icon If you specify an Icon that Icon should also be used for the Helper Apps or there should be an option to specify the Helper app icon separately Thanks for filing an issue If you have questions about usage see Please check off all of the steps as they are completed by replacing with x x I have read the contribution documentation for this project x I agree to follow the code of conduct that this project follows as appropriate x I have searched the issue tracker for an issue that matches the one I want to file without success Spec We have a requirement to execute some code after the icons and name change have all been complete but before the appasar has been generated Looking at the code we cant see any reason that the asar needs to happen during the initialize and would like to make a change to move this after the then thiscopyExtraResources has been executed We then need a hook similar to afterCopy and afterPrune etc that we can tap into This would either be done as an afterCopyExtraResources hook or a beforeAsar hook whichever is preferred Before we get working on this it would be great to have some feedback as to whether a PR for this would be accepted and any ideas about the implementation for example the choice between a before and after hook Feature Request Would it be possible to add some packaging lifecycle process callbacks to the options object js const packager requireelectronpackager packager dir dirname startevent const name path platform arch version event consolelogPackaging name for platform arch using electron vversion Packaging Slack for platform darwin x using electron v Packaging Slack for platform linux x using electron v progressevent const name path platform arch version progress message event consolelogprogress message example logs downloading downloading packaging cleaning emitting completeevent const name path platform arch version event consolelogPackaged name into path Packaged Slack into UsersmatthewwagerfieldDesktopslackbuildSlackdarwinx Packaged Slack into UsersmatthewwagerfieldDesktopslackbuildSlacklinuxx error packages if error consoleerrorerror else consolelogpackages name Slack platform darwin arch x version path UsersmatthewwagerfieldDesktopslackbuildSlackdarwinx name Slack platform linux arch x version path UsersmatthewwagerfieldDesktopslackbuildSlacklinuxx You will see in the pseudo code above the process lifecycle event objects always have the same information that is passed to your afterCopy and afterExtract methods js name Product Name path pathtobuild platform darwinlinuxwin mas arch ia x armv l version In addition to the above the progress method event object would receive two additional key values js message downloading packaging emitting etc progress To maintain consistency and for more useful information I have also suggested that the callback that is provided as the final argument to packager receives an array of package objects as opposed to an array of paths These package objects would contain the same information in the event objects With this addition it would be nice to have an option for turning off the default logs that are emitted when the packaging process initiates Packaging app for platform darwin x using electron v Perhaps an options like quiet true would be suffice 