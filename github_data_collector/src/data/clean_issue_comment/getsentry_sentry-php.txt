Hello Currently I cannot update our projects dependency from the old ravens sdk to the newest sentrys sdk version as there are compliances where we cannot expose our users private data eg token I know I can use beforesend hook to avoid posting data from the HTTP request but theres no way to scrub the data from the exception stack trace Sentry Frames vars I wonder if theres a feasible way to do so or if there are any plans in order to make this data scrubbing possible Otherwise I wont be able to update the sdk Reference img width altScreen Shot at pm src Cheers None we are seeing an issue where basically none of our issues are merging properly As far as i can tell its due to the memory locations automatically included by PHP in the stack trace for anonymous functions when i go to view similar issues and then diff on sentryio the only difference appears to be this one line in the stack trace ive seen the other conversations here but it seems like it was only addressed in some system areas of the code I would think keeping the lines in the stacktrace makes sense but maybe setting the fingerprint differently or maybe just filtering out the memory addresses from the stack trace For example when logging CSP violations with Sentry the projectID is needed Of course this is the last part of the sentry key but with the old Raven SDK it was possible to do clientproject to get the project ID I couldnt find a way to get the project ID with the new SDK Would be nice to have that Before we deducted from project root all excludes Now logic changed and we add to excludes all includes Example before projectroot app inappexclude appvendor And if comes frame with path appvendorxxx it not appears in sentry Example after inappinclude app inappexclude appvendor And if comes frame with path appvendorxxx it appears in sentry because we check inappinclude in the end of function If any cURL errors are thrown sentry catches these without the ability to forward them to the sentry dashboard This results in nothing being logged in either sentry or other logs Replication Install sentry and comment out the cacert file path in phpini I can imagine this could catch a lot of people out Clearly writing custom transport is not something as easy as it seems right now since you have to configure yourself the HTTP client with all the plugins needed for authentication Also since the behavior of the HttpTransport by sending events immediately instead of waiting the shutdown of the application is deprecated and has a significant impact on performance For applications with use cases where there is a need to send events immediately regardless of performance this is a big dilemma Although it is possible using a compiler pass or an extension that accesses the transport properties using reflection the solution may seem hacky and perhaps unnecessary Therefore the best outcome could be to give make this delay configurable so anyone can use it the way they want Q A Branch Bug fix no New feature yes BC breaks no Deprecations no License MIT To be able to log Sentry PHP framework incidents a logger is added to the option which be default logs nothing Integrations can set any PSR logger by setting an instance to the errorlogger option The logger is currently only used to log failures when sending an event Hi I like concept of class serializes but i have a bit specific use case I have classes like this php final class OrderId use EntityId And would love to be able to serialize them They have no common parent or either interface At first my idea was something like php final class GenericSentrySerializer param object object public function invokeobject array if methodexistsobject id return id string objectid if inarrayEntityIdclass Safe classusesobject true return id string object return null But this does not work since i have to pass into Options object array of type serializer AbstractSerializerresolveClassSerializers php foreach thisoptionsgetClassSerializers as type serializer if object instanceof type here it will fail serializers serializer Do you have any ideas how to overcome this limitation I could imagine having option genericclassserializers or universalclassserializers 