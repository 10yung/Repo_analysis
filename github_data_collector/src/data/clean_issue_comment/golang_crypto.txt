 Tests the OCSP ResponseStatus cases Define var ocspExtensionOID asn ObjectIdentifier as integer slice literal just like var idPKIXOCSPBasic asn ObjectIdentifier in ocspgo This adds support for ExternalAccountBindings into the cryptoacme client It is based on section of RFC I have tested this against Pebble with support for EABs as well as another CAs ACME implementation that requires EAB cc JoshVanL Fixes Motivation According to all implementation must support SHA however when no preferred hash algorithms are specified current implementation defaults to RIPEMD gpg on Linux defaults to SHA when no preferred hash algorithms are specified and as its the defacto standard implementation its probably not a bad idea to do the same Golangs current implementation of RSA PKCS v signatures with RIPEMD hash function is broken because RIPEMD has the wrong hash prefix I will open a separate PR for this issue So defaulting to RIPEMD creates signatures that no other implementation of PGP can verify Error of parsing certificate in the format pkcs pkcs unknown attribute with OID Updates golanggo The attribute is used in Windows IAS PEAP LDAPS certificates with identifier LOCALMACHINEKEYSET Microsoft Local Key set The fix is based on the patch in OpenSSL contributor Steve Henson opensslopenssldd e More info about problem installed Golang version and architecture details go env GOARCHamd GOBIN GOCACHEUsersGauravkLibraryCachesgobuild GOEXE GOFLAGS GOHOSTARCHamd GOHOSTOSdarwin GOOSdarwin GOPATHUsersGauravkProjectsGoProjects GOPROXY GORACE GOROOTusrlocalCellargo libexec GOTMPDIR GOTOOLDIRusrlocalCellargo libexecpkgtooldarwinamd GCCGOgccgo CCclang CXXclang CGOENABLED GOMOD CGOCFLAGSg O CGOCPPFLAGS CGOCXXFLAGSg O CGOFFLAGSg O CGOLDFLAGSg O PKGCONFIGpkgconfig GOGCCFLAGSfPIC m pthread fnocaretdiagnostics Qunusedarguments fmessagelength fdebugprefixmapvarfolders g t dfmzfx l w r gpTgobuild tmpgobuild gnorecordgccswitches fnocommon go version go version go darwinamd What did you do Im trying to replicate following gpg command with cryptoopenpgp package gpg armor output outputfile cipher aes compressalgo zip s kdigestalgo SHA encrypt recipient userkey sign u privatekeyid inputfile Im using cryptoopenpgp package to encrypt message with a public key and sign it with my private key Im using the openpgpEncrypt method and passed following config as parameter packetConfig packetConfig DefaultCipher packetCipherAES DefaultCompressionAlgo packetCompressionZIP CompressionConfig packetCompressionConfig Level flateBestCompression What did you expect to see Im expected to see my plain text input message to be PGP encrypted and must have ZIP compression What did you see instead Message I get from openpgpEncrypt method is properly signed and encrypted but not compressed Resolution Upon inspecting the Encrypt function and debugging the code found out that its not making use of compression config passed as argument anywhere in the flow Made a change in writego and added compression After this change the messages are properly encrypted and compressed ctrlc support This change exports a new interface from the xcryptossh library allowing an application to use this librarys implementation of the SSH Connection Protocol RFC but provide a separate implementation of the SSH Transport Protocol RFC Fixes golanggo 