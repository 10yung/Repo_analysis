How to specify whether to emit optional struct name during serialization I see no option for that here but I think there should be one It would be pretty awesome if you could provide an example as to how to test the validity of ron files with cargo test tests With that at least the tested files can be guaranteed to be valid I imagine it to look something akin to this rust deriveDefault struct Point x f y f cfgtest mod tests test fn loadronpoint let point OptionPoint loadPointpathtofileron asserteqpointissome true And the test failing if for some reason the ronfile from the given path is no syntactically correct Pointtype ron file It would be awesome if you could provide a small tool to statically check that all ron files from this project are valid and if not display in what line the error happens or what field is missing Chose to version up the crate to since changes to serializef and serializef were made using Ryu rather than tostring method serdejson uses Ryu to stringify float values just an FYI The reasoning behind this change because tostring will strip the decimals from the value if given a whole value example being f tostring will become the correct result should have been This leads to an issue when deserializing the data back to its original type Additionally added new tostring methods that includes the struct name other changes are result of Rustfmt The specific case Im running into that fails to round trip is serializes via Serializerserializenewtypevariant I believe that this is because Value doesnt store the name of the struct stored so deserialized named things become unnamed sequences cc Cards on the table Im the author of radix I noticed that ron uses base to serialize bytes I created a new base encoding and decoding library that is faster than the base crate especially when dealing with large inputs and thought that ron would be a perfect place to use it You can see that the api is pretty similar to what base offers This would be a breaking change for users since the type of DecodeError exposed in ParseError will change but otherwise I think its a net positive Let me know if you have any concerns I understand accepting a new dependency especially one thats self promoted like this can make people nervous Just tried to run cargobloat on Wrench the binary we use for WebRender debugging and saw this kvarkant mntcodefirefoxgfxwrwrench cargo bloat release crates Compiling Analyzing targetreleasewrench File text Size Crate MiB webrender MiB ron MiB std KiB webrenderapi KiB image KiB wrench KiB clap KiB winit KiB gleam KiB yamlrust KiB regexsyntax KiB regex KiB serde Adding function parallel to fromreader Would it make sense to follow the pattern introduced by other serde libraries of exposing a toplevel Error type that unifies the error types possible within the crate Some references JSON XML YAML bincode If people think this is a desirable feature Id like to submit a PR