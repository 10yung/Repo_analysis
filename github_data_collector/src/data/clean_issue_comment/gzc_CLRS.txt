problem a more complicated but elegant solution that uses no stack but assumes that two point ers can be tested for equality how to solve the other way you can see Morris Traversal Morris Inorder Tree Traversal O if prev rootparent prevroot implementation Give an efficient algorithm for computing the transition function for the stringmatching automaton corresponding to a given pattern P Your algorithm should run in time Om Hint Prove that q a q a if q m or P q a You can find answer on CPP void computetransitionfunctionchar P vectorchar Sigma int m strlenP vectorint pi computeprefixfunctionP forint q q m q forint i i Sigmasize i char a Sigma i int k minm q whileissuffixP k q a k int k q whilek P k a k pi k ifP k a k deltaq a k reverse reverse bcddcbcbdbcdb dcbcbdbcdbbcd answer i j i j When I comment out the statement line and It should be ok to continue work but RecursionError maximum recursion depth exceeded while calling a Python object on line I think it is bug on call fuction partition vector CC i j r void constructOptimalBSTauxconst vectorvectorint root int i int j int r if j i return if j i if j r cout d j k r endl else cout d j k r endl return int rootNode root i j if rootNode r cout k rootNode k r endl else cout k rootNode k r endl constructOptimalBSTauxroot i rootNode rootNode constructOptimalBSTauxroot rootNode j rootNode root i j void constructOptimalBSTconst vectorvectorint root int i int j if i rootsize j rootsize return int rootNode root i j if rootNode root root size cout k rootNode endl constructOptimalBSTauxroot i rootNode rootNode constructOptimalBSTauxroot rootNode j rootNode When inserting node z we search down the tree for the proper place for z For each node x on this path add to xrank if z is inserted within x s left subtree and leave xrank unchanged if z is inserted within x s right subtree Similarly when deleting subtract from xrank whenever the splicedout node had been in x s left subtree We also need to handle the rotations that occur during the fixup procedures for insertion and deletion Consider a left rotation on node x where the prerotation right child of x is y so that x becomes y s left child after the left rotationWe leave xrank unchanged and letting r yrank before the rotation we set yrank r xrank Right rotations are handled in an analogous manner the answers picture I think it wrong according the books picture the new node inserted should be red and its sibling is also red correctly Added weighted activity selection problem solution implementation Provided answersproofs for items