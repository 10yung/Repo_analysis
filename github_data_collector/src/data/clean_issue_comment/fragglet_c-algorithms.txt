I preface that Im quite new to C so this may be completely off However in the return value is used both for an operation that does not change the state of a set because the value already exists which may or may not be an issue and a memory error which is more likely to be an issue and of a different type Shall the former not use a kind of custom error code and the latter an ENOMEM according to Thanks Add CMakeListstxt It can help you build Splint is a static code analysis tool splint works with annotations These annotations help you to do two things it defines how functions behaves and which assumptions on input are made Using splint memory leaks might be detected The only downside is that it is a lot of work to go through all code But maybe it is possible to implement it data structure by data structure in a separate branch untill all structures are done Yes I know I could examine all the headers available but itd be nice if each documentation page listed which headers you need to include to use it At line of there is a function pointer for AVLTreeCompareFunc declared The declaration is typedef int AVLTreeCompareFuncAVLTreeValue value AVLTreeValue value But the documentation and code shows that this function is for comparing the keys of two nodes in the tree so the declaration should actually be typedef int AVLTreeCompareFuncAVLTreeKey key AVLTreeKey key As both AVLTreeKey and AVLTreeValue are themselves typedefed as void it doesn t actually make any difference to the function operation but it makes the prototype confusing 