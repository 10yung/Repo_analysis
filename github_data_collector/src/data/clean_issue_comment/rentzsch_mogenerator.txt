Hello In addition to Homebrew could you support MacPorts as a distribution method Homebrew is widely used by freelancers but is a complete mess to use at scale with managed fleet of Macs And the Homebrew team repeatedly shown disrespect to Apple guidelines leading their system to break other software on the device Homebrew has a long history of issue proving its not an enterprise grade distribution system unlike MacPorts With support for MacPorts Mac Admins would also be able to generate a pkg from your port to distribute it via fleet management solution without the need of a port solution on the endpoint That would be a really great addition to the long standing reference mogenerator And thanks a lot for your work Summary of Changes This incorporates a variety of updates to generated Swift code ObjectiveC generated code is not affected by this PR Changes are listed in the updated README and below This does not include Codable support for NSManagedObject subclasses which has been shelved for now Addresses NEW Update Swift templates for better Swift style Aleksandar Vaci FIX Fixed invalid call of NSManagedObjectfetchRequest Vincent Esche NEW Add support for URI and UUID attribute types Trevor Squires NEW Expose information when custom type is set through userInfo Aleksandar Vaci NEW Add Codable property support via a new attributeCodableTypeName user info key Tom Harrington CHANGE Nullability annotations for generated primitive accessors Michael Babin FIX Support for Uses Scalar Type Rok Gregori FIX Swift NSData to Data Christopher Rogers FIX Add specialized fetchRequest func to Swifts machine generated files xpablo FIX Correct Swift machine template for singleton fetchOne fetch request results Warren Burton FIX Expose allAttributes and allRelationships Trevor Squires Summary of Changes Remove the leading period from representedClassName when parsing NSEntityDescription as it signifies the user has selected the current module for scope If this is left in the generated class names get mangled but it is important for core data to have this information when going back and forth between a swift module and an ObjC module such as happens when your model is in a swift framework Addresses Feature Request Id like to see the template create fetch Foo Request methods that return an NSFetchRequest so that I can modify it in code before executing it Additional Information I have a modified template pair that does this Are you interested in a PR Should I wrap it in a template variable to optionally disableenable it Hi there the generated classes do have the NSNumber type for bool an double values In xcode there is a way to check Use scalar properties for primitive data types is there a way to realize this with mogenerator too I want to use modelisCkecked YES to set the value for a bool Feature Request I think it would be extremely useful if Swift developers could use Codable attributes in Core Data Core Data has long supported transformable properties which work transparently with any type that conforms to NSCoding Supporting Codable is conceptually the same thing values are stored in a binary form and converted tofrom a deserialized value as needed Core Data doesnt have support for this see rdar if you can but in the meantime we can do something about it Note that this issue is only about Codable for attributes Implementing Codable for managed object subclasses is a very different question addressed in The Plan Im working on the following scheme and would appreciate any feedback people might have Declare an attribute as binary In the attributes userInfo include a new key to be named attributeCodableTypeName The value is any Swift type name where the type conforms to Codable mogenerator generates custom accessor code for the property that converts tofrom the Codable type The code can use any valid binary encoding so long as its the same going in and coming out Im testing this with JSONEncoderJSONDecoder but the property list versions would work too For example given the following Swift type swift public enum EventType UInt Codable case party case concert case birthday case presentation One could add a binary attribute type to an entity and include attributeCodableTypeName EventType in user info The generated code for this property would be swift public var type EventType get let key EventAttributestype willAccessValueforKey key defer didAccessValueforKey key guard let primitiveValue primitiveValueforKey key as Data else return nil return try JSONDecoderdecodeEventTypeself from primitiveValue set let key EventAttributestype willChangeValueforKey key defer didChangeValueforKey key let primitiveValue try JSONEncoderencodenewValue setPrimitiveValueprimitiveValue forKey key Note that in this example EventAttributes is defined as a struct as in the current swift branch thanks to PR With this change values of EventType can be assigned to the type attribute in the same manner as tranformables are now Limitation This might be too similar to transformables in that it would be generally impossible to use values of these attributes in predicates Usually thats not an issue but with Codables it might be more problematic In this example for instance theres no support for fetching all objects with a given EventType value Id really like to get Codable support in though so any comments pro or con are appreciated There is a crash during conversion of compoundIndex created on child entity which contains attributes from parent entity It crashes there currentCompoundIndex addObjectcompoundIndexProperty line NSEntityDescriptionmomcomm and crash look just this Caught NSInvalidArgumentException NSArrayM insertObjectatIndex object cannot be nil There should be a message that indexes on inherited attributes are not supported Reproduce Create simple Core Data model with two entities Alpha Beta betas alpha with betas being optional while alpha being mandatory Set Codegen of entities to ManualNone Generate source code via mogenerator mogenerator model SRCROOTMogeneratorCrashMogeneratorCrashxcdatamodeldMogeneratorCrashxcdatamodel humandir SRCROOTMogeneratorCrashHuman machinedir SRCROOTMogeneratorCrashMachine swift Add generated code files to project Create entities guard let appDelegate NSApplicationshareddelegate as AppDelegate else fatalErrorCould not find AppDelegate appDelegatepersistentContainerperformBackgroundTask context in let alpha Alphacontext context let beta Betacontext context alphaaddBetasObjectbeta Run app Expected Behavior Shouldnt crash Actual Behavior Crashes MogeneratorCrash Terminating app due to uncaught exception NSInvalidArgumentException reason An NSManagedObject of class Alpha must have a valid NSEntityDescription First throw call stack CoreFoundation x fff aeefe b exceptionPreprocess libobjcAdylib x fffafacfcad objcexceptionthrow CoreData x fff aa c NSManagedObject initWithEntityinsertIntoManagedObjectContext MogeneratorCrash x b c TFC MogeneratorCrash AlphacfT entityCSo NSEntityDescription insertIntoGSqCSo NSManagedObjectContextS MogeneratorCrash x d TFC MogeneratorCrash AlphacfT entityCSo NSEntityDescription insertIntoGSqCSo NSManagedObjectContextS MogeneratorCrash x TToFC MogeneratorCrash AlphacfT entityCSo NSEntityDescription insertIntoGSqCSo NSManagedObjectContextS CoreData x fff aaf NSManagedObject initWithContext MogeneratorCrash x TTOFCSo NSManagedObjectcfT contextCSo NSManagedObjectContextS MogeneratorCrash x ca TFCSo NSManagedObjectCfT contextCSo NSManagedObjectContextS MogeneratorCrash x bd TFFC MogeneratorCrash ViewController viewDidLoadFTTUFCSo NSManagedObjectContextT MogeneratorCrash x cec TTRXFooCSo NSManagedObjectContextXFdCbdS CoreData x fff aba NSPersistentContainer performBackgroundTask blockinvoke CoreData x fff aab fa developerSubmittedBlockToNSManagedObjectContextPerform libdispatchdylib x f f c dispatchclientcallout libdispatchdylib x a a dispatchqueueserialdrain libdispatchdylib x fa dispatchqueueinvoke libdispatchdylib x a dispatchqueueoverrideinvoke libdispatchdylib x f d dispatchrootqueuedrain libdispatchdylib x f ee dispatchworkerthread libsystempthreaddylib x a a pthreadwqthread libsystempthreaddylib x a startwqthread libcabidylib terminating with uncaught exception of type NSException Further more mogenerator doesnt seem to respect the Optional flag or relationships It generates NSManaged open var betas NSSet which should be NSManaged open var betas NSSet no Additional Information Xcode mogenerator A sample project can be found here Question when settings min value to for an attribute of type Integer mogenerator generates value accessors with uint t primitive types Expected Behavior Core Data internally uses int t remember Integer so mogenerator value accessors should respect that and expose int t types Actual Behavior mogenerator probably look at the constraints min value set let it think its an unsigned value and decides to expose uint t primitive types in value accessors This is wrong as internally Core Data will use int t anyway you can see that using their new code generation Additional Information iOS Xcode Question I need the option for scalar nonscalar types and the optional checkbox in my application but mogenerator ignores both options checking unchecking of Use Scalar and Optional flag of an Int defined Value in the datamodel does not affect its generation its always an NSNumber Type in the machine file Entityswift Does anybody has the same problem or am i doing the generation wrong mogenerator swift model CoreDataCoreDataFilexcdatamodeldCoreDataNamexcdatamodel O CoreData M CoreDataMachine best reagards 