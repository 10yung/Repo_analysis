Hi First of all I am not a researcher just a programmer who is assigned to do something with CoSMoMVPA I have the most recent version of Matlab R a installed As mentioned in the title a couple of deprecated SVM functions are removed This issue is mentioned In the cosmoclassifymatlabsvm classm function But in cosmocheckexternalm Matlab is checked for the deprecated versions see subfunction getexternalshelper The result is that I am forced to install libsvm We would like to avoid that And you might want to update your code for Matlab Thanks for looking into this cheers Casper Strangely enough as of July surface files GIFTI files written with cosmomap surface cannot be read by AFNI SUMA Todo figure out if this is due to changes in AFNI SUMA the GIFTI toolbox CoSMoMVPA or an interaction Uses a oneliner instead of a loop Per Error was failure zstreamc not compiled see Makefile zstream hometravisbuildnnogiftigiftiprivatezstreamm savesavegii hometravisbuildnnogiftigiftisavem save hometravisbuildnnogiftigiftisavem cosmomap surfacewritegifti hometravisbuildnnoCoSMoMVPAmvpacosmomap surfacem cosmomap surface hometravisbuildnnoCoSMoMVPAmvpacosmomap surfacem testsurfaceiosaveandload hometravisbuildnnoCoSMoMVPAteststestsurfaceiom testsurfaceiotestsurfacedatasetgifti hometravisbuildnnoCoSMoMVPAteststestsurfaceiom I have a question on how to load nulldata when using the montecarlo algorithm Right now I have actual accuracy map as well as null maps from each participant and participants in total If I use the null maps as null data should I create a cell with each cell containing a volume dataset one null map from each participant The null maps are in niigz format so I will need to load in the null maps using cosmofmridataset and then store the output struct to the nulldata cell right Thank you Yuqi I get this error after our IT staff upgraded Matlab to from My guess is it is has to do with a change in the Matlab library but not sure Error using matlabgraphicsaxisAxesset Error setting property CLim of class Axes Value must be a x vector of numeric type in which the second element is larger than the first and may be Inf Error in imagesc line setcaxCLimclim Error in cosmoplotslices line imagescslice mn mx Error in StatsLDASVMsearchlightWB line cosmoplotslicesstatmapz To avoid code duplication for functionality currently used in cosmocrossvalidate it may be good to have a separate function for preprocessing see Some general ideas and notes of existing functionality Generally preprocessing involves two steps estimating parameters on a training dataset applying the parameters to a test dataset Currently we already have cosmomappca and cosmonormalize as preprocessing functions which can do these two steps through different call syntax cosmomappca uses pcaparams as an option to indicate that parameters should be applied to the input dataset in cosmonormalize the type of second argument string or struct indicates whether parameters are estimated or applied respectively Another sort of preprocessing function is cosmoaveragesamples which computes averages over subsets of samples Currently this function is only used for training datasets Unless cosmomappca and cosmonormalize cosmoaveragesamples returns an output different in size from the input It would be good to support preprocessing functions to be chainable where the output from one function forms the input of the next This is currently possible with cosmomappca and cosmonormalize apart from functions currently discussed at PR integration with cosmonaivebayesclassifiersearchlight would also be useful for efficiency reasons it would be good if this function would support numeric matrices with samples directly It can actually be debated whether it should also support dataset struct input If yes then it becomes more of a general purpose function if no a lowlevel helper function Questions that may merit discussion are Function signatures Some options are two separate functions say preprocesstrain and preprocesstest one function distinguished by keyword differences say preprocessdstrain normalization zscore and preprocessdstestmodelmodelstruct as in cosmomappca one function distinguished by argument order say preprocessdstrain normalization zscore and preprocessmodelstructdstest In all cases it seems reasonable that the output should consist of the samples after preprocessing and as second output the model Once decided about function signature maybe adjust cosmomappca and cosmonormalize to support such signatures as well Support multiple preprocessing functions It would seem reasonable to hardcode the functions to be used for preprocessing ie cosmomappca and cosmonormalize However it would be nice to write the code in such a way that future normalisation options can be added easily What would be the best way to approach this Classifiers return their decision values too Add functions cosmomeasure to correlate decision values to external vector As suggested by Brendon Ritchie it would be useful to provide support for linear discriminant contrast analysis see Walther et al Reliability of dissimilarity measures for multivoxel pattern analysis I would like to start with a proposal here to add such functionality and would welcome feedback and comments introduce a new measure for example named cosmoldcmeasure as cosmocrossvalidationmeasure it would require an option partitions which is used for crossvalidation Multiple folds are supported There as an output option that can be set to rdmperfold rdm averagerdm or averagerdmperfold RDMs are represented as a column vector with PP values Pnumber of classes with satargets and satargets set appropriately as in cosmodissimilaritymatrixmeasure When using perfold then output is produced for each fold and a field safolds is added otherwise it is averaged over folds Other points for discussion This proposal does currently not involve integration with cosmotargetdsmcorrmeasure such functionality would be nice to add in the future though It may be useful to have a lightweight cosmoldcpdistfunction that simply computes the pairwise distances between two matrices with patterns This function can be called by cosmoldcmeasure This function can be tested separately maybe add an option to output LDt values tvalues Feedback much appreciated dont forget to use annotated or signed tags 