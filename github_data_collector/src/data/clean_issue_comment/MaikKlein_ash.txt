Remaining work x Include VkPipelineExecutableInternalRepresentationKHRcurrently excluded as it generates invalid Rust code x Passes cargo check VKSTRUCTURETYPEPHYSICALDEVICEVULKAN FEATURES VKSTRUCTURETYPEPHYSICALDEVICEVULKAN PROPERTIES VKSTRUCTURETYPEPHYSICALDEVICEVULKAN FEATURES VKSTRUCTURETYPEPHYSICALDEVICEVULKAN PROPERTIES The above associated types are not generated x Decide what to do about breaking API changes making pre types unreachable type aliases generated Update nongenerated code x Test new features against a Vulkan Driver Test dependent cratesgfxhal vkmem full list Fixes Version got released today We should try to support it soonish Might need to update the vkxml parser again Update the parser generator to output ffi bindings Expose a high level wrapper Add a simple example to test some of the new features I also wanted to implement VKAMDdrawindirectcount at the same time considering its the same API but there is no amd under extension If everything is fine with this PR just tell me and Ill do the copy pasting In the specification the parameter pipelineCache of vkCreateGraphicsPipelines is defined as optional pipelineCache is either VKNULLHANDLE indicating that pipeline caching is disabled or the handle of a valid pipeline cache object in which case use of that cache is enabled for the duration of the command command successcodesVKSUCCESS errorcodesVKERROROUTOFHOSTMEMORYVKERROROUTOFDEVICEMEMORYVKERRORINVALIDSHADERNV prototypeVkResulttype namevkCreateGraphicsPipelinesnameproto paramtypeVkDevicetype namedevicenameparam param optionaltruetypeVkPipelineCachetype namepipelineCachenameparam paramtypeuint ttype namecreateInfoCountnameparam param lencreateInfoCountconst typeVkGraphicsPipelineCreateInfotype namepCreateInfosnameparam param optionaltrueconst typeVkAllocationCallbackstype namepAllocatornameparam param lencreateInfoCounttypeVkPipelinetype namepPipelinesnameparam command Therefore pipelinecache in creategraphicspipelines should also be an Option While trying to build the examples on osx I would get the following error error E type annotations needed Usersplotcargoregistrysrcgithubcom ecc db ec cocoa srcappkitrs msgsend self setStringValuelabel consider giving result a type note this error originates in a macro outside of the current crate in Nightly builds run with Z externalmacrobacktrace for more info After making the changes in this PR I was able to build the examples on osx and run the bin instancegetphysicaldevicefeatures exists but I want to check for extension features for which you need vkGetPhysicalDeviceFeatures That one does not seem to be exposed as theres no getphysicaldevicefeatures I assume its somehow related to since its also a free function that neither takes an instance nor a device though I think as seen from the loader its instancescoped sort of Ran into this specifically for if I pass a reference to an empty slice asptr doesnt necessarily return NULL Is EntryV being held back for a reason Ie this code is missing rust implL EntryV for EntryCustomL fn fpv self vkEntryFnV selfentryfn Is there some other way to enter vulkan All the examples use so they arent giving me any clues fixes Quick and dirty implementation for builders inside slices We replaces all slices with a Foo a impl CastFoo and we implement unsafe impl crateCastFoo for FooBuilder This allows us to have a slice for both Foo and FooBuilder This is only a preliminary implementation so that we can talk about it Alternatively we might just only use builders for builders without any generics tldr You dont have to call build anymore Rust new devicecreategraphicspipelines graphicpipelineinfos None old devicecreategraphicspipelines graphicpipelineinfosbuild None If you call build as late as possible you everything is still lifetime checked But if you dont you can run into some lifetime issues as build just throws away all the lifetime information With this PR you can use builders everywhere and you dont need to bother anymore with calling build manually 