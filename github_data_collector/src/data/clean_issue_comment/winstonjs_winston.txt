 Please tell us about your environment winston version winston x winston node v outputs v Operating System Windows Language TypeScript What is the problem Type defintions for the loggerlog method doesnt allow Errors to be passed in as messages without overriding the type of the error typescript interface LogEntry level string message string optionName string any interface LogMethod level string message string callback LogCallback Logger level string message string meta any callback LogCallback Logger level string message string meta any Logger entry LogEntry Logger What do you expect to happen instead In the loggerjs the log method examples clearly show the method taking both strings and errors as message inputs And i can confirm that works in practice javascript loggerloginfo Hello world custom true loggerloginfo new ErrorYo it s on fire loggerlog level info message Hello world custom true loggerlog level info message new ErrorYo it s on fire Basically the typedefs should be changed to reflect the current functionality As shown below typescript type LogCallback error any level string message string Error meta any void interface LogEntry level string message string Error optionName string any interface LogMethod level string message string Error callback LogCallback Logger level string message string Error meta any callback LogCallback Logger level string message string Error meta any Logger entry LogEntry Logger The changes should propogate to the Logform definitions as well Please tell us about your environment winston version winston x winston node v outputs Operating System Linux Language ES What is the problem Winston doesnt output any logging messages nor does it throw an exception when the Log Level supplied is not in lowercase Winston Log Levels are currently incompatible with Docker Log Levels where the issue originated from Docker Compose Commands javascript const winston requirewinston const format transports winston const printf format const consoletransport new transportsConsole format printfinfo return infolevel infomessage function getLoggerservice if winstonloggershasservice winstonloggersaddservice level INFO Level CANNOT be uppercase transports consoletransport return winstonloggersgetservice const logger getLoggerDefault loggerinfoConsole output test What do you expect to happen instead Throw an error when Level doesnt exist in Levels or at least raise a warning to indicate the issue ull Fix error Cannot destructure property message of undefined or null on getAllInfoerr at ExceptionHandlergetAllInfo nodemoduleswinstonlibwinstonexceptionhandlerjs at ExceptionHandleruncaughtException nodemoduleswinstonlibwinstonexceptionhandlerjs at processemit eventsjs at processEventEmitteremit domainjs at processfatalException internalprocessexecutionjs NOTE for support questions please use StackOverflow This repositorys issues are reserved for feature requests and bug reports Please tell us about your environment winston version winston x winston node v outputs Operating System Windows macOS or Linux Language all TypeScript XX ES ES Dart What is the problem Im using NestJS I would like to override all consoleXX to winston logger as global Something like below but I dont know how to global it on NestJS consolelog function loggerinfoapplylogger formatArgsarguments consoleinfo function loggerinfoapplylogger formatArgsarguments consolewarn function loggerwarnapplylogger formatArgsarguments consoleerror function loggererrorapplylogger formatArgsarguments consoledebug function loggerdebugapplylogger formatArgsarguments Please describe how to reproduce the problem including a minimum working code example What do you expect to happen instead Please explain how you would expect your code to function Other information eg stacktraces related Github issues suggestions on how to fix links for us to have more context eg stackoverflow gitter etc If nothing please remove this section Thank you for contributing to winston Please review this checklist before submitting your issue Please ensure that your new issue conforms to our contribution guidelines Participation in this open source project is subject to the our CoC For feature requests delete the above and uncomment the section following this one But first review the existing feature requests and make sure there isnt one that already describes the feature youd like to see added Whats the feature If this is a NEW feature request please include a description of the feature a short code sample of the API and the motivation use case for changing the behavior What problem is the feature intended to solve Is the absence of this feature blocking you or your team If so how Is this feature similar to an existing feature in another tool Is this a feature youre prepared to implement with support from us I am using winston I am trying to accomplish waiting for logs to finish after uncaught error and uncaught exception with multiple loggers then exiting I tried many things like loggerend and only this very strange set up is working I am looking for suggestions on how to make it like it should be It might not necessarily be a bug but its at least not well documented Heres my really weird code to make this work sorry for the long minimal example I tried to remove a much as I could javascript const winston requirewinston const formats requireformats custom formats const transports requiretransports custom transports class Logger constructor thisloggers BEGIN WEIRD PART processonunhandledRejection async reason thislogunhandledRejection reason processonuncaughtException async reason thisloguncaughtException reason if thisloggerHasFinished await thiswaitForLoggerToFinish processexit loggerHasFinished figure out if loggers already finished using weird way let finished true for const i in thisloggers if thisloggers i readableStateresumeScheduled false finished false return finished async waitForLoggerToFinish noop log function or it might never end const logPlaceholder thislog thislog await on finish event from all loggers const promises for const i in thisloggers const promise new Promiseresolve thisloggers i onfinish resolve promisespushpromise await Promiseallpromises thislog logPlaceholder END WEIRD PART log args const log level debug message args timestamp Datenow for const i in thisloggers thisloggers i loglog addFile file const i filefile thisloggers i winstoncreateLogger levels format formatsfile transports new transportsFilefile thisgetAbsoluteFilePathfile level debug addElasticsearch index const i elasticsearchindex thisloggers i winstoncreateLogger levels format formatsjson transports new transportsElasticsearchindex level debug moduleexports new Logger this is the transport javascript class Elasticsearch extends Transport constructor options superoptions async log info callback setImmediate thisemitlogged info const formattedLog info Symbolformessage try await thiselasticsearchaddformattedLog catch e callback Also my solution doesnt always work for example this doesnt wait and exit right away javascript setTimeout throw Errorerror I cant seem to find in the docs where I can set the log level by packagejson script debugredis or errors or Please tell us about your environment winston version Whats the feature RFC syslog levels should allow one to use loggerwarn to make a log at syslog warning level Yes the name of the log level is technically warning but this does not mean we can not provide a method named warn that logs at the warning level What problem is the feature intended to solve Brings the interfaces for npm levels and syslog level closer avoiding some errors Its more convenient npm warn and syslog warning semantically mean the same thing Is the absence of this feature blocking you or your team If so how No Is this a feature youre prepared to implement with support from us Yes Please tell us about your environment Not applicable What is the problem The README on log levels tells us that RFC log levels and npm log levels are supported A link is provided to the details for RFC but not for npm log levels What is the origin of these npm log levels Is there a spec somewhere Or is it something Winston made up A link to a source definition of these log levels would be very helpful What do you expect to happen instead Understand better not have to search for answers after reading README Other information None Please tell us about your environment NA What is the problem The logging levels in the README dont match the RFC syslog Its matching NPM NpmConfigSetLevels What do you expect to happen instead Change README to either set correct syslog level nor specify an example with NPM levels Can you add a space between the info message and the meta message loggererrorfoo new Errorbar results in foobar as message foo bar would be nicer i think