Ive seen several requests in the issues backlog for support extension X Y Z sort of things I started reading through and realised what a huge document this is and how complex this process is currently I feel like this could be solved by if Heroku finds an extension not supported out the box that it tries to install it from PECL eg if an application depends on extuuid and uuid is not available already it tries pecl install uuid perhaps I think this would solve the majority of extension requirements but I have a feeling it might be easier said than done sweatsmile When adding php to composerjson the build fails using web vendorbinherokuphpnginx composerjsoncomposerlock requires php no matching package found At least and are wrong Not sure what it should be At least using herokuheroku gives docker Error response from daemon oci runtime error containerlinuxgo starting container process caused exec bob executable file not found in PATH when trying to run docker run rm ti envfileherokuphps dockerenv xdebugheroku bob build php xdebug Currently I dont think there is a way to configure a different memory limit for web dynos and worker dynos But this would be a great feature given we have different needs for web dynos you want to keep the memory limit low but still enough for the needs of the application to allow for concurrency at the PHPFPM level The buildpack will properly guess the number of PHPFPM workers based on the configured memory limit and on the dyno size for worker dynos the optimal solution would be to have the memory limit equal to or close to in case keeping a bit of extra memory for something else makes sense the dyno memory as there is only one process running For now I configured my Procfile to use php d memorylimit M binconsole to override the memory limit of the phpini when running the worker But this does not adapt automatically when scaling the dyno to bigger sizes An idea I have would be that the buildpack exposes an env variable with the guessed worker memory limit that could be used in such command or a script returning it to use it as php d memorylimitvendorbinherokubuildpackworkermemorylimit binconsole if thats easier What do you think about that dzuelke The previous PR had a bug where the REGEX for grep was not properly escaped This PR fixes that issue The goal of this PR is to add a github action that checks for the presence of a changelog entry It is better to add entries as a PR is merged instead of having to remember what was merged and generate a changelog at release time By automating this check its one less thing the maintainer has to remember and its one less thing a change might be blocked on ie Looks good but please add a changelog entry Let me know if you have any questions and Happy Friday We use the data warehouse Snowflake To access it from PHP requires either general ODBC support or their own pdosnowflake extension Is it possible to add support for any means of connecting to snowflake from within the heroku php buildpack Support of Brotli compression on apache and nginx could be nice to have along Gzip and Deflate As of today the following error is displayed when deploying an application T app web herokuexec Starting T app web warming up PHP OpCode caches for application MyApplicationName T heroku web State changed from starting to crashed T heroku web State changed from crashed to starting T app web Unable to determine Composer vendordir setting is composer executable on path or composerphar in current working directory T heroku web Process exited with status In Procfile we have bash web startWebProcesssh Then in startWebProcesssh bash Manually warmup the OpCode cache to prevent cache slams thundering herd problem link Warming up the OpCode caches takes around seconds When the WebServer has not started within seconds Heroku assumes it is crashed Therefore we should use the ampersand to start this process in the background This way the WebServer does not have to wait for this process to end echo warming up PHP OpCode caches for application HEROKUAPPNAME composer warmupopcode Eventually launch the Apache WebServer which has PHP support and public as WebRoot vendorbinherokuphpapache public This way of invoking the composer warmupopcode script see used to work for quite some time Versions Installing platform packages remote php remote extgd bundled with php remote extintl bundled with php remote extmbstring bundled with php remote extsoap bundled with php remote extimagick remote extapcu remote apache remote nginx remote Installing dependencies remote Composer version Might be related to and Is it still possible to invoke a composer script And if so how to do it correctly Note that using heroku run bash app myapplicationname and then invoke composer warmupopcode works properly UPDATE Apparently the error message itself comes from running vendorbinherokuphpapache public This might have been there for a while but apparently combined with another command it now crashes the application Manually reverting the used buildpack to v resolves the problem with the crashing app heroku buildpacksset a myapplicationname So maybe the new version v is a bit stricter in dealing with error messages and marking the app as being crashed This PR adds support for the gzipstatic directive and allow nginx to serve precompressed static files 