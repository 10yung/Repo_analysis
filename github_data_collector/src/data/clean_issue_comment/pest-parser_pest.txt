My program needs users to input the grammar and then parse another input data So I need to build a parser from a grammar string which user inputed like this let parser ParserFactorybuildnumber ASCIIDIGIT let pairs parserparsenumber unwraporelsee panic e How can I do this For my reStructuredText project I d like to generalize a syntax construct called directive rst directivename argument indented block Both arguments and blocks are either reStructuredText or something else depending on the directive Eg in the following case both argument and the block are plain text dedent the block and done rst code python def foo pass This directive on the other hand has no arguments and a rSTformatted block rst note I have italic text code And nested syntax My question I store the indentation in the stack Do I have to copy and trim the text to be able to parse it or is there a way to modify a parser s stack before letting it do its thing I am working in a Nodejs based WASM project I would like tell Pest about my grammar unfortunately the grammar cannot be opened for whatever reason I can pass files into my lex function as a WASM export I know that the Pest website runs a WASM version with dynamic grammar so this most be possible although I cant find the Rust srcs for it How do I derive grammar as a string but not using grammar or grammarinline Note that I am a Rust beginner With srcpestrs having rust use pestderive deriveParser grammar grammarpest pub struct Parser on pestderive v and pest v pest v same error on both versions it returns the following errors error E failed to resolve could not find iterators in pest srcpestrs deriveParser could not find iterators in pest error E failed to resolve could not find error in pest srcpestrs deriveParser could not find error in pest error E failed to resolve could not find Atomicity in pest srcpestrs deriveParser could not find Atomicity in pest error E failed to resolve could not find unicode in pest srcpestrs deriveParser could not find unicode in pest error E expected trait found struct pestParser srcpestrs deriveParser not a trait error E cannot find type ParserState in module pest srcpestrs deriveParser not found in pest error E cannot find type ParseResult in module pest srcpestrs deriveParser not found in pest error E cannot find function state in module pest srcpestrs deriveParser not found in pest This miiight be related to Say a piece of code deriveDebug pub enum Expr Numberi OpBoxExpr Opcode BoxExpr deriveDebug pub enum Opcode And Or let code I want to parse code as the result OpOpOpNumber And Number Or OpNumber And OpOpNumber And OpNumber And Number And Number And Number I can use lalrpopscript like this use stdstrFromStr use crateExpr Opcode grammar pub Expr BoxExpr Expr ExprOp Term BoxnewExprOp Term Term BoxExpr Num BoxnewExprNumber Expr Num i r i fromstrunwrap ExprOp Opcode OpcodeOr OpcodeAnd But the same code written in pestscript expr expr operator term term term num expr operator num ASCIIDIGIT Will throw an error rule expr is leftrecursive expr expr pestprecclimber might be useful in this case I have found the allhandwritten calculator in pesttest so must I written like that if I want to deal with the leftrecursive problem Any better idea I like the online grammar editor much I use it to draft my little languages but its not very convenient to use because its small Is there a wider editor somewhere else on the internet Or would it be possible to just make those input frames resizable PUSHPEEK is currently undocumented behavior Currently pest is the slowest parser in the chart on the website For people who arent used to thinking in terms of absolute numbers and have no experience with Nom or Serde that leaves the impression that Pest is slow Itd be a good idea to include at least one comparable wellknown parser generator from another language on that chart to give people a more intuitive frame of reference Something like ANTLR or Parsec Im trying to use pest to parse a Clike language and Im having trouble creating a lowprecedence rightassociative ternary operator and having it play nicely with a precedence climber for binary operations My current grammar includes rust expr term binop term ternary term boolconst intconst ident expr unaryexp unaryexp unop term ternary term term term and Im using PrecClimber on expr Do you have any suggestions Ive been working on a project with a fairly large grammar for a while now and in the process Ive had to write and maintain code to convert the output of pest parsing to the actual AST I need in my project I started out with a bunch of adhoc macros to help with dealing with the Pair API but after a lot of iteration I got to a nice design that I thought could be of use for others I did have a look at pestast but I couldnt find basic documentation and it was too rigid for my usecase So I made it into a crate called pestconsume It uses procedural macros and works on stable Rust It is flexible and makes code that is IMHO easy to write read and update when the grammar changes I thought Id advertise it here because I feel it neatly complements pest to make writing parsers a great experience Also since there has been discussion around changing the pest API for pest I propose this design as something that has worked for me on a large project Id be excited to hear what you guys think about it if the docs are clear enough and if you think you may want to use it in your project If the pest devs like it maybe this crate could be mentioned in the pest docs 