This is not compatible with Rails Due to Zeitwerk constants in initializers must be specified as String or wrapped in an onload hook Hi How can I turn off the logging in production Its becoming impossible to read the log files via ssh because the logs scroll so much with every message and every attachment being logged to the productionlog file Thanks UPDATED on Nov The problem is as the title describes the original post is just an example to explain how the problem impacts my case The information ignored by griddler is the charset information in my example it is written between the boundary line and email raw body ContentType textplain charsetISO JP ContentTransferEncoding bit Griddler can fetch the text written before the boundary line in my example its mimepart d b e cbca fe beb ac as rawheader and the text in email body in my example it starts from the garbled text as you can see as rawbody but sometimes some emails like to put some texts between the boundary line and the raw body In my example it is the charset information and it cannot be fetched by griddler now The expectation is DO NOT MISS ANY TEXT IN THE EMAIL SOURCE ORIGINAL POST The following code is the source code of the email that I received and want to post into my Rails app via griddler This email is in Japanese and encoded with charset iso jp thus it is probably garbled in your browser And it is indeed garbled as it shows in my app What I want to do is to fetch the charset information if it is iso jp then do encodeutf iso jp for the rawbody so that the Japanese can show normally in my app If it is already utf then do nothing The problem is griddlers rawheaders attribute can only fetch the information before the boundary line while rawbody starts from the line after ContentTransferEncoding bit thus it seems that I have no way to get the charset information that I want via griddler Could somebody help fix this problem MimeVersion ContentType multipartalternative boundarymimepart d b e cbca fe beb ac mimepart d b e cbca fe beb ac ContentType textplain charsetISO JP ContentTransferEncoding bit B q w BDj IR YO B B n B BFO I BLnZNF I BG ID BGO qFb i AJ ILY B IB BLnZrhjB F B GAP BGZ l IJrhj rg HBg F O AirjC B PC BlMQ B B B ActionControllerParameters is not a Hash anymore and doesnt behave like one since Rails We need to coerce it to a Hash since the rest of our codebase expects it to be a hash and all strings to be properly A possible fix for issue An example file that reproduces the problem can be provided to the reviewer Hello First and foremost thank you for creating such an awesome project for email processing The reason why this ticket is created is because there is a particular email that in our production system using griddler manifests really slow s s execution times for GriddlerEmailParserextractreplybody depending on the machine Since this can be theoretically used for denial of service attacks it is preferable to hand over the script that consistently reproduces the problem in a non public channel Thanks for letting me know how this issue can proceed Regards Cristian I am trying to integrate griddler with amazon SES through s Using s allows for bigger message size supporting message attachments The basic flow is the following AWS SES receives the emails writes it down in a s bucket with encryption and sends a SNS notification I intercept this SNS notification in a lambda and my lambda will send a job to some sidekiq queue with the references to the s item in the bucket up to this point its all serverless I have a Sidekiq worker that will be processing jobs from this queue Basically my worker receives a job with the s bucket key strings and will retrieve decrypt the email from s Once decrypted I actually end up with an IOfile that I can convert to a string that contains the content of the email ReturnPath cyrilexamplecom r n Received from mailwm f googlecom mailwm f googlecom r n by inboundsmtpeuwest amazonawscom with SMTP id ContentType multipartalternative r n boundary BE CAE EDF F EAD r n ContentLanguage enUS r n r n This is a multipart message in MIME format r nBE CAE EDF F EAD r nContentType textplain charsetutf formatflowed r nContentTransferEncoding bit r n r n My Message So basically I dont need to mount any engine since I am processing emails asynchronously via queues How would I go about plugging this into griddler Actually is there any point in using Griddler at all I thought I could still take advantage of the reply above this line and other hash builtin is it still the case EDIT basically I am easily parsing a Mail with Mailnews object what do I do next to leverage other griddler functionalities Hello Im using Griddler to receive email for distribution to a mail list Im having trouble reconstructing the inline attachments data because email doesnt contain any filenamecontentid mapping as appears in the original message in the emailrfc param For example an incoming email with an inline attachment has something like this in the original message body AppleMail A EA BDD C AC A r nContentTransferEncoding base r nContentDisposition inline r n tfilenamefoojpg r nContentType imagejpeg r n txunixmode r n tname foojpg r nContentId B B CD B A F BD B r n The ContentId number appears in the emailrawhtml as the img srccid but the filename is not mentioned in the img tag For example the message above would have in emailrawhtml img appleinlineyes idD A BEB AD C BB srccidB B CD B A F BD B class As a result when I resend the message the image placeholder icon appears inline with the attachment at the bottom of the email It would be great if emailattachments had a field for the ContentId Then I could do something like this in my Mailer class message attachments each do ad if adcontenttypeincludeimage attachmentsinline adoriginalfilename mimetype adcontenttype content Filereadadtempfile cid adcontentid else attachments adoriginalfilename mimetype adcontenttype content Filereadadtempfile end end mailto recipient from from subject subject do format formathtml render html htmlbodyhtmlsafe unless htmlbodyblank formattext render text textbody end and my mail service SparkPost would be able to map the attachment filename to ContentId correctly and the image would display inline Is there a known workaround for handling inline attachments Many thanks I added Griddler to a Rails app it bundled but raised on runtime griddler appcontrollersgriddleremailscontrollerrb in classEmailsController undefined method skipbeforeaction for GriddlerEmailsControllerClass NoMethodError This happens because the skipbeforeaction API is introduced only in Rails Assuming theres no intention in support the version explicitly require Rails so Bundler can complain in buidl time 