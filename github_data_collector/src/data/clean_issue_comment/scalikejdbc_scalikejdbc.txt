I am getting scalareflectinternalSymbolsCyclicReference illegal cyclic reference involving refinement of scalikejdbcQueryDSLFeature with scalikejdbcSQLInterpolationFeature with scalikejdbcSQLSyntaxSupportFeature when compiling with scala version Compiling scala with works fine I have generated model classes with scalikejdbcGen I tried regenerating the classes with the updated scala version but it still produces the error I am using Scalikejdbc version Am I missing something here Scala team announced their great roadmap to Scala version I believe its about time to talk about the possibilities we can cater to the existing users in Scala and beyond I have the following topics here Macros incompatibility issues in Scala My motivation towards Scala Decision time for Scala Continuing Scala maintenance Macros incompatibility issues in Scala According to What about macros While Scala can generally consume libraries built with Scala this does not work for macros Macro methods defined in libraries cannot be used in Scala because the Scala compiler cannot execute the macro at compiletime The macro system from Scala is deeply tied to the internals of the Scala compiler and cannot be migrated in a compatible fashion to Scala Instead Scala ships with a new macro system This means that macro definitions have to be rewritten when migrating a codebase to Scala Crossbuilding is possible by having separate source files for Scala and macro definitions Libraries that define macros can be made available for both Scala and Scala by crosscompiling So Scala s macro system is not compatible I have to say its challenging for this project Particularly SQLInterpolationMacro is the most valuable piece of this library I dont think people will still see the benefits of using ScalikeJDBC if without the feature In my understanding offering the exact same functionalities in Scala is almost impossible If someone has ideas or alternatives that may be acceptable for many I would love to hear those If we find some ways to continue supporting both Scala and I will continue this project for sure Otherwise I hate to say this but if we cannot be with Scala with good quality we may have to announce that ScalikeJDBC wont support Scala and will continue maintenance releases only for Scala x My motivation towards Scala Im a bit concerned about the number of reachable developers in the Scala world Generally speaking the transition to something incompatible is always hard and it tends to take a long time To me this project is a completely voluntary work I have a fulltime job other opensource projects and time with my family My time is limited The possible outcomes will depend on my subjective observation For now Im not so convinced to dedicate my time to Scala related works yet Depending on circumstances I may consider looking for future maintainers even if this project continues Decision time for Scala I dont think many of Scala users can move to Scala so quickly It may take a long time or never happens to some Even if this project cannot come up with something for Scala at the moment it doesnt mean we immediately have to make decisions like giving up supporting Scala Continuing Scala maintenance The only certainty at this point is that ScalikeJDBC will continue Scala x maintenance releases for a while I dont guarantee concrete figures here but I will be committing to Scala at least for a few years from now on My to the community Thank you for reading this to the end Although this project is facing difficulties I hope the Scala community will have a bright future also with version Im getting below exception when trying to get connection through google service account using google bigquery progress driver T ERROR SecureExceptionHandlerImplhttpapr exec Cannot get a connection pool error Could not create a validated object cause TibcoSoftware GoogleBigQuery JDBC Driver The current database does not support transactions I have the following stored procedure in psql mean to truncate the database as I could not find support for that in scalikeJDBC CREATE OR REPLACE FUNCTION truncatetables RETURNS void AS DECLARE statements CURSOR FOR SELECT tablename FROM pgtables WHERE schemaname public BEGIN FOR stmt IN statements LOOP EXECUTE TRUNCATE TABLE quoteidentstmttablename CASCADE END LOOP END LANGUAGE plpgsql But I cant seem to find a way to use this with sql interpolation I have tried different variations of def truncateDatabaseimplicit session DBSession Try Unit val sql sqlsperform truncatedatabaseupdateapply But I cant seem to find a way Is this supported at all Or Am I just blind Thankful for all help Add double quotes for column name otherwise may conflict with reserved keyword orgpostgresqlutilPSQLException ERROR syntax error at or near limit orgpostgresqlcorev QueryExecutorImplreceiveErrorResponseQueryExecutorImpljava postgresql jar at orgpostgresqlcorev QueryExecutorImplprocessResultsQueryExecutorImpljava postgresql jar at orgpostgresqlcorev QueryExecutorImplexecuteQueryExecutorImpljava postgresql jar at orgpostgresqljdbcPgStatementexecuteInternalPgStatementjava postgresql jar at orgpostgresqljdbcPgStatementexecutePgStatementjava postgresql jar at orgpostgresqljdbcPgPreparedStatementexecuteWithFlagsPgPreparedStatementjava postgresql jar at orgpostgresqljdbcPgPreparedStatementexecuteUpdatePgPreparedStatementjava postgresql jar at comzaxxerhikaripoolProxyPreparedStatementexecuteUpdateProxyPreparedStatementjava HikariCP jar at comzaxxerhikaripoolHikariProxyPreparedStatementexecuteUpdateHikariProxyPreparedStatementjava HikariCP jar at scalikejdbcDBConnectionAttributesWiredPreparedStatementexecuteUpdateDBConnectionAttributesWiredPreparedStatementscala scalikejdbccore jar at scalikejdbcStatementExecutoranonfunexecuteUpdate StatementExecutorscala scalikejdbccore jar at scalaruntimejava JFunction mcIspapplyJFunction mcIspjava scalalibraryjar at scalikejdbcStatementExecutorNakedExecutorapplyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutoranon scalikejdbcStatementExecutorLoggingSQLAndTimingsuperapplyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutorLoggingSQLAndTimingapplyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutorLoggingSQLAndTimingapplyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutoranon scalikejdbcStatementExecutorLoggingSQLIfFailedsuperapplyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutorLoggingSQLIfFailedapplyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutorLoggingSQLIfFailedapplyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutoranon applyStatementExecutorscala scalikejdbccore jar at scalikejdbcStatementExecutorexecuteUpdateStatementExecutorscala scalikejdbccore jar at scalikejdbcDBSessionanonfunexecuteUpdate DBSessionscala scalikejdbccore jar at scalikejdbcDBSessionanonfunexecuteUpdate adaptedDBSessionscala scalikejdbccore jar at scalikejdbcDBSessionanonfunupdateWithFiltersInternal DBSessionscala scalikejdbccore jar at scalikejdbcLoanPatternusingLoanPatternscala scalikejdbccore jar at scalikejdbcLoanPatternusingLoanPatternscala scalikejdbccore jar at scalikejdbcActiveSessionusingDBSessionscala scalikejdbccore jar at scalikejdbcDBSessionupdateWithFiltersInternalDBSessionscala scalikejdbccore jar at scalikejdbcDBSessionupdateWithFiltersDBSessionscala scalikejdbccore jar at scalikejdbcDBSessionupdateWithFiltersDBSessionscala scalikejdbccore jar at scalikejdbcActiveSessionupdateWithFiltersDBSessionscala scalikejdbccore jar at scalikejdbcDBSessionupdateAndReturnSpecifiedGeneratedKeyDBSessionscala scalikejdbccore jar at scalikejdbcDBSessionupdateAndReturnSpecifiedGeneratedKeyDBSessionscala scalikejdbccore jar at scalikejdbcActiveSessionupdateAndReturnSpecifiedGeneratedKeyDBSessionscala scalikejdbccore jar at scalikejdbcDBSessionWrapperanonfunupdateAndReturnSpecifiedGeneratedKey DBSessionWrapperscala scalikejdbccore jar at scalikejdbcDBSessionWrapperanonfunupdateAndReturnSpecifiedGeneratedKey adaptedDBSessionWrapperscala scalikejdbccore jar at scalikejdbcDBSessionWrapperanonfunwithAttributesSwitchedDBSession DBSessionWrapperscala scalikejdbccore jar at scalikejdbcDBSessionAttributesSwitcherwithSwitchedDBSessionDBSessionAttributesSwitcherscala scalikejdbccore jar at scalikejdbcDBSessionWrapperwithAttributesSwitchedDBSessionDBSessionWrapperscala scalikejdbccore jar at scalikejdbcDBSessionWrapperupdateAndReturnSpecifiedGeneratedKeyDBSessionWrapperscala scalikejdbccore jar at scalikejdbcSQLUpdateWithGeneratedKeyanonfunapply SQLscala scalikejdbccore jar at scalikejdbcSQLUpdateWithGeneratedKeyanonfunapply adaptedSQLscala scalikejdbccore jar at scalikejdbcSQLUpdateWithGeneratedKeyapplySQLscala scalikejdbccore jar sparkshell jars optjarsclickhouse j jar optjarsscalikejdbc jar optjarsscalikejdbcconfig jar optjarsscalikejdbcinterpolation jar I got an unexpected error scala import scalikejdbc console error Symbol type noneinterpolationImplicits is missing from the classpath This symbol is required by trait scalikejdbcSQLInterpolationFeature Make sure that type Implicits is in your classpath and check for conflicting dependencies with Ylogclasspath A full rebuild may help if SQLInterpolationFeatureclass was compiled against an incompatible version of noneinterpolation import scalikejdbc I am using IntelliJs IDEA and see a message screen shot below that I should report a bug img width altScreen Shot at AM src This is from the file SQLscala in scalikejdbccore sourcesjar The stack trace is map SQL scalikejdbc findByFirstName Person combahdevopscommonentities anonfunnew PersonTest combahdevopscommonentities apply combahdevopscommonentitiesPersonTestLambda anonfunapply TestSuiteTestFunAndConfigMap orgscalatestfixture apply orgscalatestfixtureTestSuiteTestFunAndConfigMapLambda outcomeOf OutcomeOf orgscalatest outcomeOf OutcomeOf orgscalatest outcomeOf OutcomeOf orgscalatest apply TestSuiteTestFunAndConfigMap orgscalatestfixture apply TestSuiteOneArgTestanon orgscalatestfixture withFixture TestSuite orgscalatest withFixture TestSuite orgscalatest withFixture FlatSpec orgscalatestfixture anonfunwithFixture AutoRollback scalikejdbcscalatest apply scalikejdbcscalatestAutoRollbackLambda using LoanPattern scalikejdbc using LoanPattern scalikejdbc using PersonTest combahdevopscommonentities withFixture AutoRollback scalikejdbcscalatest withFixture AutoRollback scalikejdbcscalatest withFixture PersonTest combahdevopscommonentities invokeWithFixture FlatSpecLike orgscalatestfixture anonfunrunTest FlatSpecLike orgscalatestfixture apply orgscalatestfixtureFlatSpecLikeLambda runTestImpl SuperEngine orgscalatest runTest FlatSpecLike orgscalatestfixture runTest FlatSpecLike orgscalatestfixture runTest FlatSpec orgscalatestfixture anonfunrunTests FlatSpecLike orgscalatestfixture apply orgscalatestfixtureFlatSpecLikeLambda anonfunrunTestsInBranch SuperEngine orgscalatest apply orgscalatestSuperEngineLambda foreach List scalacollectionimmutable traverseSubNodes SuperEngine orgscalatest runTestsInBranch SuperEngine orgscalatest anonfunrunTestsInBranch SuperEngine orgscalatest apply orgscalatestSuperEngineLambda foreach List scalacollectionimmutable traverseSubNodes SuperEngine orgscalatest runTestsInBranch SuperEngine orgscalatest runTestsImpl SuperEngine orgscalatest runTests FlatSpecLike orgscalatestfixture runTests FlatSpecLike orgscalatestfixture runTests FlatSpec orgscalatestfixture run Suite orgscalatest run Suite orgscalatest orgscalatestfixtureFlatSpecLikesuperrun FlatSpec orgscalatestfixture anonfunrun FlatSpecLike orgscalatestfixture apply orgscalatestfixtureFlatSpecLikeLambda runImpl SuperEngine orgscalatest run FlatSpecLike orgscalatestfixture run FlatSpecLike orgscalatestfixture run FlatSpec orgscalatestfixture run JUnitRunner orgscalatestplusjunit run JUnitCore orgjunitrunner startRunnerWithArgs JUnit IdeaTestRunner comintellijjunit startRunnerWithArgs IdeaTestRunnerRepeater comintellijrtexecutionjunit prepareStreamsAndStart JUnitStarter comintellijrtexecutionjunit main JUnitStarter comintellijrtexecutionjunit I am using these dependencies dependency groupIdorgscalikejdbcgroupId artifactIdscalikejdbccore artifactId version version dependency dependency groupIdorgscalikejdbcgroupId artifactIdscalikejdbc artifactId version version dependency dependency groupIdorgscalikejdbcgroupId artifactIdscalikejdbcconfig artifactId version version dependency dependency groupIdorgscalikejdbcgroupId artifactIdscalikejdbcstreams artifactId version version dependency dependency groupIdorgscalikejdbcgroupId artifactIdscalikejdbctest artifactId version version scopetestscope dependency dependency groupIdorgpostgresqlgroupId artifactIdpostgresqlartifactId version version scopetestscope dependency When I execute my test it should add person s and then findbyfirstname in implicit session DBSession val person Person Personcreatefirstname lastname ssn email dob get val person Person Personcreatefirstname lastname ssn email dob get PersonfindAllforeachprintln val publisher DatabasePublisher Person PersonfindByFirstNamefirstname SourcefromPublisherpublisher runForeachprintln val results Future Future Seq Person SourcefromPublisherpublisher take runWithSinkseq val results Seq Person Awaitresultresults Future Duration TimeUnitSECONDS results should containperson results should containperson when the commented out line is executed I see the correct values being printed I see these log messages INFO aesSlf jLogger kkaactordefaultdispatcher Slf jLogger started INFO ssDatabasePublisher kkaactordefaultdispatcher Database stream requested by subscriber akkastreamimplfusingActorGraphInterpreterBatchingActorInputBoundaryanon b is ready INFO ssDatabasePublisher kkaactordefaultdispatcher Database stream requested by subscriber akkastreamimplfusingActorGraphInterpreterBatchingActorInputBoundaryanon ae e is ready INFO ssDatabaseSubscription kkaactordefaultdispatcher All data for subscriber akkastreamimplfusingActorGraphInterpreterBatchingActorInputBoundaryanon ae e has been sent INFO ssDatabaseSubscription kkaactordefaultdispatcher All data for subscriber akkastreamimplfusingActorGraphInterpreterBatchingActorInputBoundaryanon b has been sent INFO ssDatabaseSubscription kkaactordefaultdispatcher Finished cleaning up database resources occupied for subscriber akkastreamimplfusingActorGraphInterpreterBatchingActorInputBoundaryanon ae e INFO ssDatabaseSubscription kkaactordefaultdispatcher Finished cleaning up database resources occupied for subscriber akkastreamimplfusingActorGraphInterpreterBatchingActorInputBoundaryanon b ERROR Tests run Failures Errors Skipped Time elapsed s FAILURE in combahdevopscommonentitiesPersonTest ERROR Person should add person s and then findbyfirstnamecombahdevopscommonentitiesPersonTest Time elapsed s ERROR orgscalatestexceptionsTestFailedException Vector did not contain element Person FN LN emailtestcom at combahdevopscommonentitiesPersonTestanonfunnew PersonTestscala at combahdevopscommonentitiesPersonTestusingPersonTestscala at combahdevopscommonentitiesPersonTestwithFixturePersonTestscala Hello I have the following code scala def storejobInfoId Long struct Array Byte implicit session DBSession CheckpointautoSession Unit DB localTx implicit session withSQL updateCheckpointset columnendDt ZonedDateTimenow whereeqcolumnjobInfoId jobInfoIdandgtcolumnendDtZonedDateTimenow updateapply withSQL insertintoCheckpointnamedValues columnjobInfoId jobInfoId columnstruct struct updateapply It does an update and than an insert it works in PostgreSQL but in MariaDB just the latest statement worksthe insert If I remove the insert the update start to work also if I remove the DB localTx implicit session block works but is not a single transaction as expected Im doing something wrong dbdefaultdriver commysqljdbcDriver dbdefaulturl jdbcmysqlcharacterEncodingutf useSSLfalse dbdefaultuser dbdefaultpassword dbdefaultpoolInitialSize dbdefaultpoolMaxSize dbdefaultconnectionTimeoutMillis dbdefaultpoolConnectionTimeoutMillis dbdefaultpoolValidationQueryselect as one The last packet successfully received from the server was milliseconds ago The last packet sent successfully to the server was milliseconds ago is longer than the server configured value of waittimeout You should consider either expiring andor testing connection validity before use in your application increasing the server configured values for client timeouts or using the ConnectorJ connection property autoReconnecttrue to avoid this problem at sunreflectNativeConstructorAccessorImplnewInstance Native Method at sunreflectNativeConstructorAccessorImplnewInstanceNativeConstructorAccessorImpljava at sunreflectDelegatingConstructorAccessorImplnewInstanceDelegatingConstructorAccessorImpljava at javalangreflectConstructornewInstanceConstructorjava at commysqljdbcUtilhandleNewInstanceUtiljava at commysqljdbcSQLErrorcreateCommunicationsExceptionSQLErrorjava at commysqljdbcMysqlIOsendMysqlIOjava at commysqljdbcMysqlIOsendCommandMysqlIOjava at commysqljdbcMysqlIOsqlQueryDirectMysqlIOjava at commysqljdbcConnectionImplexecSQLConnectionImpljava at commysqljdbcConnectionImplsetReadOnlyInternalConnectionImpljava at commysqljdbcConnectionImplsetReadOnlyConnectionImpljava at orgapachecommonsdbcp DelegatingConnectionsetReadOnlyDelegatingConnectionjava at orgapachecommonsdbcp DelegatingConnectionsetReadOnlyDelegatingConnectionjava at scalikejdbcDBConnectionclassscalikejdbcDBConnectionsetReadOnlyDBConnectionscala at scalikejdbcDBConnectionclassreadOnlySessionDBConnectionscala at scalikejdbcNamedDBreadOnlySessionNamedDBscala at scalikejdbcDBConnectionanonfunreadOnly applyDBConnectionscala at scalikejdbcDBConnectionanonfunreadOnly applyDBConnectionscala at scalikejdbc 