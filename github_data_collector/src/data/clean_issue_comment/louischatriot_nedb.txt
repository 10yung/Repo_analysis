The first find function takes time time ms Why time ms Is id slow because its indexing However the description was written as follows ms for a collection containing documents let datastore Datastorecreatedbdb let arry forlet i i i ifi arrypushcolor blue else arrypushcolor red datastoreinsertarry consoletimetime let data await datastorefind color red consoletimeEndtime consoletimetime let data await datastorefind color red consoletimeEndtime I use Nedb for loading and saving notes However after I packaged my Electron App img width altScreenshot at src Code in indexjs var userData appgetAppPathuserData let dbgraphs new Datastore filename userDatagraphsdb autoload true dbgraphsloadDatabase We just found an issue where altering an already updated document changes that document in the database Steps to reproduce insert a document update the document with an object using set edit the original object find the object now the object is the altered object not the one that is persisted in the db I created a repo that illustrates the issue A snipped from that repo const originalDoc id object a b dbinsertoriginalDoc dbupdate id set originalDoc dbfind err docs consolelogfind before edit docs find before edit id object a b originalDocobjectc dbfind err docs consolelogfind after edit docs find after edit id object a b c You can see that originalDocobject has the c key that was added after the update in the second consolelog The issue only occurs if set is used and only nested objects are affected This only happens inMemory when restarted the results are correced We currently fixed the issue by JSONparseJSONstringifyoriginalDoc Database file repeats the following over times in my file ever increasing json indexCreatedfieldNameusernameuniquetrue indexCreatedfieldNameiduniquetrue js let database Datastorecreateappdatausersdb databaseensureIndex fieldName username unique true databaseensureIndex fieldName id unique true using as a wrapper for Promises In file persistencejs after thisbeforeDeserialization optionsbeforeDeserialization function s return s there is a huge loop check it would be nice to make this check optional I succesfully deploy my backend nodejs express code to GCP and it works except for the nedb part Is because GCP filesystem is readonly Hence the data folder that normally work in my localhost testing environment does not work in GCP Anyone have tips or experience on how to make this works Thanks demo js var Datastore requirenedb db new Datastore dbinsert user user nameJamesgoodAtbasketball user nameCurrygoodAtbasketball dbinsertproject basketballfootball dbfinduseruser nameJameserrdocs consolelogdocs dbfinduseruser nameJamesgoodAtbasketballerrdocs consolelogdocs I just want to get datanameJamesgoodAtbasketball but these two method all print useruser nameJamesgoodAtbasketballuser nameCurrygoodAtbasketballidxxx If it is a big databaseI just want to get one usernot return me all userhow can I do I feel afraid when I try dbfind function it always return me the outer big datalayer if its multi layer design it will be disaster Hi I noticed the both test cases failed sometimes see below After some investigation I noticed that the function ensureIndex is not sync as stated in the comment and some operations may races with the assertions The changes seemed to solve the race as I ran the test cases several times with no error Database Using indexes ensureIndex and index initialization in database loading ensureIndex can be called before a loadDatabase and still be initialized and filled correctly Uncaught AssertionError expected to equal expected actual failing Database Using indexes ensureIndex and index initialization in database loading If a unique constraint is not respected database loading will not work and no data will be inserted Uncaught TypeError Cannot read property should of undefined I posted a issue to update the documentation of the function Hi Function DatastoreprototypeensureIndex has a comment lines of datastorejs that claims that the function is synchronous This seems not completely right once the cb parameter is passed to PersistenceprototypepersistNewState that then calls the cb from within the appendfile callback My suggestion is to update the documentation of ensureIndex Im not sure in other parts but at least the comment is inconsistent On Windows Datastore configured with corruptAlertThreshold replace any db file content with one line without enter eg a start the app notice that a is removed and file index is recreated Expected DB corruption alert to be reported since threshold is set to and file content is in a bad format Problem source There is an assumption that a new line always is present Also when datalength while indexCreated entry is missing this can be another sign of a corrupted DB file for a threshold