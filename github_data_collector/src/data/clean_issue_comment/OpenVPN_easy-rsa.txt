Solving so as to accommodate any ED based curve ED ED etc OpenSSL handles Edwards Curves differently compared to elliptical curves hence the differences in syntax References EC curve operations openssl genpkey Creating ED certs option showcertrevokation is added CACRL used by FreeRADIUS generation added OpenSSL supports generating and signing ED certificates It would be nice if easyrsa provided this as an option in addition to RSA and ECDSA certificates Would like to support multiple CAs andor subCAs Basically wed have a root path and sub paths for each subsequent CAsubCA in a directory structure kinda like this homeecristeasyrsa exampleorg vpnsubca websubca example org This would generate a menu if opted or expect a CA nickname as an argument to proceed EasyRSA could know it was in such a place through the presence of a easyrsaroot file empty The presence of this file would activate logic that caused EasyRSA to look above for the easyrsaroot and in subdirectories directly below A simple change of the config file active would enable the use Thoughts Im very new to this I was walking through the documentation to set up key for AWS VPN connectivity I was able to generate the pkicacert and pkiprivatecakey files from the command easyrsa buildca nopass Using SSL openssl OpenSSL d Sep Generating RSA private key bit long modulus primes e is x You are about to be asked to enter information that will be incorporated into your certificate request What you are about to enter is what is called a Distinguished Name or a DN There are quite a few fields but you can leave some blank For some fields there will be a default value If you enter the field will be left blank Common Name eg your user host or server name EasyRSA CA CaCert CA creation complete and you may now import and sign cert requests Your new CA certificate file for publishing is at cUsersUserNameDocumentsGitHubeasyrsaeasyrsa pkicacrt But then when I tried to generate the server I got this error easyrsa buildserverfull server nopass Using SSL openssl OpenSSL d Sep Generating a RSA private key writing new private key to CUsersUserNameDocumentsGitHubeasyrsaeasyrsa pkieasyrsa cW KtmpaXbXnh Using configuration from CUsersUserNameDocumentsGitHubeasyrsaeasyrsa pkieasyrsa cW KtmpF XL C Cant open cUsersUserNameDocumentsGitHubeasyrsaeasyrsa pkiprivatecakey for reading No such file or directory error system libraryfopenNo such processopenssl dcryptobiobssfilec fopencUsersUserNameDocumentsGitHubeasyrsaeasyrsa pkiprivatecakeyr error D BIO routinesBIOnewfileno such fileopenssl dcryptobiobssfilec unable to load CA private key EasyRSA error signing failed openssl output above may have more detail EasyRSA error Failed to sign server I found an article on the AWS forums where the workaround was to use a Linux box to run the command Im not sure if I need to installsetup anything special on my Windows box to get this to run correctly Any help is appreciated Im a n b with OpenVPN and easyrsa The files are definitely in the target folders and I have full administrative access I even ran Git Bash as an administrator so Im guessing its not a permissions issue j Hello Im seeing the following error when running the command easyrsa exportp userdomaincom Note EASYRSAPASSIN and EASYRSAPASSOUT are NOT set Output sh Using SSL openssl LibreSSL Usage pkcs options where options are TRUNCATED OPTIONS EasyRSA error Export of p failed see above for related openssl errors Im running the latest master sh git revparse HEAD f b b f bfae a f ad Setting EASYRSAPASSIN and EASYRSAPASSOUT has no effect in resolving this error Running this command works as expected sh openssl pkcs in pkiissueduserdomaincomcrt inkey pkiprivateuserdomaincomkey passout passchang m export out tmpuserdomaincomp Similar to EasyRSA is useful to handle certkey generation But different software expects the key in different formats A trouble I have with EasyRSA is that the buildca command generates a private key for the CA in PKCS format However the genreq command generates keys in PKCS format This is confusing since the consumer of the keys needs to realize the difference and process the keys differently This PR adds the exportp command that will convert keys to the PKCS format Closes When using the beats input logstash plugin the key is expected to be in PKCS format It would be helpful to have a command complementary to the exportp and exportp ones that convert an RSA key to the PKCS format If there is interest in that I could create a PR Introduces a new format for the pkiprivatecakey which can specify environment variables to point to the PKCS private key on a specific token Leveraging optestorig with a modification to support tests initially Once this PR is merged the tests can be migrated to the new framework Please see PKCS md for more details on the changes and please share any useful feedback needed to get this PR merged 