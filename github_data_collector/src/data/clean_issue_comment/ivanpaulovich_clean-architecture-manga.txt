Hi First of all thank you very much for this awesome work ivanpaulovich and contributors I would love to see a GraphQL API coexisting with the current API Actually there are big libraries in the NET Core GraphQL community graphqldotnet HotChocolate I have tested both of them and personally I do prefer HotChocolate and even having a smaller comunnity I think they are releasing new features faster and documentation is at least for me much clearer I would love to collaborate on this trying to integrate GraphQL following the clean architecture approach Just let me know if you think it would be ok Thanks in advance We added the ruleset files on each project and I had to disable lots of rules so we can move forward I think it is time to enable those rules and update the code base accordingly We could injection the IMediator and Presenter through the FromServices Like it is done at Even though Manga is a monolith application it would be nice to enable OpenTracing to show how to add it following the Clean Architecture principles The Jaeger library is a interesting starting point The documentation should be moved to the Wiki and we could add comments linking the source code to the wiki topics For instance the design patterns found in the project Aggregates Entity Repository UseCase could be linked to existing wiki pages Hi ivanpaulovich I added a hashing service to prepare for the implementation of the password system I also wrote some unit tests to validate the behavior of this service Summary I worked on JWT authentication trying to respect all the good practices already in place Currently it works with the InMemoryDatabase but I broke some tests What changes did I make Split the use case Register into RegisterAccount and RegisterCustomer Added the use case for authentication What remains to be done Unit tests Documentation Discussion about design choices password secrets config Technical review Linked issues Feature Request JWT Authentication Password value object Hello Ivan How should we store a password in a value object Ideally I think the field should contain a hashed password value However how to hash a password without depending on the NET framework in order not to break the domains responsibilities Also what are the rules to be implemented as part of this implementation For a secure password here are some rules that could be applied characters minimum characters maximum one number minimum one capital letter minimum A punctuation mark OR a special character dollar hash minimum It would be great if we implement a frontend SPA instead of using Swagger for everything I would like to see support for multiple currencies The challenge is that the current implementation uses a Value Object to describe Money in which there is no information regarding the Currency so it is not possible to deposit Euros and Dollars to the same account history In the real world the customers deal seamlessly with multiple currencies and the bank is responsible for the exchange service How can we do the same in a DDD approach My first thought is to change the Money Value Object to include info regarding the Original Currency and the Value in Euro then design a Factory object that is initialized with an Exchange Service After that we need to change the controllers to use the Factory instead of instantiating the Money directly Thoughts 