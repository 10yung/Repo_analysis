A port of the Java xDS test client and server added in Analogous to the internal MassageServer and MassageClient for testing LBrelated functionality It looks like Go is a bit better about mirroring definitions from the grpcproto repo than Java is I can update the protos in grpcproto in a parallel PR if the changes here look agreeable First time that I can recall ever writing Go so apologies in advance for any glaring mistakes I managed to run gofmt so hopefully it at least is vaguely shaped like real code cc menghanl When I return ioEOF in a stream handler the client side code sees OUTOFRANGE error as the status code of the RPC error I understand it is incorrect to return an EOF from a stream handler and you should return nil but that aside where is the OUTOFRANGE code coming from Note this issue seems fixed on the master branch Is this tracked by another bug What version of gRPC are you using What version of Go are you using go version go What operating system Linux Windows and version Mac OSx What did you do If possible provide a recipe for reproducing the error Take the routeguide example as is and make the following modifications in grpcexamplesrouteguideserverservergo change RouteChat to return different values on EOF Shown below RouteChat receives a stream of messagelocation pairs and responds with a stream of all previous messages at each of those locations func s routeGuideServer RouteChatstream pbRouteGuideRouteChatServer error for in err streamRecv if err ioEOF return ioEOF Client receives rpc error code OutOfRange desc EOF return errorsNewEOF Client recieves rpc error code Unknown desc EOF return errorsNewfoo Client recieves rpc error code Unknown desc foo return nil if err nil return err key serializeinLocation smuLock srouteNotes key appendsrouteNotes key in Note this copy prevents blocking other clients while serving this one We dont need to do a deep copy because elements in the slice are insertonly and never modified rn make pbRouteNote lensrouteNotes key copyrn srouteNotes key smuUnlock for note range rn if err streamSendnote err nil return err In grpcexamplesrouteguideclientclientgo In runRouteChat Simply print out the err code in err streamRecv fmtPrintfv n err Then run the server and then the client What did you expect to see I expect to see rpc error code Unknown desc EOF What did you see instead Instead I see rpc error code OutOfRange desc EOF conn err grpcDial grpcWithInsecure if err nil logFatalfdid not connect s err The above code with empty port doesnt throw any error What is the recommend way to know if the connection has been established or failed This PR adds the end to end tests for the advancedtls library It can also be used as a reference for users who want to use this library The BalancerName field and all the references to it are removed In tests where it was used to pass the xds server address to the xds client bootstrapConfigNew is overridden Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Remove decodeState from httpclient and decode the header fields within the client This will fix half of I can submit a second PR to remove decodeState from httpserver or if its preferred I can fold it into this PR too A data race during proto marshal Could be related to the buffer reuse detailssummaryFull logsummary WARNING DATA RACE Write at x c ee ff by goroutine runtimeslicecopy hometravisgimmeversionsgo linuxamd srcruntimeslicego x githubcomgolangprotobufprotoappendBytes hometravisgopkgmodgithubcomgolangprotobufv prototablemarshalgo x f githubcomgolangprotobufprotomarshalInfomarshal hometravisgopkgmodgithubcomgolangprotobufv prototablemarshalgo x githubcomgolangprotobufprotomakeMessageMarshalerfunc hometravisgopkgmodgithubcomgolangprotobufv prototablemarshalgo x githubcomgolangprotobufprotomarshalInfomarshal hometravisgopkgmodgithubcomgolangprotobufv prototablemarshalgo x githubcomgolangprotobufprotoInternalMessageInfoMarshal hometravisgopkgmodgithubcomgolangprotobufv prototablemarshalgo xcb googlegolangorggrpctestgrpctestingSimpleResponseXXXMarshal hometravisgopathsrcgooglegolangorggrpctestgrpctestingtestpbgo x b githubcomgolangprotobufprotoBufferMarshal hometravisgopkgmodgithubcomgolangprotobufv prototablemarshalgo x googlegolangorggrpcencodingprotomarshal hometravisgopathsrcgooglegolangorggrpcencodingprotoprotogo x b googlegolangorggrpcencodingprotocodecMarshal hometravisgopathsrcgooglegolangorggrpcencodingprotoprotogo xde googlegolangorggrpcencodingprotocodecMarshal autogenerated x googlegolangorggrpcencode hometravisgopathsrcgooglegolangorggrpcrpcutilgo x e googlegolangorggrpcServersendResponse hometravisgopathsrcgooglegolangorggrpcservergo x googlegolangorggrpcServerprocessUnaryRPC hometravisgopathsrcgooglegolangorggrpcservergo xad googlegolangorggrpcServerhandleStream hometravisgopathsrcgooglegolangorggrpcservergo x googlegolangorggrpcServerserveStreamsfunc hometravisgopathsrcgooglegolangorggrpcservergo xc Previous read at x c ee fff by goroutine runtimeslicecopy hometravisgimmeversionsgo linuxamd srcruntimeslicego x golangorgxnethttp FramerWriteDataPadded hometravisgopkgmodgolangorgxnetv d ahttp framego x d golangorgxnethttp writeDatawriteFrame hometravisgopkgmodgolangorgxnetv d ahttp framego x d golangorgxnethttp serverConnwriteFrameAsync hometravisgopkgmodgolangorgxnetv d ahttp servergo x Goroutine running created at googlegolangorggrpcServerserveStreamsfunc hometravisgopathsrcgooglegolangorggrpcservergo xb googlegolangorggrpcinternaltransporthttp ServeroperateHeaders hometravisgopathsrcgooglegolangorggrpcinternaltransporthttp servergo x a googlegolangorggrpcinternaltransporthttp ServerHandleStreams hometravisgopathsrcgooglegolangorggrpcinternaltransporthttp servergo x googlegolangorggrpcServerserveStreams hometravisgopathsrcgooglegolangorggrpcservergo x a googlegolangorggrpcServerhandleRawConnfunc hometravisgopathsrcgooglegolangorggrpcservergo x c Goroutine finished created at golangorgxnethttp serverConnstartFrameWrite hometravisgopkgmodgolangorgxnetv d ahttp servergo x golangorgxnethttp serverConnscheduleFrameWrite hometravisgopkgmodgolangorgxnetv d ahttp servergo x golangorgxnethttp serverConnwroteFrame hometravisgopkgmodgolangorgxnetv d ahttp servergo x dd golangorgxnethttp serverConnserve hometravisgopkgmodgolangorgxnetv d ahttp servergo x ce golangorgxnethttp ServerServeConn hometravisgopkgmodgolangorgxnetv d ahttp servergo xd d golangorgxnethttp ConfigureServerfunc hometravisgopkgmodgolangorgxnetv d ahttp servergo xb nethttpconnserve hometravisgimmeversionsgo linuxamd srcnethttpservergo x d E http servergo transport failed to marshal rpc status code message detailstypeurltypegoogleapiscomgrpctestingEmpty error proto field googlerpcStatusMessage contains invalid UTF FAIL Test s FAIL TestMaxMsgSizeClientDefault s end endtestgo Running test in tcpclearv balancer environment end endtestgo Running test in tcptlsv balancer environment end endtestgo Running test in tcpclear environment end endtestgo Running test in tcptls environment end endtestgo Running test in handlertls environment end endtestgo Running test in nobalancer environment testinggo race detected during execution of test testinggo race detected during execution of test details I have a production gogrpc server workload that does nearzero heap allocation in the request handler As I dial up qps p client response times line up with gc duration on the server The allocspace profile largely points to http meta frame parsing as well as http ServeroperateHeaders and its descendants Fetching profile over HTTP from Saved profile in homecypprofpprofquotaserverallocobjectsallocspaceinuseobjectsinusespace pbgz File quotaserver Type allocspace Time Jan at pm PST Entering interactive mode type help for commands o for options pprof web pprof top Showing nodes accounting for TB of TB total Dropped nodes cum TB Showing top nodes out of flat flat sum cum cum TB TB golangorgxnethttp FramerreadMetaFramefunc TB TB googlegolangorggrpcinternaltransporthttp ServeroperateHeaders TB TB googlegolangorggrpcinternaltransportdecodeStateaddMetadata TB TB googlegolangorggrpcinternaltransportitemListenqueue TB TB googlegolangorggrpcinternaltransportnewRecvBuffer TB TB googlegolangorggrpcinternaltransporthttp ServerwriteHeaderLocked TB TB googlegolangorggrpcinternaltransporthttp ServerWriteStatus TB TB slackgensrcprotoidlquotaserviceQuotaRatelimitHandler TB TB contextWithValue TB TB googlegolangorggrpcinternaltransportnewWriteQuota Also see attached image This could likely be reproduced by writing a trivial server implementation and sending a high request rate to it Happy to provide more debug info pprofheapallocspacegrpcserver 