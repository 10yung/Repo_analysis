When you cancel a benchmark job with CtrlC sbt prints the usual warn Canceling execution message and then drops back into interactive mode but the actual benchmarking process that was spawned by jmh is still running and keeps writing logs to the console Pressing CtrlC again terminates sbt and disconnects the console from the process so the log output stops but jmhs java process is still running in the background You have to kill it manually in task manager For most Scala projects when I submit a Pull Request and I have to evaluate the performance impact of a Pull Request I often have to manually do the following process Checkout each distinct version with and without the changes Run the sbtjmh command a same command in each of them Retrieve and store the results from each run Arrange the results of both runs onto a spreadsheet which I then use to show the relative error of each measure and the observed improvement It may be desirable if sbtjmh plugin could offer a command to carry ouy these operations directly and were able to generate a single summary table which included the score and error for each commit and the relative difference between them Benchmark Mode Cnt Scoremaster Error Scorebranch Error Change Units Fili thrpt Bs Make the profilers shipped in sbtjmhextras discoverable by JMH by specifying the provided implementations of Profiler interface and adding a noarg constructor required by the ServiceLoader I started working on this here In that form you can copy the file to your project folder and it offer a new task jmhrunny that has tab completion inside of sbt Not all options are supported yet but it features smart completion for benchmarks and matching parameters I didnt manage so far to actually make it work under the jmhrun task directly After bumping versions of SBT x sbtjmh and JMH recently Ive noticed that sometimes the output is missing the final result For instance info Result scalatoolsnscHotScalacBenchmarkcompile info N info mean msop info Histogram msop info info info info info info info info info info info info info info info info Percentiles msop info p msop info p msop info p msop info p msop success Total time s completed PM The behaviour is a bit random but it seems that occasionally the last few lines of the output go missing No idea whats to blame yet but thought Id log this issue in case others are seeing the same thing Currently files with flame graphs are just saved over each other with the same name As a workaround you can specify all benchmark params to avoid running multiple attempts with different values As an option it can be nested subdirectories for each paramvalue pairs But to resolve it properly need to cope with some escaping and truncation of values to fit filedirectory naming limits Hi folks If I will create a benchmark directly in srcmainscala I receive NPE javalangNullPointerException at orgopenjdkjmhgeneratorsreflectionRFClassInfogetPackageNameRFClassInfojava at orgopenjdkjmhgeneratorscoreBenchmarkGeneratorvalidateBenchmarkBenchmarkGeneratorjava at orgopenjdkjmhgeneratorscoreBenchmarkGeneratorgenerateBenchmarkGeneratorjava at orgopenjdkjmhgeneratorsbytecodeJmhBytecodeGeneratormainJmhBytecodeGeneratorjava at plproject scalasbtJmhPlugininternalGenerateBenchmarkSourcesAndResourcesJmhPluginscala at plproject scalasbtJmhPluginanonfungenerateBenchmarkSourcesAndResources JmhPluginscala at sbtutilFileFunctionanonfuncached FileFunctionscala at sbtutilFileFunctionanonfuncached FileFunctionscala at sbtutilDifferenceapplyTrackedscala at sbtutilDifferenceapplyTrackedscala at sbtutilFileFunctionanonfuncached FileFunctionscala at sbtutilDifferenceapplyTrackedscala at sbtutilDifferenceapplyTrackedscala at sbtutilFileFunctionanonfuncached FileFunctionscala at plproject scalasbtJmhPlugingenerateBenchmarkSourcesAndResourcesJmhPluginscala at plproject scalasbtJmhPluginanonfunprojectSettings JmhPluginscala at scalaFunction anonfuncompose Function scala at sbtinternalutiltildegreateranonfunu TypeFunctionsscala at sbtstdTransformanon workSystemscala at sbtExecuteanonfunsubmit Executescala at sbtinternalutilErrorHandlingwideConvertErrorHandlingscala at sbtExecuteworkExecutescala at sbtExecuteanonfunsubmit Executescala at sbtConcurrentRestrictionsanon anonfunsubmitValid ConcurrentRestrictionsscala at sbtCompletionServiceanon callCompletionServicescala at javautilconcurrentFutureTaskrunFutureTaskjava at javautilconcurrentExecutorsRunnableAdaptercallExecutorsjava at javautilconcurrentFutureTaskrunFutureTaskjava at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava Im not sure if that is made by design but when you move benchmark class into any package inside srcmainscala it works sbt projectpluginssbt addSbtPluginplproject scala sbtjmh sbt buildsbt enablePluginsJmhPlugin libraryDependencies orgslf j slf jjdk Runtime libraryDependencies orgslf j slf japi scala package mypackage import orgslf jLoggerFactory import orgopenjdkjmhannotationsBenchmark class MyBenchmark Benchmark def testLog Unit val logger LoggerFactorygetLoggerclassOf MyBenchmark loggerinfoHello World jmhrun info Compiling Scala source to privatetmpjmhtargetscala classes Processing classes from privatetmpjmhtargetscala classes with reflection generator Writing out Java source to privatetmpjmhtargetscala srcmanagedjmh and resources to privatetmpjmhtargetscala resourcemanagedjmh info Compiling Java sources to privatetmpjmhtargetscala classes info Running orgopenjdkjmhMain info JMH version info VM version JDK VM b info VM invoker LibraryJavaJavaVirtualMachinesjdk jdkContentsHomejrebinjava info VM options none info Warmup iterations s each info Measurement iterations s each info Timeout min per iteration info Threads thread will synchronize iterations info Benchmark mode Throughput opstime info Benchmark mypackageMyBenchmarktestLog info info Run progress complete ETA info Fork of error SLF J Failed to load class orgslf jimplStaticLoggerBinder error SLF J Defaulting to nooperation NOP logger implementation error SLF J See for further details info Warmup Iteration opss info Warmup Iteration opss info Warmup Iteration opss info Warmup Iteration opss info Warmup Iteration opss Note the warning error SLF J Failed to load class orgslf jimplStaticLoggerBinder error SLF J Defaulting to nooperation NOP logger implementation error SLF J See for further details It means the setting libraryDependencies orgslf j slf jjdk Runtime does not apply to jmhrun