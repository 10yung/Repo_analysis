Couple of points Rdoc did not highlight a code block that had naked codecode so I used forms of codeHashcode instead Multiline message did not format well as code code output so I put it into a separate code block Thinking of adding these but wont if The Powers That Be think its unnecessary Personally I agree with If it goes without saying it goes all the better for saying it Tallyrand This commit explicitly forwards kwargs to remove the warning and adds a test to assert that it was silent Hello to all Ruby version p Rails version Gemfile screenshot part of testhelperrb failed test when run all of them together If i run those failed tests all of them pass I dont any idea how to fix this Is there any way to fix this thanks in advance This is a fix for that should make the case look good as well The basic idea is to only unescape real newlines and leave everything else asis I think this is the method that gives the least surprising results Because of the fix for a multiline string that contains n anywhere will no longer be diffed properly For example ruby require minitestautorun describe foo do it bar do foo very long text nwith some nescaped backslash nin it nand more text bar very long text nwith some nescabed backslash nin it nand more text assertequal foo bar end end Results in Failure footest bar foorb expected actual very long text nwith some nescaped backslash nin it nand more text very long text nwith some nescabed backslash nin it nand more text This makes it hard to actually see where the difference is With minitest I get the following which is indeed also not quite right but better for figuring out the difference Failure footest bar foorb expected actual very long text with some escaped backslash escabed backslash in it and more text if an object has its own warn method Deprecation warnings may have unexpected results An old legacy class of mine has warn defined and it accepts arguments This deprecation warning results in ArgumentError wrong number of arguments Also the actual depecration warning is not printed so the results are confusing to say the least img width altimage src After stubbing a method not really defined but the module probably will behave the same for classes accepts a message respond to and its managed by metaprorgramming used methodmissing then the unstubbing is not working because the stubbed method is still there This fix the behaviour ensuring after the stubbing block the stubbed method is removed and calls to respondto are called as usual Possible fix for Why This PR takes the basic idea from and applies it upstream to minitest I think this problem is not necessarily specific to rails it would be a problem with any parallel executor that uses DRb to synchronize parallel test runs across multiple processes It feels like the fix belongs in minitest itself since fixing it elsewhere requires monkeypatching minitest Fixing it upstream also allows other gems like minitestspecrails to take advantage of it How This change defines a unique constant for every spec class which will allow them to be marshalledunmarshalled and sent over the wire with DRb 