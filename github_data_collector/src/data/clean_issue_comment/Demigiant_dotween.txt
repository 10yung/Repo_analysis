Whenever I update my code during play mode I noticed that an extra instance of DOTweenComponent is spawned in hierarchy after assembly reload Unity Is this something to worry about or can be safely ignored PS I dont do anything fancy just using DOTweenTo Thank you I have multiple tweens which might be create randomly one after another I want to these tweens execute in the order which they created For example Tween A created at frame Tween B created at frame Tween C created at frame However the tween A may complete before frame and then after the tween C was created it may be execute before tween B in the later update cycles How could I make the later created tween always execute in the later order I have the following line where score x and target are long Tween t DOTweenTo score x score x target transitionTimeOnUpdate myTexttext scoreToStringC For instance in the particular case in which score is initially and target is the score gets stuck at always the same value This is a repostrevision of closed issue because it was closed prematurely I have updated my explanation with a simpler example that shows there is clearly a bug in the DORotate method To reproduce the bug Create a New Unity Project in Unity f Import the latest version of DOTween Pro v Right Click D Object Cube Cube Transform Right Click Reset Drag CubeRotator onto Cube see new code below Play using DGTweening using UnityEngine public class CubeRotator MonoBehaviour private void Start transformeulerAngles new Vector transformDORotate new Vector EXPECTED BEHAVIOR The cube rotates from XRotation of degrees to XRotation of degrees and the Y and Z Rotation values stay at the whole time ACTUAL BEHAVIOR The cube rotates from XRotation of degrees to XRotation of degrees and the Y and Z Rotations change constantly throughout the tween Watch a video here when viewing click the gear icon to switch to HD I made posts about my experiments here ZealousDisloyalGallinulesizerestricted Previous Response On Issue there was a response from lordlycastle that the solution was simply to use RotateModeLocalAxisAdd This is not a solution First the problem was not the RotateMode There was no reason why the Y and Z axes should have changed when only tweening the XRotation value Second RotateModeLocalAxisAdd is a different method used for different circumstances It does not allow you to choose the final rotation angle It adds to whatever the current rotation angle may be This is not the behavior I needed and this does not correct the bug in the DORotate method FURTHER COMMENTS My investigations have revealed that the bug described appears to happen only when the starting XRotation is greater than degrees and only happens with XRotation not with YRotation or ZRotation Example RotationX from degrees to degrees using DGTweening using UnityEngine public class CubeRotator MonoBehaviour private void Start transformeulerAngles new Vector transformDORotate new Vector Notice in the video that the XRotation tweens from to degrees while the Y and Z remain at the entire time This is correct behavior Video RecklessDownrightEnglishsettersizerestricted Example Rotation Y from degrees to degrees using DGTweening using UnityEngine public class CubeRotator MonoBehaviour private void Start transformeulerAngles new Vector transformDORotate new Vector Notice in the video that the YRotation tweens from to degrees while the X and Z remain at the entire time This is correct behavior Video KaleidoscopicGlaringDormousesizerestricted CONCLUSION The DORotate method has a bug characterized by wobbling in the Y and Z axes when rotating about the X axis starting from an XRotation angle above degrees Hello I dont have the time to create full fixes since Im very busy working on a game but I encountered some bugs in DOTween and figured Ill post the partial fixes here Partial because the fixes werent made checked against other or older Unity versions and API changes may require different fixes there These fixes were only tested with Unity f I post both problems inside a single issue because theyre directly linked Problem s fix is required to fully fix problem Problem Early delays are broken when using independent timescale Problem Pausing inside the editor not taken into account when using independent timescale How to replicate Create a tween directly in Awake or Start on a GameObject that is part of the scene from the beginning eg using DOTween Pros animation component Add a second delay to the tween Set it to use the independent timescale Expected behavior Tween starts playing after second regardless of the games timescale Actual behavior Tween takes seconds to play Root problem The way the unscaledTime and unscaledDeltaTime properties are calculated inside the DOTweenComponentcs is incorrect If the game takes long to initialize eg in a bigger project like ours the first few values for unscaledTime are inaccurate and cause problems like negative values for unscaledDeltaTime Solution Initialize the unscaledTime with here Root problem OnApplicaitonPaused is invoked a few frames after entering play mode for no reason Wrong callback used in DOTweenModuleUtilscs UnityEditorEditorApplicationplaymodeStateChanged is called at the start and end of playing in the editor not when pausing inside the editor Solution Use UnityEditorEditorApplicationpauseStateChanged instead here in OnKill Callback call KillAll then create a new tween the new tween not run and not trigger any callback Im creating a custom package that implements DOTween The UtilityWindow expects the logos to be placed in the Assets folder Due to my project being a package the root directory of the package is Library and not Assets I pulled the project from the master branch and changed the Init of the DOTweenUtilityWindow by returning true if the logo couldnt be found Ive implemented the modules and the assembly definition into my package and everything is working as intended Even the postprocessing and settings get loaded It seems to me that this piece of code is unnecessary and wont affect anybody if youd remove it It would make my life so much easier Thanks in advance Newer repository URL You will need to rebuild Win CompatibilityTestunitypackage to reflect the changes inside the package For some reason it sets the Color property instead of the specified property on the first loop though the keys The specified trouble line is line in ShortcutExtensions cs targetcolor ccolor targetcolor is Color which is not desirable my project use ngui for example when sences has cameras A and B A localposition is B localposition is if call DoMove in A camera z value change to a wrong value if i set A camera to to it works when set z value more than always error 