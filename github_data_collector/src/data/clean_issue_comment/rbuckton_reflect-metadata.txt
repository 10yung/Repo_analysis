Hi can you help me with how to get parameters types from function I can get constructor parameter type by ReflectgetMetadatadesignparamtypes target but get nothing for ReflectgetMetadatadesignparamtypes targetprototypesomemethod I have looked around about it and didnt found any answer about it so sorry for asking here If someone could shed some light on it Reflection in both Java NET is very slow as we know Is it same with TypeScript implementation Is there any noticeable runtime performance impact evolved I used the reflectmetadata installation package I introduced it and configured some corresponding methods in the tsconfig file I have to specify some parameters Specify the parameter as node to use normally otherwise it will report an error ReflectdefineMetadata is not a function But now the devserver in webpack doesnt work Every time you write any properties or methods in Reflectmetadata it wont reload properly I have to manually force the shutdown and restart npm run dev How to solve this Exposing metadata map My team and I are currently working on an internal framework for our company We are trying to create a solution for multi inheritance in javascript and we are almost there the only problem we have left to solve is extending the metadata from typescript class properties without default values or assignments in the constructor In order to have access to those properties Im exposing the MetadataMap This will make it possible to iterate over the properties and use that metadata without knowing the actual property name Example class ReflectmetadatametadataKey value value property string can you create github releases and git tag for v thanks Line should not check IsConstructor exporterdeleteMetadata deleteMetadata function DecorateConstructordecorators target for var i decoratorslength i i var decorator decorators i var decorated decoratortarget if IsUndefineddecorated IsNulldecorated if IsConstructordecorated throw new TypeError target decorated return target As you can see on the image decorated is a react class hence typeof decorated is object and not function See the right behaviour of Reflectget below compared to ReflectgetMetadata when a proxy is involved ts import reflectmetadata const METADATAKEY Symbol const post id ReflectdefineMetadataMETADATAKEY Hello post const postProxied new Proxypost consolelogReflectgetpost id OK displays consolelogReflectgetpostProxied id OK displays consolelogReflectgetMetadataMETADATAKEY post OK displays Hello consolelogReflectgetMetadataMETADATAKEY postProxied NOT OK undefined metadata My question then how do I access an objects metadata when this object has been proxified Everything shouldnt be transparent like it is when using Reflectget You can find the following error description on StackOverflow Question I get a circular loader exception This is may caused by the compiler option emitDecoratorMetadatatrue How can I fix it Thanks for helpful replays Introduction I have prepared a minimal project for reproducing the error Please take a look at my temporary git repository git repo for bug presentation I use two libraries typeorm and json typescript and both operate with decorators I use multiple decorators from both libraries on some class properties Steps for reproducing Clone the git repo Install all packages by the command npm i npm Open the root directory by Visual Studio Code Open bugexampletesttestspects go to the debug view and start debugging by the config Mocha current file After these steps you should see an exception output bugexamplenodemodulesreflectmetadataReflectjs var decorated decoratortarget propertyKey descriptor Error Fatal error in JsonConvert It is not allowed to explicitly pass undefined as second parameter in the JsonProperty decorator Class property banana Use Any to allow any type You can import this class from json typescript The property banana gets the type Banana as parameter and this type is undefined for unknown reasons The library json typescript is not the cause of this problem Analysis Now I want to breakdown the issue I begin with the two model classes and end with the test At first please take a look at bugpresentationsrcpersistencemodelsapemodelts typescript import JsonObject JsonProperty from json typescript import Column Entity OneToOne PrimaryGeneratedColumn from typeorm import Banana from bananamodel This is an entity class author Tim Lehmann lfreenetde JsonObjectApe Entity export class Ape PrimaryGeneratedColumn readonly id number JsonProperty Column readonly name string null the associated table holds the foreign keys JsonProperty Banana OneToOnetype Banana banana bananapossessionOf cascade true readonly banana new Banana In line the type Banana is the passed parameter but for unknown reasons its undefined for the current test at this time Now take a look at bugpresentationsrcpersistencemodelsbananamodelts please typescript import JsonObject JsonProperty from json typescript import Column Entity JoinColumn OneToOne PrimaryGeneratedColumn from typeorm import Ape from apemodel author Tim Lehmann lfreenetde JsonObjectBanana Entity export class Banana PrimaryGeneratedColumn private readonly id number JsonProperty Column readonly weight string null OneToOnetype Ape possessionOf possessionOfbanana JoinColumn name possessionOf readonly possessionOf Ape new Ape Line and are problematic If I comment these lines out then there is no loader exception Please take a look at bugpresentationtesttestspects lastly typescript import expect from chai import Ape from srcpersistencemodelsapemodel import Banana from srcpersistencemodelsbananamodel const classApe Ape const classBanana Banana describecheck if class type exist itcheck class Ape is defined expectclassApeexist itcheck class Banana is defined expectclassBananaexist I want to test that the typeclass Banana isnt undefined but the test breaks earlier because the library json typescript throws an exception if the passed property in this case type Banana is undefined The strange behavior is that if I assign the class Ape to a variable remove the comment at line then the typeclass Banana is defined ts class Point x number y number class Line private p Point private p Point validate set p value Point thisp value get p return thisp validate set p value Point thisp value get p return thisp function validateTtarget any propertyKey string descriptor TypedPropertyDescriptorT let set descriptorset descriptorset function value T let type ReflectgetMetadatadesigntype target propertyKey consolelogtype undefined if value instanceof type throw new TypeErrorInvalid type setcalltarget value json compilerOptions target es lib dom domiterable esnext allowJs true skipLibCheck true esModuleInterop true allowSyntheticDefaultImports true strict true forceConsistentCasingInFileNames true module esnext moduleResolution node isolatedModules true noEmit true jsx preserve experimentalDecorators true emitDecoratorMetadata true resolveJsonModule true include src When I have installed and configured reflectmetadata in my typescript application with vs and nodejs i get the following error message while I execute the following code My application code TypeScript const port processenvport Execution Error TS TS Cannot find name process even the global variable global cannot be found My Configuration tsconfigjson json compilerOptions module commonjs target es lib es sourceMap true types reflectmetadata moduleResolution node experimentalDecorators true emitDecoratorMetadata true exclude nodemodules packagejson json devDependencies typesnode reflectmetadata if I comment out the line types reflectmetadata my application will work How can I fix this Problem Thanks in advance 