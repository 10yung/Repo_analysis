I need an eitherof filter It should accept a hash of values where exactly one key of the listed if filled ruby eitherof do hash a do string f end hash b do string f string f end hash c do string f string f end end Valid a f qwe b f qwe f wqe c f asd f asd Error a f qwe b f qwe f wqe d a f qwe d qwe What do you think Modifies InputFilter to return a dup of the given default value rather than the value itself This prevents leaks across multiple calls of a command Previously if the validation or execution logic of a command mutated the default value object that change was persisted to subsequent calls of the command and could lead to unexpected behavior By duping the default value in InputFilter any command logic that mutates the value is prevented from leaking TypoTweak Im using validation outcome in the return payload of my API ie something like render json outcomeerrors I would expect that adding custom errors in nested object would be consistent with the native filtering Expected user currentpassword key currentpassword ruby hash user do string currentpassword minlength end user currentpassword key currentpassword symbol minlength message Current Password is too short index null Got user currentpassword key usercurrentpassword ruby adderrorusercurrentpassword minlength user currentpassword key usercurrentpassword symbol minlength message Current Password is too short index null is it by design or is it a bug lets use this example optional do array tags class String hash prefs do boolean smoking boolean view end end Id like to use custom validation on smoking Im doing this in the validate method How to add an error on key prefs smoking Is it possible with adderror Adds a filter for UUID values Example ruby class SampleMutation MutationsCommand required do uuid userid end end When allowcontrolcharacters is false the default StringFilter replaces characters that ruby classes as unprintable with a space Unfortunately ruby considers some emoji as unprintable for example This means that those emoji are silently stripped out of the passed string by default This is a problem on ruby Version fixes the issue I guess theres a decision here about whether this behavior should depend on the ruby version or not It would be nice if there were rails generators that automatically generate mutations given inputs along with types and whether they are optionalrequired I believe such a feature will make it easier to adapt to this gem and increase usability Can I start implementing such a feature I would like to contribute Related to This should support both string and symbolic access to the errors hash Hi there I noticed that the StringFilters ability to strip control characters misses a few characters that imho should not be present in strings in the vast majority of applications Im talking about UTF BOM zerowidth characters and such Everything that belongs to the Unicode Format class This PR causes the StringFilter to strip such characters from strings by default like it already does with other nonprintable characters 