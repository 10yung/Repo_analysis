This PR addresses an issue weve faced with a large Turnip codebase using placeholders with generic names like object in multiple helpers across multiple files This led to the placeholders being easily overridden and producing obscure and hard to track down bugs in our test suite The main change is to issue a warning that a a placeholder is being replaced if theres already a nondefault placeholder The warning includes the file and line using callerlocations which is supported in Ruby onwards With just this change the Turnip test suite now issues warnings as it runs as it relies on replacing placeholders being silent To address this Ive added a clear convenience method which removes all the added placeholders reverting them to the original default Hello Just try turnip and I believe it will fix my old cucumber issue too much file to much folder step hard to organise no scope I want to progressively move my cucumber sc nario to turnip scenario but after lot of search I didnt find any documentation about code coverage setup Is there someone who have done that before here I really like Turnip Ive struggled with Cucumber for a number of years but have equally struggled to find an expressive way of writing feature tests in Rspec One thing I did like about Cucumber is how it output each step as it was executed and Ive tried to implement this in Turnip Some of it is a bit hacky for example line so would appreciate any feedback on how to improve it I use TurnipTablenew to call step that takes table argument like following rb step There are admin user user of companyname do user companyname table TurnipTablenew name admin user true step There are employees of companyname table end step There are employees of companyname do companyname table company Companyfindbyname companyname tablehasheseach do row user companyuserscreaterowslicename if row admin useradmin end end end But TurnipTablenew example is not in README Is it a private API I want convert the array to TurnipTable implicitly when passing the array to another step like following rb step There are admin user user of companyname do user companyname Passing as Array step There are employees of companyname name admin user true end step There are employees of companyname do companyname table company Companyfindbyname companyname table is a TurnipTable instance from the array tablehasheseach do row user companyuserscreaterowslicename if row admin useradmin end end end before and after hooks defined in a stepfor block are automatically scoped to the tag of the stepfor block before all blocks are run before each feature while before each blocks are run before each scenario The situation is similar for after blocks Im not super thrilled with the testing strategy that I adopted here so If you have any suggestions for a prettier way to test that this is working Id be all ears 