Wazuh versionComponentInstall typeInstall methodPlatform Centralized Configuration ManagerAgent Packages Windows Hello Im attempting to get the centralized configuration feature to work in our environment Im able to get the agentconf file properly pushed to the clients from the wazuh manager but it appears that the agentconf file isnt properly overwriting the ossecconf file and applying the new settings The changed Im trying to remotely apply to all the agents is simply to add the whodatayes modifier to search locations for syscheck Despite the agentconf file properly being pushed and synced to the clients it doesnt appear that whodata is being sent via alerts to the manager Ive verified that the GPO on all devices is properly auditing SACL data and in a test was able to produce the whodata after manually editing the ossecconf file But for some reason the agentconf file with the whodata setting isnt taking precedence or overwriting the ossecconf file ossectxt agenttxt Thanks for all your help Wazuh versionComponentInstall typeInstall methodPlatform Vulnerability detector Manager Packages RPMDebian Hello team We noticed a nonexpected behavior using a custom msujson for our Vulnerability detector After creating a new msujson including the vulnerabilities the Wazuh manager is not able to alert about the new vulnerabilities referring to new CVEs included in the new msujson Context Wazuh manager Version OS Debian Vulnerability configuration vulnerabilitydetector enabledyesenabled interval sinterval ignoretime signoretime runonstartyesrunonstart provider namecanonical enablednoenabled ospreciseos ostrustyos osxenialos osbionicos updateinterval hupdateinterval provider provider namedebian enablednoenabled oswheezyos osstretchos osjessieos osbusteros updateinterval hupdateinterval provider provider nameredhat enablednoenabled updatefromyear updatefromyear updateinterval hupdateinterval provider provider namenvd enabledyesenabled updatefromyear updatefromyear updateinterval hupdateinterval provider vulnerabilitydetector Wazuh agent Version OS Windows Server with CryptoAPI by default Configuration all disabled except syscollector module as follow wodle namesyscollector disablednodisabled interval minterval scanonstartyesscanonstart hardwareyeshardware osyesos networkyesnetwork packagesyespackages ports allnoyesports processesyesprocesses wodle Since feedwazuhcom is not ready yet having the msujson updated can be accomplished only with Wazuh upgrades when available or manual msujson building In this case we wanted to detect the vulnerability CVE which is not included in the default Wazuh v msujson For that I built the attached msujsonzip This file was built from vulnerabilities to current th Jan Goal Replacing the default msujson Wazuh manager file by the attached one we want to be able to alert when a Wazuh agent not updated has the vulnerability CVE Steps We stopped the Wazuh manager We replaced the default msujsongz varossecqueuevulnerabilitiesdictionariesmsujsongz by our custom attached file After replacement we restarted the manager with wazuhmodulesdebug in internaloptionsconf We saw the following message checkhotfix DEBUG We have not found a hotfix that solves CVE for agent in the Microsoft feed so it is not possible to know it is vulnerable This message is weird because if we check the CVE database root e f varossecqueuevulnerabilities sqlite cvedb select from MSU where CVEID CVE grep CVE Windows Server Server Core installation Windows CryptoAPI Spoofing Vulnerability CVE Windows Server Windows CryptoAPI Spoofing Vulnerability CVE included in NVDCVE database root e f varossecqueuevulnerabilities sqlite cvedb SQLite version Enter help for usage hints sqlite select CVEID from NVDCVE where CVEID CVE CVE In the msujson CVE patch product Windows Server restartrequired subtype title Windows CryptoAPI Spoofing Vulnerability url patch product Windows Server Server Core installation restartrequired subtype title Windows CryptoAPI Spoofing Vulnerability url We tried removing the cvedb and the agent database The Microsoft Catalog has the corresponding update available So if the cvedb tables have the information we dont understand why the alert is not produced Best regards Alberto R Related issue Description These are the unit tests for the new functions implemented in the PR Wazuh versionComponentInstall typeInstall methodPlatform x API Description We are working on a table to show the output of this request GET syscheckagentid When we tried to filter with q parameter these requests fails Filter by mtime or date any operator json GET syscheck qmtime error message Param not valid Review queries documentation Field q data false File When include slash json GET syscheck qfileusrbinc gcc error message Param not valid Review queries documentation Field q data false If possible we would need more parameters in the API for filter the requests by mtime a date or date range date a date or date range uname a user or list of users uid an ID of user or list of IDs gname a Group name or list of groups gid an ID of group or list of IDs On the other hand we need some outputs with the list of unique values for these fields uname uid gname gid file Thanks and regards Jose Related issue This template reflects sections that must be included in new Pull requests Contributions from the community are really appreciated If this is the case please add the contribution to properly track the Pull Request Please fill the table above Feel free to extend it at your convenience Description Add a clear description of how the problem has been solved The fix is the one explained in Tests After applying the fix the same test using pympler have being done in both master and worker nodes with similar results types objects total size From time to time other objects timerHandler appeared but after some seconds they were deleted so it shows the memory leak is gone Test stages x Same information for tag and subtags shown in clusterlog for both master and worker x No errors in clusterlog for both master and worker Depending on the affected components by this PR the following checks should be selected and marked Description wazuhclusterd may increase memory usage over time due to inappropriate setting of loggers and filters The problem comes from a continuous creation of loggers and filters wazuhClusterFilter when processing localrequests in the Handlerclass in the following block of code Due to the following code line in the AbstractServerHandler class the previous lines are going to continously create new logger childs loggergetChildtag up until the maximum randomrandint Also due to selfloggeraddFilterselfloggerfilter every new local request using a Handler will create a ClusterFilter object and add it to the logger potentially accumulating ClusterFilter objects in the memory as we can see in the following code Fix We have setup two context variables in order to set the tag and subtag for the logger filter based on the context Context vars contexttag ContextVar str ContextVartag default contextsubtag ContextVar str ContextVarsubtag default This way we no longer get a new logger neither use addfilter when we are in the Handler class constructor but rather use the main one and setup the appropriate context for the filter to use Such as loggingLogger object used to write logs selflogger logginggetLoggerwazuh logging tag selftag tag modify filter tags with context vars clustercontexttagsetselftag clustercontextsubtagsetMain With the new filter in ClusterFilter class def filterself record recordtag contexttagget if contexttagget else selftag recordsubtag contextsubtagget if contextsubtagget else selfsubtag return True How to reproduce the bug SImilarly to the research done in by crd we have used pympler library in order to get the incremental of objects between sync operations in the cluster while sending a local request petition cluster socket in varossecqueueclustercinternalsock every seconds sync happens in a seconds cycle Leading to types objects total size dict KB list B str B wazuhclusterclusterClusterFilter B loggingLogger B Also we have further stressed the cluster with thousands of petitions and checked the summary of objects that are retained in the memory after we stop types objects total size wazuhclusterclusterClusterFilter MB loggingLogger KB Description This PR removes function delplist from Rootcheck which is duplicate Instead of using it the function wdelplist will be used This PR must be tested on Windows and Linuxagent or manager not relevant It must be ensured that Rootcheck scan works correctly Tests Minimum checks required Compilation without warnings in every supported platform x Linux x Windows MAC OS X x Source installation Checks for huge PRs that affect the product more generally x Rootcheck scan works Related issue Description This PR adds two new digests to the Filebeat module to generate the geolocation information of Guarddutty alerts Result Tests Depending on the affected components by this PR the following checks should be selected and marked Minimum checks required Compilation without warnings in every supported platform Linux Windows MAC OS X Source installation Package installation Source upgrade Package upgrade Review logs syntax and correct language QA templates contemplate the added capabilities Depending on the affected OS Memory tests for Linux Scanbuild report Coverity Valgrind memcheck and descriptor leaks check Dr Memory AddressSanitizer Memory tests for Windows Scanbuild report Coverity Dr Memory Memory tests for macOS Scanbuild report Leaks AddressSanitizer Checks for huge PRs that affect the product more generally Retrocompatibility with older Wazuh versions Working on cluster environments Configuration on demand reports new parameters x The data flow works as expected agentmanagerapiapp Added unit tests for new features Stress test for affected components Description Currently there are two main ways to upgrade an agent varossecbinagentupgrade API endpoint PUTagentsagentidupgradecustom y PUTagentsagentidupgrade The API runs as ossec user by default so a problem arises if the agentupgrade utility is executed as root and then an API endpoint WazuhAPI WazAPI PUT agentsagentidupgrade WazuhAPI WazAPI CMD Command varossecframeworkpythonbinpython argsu wazuhapimodelswazuhapipy stdinfunctionPUTagentsagentidupgradeargumentsagentid waitforcompletefalse WazuhAPI WazAPI CMD Exit code WazuhAPI WazAPI CMD STDOUT message Errno Permission denied varossecvarupgradewazuhagentv windowswpk error WazuhAPI WazAPI CMD STDOUT bytes WazuhAPI WazAPI Errno Permission denied varossecvarupgradewazuhagentv windowswpk WazuhAPI WazAPI PUT agents upgrade error roothost wazuh ll varossecvarupgrade total rwr root root Jan wazuhagentv windowswpk Fix The wpk file is created here After that some code must be added in order to set file permissions in the following way rwrw ossecossec Wazuh versionComponentInstall typeInstall methodPlatform RemotedAnalysisddb Manager Any Any Hello team While testing which allows registering up to agents I found out that as soon as you register more than agents remoted crashes and that due to the number of file descriptor that can open by default it seems to be like one file descriptor for each agent registered Maximum number of file descriptor that Remoted can open remotedrlimitnofile Crashremoted It is so probable that the same thing will happen to analysisd and other daemons as they all have default values in the internal options Increasing the remotedrlimitnofile solved the issue for remoted We made a PR here However we think that this should not be normal behavior and should be fixed at the design level Regards Miguel Casares