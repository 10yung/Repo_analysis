I encountered a problem when consuming testify through gobuffalo I wanted to boot the development environment using a tests fixture from their fixture tooling They use testify suites to integrate fixtures into controller tests Since setting up a concrete T is quite laborious given much of what go test uses to do it is hidden it makes more sense to me to provide a stub which can only work if testify consumes an interface Implements a ErrorIs as a test for error wrappers from the new error methods in go go errA errorsNewsome error errB fmtErrorfwrapping w errA assertErrorIst errA errB Hi All I would like to be able to assertrequire that a function panics with an error and that the error message matches some regexp Currently Im solving this in a test like this func TestPanict testingT defer func if r recover r nil err ok rerror requireTruet ok Did not panic with error requireRegexpt someRegexp errError else requireFailt Did not panic funcToTest But Id like to wrap this up into a single assertionrequire eg func TestPanict testingT requirePanicsWithErrorRegexpt someRegexp func funcToTest For consistency there would also be a PanicsWithErrorRegexpf assertion which accepts a formatted string Any comments on the idea or the assertion name before I start coding something up NilNotNil assertions should work with unsafePointer since nil and nil do Will be great to add some alerting if no tests were found using testify filter For example standard go test displays testing warning no tests to run at go test run unesistingTest For now testify works as follow go test failfast v run TestSuiteSomeOperationExecute testifym AAAAA RUN TestSuiteSomeOperationExecute PASS TestSuiteSomeOperationExecute s PASS ok githubcomsomepathtopackage s Codegen has a bug when the docstring contains nested brackets parenthesis This needs to be fixed as it manifests into inconsistent incorrect docstrings for our autogenerated functions Example InDelta Hi all I have a code func xxx x int if x logFatalfFatal msg Now I cant catch it itd be great to catch it like this func xxx assertNotFatalst func xxx and some other functions like PanicsWithError A solution proposition for my issue Im writing a testing suite that spins up some resource on SetupSuite in my case a virtual machine runs some tests against it then destroys the resource on TearDownSuite Now sometimes the resource may fail to spin up or have some issue with it which makes running the tests useless in which case Id like to suiteTFailNow However if you run suiteTFailNow during SetupSuite then the TearDownSuite never runs which could lead to the VM not being destroyed could lead to danglingcostly VMs Is this by design If so how could I go about solving my issue tip Can change at any time Has no stabilitycompatability guarantee Is development code can be broken Is out of control of testify contributors I addition go versions and are completely missing from the build matrix as well as release yet tip is present