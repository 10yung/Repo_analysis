hibbhg Hello devs and thank you for this great polyfill I am facing a strange bug in IE on Browserstack no access to and old Windows system In short the behaviour of preProcessedHeaderssplit r nforEach seem to be inconsistent between for instance Chromes last version my reference point and IE on Browserstack IE Incorrect Chrome Correct Meaning that the polyfill simply doesnt work for me on IE If you want to try yourself assuming you have an access to an IE browser preProcessedHeaderssplit r n preProcessedHeaders nsplit r n preProcessedHeaders rsplit r n preProcessedHeaders r nsplit r n Is anyone able to reproduce this Thank you for your time in advance Note Polyfill version Here is the IE build I tested with is there any update on this i can see request post for this dated past year we currently have a requirement for this and are looking for some solution or alternatives please Response has no body property available which is needed as a getter to expose a ReadableStream of the body contents In the section of the HTTP RFC it denotes the following about HTTP headers Most HTTP header field values are defined using common syntax components token quotedstring and comment separated by whitespace or specific delimiting characters Delimiters are chosen from the set of USASCII visual characters not allowed in a token DQUOTE and token tchar tchar DIGIT ALPHA any VCHAR except delimiters Note the tchar definition allows use of an exclamation mark but the validator for normalizeName does not allow it This PR adds the exclamation mark to the list of allowed characters to header fields Verification Execute the following in the browser console js const headers new Headers headersappendtest Executes fine headersappendtest Throws a TypeError This polyfill is an outdated implementation of the fetch standard See this change to the fetch standard in To come back in compliance with the standard the polyfill needs to stop lowercasing headers regardless how headers are meant to be interpreted in RFC Browser implementations such as Chrome are already in compliance and do not lowercase headers for fetch calls Fixes wheresrhysfetchmock Details fetchmock wraps the Response object in an ES Proxy to provide useful test harness features such as flush However on ES browsers without fetch or Proxy support pollyfills must be used the proxypollyfill is unable to proxy an attribute unless it exists on the object before the Proxy is created This change ensures ResponsebodyUsed exists on the instance while maintaining the semantic of setting RequestbodyUsed in the constructor before initBody is called Hello we are the development team of VS Code extension for debugging React Native apps vscodereactnative whatwgfetch package is used in React Native lib In our extension we debug React Native apps as a Nodejs processes Node JS global context doesnt contain DOM modules so exportsDOMException is not a constructor exception is generated in whatwgfetch package if fetch function is used in a React Native project Could it be better to firstly verify if there is DOMException module in environment global context and only after that use trycatch construction If DOMException module doesn t exist it can be better to create this module without exception generation Here is the issue for the corresponding case in the debugger extension repository According to WHATWG fetch specification default statusText for Response should be empty string Fixes According to WHATWG fetch specification default statusText for Response should be empty string Specification changed See and for tests For changes in browser implementations see Chromium Issue landed in Chrome Firefox Bug will land in Firefox 