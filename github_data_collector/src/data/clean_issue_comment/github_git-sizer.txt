It would be nice to get a list of N biggest files in the repo Both compressed and uncompressed sizes to be shown If you follow these build instructions and run make test on one of the targz releases you get make test echo Messages command failed output error couldnt open Git repository git revparse failed fatal not a git repository or any of the parent directories git n n make gotest Error Just running git init in the build directory works around it but I dont know how much this breaks the tests if at all make test echo ok githubcomgithubgitsizer s ok githubcomgithubgitsizercounts cached githubcomgithubgitsizergit no test files githubcomgithubgitsizerisatty no test files githubcomgithubgitsizermeter no test files githubcomgithubgitsizersizes no test files So now I do git init in my packaging script but it would be neat if this worked out of the box I have a largish bare repo with Git LFS installed SVN to Git migration console projgit BAREmaster gitsizer Processing blobs Processing trees Processing commits Matching commits to trees Processing annotated tags Processing references Name Value Level of concern Overall repository size Blobs Total size GiB Biggest objects Trees Maximum entries k Blobs Maximum size MiB Biggest checkouts Number of directories k Maximum path depth Maximum path length B Number of files k Total size of files GiB Ive written a little git lfs lsfile helper gitlfscalculatesizebytypepy which reports for projgit repo this console Git LFS objects summary lib count size MB dll count size MB pdb count size MB exe count size MB zip count size MB Total count size MB Does the latter MB relate to the former GiB in any way Or is the grand total of the repo Git and Git LFS objects a sum of the two figure This adds the explanation given in by mhagger to include some more details of what the provided size values for total size mean an what purpose they can be used for See also Issue For automation purposes it would be a great feature to be able to analyze repositories and get a machine readable exit code that states that critical issues were found One way is to directly have critical set the exit code or add another flag that does that if critical issues were found Thanks for creating this great tool Git objects reachable only from refsnotes are peculiar and not likely to be checked out so probably it would be better not to include them for the items under biggest checkouts OTOH it probably does make sense to include them in the other statistics Are there other reference namespaces in common use that should get similar special treatment 