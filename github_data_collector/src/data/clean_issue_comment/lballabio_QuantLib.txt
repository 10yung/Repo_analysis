There was a typo in the HullWhite spread data table also removed duplicated gaussianCopula test and increased the relative tolerance so that the test will pass as is Fixes Hi LuigiPeter As discussed over email the calculation of OvernightIndexFuturecompoundedSpotValue needs to include the compound factor between evaluation and reference date Best Luis Chion see the discussion here No coverage via automated tests yet but verified visually details summaryPython code to produce following payoff diagrams Changes to QuantLibSWIG to be submitted in a subsequent PRsummary python def maketestoptionpayoff spotprice import QuantLib as ql calculationdate qlDate qlSettingsinstanceevaluationDate calculationdate testoption qlVanillaOption payoff qlAmericanExercise calculationdate qlDate testoptionsetPricingEngine qlBinomialVanillaEngine processqlBlackScholesMertonProcess s qlQuoteHandleqlSimpleQuotespotprice dividendTSqlYieldTermStructureHandle qlFlatForward calculationdate dividend rate qlActual Fixed riskFreeTSqlYieldTermStructureHandle qlFlatForward calculationdate riskfree rate qlActual Fixed volTSqlBlackVolTermStructureHandle qlBlackConstantVol calculationdate qlUnitedStates annualized historical volatility qlActual Fixed typecoxrossrubinstein steps return testoption from QuantLib import CappedPayoff Date Option PlainVanillaPayoff vanillaoption maketestoptionPlainVanillaPayoffOptionPut vanillapayoffs cappedpayoffs evalprice while evalprice vanillaput maketestoption PlainVanillaPayoffOptionPut evalprice vanillapayoffsappendvanillaoptionpayoffevalprice cappedput maketestoption CappedPayoffOptionPut evalprice cappedpayoffsappendcappedputpayoffevalprice evalprice evalprice from matplotlib import pyplot pyplotplotvanillapayoffs labelVanilla Put linewidth pyplotplotcappedpayoffs labelCapped Put linewidth pyplotlegend pyplotshow details Hello Looking at the new Escrowed dividend model in FdBlackScholesVanillaEngine it appears that the discount factor used is the riskfree rate factor divided by the dividend yield factor That seems unusual Even assuming theres an income rate on the stock on top of the discrete dividends if the dividends are known with certainty they should earn the riskfree rate Am I missing something Thank you Todays Oct spot date is Oct for USD mL swaps The holiday calendar used to bump dates on the swap fixed float schedules is a joint UKUS calendar However when I pass this joint calendar to the constructor I get earliestDate Oct for the resulting ratehelper which ties out with the joint calendar that I passed to it but not with the effective date that should be generated by the index Oct AFAIK building the dates consists of the following procedure for backward generated schedule determine effective date in this case equal to index spot date but for forwards equal to today forward period advance by tenor of swap to get unadjusted maturity date UMD proceed backward from UMD by schedule frequency to get unadjusted intermediate dates use proper holiday calendar to turn all unadjusted schedule dates to holiday adjusted dates use holiday calendar and payment lag USD days to generate coupon payment dates Note that this does not seem to be an issue for USD OIS deals since there is only one calendar being used for everything Also wasnt sure to put this on the SWIG repo or on the main QL repo so apologies if this is on the wrong one Thoughts Mike I created an option object with BSM process BarrierOption model and setted on AnalyticBarrierEngine I want to get the simple greeks like Delta Then I applied delta to the option object which returned delta not provided I checked the raw code which says BarrierOption has delta method Meantime the AnalyticBarrierEngine should has analytic solutions which means the greeks can be calculated If the analytic method doesnt work is there any other easy ways to get the greeks like difference methods Thanks a lot hello i found in here inside conditionalExpLossRRInv implementation its calling conditionalRecoveryInvPinvRR but i cant find conditionalRecoveryInvPinvRR anywhere its not in SpotRecoveryLatentModel or its parent LatentModel is this an issue i wonder how this could compile through In the German implementation C Dateserialtype Thirty GERImpldayCountconst Date d const Date d const Day dd d dayOfMonth dd d dayOfMonth Month mm d month mm d month Year yy d year yy d year if mm dd DateisLeapyy dd if isLastPeriod mm dd DateisLeapyy dd Shouldnt this line be dd return yy yy mm mm stdmaxInteger dd stdminInteger dd Im wondering if the second dd should be dd Thank you Hi more a question than an issue Looking at some older issues I see there have been attempts to upgrade the code to C but due to legacy compiler support this has been done in a limited and backwards compatible way My question is is there still a need for C support and and if so is there a timeline for deprecationremoval Id be happy to help with a C or higher overhaul of the library 