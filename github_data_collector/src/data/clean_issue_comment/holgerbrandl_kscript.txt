Using JDK everything is working except dependency resolution kscript Resolving dependencies kscript Resolving orgopenjsseopenjsse Exception in thread main javalangNoClassDefFoundError orgietfjgssGSSException at comninghttpclientprovidersnettyNettyAsyncHttpProviderclinitNettyAsyncHttpProviderjava at orgsonatypeaetherconnectorasyncAsyncRepositoryConnectorgetDefaultProviderAsyncRepositoryConnectorjava at orgsonatypeaetherconnectorasyncAsyncRepositoryConnectorgetProviderAsyncRepositoryConnectorjava at orgsonatypeaetherconnectorasyncAsyncRepositoryConnectorinitAsyncRepositoryConnectorjava at orgsonatypeaetherconnectorasyncAsyncRepositoryConnectorFactorynewInstanceAsyncRepositoryConnectorFactoryjava at orgsonatypeaetherimplinternalDefaultRemoteRepositoryManagergetRepositoryConnectorDefaultRemoteRepositoryManagerjava at orgsonatypeaetherimplinternalDefaultArtifactResolverresolveDefaultArtifactResolverjava at orgsonatypeaetherimplinternalDefaultArtifactResolverresolveArtifactsDefaultArtifactResolverjava at orgsonatypeaetherimplinternalDefaultArtifactResolverresolveArtifactDefaultArtifactResolverjava at orgapachemavenrepositoryinternalDefaultArtifactDescriptorReaderloadPomDefaultArtifactDescriptorReaderjava at orgapachemavenrepositoryinternalDefaultArtifactDescriptorReaderreadArtifactDescriptorDefaultArtifactDescriptorReaderjava at orgsonatypeaetherimplinternalDefaultDependencyCollectorcollectDependenciesDefaultDependencyCollectorjava at orgsonatypeaetherimplinternalDefaultRepositorySystemresolveDependenciesDefaultRepositorySystemjava at comjcabiaetherAetherfetchAetherjava at comjcabiaetherAetherresolvearoundBody Aetherjava at comjcabiaetherAetherAjcClosure runAetherjava at orgaspectjruntimereflectJoinPointImplproceedJoinPointImpljava at comjcabiaspectsajMethodLoggerwrapMethodLoggerjava at comjcabiaspectsajMethodLoggerajcinlineAccessMethodcomjcabiaspectsajMethodLoggercomjcabiaspectsajMethodLoggerwrapMethodLoggerjava at comjcabiaspectsajMethodLoggerwrapClassMethodLoggerjava at comjcabiaetherAetherresolveAetherjava at comjcabiaetherAetherresolvearoundBody Aetherjava at comjcabiaetherAetherAjcClosure runAetherjava at orgaspectjruntimereflectJoinPointImplproceedJoinPointImpljava at comjcabiaspectsajMethodLoggerwrapMethodLoggerjava at comjcabiaspectsajMethodLoggerajcinlineAccessMethodcomjcabiaspectsajMethodLoggercomjcabiaspectsajMethodLoggerwrapMethodLoggerjava at comjcabiaspectsajMethodLoggerwrapClassMethodLoggerjava at comjcabiaetherAetherresolveAetherjava at kscriptappDependencyUtilKtresolveDependenciesViaAetherDependencyUtilkt at kscriptappDependencyUtilKtresolveDependenciesDependencyUtilkt at kscriptappKscriptKtmainKscriptkt at javabasejdkinternalreflectNativeMethodAccessorImplinvoke Native Method at javabasejdkinternalreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at javabasejdkinternalreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javabasejavalangreflectMethodinvokeMethodjava at orgjetbrainskotlinrunnerAbstractRunnerrunrunnerskt at orgjetbrainskotlinrunnerMainrunMainkt at orgjetbrainskotlinrunnerMainmainMainkt Caused by javalangClassNotFoundException orgietfjgssGSSException at javabasejavanetURLClassLoaderfindClassURLClassLoaderjava at javabasejavalangClassLoaderloadClassClassLoaderjava at javabasejavalangClassLoaderloadClassClassLoaderjava more A first bug was reported jdk is years old and some people prefer to use newer versions of jdk I wrote a simple script with a simple dependency to comopencsvopencsv I get the following error message kscript Resolving dependencies kscript Resolving comopencsvopencsv kscript ERROR Failed while connecting to the server Check the connection httphttps port proxy credentials etc of your maven dependency locators If you suspect this is a bug you can create an issue on kscript ERROR Exception orgsonatypeaetherresolutionDependencyResolutionException failed to load comopencsvopencsvjar runtime from maven releasessnapshots without authentication maven releasessnapshots without authentication into Usersmyuserm repository Is it possible to have a clearer error message on what could be causing this the repository urls work perfectly on maven and gradle and I cant seem to find a reason for kscript to fail on resolving the dependencies Kscript doesnt interpret nonabsolute URIs as being relative to a script when its remotely executed leading to exceptions like the following Exception in thread main javalangIllegalArgumentException URI is not absolute at javanetURItoURLURIjava at kscriptappResolveIncludesKtresolveIncludesResolveIncludeskt at kscriptappKscriptKtmainKscriptkt at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at orgjetbrainskotlinrunnerAbstractRunnerrunrunnerskt at orgjetbrainskotlinrunnerMainrunMainkt at orgjetbrainskotlinrunnerMainmainMainkt kscript should ideally take fileIncludefookt statements and if executed from a script invoked via kscript and interpret the fookt reference as Given that improved relative referencing of fileInclude it seems that this doesnt take into account remote invocations This allows for running logic after the file include annotation For example kscript fileIncludefilekt myFunction See and Command kscript idea somefilekts Produces an IntelliJ project with a buildgradle in the root Since we all love Kotlin it may make sense to transition this to a buildgradlekts now thats got first party support in Gradle Thanks for such a great project Without this kscript help takes to seconds With this it takes seconds This still needs to be integrated into the release script but for now you can use it by running gradlew nativeImage then using the binary at buildgraalkscriptnative As discussed on this PR processes KOTLINOPTS in kscript bash The kotlin code differences between and this are It is one commit KOTLINOPTS processing code has been removed and it is lazy operation for package Now scripts using KOTLINOPTS can enjoy the startup time improvement by reusing the JVM at the expense of complex kscript bash script Running the package option with gradle installed causes it to fail with the underlying gradle message Gradle does not allow passing null for the configuration action for CopySpecfrom Note that the message was captured debugging With gradle it worked fine The gradle build file created with kotlin idea filekt is as follows groovy plugins id orgjetbrainskotlinjvm version repositories mavenLocal jcenter dependencies compile orgjetbrainskotlinkotlinstdlib compile orgjetbrainskotlinkotlinscriptruntime sourceSetsmainjavasrcDirs src Is this version a fixed value Is there a reasonable way of obtaining the latest stable version or prompting the user Perhaps raises the question of which Kotlin compiler version kscript should use ever Would love to PR and work on this 