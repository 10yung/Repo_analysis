 Plugins API Looking for feedback on couple of thoughts around ways to improve our plugin API Reasoning Theres a lot of requested features for Kap and I know we try to not add new settingspreferences but it gets hard to manage all of that I think a good solution is for these features to be plugins The current plugin API is a bit limiting only exporting We should try to expand it a bit more and allow for a bigger variety of plugins that can take the load off of Kap This will also help people only have the functionality they want Ive been thinking about a few of these for a while but I wanted to put it in writing so I can keep track and get other peoples thoughts on the matter before I start implementing parts APIs Exports This is the only type of plugin we support at the moment I think the API we currently have is good but we might experiment with more options like Allowing plugins to addmodify ffmpeg arguments use cases slow motion speed up Allow plugins to not use the default ffmpeg process we provide but handle the export completely on their own more complex ffmpeg conversions Allow plugins to provide error messages we let them provide loading text should be able to have them show a meaningful error when the export fails Maybe somehow allow export plugins to be connected As in Recording Reverse plugin Slow mo plugin Export to GIF For this it might be worth having two types of plugins one being editing and one being export editing being mp mp exporting being mp target Recording The way Im picturing this is with some hooks maybe an event emitter that allows plugins to run code before the recording starts and after its done maybe separate for errorsuccess This would allow current builtin features like Hide Desktop IconsDNDKey CastCustom Cursor to be plugins Deep Linking For any type of plugin I think deep linking is something that might be useful for OAuth with external services We could have the format of the default url be something like kappluginpluginNamesomepath and the app is responsible of taking that and sending somepath to the right plugin Implementationwise Im not sure what the best way to do it OAuth is generally an async process but the plugin will be probably opening a link to the login page and waiting for a response So maybe a waitForDeepLink function that just waits for that deeplink and resolves when it receives it Or maybe have them define a general deep link callback which then can take care of writing whatever data it needs token to the store async from when the login happened either way we can document it Settings It might be worth letting plugins have their own settings UI if its more complicated than plain JSON Schema Since they can have electron as a peerdependency they can create their own window and render their own preferences Usecase for this is for example for a possible custom cursor plugin a UI to let the user select between cursors Metadata We added a field that plugins can use to define what version of Kap they are compatible with We might want something similar with what version of Kap Plugin API they are compatible with unless we keep it backwards compatible with the current API Having a plugin type editingexportrecording might be useful to filterseparate them somehow in the preferences window Changes to current API I dont think Ive seen any plugin export more than one of what we call services It sounds like it would allow one npm module add two different plugins maybe related but I havent seen a usecase for it yet I think it might simplify both the developing of plugins and the code for reading them if we assumed each module only exports one plugin with one set of settings Other Thoughts Im still trying to figure out how linking multiple editing plugins could work UIwise or if thats something we consider out of scope for Kap even when its implemented through plugins since its a screen recorder not really an editor We provide some editing sizefpscropping that are all supported through ffmpeg commands So maybe supporting plugins addingmodifying ffmpeg arguments is enough macOS version Kap version Steps to reproduce Install Kap on open Preferences or capture a clip Current behaviour Mouse click highlighting highlightClicks does not work clicks are not displayed in the video Show cursor option is not even displayed in Preferences cmd However it is present on macOS so this bug seems to be OSspecific Expected behaviour Option to show cursor should be present in Preferences Mouse clicks should be visible in captured videos Workaround Upgrade macOS to Tried configuring highlightClicks option manually in LibraryPreferencescomwulkanokapplist but it didnt work Closes macOS version darwin Kap version Steps to reproduce Once recorded I want to trim video and try to grab the left trim handler with my mouse to drag but wont follow unless I move super slow to ensure the drag handler sticks to my cursor Current Behaviour Drag handlers are not draggable Expected Behaviour Once you click a drag handler you expect to be able to move it fast enough Workaround Drag and hover move incredibly slow so the mouse never hovers out the handler Feature request Gret job with Kap folks Really good I come to explain a situation I found myself quite often I take multiple short videos to show what I did Usually these files are posted alongisde a PR The thing is that at the moment I have to put them in the PR description is quite difficult to remember which gif correspond to what feature Kap file explorer screenshot I think that memorable names instead of time hashes will help with this issue With this I mean autogenerated names like docker images for example I found this other report Depending on how that is implemented my proposal could fit Id love to help with this if you think is something you wanna have in Kap Let me know if so Again thanks for the hard work Thank you for helping us test Kap Your feedback helps us make Kap better for everyone Before you continue please make sure youve searched our existing issues to avoid duplicates When youre ready to open a new issue include as much information as possible You can use the handy template below for bug reports Step to reproduce If applicable provide steps to reproduce the issue youre having Current behavior A description of how Kap is currently behaving Expected behavior How you expected Kap to behave Workaround A workaround for the issue if youve found on this will help others experiencing the same issue macOS version darwin Kap version Steps to reproduce Open app like Chrome to make it fullscreen Click kap in task bar Current behavior Nothing to show Expected behavior Show kap tool panel like old version Workaround Quit full screen to use kap If you have additional information enter it below macOS version Kap version Steps to reproduce Record a video save it or not close the preview window open your temp folder privatevarfoldersyyxxxxxxxxxxxxT Current behaviour The video is still on the temp folder root above as well as on subfolders with the exported format Expected behaviour Remove the temp files when the video is discarded Were talking about videos that could easily grow to Gb and mostly Mac users dont restart their computer often enough to trigger the cleaning process Workaround Access the temp folder and delete the files manually Make the Preview and Editor accommodate for our predefined aspect ratios meaning that if you capture at the Preview window is set to that aspect ratio and resize relative to it This PR attempts to resolve It appears the current setup doesnt do lossy compression so I need helpneed to tweak that I can use imagemingiflossy for guidance While still a WIP this PR is open to get early feedback Issuehunt content details summary bIssueHunt Summaryb summary Referenced issues This pull request has been submitted to Add lossy compression option to gif export IssueHunt has been backed by the following sponsors Become a sponsor details Issuehunt content