IDE cleanups namespaces and var Why dont StyleCop have these rules Version Used Visual Studio Version This is probably a Roslyn bug The stack trace was truncated Any tips on how to get a full one SystemInvalidOperationException This program location is thought to be unreachable at MicrosoftCodeAnalysisCSharpBinderBindDeconstructionVariableTypeWithAnnotations declTypeWithAnnotationsSingleVariableDesignationSyntax designationCSharpSyntaxNode syntaxDiagnosticBag diagnostics at MicrosoftCodeAnalysisCSharpBinderBindDeclarationVariablesForErrorRecoveryTypeWithAnnotations declTypeWithAnnotationsVariableDesignationSyntax nodeCSharpSyntaxNode syntaxDiagnosticBag diagnostics at MicrosoftCodeAnalysisCSharpBinderBindDeclarationExpressionAsErrorDeclarationExpressionSyntax nodeDiagnosticBag diagnostics at MicrosoftCodeAnalysisCSharpBinderBindExpressionInternalExpressionSyntax nodeDiagnosticBag diagnosticsBoolean invokedBoolean indexed at MicrosoftCodeAnalysisCSharpBinderBindExpressionExpressionSyntax nodeDiagnosticBag diagnosticsBoolean invokedBoolean indexed at MicrosoftCodeAnalysisCSharpBinderBindExpressionInternalExpressionSyntax nodeDiagnosticBag diagnosticsBoolean invokedBoolean indexed at MicrosoftCodeAnalysisCSharpBinderBindExpressionExpressionSyntax nodeDiagnosticBag diagnosticsBoolean invokedBoolean indexed at MicrosoftCodeAnalysisCSharpBinderBindLeftOfPotentialColorColorMemberAccessExpressionSyntax leftDiagnosticBag diagnostics at MicrosoftCodeAnalysisCSharpBinderBindMemberAccessMemberAccessExpressionSyntax nodeBoolean invokedBoolean indexedDiagnosticBag diagnostics at MicrosoftCodeAnalysisCSharpBinderBindMethodGroupExpressionSyntax nodeBoolean invokedBoolean indexedDiagnosticBag diagnostics at MicrosoftCodeAnalysisCSharpBinderBindInvocationExpressionInvocationExpressionSyntax nodeDiagnosticBag diagnostics at MicrosoftCodeAnalysisCSharpBinderBindExpressionInternalExpressionSyntax nodeDiagnosticBag diagnosticsBoolean invokedBoolean indexed at MicrosoftCodeAnalysisCSharpBinderBindExpressionExpressionSyntax nodeDiagnosticBag diagnosticsBoolean invokedBoolean indexed at MicrosoftCodeAnalysisCSharpMemberSemanticModelGetSpeculativelyBoundExpressionInt positionExpressionSyntax expressionSpeculativeBindingOption bindingOptionBinder binderImmutableArray crefSymbols at MicrosoftCodeAnalysisCSharpSyntaxTreeSemanticModelGetSpeculativelyBoundExpressionInt positionExpressionSyntax expressionSpeculativeBindingOption bindingOptionBinder binderImmutableArray crefSymbols at MicrosoftCodeAnalysisCSharpCSharpSemanticModelGetSpeculativeSymbolInfoInt positionExpressionSyntax expressionSpeculativeBindingOption bindingOption at MicrosoftCodeAnalysisCSharpCSharpExtensionsGetSpeculativeSymbolInfoSemanticModel semanticModelInt positionExpressionSyntax expressionSpeculativeBindingOption bindingOption at MicrosoftCodeAnalysisCSharpSimplificationCSharpExtensionMethodReducerTryReduceExtensionMethodInvocationExpressionSyntax nodeSemanticModel semanticModelInvocationExpressionSyntax rewrittenNodeSimpleNameSyntax expressionName at MicrosoftCodeAnalysisCSharpSimplificationCSharpExtensionMethodReducerSimplifyExtensionMethodInvocationExpressionSyntax nodeSemanticModel semanticModelOptionSet optionSetCancellationToken cancellationToken at MicrosoftCodeAnalysisCSharpSimplificationAbstractCSharpReducerAbstractReductionRewriterSimplifyNode TNode TNode nodeSyntaxNode newNodeSyntaxNode parentNodeFunc simplifier at MicrosoftCodeAnalysisCSharpSimplificationAbstractCSharpReducerAbstractReductionRewriterSimplifyExpression TExpression TExpression expressionSyntaxNode newNodeFunc simplifier at MicrosoftCodeAnalysisCSharpSimplificationCSharpExtensionMethodReducerRewriterVisitInvocationExpressionInvocationExpressionSyntax node at MicrosoftCodeAnalysisCSharpSyntaxInvocationExpressionSyntaxAccept TResult CSharpSyntaxVisitor visitor at MicrosoftCodeAnalysisCSharpCSharpSyntaxRewriterVisitSyntaxNode node at MicrosoftCodeAnalysisCSharpCSharpSyntaxRewriterVisitPrefixUnaryExpressionPrefixUnaryExpressionSyntax node at MicrosoftCodeAnalysisCSharpSyntaxPrefixUnaryExpressionSyntaxAccept TResult CSharpSyntaxVisitor visitor at MicrosoftCodeAnalysisCSharpCSharpSyntaxRewriterVisitSyntaxNode node at MicrosoftCodeAnalysisCSharpCSharpSyntaxRewriterVisitIfStatementIfStatementSyntax node at MicrosoftCodeAnalysisCSharpSyntaxIfStatementSyntaxAccept TResult CSharpSyntaxVisitor visitor at MicrosoftCodeAnalysisCSharpCSharpSyntaxRewriterVisitSyntaxNode node at MicrosoftCodeAnalysisCSharpSimplificationAbstractCSharpReducerAbstractReductionRewriterVisitNodeOrTokenSyntaxNodeOrToken nodeOrTokenSemanticModel semanticModelBoolean simplifyAllDescendants at async MicrosoftCodeAnalysisSimplificationAbstractSimplificationService cDisplayClass ReduceAsyncb TExpressionSyntaxTStatementSyntaxTCrefSyntax Unknown Parameters at async MicrosoftCodeAnalysisSimplificationAbstractSimplificationService ReduceAsyncInternal TExpressionSyntaxTStatementSyntaxTCrefSyntax Unknown Parameters at async MicrosoftCodeAnalysisSimplificationAbstractSimplificationService ReduceAsync TExpressionSyntaxTStatementSyntaxTCrefSyntax Unknown Parameters at async MicrosoftCodeAnalysisSimplificationSimplifierReduceAsyncUnknown Parameters at async MicrosoftCodeAnalysisCodeActionsCodeActionCleanupDocumentAsyncUnknown Parameters at async MicrosoftCodeAnalysisCodeActionsCodeActionPostProcessChangesAsyncUnknown Parameters at async MicrosoftCodeAnalysisCodeActionsCodeActionPostProcessAsyncUnknown Parameters at async MicrosoftCodeAnalysisCodeActionsCodeActionGetPreviewOperationsAsyncUnknown Parameters at async MicrosoftCodeAnalysisEditorImplementationSuggestionsSuggestedActionGetPreviewResultAsyncUnknown Parameters at async MicrosoftCodeAnalysisEditorImplementationSuggestionsSuggestedActionWithNestedFlavorscDisplayClass GetPreviewAsyncb Unknown Parameters at async MicrosoftCodeAnalysisExtensionsIExtensionManagerExtensionsPerformFunctionAsync T Unknown Parameters Im getting this build error when nullable reference types are enabled with the included test case CSC warning AD Analyzer StyleCopAnalyzersReadabilityRulesSA DoNotPrefixCallsWithBaseUnlessLocalImplementationExists threw an exception of type SystemInvalidOperationException with message This program location is thought to be unreachable csharp namespace ClassLibrary using SystemIdentityModelTokensJwt using SystemSecurityClaims using MicrosoftIdentityModelTokens public class AlgorithmValidator JwtSecurityTokenHandler public override ClaimsPrincipal ValidateToken string token TokenValidationParameters validationParameters out SecurityToken validatedToken var principle baseValidateTokentoken validationParameters out var temp validatedToken temp return principle xml Project SdkMicrosoftNETSdk PropertyGroup TargetFrameworknetcoreapp TargetFramework NullableenableNullable PropertyGroup ItemGroup PackageReference IncludeMicrosoftAspNetCoreAuthenticationJwtBearer Version PackageReference IncludeStyleCopAnalyzers Version beta IncludeAssetsAnalyzersBuild PrivateAssetsAll ItemGroup Project I am able to get rid of the warning either by removing the local variable temp or by turning off nullable reference types the code fix for SA reads Replace tabs with spaces however if useTabs is true then this code fix actually replaces spaces with tabs Spawned from Overview This is a proposal to allow control over how much StyleCop cares about documentation on internal interfaces Background According to the above issue documentInterfacestrue takes precedence over documentInternalElements false This means that if you want StyleCop to check documentation on public interfaces it will also check documentation on internal interfaces There is currently no way to have StyleCop check documentation on public interfaces while ignoring internal interfaces Rationale We have many external interfaces and each must have documentation that adheres to all the StyleCop rules However for internal interfaces of which we also have many we dont care if any of the documentation elements are missing Suggested Solution I propose that the documentInterfaces item in stylecopjson be enhanced to support the following values all default value Indicates that documentation on internal as well as public interfaces should be checked external Indicates that documentation should only be checked on interfaces if they are externally visible none Indicates that documentation should not be checked on interfaces equivalent to documentInterfaces false in current behaviour true For backward compatibility Equivalent to all false For backward compatibility Equivalent to none Example documentationRules documentInterfaces external documentExposedElements true documentInternalElements false Migrated from In our codebase weve often seen documentation header text like this summarySpecifies attributes of a widget messagesummary Notice that the text ends with two periods instead of one Would be great if there was a StyleCop rule to find this type of thing Note The rule should not trigger in the case of consecutive periods ie an ellipsis The rule should find any consecutive periods not just ones at the end of the text This makes sense since the text often contains multiple sentences and we want to find any of them which end with an accidental doubleperiod I stumbled upon an interesting warning today while coding an exception unit test for one of my extensions The following code triggers a SA warning before the operator csharp await defaultIAsyncEnumerableobjectToImmutableListAsync img width altstylecopspacingissue src I believe this is incorrect and no spaces should be added in this case Package version TargetFramework netstandard Nullable reference types enabled This looks similar to I have a project C net new sdk csproj format which does not generate any documentation XML output Because of this I get SA XmlCommentAnalysisDisabled as expected However what I dont expect and what Im seeing is that I still have a bunch of SA documentation warnings etc reported by StyleCopAnalyzers According to the docs for SA All diagnostics of XML documentation comments has been disabled however this is clearly not the case if and friends are being reported I have a bunch of projects which are pluginsextensions for another system so much of the stuff needs to be public but its not exposed as a public API so I dont want all these rules checked on all those projects Sure I could use a ruleset file to disable the rules but based on the docs for SA I shouldnt have to do this Am I missing something here When the documentInternalElements option is set to false SA PropertySummaryDocumentationMustMatchAccessors and SA DocumentationTextMustEndWithAPeriod should never be reported for those nonpublic members which are exempted from the documentation requirement Repro csharp internal class FalsePositives summaryI will generate SA and SA summary public long Foo summaryI will generate SA summary public void M summaryNo warnings as expectedsummary public event EventHandler MyEvent Sandcastle and I believe NDoc support the exclude documentation element which makes it so that the documentation for that member will be excluded from the generated documentation One could argue that if this tag is present StyleCop should not report any documentation rule violations for the corresponding member Example exclude public class Class The above generates SA Element documentation should have a summary Tested with beta Note this WAS fixed in legacy StyleCop See 