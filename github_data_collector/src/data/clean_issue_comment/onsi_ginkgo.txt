xsysunix provides Dup on all unix GOOSGOARCH variants The ones for eg linuxarm or linuxriscv just wrap Dup as this package currently does with syscallDup Thus use Dup from xsysunix to simplify the implementation in this package Im happy to open a PR for this since it would be a minor change that would fix the default behavior of ginkgo bootstrap for the builds were using at my company Weve just started using gofumpt instead of gofmt and ginkgo bootstrap should put the testing import at the top of the import in a separate group If you dont want this then please feel free to close this issue Previously ginkgo would identify the code locations of the failing Entry or DescribeTable as part of the ginkgoextensionstabletableentrygo or ginkgoextensionstabletablego files respectively When there are a large number of table entries it is more desirable to provide the line numbers of the table and table entry directly to facilitate jumping to the relevant section of the test code Fixes Have a print statement like fmtFprintfGinkgoWriter DEBUG OUTPUT LINE s n line If run with ginkgo cli ginkgo v then the output is realtime lines are printed immediately when test succeeded or failed as expected If run with golang cli go test v then No output at all when test succeeded No realtime output when test has failed Expected to see realtime output in both succeeded and failed tests using go test v Im looking for a way to run some code for each Context but not for the Its inside Example package main import githubcomonsiginkgo githubcomonsigomega var DescribePer Context Setup func var outerCount int Maybe BeforeEachContext BeforeEachfunc outerCount ContextContext func var innerCount int BeforeEachfunc innerCount Itcounters are initialized func ExpectouterCountToEqual ExpectinnerCountToEqual outerCount innerCount ExpectouterCountToEqual ExpectinnerCountToEqual ItouterCount is still func ExpectinnerCountToEqual Correct ExpectouterCountToEqual Idt like this succeed Also updates CI configuration to be compatible with modules Fixes Adding a gomod module definition for this project would help other module consumers by declaring expected compatible versions and not contributing indirect dependencies I am facing an issue of missing few random test spec in reports generated by ginkgo RunSpecsWithDefaultAndCustomReporters for each ginkgo parallel test run Current scenario I have three test files and comprises total no of specs I am calling the test suite through an PHONY statment make teste eall The console result looks good to me however the generated reports looks weird missing test specs for each test i run Attaching screenshot for your reference Test run reports img width altScreen Shot at PM src Test run reports img width altScreen Shot at PM src Test run reports img width altScreen Shot at PM src Updates and adds Windows support as positive sideeffect GOOSnacl go build returns these errors githubcomonsiginkgointernalspecrunnerspecrunnergo undefined syscallSIGTERM githubcomonsiginkgointernalspecrunnerspecrunnergo undefined syscallSIGTERM and GOOSplan go build returns an error githubcomonsiginkgointernalremotesyscalldupunixgo undefined syscallDup This library is a dependency of quicgo which we use in Caddy and Caddy can no longer compile for NACL or Plan because of this