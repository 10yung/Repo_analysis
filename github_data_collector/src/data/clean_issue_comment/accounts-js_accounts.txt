I have a setup using password graphql modules I start my server with const server new ApolloServer resolvers typeDefs context async req let result await accountsGraphQLcontextreq if resultuser return user null return result user resultuser How should I set this up so I can return an error when the auth token has expired So I can then try and do a token refresh const server new ApolloServer resolvers typeDefs context async req maybe check here if token is not includedexpired let result await accountsGraphQLcontextreq or check the result here if token has expired if resultuser return user null return result user resultuser Breaking change Still WIP for now the code will be more maintainable easier to implement features that target only one database can add more later Hi I found this package from Graphql Module community It looks neat and cool However the document is not wellprepared and neither for example when I have check issues and examples Could anyone can give me some hints or minimal example of Is it OAuth strategy is ready to use If it does how to integrate rd party Oauth like Google with Graphql How to use it with the Apollo federation Whats the proper way to integrate with nextjs The current implementation of accountsgraphqlclient gives an error with some libraries like Hasura because it expects no Authorization header or a valid Authorization header Would it be possible to change accountspackagesgraphqlclientsrcgraphqlclientts line line ts Authorization tokens Bearer tokensaccessToken to something like ts tokens Authorization Bearer tokensaccessToken Our project want to use RS in jwt signing which use a pair of public private key instead of a single string secret and also we want to override createTokens function to add custom logic So making the following changes in this pull request Allow tokenSecret to accept a pair of public private key instead of a single string secret and add two private function getSecretOrPublicKey and getSecretOrPrivateKey to get string secret or public private key when sign or verify jwt Make createTokens function become async so when override createTokens function async functions can be easily added When I try to call any subscription in our app which is using accounts Im getting this error which is coming from graphqlmodules TypeError Cannot use in operator to search for session in undefined at ObjectnormalizeSession UsersnsineDocumentsworkmobileheadsputniknodemodulesgraphqlmodulescoresrchelpersts at GraphQLModulecachecontextBuilder UsersnsineDocumentsworkmobileheadsputniknodemodulesgraphqlmodulescoresrcgraphqlmodulets at UsersnsineDocumentsworkmobileheadsputniknodemodulesgraphqlmodulescoresrcgraphqlmodulets at Arraymap anonymous at UsersnsineDocumentsworkmobileheadsputniknodemodulesgraphqlmodulescoresrcgraphqlmodulets at new Promise anonymous at GraphQLModulecachecontextBuilder UsersnsineDocumentsworkmobileheadsputniknodemodulesgraphqlmodulescoresrcgraphqlmodulets at Objectcontext UsersnsineDocumentsworkmobileheadsputnikpackagesgqlservermodulesauthaccountsindexts at Objectanonymous UsersnsineDocumentsworkmobileheadsputnikpackagesgqlserverutilsapollomergeModulests at step UsersnsineDocumentsworkmobileheadsputnikpackagesgqlserverutilsapollomergeModulests at Objectnext UsersnsineDocumentsworkmobileheadsputnikpackagesgqlserverutilsapollomergeModulests at fulfilled UsersnsineDocumentsworkmobileheadsputnikpackagesgqlserverutilsapollomergeModulests at processTicksAndRejections internalprocesstaskqueuesjs So basically it happens because subscription context builder doesnt expect familiar req and res params but connection and payload GraphQL modules expect to have a connectioncontextsession but there is no such property in context of our app So Id like to check if this could be an issue that can be fixed accountslevel or not As a temporary workaround we are doing something like typescript context async session PromiseIAccountsContext if sessionreq const reqLike headers sessionconnectioncontext as IncomingMessage return accountscontextreqLike return accountscontextsession But it would be nice if we can fix this in the package accounts version Looking for testers for a nestjs module Please let me know if theres anything We can do better especially pay attention to creating a new package in the monorepo and the package metadata I wasnt sure I have it all accurate This is tough one to debug When using authLink Im getting infinite loops and browser tab crashing after stopping and resuming my dev server Im using authLink like this const authLink accountsLink accountsClient const httpLink new HttpLink uri graphql const cache new InMemoryCache const client new ApolloClient link from authLink httpLink cache resolvers Im not getting anything from the browsers profiler because it crashes out If I comment out the authLink the client loads readd it and everything works as expected until I stop and restart my dev server No errors or anything odd present on the server Any thoughts here Has only started happening since adding the authLink but I honestly have no clue on the cause here Any ideas on the best way to troubleshoot this I personally dont think that user enumeration at signUp is a big problem and for most applications I worked on the UX was more valuable then the risk of users figuring out if a certain email exists on our platform Id prefer some sort of rate limiting to protect against brute forcing over purposelyunhelpful error messages at signup That said when trying to understand how the current user enumeration protection trough ambiguousErrorMessages works I got to the conclusion that it just doesnt work at least not when using graphqlapi and for createUser I would expect it to not work for other graphql mutations as well The problem seems to be that graphqlapi just throws but doesnt catch certain types of error so eg is never actually executed when throws I think this is related to the last checkbox in cc pradel Currently im getting a message Invalid credentials error didnt yet figure out why but will have a closer look soon targets for accountspassword users