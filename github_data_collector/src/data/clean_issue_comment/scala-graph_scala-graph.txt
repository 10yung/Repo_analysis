There is one obstacle for me in this otherwise fantastic library The type system is misconfigured which forces me to use hacks such as asInstanceOf to integrate it with my application Graph A should be a subtype of Graph B if A is a subtype of B This is the same principle that applies to other collections such as lists To illustrate A graph of dognodes is a particular graph of animalnodes It satisfies the requirement that each node is an animal Hence it should be possible to provideassign a graph of dogs where a graph of animal nodes is requested Just like how a list of dogs is also a list of animals The problem is the type definition of the main trait Graph scala trait Graph N E X EdgeLikeIn X extends The parameter N is defined as invariant but it should be covariant like so scala trait Graph N E X EdgeLikeIn X extends Note the before N The following code fails to compile scala object Bug extends App trait Animal trait Dog extends Animal val dogGraph Graph Dog EdgeLike val animalGraph Graph Animal EdgeLike dogGraph fails to compile Error type arguments DogscalaxcollectionGraphEdgeEdgeLike do not conform to method applys type parameter bounds NE X scalaxcollectionGraphPredefEdgeLikeIn X The procedure syntax was deprecated in scalascala The new scalac options trigger now warnings when using the procedure syntax All changes aside sbt files were made by scalafix and scalafmt This is an updated supset of Hi there Firstly thanks for this awesome lib By reading the doc and trying some lines of code I couldnt find any clues about a way to find all cycles in a graph Something like this function from the python library networkX By any chance do you have any idea about how this can be done Thanks for your help It looks like the NetBeans repository no longer services requests Building from master I get connection reset by that repository resulting in a broken build It seems like there is some discussion out there that the NetBeans repository seems decomissioned Ill open a PR that introduces another repo that mirrors the required NetBeans platform dependencies From the documentation it seems that one can generate all valid topological orders by altering the order of nodes in the layers Among others layers are usefull to compute several valid topological orders by altering the order of nodes within layers However the documentation does not explain this any further So for a given graph eg the graph below afbeelding i would like to generate all valid topological orders which are At the moment Im only able to generate one import scalaxcollectionGraph import scalaxcollectionGraphPredef import scalaxcollectionGraphEdge val graph Graph Int DiEdge Graph graphtopologicalSort match case RighttopOrder printlntopOrder case LeftcycleNode throw new ErrorsGraph contains a cycle at node cycleNode Ive tried using custom node traversers and element traversers but i was not able to make them work How can i generate all valid topological orders Something like val g Grapha b a c b c printlnggetashortestPathToggetcgetweight will print which is wrongshould be 