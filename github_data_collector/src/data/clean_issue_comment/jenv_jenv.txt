I am currently facing this issue where I have followed the instructions to setup my jenv but Im runbning into this error ERROR JAVAHOME variable already set scripts that use it directly could not use java version set by jenv ERROR Java binary in path is not in the jenv shims ERROR Please check your path or try using pathtojavahome is not a valid path to java installation PATH usrlocalCellarjenv libexeclibexecUsersnvmversionsnodev binUsersnodenvshimsoptapachemaven binusrlocalsbinusrlocalbinusrbinbinusrsbinsbinusrlocalapachemaven binusrlocalapachemaven bin ERROR Jenv is not loaded in your zsh ERROR To fix cat eval jenv init Userszshrc Ive ran the command echo eval jenv init bashprofile but that also doesnt seem to resolve my issue My environment variables are set to these values PATH Usersnvmversionsnodev binUsersnodenvshimsoptapachemaven binusrlocalsbinusrlocalbinusrbinbinusrsbinsbinusrlocalapachemaven binusrlocalapachemaven bin JAVAHOME Usersjenvversionsoracle Im not a bash guru but I actually got this working in GitBash And google told me that use single when using single square brackets in iftest and double when using double square brackets This however made it fail at So going with things that has worked before I change it to if JENVJAVAPATHbinjava version grep q Bit then As a side note it would be awesome if there was a short version with platform like bit and that bit rootlocalhost jenv jenv versions usrlocalbinjenvlibexecjenvversionfileread line devfd No such file or directory rootlocalhost jenv ll total lrwxrwxrwx root root Jul bin usrbin drxrxrx root root Jul boot drwx root root Dec data drwxrxrx root root Dec dev drwxrxrx root root Dec etc drwxrxrx root root Jul home lrwxrwxrwx root root Jul lib usrlib lrwxrwxrwx root root Jul lib usrlib drwx root root Oct lostfound drwxrxrx root root Jul media drwxrxrx root root Jul mnt drwxrxrx root root Jul opt drxrxrx root root Jan proc drxrx root root Dec root drwxrxrx root root Dec run lrwxrwxrwx root root Jul sbin usrsbin drwxrwx root Dec sdcard drwxrxrx root root Jul srv drxrxrx root root Dec sys drwxrwxrwt root root Dec tmp drwxrxrx root root Oct usr drwxrxrx root root Oct var maybe thats cause root user has no permission on dev rootlocalhost jenv ls dev ls cannot open directory dev Permission denied I wanna know how to make it right when running change which file cause seen by the error message line devfd No such file or directory theres just a fi in line Jenv wont allow adding GraalVM CE which is based on Java and skips the installation with the following warning jenv add installgraalvmgraalvmceContentsHome openjdk already present skip installation already present skip installation already present skip installation The existing is the openjdk one not the graalvm Since a JDK installation generally generates multiple version strings I find it helpful to remove multiple of them with a single command on Ubuntu I need to use two different JDK s with same version to check and compare performance and etc st Ubuntu default JDK install by apt sudo aptget install openjdk jdk jenv add usrlibjvmjava openjdkamd added added openjdk added nd Amazon Corretto JDK install by manual tar zxf amazoncorretto linuxx targz C usrlibjvm jenv add usrlibjvmamazoncorretto linuxx openjdk already present skip installation already present skip installation already present skip installation Please dont say that same version is same JDK I dont want to tell details of how different each one by implementation Is it possible to jenv add different openjdk with same version For example If jenv has alias option I suppose that it is existed even it is not then jenv add usrlibjvmamazoncorretto linuxx alias corretto corretto added corretto added corretto openjdk added Hello this is related to and Im trying to think how to solve this in a consistent way I found a sort of limit within jEnv the version that we need to specify is either vague or too implementationdependent Example on my current Linux system system set by JENVVERSION environment variable openjdk openjdk oracle So if I say jenv shell it will switch to my openjdk which is actually adoptopenjdk with hotspot Now what Id really like to have is a sort of semantics so that each jdk implementation could provide some sort of categories or tags or metaversion example from the versions above openjdk provides jdk openjdk adoptopenjdk openjdk provides jdk openjdk adoptopenjdk oracle provides jdk oraclejdk This is somewhat similar to what happens with many packagesmetapackages on various linux distributions andor with the updatealternatives approach As a user if I have more than one implementation providing jdk I can choose which one is the default Then in the javaversion on my project I can just use jdk if I want to use version or things like oraclejdk if I know theres an hard dependency on the Oracle JDK version We could also use a cascading javaversion that supports multiple versions Currently AFAIK setting such metaaliases is something manual unless its the first jdk for a version which is picked up by jenv and its very easy for somebody to do a mistake like jenv local oracle and then committing such file The rationale is for most projects the main Java API should be enough I mostly dont care whether somebody is using or or whether theyre using a Oracle or some OpenJDK distro Id like to address THAT easily For projects with additional restrictions vendor minimum revision jre implementation there should a way to specify that This is a bit of brainstorm thoughts I dont know whether is a bug or not if login using su user eg su root then jenv wont work login user then enter password will worksof course it works run jenv doctor and the error is OK No JAVAHOME set ERROR Java binary in path is not in the jenv shims ERROR Please check your path or try using pathtojavahome is not a valid path to java installation PATH rootjenvlibexecrootjenvbinusrlocalmavenmavenbinusrlocalsbinusrlocalbinusrsbinusrbinsbinbin ERROR Jenv is not loaded in your bash ERROR To fix cat eval jenv init rootbashprofile For macOS and the Homebrew package manager get the installation directory from the brew prefix jenv command instead of deriving the path with absdirname This will hopefully address the concerns I raised in 