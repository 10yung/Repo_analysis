Updates orgawaitilityawaitility from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgawaitility artifactId awaitility details labels testlibraryupdate semverpatch I cant see any place to specify that Id like wsclient to use a socks proxy whereas AsyncHttpClient can vs Thanks Play WS Version x etc NA API Scala Java Neither Both Scala or Both Operating System Ubuntu MacOS Windows NA JDK Oracle OpenJDK x Azul Zing NA Library Dependencies AHC andor Akka HTTP though that effort seems rather severely stalled Expected Behavior Currently theres no way to sanely pass in a different name resolver instead one has to change one field the static DEFAULTNAMERESOLVER in RequestBuilderBase in the shaded AHC package Also simply documenting it would probably help a bit eg something like def monkeyPatchPlayWsShadedAhcRequestBuilderBase Unit playshadedahcorgasynchttpclientRequestBuilderBaseDEFAULTNAMERESOLVER new YourSpecialResolverImmediateEventExecutorINSTANCE Enhance the documentation so its more complete Replace scalariform This is an automated backport of pull request done by Mergifyio Cherrypick of ba d b bb feb cba f cb c f has failed On branch mergifybp xpr Your branch is up to date with origin x You are currently cherrypicking commit ba d b fix conflicts and run git cherrypick continue use git cherrypick abort to cancel the cherrypick operation Changes to be committed modified buildsbt Unmerged paths use git addrm file as appropriate to mark resolution both modified projectpluginssbt deleted by them versionsbt To fixup this pull request you can check out it locally See documentation Pull Request Checklist x Have you read through the contributor guidelines x Have you signed the Typesafe CLA x Have you squashed your commits x Have you added copyright headers to new files x Have you checked that both Scala and Java APIs are updated x Have you updated the documentation for both Scala and Java sections x Have you added tests for any changed functionality Fixes Documents the surprising behavior of Purpose Documents that lazy val uri URI throws Background Context marcospereira suggested in that def urlurl String StandaloneWSRequest should be tolerant of urls which include query params I submit but was not successful in getting it reviewed a second time and merged URLs are hairy and I can understand why you may not trust the robustness of a community provided solution has been unmerged for about a year now and marked status backlog so Ive closed it Instead this PR just documents the current behavior hopefully to prevent others from discovering it in prod as I did Ive also added a failing unit test References original issue proposed solution Play Version API Java Operating System Ubuntu LTS Linux generic Ubuntu SMP Fri Nov UTC x x x GNULinux JDK openjdk version OpenJDK Runtime Environment build u b ubuntu b OpenJDK Bit Server VM build b mixed mode Library Dependencies javaWs Expected Behavior Im using StandaloneAhcWSRequest to add a new value for an existing header to a given request I call the method StandaloneAhcWSRequestaddHeader line in StandaloneAhcWSRequestclass This method calls the method StandaloneAhcWSRequestaddValueTo line Then it manages the MapString ListString headers If the new header already existed it takes the list and adds the new value to it Therefore if for example we have the header myHeader already existing in headers map with a value and we want to add a value to that header in the end it should have myHeader value value Actual Behavior I get UnsupportedOperationException The reason is that the implementation used for the list which is going to get the new element added is the scala one In scala the list is immutable Stack trace playcorejHttpExecutionContextanon runHttpExecutionContextscala common frames omitted Caused by javalangUnsupportedOperationException null at javautilAbstractListaddAbstractListjava at javautilAbstractListaddAbstractListjava at playlibswsahcStandaloneAhcWSRequestaddValueToStandaloneAhcWSRequestjava at playlibswsahcStandaloneAhcWSRequestaddHeaderStandaloneAhcWSRequestjava at playlibswsahcStandaloneAhcWSRequestaddHeaderStandaloneAhcWSRequestjava I looks like that the WS response interceptor does not support URI special characters the issue step is as following client send WS request service response Temporary Redirect the redirest location is orgasynchttpclientnettyhandlerinterceptRedirect xInterceptor will start it looks like that Redirect xInterceptor can not handle the sepcial character F correct server response Bad Request My question is can the http intercept support the special character F how to config or disable the WS response intercept Play WS Version API Scala Operating System Any JDK Any Expected Behavior playws should not alter outgoing WSRequests or at the minimum provide a function where you can overridereplace all existing http headers currently contenttype is not replaceable Actual Behavior playws shades the latest version of asynchttpclient which alters the contenttype header of a complete request before submitting it by enforcing the charset attribute This breaks transparency and signatures for AWS etc eg BodyWritable StringBuilder defaults to textplain without charset as contenttype See 