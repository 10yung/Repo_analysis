Add E E tests involving with JWT audience This cover few workflows Verify token with incorrect audience will be rejected if JWT rule specifies audience Verify multiple JWT policies rules will be joined together Verify JWT rules for the same issuer can be joined and behave as usual each rule still be treated as independently Configuration Infrastructure Docs Installation Networking Performance and Scalability Policies and Telemetry X Security Test and Release User Experience Developer Infrastructure This PR contains an enhancement and bug fixes details are described as bellows Fixed the missing previous config in MCP dispatch event If origin code always pass in an empty previous config in MCP Update event However the ServiceDiscovery in externalservicediscovertgo will check the previous config when handling Update event If it cant find the previous config it will print a warn message and cause the Incremental EDS update disabled If the update size is pretty huge the log output will be overwhelmed go fp true if event modelEventUpdate This is not needed update should always have old populated but just in case if oldSpec nil os convertServicesold fp servicesChangedos cs else logWarnfSpec is not available in the old service entry during update proceeding with full push v old Fixed the missing LbWeight attribute assignment in Instance convert within ServiceDiscovery in externalservicediscovertgo Fixed duplicate ServiceEntry event triggering because both the configSource and ServiceDiscovery in externalservicediscovertgo have registered handler of ServiceEntry type as the code shows below Registration in initEventHandlers in bootstrapservergo go TODONinok remove this case once incrementalUpdate is default if sconfigController nil for schema range collectionsPilotAll sconfigControllerRegisterEventHandlerschemaResourceGroupVersionKind configHandler Registration in NewServiceDiscovery in externalservicediscoverygo go if configController nil configControllerRegisterEventHandlerserviceEntryKind funcold curr modelConfig event modelEvent cs convertServicescurr Because the handler registered by initEventHandlers converts all updates to Full push the EDS incremental will be disabled even with endpoint changes only Added an Env attribute to configure the max receive buffer of gRPC in Pilot xDS connection This can be useful when the resources number within is system is very large In our system the resource count can be millions Regression since We turned on policy but disabled checks Didnt notice since it only runs in postsubmit Right now if you install with sdsenabledtrue things will break Instead I think we should just make this flag do nothing The upgrade path for someone with SDS would be to keep the same flags and upgrade to In the the SDS profile does nothing but get a nodeagent running all new stuff ignores it but the old stuff can still point to nodeagent Note that the upgrade is still broken because UDS path is global in pilot myidpt this is what I was talking about earlier not sure if this is right Currently every test is dependent on Galley because we apply config through the galley interface This is not really needed in reality almost all of the tests are not calling Galley We should make Galley truly optional for now we will need a workaround to support running k s tests without Galley until we have MCP in pilot Unify the readiness path for galley and istiod validation webook servers Use the correct port for checking galleys readiness Fixes Configuration Infrastructure Docs Installation X Networking Performance and Scalability Policies and Telemetry Security Test and Release User Experience Developer Infrastructure Bug description When Pilot instances get restarted some times Proxies loose cluster and listener information leading to request failures Configuration Infrastructure Docs Installation X Networking Performance and Scalability Policies and Telemetry Security Test and Release User Experience Developer Infrastructure Expected behavior Proxies should not loose existing clusterlistener information Steps to reproduce the bug This is not always reproducible but happens some times Version include the output of istioctl version remote and kubectl version and helm version if you used Helm Istio Master How was Istio installed Helml Environment where bug was observed cloud vendor OS etc In our internal data centres running K S i have created a virtual service and able to access the frontend service via istios ingress gateway but if frontend service needs to access another backend service within the k s cluster using its internal name which is backend ns svcclusterlocal it always gives and because of that istio gives internal error to my main requestthat i made for frontend service interesting thing is when i access backend service from frontend services pod I am able to access that using internal fqdn Not sure why its not working frontend request gives internal error curl i X GET H authorization Bearer TOKEN H cachecontrol nocache H postmantoken c ad c ecea c H xrequestid d dfd e cc e f d b H Host authorizationservicecoresharedservicesvcclusterlocal HTTP Internal Server Error date Sat Jan GMT server istioenvoy contentlength xenvoyupstreamservicetime at the same time logs inside the frontend pod internal backend serviceconfigurationmanagementservicecoresharedservicesvcclusterlocal gives IP localhost localhost Flags P seq ack win options nopnopTS val ecr length HTTP GET apiauthorizationv institutions applicationsWirespermissionsets HTTP IP configurationmanagementservicecoresharedservicesvcclusterlocal authorizationservice b hpqxd Flags P seq ack win options nopnopTS val ecr length HTTP HTTP Not Found IP localhost localhost Flags P seq ack win options nopnopTS val ecr length HTTP HTTP Internal Server Error if same backend url I access from the frontned pod i can access that curl I location request GET header Authorization Bearer TOKEN header ContentType applicationjson header xcsscorrelationid e ca d f fd a fd b c c HTTP OK date Sat Jan GMT contenttype applicationjson charsetutf server envoy requestcontext appIdcidv be de d b e dcdf b a apisupportedversions xenvoyupstreamservicetime transferencoding chunked not sure what is different when i access frontend virtual service which internally access the backend service