Fix phmemoryrealloc error if origsize size Adapt ck version Summary Port to the new opaque types in openssl This was build against both openssl and openssl I got the following compile error when doing autogensh configure make I did a git clone on this repo and the github repo on concurrencyKit Any ideas Thanks libtool compile gcc DHAVECONFIGH Ithirdpartyckinclude Iinclude I DPHENOMIMPL Werror m fnoomitframepointer DLARGEFILESOURCE DLARGEFILE SOURCE DFILEOFFSETBITS Dx Iusrlocalinclude stdgnu x pedantic Wall Wextra Wnodeclarationafterstatement W Wundef Wendiflabels Wshadow Wpointerarith Wcastalign Wwritestrings Wstrictprototypes Wmissingprototypes Wnonestedexterns Winline Wdisabledoptimization fstrictaliasing pipe Wnoparentheses O g gdwarf MT coreliblibphenomlacounterlo MD MP MF corelibdepslibphenomlacounterTpo c corelibcounterc fPIC DPIC o coreliblibslibphenomlacountero In file included from includephenomcounterh from corelibcounterc includephenomdefsh error static assertion failed counteriteratordefinitionbad define phstaticassertexpr msg Staticassertexpr msg corelibcounterc note in expansion of macro phstaticassert phstaticassertsizeofstruct phcounterscopeiterator Hello It d be very helpful if you could tag a release so we know the code there is stable and can be used I work on Homebrew and we provide a way to install libphenom but we rely on the git HEAD so can t provide checksums and can t ensure users will always get the same code depending on the time they install it making it harder for us to debug issues Thanks I havent dug into this yet Im not getting these consistently sometime the run will be successful The affinity failed message is always present nbio and job in the message were added by me pre err nbio failed to set thread x e affinity err nbio failed to set thread x e affinity err nbio failed to set thread x c e affinity err nbio failed to set thread x e affinity err nbio failed to set thread x e affinity err nbio failed to set thread x e affinity err nbio failed to set thread x c e affinity err nbio failed to set thread x e affinity err nbio failed to set thread x e affinity err nbio failed to set thread x e affinity err nbio failed to set thread x c e affinity err dns job failed to set thread x e affinity err dns job failed to set thread x e affinity err phenomsched nbio failed to set thread x a affinity Failed test teststimercrecordtick at line Failed test teststimercrecordtick at line Looks like you failed tests of ELAPSED ms ok PHOK phnbioinit ok PHOK phjobinit timer ok PHOK phjobsettimerat timer lasttick ok ms resolution diff ok ms resolution diff not ok ms resolution diff not ok ms resolution diff ok PHOK phschedrun pre Make it easy to create a multihandle that is wired up to our event handling Throwing this one out there for folks that want to dive in In the bufq API we have phbufqconsumerecord which searches the bufq for a matching record delimiter For many internet protocols this delimiter is CRLF For many other applications were likely to be looking for LF There are a couple of optimizations that could be investigated Can we accelerate the memmem call using the sse memchr function from here The performancedata file indicates that this performs consistently better than the darwin libc To adopt this wed need to detect sse either at runtime or compile time are there specializations of sse memchr that can be made for detecting CRLF are there specializations of string matching algorithms with a constant known needle that we could use is there a more efficient way to match needles across the straddle point in cases where the delimiter straddles discontiguous memory regions for long records we make repeated calls and search across the same memory regions repeatedly We can surely cache the last searched offset and improve efficiency Wed need to make sure that we invalidate this offset in the appropriate circumstances mostly when weve consumed past that point BSER is a localIPC only serialization format for dynamic data Adding support for this to Phenom requires adding loaddump APIs similar to the JSON loaddump API It also means adding API support for Array of Templated Objects In Watchman this is achieved simply by storing the template definition as a special property of the object type 