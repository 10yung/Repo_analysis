Changed Updated travisyml Fixed error applying the parameter in the phpstanneon Added support for the latest packages Also see Added phpjson extension into composerjson Updated dockblocks and optimized qualified classes Packages in composerjson file sorted alphabetically Added call of travisci tests for PHP PS Laravel is planned to be released in February so I immediately included it in the composerjson file Enjoying the recently added support for Eloquent API Resources I have extended this strategy locally to work around some issues potential shortcomings Models being persisted to database Found data being added every time docs are generated This is due to my factories creating related models eg the Project factory does something like return userid factoryApp Userclass The API Resource Strategy uses factorymake to avoid persisting the model but in my case related models are still persisted Incomplete model data Related to the above my models use Eloquent events to perform common actions One example is assigning a UUID to each record In order to have this UUID shown in the API docs the model needs to be persisted My API resources often include other information such as model counts of related models eg a userscount for each ProjectResource Solution Use database transactions along with factorycreate The above issues can be resolved by using the same processes as in the ResponseCalls strategy Copy methods from ResponseCalls php return void private function configureEnvironment thisstartDbTransaction return void private function finish thisendDbTransaction return void private function startDbTransaction try appdbbeginTransaction catch Exception e return void private function endDbTransaction try appdbrollBack catch Exception e Ideally these methods would be moved to the Strategy ExtractingStrategiesStrategyphp abstract class Use database transaction rollback to avoid persisting any data Add to invoke method thisconfigureEnvironment Tweak getApiResourceResponse method php var Response response response resourcetoResponseappRequestclass response status statusCode responsegetStatusCode content responsegetContent catch Exception e echo Exception thrown when fetching Eloquent API resource response for implode routemethods routeuri n if FlagsshouldBeVerbose UtilsdumpExceptione else echo Run this again with the verbose flag to see the exception n return null finally thisfinish return response Change instantiateApiResourceModel to instead use create php return factorytypecreate Further considerations The configureEnvironment method in ResponseCalls strategy php thissetEnvironmentVariablesrulesToApply env thissetLaravelConfigsrulesToApply config This same functionality may also be useful to be supported in UseApiResourceTags Factory states My factories make use of states which allow me to eg Implement the most basic model for the default factory with only required fields set Build upon this base using states Generate different types of models User types roles models with many relations invalid models useful for tests I could see it being useful to allow specifying the factory state that the strategy should use or even having a default state that the strategy looks for with a set name such as docs apidocs php factorystateApp Userclass docs function Faker faker return name customised for email apidocgeneratorcom Alternatively an annotation such as apiResourceState could be the preferred solution Related issues The following issue is potentially related to the above Eloquent API Resource with Loaded Relation Have logged the above here for discussion or in case it helps anyone hoping to put together a PR in the next week or two time permitting I install the package in the dev environment If you manually register the routes in the file then when you run the route cache command there will be a problem of accessing a nonexistent namespace In my PR I transferred the return code of the routes to the controller since in the initial form it is impossible to execute the route cache command since it contains a callback function which is unacceptable Feature Proposal Similar to generating a postman collection generate an Open API v spec json file Why Allows you to automatically generate SDKs for your API using tools like This format can be imported into a wider range of tools and online services ie Postman ironically Apiary Stoplight Readmecom Automatic validation of your documentation against your API using tools like Dredd While it is currently possible to use online tools to do this currently this is a manual process which cant easily be built into a CICD pipeline Specifically with step which validates the docs against the API How I am willing to write and maintain this with contribution from my team at LuminateOne However I would like to know if the maintainers of this package would accept this feature I know in the past this feature has been turned down It would be good to keep this issue open to gauge support from the community about this feature request too Picks up on solution discussed at There is an error in the proposed solution so I fixed it and hope we can integrate this bugfix back into your repo When I run php artisan apidocgenerate on our laravel app I get the error allowed memory size exhausted Total number of routes in our application is PHP Laravel A fix for that is to increase php memory limit in the GenerateDocumentation Command construct to something like inisetmemorylimit M I used the whenLoaded for load the relation in Resources but the apidocgenerate dont load the relations and dont load the resource correctly return id thisid contacts thiswhenLoadedcontacts function return ContactResourcecollectionthiscontacts We should also support pagination for api resources Should we add another annotation like apiResourcePagination There are methods for pagination simple and default So apiResourcePaginate resolves to Modelpaginate apiResourcePaginate simple resolves to ModelsimplePaginate What do you guys think about I use a filter pages which requires me to define filter params like filter id This seems to break doc generation Both languages bash and javascript field to compile with v of laravelapidocgenerator This happends because the cleanQueryParameters are of the route is broken during the markdown generation step array filter array id sint this should be array filter id factoryValue I tracked it down to Mpociot ApiDoc Tools GeneratorgenerateConcreteSampleForArrayKeys If i comment the use of this function out markdown generates fine Is there a way to enable handle 