 Feature Request Is your feature request related to a problem Please describe This is a followup from where that issue was actually quite convenient during development where the reconcile loop stops when Ansible fails unexpectedly Describe the solution youd like It would be nice if the watchesyaml file would let us toggle that behavior for example by using a strict or anyerrorsfatal attribute By default this would be false and when it is true the reconcile stops on ansible failure The docsdkclireferencemd has no longer the same purpose since the cli doc are gen automatically now and it is probably outdated However By joelanford There are some things on the CLI reference that dont exist anywhere else eg the operatorsdk new typehelm usages We should probably do a scrub and make sure we dont lose helpful info It probably makes the most sense to move things like that to the actual cobra examples in the cmd subcommand definitions This task was raised for we get it done Please feel free to collab with Type of question Operatorsdk scorecard testing Question What exactly does this new test actually test with the bundle as I cant seem to get it to fail What did you do Ive tried to force a failure with incorrect data in my packageyaml but the only thing that generates a failure is if I change my version directory to something like Here is my bundle structure tree L crds cacheexamplecommemcachedscrdyaml cacheexamplecomv alpha memcachedcryaml olmcatalog memcachedoperator cacheexamplecommemcachedscrdyaml memcachedoperatorv clusterserviceversionyaml memcachedoperatorpackageyaml operatoryaml roleyaml rolebindingyaml serviceaccountyaml removed values from memcachedoperatorpackageyaml cat memcachedoperatorpackageyaml channels currentCSV name defaultChannel packageName Running the following always returns pass operatorsdk scorecard b deployolmcatalog namespace default selectortestbundlevalidationtest INFO Using config file homejpdgosrcgithubibmcomjdockteroperatorsdksamplesansiblememcachedrepostablememcachedcasebundleoperatorsmemcachedoperatorosdkscorecardyaml olm Bundle Validation Test pass Labels testbundlevalidationtest necessityrequired suiteolm Log time T levelinfo msgloading Bundles dirdeployolmcatalog time T levelinfo msgdirectory dirdeployolmcatalog fileolmcatalog loadbundles time T levelinfo msgdirectory dirdeployolmcatalog filememcachedoperator loadbundles time T levelinfo msgdirectory dirdeployolmcatalog file loadbundles time T levelinfo msgfound csv loading bundle dirdeployolmcatalog filememcachedoperatorv clusterserviceversionyaml loadbundles time T levelinfo msgloading bundle file dirdeployolmcatalogmemcachedoperator filecacheexamplecommemcachedscrdyaml loadbundle time T levelinfo msgloading bundle file dirdeployolmcatalogmemcachedoperator filememcachedoperatorv clusterserviceversionyaml loadbundle time T levelinfo msgloading Packages and Entries dirdeployolmcatalog time T levelinfo msgdirectory dirdeployolmcatalog fileolmcatalog loadpackage time T levelinfo msgdirectory dirdeployolmcatalog filememcachedoperator loadpackage time T levelinfo msgdirectory dirdeployolmcatalog file loadpackage What did you expect to see From this doc When loading manifests into the database the following invariants are validated Every package has at least one channel Every ClusterServiceVersion pointed to by a channel in a package exists Every bundle has exactly one ClusterServiceVersion If a ClusterServiceVersion owns a CRD that CRD must exist in the bundle If a ClusterServiceVersion replaces another both the old and the new must exist in the package What did you see instead Under which circumstances Always passed test Environment operatorsdk version operatorsdk version operatorsdk version v commit fb b d b c f ba fa b go version go linuxamd Kubernetes version information Client Version versionInfoMajor Minor GitVersionv GitCommit fac cd a dc f d f f a aeface cc GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Server Version versionInfoMajor Minor GitVersionv dea fb GitCommitdea fb GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Kubernetes cluster kind Additional context Add any other context about the question here Description of the change this PR removes the v alpha API from the scorecard logic tests and documentation The v alpha version with this PR is the only scorecard API Other subsequent PRs will further remove remants of the v alpha code but this PR if merged will leave the scorecard in a working and releasable condition by itself Motivation for the change the v alpha version was developed to replace the v alpha version removal of v alpha was planned as part of the v alpha roadmap Type of question Trying to follow tutorial wo success Question What did you do kubeabbeyroad go mkdir p HOMEprojects kubeabbeyroad go cd HOMEprojects kubeabbeyroad projects operatorsdk new memcachedoperator repogithubcomexampleincmemcachedoperator INFO Creating new Go operator memcachedoperator INFO Created gomod INFO Created toolsgo INFO Created cmdmanagermaingo INFO Created buildDockerfile INFO Created buildbinentrypoint INFO Created buildbinusersetup INFO Created deployserviceaccountyaml INFO Created deployroleyaml INFO Created deployrolebindingyaml INFO Created deployoperatoryaml INFO Created pkgapisapisgo INFO Created pkgcontrollercontrollergo INFO Created versionversiongo INFO Created gitignore INFO Validating project INFO Project validation successful INFO Project creation complete kubeabbeyroad projects cd memcachedoperator kubeabbeyroad memcachedoperator operatorsdk add api apiversioncacheexamplecomv alpha kindMemcached INFO Generating api version cacheexamplecomv alpha for kind Memcached INFO Created pkgapiscachegroupgo INFO Created pkgapiscachev alpha memcachedtypesgo INFO Created pkgapisaddtoschemecachev alpha go INFO Created pkgapiscachev alpha registergo INFO Created pkgapiscachev alpha docgo INFO Created deploycrdscacheexamplecomv alpha memcachedcryaml INFO Running deepcopy codegeneration for Custom Resource group versions cache v alpha F deepcopygo Hit an unsupported type invalid type for invalid type from pkgapiscachev alpha Memcached What did you expect to see Success What did you see instead Under which circumstances Error See above Environment operatorsdk version kubeabbeyroad memcachedoperator operatorsdk version operatorsdk version v commit fb b d b c f ba fa b go version go linuxamd Kubernetes version information kubeabbeyroad memcachedoperator kubectl version Client Version versionInfoMajor Minor GitVersionv GitCommitd cd baca b e d ed d GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Server Version versionInfoMajor Minor GitVersionv GitCommitd cd baca b e d ed d GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Kubernetes cluster kind Not using minikube Additional context kubeabbeyroad memcachedoperator env grep GO GO MODULE GOPROXY GOPATHhomekubego kubeabbeyroad memcachedoperator go version go version go linuxamd Description of the change Removes the buildtestframework directory Removes the testcluster molecule scenario Adds new cluster scenario that can be used to test against an existing cluster There is no longer any Ansible templating done in the deploy directory any templates used for testing will be located in moleculetemplates instead The scaffolded moleculeyml files now use the Ansible verifier All assertsyml files were renamed to verifyyml to reflect this The prepareconvergeverify tasks now make use of the new k s wait option to simplify the deployment logic Motivation for the change There have been a number of features added and lessons learned since the Ansible scaffolding was first written This PR should bring things more in line with what we recommend users do Still TODO Update tests Make existing tests pass Add a new test for the cluster scenario Update docs Description of the change The tests were been executed with the sort which as not running all scenarios The only test that will not work in the CI is the ansibleproxytestgo so it has been ignored Motivation for the change Have a more accurate Ensure that all tests which can be executed will use in the CI as well The make genclidoc will generate the cli docs automatically which is great Because now we can be focused to do improvements the helpers commands and then it will provide better documentation as well However some characters used in the commands can not be rendered properly or not at all in the Markdown So my suggestion is to format the descriptionusage of the commands with content that will work for both situations Description of the change Improve the command controller help Make clear how to use and what is the purpose of the flag customapiimport flag Motivation for the change Closes Description of the change add unit tests for the Generator 