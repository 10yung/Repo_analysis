Some software and APIs especially on the Windows platform still operate in terms of UTF code units when working with text One example is the Language Server Protocol which specifies text offsets in UTF code units Being able to efficiently interoperate with these APIs is useful especially for code editors To better support this usecase and to generally roundout Ropeys Unicode support we should provide a way to convert between Unicode scalar value indices which Ropey uses and UTF code unit indices I think tracking the data for this can be done with relatively little overhead Im not as concerned that the actual conversions be super optimized though they should still be efficient But I dont want the feature to negatively impact clients that arent using it Currently the Lines iterator is roughly equivalent to just calling Ropeline repeatedly with an incrementing index This is Olog N for each call to Linesnext and also is just generally less efficient than it needs to be This is not only suboptimal but also stands out compared to the other iterators which are all O and very fast It should be possible to also make Lines O and just generally more efficient Im wondering if you have any suggestion for efficiently tracking marked ranges Issue touched on this but was closed before you had a chance to comment I agree with issue it can probably should be done in external structure But an efficient implementation is nontrivial Im thinking something like markerindex as a good example of what is needed It would be great to have this structure as an option to go with ropey Or at least in the documentation to have some suggestions maybe another crate on how to handle the use case of tracking ranges in a ropey buffer 