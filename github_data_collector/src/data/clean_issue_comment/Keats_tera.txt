Would it be possible to make globwalk an optional feature Im using templates from strings in a wasm app and it works great Id like to trim the dependencies and reduce the size os the wasm a bit globwalk pulls in a whole tree of crates Hi Im trying to build a collaborative wiki and Id like to use Teras template system However some problems arise and I wonder if Tera can be used in this kind of use case The system is quite simple a user can write a page that will be registered on a database we are doing this because we are going to have a lot of pages What Im trying to build is the rendering server which will fetch the template from the database and send the result of the rendering The first problem is that I dont have control over the template cache system Id like to implement a custom LFU strategy This is currently impossible because even if Template is exposed Renderer is not Im imagining something that would look like this rust use teraContext Renderer Template Tera fn main I use Tera for everything that is static and wont probably change like macro base template let tera Teranewtemplatehtmlunwrap let name mycustompageslugtorender database let raw fetch name let result let template getcachedtemplateorgenerateanewone name raw Renderernewtemplate tera Contextdefault render unwrap sendresult Is that possible Other problems appear in a more advanced implementation module definition by users but I want to discuss custom rendering first I know that Template is only exported for Benchmarks etc but isnt the use legitimate here Thanks When rendering with an invalid template that refers to an Object instead of stringsintegersboolsarrays the rendering silent fails by rendering object due to by the way this could be CowBorrowed This is does not match the rust philosophy of being explicit and quickly failing so that we know what went wrong be it here the template being invalid Feels like JS I could see prettyprinting or JSON serialization make some sense here but my favorite option by far would be a rendering failure telling to whoever wrote the template to update it because this was probably a mistake In most programming languages and is evaluated before or But in Tera it is the other way around This can be seen by evaluating the expression false and true or true In Tera this expression evaluates to false In a language where and has higher or equal precedence to or the expression would evaluate to true Since the Tera documentation does not mention precedence levels I assume it is not intentional that or has a higher precedence Conforming the precedence levers of Tera operators to other programming languages is preferable In Tera an expression like this was possibe set tags querytags tags trim In Tera this gives an error Failed to parse templatehtml set tags querytags tags trim expected or Following template f returns the value passed to it jinja if true a b endif filter f c d endfilter renders as follows a b cd For filter section any whitespace following c appears to be discarded which is unexpected Hi Jinja has this nice support for formatting like HTMLDjango x X payloadid It would be nice to have something like this in tera specially for integers file types Maybe something more rust like HTMLDjango x payloadid formatX or x payloadid formatX It is the main bottleneck in terms of performance Some previous thoughts are on As stated here We badly sort the strings with accents criture is sorted after zola for instance Zola version Id like to have a nonbloated basehtml template so I made it this way basehtml DOCTYPE html html include headhtml include bodyhtml html bodyhtml body block content endblock content body I though I could override the content bloc inside my abouthtml template that extends basehtml but it appears to not be working without any compilation issue though abouthtml extends basehtml block content Hello world in abouthtml endblock content My abouthtml page is rendered exactly as my basehtml page so it appears that we cannot override an included block in inherited templates It is quite surprising but is that the intended behavior