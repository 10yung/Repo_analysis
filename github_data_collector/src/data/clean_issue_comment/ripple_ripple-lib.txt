Bumps mochajunitreporter from to details summaryCommitssummary ul lia href li lia href Fix option parsing for mocha li lia href Update libxmljs for node li liSee full diff in a href viewali ul details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version unless you reopen the PR or upgrade to it yourself dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in your Dependabot dashboard Update frequency including time of day and day of week Pull request limits per update run andor open at any time Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details It seems like the default value cannot be overwritten because it is not listed on Per ripplerippled The following fields are deprecated and may be removed without further notice accepted hash use ledgerhash instead seqNum use ledgerindex instead totalCoins use totalcoins instead The AccountDelete Transaction has a transaction cost of drops before load scaling per This bumps into the drop fee limit imposed on all transactions by default so AccountDelete cant be used unless maxFeeXRP is set to or higher Is this acceptable or do we want to make a special case for AccountDelete This test appears to pass but emits an UnhandledPromiseRejectionWarning reconnect event on heartbeat failure ms node UnhandledPromiseRejectionWarning NotConnectedError connect ECONNREFUSED at ConnectiononOpenError Usersuserrippleripplelibsrccommonconnectionts at ObjectonceWrapper eventsjs at WebSocketemit eventsjs at ClientRequestreqon Usersuserrippleripplelibnodemoduleswslibwebsocketjs at ClientRequestemit eventsjs at SocketsocketErrorListener httpclientjs at Socketemit eventsjs at emitErrorNT internalstreamsdestroyjs at emitErrorAndCloseNT internalstreamsdestroyjs at processtickCallback internalprocessnexttickjs node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code As a part of our work on resiliency I took a look this week at the connection logic inside of ripplelib specifically inside the Connection class in the commonconnectionts file This file controls all of the connectionreconnectiondisconnectretryheartbeattimeout logic that implements the base of RippleAPIs websocket requestresponse interface in addition to some basic ledger information tracking It hasnt seen a meaningful refactoring since it was first created years ago and is probably overdue for one Why overdue The connect logic works fine for the first connection and simple unit tests but begins to break down when network flakiness is introduced Scenarios attempted Connect to Testnet then remove network connection Attempts to reconnect indefinitely never returns an error to the user that anything is wrong with the reconnect attempt Connect to Testnet without network then add network connection Would refuse to connect if first connection failed even if network was fine Additionally internal digging identified a few different implementation issues disconnectcalledByUser calledByUser has been overloaded to mean a ton of different things where some notcalledbyuser flows still needed the calledbyuser behavior retryConnect would hang unless you first disconnected retry counter was not always reset as expected Events didnt stick to a single formatstructure errors werent always propagated through the reconnect flow errors werent always propagated through the request flow onX event handlers had to be bound and then juggled across async flowscallbacks Full interface audit ts class Connection extends EventEmitter PUBLIC INTERFACE GOOD We dont want to change the public interface at this point connect Promisevoid disconnect Promisevoid reconnect Promisevoid getLedgerVersion Promisenumber hasLedgerVersionslowLedgerVersion any highLedgerVersion any Promiseboolean hasLedgerVersionledgerVersion any Promiseboolean isConnected boolean getFeeBase Promisenumber getFeeRef Promisenumber requestrequest any timeout number Promiseany PRIVATE INTERFACE GOOD These are lowerlevel helpers that dont seem to be causing any trouble on their own private ws private nextRequestID parseMessagemessage any string Object error string string Object createWebSocket WebSocket We store a mapping of userprovided config options private properties IMPROVE Keep a single options or config property of all the ConnectionOptions cleaned from user input private url private trace private proxyURL private proxyAuthorization private authorization private trustedCertificates private key private passphrase private certificate private timeout IMPROVE Can be converted to constructor option new RippleAPIlog fn debug fn private console IMPROVE Pull ledger tracking implementation into a separate classproperty untangled from the connection logic protected ledgerVersion null number private availableLedgerVersions private feebase private feeref updateLedgerVersionsdata any void updateFeesdata any void IMPROVE Use an offtheshelf retry algorithm with builtin backoff logic private retry private retryTimer calculateTimeoutretriesCount any number retryConnect void IMPROVE Rewrite the connectreconnect implementation to be more resilient to errors private connectTimer private onOpenErrorBound private onUnexpectedCloseBound private connectionTimeout readonly state number readonly shouldBeConnected boolean onUnexpectedClosebeforeOpen any resolve any reject any code any void clearReconnectTimer void clearConnectTimer void rebindOnUnexpectedClose void unbindOnUnexpectedClose void onOpenErrorreject any error any void private clearHeartbeatInterval private startHeartbeatInterval private heartbeatInterval private heartbeat whenReadyTpromise PromiseT PromiseT disconnectcalledByUser Promisevoid IMPROVE Rewrite the requestresponse implementation to be more resilient to errors sendmessage string Promisevoid onMessagemessage any void EVENTS INTERFACE Fix tenses throughout IMPROVE connectionemitconnect connectionemitconnected IMPROVE connectionemiterror type websocketmessage err Error connectionemiterror badMessage errormessage message connectionemiterror websocket errormessage error IMPROVE connectionemitdisconnect type websocketmanual code integer connectionemitdisconnected code IMPROVE connectionemitreconnect attempt integer success boolean err Error connectionemitreconnect connectionemitreconnecting connectionretry cc intelliot keefertaylor With my home internet connection Cox cable the connection tests fail Connection default options trace with proxy Multiply disconnect calls reconnect NotConnectedError node UnhandledPromiseRejectionWarning AssertionError ERRASSERTION The expression evaluated to a falsy value assertplusWEBPACKIMPORTEDMODULE okapplyassertplusWEBPACKIMPORTEDMODULE ok arguments at ObjectAssertDiff as default Usersusergithubrippleripplelibnodemodulesassertdifflibwebpacklibindexmjs at Usersusergithubrippleripplelibtestconnectiontestts node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code Instead of getting NotConnectedError I get the ConnectionError from here the connection times out after seconds However using a different internet connection in my case a VPN resolves the issue the test passes The field ledgerVersion is duplicated in the documentation twice I think that this should be ledgerIndex If so we can add it to the mock response below 