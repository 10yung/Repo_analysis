 Thank you for reporting an issue This guide will help us respond to your report quickly Please try to provide as much information as possible If you need help feel free to join the JRuby chat room on Matrix Environment Information environments running same app ubuntu java jruby ubuntu java jruby JVM flags XXHeapDumpOnOutOfMemoryError XXInitialHeapSize XXManagementServer XXMaxHeapSize XXPrintGC XXPrintGCDateStamps XXPrintGCDetails XXPrintGCTimeStamps XXThreadStackSize XXUseCompressedClassPointers XXUseCompressedOops XXUseParallelGC Other relevant info you may wish to add Rails trinidad threads Issue only happens on production environment under heavy request load Expected Behavior App should not be slow on k Actual Behavior App is slow on k hours after startup pm on the screenshot is when it was started and it become slow at around pm Looks like the slowness is happening because app doesnt have enough memory for new objects k memory usage and gclog for this period img width altScreen Shot at PM src kgclog memory usage img width altScreen Shot at PM src gclog fixes This is the PR for our ruby branch in progress since earlier this year Environment jruby SNAPSHOT c caa Java HotSpotTM Bit Server VM LTS on LTS jit linuxx Linux DESKTOP POPPQP Microsoft Microsoft Thu Nov PST x x x GNULinux I fixed a bunch of bugs in but in order to support theres one blocker which I dont know how to fix a simple test case Expected Behavior test passes Actual Behavior FiddleTestFunctestqsort TypeError cannot convert parameter to native pointer this code tries to convert the class into a pointer optjruby librubystdlibrubygemsdefaultsjrubyrb warning constant GemConfigMap is deprecated NOTE GemSpecificationrubyforgeproject is deprecated with no replacement It will be removed on or after GemSpecificationrubyforgeproject called from optjruby librubygemssharedspecificationsdefaultjson javagemspec So it seems an update of the script is in order Note everything WORKS fine but you might have issues down the road leaning upon deprecated forms of code Thank you for creating something wonderful I love JRuby This PR will include commits to reduce the chance of Enumeratornext fibers leaking The original issue is So far most of the leaks appear to be caused by combining EnumeratorLazy with Enumeratornext since many lazy paths construct new Lazy instances in such a way that they are hardreferenced by the eventual fiber This issue is formed out of comments to starting here The text of those comments from ckpeter is copied below for context In my experience JRuby x series is significantly heavier in memory usage than I too had a Rails app that when first upgraded to would constantly OOM leading me to suspect leak However when I gave it G of heap and G metaspace the usage eventual plateaus With my class load count would go to K within the first few minutes then grows to K within the first days then it slows the growth to kday So it still look like some kind of leak but at least it is a very slow one The class unload count is usually of the running total at any given time Heap usage is usually between MB to MB with no obvious leak because every few days when I GC the memory goes down to below GB In comparison with the same Rails app running on JRuby the class count would stay flat at around k k for weeks easily Heap usage is usually MB MB enebo Yes I use the exact same bit VM The only difference is JRuby version vs headius Id be happy to investigate and get your the heap dumps Unfortunately I just restarted the web server a few hours ago so that blew away the history in the last days Let me run the app over for a week dump heap and then run it over for a week and dump heap Assuming the memory differential is noticeable Ill file a separate bug in a few weeks I assume itd be enough to dump heaps and jconsole screenshots for both and If there is any other kinds of dumps or measurements you want me to collect please let me know I restarted the build and this went away Happened during specrubyfast suite Socketudpserverloopon when no connections are available blocks the caller ERROR NoMethodError undefined method each for nilNilClass hometravisbuildjrubyjrubylibrubystdlibsocketrb in udpserverrecv hometravisbuildjrubyjrubylibrubystdlibsocketrb in block in udpserverloopon orgjrubyRubyKerneljava in loop hometravisbuildjrubyjrubylibrubystdlibsocketrb in udpserverloopon hometravisbuildjrubyjrubyspecrubylibrarysocketsocketudpserverlooponspecrb in block in main Environment JRuby version jruby a ac ff OpenJDK Bit Server VM b on b jit linuxx Operating system and platform Linux c e ee c linuxkit SMP Fri Sep UTC x GNULinux Expected Behavior Expected this script to behave the same way as in MRI ruby testrb usingModulenew do refine String do def foo bar end end end eval nENDofGUARD binding FILE LINE p foofoo ENDofGUARD sh ruby v ruby p revision x darwin ruby testrb bar Actual Behavior sh ruby v jruby a ac ff OpenJDK Bit Server VM b on b jit linuxx ruby testrb NoMethodError undefined method foo for fooString Did you mean fork main at tmpevalrefinerb eval at orgjrubyRubyKerneljava main at tmpevalrefinerb Moving using into eval resolves the issue With we moved to a pureRuby Enumeratornext impl that uses Fibers Along with that came the protocol originated by Rubinius whereby any class that implements togenerator could provide an external generator iterator that does not need a Fiber to maintain state We did not ever implement this method for any core classes Given that the vast majority of Enumeratornext usage is against Array this would substantially reduce the number of live fibers in the system I believe we should also do it for any other types that have their own each logic such as Hash See for an example of how quickly our threadbased Fiber can blow up if its leaking If these were all external iterators we might avoid the problem but it should still be fixed