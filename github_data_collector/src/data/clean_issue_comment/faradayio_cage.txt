I dont fully understand how cage source mount is meant to work Some guesses a Given source code and artifact docker container are the same mounting the source will just replace whats in the container b I will build my artifact and then run cage build after every change I want reflected in the container c I have some kind of a dev mode inside the container to sidestep how the application is served in production Examples a Will work for statics served via Nginx b webpack build process or JAR artifact c Run webpack dev mode in container Adds cratesio categorization I want to use ipv address field in dockercompose file and this field is supported by dockercomposeyml version However when I run cage up I got this error servicespaasnetworksnet unknown field ipv address expected aliases at line column Below is my backendyml service node image paasnode build networks net ipv address networks net ipam config subnet add serviceports to run command opts and add run opts to test command Hi there cage looks like a nice tool and Im excited to try it out on a project but Im hitting snag I created a service within podsfrontendyml that uses a build context of a git repo URL source code I can run cargo build to build the image and things look good The problem is with running cage up I see the following error message cage up WARNING dockercomposeyml file validation disabled until valico is updated from composeymlv validate WARNING dockercomposeyml file validation disabled until valico is updated from composeymlv validate ERROR The Compose file is invalid because Service web has neither an image nor a build context specified At least one must be provided Error error running dockercompose p examplecageprojectwithbuildcontext f Usersandrewsourceandrewsardoneexamplecageprojectwithbuildcontextcagepodsfrontendyml up d Inspecting my generated dockercompose file within the cage directory I see its missing a build context cat Usersandrewsourceandrewsardoneexamplecageprojectwithbuildcontextcagepodsfrontendyml version services web environment DATABASEURL postgrespostgresdb examplecageprojectwithbuildcontextdevelopment GLOBALPASSWORD magic PROJECTNAME examplecageprojectwithbuildcontext RACKENV development RAILSENV development SOMEPASSWORD secret labels iofdycagepod frontend iofdycageshell bash iofdycagesrcdir usrsrcapp iofdycagetarget development iofdycagetest bundle exec rake ports Extended description in source codes README Is there something Im missing Am I using cage improperly If not any idea of the source of the bug Thanks Example project pods dbyml in podsdbyml version services db healthcheck test CMD true When I run cage up I get ERROR The Compose file foocagepodsdbyml is invalid because Unsupported config option for servicesdb healthcheck Error error running dockercompose p foo f foocagepodsdbyml up d Looking at foocagepodsdbyml I see that its configured with version Expected foocagepodsdbyml should have version My hunch is that cage is creating an empty composeymlv File which gets a default version of yaml ports PORT This will fail to print out a status entry for the container with Error cannot parse without interpolating environment variables PORT Should be selfexplanatory I sometimes want dockercompose to do the interpolation rather than cage For example I have a local testing script that turns arguments into environment variables to smuggle them through docker into the container which then has a wrapper script that turns them back into arguments to call the interesting binary inside my container Cage eagerly interpolates the environment variables which is fine when calling cage up from the testing script but if I try to do cage status or cage logs or whatever from another terminal window it tries and fails to eagerly interpolate again As far as I see theres no workaround for this but Id like to see either a cage argument or maybe special syntax to allow deferring the interpolation Im happy to implement this myself with some guidance on what would be accepted This fixes cage to work after emkcomposeyml 