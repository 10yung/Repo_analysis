Thank you for this great little project I am trying to run the sslrs example Everything compiles normally I have added a selfsigned certificate I see the output of the println within the response handler but not the actual response The browser is stuck in loading state Any ideas With TCPListener its possible to listenfd and socket activation from systemd This allows to hide services into network namespaces and disallow them to do bind and listen which is very handy securitywise Not only can one disallow these its also probably possible to use RestrictAddressFamilies and disable even AFINET and AFINET for even more through lockdown Im not really sure how to make this work without breaking backward compatibility or introducing something like withlistener variants for methods that require ToSocketAddrs today error failed to select a version for the requirement ascii candidate versions found which didnt match location searched cratesio index required by package tinyhttp v It seems that versions of the ascii package are yanked from cratesio wtf making tinyhttp uninstallable at this moment Responding to a secure HTTPS request fails after the server has been running for a few seconds Responding to a HTTP request always works Responding to a request is handled as follows match response Someresp if let Erre requestrespondresp errorError responding e None errorError creating response to request It seems requestrespondresp somehow gets stuck occasionally very rarely I get error messages about a Broken Pipe The Response code looks as follows with contents being a long string containing HTML stuff ResponsefromdatacontentsasbyteswithheaderHeaderfrombytes bContentType btexthtml charsetutf unwrapboxed On master branch commit b b bccfc e c e a df fa running cargo bench results in the following error rust Compiling tinyhttp v homecgmdevelrusttinyhttp error E cant find crate for time benchesbenchrs extern crate time cant find crate error aborting due to previous error For more information about this error try rustc explain E error Could not compile tinyhttp To learn more run the command again with verbose This pull request replaces the use of a Boxdyn Error in Servernew and related methods with a plain old error enum instead This is easier to work with as a consumer of tinyhttp and makes it possible to handle errors exhaustively The first commit in this PR simply replaces the string error message about SSL requiring the ssl feature with a NewServerErrorSslFeatureRequired enum case The second commit builds on this by making the ServerConfigssl field conditional on the ssl feature making any attempt to start an SSL server without the ssl feature a compile time error This change allowed me to then remove NewServerErrorSslFeatureRequired again I hit the following problem and saw it in the issues too how do you gracefully shutdown the server There is effectively no way of breaking out of incomingrequests other than receiving a client request Rust favors message passing We cant kill threads or send them signals Unix style We can only pass messages between threads via channels to tell them to shut down on their own or with synchronization primitives such as condvar or with shared memory under lock After some research it turns out the standard library does blocking IO ie the accept method on TcpListener used by tinyhttp There really is no way to break out of it except with a client request or on error This is already dealt with by a previous commit by moisessilva cde on object destruction we briefly connect to the server to unblock the thread stuck on accept side note for async IO look for mio But a for loop on incomingrequests it still blocking Its not stuck on accept but inside the message queue waiting on condvar for new client requests This commit adds a special request variant that says to unblock the loop and return no client request since there is none we just want to shutdown I slightly modified the messagequeue API ie the pop method now returns an Option which is internal There are no changes on the public side ie on server except the addition of the unblock method that effectively unblocks one thread stuck in incomingrequests or recv Since there is no breaking change to the public API all existing code work as previously The addition of unblock allows to implement graceful server shutdown by calling it from another thread Hopefully the two tests added make its usage clear Let me know what you think This add the possibility to use rustls instead of openssl Note that the certificatekey in the examples directory doesnt work with the rustls implementation because the certificate was generated with a key length of bit rustls doesnt accept such keys because its considered poorly secured as of today