There seems to be an issue when attempting to import the module as a part of a users profile In my profile I determine which version of PowerShell Im using and the platform If its Core edition on Windows install the module if its not found and then immediately import it After the install successful immediately on the import I get the following error Regardless of attempts to suppress the error ErrorAction SilentlyContinue assignment to null or pipe to OutNull the error persists I can however immediately import the module without issue once I get the prompt For your information MICHEALPC C PS PSVersionTable Name Value PSVersion PSEdition Core GitCommitId OS Microsoft Windows Platform Win NT PSCompatibleVersions PSRemotingProtocolVersion SerializationVersion WSManStackVersion Using the IIS WebAdministration module with WIndowsCompatibilty does not load the IIS provider into a PowerShell session To reproduce Install WebServer Using WInCompat LoadWinModule Name WebAdminstration Do DIR IIS and you get the error If I try to install the docker package I get an error even using WInCompat powershell PS C Foo Installpackage Name Docker ProviderName DOckerMSFTProvider Force Installpackage The term GetWindowsFeature is not recognized as the name of a cmdlet function script file or operable program Check the spelling of the name or if a path was included verify that the path is correct and try again At line char Installpackage name Docker providername DOckerMSFTProvider Force CategoryInfo InvalidOperation MicrosoftPowerShel letsInstallPackageInstallPackage InstallPackage Exception FullyQualifiedErrorId FailedToDownloadInstallPackageMicrosoftPowerShellPackageManagementCmdletsInstallPackage The GetWindowsFeature command does indeed exist The best practices module a standard module in WIndows can not be loaded by PowerShell as its not based yet on NET Core However it also does not load with WIndows Compatibility module powershell PS C foo importwinmodule bestpractices ImportModule Failed to generate proxies for remote module BestPractices Running the GetFormatData command in a remote session reported the following error Unable to cast object of type MicrosoftPowerShellCommandsInternalFormatControlReference to type MicrosoftPowerShellCommandsInternalFormatComplexControlBody At C Program Files PowerShell Modules WindowsCompatibility WindowsCompatibilitypsm char ImportModule Name ImportNames NoClobberNoClobber CategoryInfo NotSpecified ImportModule InvalidOperationException FullyQualifiedErrorId CmdletInvocationExceptionMicrosoftPowerShellCommandsImportModuleCommand Installed WindowsCompatibility module and imported PKI module Created certificate as follows cert NewSelfSignedCertificate Subject test KeyExportPolicy Exportable CertStoreLocation Cert CurrentUser My When exporting and yes pw is a securestring I get an error that the key is not exportable ExportPfxCertificate Cert cert Password pw FilePath c temp testpfx Cannot export nonexportable private key CategoryInfo NotSpecified ExportPfxCertificate Win Exception FullyQualifiedErrorId SystemComponentModelWin ExceptionMicrosoftCertificateServicesCommandsExportPfxCertificate PSComputerName localhost If I retrieve the cert by thumbprint in PS and then export it works fine cert ls Cert CurrentUser My FD D C E C EFA E C C CDC ExportPfxCertificate Cert cert Password pw FilePath c temp testpfx Directory C temp Mode LastWriteTime Length Name a AM testpfx Any help would be appreciated Maybe not the best fix but it helps to use it with Visual Studio Code Using WIndows Server and PowerShell Core Cannot load the ADDSDeploymeht module which means I cannot use the InstallADDSForest and other cmdlets from that module If I try to import the module I see this powershell PS C Foo ImportModule ADDSDeployment verbose VERBOSE Loading module from path C Windows system WindowsPowerShell v Modules ADDSDeployment ADDSDeploymentpsd VERBOSE Loading Assembly from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeployment v bf ad e MicrosoftDirectoryServicesDeploymentdll VERBOSE Loading Executable from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeployment v bf ad e MicrosoftDirectoryServicesDeploymentdll VERBOSE Loading Assembly from path C Windows MicrosoftNET assembly GACMSIL MicrosoftADRolesDeploymentCommon v bf ad e MicrosoftADRolesDeploymentCommondll VERBOSE Loading Executable from path C Windows MicrosoftNET assembly GACMSIL MicrosoftADRolesDeploymentCommon v bf ad e MicrosoftADRolesDeploymentCommondll VERBOSE Loading Assembly from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeploymentTypes v bf ad e MicrosoftDirectoryServicesDeploymentTypesdll bf ad e MicrosoftDirectoryServicesDeploymentTypesdll bf ad e MicrosoftDirectoryServicesDeploymentTypesdll VERBOSE Loading Executable from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeploymentTypes v erShell edition Core Its supported editions are Desktop Use ImportModul bf ad e MicrosoftDirectoryServicesDeploymentTypesdll ImportModule Module C Windows system WindowsPowerShell v Modules ADDSDeployment ADDSDeploymentpsd does not support current PowerShell edition Core Its supported editions are Desktop Use ImportModule SkipEditionCheck to ignore the compatibility of this module At line char tion ImportModule ADDSDeployment verbose CategoryInfo ResourceUnavailable C Windows system u ADDSDeploymentpsd String ImportModule InvalidOperationExcep If I use the SkipEditionCheck I See this powershell PS C Foo ImportModule ADDSDeployment verbose SkipEditionCheck VERBOSE Loading module from path C Windows system WindowsPowerShell v Modules ADDSDeployment ADDSDeploymentpsd VERBOSE Loading Assembly from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeployment v bf ad e MicrosoftDirectoryServicesDeploymentdllVERBOSE Loading Executable from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeployment v bf ad e MicrosoftDirectoryServicesDeploymentdll VERBOSE Loading Assembly from path C Windows MicrosoftNET assembly GACMSIL MicrosoftADRolesDeploymentCommon v bf ad e MicrosoftADRolesDeploymentCommondllVERBOSE Loading Executable from path C Windows MicrosoftNET assembly GACMSIL MicrosoftADRolesDeploymentCommon v bf ad e MicrosoftADRolesDeploymentCommondll VERBOSE Loading Assembly from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeploymentTypes v bf ad e MicrosoftDirectoryServicesDeploymentTypesdllVERBOSE Loading Executable from path C Windows MicrosoftNET assembly GACMSIL MicrosoftDirectoryServicesDeploymentTypes v bf ad e MicrosoftDirectoryServicesDeploymentTypesdll ImportModule Could not load type SystemManagementAutomationCustomPSSnapIn from assembly SystemManagementAutomation Version Cultureneutral PublicKeyToken bf ad e At line char ImportModule ADDSDeployment verbose SkipEditionCheck CategoryInfo NotSpecified ImportModule TypeLoadException FullyQualifiedErrorId SystemTypeLoadExceptionMicrosoftPowerShellCommandsImportModuleCommand Can we get a fix for this From Full description of the problem from scottluskcis The first command succeeds but the ImportWinModule command fails with this error PS C Users MyUser ImportWinModule MicrosoftPowerShellLocalAccounts NewPSSession localhost Connecting to remote server localhost failed with th e following error message The client cannot connect to the destination specifi ed in the request Verify that the service on the destination is running and is accepting requests Consult the logs and documentation for the WSManagement ser vice running on the destination most commonly IIS or WinRM If the destination is the WinRM service run the following command on the destination to analyze an d configure the WinRM service winrm quickconfig For more information see th e aboutRemoteTroubleshooting Help topic At C Users MyUser Documents PowerShell Modules WindowsCompatibility Wi ndowsCompatibilitypsm char session NewPSSession newPSSessionParameters SelectObj CategoryInfo OpenError SystemManagementA u tionRemoteRunspa ceRemoteRunspace NewPSSession PSRemotingTransportException FullyQualifiedErrorId CannotConnectPSSessionOpenFailed I am trying this on Windows Enterprise for example Are there any additional steps that need to be mentioned in the NOTE There is nothing stopping PowerShell core of installing a module that requires the full net framework For example Ive developed this WcfPS and within it I do heavy use of net code from the SystemServiceModel assembly If I install the module from the Windows PowerShell environment then I can do ImportWinModule WcfPS and it works If I install the module from the PowerShell Core environment then I cant do ImportWinModule WcfPS although it wont complain When I first read about WindowsCompatibility I understood that it will offer the ability to execute any module that depends on the full net framework as people work with from their environment PowerShell Core While experimenting with WindowsCompatibility module I am positively surprised by the fact that is based on the implicit importing of modules but Im also disappointed because it has failed to communicate the following two points It is designed primarily to load the modules available in the up to version Windows PowerShell installation It doesnt offer a seamless experience when working from withing PowerShell Core console when a person wants to work with a nondefault module In essence I need to open the Windows PowerShell console install a module from there and then try to use it from PowerShell Core console I suggest one of the following clarify this aspect in the documentation More honest advertisement wouldnt hurt as well provide a parameter to work with modules available in the PowerShell Cores PSModulePath For example ImportWinModule WcfPS Name ModuleName Core ImportWinModule WcfPS Name ModuleName LocalOnly or just another cmdlet name for simplicity and keeping all the others clean In the second case the cmdlet shouldnt accept a computer name any longer as it needs by design to create a session to localhost Let me know what your thoughts are especially on the seconds suggestion parameter name I think that it shouldnt be this difficult to implement This is a great module however it still requires scripts to be rewritten that have importmodule natively in them I propose adding a command RegisterWinImportModule that will add a proxy command to importmodule and use the following logic If the module is available in PSCore PSModulePath import it natively If not check the Win PSModulePath If the module is present and is supported in Core via CompatiblePSEditions manifest setting import it natively If it is present in PSModulePath but either not supported in core or CompatiblePSEditions is unspecified ImportWinModule it I would end up using this in my PSCore scripts natively as well so if I were to run say ImportModule ActiveDirectory it will implicitly use the WindowsPowershell version until I get a PSCore Compatible version in place and when I do I dont have to rewrite my script to take advantage of it later This would probably also require a small proxy to GetModule to at least do a writewarning about the behavior and that GetModule wont show all potential modules present In the future have the logic return all modules regardless of where they live I already have a version of this scaffolded Ill be happy to write the PR if there is interest