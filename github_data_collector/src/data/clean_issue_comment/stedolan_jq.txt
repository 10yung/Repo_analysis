JQ should distinguish between falsy and nully values Alternative operator should replace only nully variables but not falsy ones empty null false is should be false Current behavior makes it usefulness when data contains also booleans because in such case all falsees will be replaced by alternative value if I needed such behavior I can simply use if then yes else no end now instead alternative operator I need to use if null then else default end Describe the bug When you define a function but want value semantics for arguments you could use the shorthand def functionarg which is equivalent to def functionarg arg as arg This poses a problem if the valueargument name happens to share the name of a function thats in scope the local argument is used Can be confusing see repro Instead some sort of name mangling should be performed so its equivalent to something along the lines of def functionfunction arg function arg as arg mangled function name function arity arg name To Reproduce def fnstr length strlength as len len fnabc would expect to return returns workaround change arg name def fn str length strlength as len len fn abc would expect to return returns Expected behavior The argument name should not conflict with names in scope when valueargument shorthand is used Slight semantic change but Id argue its less confusing Environment please complete the following information jq Additional context Was defining some helper functions and wanted to create string padding functions and started with this initially def rpadstr length pad strlength as len problem selectlen length str padlengthlen str def rpadstr length rpadstr length Fix using the name size instead of length This feels nice though perhaps the new operator should be or or alike jq n true and if then true else false end false jq n true and if then true else false end true diff git asrclexerl bsrclexerl index c fcebc f f asrclexerl bsrclexerl struct lexerparam label return LABEL break return BREAK loc return LOC return HIGHPRECPIPE return SETPIPE return SETPLUS return SETMINUS diff git asrcparsery bsrcparsery index bdb f aa f asrcparsery bsrcparsery struct lexerparam token LABEL label token BREAK break token LOC loc token HIGHPRECPIPE token SETPIPE token SETPLUS token SETMINUS struct lexerparam precedence precedence try precedence catch right HIGHPRECPIPE type blk Exp Term Exp Exp blockjoin Exp Exp blockjoin Exp Exp genboth Describe the bug jq documentation says recursef is identical to recursef null and can be used without concerns about recursion depth however from jq the filter for null was abolished which is good and consistent I believe To Reproduce Just see the documentations and search for definition for the one parameter recurse function Expected behavior The description should be like following recursef is identical to recursef true and can be used without concerns about recursion depth since recursef is defined def recursef def r f r r in builtinjq Environment please complete the following information ALL jq version or leter Additional context None READ THIS FIRST If you have a usage question please ask us on either Stack Overflow or in the jq channel on Freenode Describe the bug Autoconf fi failed to execute in windows To Reproduce autoreconf fi Cant locate Autom teChannelDefspm in INC you may need to install the Autom teChannelDefs module INC contains mingwshareautoconf usrlibperl siteperl usrshareperl siteperl usrlibperl vendorperl usrshareperl vendorperl usrlibperl coreperl usrshareperl coreperl at cMinGWbinautoreconf line BEGIN failedcompilation aborted at cMinGWbinautoreconf line Environment please complete the following information OS and Version Windows jq version Hi Can you consider to add a builtin padn function to jq Something like this def padn if n then else padn end Congratulations for this great tool Describe the bug add filter does not properly summarize some information To Reproduce testtxt run the add filter over the attached dataset you will get the result Expected behavior The correct result would be as no element of the entire array has more than decimals Environment please complete the following information Fedora Server jq version Additional context time jq tempchrisyaydatajson jq abctest devnull nc homechrisconfigmoscoviumOrangemonitorsoc Connection refused jq tempchrisyaydatajson s user s system cpu total jq abctest devnull s user s system cpu total time jq tempchrisyaydatajson jq abctest devnull nc homechrisconfigmoscoviumOrangemonitorsoc Connection refused jq tempchrisyaydatajson s user s system cpu total jq abctest devnull s user s system cpu total Doing k records takes s while k records take s Im trying to append to a file with a very large number of records k and its taken a very long time m Describe the bug Jq does not accept nan but accepts nan To Reproduce echo nan jq parse error Invalid literal at line column echo nan jq null echo NaN jq null echo NaN jq null Expected behavior Not sure if jq should accept nan or reject nan I would vote for rejecting nan as some popular applications like MongoDB do Environment please complete the following information OS Kubuntu jq version jq a b cbe echo jq jq parse error Unfinished string at EOF at line column echo echo jq e jq parse error Unfinished string at EOF at line column echo There is no way to detect a parsing error without readingparsing stderr which is not reliable at all and that makes it really hard to use jq in shell scripts Reproducible on both jq ge eab and jq dfsg 