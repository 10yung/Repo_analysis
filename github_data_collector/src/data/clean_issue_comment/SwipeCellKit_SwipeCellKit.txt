 Instead of augmenting existing custom rotor actions with new information SwipeCellKit appears to completely override them with the swipe actions that have been configured Heres an example of what that looks like this one from SwipeTableViewCellAccessibilityswift Swift open override var accessibilityCustomActions UIAccessibilityCustomAction get guard let tableView tableView let indexPath tableViewindexPathfor self else return superaccessibilityCustomActions let leftActions delegatetableViewtableView editActionsForRowAt indexPath for left let rightActions delegatetableViewtableView editActionsForRowAt indexPath for right let actions rightActionsfirst leftActionsfirst compactMap rightActionsdropFirst leftActionsdropFirst if actionscount return actionscompactMap SwipeAccessibilityCustomActionaction indexPath indexPath target self selector selectorperformAccessibilityCustomActionaccessibilityCustomAction else return superaccessibilityCustomActions set superaccessibilityCustomActions newValue For apps using custom cell designs that are unique enough they need more rotor actions this to put it mildly really stinks especially since its implementation in an extension makes it very difficult to override To compound things I suspect this accessibility use case is not unusual since unique cell designs are exactly the kind of edge case that make using Apples default swipe implementation problematic What I would propose is changing this code to either allow an injected additional set of custom rotor actions or reconfigure this code to add the swipe actions on top of existing actions set by the subclassing cell Thoughts Its my SwipeAction var options SwipeOptions optionsexpansionStyle destructiveautomaticallyDelete false let delete SwipeActionstyle destructive title deleteTitle action indexPath in for index in selfinboxHistoriescount if let i selfinboxHistories index indexof history if inboxHistories index count inboxHistoriesremoveat index else selfinboxHistories index removeat i break actionfulfillwith delete inboxHistories is an D array that provides the sections and the data in sections But when I try to delete one section also try to delete the section that contains one element from the array it crashes When I use showSwipe with animation it works yet with animation false it doesnt Added property customView in SwipeAction Since all rules were following minimumButtonWidth the SwipeActionsView was readapted to autolayout using the frame variable in each action view The SwipeActionButton now is inside some UIView that has the same behavior of contentRect calculated by SwipeActionButtonWrapperView This allows setting constraints to enable SwipeActionsView to calculate the animations and perform the scroll effect I am using SwipeCellKit in a UITableViewController together with a side menu that is activated by a swipe from left to right My SwipeTableViewCell only defines right items so I would expect swiping from right to left to show the SwipeCellKit actions and swipe from left to right to open the side menu The problem is that SwipeCellKit takes precedents over the side menu and handles the swipe gesture for both left to right and right to left without checking if swipe actions are defined for that direction I found this in SwipeController swift if gestureRecognizer panGestureRecognizer let view gestureRecognizerview let gestureRecognizer gestureRecognizer as UIPanGestureRecognizer let translation gestureRecognizertranslationin view return abstranslationy abstranslationx I think the return abstranslationy abstranslationx should also check if there are actions defined for the currently handled direction Maybe something like this swift if gestureRecognizer panGestureRecognizer let view gestureRecognizerview let gestureRecognizer gestureRecognizer as UIPanGestureRecognizer let translation gestureRecognizertranslationin view let canSwipeLeft delegateswipeControllerself editActionsForSwipeableFor rightcount let canSwipeRight delegateswipeControllerself editActionsForSwipeableFor leftcount switch canSwipeLeft canSwipeRight case true true return abstranslationy abstranslationx case false false return false case true false only if swipe is horizontal and either to the left or to the right but menu is already open so it gets dismissed return abstranslationy abstranslationx translationx swipeablestate right case false true only if swipe is horizontal and either to the right or to the left but menu is already open so it gets dismissed return abstranslationy abstranslationx translationx swipeablestate left In your MailExample app many actions are called when I select them at the same time I have not found the previous issue but if such a bug has already been please tell me ezgif comvideotogif Per Border transmission in landscape on an iPhone X starts at safe inset instead of edge of screen Hey thank you for this awesome library Im trying to find a way so when the user swipes the cell the action occurs immediately so without giving the user a chance for the cell to stick and show the available options Fix button label vertical alignment per snod comment on issue 