While build using cmake locally i got these warinnings Building CXX object srctestlibjsonCMakeFilesjsoncpptestdirmaincppo datajsoncppsrctestlibjsonmaincpp In member function virtual void TestCharReaderAllowDropNullTestissue runTestCase datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers datajsoncppsrctestlibjsonmaincpp warning missing initializer for member TestCharReaderAllowDropNullTestissue runTestCaseTestSpeconRoot Wmissingfieldinitializers Linking CXX executable jsoncpptest this PR will fix them seeing issues with ccache when using CMake removed it as per Describe the bug py amalgamatepy does not work on windows console Expected behavior print to console and execute the script Desktop please complete the following information OS Windows Fix The shebang top line is preventing windows from running the script correctly Take out the shebang on windows and run the command with py amalgamatepy COMMANDLINEARGUMENTS The script will work as expected Read more Required to get JSONCPPUSINGSECUREMEMORY available According to and this PR will revert the changes to the old Reader VS jsoncpp include json valueh warning C throw noexcept f namespace std Specialize stdswap for JsonValue template inline void swapJsonValue a JsonValue b aswapb namespace std Specialize stdswap for JsonValue template inline void swapJsonValue a JsonValue b noexcept aswapb Is your feature request related to a problem Please describe A clear and concise description of what the problem is Ex Im always frustrated when Describe the solution youd like A clear and concise description of what you want to happen Describe alternatives youve considered A clear and concise description of any alternative solutions or features youve considered Additional context Add any other context or screenshots about the feature request here Building on cygwin and similar on git code I see Linking CXX executable readFromStreamexe usrlibgccx pccygwin x pccygwinbinld CMakeFilesreadFromStreamdirreadFromStreamreadFromStreamcppo in function main usrsrcdebugjsoncpp examplereadFromStreamreadFromStreamcpp undefined reference to JsonCharReaderBuilderoperator stdcxx basicstringchar stdchartraitschar stdallocatorchar const usrlibgccx pccygwin x pccygwinbinld usrsrcdebugjsoncpp examplereadFromStreamreadFromStreamcpp textstartup x relocation truncated to fit RX PC against undefined symbol JsonCharReaderBuilderoperator stdcxx basicstringchar stdchartraitschar stdallocatorchar const usrlibgccx pccygwin x pccygwinbinld usrsrcdebugjsoncpp examplereadFromStreamreadFromStreamcpp undefined reference to JsonparseFromStreamJsonCharReaderFactory const stdistream JsonValue stdcxx basicstringchar stdchartraitschar stdallocatorchar usrlibgccx pccygwin x pccygwinbinld usrsrcdebugjsoncpp examplereadFromStreamreadFromStreamcpp textstartup x e relocation truncated to fit RX PC against undefined symbol JsonparseFromStreamJsonCharReaderFactory const stdistream JsonValue stdcxx basicstringchar stdchartraitschar stdallocatorchar collect error ld returned exit status Built target readFromStream Linking CXX executable readFromStringexe usrlibgccx pccygwin x pccygwinbinld CMakeFilesreadFromStringdirreadFromStringreadFromStringcppo in function main usrsrcdebugjsoncpp examplereadFromStringreadFromStringcpp undefined reference to JsonValueasString abicxx const usrlibgccx pccygwin x pccygwinbinld usrsrcdebugjsoncpp examplereadFromStringreadFromStringcpp textstartup x relocation truncated to fit RX PC against undefined symbol JsonValueasString abicxx const collect error ld returned exit status Built target readFromString Linking CXX executable stringWriteexe usrlibgccx pccygwin x pccygwinbinld CMakeFilesstringWritedirstringWritestringWritecppo in function main usrsrcdebugjsoncpp examplestringWritestringWritecpp undefined reference to JsonwriteString abicxx JsonStreamWriterFactory const JsonValue const usrlibgccx pccygwin x pccygwinbinld usrsrcdebugjsoncpp examplestringWritestringWritecpp textstartup x relocation truncated to fit RX PC against undefined symbol JsonwriteString abicxx JsonStreamWriterFactory const JsonValue const collect error ld returned exit status Built target stringWrite Built target streamWrite Build is just performed as cmake DBUILDSHAREDLIBSBOOLON sourcedirectory make Except the examples everthing else seems fine All tests passed Greetings I write because a user has requested a Bamtools installation and this JsonCpp is a dependency Many people have releases that place items in system directories of local machines In your release JsonCpp is there any way to deploy this to an arbitrary nonsystem named directory which might be referenced by a PATH addition In many compilations there is a standard step configure which takes care of this with prefixlocation Thanks for any leads The workflow you list on your website probably wont work if we need an arbitrary location for the files or wish to deploy internally by custom RPM your docs You can download and install JsonCpp using the vcpkg dependency manager git clone cd vcpkg bootstrapvcpkgsh vcpkg integrate install vcpkg install jsoncpp Describe the bug A clear and concise description of what the bug is I executed bootstrapvcpkgsh I also executed sudo I got an error when linking CXX executable vcpkg CMakeFilesvcpkglibdirsrcvcpkgbasehashcppo In function vcpkgHashgetfilehashvcpkgFilesFilesystem const stdexperimentalfilesystemv path const vcpkgHashAlgorithm stderrorcode hashcpptext x d undefined reference to stdiostreamcategory hashcpptext x bb undefined reference to stdiostreamcategory collect error ld returned exit status ninja build stopped subcommand failed To Reproduce Steps to reproduce the behavior Expected behavior A clear and concise description of what you expected to happen Desktop please complete the following information OS eg iOS ubunto Meson version Ninja version Additional context Add any other context about the problem here Am I doing something wrong or is that a bug JsonValue v v data stdstring stds v data asString OutputDebugString stdsdata as expected Now i write it in a string JsonFastWriter writer stdstring s writerwrite v OutputDebugString sdata data u ufffd u u a ufffd and back again JsonReader reader JsonValue r readerparse s r we look at the data stds r data asString OutputDebugString stdsdata There should contain but if we write the parsed data again stdstring s writerwrite r OutputDebugString s data data u ufffd u u a ufffd the same like the origin data Any ideas 