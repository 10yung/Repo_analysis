As noted in LuaJIT is broken in macOS Catalina Rather than following Homebrew and maintain custom patches for just upgrade to where the problem does not exist in the first place This is a pretty nasty issue that Ive been working at for hours The output of the dummy linker invocation is too long so it gets cut off while writing to buildllvmobjectsllvmlist Heres my llvmlist The bottom line is cut off so the linker gets confused and says that theres no file named SelectionDAGPr when actually it should be SelectionDAGPrintercppo Ive tried everything and it seems that the only way to get the full output is to print it directly to the terminal Here are the changes I made What I have to do is copy the list of filepaths from terminal to a file named libslist Once the list is an actual file then it can used to generate llvmlist Its hacky but it works Running this code terra local struct foo local terra bara foo end local function baza return bara end local function quux return baz end quux produces this stack trace sttestt bad argument to quux cannot convert number to struct foo stack traceback C in function quux sttestt in main chunk The stack trace ends a frame up from the actual error saying that a bad argument was passed to a function that doesnt take an argument misrepresenting the origin of the function quux and not including the position of the actual error This is new for us Im going to try to write out an RFC for a proposed syntax change in which adds a switch statement to the language The goal here is to get the syntax changes all in one place so that there is a definitive definition of what were trying to do and so you dont have to go chasing comment threads to track the latest state I will edit this RFC as we make changes Bear with me since this is new and we may evolve the process as we go along Motivation Switch is a useful construct to have in a lowlevel language like Terra because it exposes a lowlevel machine feature jump tables in a zerocost way that otherwise you would not be able to handcode without language support The initial support suggested here is fairly minimal ie were not going to fullon Ruststyle match which makes it a good fit for Terras lowlevel optimization goals Higher level constructs can be metaprogrammed or possibly considered as future additions to the language Syntax Proposal This proposal adds the following syntax switch valueexpr case caseconst then casebody case caseconst then casebody else elsebody end The else is optional and provides a default block that runs if no case matches caseconst are constant values currently just integers body are blocks of statements like youd have in any control flow construct valueexpr is an arbitrary expression of the same type as the case constants No Default Fallthrough This proposal does NOT provide default fallthrough between case statements unlike C Therefore there is no need to use break or return to avoid fallthrough If we provide fallthrough in the future it will be via explicit keyword to be determined Therefore code written for todays semantics will work on future versions even if fallthrough is later added Variable Scoping Each case block is its own scope just like normal Lua control flow constructs This means in the future if we support fallthrough if the user wants variables to be visible across multiple blocks they will need to declare then in an outer scope just like chained ifelse Semantics I think the semantics are otherwise fairly obvious but let me know if thats not true and I will expand this section Alternatives Originally the suggested syntax for this statement was switch do case then ie with an extra do after valueexpr This is not entirely a stylistic choice since do is required in order to implement Duffs Device which would require regular statements to be placed in the switch block but outside of any case blocks The other option to enable Duffs Device is something like a native jump table object terralibjumptable or similar Open Questions What values can we match on The current implementation only does integers but it may be worth defining in this RFC a larger set of values that we expect to eventually be supported Do case blocks define their own scopes This is relevant because it influences variable lifetimes in the event of fallthrough Ive suggested one option above but this is open to discussion Adding syntax for a switch statement to the language The chosen syntax is switch expr do case expr then block case expr then block else block end This includes the addition of two new keyword tokens switch and case but avoids the addition of any other keywords that most implementations would use such as default This syntax is still up for discussion There is no case fallthrough by default adding optional case fallthrough is future development When I build Terra with CMake and CUDA is enabled Im seeing repeated rebuilds every time I run make This is apparently a known issue though that link is talking about VS and Im on Ubuntu There is some indication that the newer support for CUDA as a firstclass language may fix this issue That would require bumping the CMake required version to which is in Ubuntu but not in Ubuntu If there are other options that dont require a bump in the minimum CMake version Im open to suggestions Once is merged the only remaining external lua script being run will be geninternalizedfileslua which just creates a header file full of gigantic byte arrays of a bunch of files used by Terra This is a silly thing to do when there are standard ways of including readonly data inside executables Windows has resource files and Linux has this method of embedding resources in the rodata section However both of these techniques are fully general they can embed any kind of binary data but all of the data Terra is embedding are just text strings Theres no errant null terminators inside of them I checked which means they could just be embedded as strings inside the code It is possible that doing this might not guarantee then end up in the correct rodata section but I am reasonably certain it is possible to interpret an entire header file as a raw string by doing some absurd preprocessor shenanigans The only tricky part about this is that Terra uses this mechanism to absorb the entire contents of the clang resource directory This means the build step would still have to construct at minimum some sort of simplified header file that contains the logic to include the files without the complex machinations of geninternalizedfileslua If successful this would eliminate the only remaining external lua script in the build process which will hopefully reduce the chances of it failing for strange reasons Executing this million lines of printing hello world being compiled to an executable terralibsaveobjstupidhello main terra escape local printf terralibexternfunctionprintf rawstring local printstat quote printf Hello world n end for i do emitprintstat end end return end causes this on my machine terra nixstoreqlmx jhbl ab am qmbgjiqk ls gwllvm includellvmSupportErrorOrh llvmErrorOrTstoragetype llvmErrorOrTgetStorage with T stdcxx basicstringchar llvmErrorOrTstoragetype stdcxx basicstringchar Assertion HasError Cannot get value when an error exists failed Aborted core dumped Just recording for now will troubleshoot and add details later leaktestt is failing on Windows with LLVM when built with CMake The best part of this bug is it depends on whose fork you are in In my fork it passes In the main repo it fails I was seeing issues with PRs onto my repo too All identical commits Anyway theres clearly something bizarre going on but Im going to just turn this test off on Windows for the moment until we figure out whats going on This issue is here as a reminder to turn it back on if we ever get around to looking at it Related to now that we support CMake on Windows it would be nice to get rid of the old NMake build particularly because NMake is even less fullfeatured than regular Make is As far as I know the CMake build on Windows is fullfeatured so Im not aware of any reason to put this off except to give time to let the CMake build get tested in the wild Windows users please test CMake now and make sure it works for you