This adds a few koans to hashmaprs Didnt want to break these out into separate tickets although I can but I see room for adding more koans Result Option Crates Modules requires thought on organization Iterators Pattern matching Closures HashMap w Entry API Want to know if PRs are welcome on these and other topics Will probably raise some anyway without an answer I found two very minor typos while doing the koans Thank you for guiding me on my way to enlightenment Maybe its just me but its not clear what this koan is supposed to accomplish There are no hints as to what I need to change Arrays can also be iterated through using a for loop test fn forloops let arr u let mut y u for x in arr assertx y Thx for the project Hi Im seeing something very strange as Im working through the koans Its probably not a bug with the koans per se so feel free to direct me to a more appropriate place but I only see test failures on even koans but the even koans failures include the odd failures Let me explain I start as so tail srcpathtoenlightenmentrs srckoansthetruthrs srcpathtoenlightenmentrs koanthetruth srckoansthetruthrs test fn thetruth asserttrue cargo run gives me what I expect to see cargo run Compiling koans v fileUserssethCodePublicrustkoans Finished dev unoptimized debuginfo targets in s Running targetdebugkoans running test test pathtoenlightenmentthetruth ok test result ok passed failed ignored measured filtered out Ahead of you lies addition Eternity lies ahead of us and behind Your path is not yet finished But immediately running cargo run again I succeed unexpectedly cargo run Finished dev unoptimized debuginfo targets in s Running targetdebugkoans running test test pathtoenlightenmentthetruth ok test result ok passed failed ignored measured filtered out Ahead of you lies boolean Eternity lies ahead of us and behind Your path is not yet finished I note that theres still only one test and its for thetruth What happened to addition Another cargo run yields both addition and booleans cargo run Finished dev unoptimized debuginfo targets in s Running targetdebugkoans error E cannot find value in this scope srckoansadditionrs asserteq not found in this scope error E cannot find value in this scope srckoansbooleanrs assertStuff not found in this scope error E cannot find value in this scope srckoansbooleanrs assertnum not found in this scope error aborting due to previous errors For more information about this error try rustc explain E To learn more run the command again with verbose Meditate on your approach and return Mountains are merely mountains A fun fact is that I can restore the invalid condition at will echo koanthetruth srcpathtoenlightenmentrs cargo run cargo run Ahead of you lies addition Eternity lies ahead of us and behind Your path is not yet finished Ahead of you lies boolean Eternity lies ahead of us and behind Your path is not yet finished And it seems like the path is working like it should cargo run Finished dev unoptimized debuginfo targets in s Running targetdebugkoans running test test pathtoenlightenmentthetruth ok test result ok passed failed ignored measured filtered out Ahead of you lies addition Eternity lies ahead of us and behind Your path is not yet finished cat srcpathtoenlightenmentrs koanthetruth koanaddition Whats extra neat about this situation is that its quite stable until I modify any of the files either by completing the addition koan or even so much as a touch which breaks the spell for i in do cargo test q devnull done cargo test q running test test pathtoenlightenmentthetruth ok test result ok passed failed ignored measured filtered out touch srcmainrs cargo run Compiling koans v fileUserssethCodePublicrustkoans Finished dev unoptimized debuginfo targets in s Running targetdebugkoans error E cannot find value in this scope I dont know if this is related to but I am running a very recent version of rust cargo version cargo a d rustc version rustc aa ca Do you think you could point me in the right direction This behavior feels like a cargo bug but I might be missing something obvious Oh and I wanted to be sure to say thank you for such a fun intro to the language Changes should be minor such as let num i I was confused if it was a test or somehow a helper function