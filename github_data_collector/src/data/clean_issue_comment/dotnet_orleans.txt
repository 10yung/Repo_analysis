When doing an incremental build the build targets file generates a hash of the CodeGenInputs files and checks whether it has changed only rebuilding the orleansgcs file if it hash Unfortunately these lines Hash ItemsToHashOrleansCodeGenInputs Output TaskParameterHashResult PropertyNameOrleansUpdatedInputCacheContents Hash generate a hash of the filenames not the contents So changing a content doesnt cause a regeneration of the orleansgcs file and a subsequent likely failed build in UpdatePrimary method PrimaryBasedLogViewAdaptorcs line there is NotifyViewChangesref version writeResult private methodline this method will call HostOnViewChangedtentativeChanged confirmedChanged and it will trigger OnStateChanged method then HostOnViewChangedfalse trueline it will trigger OnStateChanged method again Whats the meaning of this design If I want to trigger only one notification for an event what should I do In Release build Rebuild Run Make a chain in say my interfaces assembly Run OK Switch to debug Run Build errors as other assemblies arent seeing the change in the interfaces assembly Rebuild Run OK I just migrated a project from Orleans to Orleans In a grain I branch off some tasks and await them later which produces myriads of log messages I simply can reproduce this issue by changing the Hello World project located here Just replace the code of HelloGraincs in project HelloWorldGrains with the following snippet csharp using SystemCollectionsGeneric using SystemThreadingTasks using HelloWorldInterfaces using MicrosoftExtensionsLogging using Orleans using OrleansConcurrency namespace HelloWorldGrains summary Orleans grain implementation class HelloGrain summary Reentrant public class HelloGrain Grain IHello private readonly ILogger logger public HelloGrainILoggerHelloGrain logger thislogger logger public async Taskstring SayHellostring greeting thisloggerLogInformationSayHello message received greeting greeting var anotherGrain thisGrainFactoryGetGrainIAnotherGrain var tasks new ListTask for int i i i tasksAddanotherGrainDoSomething await TaskWhenAlltasks thisloggerLogInformationSayHello message processed greeting greeting return You said greeting I say Hello public interface IAnotherGrain IGrainWithIntegerKey Task DoSomething Reentrant public class AnotherGrain Grain IAnotherGrain public Task DoSomething return TaskCompletedTask Then run the silo and the client Here is an extract of the log that is written to the console window text info OrleansRuntimeCatalog Tried to create a duplicate activation S grnBE DD E f e but well use S grnBE DD E a b b instead GrainInstanceType is HelloWorldGrainsAnotherGrain Primary Directory partition for this grain is S Full activation address is ActivationAddress S grnBE DD E f e Full GrainId GrainId grnBE DD E ffffffbe dd e xE C D B IdCategory Grain BaseTypeCode xBE DD E PrimaryKey x UniformHashCode xE C D B Full ActivationId ec c f d a a f f e We have messages to forward info OrleansRuntimeDispatcher Forwarding requests destined for address S grnBE DD E f e to address S grnBE DD E a b b after Duplicate activation info OrleansRuntimeDispatcher Trying to forward after Duplicate activation ForwardCount OldAddress S grnBE DD E f e ForwardingAddress S grnBE DD E a b b Message NewPlacement Request S grnF D a e S grnBE DD E f e Exception null info OrleansRuntimeCatalog Tried to create a duplicate activation S grnBE DD E c a af but well use S grnBE DD E a b b instead GrainInstanceType is HelloWorldGrainsAnotherGrain Primary Directory partition for this grain is S Full activation address is ActivationAddress S grnBE DD E c a af Full GrainId GrainId grnBE DD E ffffffbe dd e xE C D B IdCategory Grain BaseTypeCode xBE DD E PrimaryKey x UniformHashCode xE C D B Full ActivationId b c ba c bc dc c a af We have messages to forward info OrleansRuntimeDispatcher Forwarding requests destined for address S grnBE DD E c a af to address S grnBE DD E a b b after Duplicate activation info OrleansRuntimeDispatcher Trying to forward after Duplicate activation ForwardCount OldAddress S grnBE DD E c a af ForwardingAddress S grnBE DD E a b b Message NewPlacement Request S grnF D a e S grnBE DD E c a af Exception null info OrleansRuntimeCatalog Tried to create a duplicate activation S grnBE DD E b b but well use S grnBE DD E a b b instead GrainInstanceType is HelloWorldGrainsAnotherGrain Primary Directory partition for this grain is S Full activation address is ActivationAddress S grnBE DD E b b Full GrainId GrainId grnBE DD E ffffffbe dd e xE C D B IdCategory Grain BaseTypeCode xBE DD E PrimaryKey x UniformHashCode xE C D B Full ActivationId ed b ce e b b We have messages to forward info OrleansRuntimeDispatcher Forwarding requests destined for address S grnBE DD E b b to address S grnBE DD E a b b after Duplicate activation What is happening here Is there something wrong with my task branch off approach Orleans did not write those log messages Requirement Single instance of grain available locally on every node Single instance of grain for given key locally Lets say if there are tenants then there should be different instances of this grain and each of them addressable using the GUID string key of te tenant This grain has a Timer to do some work Also registers itself as a Subscriber IGrainObserver for changes from other grain Can you suggest if there is already a placement strategy that I can use asis for above requirement What I have tried so far After searching through documentation and code for the correct placement strategy for above grain I thought StatelessWorker or PreferLocalPlacement would work for my case Later I realized PreferLocalPlacement might not always have a local instance of grain on every node Issue with StatelessWorker I can see that StatelessWorker creates one local instance of the grain When I used made grain as StatelessWroker it ran into LongRunning task issue cs fail OrleansThreadingThreadPoolExecutor Work item WorkItemWorkItemGroupName Activation S grnBDB C edd a f e GrainTypeCommonTelemetryTracingTracer PlacementStatelessWorkerPlacement WorkGroupStatusRunning Executing for WorkItemGroup Details WorkItemGroupName Activation S grnBDB C edd a f e GrainTypeCommonTelemetryTracingTracer PlacementStatelessWorkerPlacement WorkGroupStatusRunning Currently QueuedWorkItems Total EnQueued Total processed Quantum expirations Executing Task Id StatusRunning for TaskRunnerActivationTaskScheduler Queued Detailed SchedulingContext Activation S grnBDB C fca ce f f b cbded edd a ffffffbdb c xC A A f e GrainTypeCommonTelemetryTracingTracer PlacementStatelessWorkerPlacement StateValid NonReentrancyQueueSize EnqueuedOnDispatcher InFlightCount NumRunning IdlenessTimeSpan CollectionAgeLimit has been executing for long time unity client throw execption Cannot find generated GrainReference class for interface OrleansRuntimeIClusterTypeManager Would it be possible for the next release to add the MySQLConnector ADONET Driver support to Orleans MySQLConnector Provider is a drop in replacement for Oracles MySQL Provider but provides true async support rather than the sync over async that Oracles MySQL Provider implements While the namespaces are unchanged to MySqlDataMySqlClient using InvariantNameMySql is not working because the provider is hardcoded to look for MySqlData assembly but MySqlConnector assembly is called MySqlConnector and hence cant be accessed when using the AdoNetInvariantsInvariantNameMySql Due to true lack of async support Oracles MySQL Provider is times slower than similarly setup MSSQL Provider a load test on MSSQL Server does run in Seconds where Oracles MySQL Provider takes minutes and seconds Thrown SystemCollectionsGenericKeyNotFoundException The given key MicrosoftDataSqlClient was not present in the dictionary Stack trace at SystemThrowHelperThrowKeyNotFoundException T T key at SystemCollectionsGenericDictionary getItemTKey key at OrleansClusteringAdoNetStorageDbConstantsStoreGetDbConstantsString invariantName at OrleansClusteringAdoNetStorageDbConstantsStoreSupportsCommandCancellationString adoNetProvider at OrleansClusteringAdoNetStorageRelationalStoragectorString invariantName String connectionString at OrleansClusteringAdoNetStorageRelationalStorageCreateInstanceString invariantName String connectionString at OrleansClusteringAdoNetStorageRelationalOrleansQueriesCreateInstanced MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiter GetResult at OrleansRuntimeMembershipServiceAdoNetClusteringTableInitializeMembershipTabled MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiterGetResult at OrleansRuntimeMembershipServiceMembershipTableManagerStartd MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiterGetResult at OrleansRuntimeMembershipServiceMembershipTableManagercDisplayClass OrleansILifecycleParticipantOrleansRuntimeISiloLifecycleParticipategOnRuntimeGrainServicesStart dMoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiterGetResult at OrleansRuntimeSiloLifecycleSubjectMonitoredObserverOnStartd MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiterGetResult at OrleansLifecycleSubjectOnStartgCallOnStart dMoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at OrleansLifecycleSubjectOnStartd MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiterGetResult at OrleansRuntimeSchedulerAsyncClosureWorkItemExecuted MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiterGetResult at OrleansRuntimeSiloStartAsyncd MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesConfiguredTaskAwaitableConfiguredTaskAwaiterGetResult at OrleansHostingSiloWrapperStartAsyncd MoveNext at SystemRuntimeExceptionServicesExceptionDispatchInfoThrow at SystemRuntimeCompilerServicesTaskAwaiterThrowForNonSuccessTask task at SystemRuntimeCompilerServicesTaskAwaiterHandleNonSuccessAndDebuggerNotificationTask task at SystemRuntimeCompilerServicesTaskAwaiterGetResult at HostProgramMaind MoveNext in C git Test Host Programcsline MicrosoftOrleansCore Version dotnet version 