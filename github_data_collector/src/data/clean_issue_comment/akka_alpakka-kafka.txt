Fixes the internal bookkeeping on the number of outstanding commits in CommittingProducerSinkStageLogic when passthrough messages are passed in Pull Request Checklist x Have you read through the contributor guidelines CONTRIBUTINGmd x Have you signed the Lightbend CLA x Have you updated the documentation x Have you added tests for any changed functionality Purpose Fixes the internal bookkeeping on the number of outstanding commits in CommittingProducerSinkStageLogic when passthrough messages are passed in References References Changes Adds a couple of tests to demonstrate the issue as well as what appears to be the trivial fix Versions used alpakkakafka Expected Behavior When using passthrough messages via ProducerMessagepassThrough in combination with ProducercommittableSink the incoming messages used to passthrough via ProducerMessagepassThrough should be correctly committed in the same way as if a real ProducerMessage was sent through to ProducercommittaleSink Actual Behavior The internal outstanding commit count in CommittingProducerSinkStage is not maintained correctly when passthrough messages without a ProducerRecord are handled which means that the general accounting for how many commits are outstanding breaks This causes the general logic around commit handling to break and results in a stream that doesnt end at all instead it enters a limbo state where it doesnt complete If an exception occurs within the stream the error is not reported correctly or at all and the stream still does not complete The core underlying cause appears to be that the awaitingCommitResult field of CommittingProducerSinkStageLogic does not get incremented for passthrough messages that are processed but it does get decremented in the commit callback for all processed messages ie including passthrough messages This results in awaitingCommitResult having a negative value As all streamending logic is based on waiting until awaitingCommitResult reaches and the awaitingCommitResult can never reach once it is negative the whole stream state is corrupted and the stream fails to complete Reproducible Test Case Ill add a PR that demonstrates the issue as well as a simple fix The Java API createCommittableOffsetBatch requires a list of CommittableOffset where it should allow Committable as the Scala API does in apply Changing this is almost binarycompatible as type parameter for List is not part of the message signature and Committable is wider than CommittableOffset The tests for failed on Travis as the log grows too big This contains a change to reduce logging The original author did not create a separate branch to run the test on Travis I branched the PR into this Purpose Added a test case that shows sometime offsets are skipped during rebalance when multiple consumers belong to same group References References Changes When the submitted test is run multiple times we observed one failure approximately every ten test runs on OS ubuntu LTS cores java version Java HotSpotTM Bit Server VM build b mixed mode Background Context There was a discussion in in which seglo suggested to submit a test to demonstrate that offsets are skipped with a Spec test mytestrunloop txtgz mytestrunloopshtxt Short description When is a good time for Alpakka Kafka to go on and stop supporting Scala Details The last release of Scala was Many Alpakka connectors support Scala and New connectors are built for Scala and only Akka is not available for Scala Apache Kafka will drop Scala Contributors As Alpakka Kafka configured Apaches staging repository since Kafka RC came out you might have the nonfinal jar in your local or team artefact cache Please remove those files now that we reference the final client library To clear you local Ivy cache you may use find ivy name kafkaclients exec rm info akkakafkaTransactionsSourceSpec ABORTED minute seconds info javalangRuntimeException javautilconcurrentTimeoutException info at akkakafkatestkitinternalKafkaContainerClusterstartKafkaContainerClusterjava info at akkakafkatestkitinternalTestcontainersKafkaSpecstartKafkaTestcontainersKafkascala info at akkakafkatestkitinternalTestcontainersKafkaSpecstartKafkaTestcontainersKafkascala info at akkakafkaTransactionsSourceSpecstartKafkaTransactionsSourceSpecscala info at akkakafkatestkitscaladslTestcontainersKafkaPerClassLikesetUpTestcontainersKafkaPerClassLikescala info at akkakafkatestkitscaladslTestcontainersKafkaPerClassLikesetUpTestcontainersKafkaPerClassLikescala info at akkakafkaTransactionsSourceSpecsetUpTransactionsSourceSpecscala info at akkakafkatestkitinternalTestFrameworkInterfaceScalatestbeforeAllTestFrameworkInterfacescala info at akkakafkatestkitinternalTestFrameworkInterfaceScalatestbeforeAllTestFrameworkInterfacescala info at akkakafkatestkitscaladslScalatestKafkaSpecbeforeAllScalatestKafkaSpecscala info at orgscalatestBeforeAndAfterAllliftedTree BeforeAndAfterAllscala info at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala info at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala info at akkakafkascaladslSpecBaseorgscalatestWordSpecLikesuperrunSpecBasescala info at orgscalatestWordSpecLikeanonfunrun WordSpecLikescala info at orgscalatestSuperEnginerunImplEnginescala info at orgscalatestWordSpecLikerunWordSpecLikescala info at orgscalatestWordSpecLikerunWordSpecLikescala info at akkakafkascaladslSpecBaserunSpecBasescala info at orgscalatesttoolsFrameworkorgscalatesttoolsFrameworkrunSuiteFrameworkscala info at orgscalatesttoolsFrameworkScalaTestTaskexecuteFrameworkscala info at sbtForkMainRunlambdarunTest ForkMainjava info at javautilconcurrentFutureTaskrunFutureTaskjava info at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava info at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava info at javalangThreadrunThreadjava info Cause javautilconcurrentTimeoutException info at javautilconcurrentCompletableFuturetimedGetCompletableFuturejava info at javautilconcurrentCompletableFuturegetCompletableFuturejava info at akkakafkatestkitinternalKafkaContainerClusterstartKafkaContainerClusterjava info at akkakafkatestkitinternalTestcontainersKafkaSpecstartKafkaTestcontainersKafkascala info at akkakafkatestkitinternalTestcontainersKafkaSpecstartKafkaTestcontainersKafkascala info at akkakafkaTransactionsSourceSpecstartKafkaTransactionsSourceSpecscala info at akkakafkatestkitscaladslTestcontainersKafkaPerClassLikesetUpTestcontainersKafkaPerClassLikescala info at akkakafkatestkitscaladslTestcontainersKafkaPerClassLikesetUpTestcontainersKafkaPerClassLikescala info at akkakafkaTransactionsSourceSpecsetUpTransactionsSourceSpecscala info at akkakafkatestkitinternalTestFrameworkInterfaceScalatestbeforeAllTestFrameworkInterfacescala info at akkakafkatestkitinternalTestFrameworkInterfaceScalatestbeforeAllTestFrameworkInterfacescala info at akkakafkatestkitscaladslScalatestKafkaSpecbeforeAllScalatestKafkaSpecscala info at orgscalatestBeforeAndAfterAllliftedTree BeforeAndAfterAllscala info at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala info at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala info at akkakafkascaladslSpecBaseorgscalatestWordSpecLikesuperrunSpecBasescala info at orgscalatestWordSpecLikeanonfunrun WordSpecLikescala info at orgscalatestSuperEnginerunImplEnginescala info at orgscalatestWordSpecLikerunWordSpecLikescala info at orgscalatestWordSpecLikerunWordSpecLikescala info at akkakafkascaladslSpecBaserunSpecBasescala info at orgscalatesttoolsFrameworkorgscalatesttoolsFrameworkrunSuiteFrameworkscala info at orgscalatesttoolsFrameworkScalaTestTaskexecuteFrameworkscala info at sbtForkMainRunlambdarunTest ForkMainjava info at javautilconcurrentFutureTaskrunFutureTaskjava info at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava info at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava info at javalangThreadrunThreadjava Versions used akkastreamkafka tested with embeddedkafka and local kafka container Expected Behavior When stopping a transactional source flow the producer should be closed after finishing last transaction Actual Behavior When stopping a transactional sourceflow the producer is closed s after the transaction is finished Relevant logs We can see in the relevant logs that the transaction is finished at with last log been TransactionManager Transition from state ABORTINGTRANSACTION to READY and we have s before Sender Shutdown of Kafka producer IO thread has completed logs PS maybe its related to kafka client 