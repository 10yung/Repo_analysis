p frohoff tst At the moment I have no host to test it Is it possible to manipulate the host from inside of a bocker container or is there isolation by cgroup havent used it before Simple unshare with chroot and proc mounted isnt isolated cgcreate g cgroupsuuid BOCKERCPUSHARE cgset r cpusharesBOCKERCPUSHARE uuid BOCKERMEMLIMIT cgset r memorylimitinbytesBOCKERMEMLIMIT uuid cgexec g cgroupsuuid ip netns exec netnsuuid unshare fmuip mountproc chroot btrfspathuuid binsh c binmount t proc proc proc cmd tee btrfspathuuiduuidlog true ip link del dev veth uuid ip netns del netnsuuid If not that executed inside of a Container will reboot the host echo procsyskernelsysrq echo b procsysrqtrigger Old Docker Registry HTTP API is deprecated Switch to mobys image downloading shell bocker pull does not support public registry cant pull from there anymore The api has switched to v and the v does not seem to work anymore If bridge doesnt exist automatically create it enable IPv forwarding and setup a minimal MASQUERADE rule so the containers can access the external network Details in the individual commit messages This grows the script by lines to lines but allowing most users to not bother using brctl and iptables is probably worth it With this change containers are created monotonically and we can have tens of thousands I simply changed the network to a and am using modulo to fill in the ip address third and fourth octet I then do something similar with the mac address I also added a cleanup command that deletes orphaned network namespaces and interfaces It looks like bocker run bash works but there is no way I can get a prompt Even export PS doesnt work It is not that big of a problem but Im afraid this will just be the tip of the iceberg I was just exploring data mounts and some thing like this unshare m binsh c mount o bindnoexecnosuidnodev varbockershared btrfspathuuidvarwwwdata seems to work well enough for basic host to container mounts Apart from iptables socat is also a excellent option for port forwarding with a simple one liner socat TCPLISTEN fork TCP Ideally uuidgen should be used but in the current implementation this will not work due to interface names being generated based on uuids 