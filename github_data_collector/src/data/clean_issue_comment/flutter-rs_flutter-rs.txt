The main reason for this is to avoid parsing cargo cli flags We currently only have a flutterapptemplate cargoflutter supports flutterdriver now cargo flutter dartmain testdriverappdart drive run Still need to add support to flutterwinit to run in headless mode so the flutterdriver tests can be run in CI sh note D a flutterrs flutterrs target flutter debug deps flutterenginedlllib fatal error LNK invalid or corrupt file cannot read at x E Tracks the status and blocking issues for each platform x Linux MacOS x icu symbols missing in dylib was reported by ea crash on button press in debug mode fails to start in release mode add packaging support to cargoflutter Android handling redrawing and orientation changes it tricky jni is required for locating appso Attaching the javavm to a thread crashes x linuxandroid and i linuxandroid fail to link with engine on ci Windows x building engine for windows flutterrs fails to link agains flutterenginedlllib add packaging support to cargoflutter iOS x Creating bindings for flutterenginesys fails possibly related to x copypasta needs to be ported to ios add packaging support to cargoflutter Can anyone guide me on the approach to plugins For example I want to attempt to make a video player that uses flutter rs that works in desktop and mobile and web using the same rust code I saw that winit replaces glfw and so this will make desktop and mobile unified But for video encode and decode I am not sure what cross platform rusty libs are out there I also want to use an approach where the player encode decode and networking runs in a background app aka a service and uses a binary buffer to output input the frames audio to the foreground app in flutter So then on each OS I will need to use IPC The reason is because I need the video to keep running even if the user switches applications I dont know if this is an issue on other platform or not but in macOS when you resize the window it flush black then it render so its like there is no mechanism that resize the flutter content dynamically so it feel more natural If you take a look to featherapps their application flush black less when resizing Thats the behavior we suppose to get 