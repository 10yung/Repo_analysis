Hi When enabling serdetransport feature with version grabbed from cratesio tarpc wont compile with error message specifying Serializer and Deserializer being not defined But if pulling tarpc from with git and tag tarpc git tag v features full Tarpc compiles and runs correctly Maybe version on cratesio being outdated Tokio now has support for spawning Send futures This was removed in and can be reintroduced once hits stable there are two different pieces here The example service was showing a way of starting the server thats probably illadvised in particular using bufferunordered instead of tokiospawn will lead to much worse performance I also modified the example client to spin up a pool of connections and properly load test the service if this isnt desirable it might not be I can put it behind an optional argument load and go back to the previous behavior when no argument is given I changed the codegen to emit less bizarre Rust In particular I removed the templating over C tarpcclientTransport in the client because when theres an equality constraint thats not actually a generic Title says it all It would be great to have multiple instances of a service and a client can send requests to them all I imagine it would need to be coupled with exponential backoff and some kind of dynamic discovery Are you open to funding to implement this Tokios channel is truly bounded whereas futuresrs channels have a slot reserved for each clone of the sender Github page for this repository returns google github iotarpc Technically nonstatic requests are supported today but its difficult to reference them in a trait item if the trait isnt parameterized by the lifetime More generally it may be worth supporting type parameters on the declared traits here is the code Copyright Google LLC Use of this source code is governed by an MITstyle license that can be found in the LICENSE file or at featureasyncawait use futures futureself Ready prelude use rpc client context serverBaseChannel Channel use stdio This is the service definition It looks a lot like a trait definition It defines one RPC hello which takes one arg name and returns a String tarpcservice pub trait World async fn helloname String String This is the type that implements the generated World trait It is the business logic and is used to start the server deriveClone struct HelloServer impl World for HelloServer Each defined rpc generates two items in the trait a fn that serves the RPC and an associated type representing the future output by the fn type HelloFut ReadyString fn helloself contextContext name String SelfHelloFut futurereadyformatHello name tokiomain async fn main ioResult bincodetransport is provided by the associated crate bincodetransport It makes it easy to start up a serdepowered bincode serialization strategy over TCP let mut transport bincodetransportlisten parseunwrap let addr transportlocaladdr let server async move For this example were just going to wait for one connection let client transportnextawaitunwrapunwrap Channel is a trait representing a serverside connection It is a trait to allow for some channels to be instrumented for example to track the number of open connections BaseChannel is the most basic channel simply wrapping a transport with no added functionality BaseChannelwithdefaultsclient serveworld is generated by the tarpcservice attribute It takes as input any type implementing the generated World trait respondwithHelloServerserve execute await tokiospawnserver let transport bincodetransportconnect addrawait WorldClient is generated by the tarpcservice attribute It has a constructor new that takes a config and any Transport as input let mut client WorldClientnewclientConfigdefault transportspawn The client has an RPC method for each RPC defined in the annotated trait It takes the same args as defined with the addition of a Context which is always the first arg The Context specifies a deadline and trace information which can be helpful in debugging requests let hello clienthellocontextcurrent Stimtostringawait eprintln hello Ok and here is the error Compiling tarpcdemo v homequranSourceCodetarpcdemo error E trait fns cannot be declared async srcmainrs async fn helloname String String error E failed to resolve use of undeclared type or module rpc srcmainrs use rpc use of undeclared type or module rpc error E unresolved import rpc srcmainrs use rpc use of undeclared type or module rpc error E failed to resolve use of undeclared type or module tarpc srcmainrs tarpcservice use of undeclared type or module tarpc error E type HelloFut is not a member of trait World srcmainrs type HelloFut ReadyString not a member of trait World error E failed to resolve use of undeclared type or module bincodetransport srcmainrs let mut transport bincodetransportlisten parseunwrap use of undeclared type or module bincodetransport error E failed to resolve use of undeclared type or module BaseChannel srcmainrs BaseChannelwithdefaultsclient use of undeclared type or module BaseChannel error E failed to resolve use of undeclared type or module bincodetransport srcmainrs let transport bincodetransportconnect addrawait use of undeclared type or module bincodetransport error E failed to resolve use of undeclared type or module WorldClient srcmainrs let mut client WorldClientnewclientConfigdefault transportspawn use of undeclared type or module WorldClient warning unused imports BaseChannel Channel srcmainrs serverBaseChannel Channel note warnunusedimports on by default error E no method named serve found for type HelloServer in the current scope srcmainrs struct HelloServer method serve not found for this respondwithHelloServerserve error E associated type HelloFut not found for Self srcmainrs fn helloself contextContext name String SelfHelloFut associated type HelloFut not found error aborting due to previous errors Some errors have detailed explanations E E E E E For more information about an error try rustc explain E error Could not compile tarpcdemo To learn more run the command again with verbose 