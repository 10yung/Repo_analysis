The author and extasync extension disappeared for unknown reasons which is very sad Thanks to others the fork is available kelunik is there still a plan to implement the rd version with extasync support Here are some mentions about rd version plans Thanks I cannot upgrade from Amp due to intermittent stability issues with and above The relevant change was a complete rewrite of TimerQueue in that minor version To be clear this is a somewhat rare bug that rears its head once every operations or so those operations do not need to occur on the same thread or in the same job its an independent probability Ive captured the output of a job where this has occurred for reference and posterity This was run on PHP but it seems to affect all PHP versions outputtxt To be clear this absolutely never happens on Amp That version is completely stable which is why I cannot justify upgrading any further as stability is paramount When running the test suite of eventstoreclient Im always getting this segfault but not always on the same test case and if the test case is tested seperately its green So I cannot reproduce a single failing test but only that the test suite itself somehow fails to pass the tests php srcunixcorec uviostop Assertion loopwatchers wfd w failed abort core dumped vendorbinphpunit excludeignore testdox vendorbinphpunit excludeignore testdox s user s system cpu total Given what I could find about this on google libuv source code fe I have no idea where this can come from For each test case I create a new event store connection via TCP protocol using Amp Socket connect As logger another source where something could read write a NullLogger is used during the tests Do you have any idea where I can look at System Ubuntu PHP uv libuv eoannow amd installedautomatic via Ubuntus apt see also I just noticed that my tests with lowest dependencies are much quicker than regular one and troubleshooted this to amp Relates to I spent some hours today debugging why do my loops hang There are numerous occasions when streamselect does not work Instead of throwing the error loop is going forever because for some unknown reason you throw only for one single type of error Example php Looprunfunction stream fopenphpmemory rwb LooponWritablestream function throw new ExceptionI should have been thrown fwritestream wat Example php Looprunfunction stream tmpfile streamfilterappendstream stringrot STREAMFILTERWRITE LooponWritablestream function throw new ExceptionI should have been thrown fwritestream wat Hereby I request you to stop ignoring streamselect errors as it leads to hard to debug issues Hello I welcome you to chip in to as this is something which can affect amp core Current PHP master using sapiwindowssetctrlhandler and streams blocks for indifinite time Reproduction is as simple as php sapiwindowssetctrlhandlerfunction exit server Amp Socket listenlocalhost Amp Promise waitserveraccept When using coroutines which do not work on streams sockets or proactively deferring themselves via yield new Delayed or sth then a coroutine may block the loop even though it looks like wonderful async code The reason is that the coroutine is looping over the generator without ever returning the control to the loop Of course this can be handled by application code but this is hard to maintain debug not cooperative Are you aware of this Have you ever discussed this I ran into situations where I handle lots of promises and when they are not resolved quick enough the server runs out of memory My idea is to add a kind of PromisePool similar to what we have as ConnectionPool within Amp Sql Thoughts PHP Warning pcntlsignaldispatch has been disabled for security reasons in vendoramphpamplibLoopNativeDriverphp on line 