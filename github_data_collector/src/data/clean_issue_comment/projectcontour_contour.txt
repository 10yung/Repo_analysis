The check for spelling errors is missing the sitedocs directories and arent being checked for errors Fixes by updating docs for the following sections Getting started guides TLS Configuration Deployment Guides AWS NLB Guides What steps did you take and what happened When converting an HTTPProxy object to an unstructured object and then performing a DeepCopy on that unstructured object a panic is experienced The following code can be used to replicate go package main import v githubcomprojectcontourcontourapisprojectcontourv metav k sioapimachinerypkgapismetav k sioapimachinerypkgapismetav unstructured k sioapimachinerypkgruntime func main proxy v HTTPProxy TypeMeta metav TypeMeta Kind HTTPProxy APIVersion v SchemeGroupVersionString Spec v HTTPProxySpec Routes v Route Services v Service Weight uint u err runtimeDefaultUnstructuredConverterToUnstructuredproxyDeepCopyObject if err nil panicerr unstr unstructuredUnstructuredObjectu unstrDeepCopy When run results in panic cannot deep copy uint What did you expect to happen For the above code to run without issue Anything else you would like to add I believe this is occurring due to the use of uint for the weight and other fields in the HTTPProxy struct Ive manually changed the weight field in the Service struct from uint to a signed integer and the code above runs fine Works go Weight defines percentage of traffic to balance traffic optional Weight int jsonweightomitempty Looking at the Kubernetes external API codebase no unsigned integers are used in the public structs most likely for this reason Environment Contour version v Kubernetes version use kubectl version v Kubernetes installer version NA Cloud provider or hardware configuration NA OS eg from etcosrelease NA contour certgen always generates a Contour certificate whose subject is contour This means that when the xDS client connects it needs to expect the contour subject but that wont always happen depending on how the operator is deploying Contour For example could be useful to deploy multiple Contours with different service names eg contourinternal and contourexternal In this case we want to generate separate certificates for each Contour and specify the subject names rootenvoyexternalsrbsm curl v H Host contourexternal cacert cacacertpem cert certstlscrt key certstlskey Trying Connected to contourexternal port found certificates in cacacertpem found certificates in etcsslcerts ALPN offering http SSL connection using TLS ECDHERSAAES GCMSHA server certificate verification OK server certificate status verification SKIPPED SSL certificate subject name contour does not match target host name contourexternal Closing connection curl SSL certificate subject name contour does not match target host name contourexternal So it would be useful to add a flag to contour certgen to specify the subject name of the Contour certificate This is a nicetohave since AFAICT the envoy xDS client never checks the server certificates subject name Updates Strawman design for supporting the ingressstatusloadbalancer field Signedoffby Dave Cheney davecheneynet Updates Signedoffby Nick Young ynickvmwarecom As part of reviewing how to integrate the serviceapi CRDs into Contour I noticed that our code for interacting with Kubernetes is very custom and there are now better options available This issue is to cover moving Contour from Informers to using the Kubebuilder controllerruntime library First up a design proposal for us to discuss whether this is even a good idea and how it might be done In the deployment options documentation we see the following Envoy will listen directly on port on each host that it is running This is best paired with a DaemonSet perhaps paired with Node affinity to ensure that a single instance of Contour runs on each Node There are issues with this The default deployment YAML has envoy listening on ports and The default deployment YAML places envoy in a daemonset not contour which isnt necessary with split deployment As part of the work Im doing with the serviceapi subproject of SIGNetwork were building new CRDs which will serve as the definition of what the next version of Ingress needs Contour will need to support these so this issue is to cover figuring out how to wire up the new types into Contour and put them behind an experimental flag so that we can get this wiring in and update the types as they are worked on That will allow us to have a headstart on implementing them as they get closer to being finalised Putting the usage of them behind an experimental feature flag should insulate the rest of the project from these concerns hopefully Comments on the approach welcomed The quickstart and getting started guides need some updating Id like to have separate breakouts as to how to deploy contour to EKS GKE and AKS as well as Kind Today theres a smattering of AWS and other docs intermingled and Id like to make them clear depending on the environment folks are deploying Contour into 