 Requires to be merged first Is a follow up to Follow up to This PR removes dead code from the internals of the stream handler We should probably also deprecate defaultcabundle in and remove it in since its only relevant for PHP code however people probably blanket call it anyway like composer does in its internals not guzzles implementation but their own Follow up to Follow up to Guzzle versions affected PHP version cURL version Description Hey there I am experiencing some memory leaks when using guzzle to asynchronously fetch multiple JSON documents and parse them into a collection Ive setup a project where I created a snippet to reproduce that behavior Would love if someone can give me either a shot if this is really guzzle related or if not how to profile that script to find the memory leak Thanks in advance How to reproduce Check out and run the script Possible Solution Additional context Guzzle versions affected and beta Probably earlier versions too PHP version and cURL version and Description When using Guzzles stream config option to read from a remote HTTP stream Guzzle exhibits a substantial memory leak starting after it has already downloaded MB of the streams contents The rate of memory leakage appears to grow in proportion to rate of data being downloaded from the stream The leak occurs in the following environments Ive tested with Alpine Linux PHP cURL Guzzle Alpine Linux PHP cURL Guzzle Alpine Linux PHP cURL Guzzle Alpine Linux PHP cURL Guzzle and Guzzle beta Ubuntu Linux PHP cURL Guzzle Mac OS Homebrew PHP cURL Guzzle and Guzzle beta It does NOT occur in the following environments Alpine Linux PHP cURL Guzzle Mac OS Apple factoryinstalled PHP cURL Guzzle or Guzzle beta With the exception of the OSX Homebrew install listed above in all environments Im using the native PHP which comes by default with that OSs package manager These binaries are not customized by myself in any way nor are any unofficial package channels being used The amount of memory consumed also jumps by MB at two different intervals prior to when the leak starts It only happens twice which is tolerable But still its unexplained These jumps only occur in the environments which exhibit the leak They dont occur in the two environments which dont exhibit the leak How to reproduce Run the following script assuming Guzzle is already installed via Composer php requireonce DIR vendorautoloadphp guzzle new GuzzleHttp Client stream guzzleget stream true getBody downloaded while streameof line streamread downloaded strlenline dl numberformatdownloaded mem numberformatmemorygetusagetrue echo dategis downloaded dl MB mem mem MB n The output of this script is very similar in every case when the leak is occurring Heres a sample from my aforementioned Mac OS Homebrew environment downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB downloaded MB mem MB Note that this script is discarding the contents of whats being downloaded so its memory usage should be constant over time In the two environment where the leak doesnt occur memory usage remains at MB the entire time the script is running But with the leak it jumps first to MB for awhile and then to right as the memory beings growing with every additional chunk of the stream thats downloaded Possible Solution Is Guzzle autodetecting PHP and later and behaving differently than with and below Or is it autodetecting a function or some other language feature that was introduced in But I cant explain why OSX Catalina with its native PHP binary works just fine But every other combination of OS with PHP and Guzzle exhibits the leak Additional context The leak does not appear to depend on the content type of the stream My main use case is Twitters GNIP PowerTrack stream which is plain text But since thats behind an auth mechanism I cant share the details so my test script above is using the publicly available KBPS stream from wwwnprorg which is an MPEG stream The leak occurs with both streams The leak also doesnt seem to be affected by the number of bytes requested per chunk in the call to streamread I also tried inputting values of and but with no change in behavior This depends on which in turn depends on 