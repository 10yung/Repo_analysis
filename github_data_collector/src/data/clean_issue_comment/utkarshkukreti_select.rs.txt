This PR adds support for matching text Usecase Find the correct table to iteratore over cells on websites without attributes eg htmlbody tabletrtdFirst Tabletdtrtrtdtdtrtable tabletrtdSecond Tabletdtrtrtdimportant celltdtrtable bodyhtml Before you would need to rely on the nth table child of body but that breaks if the order changes Sorry Im just learning rust and I would like to know how to feed an http response stream to the html ever parser How would you implement that instead of reading the hole response as a string and then parsing it For example Try to find pwanted datap node by a related position with aanchor node rust use selectdocumentDocument use selectpredicateAttr fn main let html r pbalabalap h idaanchorTitleh pwanted datap let document Documentfromhtml let h documentfindAttrid aanchornextunwrap asserteqwanted data h nextunwrapnextunwraptext Please notice I use twice nextunwrap to skip newline space node This approach look like very fragile especially consider the site maintainer may drop the newline node or did some other trivial tweaks I can verify all nodes after each next called manually until hit what I want but maybe It worth a elegant interface to find a sibling node like findsiblingforwardNamep Or maybe some document I missed please let me know D Firstly thank you very much for contributing this library This nitpick is not related to your code quality jokeIts not what you said its how you called itjoke As far as I can find theres this unnamed spec The hyphen is used by nearly all programmers for naming conventions for multipleword identifiers selectrs often gets rendered as selectrs instead of plain text because its a valid IETF DNS address This happens for example when not forcing users to put optional code markers around project names in markdown like how I didnt put them around markdown And for another programming environments example this implementation as spec inspiration also breaks when using special characters in names Right now when I just try text on a node I get its text but it lacks newlines where would be line breaks Is there a way to add them Currently I could take html then strip it out of all tags but br manually then swap them out for n but I think there should be a built in way For example it would be very useful to search nodes with some attributes values matching regex eg for node in documentfindAttrclass Regexnewr contentunwrap do something In beautifulsoup a html parsing library written in python theres a method called selectcssselectorstr its incredibly useful for html parsing if you have knowledge of css selectors For example to print the question titles on stackoverflow import requests from bs import BeautifulSoup html requestsget soup BeautifulSouphtml htmlparser titleselements soupselectdivquestions divsummary h a titletext eltext for el in titleselements printtitletext This prints What are the differences between Rusts String and str Why are explicit lifetimes needed in Rust Why doesnt println work in Rust unit tests How to access command line parameters How do I print the type of a variable in Rust and many more The equivalent selector right now would be something like let iterator docfindAndNamediv Attrid questions descendantAndNamediv Classsummary childNameh childNamea Would you be open to accepting css selectors as strings or is that out of the scope of this library Hi In rust cookbook we are using your excellent crate in several places when presenting an idiomatic approach to html querying basic web scraping The only problem is that the select crate is largely undocumented and we are aiming for used crates to have similar level of documentation to build the feeling of extended std for our users TLNR Would you be open to extending the documentation or external contributors working on the docs Implements Changes Adds Nodeclasses which returns an iterator and Nodeid for convenience Documents which CSS selectors are equivalent to which predicates Renames Attrs to HasAttr breaking change can be removed if desired Adds Nothing predicate the opposite of Any Adds Id predicate which calls Nodeid Adds Root predicate that ensures that the node has no parents Adds Empty predicate which allows comment children to be compatible with CSS Adds AttrMatches predicate for convenience it takes a string for an attribute and a function to test the string Adds AttrContains AttrStartsWith and AttrEndsWith which call the relevant string functions Adds AttrContainsWord and AttrLang which are kind of esoteric but are equivalent to the attrword and attrlang selectors Once all of the CSS selectors are added we can potentially allow parsing str BoxPredicate Currently just to find a single element requires a bit of boilerplate Consider adding a a findone method that returns OptionNode