Is the await keyword purposely translated to yield or what is the relationship between them for the sake of dangerjs When I use await in my dangerfile in order to access the promise returned by gitstructuredDiffForFile if I get an error the await in my code always appears as a yield statement For example js const tables await asyncFuncThatCallsStructuredDiffForFilearg Becomes var tables yield asyncFuncThatCallsStructuredDiffForFilearg If its relevant the error I was looking at is an SyntaxError Unexpected identifier which points to the token directly after the yield danger local only computes the differences between commits and does not consider changes not yet committed If I modify a file Id like to be able to locally check it before committing it so that my local commits are compliant When running danger local the list of modified and created files is relative to the git folder Which makes it hard to actually read the contents of the files need to detect what the path of the git repo is or even execute other commands if you are not executing danger from the top level folder Either adding a new field to the git section with the path of the repo or making the paths relative to the current directory would solve the issue For example in my repo when running danger local from the foo directory I get the following output js git fileMatch Function modifiedfiles packagelockjson packagejson createdfiles README dangerfilelocalts foodangerfilelocalts deletedfiles commits Object diffForFile Function diffForFile structuredDiffForFile Function structuredDiffForFile JSONPatchForFile Function JSONPatchForFile JSONDiffForFile Function JSONDiffForFile linesOfCode Function linesOfCode github null bitbucketserver bitbucketcloud gitlab undefined utils sentence Function sentence href Function href Hello Danger is trying to call the Gitlab rest api using the project name while gitlab now only accepts the project ID as you can see in the documentation Here is the error i get dangerswift ci Error HTTPError Not Found at fn snapshotdangerjsnodemoduleskyumdjs at processtickCallback internalprocessnexttickjs name HTTPError response Response size timeout SymbolBody internals body PassThrough disturbed true error null SymbolResponse internals url status statusText Not Found headers Headers description Project Not Found Report What did you do I invoked npx danger local within a Nodejs project specifying a dangerfilejs that lives outside of the project Reproduction case binbash set eu rm rf project tool mkdir tool cd tool cat dangerfilejs DANGERFILE try consolelogrequirearrayfirst consolelogrequirearraylast catche consolelogERROR e DANGERFILE mkdir project cd project npm init y devnull npm i danger arrayfirst arraylast git init git add packagejson packagelockjson git commit m NPM installed git checkout b test cp tooldangerfilejs git add dangerfilejs git commit m Initial dangerfile echo Running Danger in project cd project npx danger local true echo Running Danger in project using external Dangerfile cd project npx danger local d tooldangerfilejs true What did you expect to happen Ideally danger should evaluate an external Dangerfile as if it lived within the project directory from which danger was invoked Alternatively it would be desirable to have a commandline parameter that lets me specify the directory that danger considers to be the project directory NOTE dangerimportdangerfile seemed like it might be a solution for this problem but I could not get it to work from within dangerjs The documentation is pretty sparse and unclear so Im not sure if I was doing something wrong What happened instead Danger was not able to see the nodemodules in the directory from which I invoked danger Running Danger in project Function arrayFirst Function last Danger passed review received no feedback Running Danger in project using external Dangerfile ERROR Error Cannot find module arrayfirst Your Environment Which CI are you running on local Are you running the latest version of Danger What is your Dangerfile try consolelogrequirearrayfirst consolelogrequirearraylast catche consolelogERROR e I want danger to have option nopublishcheck that will prevent danger from adding status to pull request because I have one already This is restriction of our enterprise CI and danger works fine there because it has option to pass external ci provider There is another approach to this issue we can allow client to provide custom platform through externalplatform option and it will a lot of user cases What do you think Summary While trying to set up dangerswift I ran DEBUG dangerswift pr Which gave the following error Error TypeError Cannot read property fullname of null at Objectutils as default snapshotdangerjsdistributionplatformsgithubGitHubUtilsjs at ObjectexportsgithubJSONToGitHubDSL snapshotdangerjsdistributionplatformsGitHubjs at Objectanonymous snapshotdangerjsdistributionrunnerjsonToDSLjs at step snapshotdangerjsdistributionrunnerjsonToDSLjs at Objectf as next snapshotdangerjsdistributionrunnerjsonToDSLjs at awaiter snapshotdangerjsdistributionrunnerjsonToDSLjs at new Promise anonymous at awaiter snapshotdangerjsdistributionrunnerjsonToDSLjs at ObjectexportsjsonToDSL snapshotdangerjsdistributionrunnerjsonToDSLjs at Objectanonymous snapshotdangerjsdistributioncommandsutilsrunDangerSubprocessjs Setup brew install dangertapdangerswift Dangerfileswift import Danger let danger Danger let editedFiles dangergitmodifiedFiles dangergitcreatedFiles messageThese files have changed editedFilesjoined Full Debug Output DEBUG dangerswift pr Launching Danger Swift pr v Finding out where the danger executable is Running usrlocalbindanger pr process dangerswift passURLForDSL Starting Danger PR on dangerswift You dont have a DANGERGITHUBAPITOKEN set up this is optional but TBH you want to do this Check out dangerGitHubChecks Not using the checks API for GitHub ms dangerpr running process separated Danger ms dangerprocessrunner Debug mode on for Danger v ms dangerprocessrunner Starting subprocess run ms dangerGitHubAPI Sending ContentType applicationjson Accept applicationvndgithubv diff ms dangerGitHubAPI getPullRequestCommits Sending pull request commit request for first page ms dangerGitHubAPI getPullRequestCommits Request url generated reposdangerswiftpulls commits ms dangerGitHubAPI Sending ContentType applicationjson ms dangerGitHubAPI getNextPageFromLinkHeader Given response does not contain link header for pagination ms dangerGitHubAPI Sending ContentType applicationjson ms dangerGitHubAPI Sending ContentType applicationjson ms dangerGitHubAPI getPullRequestCommits Sending pull request commit request for first page ms dangerGitHubAPI getPullRequestCommits Request url generated reposdangerswiftpulls commits ms dangerGitHubAPI Sending ContentType applicationjson ms dangerGitHubAPI getNextPageFromLinkHeader Given response does not contain link header for pagination ms dangerGitHubAPI Sending ContentType applicationjson Accept applicationvndgithubv json ms dangerGitHubAPI Sending ContentType applicationjson Accept applicationvndgithubv json ms dangerprocessrunner dangerJSONDSL dangerprocessrunner git dangerprocessrunner modifiedfiles Array dangerprocessrunner createdfiles Array dangerprocessrunner deletedfiles dangerprocessrunner commits Array dangerprocessrunner github dangerprocessrunner issue Object dangerprocessrunner pr Object dangerprocessrunner commits Array dangerprocessrunner reviews Array dangerprocessrunner requestedreviewers Object dangerprocessrunner thisPR Object dangerprocessrunner settings github Object cliArgs Object s dangerprocessrunner Preparing to run dangerswift ms dangerrunDangerSubprocess Running subprocess dangerswift ms dangerrunDangerSubprocess Started passing in STDIN via the URL dangerdslvarfolderstwmbrpz ds v xy qhqy zzm gqTdangerdsljson ms dangerrunDangerSubprocess Passed DSL in via STDIN ms Ran with varfolderstwmbrpz ds v xy qhqy zzm gqTtmpdangerfileswift varfolderstwmbrpz ds v xy qhqy zzm gqTdangerdsljson varfolderstwmbrpz ds v xy qhqy zzm gqTdangerresponsejson Decoding the DSL into Swift types ERROR Failed to parse JSON valueNotFoundSwiftKeyedDecodingContainerDangerGitHubRepoCodingKeys SwiftDecodingErrorContextcodingPath CodingKeysstringValue danger intValue nil CodingKeysstringValue github intValue nil CodingKeysstringValue pr intValue nil CodingKeysstringValue head intValue nil CodingKeysstringValue repo intValue nil debugDescription Cannot get keyed decoding container found null value instead underlyingError nil Got URL for JSON varfolderstwmbrpz ds v xy qhqy zzm gqTdangerdsljson Created a temporary file for the Dangerfile DSL at varfolderstwmbrpz ds v xy qhqy zzm gqTdangerdsljson Running Dangerfile at Dangerfileswift Preparing to compile Running usrbinswiftc drivermodeswift L usrlocallibdanger I usrlocallibdanger lDanger varfolderstwmbrpz ds v xy qhqy zzm gqTtmpdangerfileswift varfolderstwmbrpz ds v xy qhqy zzm gqTdangerdsljson varfolderstwmbrpz ds v xy qhqy zzm gqTdangerresponsejson Completed evaluation ERROR Dangerfile eval failed at Dangerfileswift ERROR Could not get the results JSON file at varfolderstwmbrpz ds v xy qhqy zzm gqTdangerresponsejson dangerrunDangerSubprocess child process exited with code ms dangerrunDangerSubprocess Handling fail from subprocess ms dangerjsonToDSL Creating pr DSL from JSON ms Error TypeError Cannot read property fullname of null at Objectutils as default snapshotdangerjsdistributionplatformsgithubGitHubUtilsjs at ObjectexportsgithubJSONToGitHubDSL snapshotdangerjsdistributionplatformsGitHubjs at Objectanonymous snapshotdangerjsdistributionrunnerjsonToDSLjs at step snapshotdangerjsdistributionrunnerjsonToDSLjs at Objectf as next snapshotdangerjsdistributionrunnerjsonToDSLjs at awaiter snapshotdangerjsdistributionrunnerjsonToDSLjs at new Promise anonymous at awaiter snapshotdangerjsdistributionrunnerjsonToDSLjs at ObjectexportsjsonToDSL snapshotdangerjsdistributionrunnerjsonToDSLjs at Objectanonymous snapshotdangerjsdistributioncommandsutilsrunDangerSubprocessjs The import and export statements in dangerdts are preventing the danger DSL from being available in the global scope dangerambientdeclarations This is a known issue in Typescript dts files ambient declarations A potential solution per this comment is to wrap global declarations in a declare global block EDIT This appears to do the trick based on a quick test Heres a minimum set of changes Where should one look in the code in order to attempt addressing this The CIREPONAME env var only contains the project name and not the user organization We are using Codeship Pro Not sure if Basic has different results This causes the API requests such as to fail with status Example Request failed Response message Not Found documentationurl We tried doing a printenv and could not find a Codeship env var which contained the complete name eg OrganizationRepository so Im not sure how to globally fix this We are resorting to overriding the CIREPONAME env var inline when calling danger script Like in other CI workflows I would expect any dangerjs code run in github actions to correctly updatedelete previous comments made by previous builds This currently does not happen resulting in a new comment being created for every run While not functionally blocking it create a rather poor experience because it results in a lot of noise I think Ive identified the issue at these lines It seems that the userID is hardcoded for github actions and always returns the same value rather than looking up the user associated with the current GITHUBTOKEN As a result of the hardcoded id when the API goes to look for previous comments that are created by danger to updatedelete them theres a check on the userid in a filter and because the hard coded will probably never match the actual userid it never gets a list of comments to actually updatedelete Im mot sure if this behavior was intentional or if it was just something that was missed 