Starting with C features a Main method the entry point for an application can be declared as async and can return a Task CC incorrectly triggers stating that this method should be removed because it is unused However you cannot remove the Main method for an application otherwise it would not compile or run Coincidentally if I change the Main method from async Task to just void Main the rule does not get triggered as I would expect csharp static async Task Mainstring args Do something here CodeCracker is not currently considering the using pattern as it ignores the using FileStream f new FileStreamC users jaredpar usingmd statement patternbased using CodeCracker will output a CC even if the field is disposed if using FileStream f new FileStreamC users jaredpar usingmd statements Equivalent to if using FileStream f new FileStreamC users jaredpar usingmd statements Code cracker should not report a cc for this new pattern Bug CodeCracker throws an exception when building code below csharp The code that reproduces the bug public class A IDisposable public void Dispose GCSuppressFinalizethis public class B public static B CreateBA obj return new Bobj public BA obj Obj obj private readonly A Obj public class Test public async static Task ConfigureSmthAsync if new CIsSmth return var a new A var b await TaskRun BCreateBa public class C public C Variable true public bool IsSmth Variable private readonly bool Variable class Program static void Main var test new Test TestConfigureSmthAsyncWait Interesting thing that simple change of if statement removes error csharp public class Test public async static Task ConfigureSmthAsync if new CIsSmth var a new A var b await TaskRun BCreateBa Dont know if it is important but error is not appearing when A is not inherit from IDisposable ConfigureSmthAsync is not async I managed to get call stack of the error SystemArgumentNullException Value cannot be null Parameter name syntax at MicrosoftCodeAnalysisCSharpCSharpSemanticModelCheckSyntaxNodeCSharpSyntaxNode syntax at MicrosoftCodeAnalysisCSharpCSharpSemanticModelGetSymbolInfoExpressionSyntax expression CancellationToken cancellationToken at MicrosoftCodeAnalysisCSharpCSharpExtensionsGetSymbolInfoSemanticModel semanticModel ExpressionSyntax expression CancellationToken cancellationToken at CodeCrackerCSharpUsageDisposableVariableNotDisposedAnalyzercDisplayClass IsReturnedb ExpressionSyntax returnExpression at SystemLinqEnumerableAny TSource IEnumerable source Func predicate at CodeCrackerCSharpUsageDisposableVariableNotDisposedAnalyzerIsReturnedMethodDeclarationSyntax method StatementSyntax statement SemanticModel semanticModel ILocalSymbol identitySymbol at CodeCrackerCSharpUsageDisposableVariableNotDisposedAnalyzerIsDisposedOrAssignedSemanticModel semanticModel StatementSyntax statement ILocalSymbol identitySymbol at CodeCrackerCSharpUsageDisposableVariableNotDisposedAnalyzerAnalyzeObjectCreationSyntaxNodeAnalysisContext context at MicrosoftCodeAnalysisDiagnosticsAnalyzerExecutorc ExecuteSyntaxNodeActionb ValueTuple data at MicrosoftCodeAnalysisDiagnosticsAnalyzerExecutorExecuteAndCatchIfThrowsNoLock TArg DiagnosticAnalyzer analyzer Action analyze TArg argument Nullable info I couldnt find similar bug and I am using last release version of the Code Cracker From NuGet I have only Code Cracker insalled Fixes This PR is fixed the duplication of regions created when the CC diagnostic fix is applied to one or more variable declarations Info delete this section Please see the contributing guide on the contributing section You should notify the maintainers on the issue you are working on before you send a PR Rebase and squash your commits Submit one commit only on top of the branch you are working on master for bug fixes to the stable version vnext to new analyzers and fixers Verify if you pass the definition of done Always reference issue you are fixing see bellow eg Fixes Start your PR description here delete this line too Fixes Fixes What I am doing Visual Studio analyzer extensions can be installed as a vsix extension and a NuGet package Anyone can config the diagnostic severities for both the vsix extension and the NuGet package but he has to add a custom EditorConfig file or a custom ruleset file into the project repository Some of the repositories are not ourselves so we cant add any preference files into the public repositories But if we want to config the severities for the codecracker analyzers what can we do I find that we can do nothing to solve such an issue Only we can do is to make the codecracker analyzers configurable globally So I make this pull request to extract all the diagnostic severities into one manager class and read the users ruleset file from a global path Current progress x Create a configuration class to manage all the severities for all the analyzers Read the users custom ruleset file to apply the configured rulesets Problems Im stuck because I dont know how to read a file from a global file path in a portable project I only know how to do it in a NET Standard project Bug Should not trigger when loop variable used in loop or nonstandard increment csharp public void Test int ints for int j j intsLength j int a ints j int b ints j Current output after fix applied generates uncompilable code csharp public void Test int ints foreach var a in ints int b ints j There are CC warnings for constructor parameters that are passed to base or this constructors See OK NOT OK in comments for whats expected csharp public class Base public Baseint x CC OK After fix applied OK csharp public class Base private readonly int x public Baseint x thisx x Lets create a derived class csharp public class Derived Base public Derivedint x basex CC NOT OK because x is passed to base ctor Another false flag for thisx csharp public class Base private readonly int x public Baseint x thisx x public Baseint x string s thisx CC for x NOT OK for s OK CC incorrectly suggests to make mvc actions static Example csharp HttpPost public string SayHello return hello This is a correct MVC action If you make it static then it will not work as an action So CC should ignore methods with mvc action attributes HttpPost HttpGet etc When using c d a d be bacdf d cc acec a f f build of codecracker in VS on following code c public class Program public static void Main new SystemCollectionsGenericListint It triggers exception during build warning AD Analyzer CodeCrackerCSharpRefactoringPropertyChangedEventArgsUnnecessaryAllocationAnalyzer threw an exception of type SystemInvalidCastException with message Unable to cast object of type MicrosoftCodeAnalysisCSharpSyntaxGenericNameSyntax to type MicrosoftCodeAnalysisCSharpSyntaxIdentifierNameSyntax