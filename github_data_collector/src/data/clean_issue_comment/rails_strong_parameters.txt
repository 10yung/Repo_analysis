 Expected behaviour Expected to return the permitted params ruby paramsrequirepostpermit title body Result title My title body My description Actual behaviour Instead of the expected behaviour i got an empty hash ruby paramsrequirepostpermit title body Result Workarround Adding before array it works ruby paramsrequirepostpermit title body Result title My title body My description System configuration Rails version rails Ruby version ruby p strongparameters version strongparameters Im not getting any exceptions raised for forbidden attributes and mass assignment is still allowed I have done the following Added the strongparameters gem Created initializersstrongparametersrb ActiveRecordBaseclasseval do include ActiveModelForbiddenAttributesProtection end Added configactioncontrolleractiononunpermittedparameters raise for all environments Removed all attraccessible calls from models I was researching on configactioncontrolleractiononunpermittedparameters and couldnt immediately see how I end up with the default setting for eg production that simply ignores unpermitted attributes and filters them out Ive now addressed this in the README hope that its useful I ran into an issue today with nested numbers as keys breaking permit It only breaks if the key is nested If its a toplevel key it works just fine Im using Rails and Ruby Examples broken ruby params ActionControllerParametersnewphotos hello world paramspermitphotos hello photos works ruby params ActionControllerParametersnew hello world paramspermit hello hello world ruby params ActionControllerParametersnewphotos key hello world paramspermitphotos key hello photoskey helloworld Of course renaming your keys is the easy workaround Just thought Id create some documentation around the issue rb ActionControllerParametersnewfoo barrespondtomap false ActionControllerParametersnewfoo barmap do param param end foo bar I have a line in one of my models that looks like this ruby hasmany notes as notable dependent destroy afteradd createinformalnote I am sending a POST request to my Rails endpoint with JSON like this json note text Test note notableid notabletype AnotherModel Rails strongparameters has no problem interpreting this and creating the data However due to the way the JSON request body is structured Rails strongparameters simply just set the id and type fields This results in Rails not picking up on the added association causing my afteradd association callback not to trigger This code works ok ActionControllerParametersnew subjectid quantity permit subjectid quantity subjectid quantity expect number hash key to works ok too but ActionControllerParametersnew subjectid quantity permit subjectid quantity Without the extra steps added to the readme in this commit the migration to Rails instructions will cause ActiveModelMassAssignmentSecurityError to be raised on any model that has had necessary attraccessible declarations removed as the instructions direct because configactiverecordwhitelistattributes true in configapplicationrb which is the default setting requires all models to whitelist massassigned attributes The extra steps added to the readme in this commit make it possible to update and deploy one model at a time which is valuable Im not very familiar with this but it appears that attrprotected works because it signals that the model secures mass assignment with a blacklist and then an empty black list makes all attributes accessible and leaves the responsibility of mass assignment protection to strongparameters More info An alternative to this commit might be to just put an attrprotected with no arguments in ActiveModelForbiddenAttributesProtection but Im not ready to investigate that now This change introduces a way to mark a specific branch of the parameter hash as trusted Using the added StrongParametersANY or allows to mark a value of the hash respectively This functionality can be handy when your controllers already rely on strongparameters and raising of errors is enabled If the parameter hash contains in such a case a parameter value which is completely customizable by the consumer of the controller it might be impossible to predefine keys Relates to I want to be able to delete a nested resource when I get a nested attribute set to nil Currently have an API that lets you manage nested resources The model update logic expects the client to set an explicit nil when it wants to remove one of these related resources For example I have an API that exposes the People in the system Those people have an optional Address To delete the address from a person set the address parameter to nil Everything works fine with the nested address attributes set ruby params ActionControllerParametersnewpeople name Amy Pond address town Leadworth street Cathedral Rd people nameAmy Pond address townLeadworth streetCathedral Rd paramspermitpeople people name address town street people nameAmy Pond address townLeadworth streetCathedral Rd But if the nested attributes is set to nil it gets dropped ruby params ActionControllerParametersnewpeople name Amy Pond address nil people nameAmy Pond addressnil params permitpeople people name address town street people nameAmy Pond people nameAmy Pond This feels like it might be inconsistent because when I permit the scalar address on that same params hash it will retain the nil key ruby params permitpeople people name address people nameAmy Pond address nil Is this the desired behavior or would it be preferred to retain the nil value I havnt looked into implemntation but would be happy to work in a PR if this is a desired behavior 