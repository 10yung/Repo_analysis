This additional info might be helpful for some people that doesnt aware that initializing Date with invalid date string will still returns a Date object So that checking invalid Date with isDate will returns true isDate function only checks if a variable type is Date not check if it the value is valid The current implementation of underscore is returning an invalid answer for js isEqual new NumberNumberMINVALUE expected to be false but was true before the fix Similar to a bug found in Jest This bug has been discovered with the following test property based testing test js import as from underscore import as fc from fastcheck describetoEqual itshould be symmetric fcassert fcproperty fcanything withBoxedValues true fcanything withBoxedValues true a b isEquala b isEqualb a numRuns Please note that such kind of tests are currently used within Jest to avoid future issues This snippet worked for me until I added Typescript and updated the package rooms thisgetAllRoomschainsortByfunction room Room return roomnumber thissortByfunction room Room return roombuildingName thisvalue Code here It takes an array of objects sorts them and returns the sorted array But now it complains that this code does not return a Room or otherwise array of objects Rather it returns a single Room Using values returns a Chainany any which is also not what I need How can I get around this issue I just need a standard array returned Im having trouble getting any answers on underscorejs on stackoverflow so Im just going to ask here How do you display the total number of records in a template In this example how would I display totalNum script typetexttemplate idtemplatePropertyLot eachitemsfunctionitemkeylist div classpopupwrapper div classheader idcountofaddressesspan idcurrNum key span of span idtotalNumspan addresses in this searchdiv div script indexOf NaN NaNtrue Source code array idx item idx Can NaN detection be put in front Lets say you want to pipe some value a through functions f f f in that order How would you do it Well you can do it the normal way pure JS javascript f f f a Or you can use compose javascript compose f f f a But what Id really like to write is javascript pipe a f f f Both JSs function composition syntax and compose make me write the function list in the reverse order Clojure has threading macros in Elm you could write this using the reverse apply operator elm a f f f This pipe function Im suggesting would be a way of doing something similar in JS Added support for Set and Map for isEmpty source correct output with same source I know this has already been reported way too many times And I know it because Ive faced the issue myself and found the breadcrumbs which have lead me here isEmpty behaviour by design only checks enumerable objects Any primitive value is therefore considered empty While changing this behaviour has already been discussed and rejected more than once developers have been hitting against isEmpty for years now from at least to And well if I count myself I also know this our fault after quickly scanning through the docs we assume it will behave nicely for every variable we throw at it Still Im sure adding an explicit example of numbers please do NOT use as an example as it would imply it actually checks for number emptyness and perhaps a note in bold would help a lot of people in the future Something like this would probably do isEmpty isEmptyobject Returns true if an enumerable object contains no values no enumerable ownproperties For strings and arraylike objects isEmpty checks if the length property is isEmpty false isEmpty true Note that primitive types are always considered empty isEmpty true isEmptytrue true One throttle triggers trailing call when invoked repeatedly test showed up often on CITGM To reduce the noise this test causes and to prevent removing underscore from CITGM I relaxed the asserts inside of the function It would be great if the calls would have a stack trace but there is no such output if the calls fail so I relaxed both statements I can not fully say if this will resolve the issue completely but this seemed like the most straight forward fix besides removing the test completely Refs 