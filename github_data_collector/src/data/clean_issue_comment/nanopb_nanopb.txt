CMake projects using nanopb should use nanopbgeneratecpp function as shown in cmake examples But its being provided only by extraFindNanopbcmake cmake package module which available only in source tree and exclusive binary distributions at download page Although there are also extrananopbconfigcmake extrananopbconfigversioncmake cmake package configuration available being generated from nanopb build and install via CMake it doesnt provide any similar feature This limits usage in two possible deployment scenarios nanopb source code isnt available during user application build One need to retreive it and append CMAKEMODULEPATH with path to extracted directory which can be done in cmake command line of course and not as shown in example provided nanopb already installed in system linux Recommended findpackageNanopb instruction from example causes CMake to find installed cmake package configuration first and prefer to use it regardless of whether user supplied CMake with path to module location or not thus causing build fail not only because of missing function This can be avoided by explicit findpackageNanopb MODULE One possible solution would be to add installation ofFindNanopbcmake to standard cmake modules directory and also core sources somewhere to be retreived from and correct documentationexamples describing two different use cases findpackageNanopb MODULE available function and integration to user cmake file as already shown in example but with CMAKEMODULEPATH required only when nanopb isnt installed findpackageNanopb CONFIG integration of imported targets to user cmake file and alternative invokation of generator When doing the following steps git clone cd nanopb cmake make cd generatorproto make cd tests scons The tests fail somewhere in nanopbgeneratorpy Traceback most recent call last File homebolindnanopbgeneratornanopbgeneratorpy line in module mainplugin File homebolindnanopbgeneratornanopbgeneratorpy line in mainplugin results processfilefilename fdesc options otherfiles File homebolindnanopbgeneratornanopbgeneratorpy line in processfile headerdata joinfgenerateheaderincludes headerbasename options File homebolindnanopbgeneratornanopbgeneratorpy line in generateheader yield msgfieldsdeclarationselfdependencies n File homebolindnanopbgeneratornanopbgeneratorpy line in fieldsdeclaration defval selfdefaultvaluedependencies File homebolindnanopbgeneratornanopbgeneratorpy line in defaultvalue fieldClearFielddefaultvalue TypeError field name must be a string This in on Ubuntu LTS x When using PBENABLEMALLOC on AVR processors with avrlibc this bug can get triggered and cause memory corruption This happens when previous allocation is reduced to byte using realloc A workaround should be added on nanopb side as it is fairly low cost and it will take time before avrlibc gets fixed The problem will only occur when all of the following apply PBENABLEMALLOC is used Using avrlibc realloc as the allocator for nanopb Message contains pointerallocated field that has size of byte per entry eg bool array or string Data to be decoded contains same field twice Instructions to reproduce the bug on revision bf fec scons PLATFORMAVR basicbuffer fuzztest buildruntest buildfuzztestfuzztest The field descriptor logic in is more involved than before and it is shared by the encoder and decoder parts Many of the test cases only test the round trip between nanopb encoder and nanopb decoder To better cover the field descriptor code there should be a test case like the AllTypes test which compares against protoc but for all the different descriptor sizes The documentation for PBFIELDINFOWIDTH compilation option claims that it will override descriptor width for all fields However in reality it only overrides it for messages using automatic field width determination The generator automatically expands descriptor size to or for messages that have large data or tag number sizes These dont get overridden by the compilation option which is misleading It may be best to remove PBFIELDINFOWIDTH option as it is mostly redundant with descriptorsize option available in proto files I have updated a codebase to use nanopb in order to use the submsgcallback option I am using Atmel Studio with an Atmel micro I have simplified my proto file to the following for testing message FirmwareUpdateCommand string version uint size message CommandWrapperMessage option nanopbmsgoptsubmsgcallback true oneof payload FirmwareUpdateCommand firmwareupdate If my proto file contains option nanopbmsgoptsubmsgcallback false Then everything builds ok but I obviously cannot use submsg callbacks If I try to use option nanopbmsgoptsubmsgcallback true Then I get a series of compilation errors img width altScreenshot at src With the first error pointing to img width altScreenshot at src I note that you have had a previous embedded systems issue and added a series of tests but it is possible these tests to not cover the use of submsgcallback being set to true according to the README the binary release is supposed to be straight forward generatorbinprotoc nanopbout myprotocolproto there is no generatorbin so im assuming its generatorprotoc but that doesnt work aepstark Downloadsnanopb generatorprotoc Failed to import the protocol definitions for generator You have to run make in the nanopbgeneratorproto folder Traceback most recent call last File generatorprotoc line in module from nanopbgenerator import invokeprotoc File homeaepDownloadsnanopbgeneratornanopbgeneratorpy line in module from proto import nanopbpb ImportError attempted relative import with no known parent package note that doing what the fat warning says has no effect aepstark Downloadsnanopbgeneratorproto make make Nothing to be done for all Running nanopbgeneratorpy on Python show the following warning nanopbgeneratorpy SyntaxWarning invalid escape sequence The line in question is this one It seems the correct way how to quote an asterisk is either r or but I am not sure honestly This is a new feature request We want to specify custom package name like option javapackage comsamplegenerated At ac When decoding a message such as message SimpleMessage optional uint number extensions to max message ExtMessage extend SimpleMessage optional ExtMessage extmessageext optional uint secondnumber the found field is never set to true However If I switch extmessageext it is set correctly