When I interact with database tables through odbc I come across bit integers It would be nice to be able to check them directly with checkmate instead of casting them to a character and then using checkmateassertcharacter Would assertinteger be a useful function in this package Would the code resemble the checks for tibble All of the following assertions finish with success librarycheckmate assertcharacterNAinteger assertintegerNAcharacter assertfactorNAcomplex assertdoubleNA assertlogicalNAreal I can see that the type validation for vectors with only NAs is treated separately HANDLETYPENULLisclassstringx allmissingatomicx I assume then that there is no way for checking type for missing values in C If so do you have an idea how could it be efficiently done within R and incorporated into the package I could then work on the pull request According to the documentation makeAssertion invisibly returns the checked object if the check was successful and an exception is raised or its message stored in the collection otherwise It appears that when a collection to store assertion messages is specified with add makeAssertion always invisibly returns the checked object ie even if the check was not successful R librarycheckmate x FALSE y assertIntx Error Assertion on x failed Must be of type single integerish value not logical existsy FALSE x FALSE coll makeAssertCollection w assertIntx add coll existsw TRUE Is it the desired behavior It would be convenient to not return the checked object when the check fails in that case for example to allow further testing or to skip testing other variables that may depend on the one that just failed the test Sometime default values are not character but It would be helpful to have a test function for this like checkScalarNA at teast a truncated version of it Unsure if this is required and wanted Missingness would again be defined as NULL for these columns Feature request Could you add an assertion for the maximum allowed number of characters in a string eg maxchars with a meaningful error message in assertcharacter and assertstring I kinda sorta expected the below to yield TRUE but checkcharacterx cfoo NA NA anymissing TRUE unique TRUE Contains duplicated values I guess that strictly speaking is true NA is duplicate My intention here was to test whether the nonNAs were duplicate Am I using this wrong or could the behavior of checkmate be changed here assertListx throws an error if x is a pairlist object From the baseR point of view this is unexpected r create a pairlist p pairlistx classp p is a list according to base R baseislistp p is not a list according to checkmate checkmatetestListp One might argue that a pairlist is a special list which should not be considered as a list by default but in this case this should be documented in assertList Note that this is not an issue of unevaluated symbols in a list r a alistx notexistingvariable testLista An easy workaround would be to introduce a new argument to checkList pairlistok FALSE so that it does not affect existing code Later the default could be changed to TRUE As a possible enhancement consider a function like this r prohibitvectorrecycling function lengths vapplylist FUN length FUNVALUE L maxlength maxlengths if anylengths L lengths maxlength stopOnly permissible vector lengths are or the maximum nrow of the inputs else invisiblemaxlength The point of this function is to avoid nasty surprises from vector recycling and to a lesser extent to avoid checking multiple times For example if the inputs are being added to a dataframe It seems a good fit for checkmate I could have added this as a pull request but Im guessing you might prefer it to be implemented in C 