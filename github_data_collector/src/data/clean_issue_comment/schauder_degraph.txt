Scala JVM target and so on When an edge is selected in yED then in the Properties View the flyover of the DataDescription field will show the edge source and destination This is useful in very nested graphs to see the exact route of a dependency Given the following class public class ClassWithTypeAnnotationsT implements clause implements TypeAnno ClassWithTypeParamTypeAnno T Class instance creation expression private Object x new TypeAnno Object private TypeAnno Object str Hallo Type cast public String myString TypeAnno String str Thrown exception declaration public void throwsAnnotatedException throws TypeAnno SQLException Override public TypeAnno T doSomething try TypeAnno String local new String catch TypeAnno RuntimeException re return null there should be dependencies from ClassWithTypeAnnotations to TypeAnno and TypeAnno but there arent So annotations on local variables and on catch blocks dont get found properly I just cloned this repo because it seems to do exactly what I want it to However the two gradlew commands test and installApp fails with the following message matsbrorMatsSurfaceBooksrcdegraph gradlew test FAILURE Build failed with an exception What went wrong A problem occurred configuring root project degraph Could not resolve all dependencies for configuration classpath Could not find comgithubbenmanesgradleversionsplugin beta Searched in the following locations Required by degraph Try Run with stacktrace option to get the stack trace Run with info or debug option to get more log output BUILD FAILED I got the same message on Ubunti mingw bash and Windows PowerShell Any help would be appreciated Seems like the ASM version used in the Gradle plugin is out of date Executing task junitplatformcommonsjava degraph uptodate check took secs due to Task has failed previously junitplatformcommonsjava degraph FAILED junitplatformcommonsjava degraph Thread Task worker for main completed Took secs FAILURE Build failed with an exception Where Script C Dev Github junitteam junit gradle degraphgradle line What went wrong Execution failed for task junitplatformcommonsjava degraph javalangIllegalArgumentException no error message Try Run with debug option to get more log output Exception is orggradleapitasksTaskExecutionException Execution failed for task junitplatformcommonsjava degraph at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuterexecuteActionsExecuteActionsTaskExecuterjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuterexecuteExecuteActionsTaskExecuterjava at orggradleapiinternaltasksexecutionSkipUpToDateTaskExecuterexecuteSkipUpToDateTaskExecuterjava at orggradleapiinternaltasksexecutionResolveTaskOutputCachingStateExecuterexecuteResolveTaskOutputCachingStateExecuterjava at orggradleapiinternaltasksexecutionValidatingTaskExecuterexecuteValidatingTaskExecuterjava at orggradleapiinternaltasksexecutionSkipEmptySourceFilesTaskExecuterexecuteSkipEmptySourceFilesTaskExecuterjava at orggradleapiinternaltasksexecutionResolveTaskArtifactStateTaskExecuterexecuteResolveTaskArtifactStateTaskExecuterjava at orggradleapiinternaltasksexecutionSkipTaskWithNoActionsExecuterexecuteSkipTaskWithNoActionsExecuterjava at orggradleapiinternaltasksexecutionSkipOnlyIfTaskExecuterexecuteSkipOnlyIfTaskExecuterjava at orggradleapiinternaltasksexecutionExecuteAtMostOnceTaskExecuterexecuteExecuteAtMostOnceTaskExecuterjava at orggradleapiinternaltasksexecutionCatchExceptionTaskExecuterexecuteCatchExceptionTaskExecuterjava at orggradleexecutiontaskgraphDefaultTaskGraphExecuterEventFiringTaskWorker runDefaultTaskGraphExecuterjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorrunDefaultBuildOperationExecutorjava at orggradleexecutiontaskgraphDefaultTaskGraphExecuterEventFiringTaskWorkerexecuteDefaultTaskGraphExecuterjava at orggradleexecutiontaskgraphDefaultTaskGraphExecuterEventFiringTaskWorkerexecuteDefaultTaskGraphExecuterjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorkerprocessTaskDefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorkeraccess DefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorker executeDefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorker executeDefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskExecutionPlanexecuteDefaultTaskExecutionPlanjava at orggradleexecutiontaskgraphDefaultTaskExecutionPlanexecuteWithTaskDefaultTaskExecutionPlanjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorkerrunDefaultTaskPlanExecutorjava at orggradleinternalconcurrentExecutorPolicyCatchAndRecordFailuresonExecuteExecutorPolicyjava at orggradleinternalconcurrentManagedExecutorImpl runManagedExecutorImpljava at orggradleinternalconcurrentThreadFactoryImplManagedThreadRunnablerunThreadFactoryImpljava Caused by javalangIllegalArgumentException at orgobjectwebasmClassReaderinitUnknown Source at orgobjectwebasmClassReaderinitUnknown Source at orgobjectwebasmClassReaderinitUnknown Source at deschauderhaftdegraphanalysisasmAnalyzerdeschauderhaftdegraphanalysisasmAnalyzeranalyze Analyzerscala at deschauderhaftdegraphanalysisasmAnalyzeranonfunanalyze anonfunapply applyAnalyzerscala at deschauderhaftdegraphanalysisasmAnalyzeranonfunanalyze anonfunapply applyAnalyzerscala at scalacollectionimmutableSetSet foreachSetscala at deschauderhaftdegraphanalysisasmAnalyzeranonfunanalyze applyAnalyzerscala at deschauderhaftdegraphanalysisasmAnalyzeranonfunanalyze applyAnalyzerscala at scalacollectionIndexedSeqOptimizedclassforeachIndexedSeqOptimizedscala at scalacollectionmutableArrayOpsofRefforeachArrayOpsscala at deschauderhaftdegraphanalysisasmAnalyzeranalyzeAnalyzerscala at deschauderhaftdegraphconfigurationConfigurationcreateGraphConfigurationscala at deschauderhaftdegraphcheckCheckanon applyCheckscala at deschauderhaftdegraphcheckCheckanon applyCheckscala at deschauderhaftdegraphcheckhamcrestHamcrestWrappermatchesSafelyHamcrestWrapperscala at orghamcrestTypeSafeMatchermatchesTypeSafeMatcherjava at orghamcrestcoreIsmatchesIsjava at orghamcrestMatcherAssertassertThatMatcherAssertjava at orghamcrestMatcherAssertassertThatMatcherAssertjava at orghamcrestMatcherAssertassertThatcallStaticUnknown Source at DegraphCheckrunDegraphC Dev Github junitteam junit gradle degraphgradle at javabasejdkinternalreflectNativeMethodAccessorImplinvoke Native Method at javabasejdkinternalreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at javabasejdkinternalreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at orggradleinternalreflectJavaMethodinvokeJavaMethodjava at orggradleapiinternalprojecttaskfactoryDefaultTaskClassInfoStoreStandardTaskActiondoExecuteDefaultTaskClassInfoStorejava at orggradleapiinternalprojecttaskfactoryDefaultTaskClassInfoStoreStandardTaskActionexecuteDefaultTaskClassInfoStorejava at orggradleapiinternalprojecttaskfactoryDefaultTaskClassInfoStoreStandardTaskActionexecuteDefaultTaskClassInfoStorejava at orggradleapiinternalAbstractTaskTaskActionWrapperexecuteAbstractTaskjava at orggradleapiinternalAbstractTaskTaskActionWrapperexecuteAbstractTaskjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuter runExecuteActionsTaskExecuterjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorrunDefaultBuildOperationExecutorjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuterexecuteActionExecuteActionsTaskExecuterjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuterexecuteActionsExecuteActionsTaskExecuterjava more Hi Jens thanks for the great Tool I am curious if there is or will there be a possibility to only generate dependencies on a given package level Thank you Christian When running degraph without arguments it generates a huge graphml file with what appear to be scalas dependencies Attempting to open this graph with graph editors such as Gephi which reports k nodes and complains on most properties or yEd which understands the nesting but still shows nothing useful even after some tinkering results in unreadable graphs As far as defaults go it is not specially informative and may be more appropriate as a stress test than an example A simpler example would be a better and gentler introduction to the tool Inspired by feedback in and others There should be more logs in order to help finding problems with slicings log if there is a pattern that gets never used log the slices of each slicing and how many classes are in each slice Hi in the documentation I found classpathwithSlicing mainVsTest deschauderhaftTest new NamedPatternmain deschauderhaft how ever it seems that the name must be defined at the end So classpathwithSlicing mainVsTest deschauderhaftTest new NamedPatterndeschauderhaft main should be correct However even then a test like ConstraintBuilder testObject classpathnoJars includingSZEBASEPACKAGE excludingpackageinfo withSlicing mainVsTest SZEBASEPACKAGE Test new NamedPatternSZEBASEPACKAGE main allowmain Test assertThattestObject isviolationFree doesnt fail even if I only allow the wrong direction I came to this issue trying to define a test which disallow references to any class which is in the package impl Again its hard to track or debug the slicedefinition Is there a way to express that classes of a more general package must not access classes of more specialized or sub packages Rationale based on an hexagonal architecture style I have my domain classes for example in comenterprisebusinessdomain The corresponding repository interface is comenterprisebusinessdomainrepo The specific mongodb implementation could be in comenterprisebusinessdomainrepomongodb etc So classes in an outer eg comenterprisebusinessdomainrepomongodb package can access classes in the base comenterprisebusinessdomain package but never the other way around I would like to express this restriction in a general manner Something like a class in some package X must not access a class in some package Y where X is a package prefix of Y 