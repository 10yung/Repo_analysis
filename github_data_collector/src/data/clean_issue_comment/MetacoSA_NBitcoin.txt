Also tweaked some altcoin tests to allow them to pass more consistently on multiple networks When I tried below I got false C ScriptFromHex f dd edea c f e fac IsScriptTypeScriptTypeP SH Infact no matter what ScriptType have been chosen it always return false Its odd This is the initial request to add Terracoin I made this fork a while ago and tested it but got side tracked I just merged in all the upstream changes but havent tested it since I wanted to make the request before I forgot Ill be testing this week but looking at the PR I cant see things breaking Ive performed a simple benchmark to compare NBitcoin Hash vs my dotnetcore double hash implementation the result are pretty cool so Im sharing in case you want to improve your performance Code is pretty simple just make use of span and stackallock benchmark is here note how I even used wrapped my result in a call to new NBitcoinuint in order to have the same output I didnt implemented yet a uint type and Im not sure if Ill do or stick with a byte array internally in case Ill implement a new one I can share compare then both implementations like Im doing now as you can see from the result my implementation take half of garbage collector space probably just because of uint and allocate less this code is awkward bytes bytes probably the result of a typo long time ago compare it to bitcoin one bitcoin uses there a GetByte method probably to deal with endianness but ended up being just a unsigned int CNetAddrGetByteint n const return ip n since you didnt implemented that call why dont remove all these x from code another think Id want to point out is public static bool IsRFC this IPAddress address var bytes addressGetAddressBytes byte pchRFC new byte xFE x return UtilsArrayEqualbytes pchRFC pchRFC Length everytime IsRFC is called there is a new allocation of pchRFC Id suggest to put it as static using Span it may seems like this not tested private static readonly byte pchRFC new byte xFE x public static bool IsRFC this IPAddress address var bytes addressGetAddressBytes Spanbyte span bytesLength pchRFC Length bytesAsSpan pchRFC Length bytes return spanSequenceEqualpchRFC Why does a same transaction signed separately have different witness values I signed a bitcoin testnet transaction using nbitcoin library and got an output b bcbc cf cd abb edca ce a b d d ecb fcbc af c aad c df d c f ffffffff a b cfd b f bf baf d df f ef aee e fc dd abf a ebd dfd e f a be dfed c d c da a ca d aaf f dd e aafd f f cb c a f c e b dede aad b f ad e e b a Then I signed the same transaction with bitcoincore and it returned an output b bcbc cf cd abb edca ce a b d d ecb fcbc af c aad c df d c f ffffffff a b cfd b f bf baf d df f ef aee e fc dd abf a ebd dfd e f a be dfed c d c da a ca d aaf f dd e aafd f f cb c a f c e b dede aad b f ad e e b a On comparing the outputs the txwitness stack value differs Bitcoincore witness data txinwitness aee e fc dd abf a ebd dfd e f a be dfed c d c da a ca d aaf f dd e aafd f f cb c a f c e b dede aad b f ad e e b a nBitcoin witness data txinwitness c ba bacbc fc ed c f fe ef c bb a fb dc ea c a f d d eb e ea b a f b eb edcc f a f c e b dede aad b f ad e e b a But still Im able to send the transaction signed by nBitcoin So my questions are what are the values in witness stack why the same transaction have different txwitness value While trying to spend the below coin Live BTC c b d cd ab c e d ac f eedc deb c a f fd b we get this error Script error on input InvalidStackOperation Hi Any reason why I have no problems making a TransactionBuilder object in c but VBnet keeps refusing building a new object always reports no new overload accessible but I can use it no problem under c I would like to have a Bip address delegated so that it can send payments to services it depends on A cloud service that invokes subsubscriptions I dont want the subsubscriptions to be able to collude and determine they are on the same account and would like to prevent the sub sub accounts from seeing the delegated master Can I neuter an HD wallet at different levels of the hierarchy 