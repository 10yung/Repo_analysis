Using the default example for registering a custom helper handlebarshelperhex v i format xx v Results in the following error for handlebars version beta and beta for me error E wrong number of type arguments expected found src mainrs handlebarshelperhex v i format xx v unexpected type argument note this error originates in a macro outside of the current crate in Nightly builds run with Z externalmacrobacktrace for more info In addition to templates we should allow dynamic helper and directive definition by a scripting language Fortunately we have rhai a JavaScript like scripting language with great interopbility with Rust As from handlebars had an unreasonable performance loss in large loop Before looking into very detail of this there are some know reason may affect the perf Json path are parsed several times when accessing data Local variable like index can be generated lazily Parameter can be parsed during template parsing instead of render time At the moment we only support index access for Array String is also accessible via number index Given s hello the expression s should output h Handlebars is awesome Were using it to generate services and mock services from servicemodel However generating code interactively requires a feature which seems to be missing in the library In short itd be great to have a feature like the following rust template for protobuf definitions let template r import servicenamedatamodelproto package servicenamestubmodels each methods message thisprotonameStub thisinputprototype request thisoutputprototype response each let mut reg Handlebarsnew let schema reginferschematemplate missing feature printlnschema schema Output JavaScript servicename string methods protoname string inputprototype string outputprototype string which can be interpreted as the schema that is required to render the given template must be a map with at least two keys servicename whose value is a string methods whose value must be an array of map with at least keys protoname whose value is a string inputprototype whose value is a string outputprototype whose value is a string If we have such a feature then a rendering engine can be written in such a way that itll take any template from users eg a templatefile on commandline and then the engine will infer the schema and then asks users to enter the values for each keyfield in the schema recursively Id be happy to implement this if the idea seems interesting and useful Its going to be pretty challenging though Fixes In the handlebarsjs docs the following is described This expands the default behavior of stripping lines that are standalone helpers only a block helper comment or partial and whitespace They give the example each nav a hrefurl if test title Empty if a each That will render as a hreffoo bar a a hrefbar Empty a Thus rendering the line if test as nothing Currenly on handlebarsrs if body body if renders as body here notice the newline between and body here Is it possible to ignore those lines The original idea of Output API over Write based one is to support for use case like generating rust code instead of writing data to buffer directly However current Output API is still based on Write and can hardly deal with scenario like looping over a data structure at render time So its still impossible to use handlebars in procedure macro to generate rust function In the new Output API I will seek solution to support helpers like if and each to be defined once and can be used in both runtime rendering and compile time render function generation Based on our profiling result setting local variables like indexfirstlast takes about time when rendering each helper This can be skipped when inner template doesnt use these variables Finally we have wasmbindgen to expose Rust struct to JavaScript so we should be able to create Handlebars instance from JavaScript and call any API from it This has made it possible to create a JavaScript interface for handlebarsrust The next step will be allowing JavaScript implemented helpers and directives being registered in handlebarsrust 