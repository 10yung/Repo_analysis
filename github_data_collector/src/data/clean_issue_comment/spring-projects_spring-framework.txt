Hi I am new to Spring Framework compilation and after I import Spring source code into IDEA there are some errors for example as the above photo shows IDEA could not find class orgspringframeworkcacheannotationEnableCachingIntegrationTestsDummyFooRepository and as you can see the class is here And I guess there is something wrong in my IDEA config but could not locate the wrong config So could you help me with that That can be reduced by the close method JDK introduces record classes as a preview feature with an expectation of getting revised and possibly taken out of preview mode in JDK This matches our Spring Framework timeframe nicely so lets aim for full data binding support against record classes refined constructorbased binding on one side and propertystyle access to recordstyle getters with plain method names on the other side This also goes nicely with several other constructorbased data binding refinements that we plan to get into With Spring Im experiencing a Bug when reading server sent events with the web client Ive managed to write this minimal sample to reproduce the bug This code works perfectly fine on Spring public static void mainString args ServerSentEventHttpMessageReader reader new ServerSentEventHttpMessageReader DataBufferFactory factory new DefaultDataBufferFactory ReactiveHttpInputMessage message new ReactiveHttpInputMessage Override public FluxDataBuffer getBody return Fluxjust factorywrapping ngetBytesStandardCharsetsUTF factorywrap ngetBytesStandardCharsetsUTF Override public HttpHeaders getHeaders return new HttpHeaders FluxObject flux readerreadResolvableTypeforTypeStringclass message emptyMap fluxcollectListblockforEachSystemoutprintln But on Spring an exception is thrown This also happens when the comment ping is missing and just a newline is received Exception in thread main javalangNullPointerException The mapper returned a null value at javautilObjectsrequireNonNullObjectsjava at reactorcorepublisherFluxMapMapSubscriberonNextFluxMapjava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberemitFluxBufferPredicatejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberonNextNewBufferFluxBufferPredicatejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscribertryOnNextFluxBufferPredicatejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberonNextFluxBufferPredicatejava at reactorcorepublisherFluxPeekFuseablePeekConditionalSubscriberonNextFluxPeekFuseablejava at reactorcorepublisherFluxMapMapConditionalSubscriberonNextFluxMapjava at reactorcorepublisherFluxContextStartContextStartSubscriberonNextFluxContextStartjava at reactorcorepublisherFluxMapMapConditionalSubscriberonNextFluxMapjava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberemitFluxBufferPredicatejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberonNextNewBufferFluxBufferPredicatejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscribertryOnNextFluxBufferPredicatejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberonNextFluxBufferPredicatejava at reactorcorepublisherFluxFlattenIterableFlattenIterableSubscriberdrainSyncFluxFlattenIterablejava at reactorcorepublisherFluxFlattenIterableFlattenIterableSubscriberdrainFluxFlattenIterablejava at reactorcorepublisherFluxFlattenIterableFlattenIterableSubscriberrequestFluxFlattenIterablejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberrequestFluxBufferPredicatejava at reactorcorepublisherFluxMapMapConditionalSubscriberrequestFluxMapjava at reactorcorepublisherFluxContextStartContextStartSubscriberrequestFluxContextStartjava at reactorcorepublisherFluxMapMapConditionalSubscriberrequestFluxMapjava at reactorcorepublisherFluxPeekFuseablePeekConditionalSubscriberrequestFluxPeekFuseablejava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberrequestFluxBufferPredicatejava at reactorcorepublisherFluxMapMapSubscriberrequestFluxMapjava at reactorcorepublisherMonoCollectListMonoCollectListSubscriberonSubscribeMonoCollectListjava at reactorcorepublisherFluxMapMapSubscriberonSubscribeFluxMapjava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberonSubscribeFluxBufferPredicatejava at reactorcorepublisherFluxPeekFuseablePeekConditionalSubscriberonSubscribeFluxPeekFuseablejava at reactorcorepublisherFluxMapMapConditionalSubscriberonSubscribeFluxMapjava at reactorcorepublisherFluxContextStartContextStartSubscriberonSubscribeFluxContextStartjava at reactorcorepublisherFluxMapMapConditionalSubscriberonSubscribeFluxMapjava at reactorcorepublisherFluxBufferPredicateBufferPredicateSubscriberonSubscribeFluxBufferPredicatejava at reactorcorepublisherFluxFlattenIterableFlattenIterableSubscriberonSubscribeFluxFlattenIterablejava at reactorcorepublisherFluxArraysubscribeFluxArrayjava at reactorcorepublisherFluxArraysubscribeFluxArrayjava at reactorcorepublisherInternalFluxOperatorsubscribeInternalFluxOperatorjava at reactorcorepublisherFluxDefersubscribeFluxDeferjava at reactorcorepublisherMonosubscribeMonojava at reactorcorepublisherMonoblockMonojava at decodecentricbootadminserverwebInstancesControllerIntegrationTestmainInstancesControllerIntegrationTestjava Suppressed javalangException block terminated with an error at reactorcorepublisherBlockingSingleSubscriberblockingGetBlockingSingleSubscriberjava at reactorcorepublisherMonoblockMonojava more It can simplify using computeIfAbesnt That can use trywithresource Build Scan plugin is now Gradle Enterprise plugin applied in settings Compile task dependencies are now defined through classpath Test fixture publication can be disabled through public API It can be that Affects Even though Smile codec is configured as part of default codecs in BaseDefaultCodecs theres currently no way to configure it or replace it similar to other default codecs The only way arount at the moment is to remove all defaults and reconfigure everything from scratch using only custom codecs It seems to be even more complicated on the client side where default codecs include specials for SSE and multipart so unregistering all defaults and building it all back is quite cumbersome This is inconsistent with other defaults but also the whole codec configuration system seems very inconvenient for simple tasks like disabling a particular codec feature in my case to get around or more frequent customizations like adding modules or mixins to ObjectMapper It can be simplify 