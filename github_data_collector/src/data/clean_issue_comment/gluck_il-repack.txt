 The following types attributes are automatically added by the compiler when using a where clause with an unmanaged type constraint public static void FooT where T unmanaged Having duplicated attributes of this type breaks the assembly and usage of those methods because these attributes dont get recognized anymore MicrosoftCodeAnalysisEmbeddedAttribute SystemRuntimeCompilerServicesIsUnmanagedAttribute It would be possible to add special behaviour to every attribute that has the Embedded attribute applied or to exclude both of them during merging Both of them even the EmbeddedAttribute itself has them Edit I could implement this if one of the above fixes are appropriate From the documentation I understand ilrepack is created to replace ilmerge We would like to replace it but I dont understand how We currently use a publish profile to publish our aspnet web application This publish profile is used by msbuild to deploy our website with a command something like msbuildexe ourprojectfilecsproj pDeployOnBuildtrue pPublishProfilepublishprofilexml the publish profile contains options like this WDPMergeOptionMergeAllOutputsToASingleAssemblyWDPMergeOption UseMergeTrueUseMerge to enable merging the output assemblies of the precompile However msbuild uses ilmergeexe by default to do this What can i do to tell msbuild to use ilrepack I have a NET assembly and a NET assembly Is there any way to merge the into a assembly and tell it to use still I dont think this is possible but thought I would ask the question Hi guys I ran to this issue and I know how to solve I just want to make sure that you guys can find the resolution and authors can look into it I did update from version from and it broke my build I suppose its something with the fullpath variable in the Target triggered AfterTargetsBuild The error I got after build is like this So what I did I just removed the nuget from my local machine And suddenly everything works From what I went through Im not probably doing it by my custom Targets it looks like the fullpath variable cannot resolve multiple versions Is there anyway to NOT merge appconfig files Even if not can you point me to where in the source code this appconfig merging is done so I can comment it out The problem I have is I have the same assembly redirects in multiple appconfig files the resulting merged file has duplicates which then causes issues Its easier for me to just put everything in the main appconfig and then just simply not merge it I get the following error regarding merge configuration files Im assuming something is malformed within the config files themselves but Im unsure what How can I debug this ERROR Failed to merge configuration files SystemArgumentNullException column argument cannot be null Parameter name column at SystemDataDataKeyctorDataColumn columns Boolean copyColumns at SystemDataMergerGetSrcKeyDataTable src DataTable dst at SystemDataMergerMergeTableDataTable src DataTable dst at SystemDataMergerMergeTableDataDataTable src at SystemDataMergerMergeDataSetDataSet source at SystemDataDataSetMergeDataSet dataSet Boolean preserveChanges MissingSchemaAction missingSchemaAction at SystemDataDataSetMergeDataSet dataSet at ILRepackingConfigMergerProcessILRepack repack in C Temp ilrepack ILRepack ConfigMergercsline INFO Finished in I want to merge just assemblies but not all the nuget package dlls as they are quite large and it increases load time if I do this How can I use ilrepack to just repack some DLLs but not all If I try doing just some I get failed to resolve assembly errors I found more problems when I repack ILRepack updates tokens RID of ExportedType in AddExportedTypes function cecilMonoCecilAssemblyWritercs As I know an ExportedType can have a DeclaringType And DeclaringType also has a token I cannot find any code which updates the token of DeclaringType It keeps old RID which points to invalid ExportedType In CoreCLR it throws an exception because DeclaringType of ExportedType does not contain the ExportedType I developed DeclaringTypes token updates in my local source code then it works well Actually I dont know this repo is the correct place for this issue If not I will report to Thank you I am testing ilrepack in CoreCLR It improves memory usages and launching time in our environment Thank you so much However I found some issues and one of them is about empty Win Resource When images dont have actual Win Resource data ILRepack generates an address nonzero value and a size value for Win Resource Then CoreCLR runtime checks whether the address is in a valid Win Resource directory The CoreCLR throws a BadImageFormat exception because there is no Win Resource directory its size is I can avoid this exception if I revert Revert Use Win Resource directory only if there is actual data in it in cecil Could you let me know why the patch is reverted Thank you