It might look like this let rows clientquerystatementone suppliedparamsawaitunwrap let nextrows clientquerystatementtwo rowsawaitunwrap Is there a transformation I can apply to rows so that the contents are dyn ToSql Sync without knowing the types that those row values would deserialize to So far I have tried something like this let nextparams rowsiterenumeratemapi r rgeti as dyn ToSql SynccollectVec dyn ToSql Sync This doesnt work because get cannot infer a type for T I suspect this might not be possible but just wanted to check The documentation is not very clear around queryportal and queryportalraw What happens when you call it and there are no rows left Does it return an Error or an empty vec empty Iterator I think that fetching all rows of a query but in batches is the main use case of this and having an example in the documentation on how to do that with both would be helpful Thanks According to the Rust Reference If there is no data attached to any of the variants of an enumeration then the discriminant can be directly chosen and accessed In Rust it looks like this rust enum Foo Bar Baz Quux At the moment derives for enum types support only stringlike values in Postgres and conversion for such enums fails with panicked at error retrieving column role error deserializing column cannot convert between the Rust type SomeEnum and the Postgres type int Basically custom discriminant is just a special case because any enum can be converted to some integer value because discriminant values provided by default for any enum variant so it would be nice to support some kind of mapping from Rusts enum to Postgress interger I cant find any docs on feature flags I am familiar with where to look Cargotoml but others arent I addedmodified some of the Debug implementations to help me make sense of why some of my queries didnt work as expected spoiler alert I had semantic errors in the queries I thought these additions might be useful to the community This commit makes the following changes Add an opaque Debug impl for Client Add a rich Debug impl for Row Make the Debug impl for Type clearer Change the Debug for Column to be slightly neater I just started dipping my feet into actix water and wanted to go full async After having a look at existing connection pools I tried both bb and the experimental l connection pool just to find that they both perform worse than r d postgres webblock I did not expect those results and wonder if Im doing anything wrong I surely did expect tokiopostgres to outperform postgres with ease Am I doing anything wrong Are the pools causing the performance drop or is tokiopostgres the culprit I have yet to create a benchmark between tokiopostgres and postgres without the use of connection pools Just posting this here to document my progress in the hope someone can tell if Im doing anything wrong Agensgraph is a Graph DB based on Postgres DB It is a multumodel database supporting OpenCypher and AnsiSQL SQL queries and Cypher queries can be integrated into a single query in AgensGraph I am currently playing with rust I am a novice and Agensgraph As part of it I am trying to adopt rustpostgres to work with Agensgraph So far an extremely small amount of changes was necessary to support all what I currently want to do one line added to types I think it might be useful for others if I will share my changes in a separate branch Hey there First up thanks for building this Im using postgresprotocol for some bits of my postgres connection multiplexer and I was wondering whether youve any interest in a PR that would generalize serialization deserialization for all messages Thank you The result should be just String 