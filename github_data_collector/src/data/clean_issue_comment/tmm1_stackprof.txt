This file is only used in the development of the gem Although it has been included in the released gem package it has no effect on the released artifact or environments where the stackprof gem is run Each stackprof developer should be able to create a personal one of these via running bundle install Hopefully this fixes the CI build Add bugtrackeruri changeloguri documentationuri and sourcecodeuri to the gemspec metadata These project metadata will facilitate easy access to project information The URI will be available on the Rubygems project page via the rubygems API and the gem and bundle commandline tools with the next release This addresses a bug andor undefined behavior when interval is million the number of microseconds in a second raises ArgumentError with interval raises same ArgumentError with interval because this is also invalid An alternative would be to split interval into second and microsecond parts but its not clear that a sampling interval measured in seconds would ever be useful Also if that was a common use case I presume this would have been fixed in that direction a long time ago The code to translate interval set in microseconds to a timer is implemented here and for forks here itinterval is a timeval documented at says emphasis mine long int tvusec This is the rest of the elapsed time a fraction of a second represented as the number of microseconds It is always less than one million What is supposed to happen if interval passed to start or run is one million It looks like the timeval itself will take that value but the behavior is undefined Should StackProf error if the interval is larger than one million Or should it split the interval over seconds microseconds Thank you This attempts to fix the bug described in in which when interval is faster than the time required to record and analyze stack frames the job queue piles up faster than its flushed and the program hangs Pieces Moves the insignalhandler lock to the global stackprof struct and adds a check and escape hatch in stackprofsignalhandler Adds a test which demonstrates the hanging behavior and the fix for it Adds helpers timevaltousec and difftimevalsusec for working with time durations more easily as long ints of microseconds rather than timeval structs Adds a debug mode with stdoutstderr output recording the internal timings and flow Adds some comments and renames some variables for clarity More context on the underlying bug and consideration of alternative approaches is at Motivation We would like to use StackProf on a largescale Ruby application in production The inability to set an interval that is both fast enough to produce useful data and guaranteed to never hang the program is a blocker to doing so Caveats I am an amateur with C It took a lot of trial and error with this code and to get this working I have not yet analyzed what the escape hatch in stackprofsignalhandler does to the quality of the final results At the end of the day its a kind of user or program error if the interval is so fast that the escape hatch is necessary The question is how to deal with it I have mostly tested this with wall mode I have not yet analyzed how this bug or fix work with cpu or object modes though I suspect theyre similar cc NickLaMuro thank you for your engagement with Context We are trying to enable StackProf in production on a REST API service We would like to use mode wall raw true aggregate true but it has been challenging to calibrate the interval The segfault bug described in makes very lowfast sampling rates concerning especially because our hypothesis about the causes of those segfaults which we have not verified centered on overlapping signal handlers But at an interval of eg ms the data is not particularly useful Observed behavior At lower intervals however we encounter a separate bug in which the program doesnt crash but rather it hangs the CPU is pegged to and the program being profiled does not advance This specifically seems to occur when the time to capture a single sample is greater than the interval between samples The time it takes to capture a sample fluctuates I assume based on the size of the stack CPU load etc so it could take a bunch of samples successfully and then encounter this race What I suspect is occurring and I am still in the process of debugging and verifying the details is that it starts piling up jobs with rbpostponedjobregisterone and by the time it finishes one sample its started another and so on forever blocking any other instructions Proposal I think some code needs to be added to stackprofrecordsample or stackprofrecordsampleforstack measuring the time it took to capture the sample If that time is interval it needs to handle that somehow I can think of a few options at this point Calculate how many samples time was borrowed and skip that number of next samples This seems complicated and risky Inject fake frames into the results similar to GC frames that make it clear to the final report or flamegraph that this situation was encountered Im not sure how feasible this would be Internally stop profiling and when StackProfresults is called raise an exception that makes it clear that the profiling was stopped due to this situation We dont want to raise midprofiling because that could bubble up anywhere in the program This seems the easiest of the Next steps for me x Distill this bug down to a simple repro script x Confirm that the bug is in fact caused by a pileon of signal handlers postponed jobs Implement one of the solutions probably the rd behind a param passed to start or run and confirm that it fixes the bug Ill update this issue as I do these In the meantime Id be interested in anyone elses thoughts have you also encountered this do you know why it might be occurring and what fix do you propose Thank you Some viewers eg speedscope require raw data This is a set of helper rake tasks are intended to make running tests locally in docker much streamline and simpler to pick up as a newcomer to the project Requires a docker environment available in your shell environment Quick Start To simply run the rake tasks you can run console rake testdocker To specify a specific target ruby version console rake testdocker mame Curious about your thoughts on this one since you recently did the work to start running tests on travis with docker Like the other methods in the class it allows for choosing a IO object to have the data written to This can allow for writing to a IO object in the current ruby process and then processing it in the same process without having to do crazy STDOUT constant overwriting to achieve it This PR contains some minor changes each in a separate commit so I can easily remove them if they are not wanted Unrelated to this PR but as for the CI I saw which looks very nice since it actually works D but is the added runtime for CI and complexity debatable something thats wanted I get the frustration with rubyhead but then again its a HEAD version cant this be in the allowedfailures until is officially released or Travis CI starts working again A compromise could also be to use a separate build step for rubyhead and use Travis CI for everything else WDYT