 Description Error occurred when I use paper in mocha testing file The error msg is Cannot read property acorn of undefined And the reason I found is that this in file srccorePaperScriptjs Line is undefined But it is just an empty Object when I use it in browser So I think it will always be safe if we have to use an attribute of an unknown Object Related issues Please list related issues and discussion by using the following syntax Relates to to reference issues in the Objectionjs repository Relates to to reference issues in a related repository Relates to Checklist Please mark your choice with an x ie x see PRs without test coverage will be closed x New tests added or existing tests modified to cover all changes Code conforms with the JSHint rules npm run jshint passes Description This PR proposes to add a new PaperScope setting hitOptions If set this option supersedes settingshitTolerance and allows us to specify the default values to any properties of the hitTest options argument Why adding this setting I encountered an issue unfiled that the Item mouse events do not fire when the pointer is over a selection handle of a selected ShapeCircle item Likewise in a Tool mouse event callbacks evtitem reports null even if the incallback circlehitTestevtpoint bounds true call returns a positive hit result After studying the source I came up with this PR which is the likely the simplest leastinvasive solution to my issue without altering the original behavior With the PR I can simply set js papersettingshitOptions bounds true to make the mouse events to fire on the selection handles CAVEAT Since hitTest does not check whether the bounds rectangle is shown or not mouse events will fire on hidden bounds rectangle Related issues None I could find Checklist x New tests added or existing tests modified to cover all changes x Code conforms with the JSHint rules npm run jshint passes Note I cannot run the gulp script in Node as is but confirmed my test jshint to pass in modified partiallyfunctional gulp environment using gulpv package which is a rdperson fork of gulp v with updates Any interest in modernizing to gulp I can contribute if there is such need I had just updated my Node version to v and tried out my app I got this error on startup Uncaught Error Unable to load jsdom module at Objectanonymous nodemodules paper dist node selfjs I followed the message to the code here js try jsdom requirejsdom catche Check the required modules name to see if it contains jsdom and only complain about its lack if the module requires it if bjsdom btestrequireName throw new ErrorUnable to load jsdom module I tried starting a new Node server that just imports jsdom directly And this is the actual error message I got Error The module nodemodules canvas build Release canvasnode was compiled against a different Nodejs version using NODEMODULEVERSION This version of Nodejs requires NODEMODULEVERSION Please try recompiling or reinstalling the module for instance using npm rebuild or npm install So Paper is actually swallowing a much more useful error message here I was confused for a while because I had purposefully installed jsdom and knew for a fact that it was in nodemodules yet I was continuing to get that message Unable to load jsdom module so yea not very helpful and a bit of a misdirect for frustration In the end I just had to rebuild all my modules again which I actually had already done but for some reason yarn missed rebuilding canvas At the least the code should print out the full first error before throwing again js try jsdom requirejsdom catche consoleerrore Check the required modules name to see if it contains jsdom and only complain about its lack if the module requires it if bjsdom btestrequireName throw new ErrorUnable to load jsdom module DescriptionSteps to reproduce The setter for viewviewSize which Im using to resize the canvas appears to be buggy At least its behavior is inconsistent with how paperjs initializes its view Specifically the viewviewSize setter incorrectly scales the canvas virtual pixel dimension to be smaller by the factor of viewpixelRatio than viewviewSize Based on my observation it shouldnt scale at all Link to reproduction testcase Here is the minimum example Github Repo Please set showbug flag at the top of the indexjs to truefalse to see the different behaviors Expected result showbugfalse On my PC here is what indexhtml looks like when the canvas is presized to fit the window noresize And here is the copy of the console Set canvas to span the window before initializing paper Initial view size viewsize width height viewviewSize width height viewpixelRatio Text position textpoint x y showbugtrue And here is the case when the canvas is resized via viewviewSize resized with the console output Initial view size viewsize width height viewviewSize width height viewpixelRatio Resizing canvas by setting viewviewSize New view size viewsize width height viewviewSize width height viewpixelRatio Text position textpoint x y The final canvas sizes viewSize of cases are near identical I think the difference is due to using vs px But their appearances are greatly different As I stated above it appears the viewSize setter is making its workspace scaled by the factor of viewpixelRatio which I dont think it should edit The biggest issue with this bug is that mouse events are triggering at where the object should be placed The demo has mouseentermouseleave events to change the mouse cursor to text Despite the text is shown at the bottomright corner the mouse cursor switches in the middle where the text should be edit As a final note it would be a nice feature if the paperjs workspace dimension could be specified by viewsize and the size of the canvas element as viewSize My use case is to annotate video with overlaying paperjs canvas so setting the paperjs pixels to match that of the video pixel size would eliminate the need for unit conversion Additional information Windows Pro Node tested with latest Chrome Firefox My display setting Windows display config DescriptionSteps to reproduce quad new Path strokeWidth strokeColor red blendMode screen quadadd quadadd quadadd quadadd quadclosed true quadclosed false quadremoveSegments This results in a script error when the blendMode is defined as anything other than normal Expected result All segments should be removed from the Path while it still retains its original properties Due to the error however the script terminates execution Workarounds Set blendMode to normal or dont set it at all Before calling PathremoveSegments unclose the object by setting Pathclose false Wrapping the addJoin function in a conditional wrapper eg if typeof segment undefined Additional information Windows Home Firefox bit paperjs prebuilt DescriptionSteps to reproduce Im finding a bug where when an SVG is imported that contains an id that begins with a number the onError fires but the SVG is still imported and added to the root of the DOM at the bottom Link to reproduction testcase Convert an SVG file to a paperjs object using the importSVG method where the SVG contains g id The onError event handler should fire showing an error with the SVG file but the SVG should be added as a node of the root DOM element Note if there is not error then there is not added DOM element and no problem Expected result onError event handler to fire and SVG to not be imported Additional information macOS Node Using paperjs as PaperScript my script does not appear in the browsers debug sources I use Firefox or Chromium This issues database is used to keep track of bugs and new features For questions and support please visit the Gitter channel instead I meet a question I let Paperpath use strokeWith and opacity while the paperviewzoom the Paperpath s angle will be clipped Please see below Please see below Link to reproduction testcase reproduce bug steps set the paperpath strokeWith and strokeColor black set the paperpath opacity set the paperviewzoom Thanks When itemintersects is called on a compoundPath against another compoundPath that overlaps it but has none of its child paths intersecting the others intersects returns false Calling aintersectbfirstChild undefined returns true as it calculates intersecting area but it performs unneeded calculations The isInside method is inadequate because it compares the bounding rects and might return false positives Is there a simpler method of detecting overlapping compoundPathspaths that do not have intersecting child paths Without having to calculate the resulting boolean intersected path Maybe Paperjs could use such a method sketch example img width altScreen Shot at PM src the shapes on the left do not intersect while the ones on the right do v This issues database is used to keep track of bugs and new features For questions and support please visit the Gitter channel instead When moving a Group with its applyMatrix set to false the child items localToGlobal function works for only the first child of a group but fails for any subsequent items in the group This is related to it seems that while fixed the issue for the first item in a group it didnt for subsequent items DescriptionSteps to reproduce See Sketch below for working example Note applyMatrix false is required to see the problem also the setTimeout is required to see the problem I had originally experienced this issue with Raster images and was getting the same problem in the onLoad callback javascript applyMatrix false fails applyMatrix true works g new GroupapplyMatrix applyMatrix r new ShapeCircle fillColor red radius r new ShapeCircle strokeColor green radius gaddChildr gaddChildr fails setTimeout consolelogGroups position before move gposition gpositionx consolelogGroups position after move gposition if r localToGlobal equalsr localToGlobal consoleerror FAIL consolewarnOK positions r position r position consolewarnOK matrices r matrix r matrix consolewarnOK parents positions r parentposition r parentposition consolewarnOK parents matrices r parentmatrix r parentmatrix consoleerrorFAIL Items localToGlobal r localToGlobal r localToGlobal consoleerrorFAIL Groups localToGlobal glocalToGlobal Link to reproduction testcase Please link to a testcase for reproduction ideally as a repository with a packagesjson that installs all required dependencies to reduce confusion Note Failure to provide a testcase for reproduction purposes will result in the issue being closed Sketch reproducing issue Expected result Two identical items contained in a parent Group should give the same value for itemlocalToGlobal after moving the parent Actual result is that the first item in the group gives the correct localToGlobal value but the second returns a value as if the parent had not moved Additional information Paper version ChromeOS Version Official Build bit 