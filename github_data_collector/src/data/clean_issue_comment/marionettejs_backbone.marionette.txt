We cannot move forward with nondestructive view regions without moving to a vanilla dom api The vanilla should be the default but we should extract the jquery one for legacy projects Thisll also mean that for the most part users of the jquery dom api will continue to use onRender to manage children rather than onReady such that children will need to be rebuilt any time the parent layout changes If you call getRegion during a region before isRendered is true youll get a callstack error We should throw a better error in these situations An iteration and replacement for This is starting to feel really good This is a WIP and Ill add more notes here shortly but I wanted to get it out for I do think theres a handful of things we can introduce in a v x as well as some small deprecations that can be made for the breaking changes There are actually few breaking changes I believe the breaking changes that are there are minor and like inconsequential for most users I havent done perf tests yet but I feel moderately confident this will be more performant and again I havent tested it but I believe this makes rendering views nondestructive to children I will work on documenting changes as well as breaking up this PR into sane commits as well as making v x PRs for features and deprecations we can do now But this I think is a good start marionettejsmarionettecore Breaking Changes Region no longer accepts a jquery instances as el el el should be used instead of el el This removes regions dependencies on jquery As previously discussed the not documented allowMissingEl is removed however the reasoning for adding this flag in the first place is not an issue with this revision Both addregion and removeregion events were removed Theyre even less useful now than they were previously and theres a new hook for when regions are bound to the view bindregions that should cover any use case this previously had This should make rendering cheaper overall as well Regions no longer empty on render This may be the biggest breaking change to watch out for However for the general case where the user is setting the children in onRender the nd show will handle the empty effectively in the same way as before But there may be some cases where conditional child renders will no longer empty out the previous view Users will need to handle these cases now but this also should allow children to be created once in an onReady and child views may not need to be rerendered at all when the parent is rendered Not documented but Regions ui allowed the user to build complex selectors such as regionName uifoo uibar producing regionName foo bar This change prevents that and requires a single ui only Not only is the complex selector not recommended anyways this prevents needing to requery the selector and the already queried ui is used instead Not documented but defining a Region on a views region hash allowed the user to pass either and instance of a region or a region class js regions foo myRegion bar MyRegionClass Both of these options are no longer supported as an el selector is required to be managed by the view and both of these options prevent that However allowing the view to maintain regions outside of the view is problematic and certainly makes showChildView difficult to understand While I doubt many people are using this feature anyways the way to support these options is js const MyRegionClass Regionextend el foo some predefined selector const MyView Viewextend initialize myRegion thismyRegion myRegion regions bar el foo regionClass MyRegionClass Though largely considered a bug if a user was setting up regions to be within a child view this will no longer work It should be documented however that using addRegion or addRegions after the view is rendered will query all of the children until the render in which it will only query the rendered template It might be best to suggest simply adding a definition to myViewregions and then rerendering Regions are no longer instantiated prior to Viewinitialize This shouldnt really be an issue as getting a region will render and instantiation the region needed but if someone was doing something strange and expecting the region init to be prior to the views init it would technically be breaking The el on a region prior to showing a view was possibly the selector if instantiated with a selector Now it will always be a DOM element or undefined if nothing was found by the query It might be an issue for users who instantiate a region that does a global look up for DOM that didnt exist at the time of instantiation Regionreset was removed In this context it is no longer needed New Features View ready event indicating the best spot to attach children Application region can now be defined as a function returning a region or region definition RegionsetElement was made public and properly handles the various attached states of the elements This functionality required in my tasks very often Can you add it to export along with View Region Object I have found a couple of things so far not mentioned in the upgrade guide filter of a CollectionView is now viewFilter and parameters have changed sortfalse on a CollectionView should now be sortWithCollection false Also the depreciated section of the upgrade guide in the docs is not displaying correctly A collectionview renders on addChildView and a view renders with getRegion in both of these cases we should prevent the render if these items are occurring inside of a beforerender event by keeping track of a private isRendering flag It can iterate over the reset events previousModels This prevents a collectionreset from removing customly added views We should also indicate that child view was created from a collection model rather than using thischildrenfindByModel to account for views added from a collectionview that do not have the collections model We should add a custom index so that we can find children by the custom index All of this can be private API This event is analogous to the regions show event What it describes is that children were attached to the collection view Yes if they werent already rendered they were rendered but children only get rendered once so for the most part unless children are added to the view no child is rendered at all on subsequent triggers of this event after the first instance javascript const myCollection new BackboneCollection num num num num const myCollectionView new CollectionView collection myCollection function countRendersevent let count thischildreneachchild ifchildisRendered count consolelogevent count myCollectionViewon beforerenderchildren partialcountRenders beforerenderchildren renderchildren partialcountRenders renderchildren someRegionshowmyCollectionView beforerenderchildren renderchildren myCollectionViewsetComparatornum beforerenderchildren renderchildren Currently in v if a region is destroyed the view the region belongs to will not trigger the removeregion event They are only triggered if viewremoveRegionname is used All that method does is trigger the events and destroy the region It seems minor but inconsistent Seems like removeReferences and the remove events could be triggered off of the regions destroy event Of course that means adding a listener for each region instance which is less than ideal Custom Elements are gaining traction as the best way to create interoperable components for web Ionic the popular mobile framework is being rewritten with custom elements Angular is making Custom Element a first class citizen By migrating to Custom Element Marionette would align with current web development technology and opens the door to easier interoperability The code would be simplified a lot since Custom Elements already implement features like attachdetachconnectdisconnect lifecycle events Implementation could be done with class mixins like is skatejs and elix are doing SkateJS allows to customize the rendering with a similar concept as Marionette setRenderer using mixins instead of a class method Marionette would provide withEvents withUI withBehaviors etc mixins with each functionality implemented and a withView mixin with all features This would allow to customize the View class as needed The default one should be import withView from marionette const View withView if only events is used the user could do import withEvents from marionette const SimpleView withEvents Is has some drawbacks like being a big breaking Pros Align with current web technology Remove hard dependency on Backbone Lesssimplified code First class interoperability with other frameworks Cons Big breaking change No destroy lifecycle for view Not possible to create a CollectionView with ulli tags the custom element name must be separated by a dash 