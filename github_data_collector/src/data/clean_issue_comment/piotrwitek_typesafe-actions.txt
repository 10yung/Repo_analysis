I used typescript typesafeactions v and I created Saga common function like this ts export default function createAsyncSagaT P T P T P asyncActionCreator AsyncActionCreator T P T P T P promiseCreator PromiseCreatorFunctionP P return function sagaaction ReturnTypetypeof asyncActionCreatorrequest try const result isPayloadActionP action yield callpromiseCreator actionpayload yield callpromiseCreator yield putasyncActionCreatorsuccessresult catch e yield putasyncActionCreatorfailuree With this common function I was able to create a single line of sagas like this const getUserProfileSaga createAsyncSagagetUserProfileAsync getUserProfile but in v i cant use this source code becuase of AsyncActionCreatorBuilder error message is Type T P does not satisfy the constraint T T P ommited How do I change my source code Description When i use object map style to create reducer i find ts can not get the type of action and state A clear description of what the bug is Mandatory info img src img src How to Reproduce You have two options fill in a codesandbox template or provide full working code example CodeSandbox Link Codesandbox will speed response time and your issue will be prioritized because its easier to analyze PASTE HERE your codesandbox link No CodeSandbox Link If no codesandbox then please provide a full working code example below including actions reducers and your custom types used in the example Code snippets are not enough because they are out of context to analyze your case we need a full working example ts this code is not work export const reducer createReducerITypeState ITypeActionsdefaultTypeState getTyperootActionsomeActionssuccess state action producestate draft todo this code is work export const reducer createReducerITypeState ITypeActionsdefaultTypeState Success state action producestate draft todo Expected behavior when use getType function in object map style ts can get the correct type for action and state A clear description of what you expected to happen Suggested solutions How could we solve this bug What changes would need to be made Project Dependencies TypesafeActions Version TypeScript Version tsconfigjson ts compilerOptions baseUrl outDir dist paths src module es target es lib es dom sourceMap true allowJs true jsx react moduleResolution node forceConsistentCasingInFileNames true noImplicitReturns true noImplicitThis true noImplicitAny true importHelpers true strictNullChecks true suppressImplicitAnyIndexErrors true noUnusedLocals true exclude nodemodules build scripts acceptancetests webpack jest srcsetupTeststs Is your feature request related to a real problem or usecase A clear description of your problem or usecase I have written a generic epic that accepts an async action as a parameter typescript export const genericHandler TRequestType extends string TSuccessType extends string TFailType extends string TModel asyncAction AsyncActionCreatorBuilder TRequestType RequestPayloadTModel TSuccessType SuccessPayloadTModel TFailType FailurePayloadTModel const epic Epic epic input action types union manually specifying PayloadAction TRequestType RequestPayloadTModel PayloadActionTSuccessType SuccessPayloadTModel PayloadActionTFailType FailurePayloadTModel output action types union manually specifying PayloadAction TRequestType RequestPayloadTModel PayloadActionTSuccessType SuccessPayloadTModel PayloadActionTFailType FailurePayloadTModel RootState Services action state apiService some source code The type of the aysncAction parameter is AsyncActionCreatorBuilder In the reduxobservable Epic generic I manually specify the PayloadAction types for Input and Output actions in the stream Describe a solution including usage in code example A clear description of the solution including usage with complete code examples nicely formatted with ts tags especially if thats a new api proposal Is there any way to automatically generate the PayloadAction types to reduce complexity Is it possible to derive the PayloadAction union types from AsyncActionCreatorBuilder to reduce complexity typescript imports for RequestPayload SuccessPayload FailurePayload etc export const customEpicCreatorA TRequestType extends string TSuccessType extends string TFailType extends string TModel asyncAction AsyncActionCreatorBuilder TRequestType RequestPayloadTModel TSuccessType SuccessPayloadTModel TFailType FailurePayloadTModel const epic Epic Payload type union automatically generated for input and output types from AsyncActionCreatorBuilder object GeneratePayloadActionTypesasyncAction GeneratePayloadActionTypeasyncAction RootState Services action state apiService some source code export const customEpicCreatorB TRequestType extends string TSuccessType extends string TFailType extends string DifferentRequestObject DifferentSuccessObject DifferentFailObject asyncAction AsyncActionCreatorBuilder TRequestType DifferentRequestObject TSuccessType DifferentSuccessObject TFailType DifferentFailObject const epic Epic Payload type union automatically generated for input and output types from AsyncActionCreatorBuilder object GeneratePayloadActionTypesasyncAction GeneratePayloadActionTypeasyncAction RootState Services action state apiService some source code Who does this impact Who is this for Who is this for All users TypeScript users Yourself People using X Y Z etc Typescript users Describe alternatives youve considered optional A clear and concise description of any alternative solutions or workaround youve considered I tried using ActionTypetypeof asyncAction but this generates type asyncAction request PayloadActionCreatorTRequestType RequestPayloadTModel success PayloadActionCreatorTSuccessType SuccessPayloadTModel failure PayloadActionCreatorTFailType FailPayloadTModel I think this is because I am passing in the parameter type as an AsyncActionCreatorBuilder Additional context optional Add any other stuff you need like links or related issues I just upgraded from to following the migration guide I replaced the methods with their deprecated counterparts and I was only using createStandardAction everywhere so it was simple However the types were still broken after that There were type is unknown errors everywhere in the redux code which I think stemmed back to the createReducer or the combineReducers not emitting the right type RootState was suddenly full of unknowns as well I dont have a reproduction for this but I think more must be breaking than just the action creator functions Is your feature request related to a real problem or usecase Add support for an error field to createAction so it is compliant with Flux standard action specification This will open the possibility to use typesafeactions with other solutions or applications that are relying on that pattern Describe a solution including usage in code example How it would work typewise Most probably an optional error field added to the base Action type ts type Action type string error boolean How it would work at runtime I would go with a forced convention by having a payload to be an instance of Error easy to implement backward compatible does not change API and I think thats the most popular option This would automatically set the error property to true but also it could allow leveraging conditional types to refine Action type even further to show or hide error property from the action type That would be the most optimal solution Who does this impact Who is this for All users Describe alternatives youve considered optional A clear and concise description of any alternative solutions or workaround youve considered Additional context optional Related Actions TypeConstant Action EmptyAction PayloadAction PayloadMetaAction Creators ActionCreator EmptyActionCreator PayloadActionCreator PayloadMetaActionCreator ActionCreatorTypeMetadata Builders ActionBuilder ActionCreatorBuilder AsyncActionCreatorBuilder API Docs need to be updated to v Tutorial need to be updated to v Is your feature request related to a real problem or usecase There are a few type helpers to create action types compatible with typesafe actions most important ones are ActionBuilder and ActionCreatorBuilder which other more advanced types are leaning on especially new AsyncActionCreator helper type with tuple Payload Meta type It would be good to extend them with some particular edge case which might be useful in some cases as an escape hatch ts const fn a AsyncActionCreator FETCHUSERSREQUEST any FETCHUSERSSUCCESS any FETCHUSERSFAILURE any any afailure it is THPayloadActionCreatorFETCHUSERSFAILURE any but it should be THPayloadMetaActionCreatorFETCHUSERSFAILURE any any return a Describe a solution including usage in code example ts type Result ActionCreatorBuildertype any any current payload any PayloadActiontype any expected payload any meta any PayloadActiontype any any type Result ActionBuildertype any any current type type payload any expected type type payload any meta any Who does this impact Who is this for All TS Users as an escape hatch Describe alternatives youve considered optional A clear and concise description of any alternative solutions or workaround youve considered Additional context optional Add any other stuff you need like links or related issues Update internal validation functions inside srcutilsvalidationts using new TS Assertion Functions