Current build fails with openssl v errors reqwest is to blame after some digging easiest fix was to update reqwest to and make two small changes in pesymbolsrs which allowed for successful build Using the cors lib with express Created a white list of allowed domains and check each request against the white list For production use it s best not to allow all origins Instead create a white list of allowed domains and check each request against the white list failed to run custom build command for openssl v process didnt exit successfully rootxoritargetdebugbuildopenssl a db a c e buildscriptbuild exit code stderr thread main panicked at Unable to detect OpenSSL version rootcargoregistrysrcgithubcom ecc db ec openssl buildrs note Run with RUSTBACKTRACE for a backtrace Your toolsoftware have been inventoried on Rawsecs CyberSecurity Inventory What is Rawsecs CyberSecurity Inventory An inventory of tools and resources about CyberSecurity This inventory aims to help people to find everything related to CyberSecurity Open source Every information is available and up to date If an information is missing or deprecated you are invited to help us Practical Content is categorized and table formatted allowing to search browse sort and filter Fast Using static and client side technologies resulting in fast browsing Rich tables search sort browse filter clear Fancy informational popups Badges Shields Static API Twitter bot More details about features here Why Specialized websites Some websites are referencing tools but additional information is not available or browsable Make additional searches take time Curated lists Curated lists are not very exhaustive up to date or browsable and are very topic related Search engines Search engines sometimes does find nothing some tools or resources are too unknown or nonreferenced These is where crowdsourcing is better than robots Why should you care about being inventoried Mainly because this is giving visibility to your tool more and more people are using the Rawsecs CyberSecurity Inventory this helps them find what they need Why the badge The badge shows to your community that your are inventoried This also shows you care about your project and want it growing that your tool is not an abandonware Also we took time to inventory your tool and you are gaining visibility from that we added your tool to our list to make it known now it is your turn to add the badge to your project README to help our project being known Ok but You should think I asked nothing to you I dont need visibility orand I dont like your badge your are free not to use it As of now CFG is displayed in GUI It would be of great help if that graph is outputted along with other output files A lot of papers talk about malware detection using CFG analysis so providing CFG which you are generating anyway is much helpful Along with disasm functions and import files you can output cfg file which has cfg in form of adjacency matrix or adjacency list when I enable emulationenabled in xorijson and give a sample for analysis But it keeps on running no results will produce Is there anything I missed And what about the time to get the output after enabling emulation Rather than having a react app why dont you just have a WASM app I noticed yesterday that much of Xori instruction decoding maps pretty directly to chunks of Capstone decoding logic Since that appears to be the case for so much of xoris decoder does it make sense to use capstoners directly I noticed in your slides that you mention fixing a few capstone bugs in the process of rewriting so maybe those fixes could be upstreamed If the motivator for decoding in rust is avoiding memory bugs another thought might be to see about parcelling out Xoris x decoder and seeing about replacing the capstone decoder upstream Barring any of that it would be good to know that Xoris x decoding very closely derives from Capstones implementation much like Capstone does in indicating its LLVM origins especially if bugs were found in Xoris decoder to know that they should be upstreamed even the disassembly mapping tables are the same as Capstones and those do change from time to time a nice part of capstoners as a backend means the bar for supporting any other Capstonebacked arch is a lot easier