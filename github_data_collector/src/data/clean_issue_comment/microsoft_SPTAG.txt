Describe the bug As title StopAll should equivalent to RemoveAll When incrementally updating the index removingadding vectors how much should I care to rebuild the index from time to time Or only addingremoving vectors in an existing index is enough Describe the bug Longrunning python processes using the SPTAGClientpy library which hold a SPTAGClientAnnClient object in memory and frequently call the SPTAGClientAnnClientSearch method will result in a slow but obvious and linear in number of searches memory leak To Reproduce get an empty but compiled index you may do this in any environment but to reproducibly do it in docker git clone the repo commit fdcd as of writing docker build t sptag docker run rm it sptag bash build an example index the following is a modification of the example in the python readme and assumes that you have the compiled SPTAG library as well as numpy installed python import SPTAG import numpy as np n def testBuildalgo distmethod x out i SPTAGAnnIndexalgo Float xshape iSetBuildParamNumberOfThreads iSetBuildParamDistCalcMethod distmethod if iBuildx xshape iSaveout x nponesn dtypenpfloat npreshapenparangen dtypenpfloat n testBuildBKT L x tmptestindices exit start the server I used the following for serverini Service ListenAddr ListenPort ThreadNumber SocketThreadNumber QueryConfig DefaultMaxResultNumber DefaultSeparator Index ListBKT IndexBKT IndexFoldertmptestindices and launched the services with sh nohup appReleaseserver mode socket config serverini do the memory profiling at a high level here we are using the builtin tracemalloc to track the number of memory blocks reserved for each python object taking memory snapshots every requests and then trying a few other things intentional GC intentional index object deletion sleep looking at the resulting memory diffs and observing that the size of memory allocated as a result of AnnClientSearch calls grows with the number of requests python import gc import tracemalloc tracemallocstart import SPTAGClient import numpy as np import time SNAPSHOTREQUESTNUMBERS FSNP tmpafter requestssnp GCSNP tmpafter requeststhengcsnp GCDELSNP tmpafter requeststhengcdelsnp GCDELGCSNP tmpafter requeststhengcdelgcsnp GCDELGCSLEEPSNP tmpafter requeststhengcdelgcsleepsnp def makesnapshotsforcegcFalse index SPTAGClientAnnClient while not indexIsConnected timesleep printconnected indexSetTimeoutMilliseconds v npones dtypenpfloat dump once before weve made any requests tracemalloctakesnapshotdumpFSNPformat record a trace after and requests for i in range indexSearchv Float False if forcegc gccollect if i in SNAPSHOTREQUESTNUMBERS printrecording snapshot at formati tracemalloctakesnapshotdumpFSNPformati immediately force a garbage colleciton and take a snapshot gccollect tracemalloctakesnapshotdumpGCSNPformati delete the index and snapshot del index tracemalloctakesnapshotdumpGCDELSNPformati gc after delete gccollect tracemalloctakesnapshotdumpGCDELGCSNPformati wait a minute and gc timesleep tracemalloctakesnapshotdumpGCDELGCSLEEPSNPformati def summarizesnapshotresults reqsnapshots i tracemallocSnapshotloadFSNPformati for i in SNAPSHOTREQUESTNUMBERS diffs i i reqsnapshots i comparetoreqsnapshots i lineno for i i in zipSNAPSHOTREQUESTNUMBERS SNAPSHOTREQUESTNUMBERS now also do the gc del sleep items ilast SNAPSHOTREQUESTNUMBERS reqsnapshots gc tracemallocSnapshotloadGCSNPformatilast reqsnapshots gcdel tracemallocSnapshotload GCDELSNPformatilast reqsnapshots gcdelgc tracemallocSnapshotload GCDELGCSNPformatilast reqsnapshots gcdelgcsleep tracemallocSnapshotload GCDELGCSLEEPSNPformatilast diffs ilast gc reqsnapshots gc comparetoreqsnapshots ilast lineno diffs gc gcdel reqsnapshots gcdel compareto reqsnapshots gc lineno diffs gcdel gcdelgc reqsnapshots gcdelgc compareto reqsnapshots gcdel lineno diffs gcdelgc gcdelgcsleep reqsnapshots gcdelgcsleep comparetoreqsnapshots gcdelgc lineno demonstrate that for each snapshot diff the largest increase in memory was related to invoking AnnClientSearch for i i diff in diffsitems print comparing memory usage between requests and requestsformat i i find the reference to AnnClientSearch for idx d in enumeratediff try if SPTAGClientAnnClientSearch in dtracebackformat annsearchidx idx dannsearch d break except IndexError continue print SPTAGClientAnnClientSearch is out of for new allocationsformat annsearchidx lendiff print new KiBformatdannsearchsizediff print total KiBformatdannsearchsize print newformatdannsearchcountdiff print totalmemoryblocksformatdannsearchcount for line in dannsearchtracebackformat printline print if name main printNOT FORCING GARBAGE COLLECTION makesnapshotsforcegcFalse summarizesnapshotresults printFORCING GARBAGE COLLECTION makesnapshotsforcegcTrue summarizesnapshotresults Expected behavior I would expect roughly constant memory allocation size for the search index regardless of the number of requests previously submitted Screen output the following was the output of the above test script on my laptop in the current master commit docker container NOT FORCING GARBAGE COLLECTION connected recording snapshot at recording snapshot at recording snapshot at recording snapshot at recording snapshot at recording snapshot at comparing memory usage between requests and requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between requests and requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between requests and requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between requests and requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between requests and requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between requests and gc requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between gc requests and gcdel requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between gcdel requests and gcdelgc requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData comparing memory usage between gcdelgc requests and gcdelgcsleep requests SPTAGClientAnnClientSearch is out of for new allocations new KiB total KiB new totalmemoryblocks File appReleaseSPTAGClientpy line return SPTAGClientAnnClientSearchself pdata presultNum pvalueType pwithMetaData Desktop please complete the following information OS iOS Browser chrome Version commit fdcd Describe the bug When I run server in docker nothing happens To Reproduce Steps to reproduce the behavior git clone cd SPTAG docker build t sptag docker run it entrypoint bash sptag cd Release server Expected behavior server binary should print list of parameters if not provided Desktop please complete the following information OS Ubuntu Version eg Additional context I also tried building SPTAG locally but the problem persists When I run client it works and prints list of parameters it expects but running server binary does nothing for now the index build and index search go well in dataset which dimension is bigger than However when i use the random dataset M there is a Segmentation fault the detail position is as follow Start to build BKTree BKTree built build RNG graph Parallel TpTree Partition begin Segmentation fault here So i wonder whether there exist a parameter that limits the input dataset dimension Describe the bug Hello everyone There is an issue when trying to build from the repo with CMAKE the problem seems to be that CMAKE cannot find Boost and a rapid google search does not give me an answer whether I can install Boost or whether I should change the compiler To Reproduce To reproduce I have tried it both on my machine WSL cmd Powershell and on a DSVM Ubuntu I git cloned the project then from the SPTAG repo did mkdir build then cd build cmake make or the adapted syntax depending on the OS Hi when i first cmake the file it occurs a mistake SPTAGmasterAnnServicesrcCoreBKTBKTIndexcpp error expected primaryexpression before token ptrmpTreesBuildTreesTptr How do i solve it This provides further detail on how to build SPTAG on Ubuntu Install swig cmake and boost requirements for SPTAG Building SPTAG Note that there is a boost version mismatch issue reported here Where only is compatible at the moment This provides an endtoend example for developers to get started with SPTAG on an image dataset Key additions Jupyter notebook example that shows a user how to do visual similarity search on a public image dataset Downloads images extracts features from images and using SPTAG to perform the similarity search Helper class featuresextractorpy to do some image processing and extraction of features from images this class is called from the notebook This PR aims to address the following requests 