 Background Required background information to understand the PR Link here any related issues Following up the discussion here This adds the resSeq to the target headers with the name XVegetaSeq This also add a new unit test to check that the header is equal to the resSeq Checklist x Git commit messages conform to community standards x Each Git commit represents meaningful milestones or atomic units of work x Changed or added code is covered by appropriate tests Question I wonder whether it is possible if we want to test TWO urls within one stress test and we may want to distribute different amount of requests to each url every second How to implement that if we can do Thanks in advance I have latest build vegeta windowsamd zip when i launch following on Nginx Welcome to nginx page echo GET vegeta attack duration s bad method GET oops Question I have correctly prepared relevant tools including dep and make but we cannot access golangorg throughout the nation so each build ends up with similar mistakes as the following The following issues were found in Gopkgtoml unable to deduce repository and source type for golangorgxnet unable to read metadata unable to fetch raw metadata failed HTTP request to URL Get dial tcp connect connection timed out Even though I tried to use a proxy it seems that dep just cannot use the proxy So my question is how to compile vegeta in such a network environment Thanks a lot in advance If you do not respect this template your issue will be closed Make sure to browse the opened and closed issues before submit your issue Proposal Write your feature request in the form of a proposal to be considered for implementation Option The proposal is to attach the ResultSeq to the Target that is passed to the Targeter ResultSeq is set before the Targeter is called Therefore adding the a field TargetSeq and set it to the same value is a possibility I believe this one can be backward compatible and a low cost option Option Add a new option to the Attacker that allows the user to provide a correlation ID generator this can be a function that returns a string Add the generated correlation ID to the target and the Result in the Attackerattack method Background Describe the background problem or need that led to this feature request We use vegeta for load testing and we report Results for slow queries We would love to have a way to correlate a Result to the request that was made to help us analyze if there is a systematic problem with particular queries that we use We use vegeta in library mode and are able to store the requests We would want to have a correlation id and we believe that the ResultSeq could be it Note I recognized that it may seem related to to which you answer that server logs could be used However I see cases where this may be hard Logging all requests on the server may affect the performances that we trying to test In other cases we may not have that possibility IE we are sometimes load testing against vendors and have little visibility into their logs Workarounds Are there any current workarounds that youre using that others in similar positions should know about By providing a custom http client that intercepts the request and response However this means that the body may be read multiple times Add initial support for HTTP QUIC This might or might not work based on the server in used and should be treated as experimental until the standard stops being an IETF Draft The PR brings it just to the initial state where you can call a server with http flag but it might or might not work based on the supported version of QUIC on the server As part of the change I also had to check for the type of the Transport used thus removing a possible panic While it could have been created as a separate PR it is an integral part of this change Also most of the changes in gomod are mostly the result of running go mod tidy which was not ran before Testing was not fully complete for this PR but I welcome the discussion on the best course of action on how to do so Background QUIC is the underlying communication in uncoming HTTP This PR adds the basic functionality based on the latest version of the most common open source quic implementations in Go Checklist x Git commit messages conform to community standards x Each Git commit represents meaningful milestones or atomic units of work Changed or added code is covered by appropriate tests If you do not respect this template your bug report issue will be closed Version and Runtime Version Commit c b e be df c a f a f d Runtime go darwinamd Date T Z Expected Behaviour I wanted to have vegeta issue a plain text HTTP call to my example application I believe elsewhere this is known as a prior knowledge situation I ran echo vegeta attack duration s rate s h c tee resultsbin vegeta report following the examples and hopefully telling vegeta to send only one request through my rate option is intended to express one request every two seconds and two seconds is the duration of the attack I expected that from looking at my applications verbose logs I would see the same request as issued by curl http priorknowledge Actual Behaviour My applications logs show a different request coming in Here is the initial log of the vegeta request I am using a Nettybased server these logs are what Netty can output to help diagnose issues FINE id x e ab L R READ B a b c d e f a f e d a PRI HTTP d a d d a d a SM a e a a e d d A b f e a be d EGMt ff b d ab a d c a a b PzuJkX b e f Here are the curl logs FINE id x e dc L R READ B a b c d e f a f e d a PRI HTTP d a d d a d a SM d f ff a be d GM ff a a e d d b tA f e a b c ab b d e a zPS f a Steps to Reproduce See above you should be able to see differences with any arbitrary HTTP aware serverendpoint Additional Context No additional Github issues I raise this because vegeta reports that there was a timeout while reading the body Error Set nethttp request canceled ClientTimeout exceeded while reading body whereas the curl request has no such issues I am no kind of HTTP expert so perhaps the problem lies elsewhere Thanks for a neat little tool I added the headers of a Target thats been hit in the Result on vegeta capture Does vegeta sends chunk data when TransferEncoding header is set to chunked while sending data