Analogous to Components the builder for MultiSelect is provided by the new object Fragments More fragments might be added the same way This is just a collection of missing libgdx features which could be implemented to be feature complete with the Swing implementation modifiers eg texture modifiers are graphical tilesets fully implemented A component is sometimes not correctly rendered Expected behavior The component shall be aligned correctly regarding the alignment Actual behavior Sometimes the component is cut at the edge of the screen if using the current master of Zircon Steps to reproduce the bug Restart the following app a couple of times to reproduce the issue kotlin package orghexworkszirconexamplescomponents import orghexworkszirconapiCP TilesetResources import orghexworkszirconapiColorThemes import orghexworkszirconapiComponents import orghexworkszirconapiSwingApplications import orghexworkszirconapiapplicationAppConfig import orghexworkszirconapicomponentComponentAlignment import orghexworkszirconapidataSize import orghexworkszirconapiextensionsbox import orghexworkszirconapiscreenScreen import orghexworkszirconinternalcomponentrendererNoOpComponentRenderer object PanelsExampleIssue private val theme ColorThemestechLight private val tileset CP TilesetResourcesrexPaint x JvmStatic fun mainargs ArrayString val tileGrid SwingApplicationsstartTileGridAppConfignewBuilder withDefaultTilesettileset withSizeSizecreate build val screen ScreencreatetileGrid val component Componentsbutton withDecorationsbox withSize withComponentRendererNoOpComponentRenderer withAlignmentWithinscreen ComponentAlignmentBOTTOMRIGHT build screenaddComponentcomponent screendisplay screentheme theme Request for feature MultiSelect I would like to see a small Component to select one value out of a list of possible values The typical UIElement would be a drop down menu but that would need an overlay for the value list so the simpler way would be to have a leftbutton and a rightbutton to scroll through the values Or speaking in images two examples example gif Rationale There are quite some Components provided by Zircon but none to have a simple way of selecting one value of a fixed list of possibilities There are radio buttons but you have to put those together yourself and it takes a lot of space When you only have one line and a specific width the MultiSelect like proposed is an easy solution Suggested way of implementing I already implemented it in my project as Fragment but I would expect it to be available in the Components class It wouldnt be hard to provide it as both a Component and a Fragment I am ready to provide a pull reqeust for this feature soon Cursor is still blinking on the screen after modal is closed Run example enter sth in the text area and press ESCAPE The dialog is closed but the cursor is still blinking Steps to reproduce the bug kotlin package orghexworkszirconexamples import orghexworkszirconapiColorThemes import orghexworkszirconapiComponents import orghexworkszirconapiGameComponents import orghexworkszirconapiSwingApplications import orghexworkszirconapiapplicationAppConfig import orghexworkszirconapibuildercomponentModalBuilder import orghexworkszirconapicolorANSITileColor import orghexworkszirconapicolorTileColor import orghexworkszirconapicomponentComponentAlignment import orghexworkszirconapidata import orghexworkszirconapiextensionsalignmentWithin import orghexworkszirconapiextensionsbox import orghexworkszirconapiextensionsshadow import orghexworkszirconapigameGameArea import orghexworkszirconapigamebaseBaseGameArea import orghexworkszirconapigraphicsSymbols import orghexworkszirconapiscreenScreen import orghexworkszirconapiuievent import orghexworkszirconinternalcomponentmodalEmptyModalResult object CustomGameAreaExample val theme ColorThemesadriftInDreams class CustomGameAreavisibleSize Size D actualSize Size D BaseGameAreaTile BlockTile initialVisibleSize visibleSize initialActualSize actualSize JvmStatic fun mainargs ArrayString val gameArea CustomGameAreaVISIBLESIZE ACTUALSIZE val theme ColorThemesamigaOs makeCavesgameArea val tileGrid SwingApplicationsstartTileGridAppConfignewBuilder withSizeVISIBLESIZEto DSize enableBetaFeatures build val screen ScreencreatetileGrid screenaddComponentGameComponentsnewGameComponentBuilderTile BlockTile withSizeVISIBLESIZEto DSize withGameAreagameArea build screendisplay Threadsleep openModalscreen private fun openModalscreen Screen level Int val modalPanel Componentspanel withSizeSizecreate withDecorationsboxtitle Modal level level shadow build val modal ModalBuildernewBuilderEmptyModalResult withComponentmodalPanel withParentSizescreensize withColorThemetheme buildapply handleKeyboardEventsKeyboardEventTypeKEYPRESSED event if eventcode KeyCodeKEYC closeEmptyModalResult Processed else Pass val closeButton Componentsbutton withTextClose withAlignmentalignmentWithinmodalPanel ComponentAlignmentBOTTOMRIGHT buildapply handleComponentEventsComponentEventTypeACTIVATED modalcloseEmptyModalResult Processed val inputArea ComponentstextArea withTextEnter Text here withAlignmentalignmentWithinmodalPanel ComponentAlignmentCENTER buildapply handleKeyboardEventsKeyboardEventTypeKEYPRESSED event phase if eventcode KeyCodeESCAPE modalcloseEmptyModalResult Processed modalPaneladdComponentcloseButton modalPaneladdComponentinputArea screenopenModalmodal private fun makeCavesgameArea GameAreaTile BlockTile smoothTimes Int val width gameAreaactualSizexLength val height gameAreaactualSizeyLength var tiles MutableMapPosition Tile mutableMapOf gameAreaactualSizeto DSizefetchPositionsforEach pos tiles pos if Mathrandom FLOOR else WALL val newTiles MutableMapPosition Tile mutableMapOf for time in until smoothTimes for x in until width for y in until height var floors var rocks for ox in for oy in if x ox x ox width y oy y oy height continue if tiles Positioncreatex ox y oy FLOOR floors else rocks newTiles Positioncreatex y if floors rocks FLOOR else WALL tiles newTiles tilesforEach pos tile val pos D posto DPosition gameAreasetBlockAtpos D BlocknewBuilderTile withContenttile withEmptyTileTileempty build private val FLOOR TilenewBuilder withCharacterSymbolsINTERPUNCT withForegroundColorANSITileColorYELLOW buildCharacterTile private val WALL TilenewBuilder withCharacter withForegroundColorTileColorfromString buildCharacterTile private val VISIBLESIZE Size Dcreate private val ACTUALSIZE Size Dcreate Modals should inherit the theme from their parent screen Reason If you do not see the theme manually via the ModalBuilder the dialog may be visually distracted Request for a Drop Down controlCombo box control Drop DownCombo box control as you know from all major UI frameworks Suggested way of implementing Probably there should be first a list box developed since then this can be reused for this control Right now some of the component states like disabled TextAreas are not visually apparent to the user This needs to be checked for all states of all components When running LayerTransformerExample the example using the HideModifier is not using transparency kotlin object HideModifier TileTransformModifierCharacterTile override val cacheKey String get ModifierHideModifier override fun canTransformtile Tile true override fun transformtile CharacterTile Tilesempty 