Fixed the following typos occured occurred comparsion comparison braceOccurenceCount braceOccurrenceCount occurence occurrence Describe the bug TraceSourceLoggerProvider is for ILogger to write messages to a TraceListener object attached to a TraceSource object created internally The provider works well with ConsoleTraceListener however does nothing with TextWriterTraceListener Also the same TextWriterTraceListener attached to the other TraceSource objects created in the application codes is not working either while it is working when the listener is not associated with TraceSourceLoggerProvider To Reproduce I had created a few demo projects at And please focus on ConsoleApptraceSourceLoggercsproj Expected behavior TraceSourceLoggerProvider should be working with TextWriterTraceListener TraceSourceLoggerProvider should be working with TextWriterTraceListener shared with other TraceSource objects in the application codes I detected changes in the release branch which have not been merged yet to master Im a robot and am configured to help you automatically keep master up to date so Ive opened this PR This PR merges commits made on release by the following committers wtgodbe Instructions for merging from UI This PR will not be automerged When pull request checks pass complete this PR by creating a merge commit not a squash or rebase commit img altmerge button instructions src width If this repo does not allow creating merge commits from the GitHub UI use command line instructions Instructions for merging via command line Run these commands to merge this pull request from the command line sh git fetch git checkout release git pull ffonly git checkout master git pull ffonly git merge noff release If there are merge conflicts resolve them and then run git merge continue to complete the merge Pushing the changes to the PR branch will retrigger PR validation git push HEADmergerelease tomaster details summaryor if you are using SSHsummary git push gitgithubcomdotnetmaestrobotCommon HEADmergerelease tomaster details After PR checks are complete push the branch git push Instructions for resolving conflicts warning If there are merge conflicts you will need to resolve them manually before merging You can do this using GitHub resolvegithub or using the command line resolvecli resolvegithub resolvecli Instructions for updating this pull request Contributors to this repo have permission update this pull request by pushing to the branch mergerelease tomaster This can be done to resolve conflicts or make other changes to this pull request before it is merged git checkout b mergerelease tomaster master git pull mergerelease tomaster make changes git commit m Updated PR with my changes git push HEADmergerelease tomaster details summaryor if you are using SSHsummary git checkout b mergerelease tomaster master git pull gitgithubcomdotnetmaestrobotCommon mergerelease tomaster make changes git commit m Updated PR with my changes git push gitgithubcomdotnetmaestrobotCommon HEADmergerelease tomaster details Contact NET Core Engineering if you have questions or issues Also if this PR was generated incorrectly help us fix it See Describe the bug The user secrets for a worker service are not accessible inside docker container To Reproduce Steps to reproduce the behavior Create a new NET Core WorkerService project using Visual Studio Or just clone this repo and jump to step Right click on the project click Add Docker Support select Linux Edit the project file and add a Package reference to MicrosoftExtensionsConfigurationUserSecrets as following PackageReference IncludeMicrosoftExtensionsConfigurationUserSecrets Version Because of this issue b A volume mapping of the user secrets directory inside the container by adding following line to the property group DockerfileRunArgumentsv AppDataMicrosoftUserSecretsrootmicrosoftusersecretsroDockerfileRunArguments Modify the file Workercs to access the user secrets public class Worker BackgroundService private readonly ILoggerWorker logger private readonly IConfiguration configuration public WorkerILoggerWorker logger IConfiguration configuration logger logger thisconfiguration configuration protected override async Task ExecuteAsyncCancellationToken stoppingToken while stoppingTokenIsCancellationRequested loggerLogInformationThe secret thisconfiguration secretKey await TaskDelay stoppingToken On powershell or command prompt navigate to the project directory and add user secrets using the command dotnet usersecrets set secretKey secretValue hit F with the Docker debug profile and monitor the output window Notice that the value of the user secret is null Note You can open the Containers window in the VS to check the file contents of the container If you check the path rootmicrosoftusersecrets you will notice the usersecrets directory with secretsjson inside it Expected behavior The output should print the value of the usersecret Screenshots Filesystem and output of the program UserSecretIDAttribute in the assembly Additional context Same program with WorkerService debug profile works well Describe the bug Hi Im using Net Core app with explicit reference to Netstandard library For some reason there is no IOCP and WORKER stats in log when timeout occur From documentation the log part should be present IOCP and WORKER threads will not be shown on NET Core if using netstandard Im using Netstandard which is latest available MicrosoftExtensionsCachingRedis SDK version in use is And here is log that i get ExceptionStackExchangeRedisRedisTimeoutException Timeout performing EVAL inst queue qu qs qc wr wq in ar clientName ActivityService serverEndpoint Unspecifiedcacheamazonawscom keyHashSlot Please take a look at this article for some common clientside issues that can cause timeouts Expected behavior IOCP and WORKER threads should be in log Can you advise me or point me in right direction Describe the bug Having the following StringValues value c var a new StringValues var b new StringValues var c new StringValues When calling stringIsNullOrWhitespacex or StringValuesIsNullOrEmptyx or stringIsNullOrEmptyx Im seeing inconsistent unexpected results To Reproduce Steps to reproduce the behavior c var a new StringValuesnew string var b new StringValuesnew string var c new StringValuesnew string ConsoleWriteLine ConsoleWriteLineA Expected True StringValuesIsNullOrEmptya ConsoleWriteLineA Expected True stringIsNullOrEmptya ConsoleWriteLineA Expected True stringIsNullOrWhiteSpacea ConsoleWriteLine ConsoleWriteLineB Expected False StringValuesIsNullOrEmptyb ConsoleWriteLineB Expected False stringIsNullOrEmptyb ConsoleWriteLineB Expected True stringIsNullOrWhiteSpaceb ConsoleWriteLine ConsoleWriteLineC Expected False StringValuesIsNullOrEmptyc ConsoleWriteLineC Expected False stringIsNullOrEmptyc ConsoleWriteLineC Expected True stringIsNullOrWhiteSpacec Expected behavior c StringValuesIsNullOrEmpty A Expected True False stringIsNullOrEmpty A Expected True True stringIsNullOrWhiteSpace A Expected True True StringValuesIsNullOrEmpty B Expected False False stringIsNullOrEmpty B Expected False False stringIsNullOrWhiteSpace B Expected True False StringValuesIsNullOrEmpty C Expected False False stringIsNullOrEmpty C Expected False False stringIsNullOrWhiteSpace C Expected True True Additional context One of the offending lines that makes the StringValues inconsistency I have the following simple background service public class Worker BackgroundService private readonly ILoggerWorker logger public WorkerILoggerWorker logger logger logger public override async Task StopAsyncCancellationToken cancellationToken await TaskDelayTimeSpanFromSeconds await baseStopAsynccancellationToken protected override async Task ExecuteAsyncCancellationToken stoppingToken while stoppingTokenIsCancellationRequested loggerLogInformationWorker running at time DateTimeOffsetNow await TaskDelay stoppingToken My use case is that I want to carry out cleanup work in the StopAsync method and the cleanup may take some time to finish eg more than seconds etc I am trying to simulate that using the TaskDelay function What I noticed is if I run the app and click CtrlC the app stays in StopAsync for seconds and closes after However if I close the whole CMD window ie click the X button on the command line the app closes completely after around few seconds rather than the seconds specified In both instances the StopAsync method is called Is there a reason for the difference in behaviour or a way to make sure the app only closes after StopAsync completes regardless of how it is closed Is your feature request related to a problem Please describe One consistent problem my team and I keep running into is with dependency injection More specifically forgetting to register a serviceor more recently injecting a class that has more rigid constraints than the interface through open genericscausing runtime exceptions Describe the solution youd like If there already is a solution for this please feel free to point me to it I have tried searching around but havent found any solutions to this However I am quite open to the idea that I may just not have looked closely enough The ideal solution to this would be compiletime checks to avoid the runtime exceptions but this seems unlikely Another way would be to have some standardized tests that run across all classes and check that they can resolve all the dependencies and that the public API works as expected Thanks Describe the bug The current Version of multiple packages MicrosoftExtensionsFileSystemGlobbing ObjectPool weve found by now have the packageIconpng included twice which results in a failure when extracting the zip file Perhaps this doesnt error in VS because the important files like dlls have already extracted at that point To Reproduce Steps to reproduce the behavior Download the package file for version of MicrosoftExtensionsFileSystemGlobbing Extract the zip file See error Expected behavior All files extracted without error Screenshots On cli Using Paket Bottom error in German says The file packageIconpng already exists summary Summary description for IServiceCallSite summary internal abstract class ServiceCallSite to summary Summary description for ServiceCallSite summary internal abstract class ServiceCallSite 