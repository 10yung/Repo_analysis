A quick and dirty fix for cgalmesh part of issue missing regions in cgalmesh output Support for nonuint images and regions is also included This is probably just a starting point for complete fix but maybe it helps anyway While the included bit windows binaries can also be executed on bit windows for creating meshes with large memory demands native bit windows utilities are needed This was requested previously by users in the mailing list Removing selfintersecting elements is extremely important however the current available method meshcheckrepairmeshfix calls meshfix made by Marco Attene et al which can only repair simple surfaces homologous to a sphere We need something more general to deal with complex surfaces such as two intersecting spheres The previous report can be found here Testing image is included in the above report Basically if there are multiple isoloated inclusions same or differnt label inside a background volume of index the surface mesher or D mesher may return the mesh of a subset of these inclusions in a more or less random manner The mesh simplification algorithm used in CGAL does not ensure the output mesh is selfintersection free An alternative or update to Surfacemeshsimplification that ensures selfintersectionfree would be very useful Quite often cgalsurf Surfacemesher class in CGAL x produces an unusually dense node cluster as a result of a focused surface refinement sometimes this refinement can result in an infinite loop which eventually exhausts the system memory This issue was originally reported here A maximum node number count limit was added to iso mesh to prevent the infinite loop but still many users had complained about the suboptimal mesh quality of the mesh with uneven node distributions The previous user reports can be found here mesh mymeshproblem now these functions are partially working but the results are not completely verified Some have examples already need to do this for the rest 