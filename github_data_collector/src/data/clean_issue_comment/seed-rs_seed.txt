Hey guys Im thinking about implementing firstclass support for notonlyRust Web Components Before I write some reasoning about it I would like to know your opinions and experience So what do you think rust input attrs AtValue AtType range AtMin AtMax AtStep Rendered while it should look like this To get a proper behavior value need to be placed after step rust input attrs AtType range AtMin AtMax AtStep AtValue while it should work independent of attributes order So I was doing some experimental UI library and I think I reach state where I can publish this library I didnt add any docs yet but the code is there if anyone would like to help D This is also response for If we want to continue with the discussion I suggest to create a bigger example with nested components so we can compare current and proposed API and architecture properly Then if that example would look promising we would need to rewrite at least realworld example and quickstartwithwebpack After that there will be a chance to merge it into the master because it would be a really big change in I am not sure if opening issue is the right way to tell D I will close this issue after a few days if you think this is not the right place to post about it feel free to close the issue now We should design something like for styles We should design something like for events You can read about custom events here Setup a benchmark with other WASM front end frameworks like Yew Percy Also add Seed to this benchmark which will allow us to compare Seed with frontend JS frameworkslibraries currently Yew is there Point of benchmarking Way to compare with other frameworkslibraries To identify places where we could improve performance To know about performance regressions What do you think about uniting Model Msg update and view Model is represented by Self in this approach rust Page is a trait representing one page of the application pub trait Page type Msg Clone static type View ViewSelfMsg fn update mut self msg SelfMsg order mut impl OrdersSelfMsg fn view self SelfView And the implementation rust deriveDefault pub struct HomePage counter usize deriveClone pub enum Msg Inc impl Page for HomePage type Msg Msg type View NodeMsg fn update mut self msg Msg orders mut impl OrdersMsg match msg MsgInc selfcounter fn view self SelfView div formatGot selfcounter so you can finally rust let app AppbuilderHomePagedefaultbuildandstart This should simplify reasoning because now you only need to learn thing Page trait The rest will be guided by the compiler See Hi We want to make Seeds website and documentation as good as possible If you want to help a little bit please see those issues for more info Feedback for Website Feedback for Readmemd Thank you Hi We want to make Seeds documentation as good as possible Could you help us to make Readmemd better Do you think that something is missing Are code examples good enough too simple too complex too few comments Is it beginnerfriendly Are there any unnecessary sections Did you find a typo Are any parts hard to read or understand Are any parts ugly not formatted or not styled enough Did you find outofdate info or dead links etc Thank you