 Summary Is it a good idea to add vue to the fileTypes in the JavaScript grammars A vue file can also contain html and css The atom with atomvue package installed does a good job of supporting vue however in the script section JavaScript snippets like consolelog they are missing Have you read Atoms Code of Conduct By filing an Issue you are expected to comply with it including treating everyone with respect Do you want to ask a question Are you looking for support The Atom message board is the best place for getting support Prerequisites x Put an X between the brackets on this line if you have done all of the following Reproduced the problem in Safe Mode Followed all applicable steps in the debugging guide Checked the FAQs on the message board for common solutions Checked that your issue isnt already filed Checked that there is not already an Atom package that provides the described functionality Im unsure that any of the above apply as this is based on an issue Im having with GitHub not the atom client itself Description When looking at a PR that includes jsx syntax highlighting fails after a closing bracket for a shorthand jsx fragment is included Steps to Reproduce Create a PR with jsx changes including a shorthand jsx fragment ie on GitHub See that syntax highlighting for the jsx file fails after the ending bracket Expected behavior Syntax highlighting should continue normally after the fragment shorthand Actual behavior Syntax highlighting breaks after the fragment shorthand Reproduces how often Versions Unsure I was directed here from Additional Information NA This Issue is very similar to Steps to Reproduce In Atom create a new Javascript file or edit an existing one Add the following lines of code var matches linematch consolelogJavascript line to follow Select that code andor all code in the file Autoindent Expected behavior These two lines of code are indented to the same level whatever that may be as shown above Actual behavior The second line and all which follow are indented one extra level Edit by rsese to add screenshot autoindentwithregexbrace Reproduces how often Every time Versions atom version Atom Electron Chrome Node apm version apm npm node x atom python git windows visual studio Windows Summary In languages such as Ruby or CoffeeScript Atom has a feature to quickly change a selection inside a string into a template literal Since template literals are supported in JavaScript since ES it would be nice to have the same feature for the language Steps Select any part inside a string enclosed in backticks eg name Press key Selection becomes name Motivation Existing feature in Ruby CoffeeScript and possible other bundled Atom syntax languages Additional context Heres an animation showcasing the feature when working in CoffeeScript cs Summary I have suggestions for scope additionschanges for the treesitter grammar If any of these are warmly received I ll whip up a PR Motivation A barebones grammar is less useful Scope names have value beyond syntax highlighting The suggestions More meta scopes I ve got a custom defineafunction command that behaves differently inside class bodies than it does elsewhere with the Babel grammar I was able to use the metaclassbody scope to tell the difference I d love for that and a few other similar scopes to be added Without scopes it s quite hard to get commands to do different things in different contexts Punctuation All opening braces except in strings of course are scoped as punctuationdefinitionfunctionbodybeginbracketcurly This is inaccurate lots of opening braces don t signal the start of a function body Closing braces are similarly scoped as are square brackets and parentheses If the goal is to give all such punctuation the same scope regardless of context I d suggest these scopes be renamed like eg punctuationdefinitionbeginbrace so that the scope name doesn t imply a context that may or may not be true If these scopes should include information about their context so that s can be distinguished from one another then we need to be a bit more thorough in the grammar Definition vs invocation Both function names and class names are scoped identically between definition and usage class Foo extends Bar let foo new Foo function bazargs bazfalse In this code sample both occurrences of Foo have the scope metaclass Both occurrences of baz have the scope entitynamefunction This is intended behavior as I understand from maxbrunsfeld s comments in past issues like these I m not trying to change how these identifiers appear in default syntax themes But I d like these scopes to be distinguished somehow so that I can make them look different from one another in my own syntax theme if I so choose For functions I d suggest entitynamefunctiondefinition in the definition case and entitynamefunctioncall in the invocation case For classes metaclass is a questionable choice in the first place in my opinion I d suggest entitynameclassdefinition and entitynameclassinstantiation If metaclass needs to be kept for backwardcompatibility that s fine I believe that it s possible to apply two scope names to the same thing Adding to the scope name shouldn t affect their appearance in existing syntax themes Describe alternatives youve considered There arent any short of continuing to use languagebabel Grammars are the underpinning of most of the customization I already do Have you read Atoms Code of Conduct By filing an Issue you are expected to comply with it including treating everyone with respect Do you want to ask a question Are you looking for support The Atom message board is the best place for getting support Prerequisites X Put an X between the brackets on this line if you have done all of the following Reproduced the problem in Safe Mode Followed all applicable steps in the debugging guide Checked the FAQs on the message board for common solutions Checked that your issue isnt already filed Checked that there is not already an Atom package that provides the described functionality Description Note This issues applies only to the Flow JavaScript source type As far as I can tell thats provided by this package but if not then I can redirect this issue elsewhere The CSS grammar is not properly injected for styledcomponents using custom components This appears to be a regression from the treesitter update Steps to Reproduce The following correctly syntax highlights javascript const TestComponent styleddiv h color green The following does not correctly syntax highlight javascript const TestComponent styledUnstyledComponent h color green Versions atom version Atom Electron Chrome Node apm version apm npm node x atom python git Additional Information This issue is closely related to which reproduced the same error in the context of a vanilla JavaScript file That issue was resolved with PR Description A multiline function call causes Atoms autoindenter to perform unexpectedly adding an extra layer to indentation from that call down Steps to Reproduce In Atom create a new Javascript file Write or paste code like the following ifmyBoolean var result MyObjectthisIsAVeryLongFunctionNameWithParametersfirstParam secondParam thirdParam fourthParam fifthParam Select All Autoindent Expected behavior Code formatted like this ifmyBoolean var result MyObjectthisIsAVeryLongFunctionNameWithParametersfirstParam secondParam thirdParam fourthParam fifthParam Note that the close curly brace for the if is aligned with the if statement Actual behavior ifmyBoolean var result MyObjectthisIsAVeryLongFunctionNameWithParametersfirstParam secondParam thirdParam fourthParam fifthParam Note that the close curly brace for the if is indented an extra level All the code which follows will also be indented an extra level including closing function and object definitions In a long file the end can be pretty far over to the right compared to where it should be Reproduces how often Always even in safe mode Versions Atom Electron Chrome Node Windows Pro Additional Information May be related to Prerequisites x Put an X between the brackets on this line if you have done all of the following Reproduced the problem in Safe Mode Followed all applicable steps in the debugging guide Checked the FAQs on the message board for common solutions Checked that your issue isnt already filed Checked that there is not already an Atom package that provides the described functionality Description Optional chaining is currently supported in Javascript files but not in embedded script script tag in HTML It is currently treated as a ternary operator which breaks the detection of the closing tag script since a colon is expected I first reported the issue to languagevue to finally realized it was the case for all embedded scripts img width alt a b a e b e c dec ee src Steps to Reproduce Open a HTML file Within a script tag use the optional chaining operator ie windowtestsomething Expected behavior Closing script tag detected Actual behavior Closing script tag not detected Reproduces how often Always Versions Atom upgraded to OS macOS Mojave version D Prerequisites x Put an X between the brackets on this line if you have done all of the following Reproduced the problem in Safe Mode Followed all applicable steps in the debugging guide Checked the FAQs on the message board for common solutions Checked that your issue isnt already filed Checked that there is not already an Atom package that provides the described functionality Description In atom I am trying to update my syntax sheet that worked with the old syntax parser to take advantage of the treesitter parsers Without any other extension enabled the examples below are just from toggling the use tree sitter parsers option examples below are using Steps to Reproduce Edit by rsese to add code for copypaste javascript function functionNameparam param param function functionNameparam param param functionNameparam param thenresult functionNameparam param then result const newThing calculateparam storegetState Have code like this with tree sitter parsers disabled old syntax parser Enable tree sitter parsers and your code will look like this tree sitter parser Problems seen between the two Line No problems Line No scope present for param Line No scope present for param and param Line Same as line except also no scope present for result Line No scope present for param and store Notes line lets me differentiate result from result in line line lets me differentiate store from param Expected behavior All variables would have the unique scopes to target styles like we could with the old parser Actual behavior New parser does not target some variables with scopes to allow consistent styling with the old parser Reproduces how often Versions Atom Electron Chrome Node v Additional See Prerequisites x Put an X between the brackets on this line if you have done all of the following Reproduced the problem in Safe Mode Followed all applicable steps in the debugging guide Checked the FAQs on the message board for common solutions Checked that your issue isnt already filed Checked that there is not already an Atom package that provides the described functionality Description Comparing the new languagejavascript using treesitter grammar and languagebabel using the old system Im noticing many missing features to the point where I cant use it yet but would like to I hope that this list will help you improve the current highlighting x Missing function parameters scope However in languagebabel arrow functions whose parameters spread multiple lines dont get highlighted nor the function name x Object property access objproperty is not differentiated from declaration ie obj property In languagebabel it seems to use syntaxunquoted for the object property x Missing jsxcomponent to style components differently from classes x Add a spreadsyntax scope I like to enbolden and add a shadow to that specific operator x Missing a dom syntax scope ie for window document navigator etc and a console scope for console const func the function name is not scoped as a function The class properties proposal arrow functions in classes are not scoped as functions eg js class Example notScopedAsFunction scopedAsFunction Missing a method scope if a function was called on an object like thisfunc instead of simply func I think the in negative numbers should be part of the number scope as in languagebabel doesnt really matter this is missing a scope tracked in Bracket matcher doesnt match JSX tags but it does in languagebabel tracked in separate repo Versions 