Running revdeps from sp sp my github fork with development rgdal from RForge librarytestthat librarylandscapemetrics libraryraster Loading required package sp testchecklandscapemetrics Failure spatializelsm returns CRS testspatializelsmR rastercrsresult not equal to rastercrspodlasieccilc Attributes Names string mismatch Attributes Length mismatch comparison on first components Attributes Component string mismatch See rspatialsf rspatialsf rspatialsf rspatialdiscuss for background See rspatialdiscuss comment for a way of testing fixes in a docker container contributed by Jakub Nowosad Not sure how complicated this will be if even possible but maybe we can somehow store results for eg the patch area and other values we need for several metrics during the calculation of calculatelsm so we dont need to calculate them n times This way we could use matrices as inputs What do you think mhesselbarth Example Its nice that all functions are type stable and basically always return a list However maybe it makes sense to add a simplify argument in cases only one RasterLayer is provided and return not a list in this case Hi all I am now working on a different package that in its c functions uses some c code from landscapemetrics eg rcppgetcoocurrencematrix Right now for the development purposes I just copied the cpp files to the new package but probably the better way is to expose the landscapemetrics cpp headers in instinclude What do you think about that Of course there are two possibilities here Just expose the landscapemetrics cpp headers in instinclude or Create a new package landscapeengine with cpp code and exposed headers Does a FAQ vignette makes sense Collect common themes from previous issues here and highlight hidden functionality like todisk marcosci and I just discussed it might be nice to only return a tibble if the package is installed and if not to return a dataframe This would allow to get rid of the tibble dependency Related to Maybe an idea is to split this package into landscapemetrics and eg landscapemetricsengine We could move all core functions ie calculating metrics to the core package and importing it in landscapemetrics This would give exactly the same functionality as now for landscapemetrics and users would experience no difference including all plottingsampling etc functions Thereby we still have this really nice tool for everything related to landscape metrics However if somebody just wants to calculate some metrics straightforward as possible with less dependencies eg on a HPC it would be sufficient to only load landscapemetricsengine As example spatstat does something similar and the package actually loads eg spatstatutils and spatstatdata hey yall just had a quick look on how to parallelize the rcpp stuff and discussed it with Sebastian I think the only thing we would have to change is a single line in the Rcpp code of most of the functions and maybe provide another argument to the function the number of cores to be used could be defaulted to Have a look at rcppgetcoocurrencematrix and tell me what you think the only change is the pragma line r include rcppgetcoocurrencematrixh include rcppcreateneighborhoodh include rcppgetuniquevaluesh include getclassindexmaph include omph Rcppexport IntegerMatrix rcppgetcoocurrencematrixconst IntegerMatrix x const armaimat directions const int numcores const int na NAINTEGER const unsigned ncols xncol const unsigned nrows xnrow stdvectorint classes rcppgetuniquevaluesx stdmapint unsigned classindex getclassindexmapclasses unsigned nclasses classindexsize stdvectorstdvectorunsigned coocmatnclasses stdvectorunsignednclasses create neighbors coordinates IntegerMatrix tmp rcppcreateneighborhooddirections int neighlen tmpnrow stdvectorstdvectorint neigcoords for int row row neighlen row IntegerVector a tmprowrow stdvectorint babegin aend neigcoordspushbackb NAs need an index otherwise they are counted as neighbors of class classindexinsertstdmakepairna nclasses pragma omp parallel for numthreadsnumcores for unsigned col col ncols col for unsigned row row nrows row const int tmp x col nrows row if tmp na continue unsigned focalclass classindex tmp for int h h neighlen h int neigcol neigcoords h col int neigrow neigcoords h row if neigcol neigrow neigcol ncols neigrow nrows const int tmp x neigcol nrows neigrow if tmp na continue unsigned neigclass classindex tmp coocmat focalclass neigclass IntegerMatrix resultnclasses nclasses for unsigned col col coocmatsize col for unsigned row row coocmat col size row resultcol row coocmat col row add names List unames Listcreateclasses classes resultattrdimnames unames return result 