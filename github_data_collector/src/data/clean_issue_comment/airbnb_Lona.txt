 What refactor compiler Tag relevant people for example cc dabbott Summary Question that use other companys design system Contents Hello Im frontend engineer in ecommerce company Our team planning to convesion from legacy to react and I found this project that utilities for design systems But I cant find enough document that I understand this project Is there different from reactsketchapp And If our team apply this in our project How can I do first What Here are the operations well attempt to sync Creating a child page Childmd block within a page Pagemd X Convert Pagemd to a directory containing a READMEmd insert child page block in READMEmd create Childmd page Update the parents URL to point to Page instead of Pagemd Deleting a child page block X Delete Childmd remove the child page block from READMEmd If PageREADMEmd contains no children If its safe to delete Page a directory containing only a READMEmd andor DSStore convert PageREADMEmd to Pagemd x Update selection state in file navigator when opening files Use page icon for a directory with a READMEmd Ill probably try to refactor some of this into another file before merging so the logic in WorkspaceViewController doesnt get too complex There are a lot of low hanging fruits to improve the compiler use a debug helper similar to to add some logs without polluting the output add a entry point for the node package so that you can do lonaccompile from NodeJS without having to shell out allow passing the entire workspace via a files map of some kind on stdin In this pull request I want to add support for the textTransform property for the TextStyles definition as discussed in To Do x Update Docs Update Compiler x Implement TextTransform for JavaScript x Implement TextTransform for Swift iOS x Implement TextTransform for Swift macOS Implement TextTransform for Android not necessarily part of this pull request x Update Lona Studio Tag relevant people for example cc dabbott I noticed that the spread value is missing from the shadow spec Is this a conscious choice It is offered by most design tools and is builtin to CSS It s not a property for CALayer in Cocoa but can apparently be created using shadowPath I am not sure about Android I also notices there is no way to specify an inside shadow not sure how that one plays in the various platforms Hi not sure if this is the right place for this if it isn t please point me to the right one I started to work with the text style format defined by Lona in a project of mine and started to wonder if the texttransform property should be an optional attribute of the text style spec as well I have not made up my mind yet but would love the see discussion of this My thinking is the following While it is not a purely visual property often times in modern UI design allcaps is used as a form of emphasis eg for text labels much like you would use the bold cut of a font The texttransform can therefore very well be part of a specific type style I was wondering what other people think on this matter Best Christoph The problem Lonas component files are hard to merge This is an important problem to solve since Lona components are specifically designed to be the source of truth for large teams and edits made by people will be fairly common Component files should be at least as mergefriendly as code files changes to unrelated lines are generally automatic changes to the same lines are a nuisance and may require some manual touchup but usually arent a big deal Lonas component files are mainly hard to merge because theyre stored as JSON JSON is hard to edit by hand since it has lots of punctuation thats easy to get wrong eg commas curly braces square brackets quote marks Often tweaks need to be made manually when merging which can easily lead to syntax errors Adding or deleting a line which is what git merges usually do can easily result in an invalid file since trailing commas arent allowed modifying the contents of an object or array can lead to a syntax error since any keyvalue pair can exist in any object not much contextual info gits merging algorithm has a hard time determining whether lines have been moved vs addedremoved Editors and tools often dont provide very good diagnostics about where the syntax errors are which makes it hard to recover from bad merges For example parsing a JSON file in node gives the character position of the error JSONparsefsreadFileSyncpackagejsontoString SyntaxError Unexpected token in JSON at position The Lona layer hierarchy is fairly hard to understand from looking at the JSON file and this is the part of the file that generally needs the most manual touchup When editing a deeply nested JSON value its hard to tell tell which component youre editing the name field may be far away both for the current component and its parent Solution idea I think we should consider introducing another option for component file serialization format For any workspace the user can choose whether to save components as JSON or X and X will be the default for better mergability Our JSON and X files will be to The compiler and LS should be able to read X and convert it to JSON and vice versa External tools can leverage the compiler or perhaps another shared dep to convert all component files to JSON since thatll be easier for most tools to work with For LS we can decide whether to read X natively with a Swift lib or invoke some JS through JSC to convert X to JSON I happened to find this diagram from years ago when I was just starting Lona that illustrates the main idea imagepreview Lona components were never supposed to be JSON on disk but that happened to be most convenient to get off the ground and it ended up sticking Some options for X JSON a superset of JSON with support for trailing commas good for automatic edits unquoted keys good for manual edits and some other convenience things while still keeping the familiarity JSON This improves and doesnt change and may change depending on the parser implementation Eg Cardcomponent as json XML This improves and and should greatly improve may change depending on the parser implementation This also has the benefit of being somewhat familiar to designers since its HTMLlike It has the added complexity of needing to decide whether each keyvalue should be an element or attribute based on how each will affect readability and mergability Note that since XML elements cant be used as attributes like in JSX any nestable value would need to be an element although we could decide this dynamically based on the actual value Eg Cardcomponent as XML JSX For the most part this has the benefits of JSON XML The main advantages over XML are that elements can be used as attributes seamless embedding of JSON within attributes and the flexibility of potentially deciding to use any other JS syntax later JSX doesnt support namespaced attributes like XML but that can be avoided with something like a reserved prefix or a wrapper for Lona properties eg meta The downside of JSX is that the parsing libraries are much more complicated and exclusively for JS Eg Cardcomponent as JSX Other Interesting but probably not JSX and store the component as an actual React Native class component with a render function I used to like this idea since the Lona components could potentially be runnable as React Native code However most of the component file doesnt map directly to React Native anymore since that turned out to be too limiting so I dont think this should be a goal TSXFlow Itd be potentially pretty powerful to have a typed version of Lona files that could be compiletime typechecked in some way However Im not sure exactly what that would help with YAML TOML These have less punctuation and better linewise merging but handle deep objectarray nesting very poorly Longerterm Itd be nice to have a builtin visual diffmerge tool in LS Merges will always still happen outside of LS too but for complex merges we could recommend doing them in LS My current thinking I think the XML version of components looks pretty nice and should help with mergability quite a bit I dont think the added complexity of JSX is worth the advantages I would probably start by writing a JS lib that converts Lona components between JSON and XML and then use that in both the compilerLS Then if we decide to stick with XML at some point I would swap the JS version for a native Swift XML lib for perf in LS What do you think Follow up from figure out fonts figure out personalization eg forking the pages add different languages for the code examples generate social cards for component pages when sharing on twitter slack etc generate an appcast for the sketch library and add a button to add it as a library directly instead of downloading the file follow up from In some cases when the compiler doesnt manage to compile a component it writes to stderr but exit with which should indicate success We should be consistent and exit with when there is an error