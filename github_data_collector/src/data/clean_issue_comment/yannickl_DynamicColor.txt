Handle all colors from compatible nonRGBA colorspaces instead of just white and black Especially since line causes a crash with a nonRGBA color space otherwise The current implementation of final func grayscaled DynamicColor uses the HSL lightness as as measurement of lightness While this is computationally convenient it does not provide a good match for the human perception of lightness Relative luminance the Y in XYZ provides a much more accurate measure This PR adds support for specifying which color space ie xyz hsl rgb hsv to be used for grayscaling defaulting to lightness aka HSL for the sake of not introducing a breakingchange Depends on This caused me some grief with recent update to Xcode GM Somehow Swift started reordering some of DynamicColors math expressions to use and overloads I had created to handle mixing CGFloat and Int without the need to cast This was possible because DynamicColor code and mine are in the same module Strangely this did not occur before Swift The change in Swifts behavior caused major breakage in my app colors because the math expressions became incorrect for example let r hueToRGBm m m m h h would compute h before Notwithstanding the dumbness of my operator overloads I think DynamicColor should make these expressions more explicit to shield future problems from occurring Using that same example change let r hueToRGBm m m m h h to let r hueToRGBm m m m h h And of course other places where similar precedence problems may occur I would be happy to create the pull request for this as soon as I have a moment Else if someone else does Id be happy to review it It would be helpful to invert only the brightness while retaining the hue and saturation of a color Is this possible There is currently DynamicColorinvert Would it be useful to add a DynamicColorinvertBrightness I tried with the following code and I get inconsistent results for example lightmedium orange becomes almost black instead of dark orange Mostly Im finding the resulting colors are darker then I would expect let hue hueComponent let saturation saturationComponent let brightness brightnessComponent let alpha alphaComponent return DynamicColorhuehue saturationsaturation brightnessbrightness alphaalpha is missing changelog information For ex Would you accept a PR to make the hexString init failable so itd return nil rather than a black color Something like swift public convenience inithexString String let hexString hexStringtrimmingCharactersin whitespacesAndNewlines let scanner Scannerstring hexString if hexStringhasPrefix scannerscanLocation var color UInt if scannerscanHexInt color selfinithex color useAlpha hexStringcount else return nil It would be nice to select the scale of each color in a gradient to gain in control Here an API example swift let gradient DynamicGradientcolors blue red yellow scale You can add the public final func readableColor DynamicColor return isLightColor UIColorblackColor UIColorwhiteColor and or another that use the inverse complement at your discretion its not much related to the colors elaboration its more an utility that can be useful 