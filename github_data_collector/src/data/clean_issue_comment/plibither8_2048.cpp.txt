Rather than having to ctrlc to end the current game in progress there could be an option to forfeitquit the current game and return to menu Ive noticed that there is already an CODEHOTKEYQUITENDLESSMODE that is somewhat similar to the proposed idea but as far as I could tell the endless mode is not yet implemented is that right allow to build in native Windows with MinGW MSYS g Intel icl and Visual Studio cleanup CI to use Ubuntu CMake on Travis and Meson on AppVeyor add crossplatform simple test that main executable runs and exits The escape codes used to print the playfield may be leading to garbled screen on native Windows This can be fixed at least by making a separate playfield display function for Windows that is just black and white characters The title screen does show clearly with color on native Windows worldmap Many people around the world enjoy cpp dove However English may not be the native language of many players The game should have some basic multilingual support so other players around the world can enjoy the game in their native language contribute translations of English text to their native language Currently users have to follow steps to install and run Though these are small and can be done quickly it would be much more convenient if we have a bash script that does this for us The bash script will do the following Clone the repository in the home folder mkdir build cd build to create the build directory cmake and make to create the final executable program These are the main steps that the script will follow After this we should add the program to the PATH so that users can access the game from anywhere in their terminal Either adding to the PATH permanently or adding an alias to the game in their bashrc or zshrc files With the bash script we can also now handle OS specific actions as adding to the PATH will be quite different in all the three major OSs The table will now draw to the longest length number with a small border of spaces Resolves Not really a priority but this is going to happen as number grows beyond cry since current implementation uses stdsetw when prining each tile Added Themes class to handle theming and applied to game First of all for awesome project One cool aspect of is derivatives such as merging elements to get element with higher atomic number Lets add support for such themes We should be storing the game data in some centralised folder like usrlib test The highscore page goes into the endless cycle and prints new lines upd Name length issue Can be reproduced by entering name with size 