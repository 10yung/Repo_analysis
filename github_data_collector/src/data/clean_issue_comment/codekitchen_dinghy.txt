Starting dinghy up the first time works without problem If I stop dinghy by typing dinghy halt or dinghy stop the system stopps also without any issues But if I try to restart it again with dinghy up I always get this error Unable to verify the Docker daemon is listening Maximum number of retries exceeded Traceback most recent call last from usrlocalbindinghycommand in main from usrlocalCellardinghy clithorlibthorbaserb in start from usrlocalCellardinghy clithorlibthorrb in dispatch from usrlocalCellardinghy clithorlibthorinvocationrb in invokecommand from usrlocalCellardinghy clithorlibthorcommandrb in run from usrlocalCellardinghy cliclirb in up from usrlocalCellardinghy cliclirb in startservices from usrlocalCellardinghy clidinghymachinerb in up from usrlocalCellardinghy clidinghymachinerb in system usrlocalCellardinghy clidinghysystemrb in system Failure calling dockermachine start dinghy SystemFailure I already tried to use dockermachine debug start dinghy to get more details about the problem but I do not understand it Before the upper error is thrown this message repeats times dinghy Calling GetSSHHostname dinghy DBG executing usrlocalbinprlctl list dinghy output status noheader dinghy DBG executing usrlocalbinprlctl list i dinghy dinghy DBG Found lease for MAC C D F expiring at leased for s dinghy DBG dinghy DBG Found IP lease for MAC address C D F dinghy DBG dinghy Calling GetSSHPort dinghy Calling GetSSHKeyPath dinghy Calling GetSSHKeyPath dinghy Calling GetSSHUsername Using SSH client type external Using SSH private key Usersalexdockermachinemachinesdinghyidrsa rw F devnull o ConnectionAttempts o ConnectTimeout o ControlMasterno o ControlPathnone o LogLevelquiet o PasswordAuthenticationno o ServerAliveInterval o StrictHostKeyCheckingno o UserKnownHostsFiledevnull docker o IdentitiesOnlyyes i Usersalexdockermachinemachinesdinghyidrsa p usrlocalbinssh nil About to run SSH command if type netstat devnull then ss tln else netstat tln fi SSH cmd err output nil Active Internet connections only servers Proto RecvQ SendQ Local Address Foreign Address State tcp LISTEN tcp LISTEN The only way to get my development system running again is to destroy the dinghy machine and create a new one This is really bad because important datas of my containers gets destroyed as well I use parallels pro on macOS Catalina Dinghy works fine when I am working with VPN But once I connect to VPN through Cisco VPN dinghy is not available and does not work as expected All the Images are present in repos accessible through VPN only Please suggest any workaround Hi Im having an issue and after trying to investigate myself Ive come to a deadend A container in a local dev env was timing out on making some requests and it seems to be due to an ipv issue This command has a delay of s before returning results sh docker run rm it alpine ping googlecom whereas sh docker run rm it alpine ping googlecom is almost instant I think this is because the DNS resolution is not working over ipv sh docker run rm it alpine sh c apk add nocache bindtools dig googlecom AAAA fetch fetch Installing libgcc r Installing libxml r Installing bindlibs r Installing bindtools r Executing busybox r trigger OK MiB in packages DiG googlecom AAAA global options cmd Got answer HEADER opcode QUERY status NOTIMP id flags qr rd ra QUERY ANSWER AUTHORITY ADDITIONAL OPT PSEUDOSECTION EDNS version flags udp COOKIE dfd da da a f echoed QUESTION SECTION googlecom IN AAAA Query time msec SERVER WHEN Thu Sep UTC MSG SIZE rcvd sh docker run rm it alpine sh c apk add nocache bindtools dig googlecom AAAA fetch fetch Installing libgcc r Installing libxml r Installing bindlibs r Installing bindtools r Executing busybox r trigger OK MiB in packages DiG googlecom AAAA global options cmd Got answer HEADER opcode QUERY status NOERROR id flags qr rd ra QUERY ANSWER AUTHORITY ADDITIONAL OPT PSEUDOSECTION EDNS version flags udp QUESTION SECTION googlecom IN AAAA ANSWER SECTION googlecom IN AAAA a e Query time msec SERVER WHEN Wed Sep UTC MSG SIZE rcvd Not sure why this is causing pingcurl to timeout but this seems to be the root of my issue Any ideas on how I can fix or work around the issue Thanks a lot This appears to be due to the linux file system inotify event being generated inside the Dinghy VM changing to a modify event which the Listen gem does not by default create a watch for Please see Listen gem issue for more information and to track that As a workaround adding the following line to your Guardfile appears to work ruby ListenAdapterLinuxDEFAULTS events modify The underlying issue in the Listen gem appears to be the absence of modify from the above constant which is defined in listenadapterlinuxrb There is discussion about this scattered around lots of different issues so Ill try to consolidate it here Dinghy doesnt use MacOS system NFS because the system NFS server doesnt allow nested exports in other words if you export Usersme you cant also export Usersmesomeotherproject This is a problem for me and some other people because we have projects using Vagrant with NFS shares and so exposing the whole home dir breaks those Vagrant projects But for those who dont care about that use case the system NFS server is faster and probably less prone to issues I dont plan on adding support myself since I wouldnt use it but Im open to somebody else tackling this addition Youll need to be very careful to lock this down so you arent exposing the users entire home dir over NFS to others on the LAN dockermachinenfs may make this easier I havent looked at it closely Alternatively it may even be possible to have a daemon listening for Docker events and sharing only specific folders over NFS when they are mounted via Docker but I suspect it would be difficult to get that working reliably and transparently I have been facing the problem these days I start dinghy and then stop it using dinghy halt and then when I start it again the logs will be like as follows Starting the dinghy VM Starting NFS daemon this will require sudo Waiting for NFS daemon NFS mounting failed Starting the FsEvents daemon Starting DNS and HTTP proxy The only solution is to restart my laptop But once I relaunch dinghy NFS always fails to mount Is there anything wrong with my settings and workflow What should I do to fix it MacOS dinghy cat usrlocalCellardinghy localvardinghyNFSoutput unable to send RPC reply unable to send RPC reply unable to send RPC reply unable to send RPC reply unable to send RPC reply unable to send RPC reply unable to send RPC reply unable to send RPC reply unable to send RPC reply dinghy version Dinghy Nothing relevant in logs dockerdinghy cat varlog grep nfs dockerdinghy Why How can I debug After issuing an incorrect symlink command ln s BAD BAD FSEV stopped with the following error usrlocalCellardinghy clifseventstovmlibfseventstovmwatchrb in stat Too many levels of symbolic links rbfilesstat UsersdanielrSourceBAD ErrnoELOOP from usrlocalCellardinghy clifseventstovmlibfseventstovmwatchrb in buildevent from usrlocalCellardinghy clifseventstovmlibfseventstovmwatchrb in block levels in run from usrlocalCellardinghy clifseventstovmlibfseventstovmwatchrb in each from usrlocalCellardinghy clifseventstovmlibfseventstovmwatchrb in block in run from usrlocalCellardinghy clirbfseventlibrbfseventfseventrb in run from usrlocalCellardinghy clifseventstovmlibfseventstovmwatchrb in run from usrlocalCellardinghy clifseventstovmlibfseventstovmclirb in start from usrlocalCellardinghy clithorlibthorcommandrb in run from usrlocalCellardinghy clithorlibthorinvocationrb in invokecommand from usrlocalCellardinghy clithorlibthorrb in dispatch from usrlocalCellardinghy clithorlibthorbaserb in start from usrlocalCellardinghy clidinghyfseventstovmrb in run from usrlocalCellardinghy clidaemonslibdaemonsapplicationrb in call from usrlocalCellardinghy clidaemonslibdaemonsapplicationrb in block in startproc from usrlocalCellardinghy clidaemonslibdaemonsdaemonizerb in callasdaemon from usrlocalCellardinghy clidaemonslibdaemonsapplicationrb in startproc from usrlocalCellardinghy clidaemonslibdaemonsapplicationrb in start from usrlocalCellardinghy clidinghydaemonrb in start from usrlocalCellardinghy clidinghydaemonrb in up from usrlocalCellardinghy clidinghyfseventstovmrb in up from usrlocalCellardinghy cliclirb in startservices from usrlocalCellardinghy cliclirb in up from usrlocalCellardinghy clithorlibthorcommandrb in run from usrlocalCellardinghy clithorlibthorinvocationrb in invokecommand from usrlocalCellardinghy clithorlibthorrb in dispatch from usrlocalCellardinghy clithorlibthorbaserb in start from usrlocalbindinghycommand in main Hi there First of all wanted to really give my thanks to you for this amazing tool It really made my life easier using docker under macOs Sadly though Im opening this issue because I am looking for a fix for the following scenario I am developing in Go and Im using this in order to listen to file changes and automatically rebuild my go binary However when I boot up dinghy and sequently my Go container every change I make in my IDE will not get picked up by the daemon But when I dont use dinghy and just use native docker for mac without any magic the daemon works correctly Any idea what kind of fix I can apply to solve this annoying issue Cuz as of now it kind of forces me to always skip on using dinghy for my Go projects I really appreciate any help you could provide Some additional info Dinghy Version Virtualbox Version r Qt Boot Docker version ce build HEAD e de ae Fri Dec UTC Docker version ce build e cf Firewall deactivated dinghyFsEventsoutput is empty PS I should probably mention as well that the file actually does update correctly inside the container if I modify it in my IDE it just doesnt trigger a rebuild event for the daemon Running fseventstovm start manually I get this output LibraryRubyGems gemsnetssh libnetsshtransportsessionrb in initialize Objecttimeout is deprecated use Timeouttimeout instead Error sending event Connection refused connect for nil port LibraryRubyGems gemsnetssh libnetsshtransportsessionrb in initialize LibraryRubyGems gemsnetssh libnetsshtransportsessionrb in open LibraryRubyGems gemsnetssh libnetsshtransportsessionrb in block in initialize SystemLibraryFrameworksRubyframeworkVersions usrlibruby timeoutrb in timeout SystemLibraryFrameworksRubyframeworkVersions usrlibruby timeoutrb in timeout LibraryRubyGems gemsnetssh libnetsshtransportsessionrb in initialize LibraryRubyGems gemsnetssh libnetsshrb in new LibraryRubyGems gemsnetssh libnetsshrb in start LibraryRubyGems gemsfseventstovm libfseventstovmsshemitrb in ssh LibraryRubyGems gemsfseventstovm libfseventstovmsshemitrb in event LibraryRubyGems gemsfseventstovm libfseventstovmclirb in block in start LibraryRubyGems gemsfseventstovm libfseventstovmwatchrb in block levels in run LibraryRubyGems gemsfseventstovm libfseventstovmwatchrb in each LibraryRubyGems gemsfseventstovm libfseventstovmwatchrb in block in run LibraryRubyGems gemsrbfsevent librbfseventfseventrb in run LibraryRubyGems gemsfseventstovm libfseventstovmwatchrb in run LibraryRubyGems gemsfseventstovm libfseventstovmclirb in start LibraryRubyGems gemsthor libthorcommandrb in run LibraryRubyGems gemsthor libthorinvocationrb in invokecommand LibraryRubyGems gemsthor libthorrb in dispatch LibraryRubyGems gemsthor libthorbaserb in start LibraryRubyGems gemsfseventstovm exefseventstovm in top required usrlocalbinfseventstovm in load usrlocalbinfseventstovm in main I would prefer to get the scattered configs out of my home directory and into a central directory I prefer config dinghy is one of the few left it is possible to customize where the preferences are installed My preference would be to use the XDGCONFIGHOME if set even on OSX