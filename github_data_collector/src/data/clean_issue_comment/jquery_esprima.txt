In preparation for the x update esprima is updating its dev dependencies As such lodash needs to be updated Steps to reproduce View packagejson and packagelockjson Currently on x Expected output lodash is current Relevant references I think following line is not a valid TypeScript I think a semicolon should be used instead readonly regex pattern string flags string See Object Types The TS compiler seems to accept the code without any warnings Perhaps I am wrong and this is not an object type but I cannot see what else it could be Issue The documentation only specifies Expression as the value for the left property of ForInStatement and ForOfStatement This adds the VariableDeclaration type to the left property in the documentation The ForInStatement and ForOfStatement interfaces can also have VariableDeclaration as the value for the left property as specified by the spec at and demonstrated by running the following code javascript esprimaparseScriptfor const a in b esprimaparseScriptfor const a of b The code itself works fine its simply missing in the documentation which says it can only have a value of type Expression Steps to reproduce Use Esprima demo page Copy paste this code inside the editor javascript function a var b Comment Comment Comment Check option checkbox Attach comments Expected output All comments are trailing or leading with exception of the inner comment for Comment Actual output json type Program body type FunctionDeclaration id type Identifier name a params body type BlockStatement body type VariableDeclaration declarations type VariableDeclarator id type Identifier name b init type Literal value raw kind var trailingComments type Block value Comment range generator false expression false async false trailingComments type Block value Comment range type BlockStatement body innerComments type Block value Comment range type Block value Comment range type Block value Comment range sourceType script Multiple different Javascript snippets can result in a LineComment node javascript type type type From current Esprimas output theres no way to know which one of these styles was used as a comment Since this is specific to LineComment nodes its possible to split the type of node from LineComment into node types one for each style But I assume that would completely break the API I offer the solution of adding style attribute to Comment nodes both Block and Line The values can be I believe this API change is relatively minor since were only adding an attribute without replacing any existing ones We will have to change the Comment section in the Esprima API documentation There shouldnt be any performance degradation since the comment style is known while parsing it just wasnt exposed to the AST Provide a summary in the title above Be concise and specific AST generation works fine but tokenization fails If you are here for reasons other than reporting a defect or suggesting an improvement please post to the mailinglist instead Do not forget to explore the extensive documentation Please report one problem at a time Refrain from filing a bulk report at once since it will make it difficult to followup and we may have to close the issue Steps to reproduce When reporting a defect specify the scenario that reproduces the problem js esprimatokenizevar m a b Expected output Error should not be thrown Actual output Invalid regular expression missing Provide a summary in the title above Be concise and specific super in non derived class constructors should throw a syntax error If you are here for reasons other than reporting a defect or suggesting an improvement please post to the mailinglist instead Do not forget to explore the extensive documentation Please report one problem at a time Refrain from filing a bulk report at once since it will make it difficult to followup and we may have to close the issue Steps to reproduce When reporting a defect specify the scenario that reproduces the problem js esprimaparseclass A constructor super Expected output When reporting a defect write what should happen eg a particular AST output When suggesting an improvement describe how it should work throw an syntax error in firefox js SyntaxError super is only valid in derived class constructors in chrome js Uncaught SyntaxError super keyword unexpected here Actual output When reporting a defect write what actually happens instead of the expected behavior When suggesting an improvement explain the difference from current behavior Relevant references Optionally include as many relevant references eg the ECMAScript specification Support preserving the singleline comment used in parsed Javascript code so that escodegen can use the right style to rebuild the tree I would have preferred to replace type in comment to be this prefix but that would obviously break the API This solves issue On the parsing demo the tree view script gets blocked as it is loaded over HTTP instead of HTTPS Steps to reproduce Go to Click on the Tree tab Expected output The tree view would be shown like what occurs when unsafe scripts are loaded in Chrome Actual output The following messages get shown below the editor and in the Syntax tab Chrome TypeError YTreeView is not a constructor Safari TypeError undefined is not a constructor evaluating new YTreeView lazyRender false container treeview The following messages get logged to the console Chrome Mixed Content The page at was loaded over HTTPS but requested an insecure script This request has been blocked the content must be served over HTTPS insert yuiminjs Safari blocked The page at was not allowed to run insecure content from 