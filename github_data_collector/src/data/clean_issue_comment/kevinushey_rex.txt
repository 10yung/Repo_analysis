Perhaps we can leverage rlangquos and simply gobble it r rexrexa Error in evalxexpr data xenv argument is missing with no default supCreated on by the reprex package v sup For eg Convert rexstyle alpha digit alpha digit to conventional style AZaz d AZaz d so they can be plugged into external nonR models directly Hi I have issues when creating a new character class that combines several existing character classes including one or several ones that are negated in rex Creating a character class that contains negated and nonnegated classes R rx rexoneofdigit nonletter digit alpha rematches rx TRUE rematches rx FALSE unexpected rematchesa rx TRUE unexpected As far as I know this is not possible at all The caret must be directly after the opening bracket for it to trigger a negation I think combining negated and nonnegated character classes should error with an error message suggesting an alternative In the example above an alternative would be R rx rexordigit nonletter digit alpha Creating a character class combining only negated classes R rexoneofnondigit nonlower digit lower But the resulting regular expression should be digit lower Though the regular expression seems to work as intended it would be safer to correct it Cheers Florent So instead of r rexcapturename test anything You can write r rexcapturetest anything Or the short form r rextest anything It should not require a huge change except for the capture implementation I am undecided whether to try and maintain backwards compatibility with the previous behavior or not See PCRE has a function pcrestudy that can potentially optimize regular expressions it would be nice to expose this in some way but perhaps beyond the scope of this package This happens because it uses a negative lookahead rather than a lookbehind r greplrexnottin man tinman perlTRUE TRUE This works properly if you simply anchor it in some way like putting a start in the front r greplrexstart nottin man tinman perlTRUE FALSE I am not sure that we should try to code around this case seems like it would cause more trouble than it is worth to me r the end dollar is improperly escaped here rexx or c end x using list prevents this rexx or list end x I dont think we want to do anything to prevent this but we may want to make a warning when regexs get coerced to character 