ref While were at it it probably makes sense to change the default output encoding to utf since this seems to be what players like VLC expect hi can you build exe file for windows users im not kind of python guy Were only using the pipeline functionality as a convenient way to string together transformations and cache intermediates probably no need to bring all the extra baggage that comes along with sklearn gentle is a tool is capable of more accurate alignment of text to audio detecting and matching phonemes but is somewhat difficult to set up and is not languageagnostic In particular we should try the following factors and their reciprocals See and First I want to say very great job and big thanks Ive been considering writing a subsynclike tool for a long time and have wrote a prototyping code for validation before Though this repo shocks me and Im thrilled to the FFT algorithm for aligning I do want to share my initial thought when i implemented my code Because most subtitles are not synchronized in a way either the frame rate is wrong eg fps subtitle for a fps movie or there is some kind of offset in the beginning or both most of them can be synced by applying a linear transformation to the time So the problem here is kinda like a linear regression problem and the vital point is to find the corresponding points between the subtitles and the audio or a reference sub So similarly I transform subs into long vectors where for sub on and for sub off And inspired by the feature detection algorithm in computer vision I choose SIFTScaleinvariant feature transform algorithm and modify it so it can by applied in lower dimension computer vision is D and this is D SIFT D will return a set of interesting points timestamps and their feature vectors for each sub After that I use the common methods to compare the distances between the two sets of feature vectors match them as pairs and then use RANSAC or other linear regression algorithms to calculate the linear transformation coefficients scale and offset The entire progress will cost several seconds when the resolution is s In most cases it works fine but there are cases you have to adjust the parameters for SIFT D or RANSAC or the result can turn really ugly and the result is often unstable there are some randomness in RANSAC Also the speed is not optimized Im not sure whether the problems lie in the entire thought or my codes When I came up with your repo I noticed that it doesnt support scaling but only offset I was hoping SIFT D may be a solution when properly reimplemented However I agree that If you lower the splitpenalty it can even correct the framerate difference because it automatically finds that splitting the movies in almost equal parts with slightly different offsets optimizes the alignment rating kaegi mentioned in So it may not be that necessary Well any comment is welcome Hey Thanks for the amazing work What I think would be very useful would be a command to check if the subtitles are already synced with the media This could help tremendously with large libraries instead of manually checking or blindly running the sync command Will have to think of a new name since there is already another subsync there True commercial breaks and alternative cuts are probably not necessary we can likely simulate them with synthetic data Still real examples couldnt hurt Im getting a screen like this and the output file has a single entry 