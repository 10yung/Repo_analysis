I think it is a bug I have a script that run fine in ISE or the console but would not run in PRTG in PRTG it would output this in the log file AddType Source file C Windows TEMP ends p y cs could not be found using System At C Program Files WindowsPowerShell Modules PoshRSJob PoshRSJobpsm char AddType CategoryInfo InvalidData MicrosoftPowerpeCompilerErrorAddTypeCompilerErro r AddType Exception FullyQualifiedErrorId SOURCECODEERRORMicrosoftPowerShellCommandsAddTypeCommand WARNING No source files specified using System AddType Cannot add type Compilation errors occurred At C Program Files WindowsPowerShell Modules PoshRSJob PoshRSJobpsm char AddType CategoryInfo InvalidData AddType InvalidOperationException FullyQualifiedErrorId COMPILERERRORSMicrosoftPowerShellCommandsAddTypeCommand Unable to find type RSJob At C Program Files WindowsPowerShell Modules PoshRSJob Public GetRSJobps char RSJob Job CategoryInfo InvalidOperation RSJobTypeName RuntimeException FullyQualifiedErrorId TypeNotFound Unable to find type RSJob At C Program Files WindowsPowerShell Modules PoshRSJob Public GetRSJobps char RSJob Job CategoryInfo InvalidOperation RSJobTypeName RuntimeException FullyQualifiedErrorId TypeNotFound After searching for the issue I found this In PoshRSJobpsm I changed line from public DateTime LastActivity DateTimeMinValue to public SystemDateTime LastActivity SystemDateTimeMinValue It now appears to work Hi proxb Just curious if you plan to maintain the module since I havent seen a commit in over a year or if we should be moving to ThreadJob since thats the semiofficial solution even though its nowhere near as feature rich as your awesome module Thanks This may just be my lack of PowerShell knowledge but why is it when I do something like this PS jobGetJob number PS jobName NameOfMyJob PS echo job NamejobName job NameRSJobName Basically when I try to access any property of a RSJob object inside a quoted string it prints RSJobproperty instead of the property value Hello I am a student in DUT Networks and telecommunication and also a beginner in powershell FR DUT UK DHE US AD After a few hours of searching the Internet I would like to display the different tables in the RSJob i have this return on my terminal someone can guide me the code on plain text if someone want to edit ADCheckGetADComputer filter Properties IPv address SearchBase OUCOMPUTERSDCtestDClocal WhereObject ipv address SelectObject ExpandProperty ipv address TableauEchP TableauRPES TableauRPRS ADCheck StartRSJob Name Throttle envNUMBEROFPROCESSORS ScriptBlock paramip string ifTestConnection Count ComputerName ip Quiet try ifGetService Name test TableauRPRS ip else TableauRPES ip catch else TableauEchP ip GetRSJob WaitRSJob WriteHost WriteHost This is IP as all test on TRUE TableauRPRS WriteHost WriteHost Ping TRUE Service FALSE TableauRPES WriteHost WriteHost Ping FALSE check computer if is up TableauEchP WriteHost Ive been wanting to get into runspacing for some time although Im not certain what can fit inside the script block or not As it is Ive got too much on my plate to continue testing with it but one thing Id like to do is get this idea working with some loops similar to how the threads are controlled by an array declaration like or etc Any chance someone could be kind enough to show me some examples or use case scenarios on what can be done or what cant be I found an older video from a couple of years ago that talks about Runspace Factory and I can only assume that PoshRSJobs is a very well refined derivative of that methodology Feel free to drop me a line if youd like mcooksecuredigitspluscom or check out my GitHub repos personal account repo githubcommcc sPSDRemaster or company account repo githubcomsecuredigitsplusllchybriddesiredstatecontroller Any feedback in terms of PoshRSJobs would be greatly appreciated but if you have other suggestions Im always looking to learn more Michael C Do you want to request a feature or report a bug bug What is the current behavior All jobs always appear to have a HasMoredata property of False Even though receive data shows that each job does in fact have data If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Create any jobs with StartRSJob that returns data then use GetRSJob and ReceiveRSJob The GetRSJob will show that each job has a HasMoreData property of False ReceiveRSJob will show that each job actually does contain data What is the expected behavior HasMoreData should be True when it has data Ideally when received the data would be cleared from the job and the HasMoreData property would be set to False Which versions of Powershell and which OS are affected by this issue Did this work in previous versions of our scripts Name Value PSVersion PSEdition Desktop PSCompatibleVersions BuildVersion CLRVersion WSManStackVersion PSRemotingProtocolVersion SerializationVersion ModuleType Version Name ExportedCommands Script PoshRSJob GetRSJob ReceiveRSJob RemoveRSJob StartRSJob Please provide a code example showing the issue if applicable Example from PowerShell Test StartRSJob Name TEST ScriptBlock ParamObject DebugPreference Continue PSBoundParametersGetEnumerator ForEach WriteDebug WriteVerbose Creating object Verbose NewObject PSObject Property ObjectObject TestUsingTest Im just curious what PoshRSJob stands for PowerShell something Job I often find it hard to remember the name of this library especially compared to other similar ones like InvokeParallel Im hoping that knowing what the RS in PoshRSJob stands for will make it easier for me to recall the name of this module and its functions in the future Perhaps you could update the ReadMemd to include the acronym meaning Do you want to request a feature or report a bug In my opinion this is a bug cf foreach What is the current behavior StartRSJob runs one job If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem StartRSJob waitrsjob ReceiveRSJob outputs What is the expected behavior instead of nothing Which versions of Powershell and which OS are affected by this issue Did this work in previous versions of our scripts Powershell Windows Server Please provide a code example showing the issue if applicable StartRSJob waitrsjob ReceiveRSJob Named parameters passed to imported functions dont work within the PowerShell ISE or VSCodes Powershell plugins Integrated Console Works fine otherwise including within VSCodes PS console unrelated to the plugin Not sure if this is a PoshRSJob bug or not but if not there ought to at least be some kind of warning or error if running within these wellknown consoles Im running Windows PS version VSCode v Powershell plugin v Below is an example that shows the problem Notice that if a parameter has the same name as a local variable of a caller things appear to be fine because the references take on the value from the callers local scope That made figuring this out really confusing Also notice calling a function declared within the scriptblock with named parameters works fine Outputing the args value within the called function shows the difference in how the function gets called PowerShell function showparm s sameName because this function has a parameter with the same name as a local variable for the caller that parameter seems to be set correctly Its not though pscustomobject str s str sameName argCount argscount args args the imported showparm function wont get parameter values passed in the VSCode integrated console pscustomobject str a string sameName misleading StartRSJob FunctionsToImport showparm script str str sameName sameName Before call str sameName showparm s str sameName sameName waitrsjob receiversjob the locally declared showparm function receives parameters corrected pscustomobject str a string sameName misleading StartRSJob script function showparm s sameName pscustomobject str s str sameName argCount argscount args args str str sameName sameName Before call str sameName showparm s str sameName sameName waitrsjob receiversjob getrsjob removersjob Feature request Implement BeginStop asynchronous solution instead of current Stop solution Stop is Synchronous and can take a long time to shutdown concurrent threads especially if there are a bunch to shutdown Not a bug just a request When passing jobs to StopRSJob use the asynchronous solution BeginStop instead of Stop then monitor all jobs until stopped Once done return out of StopRSJob Reason for change Using BeginStop will result in faster shutting down of threads as they will all start shutting down at the same time This is also helpful from preventing pending jobs from starting which looks like could happen BeginStop returns an Async handle that will need to be monitored for completion but all handles can be monitored until HandleIsCompleted is true