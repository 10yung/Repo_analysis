Hello I am using your framework I have meet such situation I need to Shim private static method But your framework could not do it because ShimReplace could not understande reflection But I have found solution var newShim Shim typeofShim GetConstructor BindingFlagsInstance BindingFlagsNonPublic null new Type typeofMethodBase typeofobject null Invoke new object typeofTestClass GetMethodsBindingFlagsNonPublic BindingFlagsStatic BindingFlagsInvokeMethod Singlem mName privateMethodName null newShimWithdelegateint val return val It will be much easy if Shim have got public constructor i see the sample Shim ctorShim ShimReplace new MyClassWith new MyClass MyProperty what if the constructor has input parameters is the following correct Shim ctorShim ShimReplace new MyClassIsAstringWithstring conn new MyClassconn Is this project still alive Hi I tried the examples in Unity D f on Mac OS under NET x player settings using for the using MonoReflection clauses in Pose but I cant get anything at all to work public class MyClass public void DoSomething DebugLogDoSomething try shimming class method MyClass myClass new MyClass myClassDoSomething Shim classShim ShimReplace IsAMyClassDoSomethingWith delegateMyClass this DebugLogdoing something else with myClass myClassDoSomething try shimming instance method MyClass myClass new MyClass myClassDoSomething Shim myClassShim ShimReplace myClassDoSomethingWith delegateMyClass this DebugLogdoing something else with myClass myClassDoSomething No matter what I try I always see DoSomething DoSomething Im wondering if this is due more to running on Mac OS than using Unity Or perhaps that MonoReflection repo just doesnt work If nothing comes to mind I can maybe put together an example Unity project that at least shows the Pose issue BONUS Also while I have you here do you know if Pose shims work on iOS and Android Its looking like the technique of swapping the IL code might not work on mobile because they are sticklers about using immutable code only at least for Harmony which uses similar techniques I can maybe use but it might have similar issues Im trying to extend a sealed class so that I can have a delegate fire whenever a class instance method is called or a property is changed in order to implement reactive programming techniques Without that functionality Ill have no choice but to tell users to remember to call MyClassSomethingChangedsealedClass which isnt futureproof so will inevitably lead to bugs especially when new developers use the class and forget to call that So far Ive wasted upwards of a week chasing this and its been one of the first great disappointments Ive encountered in C I tried building a dynamic class with to pass any method calls through to the sealed class but I was unable to get the implicit cast operator working so I couldnt pass the dynamic class off as the original type back to Unity it caused a stack overflow trying to return and cast itself infinitely Which means that users would have to cast the sealed class to the dynamic class themselves which defeats the whole purpose This is a really big problem that severely limits Unity to cookie cutter solutions since we cant override builtin functionality Of course most people have no idea what Im talking about so just tell me Im doing it wrong Im hoping someone with your depth of understanding on these issues might have an idea for how to overrideinherit sealed class methods or add INotifyPropertyChanged or shim a sealed class instance and be able to run that type of code in production Thanks I have a method in another assembly that looks like this VBNET vbnet Public Class Item Parent Public Function GetItems ByVal Optional a As Integer ByVal Optional b As Integer ByVal Optional c As Integer ByVal Optional d As Integer As ListOf Item Im trying to figure out how to shim this This give me the error An expression tree may not contain a call or invocation that uses optional arguments c var mockItems new ListItem ShimReplace IsAItemParentGetItems Withdelegate ItemParentthis return mockItems This give me PoseExceptionsInvalidShimSignatureException Mismatched instance types c var mockItems new ListItem ShimReplace IsAItemParentGetItemsIsAint IsAint IsAint IsAint Withdelegate return mockItems And these variations give me PoseExceptionsInvalidShimSignatureException Parameters count do not match c var mockItems new ListItem ShimReplace IsAItemParentGetItemsIsAint IsAint IsAint IsAint Withdelegate ItemParentthis return mockItems var mockItems new ListItem ShimReplace IsAItemParentGetItemsIsAint IsAint IsAint IsAint Withdelegate ItemParentthis int a int b int c int d return mockItems What is the proper syntax Trying to use Pose from other strongly named assemblies and getting the following exception SystemIOFileLoadException Could not load file or assembly Pose Version Cultureneutral PublicKeyTokennull or one of its dependencies A stronglynamed assembly is required Exception from HRESULT x Any chance of getting this assembly stronglynamed Any further updates planned to this project in particular to get it working properly on NET Core Or are there any forks out there with the necessary fixes Hello Im trying to use Pose to mock the property Entitites in the folowing class In my test Im doing the setup as follows But it throws the exception SystemInvalidProgramException Common Language Runtime detected an invalid program Ive seen that other people has gone to the same problem but usually involving DateTimeNow or something like it and still could not find any solution Do you guys are currently working on this Error CS Shim does not contain a definition for Original and no extension method Original accepting a first argument of type Shim could be found are you missing a using directive or an assembly reference Any suggestion Hi I am try to install NuGet package from Visual Studio Nuget manager but I have this error Could not install package Pose You are trying to install this package into a project that targets NETFrameworkVersionv but the package does not contain any assembly references or content files that are compatible with that framework Its possible to do 