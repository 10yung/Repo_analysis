Silence init order warnings and a small clang formatting fix WIP Installing and running Nano beta V DB gave me this error The code execution cannot proceed because VCRUNTIME dll was not found Reinstalling the program may fix this problem Reinstalling the Nano client did not resolve the issue and neither did running the included vcredistx However downloading the latest redistributable from here resolved the issue Windows Home Build This only warns on startup so it will not recognize representatives in a fresh node but otherwise it does the following If voting is enabled log how many voting accounts are detected warn about system resources if more than one voting account stdout display a warning if more than one voting account With the cache size is limited automatically if more accounts are voting which motivated this PR Examples representative log Voting is enabled more system resources will be used representatives are configured representatives log Voting is enabled more system resources will be used representatives are configured Voting with more than one representative can limit performance stdout Voting with more than one representative This can limit performance This PR proposes IPC on which RPC and other things can be built More details to follow in a separate document an overview for now Communication RPC works as before RPC is on a new endpoint apiv IPC client and server supports fullduplex and can thus be used for subscriptionscallbacks as well as requestresponse style APIs A client can use both models through multiple connections A subscription system is in place this should cover our callback need In the future WebSockets can be implemented in terms of this system Support for a new binary format based on Flatbuffers a very efficient serialization format and library Proposes a message format which can be used in both RPCs and messages oriented architectures such as mqtt and websockets An HTTP gateway which automatically translates between Flatbuffers and JSON This expects and delivers proper JSON instead of the ptree variant While RPC is out of scope for this PR a few tracer bullet RPCs and callbacks to verify the design have been added such as AccountWeight and TopicConfirmation Security enablecontrol replacement Rationale for this change is that the enablecontrol setting is too course grained and that wed like a common access control mechanism for both IPC and RPC Authentication through credentials API keys are supported now but the structure should be flexible enough to support stuff like JWT in the future Key concepts are Users Roles and Permissions where the code checks permissions This is similar to Apache Shiro There is a default user to which well assign permissions we consider safe Roles and users and default permission overrides can be declared in configaccesstoml The access config file can be reloaded at runtime using a NOHUP signal Services using the IPC API We want to move more things outofprocess but this gets unwieldy if done manually This is step one A set of messages for IPC clients to register and stoprestart services The next step for a different PR is to move the process startup from the daemon into a service manager Internals A lock monitor is added to simplify threaded member access with finer granularity this should be useful other places Longterm it can be replaced by libguarded or similar For RPC most of the meat will be in actionhandler and ipcbroker For RPC we might consider writing a Flatbuffers transpiler for OpenAPISwagger my nono node version is v now it out of sync blocks when i view node log i saw ERROR Database size grew above GB size Has anyone else encountered this problem Move processing effort on to repcrawler and off of the vote processor The response function has been converted to a lightweight function that simply queues votes to be checked on the next craw interval Logic around updating reps has been moved out of the callback lambda and into the rep processor itself The rep processor no longer accepts arbitrary values and directly computes weight from a given vote so tests have been updated accordingly HAVE A QUESTION PLEASE JOIN OUR DISCORD SERVER Only use GitHub issues for reporting problems and submitting proposals Questions should be asked on our Discord server which has channels for a wide range of topics such as development and support BUG BOUNTY REPORT INFORMATION In the interest of further improving the security of the network we have launched the Nano Bug Bounty Program WARNING Dont disclose any information for the Nano bug Submit any suspected bugs for bounty consideration to bugsnanoorg NORMAL BUG REPORT INFORMATION If you are reporting a new issue make sure that we do not have any duplicates already open You can ensure this by searching the issue list for this repository If there is a duplicate please close your issue and add a comment to the existing issue instead If you suspect your issue is a bug please edit your issue description to include the BUG REPORT INFORMATION shown below If you fail to provide this information within days we cannot debug your issue and will close it We will however reopen it if you later provide the information Description of bug Node crashed and generated a crash dump file I restarted the node since its my live node but have the crash dump file if its helpful Using WinDbg it shows the following This dump file has an exception of interest stored in it The stored exception information can be accessed via ecxr Security check failure or stack buffer overrun code c firstsecond chance not available Subcode x FASTFAILFATALAPPEXIT For analysis of this file run analyze v ucrtbaseabort x e fffe b db e cd int h Does this issue reproduce with the latest release if you dont use the latest version then please try our latest version Briefly describe the problem you are having in a few paragraphs Environment Windows V with the following commit included Release build built locally with Boost and Visual Studio OS information Linux Kernel eg uname a Node version docker node docker version logs Not much of interest in the logs The last few lines have the following Jan x d fc e actionaccountweightaccountnano prihdxwz u ps qjnn p ujyewkoxkwyxm u it rg rdqw qrypzk Jan RPC request x d fc e completed in microseconds Jan x d fc e d actionuptime Jan RPC request x d fc e d completed in microseconds Jan RPC request x d f a a completed in microseconds Jan x d f e actionconfirmationhistory Can you please provide the Nano logs for further analysis How to find Nano logs With this change the node can distinguish between Work validation before ledger processing ie on node entry thus the name workvalidationentry but looking for suggestions on the name Work validation during ledger processing Full work validation can only be done during or after ledger processing if it depends on the account version This distinction allows setting both higher or lower work difficulties in the future conditioned on the block version and block type During ledger processing the account version is now checked and work is validated against that versionthreshold Two block visitors are added one to find the work version of a block and another to find out the work version of a blocks successor A transaction is required by the visitor even though it is not used currently setting up for future changes The third commit adds nonbreaking changes to RPCs to support additional work versions in the future read commit description Design choices Basic work validation was kept in nanolib but the API explicitly changed with the default work version getting renamed to workvalidateentry Work generation still has an implicit default work version to avoid touching work generation as much as possible Further changes are required if it will ever be possible to calculate a multiplier from different base difficulties eg different algorithms