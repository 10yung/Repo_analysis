Hello provided a wrong fix initialization and reinitialization is broken today It is easy to fix it by refactoring connector and initIfNeeded Ive tried to keep the same terminology so refactoring should be obvious for project developers Fixes and Are you submitting a bug report or a feature request bug report What is the current behavior my form has a field array of another field array of fields as Select when Im changing the value of the first select other selects options should change as well but for some reason the form not rerender after Im changing the value of the nd select the redux state is changed Im watching it in the devtools What is the expected behavior after the state changed the form should be rerender Whats your environment v materialui v it happens after I upgraded material ui from v to v any ideas thanks environment jest redux reduxform react reactredux reactdom nodejs version v error log Last few GCs x ms Marksweep MB ms average mu current mu allocation failure scavenge might not succeed x ms Marksweep MB ms average mu current mu allocation failure scavenge might not succeed JS stacktrace JS stack trace ExitFrame pc x b fdfdbe d StubFrame pc x b fdfdd c Security context x e bcc e e JSObject printComplexValueaka printComplexValue x e Usersgeorgexieworkspaceprojectsactivefacilityuiappnodemodulesprettyformatbuildindexjs pc x b fe f this x e f undefinedval x e f df FiberNode map x e f b b config x e a abf Object map x e FATAL ERROR Ineffective markcompacts near heap limit Allocation failed JavaScript heap out of memory x b nodeAbort Usersgeorgexienvmversionsnodev binnode x b f nodeOnFatalErrorchar const char const Usersgeorgexienvmversionsnodev binnode x a e v internalV FatalProcessOutOfMemoryv internalIsolate char const bool Usersgeorgexienvmversionsnodev binnode x a v internalHeapFatalProcessOutOfMemorychar const Usersgeorgexienvmversionsnodev binnode x d v internalHeapCheckIneffectiveMarkCompactunsigned long double Usersgeorgexienvmversionsnodev binnode x c f v internalHeapPerformGarbageCollectionv internalGarbageCollector v GCCallbackFlags Usersgeorgexienvmversionsnodev binnode x df v internalHeapCollectGarbagev internalAllocationSpace v internalGarbageCollectionReason v GCCallbackFlags Usersgeorgexienvmversionsnodev binnode x d c v internalHeapAllocateRawWithLigthRetryint v internalAllocationSpace v internalAllocationAlignment Usersgeorgexienvmversionsnodev binnode x d f v internalHeapAllocateRawWithRetryOrFailint v internalAllocationSpace v internalAllocationAlignment Usersgeorgexienvmversionsnodev binnode x d v internalFactoryNewFillerObjectint bool v internalAllocationSpace Usersgeorgexienvmversionsnodev binnode x d f v internalRuntimeAllocateInNewSpaceint v internalObject v internalIsolate Usersgeorgexienvmversionsnodev binnode x b fdfdbe d x b fdfdd c my code TestFormjs import React from react import reduxForm Field from reduxform const SimpleForm props const handleSubmit pristine reset submitting props return form onSubmithandleSubmit div labelFirst Namelabel div Field namefirstName componentinput typetext placeholderFirst Name div div div labelLast Namelabel div Field namelastName componentinput typetext placeholderLast Name div div div labelEmaillabel div Field nameemail componentinput typeemail placeholderEmail div div div labelSexlabel div label Field namesex componentinput typeradio valuemale Male label label Field namesex componentinput typeradio valuefemale Female label label Field namesex componentinput typeradio valueother Other label div div div labelFavorite Colorlabel div Field namefavoriteColor componentselect option option valueff Redoption option value ff Greenoption option value ffBlueoption Field div div div label htmlForemployedEmployedlabel div Field nameemployed idemployed componentinput typecheckbox div div div labelNoteslabel div Field namenotes componenttextarea div div div button typesubmit disabledpristine submitting Submit button button typebutton disabledpristine submitting onClickreset Clear Values button div form export default reduxForm form simple a unique identifier for this form SimpleForm If export this everything is fine export default function FF return divtestdiv TestFormtestjs import React from react import mount from enzyme import Provider from reactredux import createStore from redux import TestForm from TestForm itshould render component properly const wrapper mount Provider storecreateStore TestForm Provider expectwrappertoMatchSnapshot Subject of the issue When mounting if the first field in a form has a name that is also a valid integer instead of registering the field the registeredField array itself is expanded to a length corresponding to the name of the field For instance if the fields name is string the registeredFields array is a length of Because this can accidentally create massive arrays this can lock up tabs and crash applications Your environment OS MacOS Packages json redux reduxactions reduxform reduxforminputmasks reduxravenmiddleware reduxthunk Env Node v npm This issue was only found in FireFox V It cannot be reproduced in Chrome Steps to reproduce Name the first Field in a form a large number Expected behaviour The form should load Actual behaviour The tab crashes because of a giant array that is not iterable in a timely manner Other information I will add an example to this later today after Im out of work and will try to reproduce in master If I can and this is indeed deemed an issue Ill see if I can make a pullrequest to fix tonight Are you submitting a bug report or a feature request Bug report What is the current behavior The form was configured with the flag destroyOnUnmount false After dispatch destroy action the form is removed from the store but after unmounting it was recreated in store empty object screenshot screenshot What is the expected behavior The destroyed form must not be recreated in the store Sandbox Link example Whats your environment Include Redux Form version OSbrowser affected Node version etc ReduxForm React Redux Other information Are you submitting a bug report or a feature request bug report For support request please use Stack Overflow instead This issue tracker is reserved for bugs and features What is the current behavior I have a FieldArray nameitems of items say Item and Item After I remove Item the Items values changed to only Item which is good however syncErrors are not updated accordingly What is the expected behavior when fieldsremove is invoked syncError should be uploaded as well along with value Sandbox Link should be easy to reproduce didnt create a sandbox for that Whats your environment Issue Im trying to extract my Fields to a external package to use in another project But the same Field that works inside the project caught this error Uncaught Error Field must be inside a component decorated with reduxForm when I import it from the external package And Im sure that its inside a reduxForm and the imports and package are correct because I had other components working right I just changed this import InputField from fieldscoreInputField for this import InputField from mypackage I already had problems trying to extract some connected redux components but I solved changing my webpack configs like described here But I dont found anything related to this field problem My environment react reactredux redux reduxform ReduxForm is a brilliant library but Im worried that its use will wane and it will eventually not be maintained Why is there a death note on the GitHub page advising people not to use it Couldnt this be replaced with something more positive which explains how it overcomes the limitations of these other libraries What is the expected behavior Not advising potential users to use another library but rather explaining the benefits of this one Are you submitting a bug report or a feature request bug report What is the current behavior My app throws Invariant Violation Maximum update depth exceeded when using FieldArray with validate props in versions What is the expected behavior Be able to use FieldArray with custom validator Sandbox Link Working example Error Whats your environment react reactdom reactredux redux reduxform This probably doesnt effect many users but we are bundling the UMD build of this library and I noticed that the distreduxformjs was very large and included the eval sourcemaps From looking at other popular open source react libraries it looks like shipping eval sourcemaps is not common Thanks