Sometimes could be useful avoiding to declare queue from program Hi i got a couple questions This method withkind sets the type variable If so it wouldnt be better to call it withtype instead hi i found out the lapin from the rabbitmqexamples and in that repo the lapins example is too old for current version but using current repo i just found out something very simple which lack fanout model direct routing topic and both without something like queuebind exchange which cant be ignore and in futures example the code is in which not compact with current stage thanks I am trying to check if a queueexchange is already declared by using passiveflag When the queue does not exist an error is returned this is expected and the channel is closed by rabbit however also the connection is closed by the lapin client as a result of channel close Is this expected I get this with The snippets are let channelqueue sessioncreatechannelwaitexpectcreatechannel let queue channelqueuequeuedeclare amqpentityclone QueueDeclareOptions passive true durable false exclusive false autodelete false nowait false Defaultdefault FieldTabledefault wait channelqueueclose waitok this code generates T Z DEBUG lapinchannels create channel with id T Z ERROR lapinchannel Channel closed by SoftNOTFOUND NOTFOUND no queue amqtopic in vhost T Z ERROR lapinconnection Connection error and in rabbitmq i see error Channel error on connection vhost user admin channel operation queuedeclare caused a channel exception notfound no queue amqtopic in vhost warning closing AMQP connection vhost user admin client unexpectedly closed TCP connection Thank you Executing the following code on Windows and Linux actually WSL running on the same machine to demonstrate that networkfirewall are not at fault and with rabbitmq halted the Windows executable blocks forever or at least until interrupted with controlc Under Linux it will as expected return immediately and produce output Connection failed ConnectionRefused This was tested with lapin use lapinConnection ConnectionProperties fn main match Connectionconnectamqp f ConnectionPropertiesdefaultwait Okconn printlnConnected Erre printlnConnection failed e In Lapin when i call channelclose Normal shutdownwait i get a connection error and then a invalid channel state error the trace log note that with the last line at the top e g output of journalctl r follows only from when the close message was written to the channel Oct hyperion worker Error InvalidChannelStateError Oct hyperion worker ERROR lapinconnection Connection error Oct hyperion worker TRACE lapinconnection will handle frame Method ChannelCloseOkCloseOk Oct hyperion worker TRACE lapinioloop read bytes Oct hyperion worker TRACE lapinioloop wrote bytes Oct hyperion worker TRACE lapinioloop ioloop dorun canreadtrue canwritetrue hasdata true Oct hyperion worker TRACE lapinioloop ioloop poll done Oct hyperion worker TRACE lapinioloop ioloop poll Oct hyperion worker TRACE lapinioloop ioloop run Oct hyperion worker TRACE lapinioloop ioloop dorun done canreadfalse canwritetrue has datatrue statusSetup Oct hyperion worker TRACE lapinioloop ioloop send continue canreadfalse canwritetrue h asdatatrue Oct hyperion worker TRACE lapinioloop wrote bytes When Channel object is dropped channel is not closed on rabbit Is it desired behavior or we need to somehow register channel id to close on drop and on later iteration of ioloop send corresponding command to rabbit to not leak resources All releases after are lacking tags Hi Ive been faced to strange connection error After investigating Ive found that using a queue declared by another channel as an argument to basicconsume produces a connection error because not registered in channels queues This behavior isnt documented and I dont think it is a limitation of AMQP protocol as it only needs a queue name Using a queue declared by the same channel solves the problem Its not bad but it should at least be documented Moreover I found that it was particularly difficult to find the origin of this error I know youre doing a lot of refactoring but when done it would be nice to have more traces and a better error reporting system to know exactly what goes wrong It would be nice to split reactor interactions trait default reactor the rest of the ioloop This would allow using lapin with a better integration with other reactors