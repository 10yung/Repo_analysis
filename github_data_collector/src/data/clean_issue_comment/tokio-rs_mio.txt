Depends on Draft to test targets other than MacOS and Linux Motivation This PR introduces sysSocket that is internal to Mio and consolidates all the existing socket system calls into a single type There has been a lot of discussion about how Mio should provide additional methods for setting certain socket options Currently it is left up to the user to pull in an additional dependency socket rsnet and use the provided AsFromInto socket impls There are however various system calls for working with sockets in Mio that are specific to setting nonblocking behavior and using as few system calls as possible They include functionality that creat sockets to be nonblocking by default using accept on targets that provide it and relying on inheriting certain socket statuses where possible Solution Socket is a RawFdRawSocket wrapper type that provides the necessary methods for consolidating all the systargetnet socket sytem calls into a single type Since Socket works at the targets socket layer any future changes related to additional functionality or reported bugs can take place in these methods and apply to all the types that use them Additionally Socket provides the necessary building block for providing a public net socket types This will allow users of Mio to set additional socket options without worrying about separate system calls for setting nonblocking mode and avoid pulling in additional dependencies An example of the public socket type can be found Signedoffby Kevin Leimkuhler kleimkuhlericloudcom Ref There is no way to call bind before connect when creating TcpStream This is a very common method to tell operating system to connect the target address with a specific local address mostly for using a specific network interface Proposal adding a static method for TcpStream rust fn bindconnectbindaddr SocketAddr targetaddr SocketAddr ioResultTcpStream Other candicate names connectwith connectfrom connectby I could send a PR for this if it is Ok The std lib API accepts the addresses by reference ie Ipv Addr Mio however takes it by value Ipv Addr I think we should match the standard library API although its inconsistent with UdpSocketbind which takes the address by value Closes This is to prevent from happening too some extend see the docs of NOTIMEOUT in testsutilmodrs After Mio makes much more use of features but these are only documented shortly in Cargotoml When documentation is generated such as for docrs all features are enabled so it might be surprising for new users that the need to enable a bunch of features I propose two solutions two this Add documentation about the available features in the main crate docs ie in librs This ways its clear for users when the open the documentation the first type Add the required features per type Preferably we add a box like the boxes added for unstablenightly features eg the yellow nightlyonly box But I dont think that is possible to do for user code atm The alternative is just adding a notes section to each type to let the user know what features are required To ease the the update from to we should write an upgrade guide Related Since Mio has changed a lot Many types come and gone and in general behaviour has changed But this hasnt yet been documented in the changelog nstead keep the err sock states and just retry them later This is a partial fix for because it just handles the errors and makes the sockstates available next poll instead of panicking Pushing the error to user is more complicated as it would require new api added Id suggest to leave this part until custom IOCP handlers are implemented and is merged