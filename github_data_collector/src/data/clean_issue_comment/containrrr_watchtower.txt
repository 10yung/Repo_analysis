Is there a way to configure multiple Notification level in Watchtower like WATCHTOWERNOTIFICATIONSLEVELinfopanicfatalerrorwarning im not sure if this is possible because i didnt found anything in the documentation about multiple levrels If this is not Possible could you please create a Feature Request out of this Thank you for your amazing work Hi I have been using Watchtower it has some pretty cool features that Im interested in I would like to know Is it possible for Watchtower to update running containers using images that are stored on a local filesystems for eg USB storage I would like to do this employing lifecycle hooks the same way it works for online container registries Has there been any current effortplans to implement anything similar to this Can this be done using any existing features Please let me know Thanks Avinash I cant find this in the documentation so Ill assume it isnt a feature It would be awesome to declare in the configuration file which containers are to be monitored and their respective registries and credentials The example in the documentation is as follows json auths REGISTRYNAME auth XXXXXXX My suggestion is to have an array of containers and an option to watch over the configured ones or all defaulting to watch over all containers and the registry to DockerHub json watchAll true containers name containername interval registry name registrygitlabcom username username password password Is your feature request related to a problem Please describe I have been using RocketChat for many of my devops notifications instead of Slack I recently implemented Watchtower for one of my projects and wondered if I could use the Slack notification feature to actually send notifications to a channel in RocketChat I did the following in my dockercomposeyml file environment WATCHTOWERNOTIFICATIONSslack WATCHTOWERNOTIFICATIONSLACKHOOKURLWATCHTOWERNOTIFICATIONSLACKHOOKURL Where WATCHTOWERNOTIFICATIONSLACKHOOKURL was the incoming webhook I created for one of my channels The value looked something like this In all the screenshot attached below shows it works or at least I think it does rocketchatwithwatchtower Describe the solution youd like The following are things I would like to see Are there any missing information features in my example screenshot of using RocketChat that I would be experiencing if I were using Slack If so may we implement the missing features to have robust support of RocketChat If the team decides to support RocketChat may there be similar documentation on using it as there is for Slack Describe alternatives youve considered I thought of using Slack but with all of my devops projects configured to use RocketChat I did not want to move over to a new platform therefore I gave it a shot to see if it would work with RocketChat Additional context I believe this issue would be related to Thank you to the Watchtower team and collaborators for your awesome work This pull request implements the changes proposed in API Features ToDo List x v update endpoint to trigger image updating process x httpapi flag to set up HTTP API mode x httpapiport flag to customize the listening port Container will always listen to x authentication token set by ENV variable x Expose port in the Dockerfile x Docs on how to use the API Suggestions are welcomed Since Watchtower basically watches for docker registries and actively pulls images in order to check for outdated containers it keeps continuously incrementing the registries pull counter making them useless The counts can no longer be considered as user downloadspulls This issue has been impacting some of my coworkers personal projects and I have managed to use it as a working case in my bachelors thesis My proposal is to implement an HTTP API to enable DockerHubs Webook service to trigger Watchtower instances and make them check for updates only when a new image is pulled Another use case would be a request made by a CI platform in order to trigger the update process I have already started some prototypes and I hope to be implementing a working version soon Im using watchtower to test an automated container image updatedownloadrun mechanism The docker instance which runs watchtower is running on linux built with yocto in a qemuarm emulator Docker has been tested and works correctly in pushing pulling and running images in the QEMU ARM emulator I face an issue with the following use case I am uploading container images to gitlab container registry I have also tested with docker hub and face this same issue I am running these tests from behind a proxy This is the command Im running to run watchtower docker run d name watchtower v homerootdockerconfigjsonconfigjson v varrundockersockvarrundockersock registryxxxxioavinashkuruptestcontainerregistrymudballarm v debug docker logs watchtower time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgScheduled next run UTC time T Z leveldebug msgChecking containers for updated images time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgScheduled next run UTC time T Z leveldebug msgChecking containers for updated images time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgRetrieving running containers time T Z leveldebug msgScheduled next run UTC I dont see any authentication taking place or any messages of downloading updated container images in the above logs Is this normal docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a a b ca containrrrwatchtower watchtower registr About an hour ago Up About an hour watchtower docker images REPOSITORY TAG IMAGE ID CREATED SIZE registryxxxxioavinashkuruptestcontainerregistry mudballarm v eb acdf e About an hour ago kB containrrrwatchtower latest ad d ee days ago MB I cannot see the container image updated with the version on the registry when the time interval of minutes elapses I see that the downloaded container image is supposed to be automatically run also is dockercompose needed for using watchtower I am new to docker and watchtower am I missing something here Regards Avinash B Hi guys This tool it is a great help in infrastructures where docker is used or in organizations where the adoption of Kubernetes is conditioned by first testing the cloud deployments in docker I read your documentation and i did not see any fallback mechanism in case the docker image is broken This is a critical feature that needs to be implemented as per production environments Here i just imagine somekind of restApi mechanism or ENV VARS where you instruct watchtower to spawn the latest working image Or there is another case of a wrapper implemented by the user to treat such cases What do you think and is there a step towards Thanks Catalin Is your feature request related to a problem Please describe It happens that an image is released then recalled pulled back because of an issue Currently such an image would be updated by watchtower as designed Describe the solution youd like The ability to delay the update such as in update the image but only if it is days old Ideally on a per image basis but a global setting is ok as well Describe alternatives youve considered There are none I can think of except a very long time between checks but this will not solve the issue of a faulty image is released right before the check it will be even worse as a possible recoverycorrected one will not be pulled quickly Following the document here My docker configjson should be set up properly json auths xxxxxxxdkrecrxxxxxamazonawscom credsStore secretservice HttpHeaders UserAgent DockerClient linux credHelpers xxxxxxxxdkrecrxxxxxamazonawscom ecrlogin However with this setup I get an error dockererrorsDockerException Credentials store error StoreErrordockercredentialecrlogin not installed or not available in PATH If I change my config to use ecrlogin in the credsStore field instead of credHelpers it works fine json auths xxxxxxxdkrecrxxxxxamazonawscom credsStore ecrlogin HttpHeaders UserAgent DockerClient linux However this isnt ideal because now I cant pull public images from other container registries Am I missing something Has anyone else been able to get the credHelpers field working with private registries