Followup couldnt reopen I had to solve it anyway It IMO improves current state Feel free to close if not applicable x add tests x test on production ready project Currently in ProxyGenerator theres support for generating simple not triggering entity hydration id getters in proxy class only for return thisidentifier php public function getId return thisid However I also needed to support php public function getId return MyIdnewthisid and php public function getId return new MyIdthisid I saw this while trying to figure out In this case the autoloader was called to load a proxy for a mapped superclass Since the file didnt exist the notFoundCallback was called to generate a proxy class However the ProxyFactory in ORM will skip over mapped superclasses and didnt create a class but neither threw an exception This causes an error because the autoloader wrongly assumes that the file will be present at least after invoking the notFoundCallback However this assumption is wrong and should probably be checked with an exception being thrown if no file was generatedfound On PHP version or newest automatically add scalar return type hints to magic methods for compatibility generated Proxy class with real entity More information Hello I am using version v with PHP In entities I use trait SmartObject implements magic methods for example isset with scalar type hints I know new version of ProxyGenerator make proxy methods with type hints but in magic methods not On runtime I get a PHP error Declaration of ShopUp Database Proxy CG ShopUp UserAdvance Entity AdvanceUserissetname must be compatible with ShopUp Security Entity Userissetstring name bool Generated proxy class img width altSn mek obrazovky v src But in real entity is img width altSn mek obrazovky v src Thank you for support In my application I am using the latest doctrine x Recently we found it necessary to also use the static function Doctrine Common Util ClassUtilsgetRealClassstring class But this function is marked as deprecated I asked in issue what would be the alternative function to use Then I got the response that there is no alternative to that function in doctrine x This issue is about removing those depreaction notices since I see no point in marking something as deprecated when the application programmers have nothing to replace it with See also comment Test more variants of short identifier getter name case The proposal is pretty simple have no Common instead split Common into smaller packages Weve already had discussion about this and Common seems pretty much like relic and multiple components have already been split to their own packages Current proposal Component Suggested action Persistence Move to new package doctrinepersistence rename namespace to Doctrine Persistence Proxy To be dropped without replacement Reflection Not really sure about this one either move to doctrinereflection or drop it UtilClassUtils Proxyrelated methods are obsolete making the rest also pretty much obsolete drop it UtilDebug Drop it or move to doctrinedebug UtilDumper Unsure about its usefulness there already exist more advanced tools like Tracy or Symfony Dumper UtilInflector Already moved out only BC ClassLoader Already deprecated drop it CommonException Comparable I know no place where Comparable is used across Doctrine is there any but it seems useful ie for ORM move it to doctrinecomparable EventArgs EventManager EventSubscriber Weve already discussed replacing it by ie Symfonys EventDispatcher drop it if suitable replacement is selected doctrineeventmanager Lexer Already moved out only BC NotifyPropertyChanged PropertyChangedListener These sound useful and are used in ORM so move it to doctrinepropertychangenotifier what a name doctrinepersistence Version Each new package would use PHP or even where has no benefit follow CS and would be ported to typed code WDYT Handle the toString method special in generated proxy classes It may not throw an error when loading the entity fails Return some string instead Reason Throwing an exception in a toString method triggers a fatal php error aborting php phpunit or whatever When calling toString on a proxied entity which does not exist this triggers an error It is difficult to locate because a fatal error is triggered how to fix Could be fixed here or maybe in the initializer class The generated method should look similar to this php public function toString try thisinitializer thisinitializerinvokethis toString catch Exception e php return ERROR e catch Throwable e php return ERROR e return parenttoString Maybe the returned string should be configurable somehow Or a special method toStringErrorGetStringe could be called if it exists versions doctrinecommon version php version I have a system where proxies are stored in several different locations The proxy autoloader system provides a perfectly reasonable way of dealing with this but AbstractProxygetProxyDefintion gets in the way its behavior is based on the proxy autogenerate mode and all the modes that deal with files require a specific file In other words I want to configure for AUTOGENERATENEVER but also just leave loading the proxy up to the autoloader An additional autogenerate mode thats just a noop would accomplish this very simply On doctrinecommon v doctrinedbal v Say you have PHP ORM EntityrepositoryClassUserRepository ORM Tablenameuser class User ORM Id ORM Columntypeinteger ORM GeneratedValuestrategyAUTO private id ORM OneToManytargetEntityAppBundle Entity Post mappedByuser private posts PHP ORM Tablenameposts class Post ORM Id ORM Columntypeinteger ORM GeneratedValuestrategyAUTO private id ORM ManyToOnetargetEntityAppBundle Entity User inversedByposts private user ORM Columntypeboolean nullablefalse optionsdefault private isHidden And say you get a user and want to take all the hidden posts usergetPostsmatchingCriteriacreatewhereCriteriaexpreqisHidden true Well nothing anywhere transforms the property name to the actual column name and you get doctrine trying to execute a query with an invalid column name SQLSTATE S Column not found Unknown column teisHidden in where clause