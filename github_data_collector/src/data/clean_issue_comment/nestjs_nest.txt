This PR contains the following updates Package Type Update Change fastjsonstringify dependencies patch Release Notes details summaryfastifyfastjsonstringifysummary v Compare Source Fixes Improve the debugging experience in case of a bad reference details Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Disabled by config Please merge this manually once you are satisfied recycle Rebasing Whenever PR becomes conflicted or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about this update again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here PR Checklist Please check if your PR fulfills the following requirements x The commit message follows our guidelines Tests for the changes have been added for bug fixes features Docs have been added updated for bug fixes features PR Type What kind of change does this PR introduce Please check the one that applies to this PR using x Bugfix x Feature Code style update formatting local variables Refactoring no functional changes no api changes Build related changes CI related changes Other Please describe What is the current behavior Please describe the current behavior that you are modifying or link to a relevant issue Issue Number What is the new behavior Does this PR introduce a breaking change Yes x No If this PR contains a breaking change please describe the impact and migration path for existing applications below Other information Bug Report Current behavior Nestjs does not inform about broken connections when using GRPC server side streaming As a result there is no possible way for the server no know if a GRPC streaming client is still connected The GRPC client also does not get an event after the network connection to server becomes broken Clarification FullDuplexStreaming GrpcStreamCall provides this events But in GRPCweb use cases it is not an option to use FullDuplex streaming since GRPCweb supports server side streaming only Clarification On the clientside developers can implement workarounds like PingPong mechanisms using GRPCunarycalls But on the server side no such workarounds are possible Input Code This has already been discussed on the following tickets An example repo exists at Expected behavior For the RxJS Subject Observable approach an error or completed event should be fired as soon as the network connection between client and server becomes broken Feature Request Is your feature request related to a problem Please describe A clear and concise description of what the problem is Ex I have an issue when Describe the solution youd like A clear and concise description of what you want to happen Add any considered drawbacks I want to handle the fastify error when starting the app typescript await applistenport host err Error if err loggererrorerr processexit loggerinfoApplication is listening on port hostport Main If you write this now typescript throws an error so in INestApplication the listen method is defined like this typescript listenport number string callback void Promiseany listenport number string hostname string callback void Promiseany I suggest taking the annotation from and adding it to NestFastifyApplication Teachability Documentation Adoption Migration Strategy If you can explain how users will be able to use this and possibly write out a version the docs Maybe a screenshot or design What is the motivation use case for changing the behavior Describe the motivation or the concrete use case PR Checklist Please check if your PR fulfills the following requirements x The commit message follows our guidelines Tests for the changes have been added for bug fixes features Docs have been added updated for bug fixes features PR Type What kind of change does this PR introduce Please check the one that applies to this PR using x Feature Does this PR introduce a breaking change Yes No If this PR contains a breaking change please describe the impact and migration path for existing applications below Other information use case thishttpServicerequestpipetimeout we can then cancel this request upon timeout saving a little bit of resource and stop axios interceptors processing the timedout response Bug Report Current behavior Passing in custom config so they can be picked up in the interceptor was broken in axios its been a long time coming but its finally released I send a previous report asking to be downgraded but it wasnt possible Now we have an official release The major problem about the config was this PR This has now been released with other fixes also here Any chance of upgrading as this is a real blocker as our interceptors cant pick up any custom properties that you send down they get erased To reiterate it was broken in and fixes this and other things Thanks This PR contains the following updates Package Type Update Change axios dependencies patch Release Notes details summaryaxiosaxiossummary v Compare Source Fixes and Functionality Fixing invalid agent issue Fix ignore set withCredentials false Delete useless default to hash Fix HTTPHTTPs agents passing to followredirect Fix ignore set withCredentials false Fix CI build failure Remove dependency on isbuffer from packagejson Adding options typings Adding Typescript HTTP method definition for LINK and UNLINK Update dist with newest changes fixes Custom Attributes issue Change syntax to see if build passes Update Webpack deps remove now unnecessary polyfills Fix to prevent XSS throw an error when the URL contains a JS script Add custom timeout error copy in config Add error toJSON example Fixing Vulnerability A Fortify Scan finds a critical CrossSite Scrip Fixing subdomain handling on noproxy Make redirection from HTTP to HTTPS work and Add toJSON property to AxiosError type Fixing socket hang up error on node side for slow response Alternative syntax to send data into the body Fixing custom config options Fixing set configmethod after mergeConfig for Axiosprototyperequest Axios create url bug Do not modify configurl when using a relative baseURL resolves Add typescript HTTP method definition for LINK and UNLINK Internal Revert Update Webpack deps remove now unnecessary polyfills Order of ifelse blocks is causing unit tests mocking XHR Add license badge Fix travis CI build Fix cancellation error on build master Documentation Fixing typo in CHANGELOGmd sFunctionallityFunctionality Fix badge use master branch Fix typo in changelog Document fix Update docs with noproxy change issue Fixing missing words in docs template Fix request finally documentation in README updating spelling and adding link to docs docs minor tweak Update response interceptor docs Update READMEmd Fix word sintaxe to syntax in READMEmd upadating README notes on CommonJS autocomplete Fix grammar in READMEmd Doc fixes minor examples cleanup details Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Disabled by config Please merge this manually once you are satisfied recycle Rebasing Whenever PR becomes conflicted or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about this update again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here Feature Request Is your feature request related to a problem Please describe Hey My situation is this I want to log startup errors explicitly and log additional information on those errors I can override default logger but underneath there is an ExceptionHandler class which will only log occurred errors like this ts ExceptionHandlerloggererrorexceptionmessage exceptionstack This means that if a custom error is thrown and it looks something like this ts message Database connection failed stack code STARTUPERROR code property will be lost and will not be logged Describe the solution youd like Solution could be something like this ts const logger new Logger async function bootstrap const app await NestFactorycreateAppModule logger throwErrors true Additional code here that can throw errors await applisten bootstrapcatcherror loggererrorerror null Bootstrap processexit throwErrors is false by default and it means that internal ExceptionHandler is used if value is true ExceptionHandler is not used and original error is thrown as is or rethrown allowing explicit handling In this case new Logger is an instance of a custom logger implementing LoggerService of nestjscommon and this logger handled error object by whatever logic it deems necessary Teachability Documentation Adoption Migration Strategy Already done in point above What is the motivation use case for changing the behavior I want to log errors that are correctly tagged not only by log level but by other criteria or just log additional information that is not part of exception message or stacktrace closes PR Checklist Please check if your PR fulfills the following requirements x The commit message follows our guidelines x Tests for the changes have been added for bug fixes features x Docs have been added updated for bug fixes features PR Type What kind of change does this PR introduce Please check the one that applies to this PR using x Bugfix Feature Code style update formatting local variables Refactoring no functional changes no api changes Build related changes CI related changes Other Please describe What is the current behavior Please describe the current behavior that you are modifying or link to a relevant issue Issue Number NA What is the new behavior Does this PR introduce a breaking change Yes No If this PR contains a breaking change please describe the impact and migration path for existing applications below Other information Feature Request Is your feature request related to a problem Please describe A clear and concise description of what the problem is Ex I have an issue when So the problem it self comes when youre build a view paths can changeyou can switch global prefix or whatever but router name will be static stick to the dynamic path Describe the solution youd like A clear and concise description of what you want to happen Add any considered drawbacks So I would like to have a possibility to set a name to the route that I can use it in view Teachability Documentation Adoption Migration Strategy If you can explain how users will be able to use this and possibly write out a version the docs Maybe a screenshot or design I general there are packages that some might think they cover the problem first one is which do what it should do but only on the Router scope which is useless in our case because each of the controller have his own isolated router so you dont know the full path second one is which seems to do the full funny staff for us but idk if if its not working the same way as the previous one So right now that we have typescript Controlleradmin export class Admin Get public indexAction logic I would like to propose to add a second optional parameter to METHOD decorators that might looks like typescript Controlleradmin export class Admin Get adminindex public indexAction logic and then in view you will be able to use kind of function to get back the full url fe html a href urladminindex Admin Panela Where url functionhelper might live in expresslocal if were talking about express or in different location regarding to adapter What is the motivation use case for changing the behavior Describe the motivation or the concrete use case Problem here lives between a developer and web designer co we can call it PEKBAC in general but I would like to solve it in different approach kind of contracts approach like when a developer who wrote a whole business logic make a deal with a web developer who build a views that routes will be named in some way web developer doesnt have to think about prefiex or care about developer changes in paths Even if you have in plenty places link to specific view and you change its path but youre using name path until it wont change youre safe Regards