 Description lint enable filename rule to fix warning project rename files to comply to swiftlint filename rule docs update documentation Checklist x this PR is based on develop or a develop related branch x the commits inside this PR have explicit commit messages x the Jazzy documentation has been generated if needed Jazzy RxFlow Now that apple has released SwiftUI Combine are there any initiatives to port this project from RxSwift to Combine The functionality Im attempting to achieve is have my view model as a Stepper conditionally emit the next step as its loaded Logically it seems the way to do this would be to accept my step in readyToEmitSteps so that I know the subscriber coordinator is listening for steps It works fine if an Rx network request is fired off and stepsaccept is called in onSuccessonError It also works if I wrap stepsaccept in DispatchQueuemainasync So I presume this is because the streams in FlowCoordinator arent fully initialized yet Ill admit I got a little lost trying to read through those stream initialization statements and I particularly was confused by readyToEmitSteps being called twice Is the functionality Im experiencing the desired functionality And if so would you mind explaining it to me Ive been browsing the source code and I noticed usage of objcgetAssociatedObject and objcsyncenter However whichever thing gets put into the latter is not even necessarily an NSObject I was wondering is it like just old and thats why we have these artifacts I reviewed issues history and see many discussions about UIPageViewController However I would like to raise that question again Here is a sample project After changing active controller swipe left swipe right steps are not being handled Obviously its because of rxDismissed behavior If you think this is ok please feel free to close the issue IMO this is unexpected behavior it can confuse users Moreover it was working with and multiple NextFlowItem I am trying to use multipleflowContributor but it blocks steps I have to use CompositeStepper as a hack The main advantage of RxFlow for me is that unexpected steps wont be handled If ViewController is hidden its steps should be blocked However with CompositeStepper i cant achieve these guarantees What do you think why rxflowdemo has a black screen after launchScreen in my project I found there is a black screen after launchScreen so I checked rxflowdemo and found same problem in the demo Hi twittemb Im looking to try out RxFlow looks very promising To this end Ive created an extremely simple twoflow app each flow having a single screen defined in separate storyboards Each flowscreen is a plainoldUIViewController There is a button on the initial flowscreen when the user taps this I want to send them to the second flow no further navigation required after this point just trying to get the most basic of actions wired up for now Ive read the docs perused the demo app and examined the source code but I just cannot seem to get this simplest of configurations working I currently have my code wired up as such here general wiring and here app delegate bootstrap As for the actual invocation of the SecondFlowRequired step the view controller for the first flows single screen has an instance of AppStepper set at creation time ie var stepper AppStepper in UIViewController class body I have an IBAction wired up to the button on the home screen that calls selfsteppertoSecondFlow While the app builds and runs and presents the first screenflow absolutely nothing happens when I tap the IBwired button that should send me to the other flow Ive defined Its like the stepper is just having no effect failing silently Nobody seems to have had similar issues starting out so I must be missing something here Im new to Swift and iOS development in general Any help you can give much appreciated Best If you present a UIViewController and from that screen you make a step which change flow will create a memory leak by holding the NavigationController with full stack of ViewController within it That flow is deallocated but the navigation controller and other view controller still exists on memory I got problem with tab bar controller when i use only one tab it works fine but when i use two tabs the object viewmodel in viewcontroller is nil The problem happens when i migrate from xx to Here my code AppDelegate let dashboardFlow DashboardFlowdependency DependencyRegistry guard let window selfwindow else return true FlowswhenReadyflow dashboardFlow block unowned window flowRoot in windowrootViewController flowRoot windowmakeKeyAndVisible selfcoordinatorcoordinateflow dashboardFlow with OneStepperwithSingleStep AppStepdashboard DashboardFlow fileprivate func navigateToDashboard FlowContributors let homeFlow HomeFlowdependency dependency let secondFlow SecondFlowdependency dependency FlowswhenReadyflow homeFlow flow secondFlow unowned self root UINavigationController root UINavigationController in let homeItem UITabBarItemtitle Home image UIImagenamed home selectedImage nil let homeItem UITabBarItemtitle Second image UIImagenamed home selectedImage nil root tabBarItem homeItem root tabBarItem homeItem selfrootViewControllersetViewControllers root root animated false return multipleflowContributors contributewithNextPresentable homeFlow withNextStepperOneStepperwithSingleStep Homestephome contributewithNextPresentable secondFlow withNextStepper OneStepperwithSingleStep Homestephome View Controller class ViewController UIViewController var viewModel ViewModel override func viewDidLoad superviewDidLoad printViewModel viewModeltitle viewModeltitle is nil Hi are there any suggestions how to use flows with UIPageViewController Currently develop branch rxDismissed is called and flow does not listen for steps any more just scroll to the end to get rxDismissed called and then scroll back to first view For example DashboardFlow from Demo app let rootViewController UIPageViewControllertransitionStyle scroll navigationOrientation horizontal options nil var vcs UIViewController private func navigateToDashboard FlowContributors let wishlistStepper WishlistStepperpreferencesServices selfservicespreferencesService let wishlistStepper WishlistStepperpreferencesServices selfservicespreferencesService let wishlistStepper WishlistStepperpreferencesServices selfservicespreferencesService let wishlistStepper WishlistStepperpreferencesServices selfservicespreferencesService let wishlistStepper WishlistStepperpreferencesServices selfservicespreferencesService let wishListFlow WishlistFlowwithServices selfservices andStepper wishlistStepper let wishListFlow WishlistFlowwithServices selfservices andStepper wishlistStepper let wishListFlow WishlistFlowwithServices selfservices andStepper wishlistStepper let wishListFlow WishlistFlowwithServices selfservices andStepper wishlistStepper let wishListFlow WishlistFlowwithServices selfservices andStepper wishlistStepper let watchedFlow WatchedFlowwithServices selfservices FlowswhenReadyflows wishListFlow wishListFlow wishListFlow wishListFlow wishListFlow watchedFlow unowned self roots in roots title Wishlist roots title Watched roots title Wishlist roots title Wishlist roots title Wishlist roots title Wishlist selfvcs roots roots roots roots roots roots selfrootViewControllersetViewControllers roots direction forward animated false completion nil return multipleflowContributors contributewithNextPresentable wishListFlow withNextStepper wishlistStepper contributewithNextPresentable wishListFlow withNextStepper wishlistStepper contributewithNextPresentable wishListFlow withNextStepper wishlistStepper contributewithNextPresentable wishListFlow withNextStepper wishlistStepper contributewithNextPresentable wishListFlow withNextStepper wishlistStepper contributewithNextPresentable watchedFlow withNextStepper OneStepperwithSingleStep DemoStepmovieList extension DashboardFlow UIPageViewControllerDataSource func pageViewController pageViewController UIPageViewController viewControllerAfter viewController UIViewController UIViewController if let current vcsenumeratedfilter element viewController firstoffset vcsindicescontainscurrent return vcs current return nil func pageViewController pageViewController UIPageViewController viewControllerBefore viewController UIViewController UIViewController if let current vcsenumeratedfilter element viewController firstoffset vcsindicescontainscurrent return vcs current return nil 