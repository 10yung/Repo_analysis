 Summary It changes the copyright year from to Checklist Put an x inside to check it like so x If code changes were made then they have been tested I have updated the documentation to reflect the changes This PR fixes an issue This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed x This PR is not a code change eg documentation README The Problem Being able to delete a webhook as a user instead of using the webhooks token When you delete a webhook using the webhooks token the operation is anonymous whereas deleting it as a user generates an Audit Log entry What problem is your feature trying to solve What becomes easier or possible when this feature is implemented The Ideal Solution Im not sure what would be the ideal solution maybe passing a client argument to Webhookdelete but I dont know how that would play with adapters Maybe a Clientdeletewebhookwebhookid method What is your ideal solution to the problem What would you like this feature to do The Current Solution The current solution is to use make a manual http request as py await ctxbothttprequestRouteDELETE webhookswebhookid webhookidwebhookid What is the current solution to the problem if any Summary This is similar to which requests implementing webhook editing as a user Summary Closes Checklist x If code changes were made then they have been tested I have updated the documentation to reflect the changes This PR fixes an issue x This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed This PR is not a code change eg documentation README Summary This closes The syntax for this method allows you to provide specific roles and their new role positions however I did think about providing an ordered list of all roles in their new role positions and I felt like that would need more variables than providing specific role position changes The syntax can still be changed if requested Checklist If code changes were made then they have been tested I have updated the documentation to reflect the changes x This PR fixes an issue x This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed This PR is not a code change eg documentation README Summary My bot has a functionality to interact with people through both a server and DM A command could look like interact user In a server users are almost always passed by user mention In Direct Messages however the user is most commonly presented as nametag One of the problems however is that most users will copy an username directly from a server This will paste as user Conversion in this format will fail as it will try to lookup user rather than user To fix this Ive added a simple check where first character from the argument is truncated if this character is Something that is worth noting that Ive only implemented this in UserConverter The MemberConverter is left untouched Checklist Put an x inside to check it like so x x If code changes were made then they have been tested I have updated the documentation to reflect the changes not needed x This PR fixes an issue This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed This PR is not a code change eg documentation README Testing Before code changes After code changes Script used for testing available here At readthedocsio for role color it says Returns the role colour An alias exists under color This PR fixes that to say Returns the role color An alias exists under colour Summary What is this pull request for Does it fix any issues Checklist Put an x inside to check it like so x x If code changes were made then they have been tested x I have updated the documentation to reflect the changes This PR fixes an issue x This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed x This PR is not a code change eg documentation README GitHub Action to detect Python syntax errors and undefined names like on all code changes On the flake test selection this PR does not focus on style violations the majority of flake error codes that psfblack can autocorrect Instead these tests are focus on runtime safety and correctness E tests are about Python syntax errors usually raised because flake can not build an Abstract Syntax Tree AST Often these issues are a sign of unused code or code that has not been ported to Python These would be compiletime errors in a compiled language but in a dynamic language like Python they result in the script haltingcrashing on the user F tests are usually about the confusion between identity and equality in Python Use to compare str bytes and int literals is the classic case These are areas where a b is True but a is b is False or vice versa Python will raise SyntaxWarnings on these instances F tests logic errors and syntax errors in type hints F tests are almost always undefined names which are usually a sign of a typo missing imports or code that has not been ported to Python These also would be compiletime errors in a compiled language but in Python a NameError is raised which will haltcrash the script on the user Summary What is this pull request for Does it fix any issues Checklist Put an x inside to check it like so x If code changes were made then they have been tested I have updated the documentation to reflect the changes This PR fixes an issue This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed This PR is not a code change eg documentation README Summary This is an adaptation of the now defunct PR It allows for two ways of command customization Separator Essentially lets you separate the arguments using something other than requiring the use of quotes for multiple word arguments foo a b c d e a b c d e Encapsulator Another way of using quotes bar a b c d e f g a b c d e f g As this changes quite a bit of the parsing of commands behind the scenes I will try to test this as extensively as possible before marking it ready for review Improvement list x Fix parentheses in docstrings x Use cisspace instead of hardcoded space check x Check if there is an encapsulator dont use a hardcoded dict to replace it Validate the objects given as parameters for Separator and Encapsulator Checklist x If code changes were made then they have been tested x I have updated the documentation to reflect the changes This PR fixes an issue x This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed This PR is not a code change eg documentation README Summary This serves as a oneup to Also adds commandsdmonly to the bunch Checklist x If code changes were made then they have been tested x I have updated the documentation to reflect the changes x This PR fixes an issue x This PR adds something new eg new method or parameters This PR is a breaking change eg methods or parameters removedrenamed This PR is not a code change eg documentation README The Problem I would like to use relative import paths to describe my extensions eg extensionsfoo rather than requiring an absolute path like mybotextensionsfoo I use relative paths for packageinternal imports so it seems logical that extensions would follow the same pattern This does not currently work I get the following error Traceback most recent call last File usrlib python runpypy line in runmoduleasmain main modspec File usrlib python runpypy line in runcode execcode runglobals File homechrisProjectsdiscordfatebotdiscordfatebotmainpy line in module botloadextensionextensionserrorhandling File homechrislocalsharevirtualenvsdiscordfatebotMUSnTVTSlibpython sitepackagesdiscordextcommandsbotpy line in loadextension lib importlibimportmodulename File homechrislocalsharevirtualenvsdiscordfatebotMUSnTVTSlib python importlibinitpy line in importmodule raise TypeErrormsgformatname TypeError the package argument is required to perform a relative import for extensionserrorhandling It would seam this library is using importlib internally which can handle relative paths but is not passing enough parameters The Ideal Solution I would like Botloadextension to take an optional second parameter which would specify the package to resolve against This follows the example of importlibimportmodule which takes a package parameter in the same way If no package is provided the path is looked up as if from a toplevel script the current behavior This would allow us to say python botloadextensionextensionsfoo package which would load the extension relative to the current package The Current Solution Currently the solution is to only use absolute paths I use importlibutilsresolvename to resolve my relative paths to absolute ones python from importlibutil import resolvename botloadextensionresolvenameextensionsfoo package Summary Please allow us to load extensions using relative paths via an optional package parameter in Botloadextension This feature request looks similar to but that request wants something similar old Python xstyle relative paths just concatenating package and name with a dot I would like something compatible with Python and importlib I would be willing to work on a merge request I just wanted to make an issue first in case there was a conscious decision not to support relative paths I would still ask you to reconsider