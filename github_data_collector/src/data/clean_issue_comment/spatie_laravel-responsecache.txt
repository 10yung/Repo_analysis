 Closes This PR adds a new syntax for cache lifetime php Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponse mins Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponse hours Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponse week Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponsetomorrow Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponsenoon Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponsemidnight and even Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponselast day of this month Routegetmyspecialsnowflake SnowflakeControllerindexmiddlewarecacheResponsefirst monday of January UPDATE I see a problem its possible to omit lifetime option and use multiple tags php middlewarecacheResponsefoobar Currently I dont know a good backward compatible solution UPDATE Currently I think that the best option it to use Illuminate Http Middleware SetCacheHeaders like syntax for options php Illuminate Http Middleware SetCacheHeaders usage example Routeget HomeControllerclassmiddlewarecacheheadersnocachemaxage etag CacheResponse usage example Routeget HomeControllerclassmiddlewareresponseCachettl hourtagsfoobar But its BC unless someone wants to write a good options parser and support it I think we can implement it as a new middleware in addition to exiting and deprecate existing CacheResponse and remove it in next major release Another feature that we can implement using this syntax specify profile as another option php use default profile Routeget HomeControllerclassmiddlewareresponseCachettl hourtagsfoo bar specify profile explicitly Routeget HomeControllerclassmiddlewareresponseCachettl hourtagsfoo barprofileguestsonly The only problem is usage of as delimiter for tags we need to replace it by something else in order to dont break middleware params parsing by Laravel Possible options fullwidth comma Could you please provide some feedback on proposed syntax and feature so I will implement it only if well merge it Thanks a lot Hi there I created this API route Index RoutemiddlewarecacheResponse getindex CategoryApiControllerindexnameapicategoryindex The indexmethod calls a GuzzleHTTP request to a third party API Of course Id like to prevent too many calls and so I hope to be able to cache this result Using this setup I see that there are outgoing requests to the API every time the route is used What did I miss Edit I just saw that the cache only works once I visited the api route directly It does not work if the route is called by axios routesapiphp php Routegetusers UserIndexActionclassmiddleware cacheResponseusers Routegetproducts ProductIndexActionclassmiddleware cacheResponseproducts This test code succeeds php use Config use Illuminate Support Facades Cache use Spatie ResponseCache Facades ResponseCache test public function clearByTag header Configgetresponsecachecachetimeheadername Ignore the CACHEDRIVER setting in phpunitxml and use Redis Configsetcachedefault redis Clear all cache as initialization ResponseCacheclear Create a cache for users and products thisgetapiusers thisgetapiproducts Delete the users cache by tag ResponseCacheclear users Fail Cachetagsusersflush Pass Response is only cached for products thisgetapiusersassertHeaderMissingheader thisgetapiproductsassertHeaderheader The README explains that Note that this uses Laravels built in cache tags functionality meaning routes can also be cleared in the usual way Cachetagsspecialflush However changing Cachetags users flush to ResponseCacheclear users will fail Do these two cache deletes work the same way 