Thanks for this awesome bit of work youve put together I have an electronnode app running on localhost laptop and a react native app running on my mobile using this Both can get an ID from either your server or one that I run locally no problems there Using peercallmobileId stream on my laptop This ends up triggering the mobPeeroncall functioncall as expected However the callonstream functionstream never gets executed no matter what I seem to do Any help would be appreciated Electron Project laptop let mobileId docdatamobileId let conn webPeerconnectmobileId connonopen function const call webPeercallmobileId stream callonstream functionmobStream consolelogGot null stream mobStream React Native code const mobPeer new Peer host ipv secure false port path peer mobPeeronerror functionerr consolelogMOB CONN ERROR err mobPeeronopen functionid consolelogmobile id id I send ID to database here for electron app to find mobPeeroncall functioncall consolelogWeb calling this works fine callanswernull callonstream functionstream consolelogstream from desktop this never runs The newest version of Edge uses Chromium and supports the same level of WebRTC features that Chrome does Wondering if binary packunpack is mandatory with the latest browser implementations of WebRTC serialization As I am working on the Python client port I noticed that the binary pack dependency would also have to be ported In the meanwhile it seems like more recent peer libraries like simplepeer rely on the default serialization standard which simplifies cross language portability Does it make sense to make binary packing optional Branching off issue peerspeerjsserver I understanding that other languages are not currently a priority for the core peerjs team Just in case anyone else is interested in the topic and wants to help I started working on a Python port with the intention to contribute it back to the main peerjs project Using a very simple example from peerjscom between two peers javascript var getUserMedia navigatorgetUserMedia navigatorwebkitGetUserMedia navigatormozGetUserMedia peeroncall functioncall getUserMediavideo true audio true functionstream callanswerstream Answer the call with an AV stream callonstream functionremoteStream Show stream in some videocanvas element consolelogReceived stream remoteStream functionerr consolelogFailed to get local stream err callonstream always receives two same remote streams Here is a screen shot issue Is it a known issue Thanks Ive been successful in testing peerjs from one localhost browser window to another but when trying to connect via a different computer on the same LAN connected to the same wifi network Im not able to create a successful webrtc connection Im able to successfully connect to the peer server in both cases however when trying to connect over the LAN no offer or corresponding answer is given My code serverjs clienthtml Run the clients by loading the listener on the machine where the server is listening then loading the connector on the separate LAN machine The relevant nonheartbeat websocket frames note the listener is named and the connector is named in chronological order Listener receive typeOPEN Connector receive typeOPEN Connector send typeCANDIDATE payload candidate candidatecandidate udp typ host generation ufrag wLaA networkcost sdpMid sdpMLineIndex typedata connectionIddctyctyod ak dst Connector send typeCANDIDATE payload candidate candidatecandidate udp typ srflx raddr rport generation ufrag wLaA networkcost sdpMid sdpMLineIndex typedata connectionIddctyctyod ak dst Listener receive typeCANDIDATE src dst payload candidate candidatecandidate udp typ host generation ufrag wLaA networkcost sdpMid sdpMLineIndex typedata connectionIddctyctyod ak Listener receive typeCANDIDATE src dst payload candidate candidatecandidate udp typ srflx raddr rport generation ufrag wLaA networkcost sdpMid sdpMLineIndex typedata connectionIddctyctyod ak I noticed that in the successful localhost test the first thing the connector does is make an OFFER however no OFFER is given at all in the unsuccessful LAN test This is the offer given in the successful test typeOFFERpayloadsdptypeoffersdpv r no IN IP r ns r nt r nagroupBUNDLE r namsidsemantic WMS r nmapplication UDPDTLSSCTP webrtcdatachannel r ncIN IP r naiceufrag enJ r naicepwdbmkMAiyGXd kTbNgYoL K r naiceoptionstrickle r nafingerprintsha C EAF DE A B AC AC E A FB C A E D A F A r nasetupactpass r namid r nasctpport r namaxmessagesize r ntypedataconnectionIddcdd m huxvzbrowserChromelabeldcdd m huxvzserializationbinarydst Another thing I noticed is that the candidate sent by the connector is slightly different and theres only one instead of two theres the string ca aacd b d ed d local instead of an IP address typeCANDIDATEpayloadcandidatecandidatecandidate udp ca aacd b d ed d local typ host generation ufrag enJ networkcost sdpMid sdpMLineIndex typedataconnectionIddcdd m huxvzdst Note that I also tried the reverse loading the listener on the separate machine and the connector on the same machine as the peerjs server which also didnt work The websocket frames were a bit more complex tho Does anyone know what might be going on here I figured a test over a LAN should be just as easy as a local demo since theres no NAT to traverse Id like to build a nodejs system that uses web rtc but Im noticing that this library doesnt support nodejs Are there any plans to support nodejs After I end the call the callonclose method executes after a delay of a few seconds This is on my localhost development environment I tried using both the default STUN ICE server from the peerJS docs stunlgooglecom AS well as my own STUN server that Ive set up with coturn Yet no difference and same delay no matter what Delay exists in both Chrome and Firefox Ive also noticed that regardless of if I use my own stun server address or googles the same ICE candidates ip address appears with both cases as can be seen in the picture below img width altScreenshot at src What is causing the delay and how can it be fixed any ideas kidandcat As a side note DataConnection that is sending and receiving messagesdata between the two peers does not have any delay at all Thanks in advance Hello I have tried the Combining with existing express app example and it didnt work on my iphone I always get the error message Error Lost connection to server my code is this const express requireexpress const app express const ExpressPeerServer requirepeerExpressPeerServer var server requirehttpscreateServer key fsreadFileSyncserverkey cert fsreadFileSyncservercert expressApp const peerserver ExpressPeerServerserver options appusepeerjs peerserver serverlisten frontend var peer new Peerpeer signalingServer var errorFn e alerte PROBLEM ios Error lost connection to server peeronerror errorFn const signalingServer host port keypeerjs path peerjs debug My caller never has connection open status on the call object created from making a call Attempts to make a call to the peer callPeer let t this navigatormediaDevicesgetUserMedia audio true thenstream let call tpeercalltcalleeidtrim stream Logs consolelogstream consolelogcall inserting our stream to the video tag let audio documentquerySelectoraudio audiosrc windowURLcreateObjectURLstream callonstream remoteStream consolelogEVENT call stream Never logs consolelogremoteStream Never logs err consolelogerr Initializes the open event listeners this is more for the callee side of things initOpenListeners let t this thispeeronopen functionid tmyId id thispeeroncall call navigatormediaDevicesgetUserMedia audio true thenstream callanswerstream Logs consolelogstream consolelogcall inserting our stream to the video tag let audio documentquerySelectoraudio audiosrc windowURLcreateObjectURLstream Answer the call providing our mediaStream callonstream remoteStream consolelogEVENT call stream Never logs consolelogremoteStream Never logs Everything else works calls are activated when I make a call the other user receives it but neither calle caller ever has their stream event fired