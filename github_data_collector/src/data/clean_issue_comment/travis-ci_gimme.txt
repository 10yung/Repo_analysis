When theres no currently active go version no go command found in PATH listversions returns error command not found when trying to extract the current go version by executing go binary without any checks gimme l listversions should always work regardless of the state of any inactive go This is specially true when trying to check if a specific version is installed before any version is activated On my computer using GIMMEGOVERSIONoldstable gimme r returns with gimme v On Travis the job fails with gimme version specifier oldstable unknown even though its also using gimme v stable works Seems there is already a Dockerfile in the root and gimme repository on DockerHub but no image has ever been pushed to it Could you please configure Docker builds for the repository The readme mentions the following latest released version yaourt S gimme current git HEAD revision yaourt S gimmegit Yaourt is no longer maintained and is considered dangerous I recommend replacing all mentions of yaourt with a different program to avoid confusing the users I can personally recommend widely used yay For more information see this old version of the comparison table on Arch wiki All mentions of yaourt were removed from it since then gimme known doesnt output anything Technically it should return a list of go versions that could be installed Note I cloned the repository and ran gimme known The links for changes made in versions and were missing Hi this is the proposed change to resolve gimme currently stores tmpfiles in tmpgimme This creates a problem when one machine is used by multiple users since tmpgimme will be accessible only by the user that created the directory first Can we change the default tmpdir to something like tmpgimmewhoami Summary It seems that crosscompilation setup is not working if you run gimme without running it for a current OS first Also CC setup can only be done in source mode Is it intended way of how it should work or am I missing something How to reproduce the issue Run following on darwin rm rf gimme GIMMEOSlinux GIMMEARCHamd gimme Expected result gimme returns successfully and go is setup under HOMEgimme Actual result gimme exits with code saying I dont have any idea what to do with Notes gimme should install linux version of go toolchain but binaries should be compiled for GIMMEHOSTOS instead linux version of the binary is installed setup fails in source mode with a similar message setup succeeds in sources mode if there is existing darwin installation Debug output GIMMEDEBUG GIMMEHOSTOSdarwin GIMMEHOSTARCHamd GIMMETYPEbinary GIMMEOSlinux GIMMEARCHamd gimme readonly GIMMEVERSIONv GIMMEVERSIONv readonly GIMMECOPYRIGHTCopyright c gimme contributors GIMMECOPYRIGHTCopyright c gimme contributors readonly GIMMELICENSEURL GIMMELICENSEURL export GIMMEVERSION export GIMMECOPYRIGHT export GIMMELICENSEURL basename Usersvitgocodebingimme programnamegimme ALLOWEDUPSTREAMVERSIONRE azAZ sort versionsort linux darwin amd amd Usersvitgimmeenvs Usersvitgimmeversions varfolders htkppg px jglygs c h gnTgimme binary osx case GIMMEVERSIONPREFIX in true case GIMMEOS in forceinstall forceknownupdate gt case in break n GIMMEGOVERSION n case GIMMEARCH in case GIMMEHOSTARCH in s t a b l e assertversiongiven z x digit digit return forceinstall unset GOARCH unset GOBIN unset GOOS unset GOPATH unset GOROOT unset CGOENABLED unset CCFORTARGET unset GO MODULE mkdir p Usersvitgimmeversions Usersvitgimmeenvs excludefrombackups Usersvitgimmeversions case GIMMEHOSTOS in tmutil addexclusion Usersvitgimmeversions realpath Usersvitgimmeversions d Usersvitgimmeversions cd Usersvitgimmeversions pwd echo Usersvitgimmeversions GIMMEVERSIONPREFIXUsersvitgimmeversions realpath Usersvitgimmeenvs d Usersvitgimmeenvs cd Usersvitgimmeenvs pwd echo Usersvitgimmeenvs GIMMEENVPREFIXUsersvitgimmeenvs case GIMMETYPE in tryexisting binary case in local existingverUsersvitgimmeversionsgo linuxamd local existingenvUsersvitgimmeenvsgo linuxamd env x Usersvitgimmeversionsgo linuxamd bingo s Usersvitgimmeenvsgo linuxamd env return trybinary amd local version local archamd local bintgzvarfolders htkppg px jglygs c h gnTgimmego linuxamd targz local bindirUsersvitgimmeversionsgo linuxamd local binenvUsersvitgimmeenvsgo linuxamd env azAZ linux windows binary varfolders htkppg px jglygs c h gnTgimmego linuxamd targz amd local version local filevarfolders htkppg px jglygs c h gnTgimmego linuxamd targz local archamd urlsGIMMEDOWNLOADBASEgoversionGIMMEOSarchtargz linux d a r w i n amd arm linux windows docurls varfolders htkppg px jglygs c h gnTgimmego linuxamd targz fvarfolders htkppg px jglygs c h gnTgimmego linuxamd targz shift sha sum c varfolders htkppg px jglygs c h gnTgimmego linuxamd targzsha return extract varfolders htkppg px jglygs c h gnTgimmego linuxamd targz Usersvitgimmeversionsgo linuxamd mkdir p Usersvitgimmeversionsgo linuxamd varfolders htkppg px jglygs c h gnTgimmego linuxamd targz targz tar xf varfolders htkppg px jglygs c h gnTgimmego linuxamd targz C Usersvitgimmeversionsgo linuxamd stripcomponents env Usersvitgimmeversionsgo linuxamd d Usersvitgimmeversionsgo linuxamd bin tee Usersvitgimmeenvsgo linuxamd env x Usersvitgimmeversionsgo linuxamd bingo GOROOTUsersvitgimmeversionsgo linuxamd Usersvitgimmeversionsgo linuxamd bingo version return return echo I don t have any idea what to do with I dont have any idea what to do with echo using download type binary using download type binary exit If I try to run binary separately I get an error indicating that it was compiled for linux Usersvitgimmeversionsgo linuxamd bingo version zsh exec format error Usersvitgimmeversionsgo linuxamd bingo Go env For debugging purposes here is my go env go env GOARCHamd GOBIN GOCACHEUsersvitLibraryCachesgobuild GOEXE GOFLAGS GOHOSTARCHamd GOHOSTOSdarwin GOOSdarwin GOPATHUsersvitgocode GOPROXY GORACE GOROOTusrlocalCellargo libexec GOTMPDIR GOTOOLDIRusrlocalCellargo libexecpkgtooldarwinamd GCCGOgccgo CCclang CXXclang CGOENABLED GOMOD CGOCFLAGSg O CGOCPPFLAGS CGOCXXFLAGSg O CGOFFLAGSg O CGOLDFLAGSg O PKGCONFIGpkgconfig GOGCCFLAGSfPIC m pthread fnocaretdiagnostics Qunusedarguments fmessagelength fdebugprefixmapvarfolders htkppg px jglygs c h gnTgobuild tmpgobuild gnorecordgccswitches fnocommon Successful sequence Following sequence shows that attempt to setup linux version first fails but if we setup darwin first then linux setup succeeds What is not shown is that in first case gimme uses binary download type and in the second case it falls back to compiling toolchain from sources vitvitC VF UDHTDG gocode master rm rf gimme vitvitC VF UDHTDG gocode master GIMMEOSlinux gimme Unable to setup go bootstrap from existing or binary I dont have any idea what to do with using download type auto vitvitC VF UDHTDG gocode master GIMMEOSdarwin gimme unset GOOS unset GOARCH export GOROOTUsersvitgimmeversionsgo darwinamd export PATHUsersvitgimmeversionsgo darwinamd binPATH go version export GIMMEENVUsersvitgimmeenvsgo env vitvitC VF UDHTDG gocode master GIMMEOSlinux gimme export GOOSlinux unset GOARCH export GOROOTUsersvitgimmeversionsgo src export PATHUsersvitgimmeversionsgo srcbinPATH go version export GIMMEENVUsersvitgimmeenvsgo srcenv 