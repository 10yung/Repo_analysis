Does the library support shared recycledViewPools I have a tablayout with FragmentPagerAdapter and several tabs that each use the same FlexibleAdapter which consists of AbstractExpandableItem as items with AbstractFlexibleItem as subitems The ExpandableViewHolder toggles the expansion on item click viewsetOnClickListenerv toggleExpansion which works without problems Since the ViewHolders in each tabadapter are the same I decided to use a shared ViewPool for the RecyclerView that gets initialized in the parent fragment to reduce the calls to onCreateViewHolder Now I have the problem though that sometimes when toggleExpansion gets called nothing happens at all The item is not collapsed or expanded I guess its the case when the adapter uses a viewholder from another tab because without the recycledViewPool everything is working fine Hi is there a better way to implement countdown timer for multiple views and dispose them once adapter is dumped javalangIndexOutOfBoundsException Index Size at javautilArrayListaddAllArrayListjava at eudavideaflexibleadapterFlexibleAdapterperformInsertFlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdaptershowHeaderOfFlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdaptershowOrUpdateHeadersFlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapteraddItemsFlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapteraddItemFlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapteraddItemToSectionFlexibleAdapterjava How can i implement swipe menu like in IOS Is there a way using this library And if not this can be added feature to this library I am creating a messaging screen and am using the Endless Scroll Listener to lazy load old messages Here is my problem Currently the callback for onLoadMore is only called when you hit the last item minus the threshold This works great in most cases but imagine this scenario Message API Limit messages I am saving my messages to disk I have a conversation with messages in it Then I dont use the app for months Lets say more messages have been sent to me since I last opened the app I now have total messages in the server I open the app again and go to this conversation The messages that were saved to disk will show Then I will pull down the latest messages but I wont try loading more messages until I reach the end of the list So I have in effect missed out on messages messages from initial load plus the stored in the database Is there a way to be notified every time I scroll messages so I can download the next messages whether they are needed to be downloaded or not Is there a better way to solve this problem that I am not seeing Correct me if Im wrong with there isnt seem to be a scrollToPosition method I have a list with over K items and Id like to scroll to top quickly Smooth Scroll is not a good option for me How would one achieve this Checked on version of library with android emulator I have single times exapandable items containing lists of not expandable sub items in FlexibleAdapter All items there are static once added they are not reordered during lifetime of FlexibleAdapter Whenever user inputs filter into TextView filterInput TextWatcherafterTextChanged is calling FlexibleAdapterfilter All expandable filtered views are expanded this is correct behavior it is done automatically by library Then I have a button which clears filter input Whenever button is clicked filterInpt text is set to and TextWatcherafterTextChanged is also called so filter again occurs It finishes with all closed restored views I need now to expand all expandable views to show sub items but whenever i call FlexibleexpandAll after filter is finished it is not working I tried with delay to expand views ms but this either do not expand views for some items they are expanded but not all I also tried with FlexibleAdapterOnFilterListener with delay or without but this does behave the same This seems like expand does work as when i click on expandable item it is shown as expanded but There are not subitems there so i need to collapse it and expand manually and then subitems are there agian Calling FlexibleAdaptercollapseAll and then FlexibleAdapterexpandAll with delay workarounds the issue Hi davideas Seems like this NPE issue is still not addressed after the c be Its still throwing NPEs Now at the line of FlexibleAdapterapplyAndAnimateRemovals For the background I cloned this repository master branch with the commit having hash identifier e and built the library as aar and included that to our project This NPE crash at FlexibleAdapterapplyAndAnimateRemovals is top crash for our app I wished that c be would have fixed this issue but it didnt It still happens randomly to users There doesnt seem to be any connecting pattern based on device model or brand or Android OS version Here is stack trace from the crash reporting for the NPE crash Fatal Exception javalangRuntimeException An error occurred while executing doInBackground at androidosAsyncTask done AsyncTaskjava at javautilconcurrentFutureTaskfinishCompletion FutureTaskjava at javautilconcurrentFutureTasksetException FutureTaskjava at javautilconcurrentFutureTaskrun FutureTaskjava at javautilconcurrentThreadPoolExecutorrunWorker ThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrun ThreadPoolExecutorjava at javalangThreadrun Threadjava Caused by javalangNullPointerException Attempt to invoke virtual method int javalangIntegerintValue on a null object reference at eudavideaflexibleadapterFlexibleAdapterapplyAndAnimateRemovals FlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapteranimateTo FlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapteranimateDiff FlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapteraccess FlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapterFilterAsyncTaskdoInBackground FlexibleAdapterjava at eudavideaflexibleadapterFlexibleAdapterFilterAsyncTaskdoInBackground FlexibleAdapterjava at androidosAsyncTask call AsyncTaskjava at javautilconcurrentFutureTaskrun FutureTaskjava at javautilconcurrentThreadPoolExecutorrunWorker ThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrun ThreadPoolExecutorjava at javalangThreadrun Threadjava Android Increase the SDK to because Android has just been released 