This fix is specifically for running um inside a Docker container For some reason Etcgetlogin returns nil when inside a Docker container Im not sure of the reason why thats so but some light searching pointed to recommendations to use Etcgetpwuid instead of Etcgetlogin anyway Reproduction steps Dockerfile dockerfile FROM ruby buster RUN git clone cd um gem build gemspec gem install umgem CMD um list Building and running that produces this output usrlocalbundlegemsum libumumconfigrb in no implicit conversion of nil into String TypeError from usrlocalbundlegemsum libumumconfigrb in writepagesdirectory from usrlocalbundlegemsum libumumconfigrb in source from usrlocalbundlegemsum libexecumlistrb in main With patch Dockerfile dockerfile FROM ruby buster RUN git clone singlebranch branch bggsgetpwuid cd um gem build gemspec gem install umgem CMD um list Now running that presents the expected output No pages found for topic shell I edited the page like this and when I read it it outputs like this am I missing something or um dose not support unicode character now Since this went into hacker news a few weeks back Ive been watching the project I think it would be beneficial to set a direction for the project so as not to acquire any unwanted responsibilities and make sure the project stays lean and matching its purpose There are a few things going on at the same time mostly trying to get um to be multiplatform namely enabling it to run on Linux Windows and FreeBSD This has been somewhat conflated with making it not rely on pandoc see and I think this is a mistake and perhaps youll agree and we can restructure the issues and organize the efforts to increase ums availability without squandering manhours Its possible Im mistaken I welcome the learning opportunity um is written in Ruby which can run on all the desired platforms Except it depends on pandoc But this is not really a hurdle since pandoc is distributed in all desired platforms The availability requests are actually packaging requests for the most part not really requiring the project to change um shouldnt have the burden of managing its dependencies Thats what package managers are for Packages are projects unto themselves and need not be conflated with the main project A good direction to multiplatform availability of um is I think if anyone wants to make this project available to other platforms they should do so by packaging it and packages are separate projects These are examples of what could be done Windows Build a choco package as it was done for pandoc or build an MSI or equivalent installer macOSLinux can be kept by maintaining the Homebrew package up to date can be enhanced by building packages for the different distros FreeBSD can be managed by making a pkg package I am using Visual Studio Code as my editor which is on my path My config looks like editor code pager less pagesdirectory Usersmatthewpfluegerumpages defaulttopic shell pagesext md When doing um edit grep just brings up a blank editor HOWEVER setting the editor to vi brings up what youd expect a the template file Could you please consider respecting XDGCONFIGHOME That is storing the config in the first of these where the env var exists UMCONFIGHOME XDGCONFIGHOMEum HOMEconfigum Alternatively in order not to change anything for users already using HOMEum simply use XDGCONFIGHOME if its set since then the user surely wants it to be used and carry on with existing behaviour otherwise Many thanks for um a simple but great idea