When building libargon as part a buildsystem like for example buildroot which targets embedded systems it shouldnt fail if the symlink is already present on the target rootfs When I build argon on macOS Catalina A it produces a binary but the binary does not work it always exits with a segmentation fault when trying to produce a hash Running make test also fails My shell is zsh and I have Apples current command line tools installed Here are the steps I took make Building with optimizations for native cc stdc O Wall g Iinclude Isrc pthread marchnative srcargon c srccorec srcblake blake bc srcthreadc srcencodingc srcoptc srcrunc o argon No error is thrown during build and the argon binary is created as expected Running tests make test Building with optimizations for native cc stdc O Wall g Iinclude Isrc pthread marchnative Wextra Wnotypelimits srcargon c srccorec srcblake blake bc srcthreadc srcencodingc srcoptc srctestc o testcase ld cant write output file testcase for architecture x clang error linker command failed with exit code use v to see invocation make test Error If I try and produce a hash using the produced argon binary argon ThisIsMySalt asdfjkl Type Argon i Iterations Memory KiB Parallelism zsh segmentation fault argon ThisIsMySalt Thats it As a robust command line program the arguments should not be positional eg tar In argon the arguments are mostly nonpositional except salt See example below Screen Shot at PM it didnt work because I placed the type argument id before the salt Also this error message is useless because it doesnt give hint of which parameter went wrong A good example is git which will give you the context what the CLI program thinks you are trying to do and suggest the right way to do it it worked because i followed the EXACT ordering it worked because all the arguments are not ordered eg t placed last argon h or just argon gives the help text But no way to show argon version To me the usage line example is problematic Usage argon h salt idid t iterations m log memory in KiB k memory in KiB p parallelism l hash length er v The help text usage argon h or just argon doesnt require salt but all other cases salt argument is required However having h argument or any arguments prefixed with placed in front of salt made the impression that argon doesnt require arguments to be passed in order but in fact thats not true salt must be the st positional argument Recommend have a separate line to indicate how to print help text rather than consolidate all usages in one line in this current awkward way Or make the salt argument optional as well salt and provide more detail error message when argon expects salt but not getting it add a print version command line argument version Right now the only way for me to check version is to do brew info argon always dont work if I compile from source directly Hi everyone Im trying to encrypt password to stroe it in database First I use example code from readme to test include argon h include stdioh include stringh include stdlibh include iostream define HASHLEN define SALTLEN define PWD password string PasswordEncoderencodestring plainPassword uint t hash HASHLEN uint t hash HASHLEN char encoded uint t salt SALTLEN memset salt x SALTLEN uint t pwd uint t strdupPWD uint t pwdlen strlenchar pwd uint t tcost pass computation uint t mcost mebibytes memory usage uint t parallelism number of threads and lanes highlevel API argon ihashrawtcost mcost parallelism pwd pwdlen salt SALTLEN hash HASHLEN argon ihashencodedtcost mcost parallelism pwd pwdlen salt SALTLEN HASHLEN encoded lowlevel API argon context context hash output array at least HASHLEN in size HASHLEN digest length pwd password array pwdlen password length salt salt array SALTLEN salt length NULL optional secret data NULL optional associated data tcost mcost parallelism parallelism ARGON VERSION algorithm version NULL NULL custom memory allocation deallocation functions by default only internal memory is cleared pwd is not wiped ARGON DEFAULTFLAGS freepwd for int i iHASHLEN i printf x hash i printf n if memcmphash hash HASHLEN for int i iHASHLEN i printf x hash i printf nfail n else printfok n stdcout encoded password encoded stdendl return encoded Now when I run it I see that two diffrent hashes are generated for high level and low level dafa c bf a ae bcf ad bd ca e da ac af f fe f f abe aa df abe aa f fe f fail encoded password argon iv m t p sdMe h RTWAHZ Q Tq QJtr LFv enJjrne a L UE qDFLakxrAr QQKZWXY Shouldnt be the same Some Linux distributions eg NixOS where this issue was spotted dont provide an unprefixed ar when crosscompiling This PR aims to fix this See NixOSnixpkgs for information on where did it start Ive published an Android binding named Argon Kt for Argon that makes it simple for Android developers to use Argon It emerged from a personal mobile app project Looking at the existing bindings Ive found that the existing Java bindings dont work too well with Android especially with the now mandatory bit support Argon Kt can be used from both Kotlin and Java projects I hope adding to the listing will help other mobile developers This is just a detail but the CHANGELOGmd wasnt forgotten with the last release This patch automates the build process using most of the existing handcrafted Makefile Its now the familiar process of running configure prefixusr make make install Using autotools allows the dynamic variables in libargon pc to be automatically substituted using detected variables Its much easier than the current manual process More could be done to further integrate autotools with the current buidl system but this patch keeps most the existing build system to keep the changes small None Hi guys Any ideas how I can compile this for arm fatal error emmintrinh No such file or directory include emmintrinh compilation terminated 