Tested this with setting the cursor through WindowProperties and through a prc file Any non cur file should default to the origin reference For some reason IOHIDDeviceRegisterRemovalCallback no longer works on so an app will crash once trying to poll a device that doesnt exist anymore Thankfully there is the alternative solution of using IOHIDManagerRegisterDeviceRemovalCallback This just required a little rearranging of the callback code as well as keeping track of the connection between IOHIDDeviceRefs and IOKitInputDevices so we actually know which device to remove On macOS if a shader uses the uniform p dTextureMatrix defined like this uniform mat p dTextureMatrix The glgsg aborts due to invalid operation displaygsgglgsgerror at of pandasrcglstuffglShaderContextsrccxx invalid operation Here is an apitrace apitracezip The error can be seen in frame render opaque When setCursporFilenamecursorFilecur is assigned the value of the hotspot on Windows is carried properly but in OSX is not updated leaving the hotspot in the top right position Have not tested it in Linux wp WindowProperties wpsetCursorFilenamecrossHaircur basewinrequestPropertieswp added cur file with modified hotspot in zip file crossHairzip A texture created using setclearcolor has no ram image associated with it but should still be applied on nodes as it contains a uniform color and so is not empty See a fallback texture normalfallback is applied on the node When printing out the Attribs it is correctly displayed but when listing the TextureStages applied on the node it is not present Hi What follows is a list of what I would consider to be problematic behaviour of MouseWatcherRegions caused by the current way of handling mouse button presses as well as a suggestion that could add more usercontrol over this behaviour As MouseWatcherRegions are fundamental components of DirectGui widgets these are equally affected by these issues So lets start by examining what happens when one presses a DirectButton and drags the mouse around while holding down the left mouse button LMB When the mouse is dragged over other DirectButtons or MouseWatcherRegions these do not respond Only the enter and leave events of the pressed DirectButton are fired Whether this is desirable or not depends on the use case see below but I think we can agree that for most purposes this is indeed what one would want While keeping the LMB down press and release any other mouse button or roll the mouse wheel suddenly all other DirectButtons and MouseWatcherRegions will react to mouseover events which can easily lead to bugs in the user code In the case of a DirectButton this already causes a serious visual bug even when the LMB is released the DirectButton will show its press state when mousing over it instead of its rollover state Only leftclicking it again can undo this And when the LMB is released over the DirectButton itself its associated command is not executed in this case Checking if another button gets pressed eg the RMB by trying to catch the mouse event seems to not work either while the mouse is over the DirectButton so it is hard to handle this manually When the mouse is moved not dragged out of a MouseWatcherRegion across a side that lies on the border of a DisplayRegion the leave event is fired twice in succession which may also cause problems for associated code that should be called only once Regarding it may sometimes be useful to have other MouseWatcherRegions respond to mouseovers while dragging the mouse over them eg in an RPGlike context where one would like to drag drop an item icon into a gridlike inventory implemented using MouseWatcherRegions Another example would be a GUI widget such as a list made up of separate cell widgets where one could multiselect several entries at once by dragging over them For such cases perhaps it might be possible to set an alwaysactive flag or something to that effect on a MouseWatcherRegion to prevent it from being deactivated when a mouse button is held down Here is some code to reproduce the above issues python from panda dcore import from directshowbaseShowBase import ShowBase from directguiDirectGui import showbase ShowBase def command printButton pressed for i in range text Button formati Pressed formati Hilited formati Disabled formati pos i DirectButtontexttext textscale borderWidth pospos commandcommand def onregionenterargs name args getname if namestartswithregion printEntered formatname def onregionleaveargs name args getname if namestartswithregion printLeft formatname def onrightdown printRight mouse button pressed cm CardMakercell r t cmsetframer r t t parent showbaserender d mousewatcher showbasemouseWatcherNode mousewatchersetenterpatternregionenter mousewatchersetleavepatternregionleave showbaseacceptregionenter onregionenter showbaseacceptregionleave onregionleave showbaseacceptmouse onrightdown for i in range pos Point i cell parentattachnewnodecmgenerate cellsetpospos region MouseWatcherRegionregionformati posx r posx r posz t posz t mousewatcheraddregionregion pos Point r t cell parentattachnewnodecmgenerate cellsetpospos region MouseWatcherRegionregiontopleft r t mousewatcheraddregionregion showbaserun The white rectangles have associated MouseWatcherRegions to handle mouseover events To reproduce move the mouse over the white rectangle in the top left hand corner of the window and then move it out of the window This was tested on Windows It would be great if youd want to look into this thanks Panda d version panda d installed with pip OS openSUSE Tumbleweed linux bit Python version I have installed panda d with pip then created simple app from tutorial mainpy python import os printfUsing PRCDIR osenviron PRCDIR from directshowbaseShowBase import ShowBase class MyAppShowBase def initself ShowBaseinitself selfscene selfloaderloadModelmodelsenvironment selfscenereparentToselfrender selfscenesetScale selfscenesetPos app MyApp apprun Then I followed instructions at and created Debugprc file in the current directory same as mainpy notifylevel spam defaultdirectnotifylevel spam Then I launched app with PRCDIRpwd python mainpy But I did not have any spam output and it looks like my Debugprc was not picked up by panda d The output was PRCDIRpwd python mainpy Using PRCDIR homezpprojpandatut Known pipe types glxGraphicsPipe all display modules loaded To check I tried to manually edit the file usrlib python sitepackagespanda detcConfigprc and it did has effect I got a lot of spam in the console when app is launched pgraphdebug Destructing x f cam dp etc This suggestion comes from discussion on the forum starting with this post Right now if Im not much mistaken DirectGUI widgets either block all inputevents or they block noneand by default active widget ie those expected to respond to input block inputevents This can be a bit of a problem For example imagine a button set in a DirectScrolledFrame One might want the button to be clickable and the scrolledframe to be scrollable via the mousewheel However since the button blocks events scrolling wont work when the mouse is over the button What I suggest then is this instead of UI widgets blocking events they optionally propagate them based on whether they consider the event to have been handled That is if a widget receives an event it responds as it normally does or doesnt eg a button pressing in and calling its commandfunction and then indicates whether the event has been handled Then if the event hasnt been handled its propagated on to the next widget below the current one Alternatively the event could be propagated to the parent instead of the next widget below I favour the latter but Im very open to discussion This would mean that for example a button could respond to clicks and prevent them from reaching other widgets while still allowing scrollwheel events to pass through If its desired that current behaviour is retained then this could be done by having widgets default to always responding one way or another with the option to make them more discerning That said I do question whether retaining the exact current behaviour is desirable in this case especially as things like preventing clicks from passing through buttons would still be in place All that said this suggestion is a pretty big change Ill understand if its deemed too bigespecially if theres thought still to replace DirectGUI one day The manylinux wheel of Panda D contains the static version of libpython eg deploylibslibpython ma in panda d optcp cp mmanylinux x whl where macosx version contains deploylibslibpython dylib and winamd contains deploylibspython dll This causes problem with CEFPython whose library on Linux cefpython cefpythonpy so refers to libpython mso I detected this while writing a CI workflow for my app that now test the generation of the app binaries and test a headless version of it to check that all the dependencies are working correctly This went under the radar on my hosts as they are all dev machines with Python installed on them and so the missing library was found in the system