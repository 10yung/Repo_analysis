Hello matz Sorry to misuse the issue tracker for this please feel free to close it I just noticed When i was reading this part Commands that work in the pipeline fit into one of three categories Commands that produce a stream eg ls Commands that filter a stream eg where type Directory Commands that consume the output of the pipeline eg autoview Commands are separated by the pipe symbol to denote a pipeline flowing left to right And I had to think about streem You have a lot of things to do already so no need to add any more ideas to the stack but I think if you get to think about streem again in the future perhaps one day a shell that showcases what streem can do or how it can be used may be useful similar to what the rushellsh example shows Others can do the video for example for pry someone else did a video intro showcase But before the video the idea may have to be formalized in code that works if any useful idea can be extracted from the above link so I just wanted to make sure that this was known to you Thanks Hey matz I have an earlystage prototype of the spawn function The code is not meant to be merged its just to know what do you think about it This works spawnls stdout can be a producer These dont yet stream spawngrep foo stdout and also be a filter stream spawncat tmpa and a consumer Any feedback would be very welcomed I modifed order of streming in netcatstrm because windows cant poll stdin in nonmain thread it should poll input with ReadConsoleInput or ReadFile So this is a temporary workaround When I run examples chatstrm a error happened sh binstreem examples chatstrm examples chatstrm failed to assign Git commit c ad System Mac OSX Clang clang or System CentOS GCC As a shell script is there a function to execute a shell command eg ls pwd etc already matz I watched the Full Stack Fest on youTube just minutes ago and hurried to see what exciting things you are up to Perusing the examples got me thinking if the nix stream descriptors could come in handy and be misused Like x x xx xxx x puts x x puts x x puts x stdout output would be In that sense you would build your own concurrency and leave it to the interpreter to hand each stream to what core resources would be available in the above example or cores might be used depending upon availability and the parenthesises would indicate scopes of concurrency heck you could even given some preknowledge of the computational challenges throw a seeding value into the mix like streamdescription resourceallocationweight x puts x x puts x x puts x I cannot wait for you to build this streem and apply it to Ruby in effect providing us with some relief when we do resourceseach do resource render partial item locals item resource and resources is a row SQL select ActiveRecordRelation object The stream descriptors would obviously have to work the other way around too Think about a ticket system in the subway ticketverifier reader reader reader N readerN bigscreen logfile with no one using the reader reader they are today just sitting there eating up cycles with your streem they stop becoming an embarrassment Full steem ahead Matz D oh and thank you so much for Ruby cheers Walther ps if this entire post is just about the dumbest you have ever read please excuse me for waisting your bandwidth Would you like to add more error handling for return values from functions like the following malloc nodepairnew fputs printid I was thinking it would be useful to either have the ability to create operators or have macros I know macros are controversial and hard to understand for some people but I think at least being able to create operators as functions a poor mans macro would be useful I dont really have any ideas about syntax though 