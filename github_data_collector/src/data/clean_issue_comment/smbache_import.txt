This packages aims to keep the namespace as clean as possible making it possible to only import functions that will later be used by the user explicitly This reduces name clashes in the namespace and keeps the program namepsace tidy rather than messy Would it be possible to apply to join tidyverse I love the import package when it comes to pulling a single function from sometimes very large packages without polluting the namespace However a pretty common use case which im not the only one facing is that Im using a package I like but it happens to have one function that conflicts with a very important other function So what I would love to have is something like importfromexcludingnicepackageconflictingfunction Workarounds exist of course including creating elaborate orderings of package import statements but all solutions Ive found including those presented in the link above seem very inferior to the solution I propose which Im kind of hoping would not be a big extension to the import package Fixes issue with importhere Unfortunately I dont know exactly which change corresponds to this behavior but on the current github version nominally this fails R tempf function importhere from magrittr rev tempf Error in rev from could not find function packageVersionimport When I revert to via CRAN that basic test succeeds R tempf function importhere from magrittr rev tempf packageVersionimport No other package or R version changes between these two tests I suppose I could walk back along each commit to try to find the point at which this behavior changed just let me know if youd like that help and I can do some commitbased testing Cheers This makes it easier to run the same code on multiple machines while still maintaining strictness where necessary See also Importantly the default behavior of this package should be exactly the same as is the behavior when library is set explicitly Just wondering if the new import functionality will make its way to CRAN I really like the feature of being able to use R scripts as imports My use case I am using checkpoint for package management so the dependence is on CRAN but precisely because of this dependence working with the universe outside CRAN MRAN is somewhat frustrating The solution Ive been using is which is perfectly fine but I like the all in one solution offered by this package Hi I m a fan of It defines functions like ggplot which I d like to import I need to use importfrom for this which seems unintuitive when the patchwork package is attached I can use those functions so why would I need to use private accession syntax Hello Thanks for this package lately its become an integral part of my workflow Usually I use import to import some specific objects from R scripts that otherwise would pollute my global environment One issue Ive run into is that if I do importheremyobj from pathtoscriptR the script is actually sourced in working directory pathto Would it be possible to give an option to disable this behavior Im currently organizing all the scripts within a project to assume the same working directory but organize the scripts in nested folders as appropriate Having an ability to set chdir FALSE would be very usefully Ideally the default could be something like getOptionimportchdir TRUE Hi Great package One thing im missing or havent understand how to do is to avoid import code from one file to another one In python I can use the if name main construct Is something similar available here Thanks I am trying to import a function for a module where the the module path is in a variable This does not work as the variable is interpreted as a package instead of a string pointing to the modules file In particular doing this does not work pathtomodule reposRmyrepomymoduleR importfromfrompathtomodule myfunction into Is there an easy way to go around this restriction