Is there any issues with updating the prebuilt library to tensorflow or in terms of compatibility OS Darwin Kernel Version Wed Sep PDT rootxnu RELEASEX If add latest version with features tensorflowgpu to Cargotoml most of times I get errors like error failed to run custom build command for tensorflowsys v process didnt exit successfully UsersolegDocumentstensortargetdebugbuildtensorflowsys c e f f ecb buildscriptbuild exit code stdout libtensorflowsysbuildrs binaryurl libtensorflowsysbuildrs basename libtensorflowgpudarwinx libtensorflowsysbuildrs filename Usersolegcargoregistrysrcgithubcom ecc db ec tensorflowsys targetlibtensorflowgpudarwinx targz stderr thread main panicked at called Resultunwrap on an Err value Custom kind InvalidInput error TarError desc failed to iterate over archive io Custom kind InvalidInput error invalid gzip header srclibcoreresultrs note run with RUSTBACKTRACE environment variable to display a backtrace or something similar invalid gzip header corrupt deflate stream etc cargo clean removing target and cleaning cargo cache dont help it happens regularly But version isnt available at all error failed to run custom build command for tensorflowsys v Caused by process didnt exit successfully UsersolegDocumentstensortargetdebugbuildtensorflowsysac a ddb a bdbuildscriptbuild exit code stdout libtensorflowsysbuildrs binaryurl libtensorflowsysbuildrs basename libtensorflowgpudarwinx libtensorflowsysbuildrs filename Usersolegcargoregistrysrcgithubcom ecc db ec tensorflowsys targetlibtensorflowgpudarwinx targz stderr thread main panicked at Unexpected response code for Usersolegcargoregistrysrcgithubcom ecc db ec tensorflowsys buildrs Im kind of aware you need to build any modules under the contrib namespace and load them with something like TFLoadLibrary but it would be helpful if there was a guide on building one of the contrib modules and loading it as currently users looking to do this are basically on their own cargo did not build the crate and send the below mentioned messages error failed to run custom build command for tensorflowsys v Caused by process didnt exit successfully mediamaherextrarustrusttestcodetensorflowtargetdebugbuildtensorflowsys a d buildscriptbuild exit code stdout libtensorflowsysbuildrs binaryurl libtensorflowsysbuildrs basename libtensorflowcpulinuxx libtensorflowsysbuildrs filename homemahercargoregistrysrcgithubcom ecc db ec tensorflowsys targetlibtensorflowcpulinuxx targz stderr thread main panicked at called Resultunwrap on an Err value Custom kind InvalidInput error TarError desc failed to unpack homemahercargoregistrysrcgithubcom ecc db ec tensorflowsys targetlibtensorflowcpulinuxx liblibtensorflowframeworkso io Custom kind InvalidInput error TarError desc failed to unpack liblibtensorflowframeworkso into homemahercargoregistrysrcgithubcom ecc db ec tensorflowsys targetlibtensorflowcpulinuxx liblibtensorflowframeworkso io Custom kind InvalidInput error corrupt deflate stream srclibcoreresultrs note run with RUSTBACKTRACE environment variable to display a backtrace Id like to port some python code which is using the tfestimatorEstimator API As I understand this API doesnt have Rust bindings yet Please add xor example if is possible with saveload mode save data train and test Is it possible to load the metagraphdef Vecu object similar to the python API Ideally looking to be able to get the tagset signaturedefs input output nodes from a saved model similar to the savedmodelcli tool savedmodelcli show dir tmpsavedmodeldir tagset serve signaturedef servingdefault This would be useful to not need to apriori identify the input output nodes in order to use graphoperationbynamerequired but instead derive them entirely in rust I am using Windows and have downloaded all the proper libraries to my knowledge I have done a ton of searching through google and I am unable to find a solution to this issue Here is the log Compiling tensorflowsys v error failed to run custom build command for tensorflowsys v Caused by process didnt exit successfully C Users USER Desktop PixelGame target debug build tensorflowsys a f d buildscriptbuild exit code stdout libtensorflowsysbuildrs output C Users USER Desktop PixelGame target debug build tensorflowsyscfa ae c db out libtensorflowsysbuildrs source C Users USER cargo registry src githubcom ecc db ec tensorflowsys targetsourcev libtensorflowsysbuildrs libdir C Users USER Desktop PixelGame target debug build tensorflowsyscfa ae c db out libv libtensorflowsysbuildrs Creating directory C Users USER Desktop PixelGame target debug build tensorflowsyscfa ae c db out libv libtensorflowsysbuildrs frameworklibrarypath C Users USER Desktop PixelGame target debug build tensorflowsyscfa ae c db out libv libtensorflowframeworkso libtensorflowsysbuildrs librarypath C Users USER Desktop PixelGame target debug build tensorflowsyscfa ae c db out libv libtensorflowso libtensorflowsysbuildrs Executing bazel version libtensorflowsysbuildrs Command bazel version finished successfully libtensorflowsysbuildrs frameworktargetpath tensorflowlibtensorflowframeworkso libtensorflowsysbuildrs targetpath tensorflowlibtensorflowso libtensorflowsysbuildrs Executing bash c yes configure stderr thread main panicked at called Resultunwrap on an Err value Os code kind NotFound message The system cannot find the file specified src libcore resultrs stack backtrace backtracebacktracetraceunsynchronized at C Users appveyor cargo registry src githubcom ecc db ec backtrace src backtrace modrs stdsyscommonbacktraceprint at rustc dc e c ca dc cba b f b c b a src libstd syscommon backtracers stdsyscommonbacktraceprint at rustc dc e c ca dc cba b f b c b a src libstd syscommon backtracers stdpanickingdefaulthookclosure at rustc dc e c ca dc cba b f b c b a src libstd panickingrs stdpanickingdefaulthook at rustc dc e c ca dc cba b f b c b a src libstd panickingrs stdpanickingrustpanicwithhook at rustc dc e c ca dc cba b f b c b a src libstd panickingrs stdpanickingcontinuepanicfmt at rustc dc e c ca dc cba b f b c b a src libstd panickingrs stdpanickingrustbeginpanic at rustc dc e c ca dc cba b f b c b a src libstd panickingrs corepanickingpanicfmt at rustc dc e c ca dc cba b f b c b a src libcore panickingrs coreresultunwrapfailedstdioerrorError at rustc dc e c ca dc cba b f b c b a src libcore macrosrs coreresultResultstdprocessExitStatus stdioerrorErrorunwrapstdprocessExitStatusstdioerrorError at rustc dc e c ca dc cba b f b c b a src libcore resultrs buildscriptbuildrunclosure at buildrs buildscriptbuildbuildfromsrc at buildrs buildscriptbuildmain at buildrs stdrtlangstartclosure at rustc dc e c ca dc cba b f b c b a src libstd rtrs stdrtlangstartinternalclosure at rustc dc e c ca dc cba b f b c b a src libstd rtrs stdpanickingtrydocallclosurei at rustc dc e c ca dc cba b f b c b a src libstd panickingrs panicunwindrustmaybecatchpanic at rustc dc e c ca dc cba b f b c b a src libpanicunwind librs stdpanickingtry at rustc dc e c ca dc cba b f b c b a src libstd panickingrs stdpaniccatchunwind at rustc dc e c ca dc cba b f b c b a src libstd panicrs stdrtlangstartinternal at rustc dc e c ca dc cba b f b c b a src libstd rtrs stdrtlangstart at rustc dc e c ca dc cba b f b c b a src libstd rtrs main invokemain at d agent work s src vctools crt vcstartup src startup execommoninl scrtcommonmainseh at d agent work s src vctools crt vcstartup src startup execommoninl BaseThreadInitThunk RtlUserThreadStart Does anyone know why this might happen Its only a few targets that require large amounts of memory so its faster to build and crash then to start at jobs as far as i can tell