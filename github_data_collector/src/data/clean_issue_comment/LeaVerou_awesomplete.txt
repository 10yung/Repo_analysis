hello LeaVerou thanks for your great plugin as u see in ul list mark tag makes the Persian or Arabic text show separately Screenshot html markHemark llo Hello html mark mark x heavycheckmark I was working with this for a project and one of the things I wanted to do was use HTML entities in some of my Labels When rendering from a list with other elements I see the rendered HTML entity as I would expect in my Label When rendering a solo label with a HTML Entity I see the raw text More details When I have no text typed and I activate the Awesomplete it shows an unrendered Awesomplete label raw HTML entities like youd see in a texteditor Received img width altScreenshot at src Desired not including france just the HTML entity img width altScreenshot at src Heres a CodePen Known workaround The workaround sofar has just been to paste the character literal in Background This is also an example of Live AJAX listing which I know some people have asked for Im unsure if its the best pattern and sure writing my own debounce and using native DOM would be more accessible to a wider group of people It also really spams data Hi I use awesomplete to get a list of food products in a textbox that we will call textArticoli when I insert a new food product in another form called newArticolo I reset the array arr which I pass to new Awesomplete and call new Awesomplete textArticoli list arr this creates me a double list one with the old items and one with the new item how is it possible to reset the previous Awesomplete list associated with textArticoli html head meta charsetutf link relstylesheet hrefawesompletecss script srcawesompletejs asyncscript head body h stylecolorwhite textaligncenter fontfamilyarial Registro Spesah div styletextaligncenter div classspecchietto h classtitoliInserimento Articoloh form nameform input classinput idtextarticolo placeholderarticolo typetext required pinput classinput idtextcosto placeholdercosto typenumber required step pinput classinput idtextquantita placeholderquantit typenumber required pinput classinput idtextnegozio placeholdernegozio typetext required pselect classinputselect idtextnegozio placeholdernegozio typetext required option value disabled selectednegoziooption select pinput classinput idtextdata placeholderdata onfocusthistypedate onfocusoutthistypetext required pinput classpulsanti typebutton valueInserisci onClickinviaDati form div div classspecchietto h classtitoliCreazione Nuovo Articoloh form nameformNuovoArticolo input classinput idtextnewarticolo placeholderarticolo typetext required pinput classinput idtextcategoria placeholdercategoria typetext required pinput classpulsanti typebutton valueInserisci onClickinviaNuovoArticolo form div div script var arrArticoli new Array var arrNegozi new Array var arrCategorie new Array caricaArticoli caricaNegozi caricaCategorie function popolatextbx arr var textbox documentgetElementByIdtextbx new Awesompletetextbox listarr recupera gli articoli e li mette nell array arrArticoli function caricaArticoli return new Promiseresolve reject const xhr new XMLHttpRequest xhropenget true xhronload resolvexhrresponseText xhronerror rejectxhrstatusText xhrsend thenresponseText var parsedRT JSONparseresponseText var parsedRTLenght ObjectkeysparsedRTlength arrArticoli forlet i i parsedRTLenght i arrArticolipushparsedRT i articolo popolatextarticolo arrArticoli catchstatusText Log the rejection reason consolelogErrore statusText alertErrorestatusText recupera i negozi e li mette nell array arrNegozi function caricaNegozi return new Promiseresolve reject const xhr new XMLHttpRequest xhropenget true xhronload resolvexhrresponseText xhronerror rejectxhrstatusText xhrsend thenresponseText var parsedRT JSONparseresponseText var parsedRTLenght ObjectkeysparsedRTlength arrNegozi forlet i i parsedRTLenght i arrNegozipushparsedRT i negozio popolatextnegozio arrNegozi catchstatusText Log the rejection reason consolelogErrore statusText alertErrorestatusText function caricaCategorie return new Promiseresolve reject const xhr new XMLHttpRequest xhropenget true xhronload resolvexhrresponseText xhronerror rejectxhrstatusText xhrsend thenresponseText var parsedRT JSONparseresponseText var parsedRTLenght ObjectkeysparsedRTlength arrCategorie forlet i i parsedRTLenght i arrCategoriepushparsedRT i categoria popolatextcategoria arrCategorie catchstatusText Log the rejection reason consolelogErrore statusText alertErrorestatusText invia i dati al server serverexpresspromiseAll function inviaDati consoleloginviaDati articolo documentgetElementByIdtextarticolovalue costo documentgetElementByIdtextcostovalue quantita documentgetElementByIdtextquantitavalue negozio documentgetElementByIdtextnegoziovalue data documentgetElementByIdtextdatavalue if arrArticoliincludesarticolo arrNegoziincludesnegozio return new Promiseresolve reject invio al server const xhr new XMLHttpRequest var paramsarticoloarticolo costocosto quantitaquantita negozionegozio datadata xhropenget true xhrsetRequestHeaderAccessControlAllowOrigin xhrsetRequestHeaderContenttypeapplicationjson xhrsetRequestHeaderAccessControlAllowMethodsGET xhronload resolvexhrresponseText xhronerror rejectxhrstatusText xhrsend codici di risposta dal server xhronreadystatechange function ifxhrreadystate switchxhrstatus case alertdati inseriti correttamente break case alertla pagina non esiste break case alertsi verificato un errore sul server break default alertswitch non risolto thenresponseText ifresponseTextOK alertdati inseriti correttamente resetta le textbox documentgetElementByIdtextarticolovalue documentgetElementByIdtextcostovalue documentgetElementByIdtextquantitavalue else alerterrore dal Server controllare i log del server nodejs catchstatusText Log the rejection reason consolelogErrore statusText alertErrorestatusText else ifarrArticoliincludesarticolo alertArticolo inesistente ifarrNegoziincludesnegozio alertNegozio inesistente function inviaNuovoArticolo consoleloginviaNuovoArticolo articolo documentgetElementByIdtextnewarticolovalue categoria documentgetElementByIdtextcategoriavalue documentgetElementByIdtextnewarticolovalue documentgetElementByIdtextcategoriavalue return new Promiseresolve reject invio al server const xhr new XMLHttpRequest var paramsarticoloarticolo categoriacategoria xhropenget true xhronload resolvexhrresponseText xhronerror rejectxhrstatusText xhrsend xhronreadystatechange function ifxhrreadystate switchxhrstatus case alertdati inseriti correttamente break case alertla pagina non esiste break case alertsi verificato un errore sul server break default alertswitch non risolto thenresponseText ifresponseTextOK alertdati inseriti correttamente caricaArticoli else alerterrore dal Server controllare i log del server nodejs catchstatusText Log the rejection reason consolelogErrore statusText alertErrore promisestatusText script body html default verbiage to fix issue add documentation to readme regarding options I just implemented a form for contact data that is related to a contract with our firms customers where I used awesomeplete for autocompletion on multiple input fields Because it occurs very often that the contact data for the new contract is already known to the database I wanted the autocompletion to fill out all fields if the user selects a suggestion from the list I had all the contract data instances from the database converted into JSON and used that as the list for each awesomeplete instance Configuring each awesomeplete instance to set its inputs value to the field value from the contract data object selected by the user was easy but i also needed to set the values of the other inputs To do this I would need to know at the time when the user selects a suggestion which contract data object was the one whose representation was selected by the user This proved itself relatively uneasy since the awesomepleteselectevent only has a reference to the selected htmlrepresentation of the contract data instance that was selected by the user and not to the contract data itself My solution was to give each contract data instance a unique id the primary key from the database and write that id as a dataattribute into the representation and read that in the handler function for the awesomepleteselectevent This feels kind of hacky Is there a cleaner way to do this which i missed Im using the Axe Coconut Chrome extension to test for accessibility and ADA compliance and Im seeing an issue being raised on the UL generated by Awesomplete with the role listbox Here is the error ARIA input fields have an accessible name To solve this violation you need to Fix at least one of these issues arialabel attribute does not exist or is empty arialabelledby attribute does not exist references elements that do not exist or references elements that are empty Element has no title attribute or the title attribute is empty Possible solutions It seems like the least repetitive experience for the user would be to use arialabelledby on the listbox and have it point back to the label associated with the input element Plucking the text from the associated label and using it inside arialabel or title on the listbox Allowing another attribute to be passed through to Awesomplete via the input similar to how the datalist works and then using that inside a new attribute arialabel or title on the listbox Anyone has any idea how to deactive the autofill Its really annoying because for some countries I cant even see the list my list is below I am using the awesome awesomplete on a wide inputfield where it would make perfect sense to use it several times To make the keyboardlovers happy I have set tabSelecttrue and that works fine but now Tab changes the focus which is not so nice How can that be avoidedeither with any of awesomepletes options or JS Fiddle I have the following autocomplete which uses the awesomplete plugin The thing is this is an autocomplete where the value selected is different from the label that should be showned input idoptionselementId autocomplete classcawesompleteinput dropdowninput formControl control label optionslabel clicktoggleDropdown Awesomplete component import AfterViewInit Component ElementRef Input OnInit ViewChild from angularcore import Awesomplete from awesomplete import FormControl from angularforms import IAwesompleteOptions from coremoduleinterfacesawesomepleteiawesompleteoptionsinterface Component selector awesomplete templateUrl awesompletecomponenthtml styleUrls awesompletecomponentscss host class cawesomplete export class AwesompleteComponent implements OnInit AfterViewInit ViewChildawesomplete static false public awesompleteRef ElementRef Input public control FormControl Input public options IAwesompleteOptions public awesomplete Awesomplete constructor ngOnInit thiscontrolenable ngAfterViewInit thisawesomplete new AwesompletethisawesompleteRefnativeElement thisoptions thisawesompleteinputaddEventListenerawesompleteselectcomplete event thiscontrolsetValueeventtargetvalue public toggleDropdown void thisawesompleteevaluate thisawesompleteopen public clearText void thiscontrolsetValue And this are the options that Im passing to the component thisoptions minChars list label brasil value br label portugal value pt label france value fr So when I click the Input I have a list of Brasil Portugal France and when I choose one for instance France what I see on the input is fr I want the control to have the fr value but I want the input to display France awesomplete Make an option to totally hide visiblehidden elements like this span classvisuallyhidden rolestatus arialiveassertive ariaatomictrue hiddenNo results foundspan Because in some usecases it can break HTML pages adding a horizontal scroll The workaround is to downgrade to 