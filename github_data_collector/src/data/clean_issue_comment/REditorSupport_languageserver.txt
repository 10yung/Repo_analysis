This PR closes and This PR is a simple support of code section using DocumentSymbolProvider It matches all commend lines that starts with and ends with at least four and show the string inbetween as symbol This also addresses the comment at by using unified document symbol provider all in languageserver and the symbol information of each code section starts from the first line and ends before the next code section so that a hierarchy of code section containing symbol definitions can be presented Following is a screenshot in VSCode img width altimage src In Atom or and atomlanguager on Linux rlanguageserver causes constant Uncaught TypeError Cannot read property length of undefined errors once you start typing code in an R file The problem is severe enough that it makes Atom unusable to edit R files When I revert back to the problem goes away It would be very useful if sections could be defined in the R codes These would allow to fold the code and to navigate through the script eg the outline tab in VSCode In Rstudio one can define sections using comments followed by or more or signs here is an example of how it looks Screen Shot at We may provide completion for listlike objects in package such as Machine Platform and objects defined in packages such as R classes since their elements are known In contrast with which provides completion for elements in listlike objects in a live R session languageserver may do similar for listlike objects in packages Currently we provide signature for functions defined in packages and global namespace We could use XML parse data to also provide signature for locally defined functions aka closures r foo functionvar bar functionvar var var bar where cursor is at bar the signature of bar can be extracted from XML parse data and provided to user We can gradually provide textDocumentonTypeFormatting We could use n and to trigger on type formatting A starting point could be formatting only the changed line of code If the line can be formatted on its own then format it If not leave it as it is This covers the cases of single line expressions For multiline expressions such as r value local multiline expression start x single line expression multiline expression end We probably need to detect the corresponding opening brackets when a closing bracket triggers on type formatting and then we could perform range formatting on the enclosed document range As a starting point only single line of code is formatted at the moment For example r f is formatted to the following when is pressed or enter is pressed in the line end r f I test this while Im editing large scripts and the performance is good since it only perform single line formatting and only transfer minimal text through lsp As for ontypeformatting with multiline code chunks we might need the extendselection algorithm andycraig implemented in TypeScript in so that the following code can be formatted on closing the brace r result functionxyz xyz When or enter is hit in the last line the extendselection algorithm finds that the runnable code chunk is above and formatting this code chunk results in the following code r result functionx y z x y z As for incomplete code we may also calculate the indention For example r test func a b func x y When enter is hit in the end of each line we should get different indention in the new line For the first two lines we should get two spaces for the last line we should get zero indention because the expression is complete Previously enables removing objects in GlobalNameSpace when they are removed from document However when more and more documents are open in editor the workspaces contains more and more documents so that the completion provides more and more items Even when most documents are closed although they are removed from documents they are still left in Workspace which seems a bit inconsistent Im not sure if it makes sense that if the workspace is not a package then closing a document should remove the document from the workspace so that all relevant objects of the documents are removed Im wondering if it is possible to use TextDocumentSyncKindIncremental update mode on textDocumentdidChange to avoid the whole document being transferred repeatedly When the document is large the transfer looks a bit laggy Im editing a script of more than lines of code I timed the formatting by systetimestylerstylefilefile Status Count Legend File unchanged File changed Styling threw an error Please review the changes carefully user system elapsed If I execute command Format document then languageserver totally is stuck at formatting the file and stops providing other functionalities looks like the formatting task completely blocks the langaugeserver I also enable formatOnPaste if I copypaste a large chunk of code hundreds of lines to the current document then range formatting is triggered which also blocks languageserver img width altScreen Shot at PM src In general it is impossible to infer what could go after So I guess we should just ignore everything after 