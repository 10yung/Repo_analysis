It would be good if it was possible for list to be stacked from bottom instead from the top for usages like chat or stack like HSs old RPN calculators I have a workaround for FixedSizeList but if there is a need for such usage it would still be nice to have it especially for VariableSizeList FixedSizeList heightMathmincontainerHeight itemCount itemSize itemCountitemCount itemSizeitemSize widthwinWidth renderRow FixedSizeList When using scrollTo instead of scrollToItem eg when scrolling to last item the list disappears and only a couple of items stay visible To reproduce the issue please click on Scroll to last Item button twice in the following example Example Resolves Issue Adds check for negative return in getEstimatedTotalSize in DynamicSizeListjs Im using branch issues and I am experiencing a problem similar to but not quite the same Heres my best attempt at explaining the issue codesandbox Lets say you have n items in your itemData and you scroll past l items If itemData is reduced to m items where m l then the heightwidth of the list will be incorrect I am not very wellversed with the code in reactwindow but from what I can tell the issue stems from this calculation in DynamicSizeListjs const getEstimatedTotalSize itemCount Propsany itemSizeMap estimatedItemSize lastMeasuredIndex totalMeasuredSize InstanceProps totalMeasuredSize itemCount lastMeasuredIndex estimatedItemSize When getEstimatedTotalSize is called after scrolling and reducing itemCount itemCount lastMeasuredIndex estimatedItemSize will likely be negative When getEstimatedTotalSize is negative the heightwidth set on the innerElement will remain as the last estimatedTotalSize value because you cant set a negative height From createListComponentjs height isHorizontal estimatedTotalSize To fix this I would propose just returning itemCount estimatedItemSize when totalMeasuredSize itemCount lastMeasuredIndex estimatedItemSize is negative I will make a PR with this code change Hello there Ive implemented sticky columns and rows in an alternative way by filtering these columnsrows out and rendering them in the outer element instead with position sticky At this point its working just fine but they are not windowed all of the sticky cells are rendered To achieve windowing I need to pass columnStartIndex columnStopIndex rowStartIndex rowStopIndex to outer element which I did with my pull request It doesnt produce any additional renders because at the point where these values may change other props on outer element would change also I attach a rough demo of my implementation of the grid as well as a code playground for this POC for reference The indexes would be used in StickyCells component and they would be implemented as just a simple if conditional for the cells Let me know what you think thanks demo sandbox This PR resolves the issue Made changes in FixedSizeListjs Added test case to test the scenario Updated snapshot Resolves Version API x SimpleList previously FixedSizeList List previously DynamicSizeList Grid previously VariableSizeGrid Update documentation Wrong behaviour on scroll item to center Example Click on Scroll to row or Scroll to row items not in center Click on Scroll to row item in center This is an umbrella issue to share my plans for the upcoming version release of reactwindow Feedback is appreciated and will be taken into consideration I ask that you be understanding if Im not able to accommodate all requests Ill try to do my best to weigh feature requests against bundle size runtime performance and maintenance concerns I expect that upgrading from version to may require substantial code changes many of which will not be possible to automate with code mods Because of this particularly for application code I would advise against upgrading existing code unless you have a strong reason eg you need support for dynamic size content I am also going to go ahead and pin the current docs to the domain reactwindowv nowsh so they will not be lost when I update for version Table of contents Support fewer components Use render props API No more horizontal lists support Only grids support RTL Changes to onScroll callback timing Other changesdeprecations Fewer components One way to help manage complexity is to reduce the number of components the library supports I am currently planning on supporting only the following component types in version SimpleList previously FixedSizeList This highly optimized list component should be used when row heights are fixed and known ahead of time List previously DynamicSizeList This list should be used for dynamically sized content eg chat newsfeed It requires the ResizeObserver API or polyfill Grid previously VariableSizeGrid This component should be used for tabular data eg spreadsheets that should be virtualized along both vertical and horizontal axis It supports variable size rows and columns but does not support automatically measuring and updating their sizes Render props One of the major changes from reactvirtualized to reactwindow was the decision to treat children as React elements eg ReactcreateElementchildren props rather than as render props eg childrenprops There were a couple of motivations for doing this React provides builtin solutions for memoization eg Reactmemo useMemo shouldComponentUpdate so I didnt need to implement my own caching abstraction for item renderers APIs like hooks and suspense just work inside of item renderers Keys can be managed by reactwindow without requiring the render prop to pass them along and without requiring cloneElement calls Unfortunately there were also some downsides Inline item renderers incur a high cost Because their type the function definition gets recreated each time the parent component renders React deeply unmounts and remounts their rendered tree This means that docs need to teach people not to use them even though theyre often more convenient Because inline functions couldnt be used to close over local scope it was more complicated for item renderers to share state with parents requiring APIs like itemData and a custom areEqual comparison export After taking the above pros and cons into consideration Ive decided to convert to a render props approach for reactwindow as well This means that complicated examples like this can be rewritten more easily js const Example height items toggleItemActive width List heightheight itemCountitemslength itemRenderer index key style const item items index return div keykey onClick toggleItemActiveindex stylestyle itemlabel is itemisActive active inactive div itemSize widthwidth No more horizontal list support Previously list components supported both horizontal and vertical layout modes In order to simplify implementation and maintenance and because the overwhelmingly common use case is vertical lists I will be removing support for layouthorizontal RTL support Grid components will continue to support directionRTL but lists will not since they will only support a vertical layout This tradeoff is being made to enable lists to be smaller and easier to maintain onItemsRendered and onScroll callback changes List and grid components currently support onItemsRendered and onScroll callback props These callbacks are called during the commit phase after the list or grid has completed rendering This can be useful in that it is always safe to perform a side effect like analytics logging in response to these callbacks but it has a downside as well any scroll synchronized updates must be done in a second cascading render Version will make a change to the onScroll callback to address this The onScroll callback will be called during the events dispatch cycle so that any update will be batched by React with the list or grids own update The onItemsRendered callback will be replaced with a onItemsDisplayed prop although it will continue to be called during the commit cycle This change is being made to enable the list component to more aggressively optimize render performance by prerendering at idle priority and make use of experimental APIs like display locking Other props changesdeprecations There are several pending deprecations with DEV warnings which will be removed innerTagName and outerTagName for all list and grid components Use innerElementType and outerElementType instead overscanCount overscanColumnsCount and overscanRowsCount for grid component Use overscanColumnCount and overscanRowCount instead overscanCount will be removed for list components in favor of a dynamic overscanning approach horizontal and vertical values for direction These were moved to layout but they will be removed entirely in version The itemData prop and the corresponding data prop passed to item renderers will be removed because the change to a render prop API no longer make this necessary The useIsScrolling prop and the corresponding isScrolling prop passed to item renderers will be removed because the changes to prerendering and display locking would make this more expensive to implement Scroll align parameters will change slightly The previously named auto will now be named minimal The new default value will be smart rather than auto Note that some of the above deprecated props may not still be relevant given the other planned changes but Im listing them here anyway for completeness sake Hello I am using your great library to show my horizontal lists in RTL mode its about OK in android and chrome just a little buggy but its totally weird in safari You can see the behavior below ezgif c d edf InfiniteLoader isItemLoadedindex return thisisLoading index thispropstotalCount itemCountthispropstotalCount threshold loadMoreItemsstart end consolelog start end onItemsRendered ref List classNameList directionrtl heightitemHeight layouthorizontal itemCountthispropsvendors thispropsvendorslength itemSizeitemWidth onItemsRenderedonItemsRendered refref widthwindowinnerWidth thisitemRenderer List InfiniteLoader itemRenderer props return HomeVendorItem thispropsvendors propsindex stylepropsstyle isSuperMarketthispropsisSuperMarket sendAmplitudeEventthispropssendAmplitudeEvent 