 Ive worked hard to make sure that I dont import directly or indirectly fmt package Im looking at the generated gopher code For some reason the context package is importing fmt when it should not be I dont seem to know why I understand that this package does not allow network access So I cant use the net package or general netdial functionality My main aim is to link a Javascript onClick event to a local Golang eventwhich uses netdial to gain network access I tried using nethttp to start a local server insidethat does serverside events gopherjs but it failed because it does not allow network access How do i link a gopherjs event to a local Golang function dialing a socket Even if it is to just initialize a bool variable As described in gopackages might be an opportunity for GopherJS to shed some maintenance burden and gain better build system support at the same time Im opening this PR mostly as an early preview of my progress it is not ready to be merged just yet Im writing the code in such a way that it would be able to coexist with the current implementation until we decide it is good enough to be the default The end goal for this PR is to reach feature parity for gopherjs build command At the moment it is able to produce sensibleish JS artifacts but I havent implemented support for natives VFS as well as standard library packages pruning Ill be updating this PR as I go Earlier this year Go Team presented golangorgxtoolsgopackages as build systemagnostic interface for tooling authors At the moment GopherJS uses gobuild as a main way to load packages which lacks Go Modules support and is strongly tied to the go tool In theory switch to gopackages should offer several advantages Transparent build system integration lesser chance to be affected by changes in go build tooling As a corollary this should provide Go Module support for free An avenue for integrating GopherJS with other build systems bazelio and friends A possibility to remove a lot of custom code from the gopherjsbuild package which is handling loading packages in different ways How much of that proves to be true is yet to be seen but Ill start an experiment Getting some errors here for an init call which is initializing a pointer to a function with packagelevel variables outside of an init function myLocalVar ptr is not defined go var myLocalVar MyType var AddToLocalVar myLocalVarAddToLocalVar While the ptr part is not found there is a variable defined named myLocalVar js myLocalVar new MyType pkgAddToLocalVar methodValmyLocalVar ptr myLocalVar ptr new ptrTypefunction return myLocalVar functionv myLocalVar The error is that the first part of that methodVal is not defined the ptr variant of the variable Im seeing this against go and latest gopherjs I had run on my system but system throw merage files error then abort the program go get u githubcomgopherjsgopherjs How to resolve this error Hi folks I was trying to see if I can help with Go support but I cant get sourcemapsupport to work properly and deciphering stack traces is becoming difficult My steps shell nvm use Activate node x npm install global sourcemapsupport export NODEPATHnpm root global Without this node doesnt seem to find the package node require sourcemapsupportregister eval Completes with no errors gopherjs test v fmt homealeksgosrcgithubcomgopherjsgopherjstest r reflectliteTypeOfptrTypenilElem s case ifc c false r rblk if r rblk undefined break s TypeError Cannot read property Elem of undefined at Objectinit homealeksgosrcgithubcomgopherjsgopherjstest at Objectinit homealeksgosrcgithubcomgopherjsgopherjstest at Objectinit homealeksgosrcgithubcomgopherjsgopherjstest at Objectinit homealeksgosrcgithubcomgopherjsgopherjstest at init homealeksgosrcgithubcomgopherjsgopherjstest at goroutine homealeksgosrcgithubcomgopherjsgopherjstest at runScheduled homealeksgosrcgithubcomgopherjsgopherjstest at schedule homealeksgosrcgithubcomgopherjsgopherjstest at go homealeksgosrcgithubcomgopherjsgopherjstest at Objectanonymous homealeksgosrcgithubcomgopherjsgopherjstest at Objectanonymous homealeksgosrcgithubcomgopherjsgopherjstest at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at tryModuleLoad internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at FunctionModulerunMain internalmodulescjsloaderjs at startup internalbootstrapnodejs at bootstrapNodeJSCore internalbootstrapnodejs FAIL fmt s Note there isnt a warning about missing sourcemapsupport module It would be there if I didnt do the export NODEPATH thing I also tried this gopherjs test v c fmt ls fmttestjs fmttestjs fmttestjsmap node require sourcemapsupportregister fmttestjs homealeksgosrcgithubcomgopherjsgopherjsfmttestjs r reflectliteTypeOfptrTypenilElem s case ifc c false r rblk if r rblk undefined break s TypeError Cannot read property Elem of undefined at Objectinit homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at Objectinit homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at Objectinit homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at Objectinit homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at init homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at goroutine homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at runScheduled homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at schedule homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at go homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at Objectanonymous homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at Objectanonymous homealeksgosrcgithubcomgopherjsgopherjsfmttestjs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at tryModuleLoad internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at FunctionModulerunMain internalmodulescjsloaderjs at startup internalbootstrapnodejs at bootstrapNodeJSCore internalbootstrapnodejs The result is exactly the same gopherjs version GopherJS wip node version v For the reference the compiled scripts fmttestzip Manual inspection doesnt seem to reveal any smoking gun Any suggestions Thanks Go is out by now but GopherJS doesnt support it yet that work is tracked in issue Id like to work on a change that can be made in parallel unrelated to Go support but it should help with the current situation and buy us more time The change can be briefly described as to allow GopherJS n to operate alongside with arbitrary Go distribution versions rather than hardrequiring it to be Go x cc neelance hajimehoshi myitcv Background At this time its only possible to build and use GopherJS with one major version of Go at a time Currently GopherJS n requires Go x This is enforced by a buildtime check implemented via build constraints See The check is necessary because the GopherJS requires a x Go distribution It needs it to be able to read the source code for all of the standard library packages ie the go files in GOROOTsrc which GopherJS needs to compile However the check doesnt have to be done at compiletime We can do it at runtime instead which would enable doing things like go version go version go darwinamd go get u githubcomgopherjsgopherjs gopherjs build someexampleproject GopherJS requires a Go x distribution but found version go GOROOTHOMEsdkgo gopherjs build someexampleproject success Alternatives Make it easier to specify a GOROOT value that only GopherJS uses Lets assume the user wants to have Go as their default Go distribution say in usrlocalgo and a Go distribution in their HOMEsdkgo directory this is easy by doing go get golangorgdlgo and then go download That means they can either build GopherJS using the Go distribution so the default runtimeGOROOT value in the gopherjs binary is HOMEsdkgo edit based on comments from inliquid below this option may not be working correctly today or explicitly set the GOROOT environment variable to HOMEsdkgo when running the gopherjs binary GOROOTHOMEsdkgo gopherjs build someexampleproject However this has two problemslimitations Setting GOROOT manually for each gopherjs invocation is annoying and easy to forget or accidentally set wrong GOROOT for main Go distribution Correct GopherJSspecific GOROOT will also need to be set when using GopherJS to compile inmemory eg with githubcomshurcooLgopherjslib or githubcomshurcooLgogopherjshttp packages To avoid both these problems I propose adding a new GopherJSspecific environment variable GOPHERJSGOROOT if set GopherJS uses this value as the default GOROOT value instead of using the system GOROOT as the default GOROOT value The idea would be that if you want to use GopherJS with a mismatched version of the Go distribution you permanently set GOPHERJSGOROOT to point to a matching Go distribution version and forget about it until next major GopherJS version It wont interfere with your normal Go distribution Embed all of the required files from GOROOTsrc into GopherJS itself Similar to how we already have natives and gopherjspkg file systems we can have a third one a copy of the source code of Go standard library packages and potentially their tests Ive explored this idea It is certainly possible but the concern is about the size of the generated assetsvfsdatago file because the Go standard library is quite sizable I took GOROOTsrc from Go and trimmed it as follows deleted all of cmd directory GopherJS doesnt need it deleted all non go files there are many cgo files assembly files etc GopherJS doesnt need them deleted all testdata directories deleted all testgo files they were pretty small didnt make a big difference The end result size of the src directory was about MB Compressed with gzip it becomes just MB which is pretty small vfsgen uses gzip compression but encodes bytes in Go byte slice literals which have an efficiency of so the assetsvfsdatago file ends up being MB If were checking that into the git repository its not small and itd need to change whenever we add support for a new Go major version or minor version The advantage of this approach is that itd be very user friendly users just go get u githubcomgopherjsgopherjs on any version of Go and it just works no mucking around with environment variables The disadvantage is the large assetsvfsdatago file and complexity when it comes to testing GopherJS we need the testgo files and testdata directories to test GopherJS on std lib packages I think this is something we should explore more in the future I dont think we should implement it now Proposal For now Im leaning towards implementing alternative moving the Go distribution version check from buildtime to runtime and adding support for the GOPHERJSGOROOT environment variable It would have to be documented and the error messages should mention it Thoughts