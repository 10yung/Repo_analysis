 The problem is that rendering system on different hardwares with the same macOS Catalina version may produce not matched image snapshots There may be several bytes that have difference just of eg in one bitmap some byte has value and in other bitmap the same byte has value Such difference isnt visible by eye even in generated differenceuuidpng image So snapshots generated on developer computer always fail on CI computer The solution is to ignore the difference of and fail only in case if difference greater than If our function call is done across multiple lines then inline snapshots cant find the speech marks it needs to record and then deletes the contents of the file Example assertInlineSnapshot matching as lines with This is especially prominent in our tests as our matching is actually a block which is over multiple lines Our workaround has been to pull the block our as a var and use that so the callsite is all on one line but this isnt as nice Itd be nice to have the difference output in the console then I can more easily choose an appropriate precision value I was shown a nice blog on the idea of multiline string assertions which shows exactly what part of a multiline string has changed I think this would work great with our inline snapshots to make it easier to know exactly what has failed I dont think swiftsnapshottesting should assert when a view that it try to snapshot has width height or both From my point of view it my be better to ignore it and create an artefact that represent it state A view can be in that state for a lot a justified reasonanimationstate and we might want to know that this view is actually with no width or height and it can change so being able to know that it is a can actually be important Yes I could have used the recursiveDescription but it show way too many information so I made this PR This only support iOS I can do it for macOS too if needed In order to present a modal view controller its parent view controller must already be a member of a window hierarchy Therefore given that SnapshotTesting prepares its window internally theres no way to correctly present the modal controller Im new to this project so Im not too sure on what the preferred API for achieving this might look like It adds macCatalyst support by skipping unused APIs and using conditional compilation for tests Hi guys First of all thanks for the great project and the cool videos Im trying to get snapshot testing to work with unit tests for a sandboxed macOS Cocoa application Im running into a problem The unit tests are for testing my application target not a framework and hence run hosted inside my sandboxed app Because of that the snapshots directory in the project folder is not accessible to my unit tests and recording a snapshot fails with Code You don t have permission to save the file TestOutput in the folder Snapshots This problem does not exist when running unit tests for a framework target Those are not sandboxed I considered a few things but maybe you have a better idea Option Move code to be tested into a framework target While technically possible not always practical Option Dont run unit tests inside the hosting application Tests dont run sandboxed this way but we lose access to testing internal types and methods testable import requires unit tests to run inside a hosting application and the Allow testing Host Application APIs flag to be set Option Copy snapshots to temporary directory before tests start copy back once done The idea Since sandboxed unit tests are allowed to read and write to the system temporary directory copy the snapshots into a wellknown location inside the temporary directory before the tests run Once the tests finish copy the newly generated snapshots back from the temp directory into the project source directory Xcode allows to run run scripts pre and post test execution Im attaching a shell script that copies the snapshots around as a starting point The script contains more details how to set this up testsprepostactionshtxt To get this to work the snapshot code needs one adjustment let envSnapshotsDir ProcessInfoprocessInfoenvironment USETEMPSNAPSHOTSDIR nil URLfileURLWithPath NSTemporaryDirectory isDirectory true appendingPathComponentSnapshots appendingPathComponentfileName nil let snapshotDirectoryUrl snapshotDirectorymap URLfileURLWithPath isDirectory true envSnapshotsDir fileUrl deletingLastPathComponent appendingPathComponentSnapshots appendingPathComponentfileName Option Extend sandbox somehow It would be great if we could simply pass the path to the snapshots directory as an argument to the executable running the unit tests Im not aware that extending the app sandbox this way is possible but maybe something along those lines 