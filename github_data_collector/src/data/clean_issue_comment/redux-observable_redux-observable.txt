 The devDependency sinon was updated from to This version is not covered by your current version range If you don t accept this pull request your project will work just like it did before However you might be missing out on a bunch of new features fixes andor performance improvements from the dependency update Publisher mrgnrdrck License BSD Clause Find out more about this release details summaryFAQ and helpsummary There is a collection of frequently asked questions If those don t help you can always ask the humans behind Greenkeeper details Your Greenkeeper bot palmtree The devDependency typesnode was updated from to This version is not covered by your current version range If you don t accept this pull request your project will work just like it did before However you might be missing out on a bunch of new features fixes andor performance improvements from the dependency update Publisher types License MIT Find out more about this release details summaryFAQ and helpsummary There is a collection of frequently asked questions If those don t help you can always ask the humans behind Greenkeeper details Your Greenkeeper bot palmtree Hi Again We are currently using the below setup for our store for SSR implementation It was working flawlessly since we had to implement the last route to be fully rendered on the server seriously On the server we are doing two renders by launching renderToString method twice First to launch all async actions from constructors and second after shutdownEpics will be resolved But we have one case where async action can reveal another constructor with extra async action that does not count during the first render Do you know how to deal with it I really looking forward to your opinion Best regards Am new to redux and my first encounter landed me in using epic but i have one problem connectng epic with my store in my app module am using angular The Action Creators this is action creator defined inside a class static LISTALLCOMPETITIONS LISTALLCOMPETITIONS listAllCompetitionpayload ICompetition AnyAction return thisngReduxdispatch type SessionActionsLISTALLCOMPETITIONS payload i would want this action dispatched if a user hit my url in the browser kind of fetching the data from the server so i would probably call this in my ngOnit or use a resolver in the route path The Reducer Function My reducer function will take an initial state that comprises of the different endpoint that will prefetch which of course has the same structure with the remote data which i enforced by creating each interface for each endpoint export const initialStateIAppState competitions matches teams standing players export function FootballReducerstate IAppState initialState action switchactiontype case ActionTypesListCompetitionSuccess return state competitions actionpayload return state if am able to setup epic correctly it suppose the intercept the actions coming in from the component do the network call and return an action containing the payload of the fetched result constructorprivate http HttpClient private service FootballStoreService private action SessionActions listAllCompetitions action AnyAction return actionpipe ofTypeSessionActionsLISTALLCOMPETITIONS mergeMap return thisservicelistAllCompetition mapresult return thisactionlistAllCompetitionresult catcherror Observableof type SessionActionsERRORLIST the function that makes the api call listAllCompetition return thishttpgetICompetition BASEURLcompetitions headers thisheaders the issue now is configuring epic to create a store at my app module another thing am unsure of is whether an setting up epic correctly interm of my reducer and action i need explanations on this the app module congif export class AppModule constructorprivate ngRedux NgReduxIAppState private epic EpicServiceService const epicActiion createEpicMiddlewarethisepiclistAllCompetitionsthis is where the problem is bringing in my epic funtions here const middleWare createEpicMiddlewareSessionActionsLISTALLCOMPETITIONS ngReduxconfigureStore FootballReducer initialState my problem is that the createmiddleWare functions needs a action type and i dont know how to feed it that argument Setting up the store including epic middleware shouldnt be made too complicated redux on its own is already confusing if somebody is able to learn what an actions is and where the reducer functions comes in bringing in epic as a tool that will aid side effects should be made easy to integrate so pls with the latest release of RxJS library point me to a link that can detail how to work with redux and observable using epic as it relate to my reducers and actions but better still somebody here can guide with code snippets on the best practice Originally posted by myquery in The devDependency typescripteslinteslintplugin was updated from to View failing branch This version is covered by your current version range and after updating it in your project the build failed typescripteslinteslintplugin is a devDependency of this project It might not break your production code or affect downstream projects but probably breaks your build or test tools which may prevent deploying or publishing details summaryStatus Detailssummary continuousintegrationtraviscipush The Travis CI build failed Details details details summaryRelease Notes for v summary h a href h h Bug Fixesh ul listrongeslintpluginstrong noemptyfunction add missed node types a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong nountypedpubsig ignore set return a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong nounusedexpressions ignore directives a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong preferoptionalchain allow in identifiers a href listrongeslintpluginstrong preferoptionalchain handle more cases a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong returnawait allow Any and Unknown a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong strictboolexpr allow nullish coalescing a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongtypescriptestreestrong make FunctionDeclarationbody nonnull a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href ul h Featuresh ul listrongeslintpluginstrong noemptyfunc privateprotected construct a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong nononnullassert add suggestion fixer a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong nounneccond support nullish coalescing a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongeslintpluginstrong prefernullcoal opt for suggestion fixer a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href listrongexperimentalutilsstrong add isSpaceBetween declaration to Sou a href datahovercardtypepullrequest datahovercardurltypescripteslinttypescripteslintpull hovercard a a href ul details details summaryCommitssummary pThe new version differs by commitsp ul lia href codechore publish v codeli lia href codedocseslintplugin typo in the configs README codeli lia href codefeateslintplugin nounneccond support nullish coalescing codeli lia href codefeateslintplugin nononnullassert add suggestion fixer codeli lia href codefixeslintplugin nounusedexpressions ignore directives codeli lia href codefeateslintplugin prefernullcoal opt for suggestion fixer codeli lia href codefixtypescriptestree make FunctionDeclarationbody nonnull codeli lia href codefixeslintplugin strictboolexpr allow nullish coalescing codeli lia href codefixeslintplugin returnawait allow Any and Unknown codeli lia href codefixeslintplugin noemptyfunction add missed node types codeli lia href codefeateslintplugin noemptyfunc privateprotected construct codeli lia href codefixeslintplugin preferoptionalchain allow in identifierscodeli lia href codefeatexperimentalutils add isSpaceBetween declaration to Sou codeli lia href codefixeslintplugin preferoptionalchain handle more cases codeli lia href codefixeslintplugin nountypedpubsig ignore set return codeli ul pThere are commits in totalp pSee the a href diffap details details summaryFAQ and helpsummary There is a collection of frequently asked questions If those don t help you can always ask the humans behind Greenkeeper details Your Greenkeeper Bot palmtree Description The link in warning does not exist Error occurs even with all adblockers turned off The warning below is found here javascript warn this middleware is already associated with a store createEpicMiddleware should be called for every store n nLearn more Additional Context These are not directly related but added for completeness ReduxObservable version v Site framework Nextjs v OS Windows build Browser All browsers Used Brave in the screenshot Searching for in the issue shows Server Side Rendering Documentation not a dupe which I will be checking out for the warning Hi guys We have quite large commerce app We need to implement SSR however our whole communication is going through reduxobservable Previous developer recommend to rewrite all epics to reduxsaga We have them more then What do you think should we do this migration or we maybe we should develop own solution based on this PR Or maybe this solution would be still working I also found reactreduxepic library Guy here said days ago that he is still using it and its working Our epics are in most cases are very simple Mostly we do some ajax calls and fill store with data Sometimes we do some transformations or we dispatch other actions but in general they are pretty straightforward All we need to do on server is to dispatch few actions the same we have in componentDidMount and wait for other few actions to be dispatched success actions Maybe you know how to listen on action in server function What do you think we should start migration of or even more epics to reduxsaga or we should spend few days on getting working reduxobservable event if ssr is not nativly supported I am using reduxobservable for few years now but I dont feel strong enough to make decision at least now Btw reduxsaga based on promise but I always though that streams are just more advanced promises Have a good day and thanks for any response If this is your first PR for reduxobservable please mark these boxes to confirm otherwise you can exclude them x I have read the Contributor Guide x My commit messages are in conventionalchangelogstandard format Reason for PR I noticed combineEpics doesnt do anything to help locate errors Almost always when using reduxobservable its nearly impossible to find errors unless youve got a catchError at the bottom of your pipeline In my own Reduxless implementation of ReduxObservable I added this functionality createRootEpic catchEpicError createRootEpic catchEpicError Not only does this implementation include a way of logging errors as actions it also logs them to the console with the name of the Epic that caused the error Its super helpful in debugging combineEpics could definitely benefit from functionality like this In case theres a stack available such as the error being an EventError Nodejs one of my other versions of this operator checks for stack information Changes This method makes it obvious which epic actually threw an error and then throws it again so it proceeds as usual similar to doing a Promiseprototypecatch and throwing the error again so the next catch picks it up Just like when throwing a TypeError this also utilizes epicname IMPORTANT PLEASE READ Hi there If this is a usage question or youre not sure if its a bug please do not post it here post it on Stack Overflow first if you get no response after a reasonable amount of time create a ticket here and link us to your Stack Overflow question If this is not a feature or a bug or the phrase How do I applies then its probably a usage question Thank you We also have a Gitter channel anyone is welcome to join to discuss and find help Most usage questions are not actually reduxobservable specific but rather general RxJS questions and patterns so you can also find help in the RxJS community at large RxJS bugs can be reported in their repo Do you want to request a feature or report a bug Dont find official documentation on SSR Make sure someone else hasnt already reported it What is the current behavior It doesnt work on the server side or throws the following warning Learn more reduxobservable WARNING this middleware is already associated with a store createEpicMiddleware should be called for every store If the current behavior is a bug please provide the steps to reproduce and a minimal demo of the problem using JSBin StackBlitz or similar The easier it is to reproduce the more likely someone will be able to quickly help Very often in the process you may discover its not a bug or gain a better understanding of what the cause is Here are some you can use as starting points JSBins StackBlitz What is the expected behavior Should work SSR Which versions of reduxobservable and which browser and OS are affected by this issue Did this work in previous versions of reduxobservable X I have read the Contributor Guide X My commit messages are in conventionalchangelogstandard format Hello When developing with reduxobservable we end up repeating the common pattern of passing state to any dependency For example we have a request dependency which is a wrapper around rxjsajax We pass state to that function on every single call so that it can take the API token from the state and update the request headers accordingly My proposition is to introduce an option for createEpicMiddleware called createDependencies which must be a function that accepts the state and returns the actual dependencies the same dependencies that youd pass to the dependencies option This would avoid repeating code as we wouldnt need manually to pass the state to every single dependency If you like this change and will consider merging it I suggest that we discuss whether or not action should be passed too I believe that it shouldnt because I cant find any use cases for it and might enable some antipatterns However if there are legitimate use cases for it implementing it in the future would break backward compatibility So I think that this is an important discussion to have By the way I regret that I committed these changes before realizing that exists I tried to search for this exact feature but couldnt find it In this comment you mention an alternative but I think that the code example is hard to understand and honestly it feels a bit hacky I havent tried it but in TypeScript it seems to me that wed have to either use any or define some complex types If you need some examples of use cases you can take a look at the commit f dd e c dcd b d f d bef a Thanks for your attention