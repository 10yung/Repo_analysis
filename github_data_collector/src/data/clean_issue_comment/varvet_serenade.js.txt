Does it strategically keep DOM elements alive and update only ones that have changed for example similar to React or Aurelia both of which use completely different techniques Once a view has been removed from the DOM it permanently loses all of its listeners Reattaching it to the DOM makes the view completely static Controllerloaded doesnt work for templates with multiple root nodes especially when there are some DynamicNodes templateserenade form classforminline eventsubmitsearch if searchTopicsCount else No results were found in pager controllercoffee class SearchController loaded view model consolelogview model Expected input to loaded is view model however the argument list for this template is form undefined undefined model The related code in Viewprototyperender is following javascript if typeof controllerloaded function controllerloadedapplycontroller slicecallnodesmapfunctionnode return nodeelement concat model So first three arguments are product of nodeelement and this property is not defined for DynamicNodes build for searchTopicsCount or pager thats why the second and third argument is undefined How this is suppose to work I expected compiled view as the first argument but instead of that I got node list in first three arguments for this particular case I need to hookup after view is rendered to initialize jQuery UI Sortable on the result set since Im preloading the result set when the app is initialized Is there a better way Something like view rendered event This doesnt work class User extends SerenadeModel property id serialize id property username serialize username property email serialize email Theres no info on the if and else template commands in the documentation ruby class FriendsPanel extends SerenadeModel property user delegate friends to user selection onlineFriends from friends filter online new FriendsPaneluser undefined When assigning a property the following should hold coffeescript class Foo extends SerenadeModel property name foo new Foo ObjecthasOwnPropertyfoo name false fooname bar ObjecthasOwnPropertyfoo name true Making Serenade define itself as an AMD or CommonJS module would be very useful and really easy to implement It can be achieved by wrapping the code this way javascript function root factory if typeof define function defineamd AMD define exports factory else if typeof exports undefined CommonJS var target iftypeof module undefined target moduleexports else target exports factorytarget else Browser global rootSerenade factory this function Serenade Code goes here return Serenade Very helpful in is missing in the documentation on Nice example in weeksJob div Week job name name view jobstable 