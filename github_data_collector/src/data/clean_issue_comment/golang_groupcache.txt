Would you accept a PR adding a gRPC implementation of PeerPicker into this repo or would you prefer that lived elsewhere Previously http use NewRequestWithContext to support cancellation use ctx naming convention prefer contextTODO to nil Sorry missed a few of these in my first go That would be great to have a look memberlist for peer peer connection The tests pass if ReadAt returns in errors for invalid values of offset The patch also adds check for error to be returned when dest is larger in size than source in lrulrugo file there is a struct which holds as below fields listList cache map interface listElement why dont keep only listList to implement My use case I am planning to store a bunch of containers as nodes in the hashring Each container would look at the hashring and decide what operations to do based on its position in the hashring In order to do this I need to access the hashring itself And so Is there any plan to return the hashmap in the struct of hashring in consistenthashgo The hashring package of npm gives access to the ring structure itself I was hoping to find a similar implementation of hashring in go Would it be possible for you to support this Thanks Sai Hi Im Yevgeny Pats Founder of Fuzzit Continuous fuzzing as a service platform We have a free plan for OSS and I would be happy to contribute a PR if thats interesting The PR will include the following gofuzz fuzzers This is generic step notconnected to fuzzit Continuous Fuzzing of master branch which will generate new corpus and look for new crashes Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step This will prevent new or old bugs from crippling into master You can see our basic example fuzzitdevexamplego and you can see an example of in the wild integration googlesyzkaller Let me know if this is something worth working on Cheers Yevgeny Hi Are there any plans to implement more efficient writethrough or copy SetProto for protoSink as described in the comments here The current implementation is similar to using a byte slice sink and marshalling the object before inserting it into the cache and unmarshalling when it is returned from the cache its in the ByteViewgo line and which may cause panic