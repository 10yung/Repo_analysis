Thank you for the nice package I have implemented appender and layout functions appendersyslognet layoutsyslognet that can be used to interface with the recently uploaded to CRAN syslognet R package that allows logging by sending TCP messages to a remote server running syslog When using logshinyinputchanges in an app displaying a plotly plot I get a lot of empty logging lines when hovering the graph Can hovers be filtered out of the logging Also it would be nice if you can set the log levels For the rest a very nice feature r libraryshiny libraryplotly librarylogger shinyApp ui fluidPage plotlyOutputplot selectInputtest test choices ca b c server functioninput output session logshinyinputchangesinput outputplot renderPlotly plotlymtcars x mpg y wt mode markers type scatter When I am using loggerlogerrors if I want to catch failures logger will still log those errors which I dont necessarily always want For example librarylogger logerrors myfun function res trystophello world silent TRUE if methodsisres tryerror TRUE else FALSE myfun ERROR hello world TRUE introduced the syslog appender but sending all log records on the INFO level We can do a better job there after Have you considered invisibly returning the log message I find myself periodically doing something like r if x badcondition loggerlogfatalmessage of badness x stopmessage of badness x I can form the message once and use it in both loggerlogfatal and stop but I might like to take advantage of loggers formatting methodologies eg glue or json and I think a more straightforward approach is something like r if x badcondition stoploggerlogfatalmessage of badness x This if course applies to other loggers not just logfatal Id think there are two good options for exactly what to return message of badness before some of the final formatting or FATAL message of badness the literal full log entry Thoughts The use of fn in a custom formatter goes a little crazy when the calling function name is not easily determined r loggerloglayoutloggerlayoutgluegeneratorformat time level fn msg loginfohello INFO NA hello func function loginfohello func INFO func hello But when done from an anonymous function or similar the log includes the entire function definition r function loginfohello INFO function hello INFO loginfohello hello INFO hello You can imagine how this gets crazy when the anonfunction is more than hello world Actually its a little more than just an anonymous function In the code below the function is perfectly named but not wellnamed within Map r Mapfunc INFO function hello INFO hello INFO loginfohello hello INFO hello NULL I wonder if the solution is to catch when fn will expand to something ridiculous and either head it or replace it with something much less unreasonable such as omgimlost 