Hi One thing which can make prototool even better is custom config path In large projects there may be many configs for different tools and it would be extremely convenient to keep them all in a dedicated directory eg configs rather than cluttering repositorys root Imagine the following project structure repo api apiproto cmd configs prototoolyaml internal pkg READMEmd Working directory is repo root The config path flag would be passed like prototool generate config configsprototoolyaml Prototool should work the same as if the config was in the working directory ie repo root Please let me know what you think about this feature request PS There is a PR open already but it seem to be left without attention Fixes A few places to replace its with its This PR adds a linter to ensure rubypackage file option is set This file option is part of protobuf Hi I am using uber lint check in my project I can see there is a java package prefix check already added but I am not able to find a way how can I enforce a check on package name Below is the example of what I am trying to achieve prototoolyaml lint group uber packageprefix testabcxyz The package name in proto file should start with testabcxyz else it should throw an error Thanks great tool and we migrate all microservice to your standard but we have a question what you do to use grpc client in another service we have service store proto vendor store v storeapiproto storeproto stock v stockapiproto stockproto store use files from stock Now we want to use store microservice in webcam microservice We can copy and paste generated go code but it wont work because generated go code has invalid import path v bitbucketcommicstoreinternalgrpcgengovendorstorestockv it cant import because valid import path should start from bitbucketcommicwebcam we decided to make package grpcclient where copy and paste all proto and make special prototoolyaml And generate all clients in webcam microservice What the right way Maybe the right way is generate all clients in place We only start integrate grpc and have a lot of questions To be able to use more flexible file paths was added support of ENV vars in the configprovider The main idea is the possibility to use the include paths from the system environment For example yml protoc version includes GOPATHpkgmodgithubcomgrpcecosystemgrpcgatewayv thirdpartygoogleapis GOPATHpkgmodgithubcomgrpcecosystemgrpcgatewayv lint fileheader content USER Document generation iscommented true Also was extended generategooptionsimportpath lintfileheaderpath lintfileheadercontent and lintignoresfiles with the same reason NOTE Originally it was implemented only for several fields of config but can be extended for the whole config file Were trying to use grpctoolsnodeprotoc with prototool were getting the message definitions translated to JS but it doesnt seem to be generating the service definition so we can actually use the JS grpc client code in our project prototoolyaml yaml protoc version generate plugins name js flags importstylecommonjsbinary output test path grpctoolsnodeprotoc brandapiproto proto syntax proto package ibubrandv Handles Brands and their configuration service BrandAPI Get the Brand specified by the code rpc GetBrand GetBrandRequest returns GetBrandResponse Request for getting a Brand message GetBrandRequest string brandid Response for getting a Brand message GetBrandResponse string brand Using Prototool with these files only results in brandapipbjs being generated but if I try using grpctoolsnodeprotoc by itself it will generate the service definition grpctoolsnodeprotoc jsoutimportstylecommonjsbinarytest grpcouttest proto It seems the only thing different between the two methods is that you can define a grpcout flag for grpctoolsnodeprotoc but not in the prototoolyml file But Im not quite sure what the flag or option looks like in the prototoolyml file prototool version info Version Default protoc version Go version go OSArch darwinamd Has anyone had any luck with prototool and JS Im guessing Im completely missing some setting or not quite understanding some basic concept of how this is supposed to work Any help would be greatly appreciated Make files in usrincludegoogleprotobuf world readable in the docker image Also update gRPC and Protobuf versions that are installed to fix the docker image build