Ive been using slotmap to develop a disk management library for Linux with an ECS architecture with great success at least with a HopSlotMapEntity with many associated SparseSecondaryMapEntity T storages Some secondary maps provide associations to zero or more other entities such as a device with many children or with many parents Disks with partition tables and LVM volume groups would be an example of device entities that many contain many partitionable child device entities LVM volume groups may themselves be a conglomeration of multiple parent devices This means that I have two secondary maps that are defined like so rust Devices that contain children will associate their children here pub children SparseSecondaryMapEntity VecEntity If the device has a parent it will be associated here pub parents SparseSecondaryMapEntity VecEntity It would be ideal if I could fetch a key and insert a default value if it is vacant or add value onto the map if it is not Currently I have to getmut and push on SomeT else insertvec T on None rust match parentsgetmutentity Someassociations associationspushotherentity None dropparentsinsertentity vec otherentity Can a flag be added to make this crate nostd and have it only depend on alloc According to this issue by orlp FIFO version of freelist is a desired enhancement I simply implement FIFO by adding a tail pointer Some unit test and benchmark might be needed but Im not sure what we want so I just leave it here getdistinctmut allows one to get two mutable references to distinct values stored in a SecondaryMap making various access patterns easier when the values are not Copy this is a feature that is requested for the stdlibs HashMap over and over again Questions Not sure about the name Maybe getpairmut or similar would be better For symmetry reasons we should probably also implement this for the other maps as well I did not do this because SlotMap requires its values to be Copy and so this wouldnt be really useful there SparseSecondaryMap is backed by a HashMap and hence implementation would require unsafe code I just havent used HopSlotMap yet so no idea there Messing with the imports for edition is more annoying for nostd and my attempts failed Sure it can be done but it isnt worth it as there is no reason against using the edition Blocking on Currently the freelist is LIFO as it simplified the logic on deletion for speed I need to investigate the performance impact of using FIFO instead to prevent the same slot being used over and over again This could then also be coupled with some system that guarantees at least n free elements which would ensure that an overflow takes at least n times longer to occur