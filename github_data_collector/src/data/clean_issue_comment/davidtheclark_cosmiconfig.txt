It would be good to have access to the final config or just to default searchPlaces My use case requires allowing multiple configs per project root config and sub configs per directory To achieve that Im just using glob matching for eg libnamerc Given the above would be good to have access to generated searchPlaces The easiest way would be to just expose config from ExplorerBase by providing getConfig public method If that sounds okay let me know I can prepare a PR Thanks I want to use the JS loader for files without extension Before v js import cosmiconfig from cosmiconfig cosmiconfignamespace loaders noExt cosmiconfigloadJs After js import cosmiconfig defaultLoaders from cosmiconfig cosmiconfignamespace loaders noExt defaultLoaders js Because I am not looking to implement my own loader I need to dig into the defaultLoaders object to get at function I need Its buried pretty deep in there Having to use bracket notation to reference the function is also lessthanideal Im not sure what the impetus was behind changing this but a suggestion to make this use case more ergonomic would be a nice shortcut like so js import cosmiconfig from cosmiconfig cosmiconfignamespace loaders noExt js use the default js loader This should work with custom loaders js import cosmiconfig from cosmiconfig import myLoader from somewhere cosmiconfignamespace loaders js myLoader noExt js use myLoader Alternatively expose the default loader functions at the module level as previously named in v x loadJson loadYaml etc Before this change cosmiconfig in ToC points to the very first heading If you approve this i can send a PR First and foremost Great that you switched from Flow to TypeScript Although when switching from typescosmiconfig to the types which are now provided by this package I experienced the following issues No direct import for CosmiconfigResult Currently when I want to declare a variable which will get the result from cosmiconfigsearch I need to do it like this ts import cosmiconfig from cosmiconfig import CosmiconfigResult from cosmiconfigdisttypes let result CosmiconfigResult But Id like to import it conveniently like this ts import cosmiconfig CosmiconfigResult from cosmiconfig let result CosmiconfigResult Unfortunately this is not possible since CosmiconfigResult is not reexported from the types dir I tried fixing it but since isolatedModules true is set in tsconfigjson reexporting is disallowed srcindexts error TS Cannot reexport a type when the isolatedModules flag is provided export cosmiconfig cosmiconfigSync defaultLoaders CosmiconfigResult No clear return type of cosmiconfig I have a class which adds cosmiconfig as a property and I have to define its type Since cosmiconfig returns an object and is especially excluded from needing a convenient return type I need to declare it like this ts import cosmiconfig from cosmiconfig class MyClass private readonly cosmiconfig ReturnTypetypeof cosmiconfig constructor thiscosmiconfig cosmiconfigmyconfig Id rather like to be able to declare it like this ts import cosmiconfig Cosmiconfig from cosmiconfig class MyClass private readonly cosmiconfig Cosmiconfig constructor thiscosmiconfig cosmiconfigmyconfig Where Cosmiconfig is an interface which describes the return value of cosmiconfig Im trying to emulate Parcels configfile resolutionsup to work around the fact that it no longer works synchronously which walks up from an assets directory to either the filesystem root directory or the nearest enclosing nodemodules directory whichever comes first This is proving to be difficult because stopDir is required to be a fixedabsolute path In theory I could walk up from the assets directory myself to see if theres an enclosing nodemodules directory and supply that as the static stopDir but Id rather not roll my own directory traversal since it defeats the point of using this module The desired behavior would be straightforward to emulate if the stopDir option could optionally be supplied as a function eg javascript const stopDir dir return dir fsRoot Pathbasenamedir nodemodules const explorer cosmiconfigname stopDir I mean the traditional ini format like ab cd It gives the plain string instead of the parsed object like a b c d In rare cases I want to use cosmiconfig in a generic way to load from a userspecified config file I want my code to behave identically regardless of the filename specified by the user so I need to disable cosmiconfigs specialcasing of packagejson One hack is to ask for packagejson instead of packagejson However I think a better approach is for Explorer to have a property packageJsonName which is a string or array of strings listing filenames that should be treated as packagejson instead of a normal config file This property can be modified by people like me who need to treat packagejson like any other config file Hello I searched in the issues here and shockingly I havent found this mentioned Currently cosmiconfig searches up the parent tree from the working directory stopping at HOME which is fine and most I would assume are okay with this However for filesystem psychopaths like myself it pains me to have to move any sort of user configuration file out XDGCONFIGHOMEprojectname directory usually configprojectname and pollute my home directory Any thoughts on adding this as a final search path You can read up on the specification here and here In short using prettier as an example Id imagine the workflow to go like this Perform the current lookup traversal as it is done right now If nothing found check the following XDGCONFIGHOMEprettierconfig XDGCONFIGHOMEprettier current standard file name checks Thanks for considering Would you mind me adding support for TOML Because TOML looks simpler and less errorprone There is a good article explaining the reason why TOML is better than YAML 