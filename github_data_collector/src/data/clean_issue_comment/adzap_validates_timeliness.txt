Following on from Im not seeing a fix for this in my spec see below for prethreaded configuration threadsafety Results timeliness validatestimeliness no reconfiguration per thread threadsafety v v passes fails v v fails passes v v alpha fails passes My spec for this is as follows ruby frozenstringliteral true require railshelper RSpecdescribe Timeliness do aftereach do reset to not mess up other specs loadRailsrootjoinconfiginitializersvalidatestimelinessrb end letusdate leteudate it doesnt need reconfiguration per thread fails with Timeliness but should be fixed with ValidatesTimeliness alpha do Timelinessuseeuroformats in initializer expectTimelinessparseeudatenotto benil expectTimelinessparseusdateto benil threads threads Threadnew expectTimelinessparseeudatenotto benil threads Threadnew expectTimelinessparseusdateto benil threadseach join end it is threadsafe fails with Timeliness fixed with Timeliness do threads threads Threadnew do Timelinessuseeuroformats times expectTimelinessparseeudatenotto benil end threads Threadnew do Timelinessuseusformats times expectTimelinessparseusdatenotto benil end threadseach do t treportonexception false tjoin end end end Hey adzap I was looking for a gem like this and stumbled upon your gem Nice work I thought it would be much easier to read the README if it was in markdown and if it had syntax highlighting So I went ahead and converted it to markdown Feel free to take over the PR and make any other changes or just ignore the PR if you dont want to apply these changes I dont think Ill have time to properly follow up on this but still wanted to help You can preview the new README here I stumbled upon a weird behaviour when trying to use allowblank We have an Intervention model with a legacy startedat column It also has a startedat method that looks into dependent workingperiods to compute it In one instance the column is filled but the methods returns nil The validator doesnt skip the validation since the column is filled but the validation breaks since the method returns nil I think a more coherent behaviour would be to only take into account the methods return value which is what ActiveModel default validators do I think the fix should be around in validateeach maybe adjusting the guardclause or the value setting before the blanknesscheck How to reproduce class Intervention ActiveRecordBase validates startedat timeliness onorbefore Timenow allowblank true def startedat nil end end Interventionnewstartedat Timenow hourtap validerrorsmessages startedat Started at is not a valid datetime Initialize instance variables so that we can silence the warning coming from instance variable not defined Error message for invalid date is not added for invalid dates like st February instead date is shifted forward Used existing rawvalue to get the date selected by user Now the error for invalid datetime value is shown adzap Please review and merge PR When I serialize the time field using I get not a valid time error from validatestimeliness ruby mymodelrb class MyModel ApplicationRecord validatestime closesat after opensat serialize opensat TodTimeOfDay serialize closesat TodTimeOfDay end ruby MyModelwhereopensat closesat firstorcreate Closes at is not a valid time I have an issue with format option my case is the field accepts types yyyymmdd hhnnss or yyyymmdd hhnnss My code was validatesdatetime columnname timeliness type datetime format yyyy mm dd shh nn ss allowblank true The default value in migration is But It did not accept the value Followup for Hi Simple change to take advantage of I n when displaying dates in error messages I need months in French Looks like validatestimeliness has some issues when using SimpleDelegator save method doesnt return false if validation fails Im not entirely sure if this is a general validation issue or specific to this gem Here is the how to reproduce class EventFormObject SimpleDelegator include ActiveModelValidations validatesdate startat endat onorafter lambda Datecurrent def initializeevent super end end irbmain e Eventlast ef EventFormObjectnewe irbmain efsave true irbmain efvalid false 