 Description If there is no money flow for n consecutive time frames this is sometimes the case for less popular securities towards end of the day or if there is no negative money flow for n consecutive time frames eg during a strong uptrend the denominator in r mr runSum pmf n runSum nmf n becomes zero resulting in NA Expected behavior No NAs in these cases Suggest to fix by setting mfi to if denominator of mr is because for limit denominator mr infinity and limit mr infinity mfi Special case both numerator and denominator are Suggest to fix by setting mfi to in this case because for limit numerator and denominator mr and thus mfi r mfi isinfinitemr mfi isnanmr For better diffability the following changes are separated into multiple commits runSumrunMinrunMax have no dependency to n in cumulative case parameter n is ignored and calculation is done for n remove dependency to n for NA padding correct algorithmic errors resulting from copypaste mistakes in implementation of stoch SMI and TRIX fix growth function old implementation just returned series of NA because first value in cumprod was always NA due to napad in ROC set nadpadFALSE and pad with zero ROC type must be discrete not continuous because we need factors not differences for use with cumprod using factors we need x values not x values for sell signals strip off last value from signals if signals has the same length as price because the outcome of the actions in signals is lagged by one thus zero padding for first value initial investment add optional parameter accurateinsteadoffast with default FALSE to runSum function because if x contains a mixture of very large and small numbers the fast version becomes inaccurate this can lead to small negative running sums on all positive input data which can lead to various secondary errors in other TTR functions see and built upon runSum add optional parameter accurateinsteadoffast with default FALSE to SMA and WMA to be passed on to runSum use accurateinsteadoffastTRUE in VWAP CMF DVI MFI rollSFM and volatility Adding tests to runCov for x and y as xts objects Currently the unit tests only use x and y as numeric vectors I believe the performance of runCov could be improvedparticularly in terms of memory usage if the following lines are removed The conversion with tryxts seems unnecessary and the xy cbind is unnecessary since the xy variable is never used runCov functionx y n useallobs sampleTRUE cumulativeFALSE x tryxtsx errorasmatrix y tryxtsy errorasmatrix ifisxtsx isxtsy xy cbindxy else xy cbind asvectorx asvectory I can submit a pull request but I have validated that deleting the rows will pass the unit tests hma functiondata n hmaout HMAdata n when I call this function with n etc it is not working but it is working fine for even numbers like etc Here R DMIn ifelse dHdL dH dL ifelse dH dL dL HERE TR ATRHLC tr TRsum wilderSumTR nn DIp wilderSumDMIp nn TRsum And pretty much for all of the other functions Could the n and whatever else be passed in with Hi Joshua In Line ff ifbounded hmax runMaxhigh nFastK lmin runMin low nFastK else hmax runMaxchigh high NROWHLC nFastK lmin runMaxc low low NROWHLC nFastK this is the line lmin runMinc low low NROWHLC nFastK this is the line I stumbled over this just by looking at the code No testing was performed Thanks for the great package I just started studying it Regards A Version TTRrunPercentRank n cumulative TRUE with cumulativeFALSE it works fine TTRrunPercentRank n cumulative FALSE NA NA NA NA Are there a Least Squares Moving Averages function Hi Joshua This is a pull request discussed in this issue The pull request is not intended to be merged but was made so you could compare the proposed changes that might be incorporated into an alternate ZigZagR function Regards Nathanael