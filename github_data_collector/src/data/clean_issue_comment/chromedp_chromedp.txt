 This issue tracker is mainly for bugs and feature requests Before asking a question search online and try to investigate on your own What versions are you running Lastest chrome and chromium using enableautomation invalid Webdriver detected using javascript javascript windownavigatorwebdriver This issue tracker is mainly for bugs and feature requests Before asking a question search online and try to investigate on your own What versions are you running Chrome What is the issue When you start a new browser context or attach to a new target then by calling chromedpRun you implicitly call a number of actions It would be nice if it were possible to optionally avoid calling these actions on a new target For example if I want the debugger to attach to a web worker then the method Pageenable is not available and the first call of chromedpRun will fail but subsequent calls will not Id be interesting in helping with a PR if this is a change people support and there is consensus on what the userfacing interface for this would be This was a useful harmless tweak for my current project The process PID can come in handy when there is talk about running a third party software against a remotely controlled browser Ive reused the error checking from Run the closesttoaccurate error I could find for the browser not being valid is ErrInvalidTarget This is my first PR if theres anything wrong Id be happy to change it asap Note the th of november commit changed Run to return process pid is no longer valid code and the current code is a recent pull of the latest chromedp version the function added to browsergo What versions are you running sh githubcomchromedpchromedp v Chromium Arch Linux go version go linuxamd I am running chromedpRun in endless loop chromedp not flushing heap after context cancelled I copied click example and runned it in for loop When I look at pprof heap allocation increasing on every chromedpRun You can test at after run the app go package main import context log time githubcomchromedpchromedp githubcomgincontribpprof githubcomgingonicgin func main router ginDefault go func for click pprofRegisterrouter routerRun func click create chrome instance ctx cancel chromedpNewContext contextBackground chromedpWithLogflogPrintf defer cancel create a timeout ctx cancel contextWithTimeoutctx timeSecond defer cancel navigate to a page wait for an element click var example string err chromedpRunctx chromedpNavigate wait for footer element is visible ie page is loaded chromedpWaitVisiblebody footer find and click Expand All link chromedpClickpkgexamples div chromedpNodeVisible retrieve the value of the textarea chromedpValueexampleAfter play input textarea example if err nil logFatalerr logPrintfGos timeAfter example ns example What versions are you running pre go list m githubcomchromedpchromedp githubcomchromedpchromedp v googlechrome version Google Chrome go version go version go darwinamd pre What did you do Include clear steps Searching on Github with lots of results package main import context fmt githubcomchromedpcdprotodom githubcomchromedpchromedp func main ctx cancel chromedpNewContextcontextBackground defer cancel sel input nameq tasks chromedpTasks chromedpNavigate chromedpWaitVisiblesel chromedpSendKeyssel linux n chromedpWaitReadybody chromedpByQuery chromedpActionFunc funcctx contextContext error node err domGetDocumentDoctx if err nil panicerr res err domGetOuterHTML WithNodeIDnodeNodeIDDoctx if err nil panicerr fmtPrintfhtmls n res return nil err chromedpRunctx tasks if err nil panicerr What did you expect to see Raw HTML dump of the result page What did you see instead The code above throws an error on a negative node could there be a bit int limitation being triggered somewhere panic Could not find node with given id goroutine running mainmainfunc x xc b x x githubgo x c githubcomchromedpchromedpActionFuncDo x x xc b x x gopkgmodgithubcomchromedpchromedpv chromedpgo x a githubcomchromedpchromedpTasksDo xc a x x x xc b x d b x gopkgmodgithubcomchromedpchromedpv chromedpgo x githubcomchromedpchromedpTasksDo xc fbf x x x xc b xc b x gopkgmodgithubcomchromedpchromedpv chromedpgo x githubcomchromedpchromedpRun x xc xc fbf x x x fa xc gopkgmodgithubcomchromedpchromedpv chromedpgo x mainmain githubgo x What versions are you running pre go list m githubcomchromedpchromedp githubcomchromedpchromedp v googlechrome version Google Chrome go version go version go darwinamd pre What did you do Include clear steps The main search page on duckduckgocom features a text input field named q form idsearchformhomepagetop classsearch searchhome jssearchformtop namex methodPOST actionhtml input classsearchinput jssearchinput typetext autocompleteoff nameq tabindex value input classsearchbutton jssearchbutton typesubmit tabindex valueS input classsearchclear empty jssearchclear typebutton tabindex valueX div classsearchhidden jssearchhiddendiv form so lets try to use SendKeys to paste text into it package main import context githubcomchromedpchromedp log func main ctx cancel chromedpNewContext contextBackground chromedpWithDebugflogPrintf defer cancel sel input nameq tasks chromedpTasks chromedpNavigate chromedpWaitReadybody chromedpByQuery chromedpSendKeyssel waaah n chromedpByQuery chromedpWaitReadybody chromedpByQuery err chromedpRunctx tasks if err nil panicerr What did you expect to see The selector input nameq should find the item What did you see instead Debug output indicates its searching forever without finding it id sessionIdCF A F D CA FEA B D F methodDOMquerySelectorparamsnodeId selectorinput name q errorcode messageDOM Error while queryingid sessionIdCF A F D CA FEA B D F This seems to be related to hopefully this easily reproducable example helps to find the root cause Or whether two contexts derived from the same context using chromedpNewContext are safe to use concurrently I need to prevent changing of location on current tab Any help What versions are you running pre go list m githubcomchromedpchromedp flag provided but not defined m usage list e f format json build flags packages Run go help list for details chromiumbrowser version Chromium Built on Ubuntu running on Ubuntu go version go version go linuxamd pre What did you do Include clear steps At first I want to catch the event I try something like go func listen funcevent interface return funcevent interface switch ev eventtype case pageEventFrameRequestedNavigation printlnNAVIGATION REQUEST func main creating context chromedpListenTargetctx listen chromedpRunctx pageSetDownloadBehaviorpageSetDownloadBehaviorBehaviorDeny networkEnable networkSetBypassServiceWorkertrue fetchEnable pageEnable chromedpNavigatemy url do some stuff and get location changed What did you expect to see It should output NAVIGATION REQUEST What did you see instead Change of current location no NAVIGATION REQUEST There is a page with a lot of buttons I want to jump through them in order to get the content of the page and search for elements in it What should I do func GetOrdersresult toolsOrder chromedpTasks var currentUrL string var nodes cdpNode return chromedpTasks chromedpNavigateUrl chromedpEvaluatedocumentquerySelectorJStatic Quickclick res chromedpLocation currentUrL chromedpNodesjsordercontainer nodes chromedpByQueryAll chromedpActionFuncfuncctx contextContext error count lennodes fmtPrintlncount count for v range nodes todo search button and click return nil What did you do Include clear steps go package main import context fmt githubcomchromedpchromedp log nethttp time func handlerw httpResponseWriter r httpRequest wHeaderAddContentType texthtml fmtFprintw DOCTYPE htmlhtmlheadmeta charsetutf head body buttonClick mebutton script var btn documentquerySelectorbutton Count the clicks on the button var numClicks btnaddEventListenerclick function e estopPropagation dont bubble numClicks All the bubbling clicks are misplaced var misplacedClicks documentaddEventListenerclick function e misplacedClicks Move the button periodically var transform true setIntervalfunction if transform btnsetAttributestyle transform translate d px px px else btnsetAttributestyle transform transform script body html func main httpHandleFunc handler go func logFatalhttpListenAndServe nil ctx cancel chromedpNewContext contextBackground defer cancel if err chromedpRunctx chromedpNavigate chromedpWaitVisiblebutton chromedpByQuery err nil logFatalerr Try to click the button times const iterations for i i iterations i if err chromedpRunctx chromedpClickbutton chromedpByQuery err nil logFatalerr var reallyClicked misplacedClicks int if err chromedpRunctx chromedpSleeptimeSecond chromedpEvaluatenumClicks reallyClicked chromedpEvaluatemisplacedClicks misplacedClicks err nil logFatalerr fmtPrintln iterations iterations reallyClicked clicks misplacedClicks clicks misplaced What did you expect to see The moving button is clicked times What did you see instead Some of the clicks are misplaced