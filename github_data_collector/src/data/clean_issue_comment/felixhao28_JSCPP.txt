It seems to me that there is an error with uninitialized arrays Elements should not be initialized to as is currently the case seems to me For example include stdioh int main float tab forint i i i printff tab i return gives instead of NaN NaN The C standard says that if an object that has an automatic storage duration is not explicitly initialized its value is undetermined I think its the same in C or not I am working with JSCPP within browser The demo has a debugjs Not sure how to use it Hi Felix In the code below there should be an overflow as the type used is a short but it appears that the calculation is done as an int thanks Bill cpp include iostream using namespace std include stdioh unsigned short a short is a bit type unsigned char p int main p a printfad na printfpd np return pegjs vecotrint v I would like to ask if there could be published a single fileminified version of this lib with every update because im trying to use it on the web and installingfinding a way to unify the whole lib into a single file using node always causes problems to me for some reason That if the online demo doesnt already use the last version avaliableCould someone inform me about that In that case I might just use it I was wondering if we could provide better display values after having a look on the code I think there could be done with small adjustments Is there any straightforward solution to provide a better display for multidimensional arrays So far starting from D the display value is for each element There is a parameter which stops the recursion after first dimension are any other sections which are intersecting Could the values from pointers include if not an actual address the name of the variable being pointed Functions are being represented as object we could use a suggestive placeholder As referred to from Code that is invalid and should not compile is instead being executed and run up until the point in the source code that it fails The linked issue contains of note I was attempting to demonstrate C type errors that happen at compile time in a demonstration post using klipse however the typing error seemed to happen at runtime instead of parsingcompilation time as prior lines of code were run and output information before the typing error was hit which completely destroyed my argument for C that catching type errors at compiletime prior to runtime helped prevent classes of errors before the code is executed Just go to any of the C fields at Then input c include iostream using namespace std int main char hw Hello World cout hw endl cout hw endl return Id expect it to just print out text unsigned int does not support on char Instead it prints text Hello World unsigned int does not support on char 