 Error when trying to create faulty worker Description When trying to create a new worker that has errors an empty log line is printed to the console instead of the actual error Replication For replication see this repository run via tsnode startts or npm run start Error when directly invoking workerts tsnode workerts homemiconnvmversionsnodev libnodemodulestsnodesrcindexts return new TSErrordiagnosticText diagnosticCodes TSError Unable to compile TypeScript workerts error TS Cannot find name asd asd at createTSError homemiconnvmversionsnodev libnodemodulestsnodesrcindexts at reportTSError homemiconnvmversionsnodev libnodemodulestsnodesrcindexts at getOutput homemiconnvmversionsnodev libnodemodulestsnodesrcindexts at Objectcompile homemiconnvmversionsnodev libnodemodulestsnodesrcindexts at Modulemcompile homemiconnvmversionsnodev libnodemodulestsnodesrcindexts at Moduleextensionsjs internalmodulescjsloaderjs at Objectrequireextensionscomputed as ts homemiconnvmversionsnodev libnodemodulestsnodesrcindexts at Moduleload internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at FunctionModulerunMain internalmodulescjsloaderjs Output when Invoking startts tsnode startts tsnode startts s user s system cpu total Additional notes An empty log line is also created on runtime exception if code compiled correctly Fixes On Linux bash terminal executing echo consolelogHello world gives the following error bash event not found To fix the issue changing the log string from Hello world to Hello world Tested on following systems Ubuntu LTS Linux Mint Fixes I am working with bitwise operators However when I use the operator I do not always get the same result Here is my bash session tsnode v v tsnode undefined What is going on here I basically detailed the issue in this comment Its a chickenandegglike problem If we use module commonjs then if any TS files import ES Modules indirectly in their dependency graph then Node throws an error because CommonJS modules can not import ES Modules If we change to module esnext then the errors from the previous point go away but now the js file that is loading tsnode and calling something like requiretypescriptentrypointts will have a similar issue because the call to requiretypescriptentrypointts will try to load an ES Module Finally if we convert the js file into an ES Module we can not convert requiretypescriptentrypointts into import typescriptentrypointts because now ES Modules dont handle ts extensions at least not out of the box and it seems the old require hooks dont operate on these new identifiers At the moment Im sort of stuck because I have dependencies in my dependency tree that are ES Modules The only workaround I can think of is to compile everything to js files ES Modules and avoid to use tsnode I wonder if a combination of allowJs and ignore so that it compiles JS files would help I havent tried that yet Hello noob here I have some ReactJs project which is run perfectly on every aspect But recently I want to make it monorepo and I chose Expo for this job I can make most of code works except some custom scripts It say SyntaxError Cannot use import statement outside a module and the line of code that lead to this error was nodemodulesexpoAppEntryjs which is in the main parameter in packagejson This is the full log tsnode r tsconfigpathsregister project scriptshelperstsconfigjson scriptscustomScriptts homeusernameWorkspaceprojectnodemodulesexpoAppEntryjs import expobuildExpofx SyntaxError Cannot use import statement outside a module at wrapSafe internalmodulescjsloaderjs at Modulecompile internalmodulescjsloaderjs at Moduleextensionsjs internalmodulescjsloaderjs at Objectrequireextensionscomputed as js homeusernameWorkspaceprojectnodemodulestsnodesrcindexts at Moduleload internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at Modulerequire internalmodulescjsloaderjs at require internalmodulescjshelpersjs at Objectanonymous homeusernameWorkspaceprojectscriptshelperscustomScriptts at Modulecompile internalmodulescjsloaderjs error Command failed with exit code and this is the content of scriptshelperstsconfigjson json compilerOptions allowSyntheticDefaultImports true jsx preserve lib dom esnext moduleResolution node noEmit true skipLibCheck true resolveJsonModule true target es allowJs true strict true forceConsistentCasingInFileNames true esModuleInterop true module commonjs isolatedModules true experimentalDecorators true emitDecoratorMetadata true noImplicitThis false exclude nodemodules include nextenvdts ts tsx This error not occur on every scripts just some custom script commands and all error disappear if I remove main field from packagejson I tried to search for solution for hours and tried a bunch of methods with no results TT I was thinking about workerthreads in node and wondering if moving the tsnode compiler to a pool of worker threads would ever be faster in transpileonly mode Im not sure its worth it but I want to share my thoughts anyway Itll need files set to eagerly load files instead of waiting for a require call If the app loads its entire codebase at startup then compilation ordering doesnt matter because you need to wait for every file But if youre only loading a small subset of the codebase tsnodes thread worker will somehow need to be smart about compiling the right files first It could analyze the files it loads for import statements or require calls and prioritize those files for compilation next Im not sure how much of a performance boost youd get though Theres also the issue of moving the entirety if tsnode into the worker thread Otherwise you have to load typescript into the main thread which seems costly But maybe not since we have to wait for the worker to load it anyway Hopefully some day Ill have a chance to prototype this and see if its any faster A followup to moved into a separate PR per review comments The diff for this will look much better after is merged Allows specifying require options via tsconfig Im sharing this here in case anyone else is having speed issues even with transpileonly I wrote a new npm module typescriptcachedtranspile which monkeypatches typescripts transpileModule function to use a disk cache Heres the relevant code Its very conservative It doesnt look at filesystem atimes or mtimes The cache key is computed from sha sums of both the configuration typescript version typescriptcachedtranspile version and all compiler flags and the filename and source text It doesnt work with transformers and it doesnt cache when the compiler returns diagnostics because I dont cache the diagnostics theoretically we could cache them as JSON pretty easily I tested on my teams codebase where tsnode transpileonly was adding a whopping second to startup Even with the overhead of computing sha sums caching reduced the overhead to about a second I understand the reasons for not introducing an incomplete caching solution to tsnode However in my case I need things to be fast which means I already need transpileonly mode so it makes perfect sense to use a caching solution that requires it If you use this and it works well or you find bugs please let me know