Over the years weve increasingly strengthened noexcept However we havent yet done so for array iterators This is increasingly visible eg span has a conditionally strengthened constructor where this matters Ctypevec has some padding than can be elminated by moving the pointers to the front Here is the sizes before and after rearranging the members class Ctypevec size Page alignment member size Table Delfl alignment member size LocaleName class stdctypechar size class stdctypewchart size class stdctypeunsigned short size After class Ctypevec size Table LocaleName Page Delfl class stdctypechar size class stdctypewchart size class stdctypeunsigned short size Resolves GH GH and driveby fixes GH Constexprizes the following algorithms and enables all relevant libc tests adjacentfind allof anyof binarysearch copy copybackward copyif copyn count countif equal equalrange exchange fill filln find findend findfirstof findif findifnot foreach foreachn generate generaten includes isheap isheap isheapuntil ispartitioned ispermutation issorted issorteduntil iterswap lexicographicalcompare lowerbound makeheap merge mismatch move movebackward nextpermutation noneof nthelement partialsort partialsortcopy partition partitioncopy partitionpoint popheap prevpermutation pushheap remove removecopy removecopyif removeif replace replacecopy replacecopyif replaceif reversecopy revese rotate rotatecopy search searchn setdifference setintersection setsymmetricdifference setunion sort sortheap swap swapranges transform unique uniquecopy upperbound This commit also contains the contents of to workaround DevCom it will be rebased and that content removed once that is merged the other one needs to be merged first Specific notes xutility The Ptrcopycat family are moved down next to stdcopy as that is their first consumer The core language loop for copyn is fairly long and so it was extracted into its own function Copyncore note similar name schema to Copymemmove reverse was changed to use earlyreturns for its optimization passes this removes the nice thing of having if constexpr not instantiate the loop However this form allows the loop to not be duplicated Updates the llvm submodule to get Checklist Be sure youve read READMEmd and understand the scope of this repo If youre unsure about a box leave it unchecked A maintainer will help you x Identifiers in product code changes are properly Ugly as per or there are no product code changes The STL builds successfully and all tests have passed must be manually verified by an STL maintainer before automated testing is enabled on GitHub leave this unchecked for initial submission x These changes introduce no known ABI breaks adding members renaming members adding virtual functions changing whether a type is an aggregate or trivially copyable etc x These changes were written from scratch using only this repository the C Working Draft including any cited standards other WG papers excluding reference implementations outside of proposed standard wording and LWG issues as reference material If they were derived from a project thats already listed in NOTICEtxt thats fine but please mention it If they were derived from any other project including Boost and libc which are not yet listed in NOTICEtxt you must mention it here so we can determine whether the license is compatible and what else needs to be done xutility Findpr is a helper for ispermutation so move it down to that area The SHOUTY banners were attached to functions which were implementation details of ispermutation so I fixed them up to say ispermutation and removed the banners for helper functions Use if constexpr to avoid a tag dispatch call for Trimmatchingsuffixes Optimizers will like this because they generally hate referencetopointer and it also serves to workaround DevCom when this algorithm is constexprized Indicate that we are trimming matching prefixes in this loop body and break apart comment block that was incorrectly merged by clangformat In the dual range forward version of the algorithm calculate the distances concurrently to avoid wasting lots of time when the distances vary by a lot For example ispermutation a forward range of length a forward range of length used to do the million increments now it stops at increment In the dual range randomaccess version avoid recalculating Last when it has already been supplied to us xhash Move down construction of Buckethi in Equalrange to before the first loop body using it Added a new function to calculate equality for unordered multicontainers We loop over the elements in the left container find corresponding ranges in the right container trim prefixes then dispatch to ispermutations helper Checkmatchcounts Improvements over the old implementation For standard containers we no longer need to hash any elements from the left container we know that weve found the run of equivalent elements because we started with an element in that container We also never go backwards or multiply enumerate Left even for Standard which improves cache use when the container becomes large Just like the dual range ispermutation improvement above when the equalranges of the containers are of wildly varying lengths this will stop on the shorter of the lengths We avoid the arg ispermutation doing a linear time operation to discover Last that we already had calculated in determining Rights equalrange The function Multiequalcheckequalrange tests one equalrange from the left container against the corresponding equalrange from the right container while Multiequal invokes Multiequalcheckequalrange for each equalrange Performance results Benchmark code undef NDEBUG define SILENCESTDEXTHASHDEPRECATIONWARNINGS include asserth include benchmarkbenchmarkh include hashmap include random include stddefh include unorderedmap include utility include vector using namespace std template template class class MapType void HashRandomUnequalbenchmarkState state stdminstdrand rngstdrandomdevice const auto range staticcastptrdifftstaterange vectorpairunsigned unsigned testData testDataresizerange const auto dataEnd testDatabegin range stdgeneratetestDatabegin dataEnd return pairunsigned unsignedrng u stdcopytestDatabegin dataEnd stdcopytestDatabegin dataEnd stdcopytestDatabegin dataEnd stdcopytestDatabegin dataEnd dataEnd stdunorderedmultimapunsigned unsigned atestDatabegin testDataend testDataclear stdunorderedmultimapunsigned unsigned b a nextbbegin bsize second u for auto state void asserta b BENCHMARKTEMPLATE HashRandomUnequal unorderedmultimapArg Arg Range BENCHMARKTEMPLATE HashRandomUnequal hashmultimapArg Arg Range template template class class MapType void HashRandomEqualbenchmarkState state stdminstdrand rngstdrandomdevice const auto range staticcastptrdifftstaterange vectorpairunsigned unsigned testData testDataresizerange const auto dataEnd testDatabegin range stdgeneratetestDatabegin dataEnd return pairunsigned unsignedrng stdcopytestDatabegin dataEnd stdcopytestDatabegin dataEnd stdcopytestDatabegin dataEnd stdcopytestDatabegin dataEnd dataEnd stdunorderedmultimapunsigned unsigned atestDatabegin testDataend testDataclear stdunorderedmultimapunsigned unsigned b a for auto state void asserta b BENCHMARKTEMPLATE HashRandomEqual unorderedmultimapArg Arg Range BENCHMARKTEMPLATE HashRandomEqual hashmultimapArg Arg Range template template class class MapType void HashUnequalDifferingBucketsbenchmarkState state stdunorderedmultimapunsigned unsigned a stdunorderedmultimapunsigned unsigned b const auto range staticcastptrdifftstaterange for ptrdifft idx idx range idx aemplace bemplace aemplace bemplace for auto state void asserta b BENCHMARKTEMPLATE HashUnequalDifferingBuckets unorderedmultimapArg Arg Range BENCHMARKTEMPLATE HashUnequalDifferingBuckets hashmultimapArg Arg Range BENCHMARKMAIN Checklist Be sure youve read READMEmd and understand the scope of this repo If youre unsure about a box leave it unchecked A maintainer will help you x Identifiers in product code changes are properly Ugly as per or there are no product code changes x The STL builds successfully and all tests have passed must be manually verified by an STL maintainer before automated testing is enabled on GitHub leave this unchecked for initial submission x These changes introduce no known ABI breaks adding members renaming members adding virtual functions changing whether a type is an aggregate or trivially copyable etc x These changes were written from scratch using only this repository the C Working Draft including any cited standards other WG papers excluding reference implementations outside of proposed standard wording and LWG issues as reference material If they were derived from a project thats already listed in NOTICEtxt thats fine but please mention it If they were derived from any other project including Boost and libc which are not yet listed in NOTICEtxt you must mention it here so we can determine whether the license is compatible and what else needs to be done When VS Preview is available we should update our required compiler version accordingly The Microsoftinternal checkedin toolset is already version so we dont need to wait for that Description Resolves and I mostly copied standard quotes unrolled some function calls and Uglified Now I wonder if it is possible to merge some code between usesallocatorconstructionargs and Usesallocatorconstruct from xpolymorphicallocatorh their purpose is same it seems Checklist Be sure youve read READMEmd and understand the scope of this repo If youre unsure about a box leave it unchecked A maintainer will help you x Identifiers in product code changes are properly Ugly as per or there are no product code changes The STL builds successfully and all tests have passed must be manually verified by an STL maintainer before automated testing is enabled on GitHub leave this unchecked for initial submission These changes introduce no known ABI breaks adding members renaming members adding virtual functions changing whether a type is an aggregate or trivially copyable etc x These changes were written from scratch using only this repository the C Working Draft including any cited standards other WG papers excluding reference implementations outside of proposed standard wording and LWG issues as reference material If they were derived from a project thats already listed in NOTICEtxt thats fine but please mention it If they were derived from any other project including Boost and libc which are not yet listed in NOTICEtxt you must mention it here so we can determine whether the license is compatible and what else needs to be done Description Resolves According to the table from P only lvalue lvalue case needed fixing I also checked other overloads seems conforming I tried to leave allocation but am not sure if I got SOCCC right dont know how to check it Also due to operator not being friend Altytraits was copied Checklist Be sure youve read READMEmd and understand the scope of this repo If youre unsure about a box leave it unchecked A maintainer will help you x Identifiers in product code changes are properly Ugly as per or there are no product code changes The STL builds successfully and all tests have passed must be manually verified by an STL maintainer before automated testing is enabled on GitHub leave this unchecked for initial submission These changes introduce no known ABI breaks adding members renaming members adding virtual functions changing whether a type is an aggregate or trivially copyable etc x These changes were written from scratch using only this repository the C Working Draft including any cited standards other WG papers excluding reference implementations outside of proposed standard wording and LWG issues as reference material If they were derived from a project thats already listed in NOTICEtxt thats fine but please mention it If they were derived from any other project including Boost and libc which are not yet listed in NOTICEtxt you must mention it here so we can determine whether the license is compatible and what else needs to be done Description which has been fixed for p Fixes This is a dual of internal PR MSVCPR Checklist Be sure youve read READMEmd and understand the scope of this repo If youre unsure about a box leave it unchecked A maintainer will help you X Identifiers in product code changes are properly Ugly as per or there are no product code changes The STL builds successfully and all tests have passed must be manually verified by an STL maintainer before automated testing is enabled on GitHub leave this unchecked for initial submission X These changes introduce no known ABI breaks adding members renaming members adding virtual functions changing whether a type is an aggregate or trivially copyable etc X These changes were written from scratch using only this repository the C Working Draft including any cited standards other WG papers excluding reference implementations outside of proposed standard wording and LWG issues as reference material If they were derived from a project thats already listed in NOTICEtxt thats fine but please mention it If they were derived from any other project including Boost and libc which are not yet listed in NOTICEtxt you must mention it here so we can determine whether the license is compatible and what else needs to be done Microsoftinternal VSO clr is incompatible with LWG s changes to uniqueptr was fixed by Microsoftinternal MSVCPR This will be available in VS presumably Preview when that is released we should remove the workarounds in memory For example There are also workarounds in our devcrt test suite Description This fixes by unconditionally defining the default constructors In contrast to the paper the constructors do not utilize the explicit constructors as that seems to be against the common praxis of the STL Checklist Be sure youve read READMEmd and understand the scope of this repo If youre unsure about a box leave it unchecked A maintainer will help you x Identifiers in product code changes are properly Ugly as per or there are no product code changes The STL builds successfully and all tests have passed must be manually verified by an STL maintainer before automated testing is enabled on GitHub leave this unchecked for initial submission x These changes introduce no known ABI breaks adding members renaming members adding virtual functions changing whether a type is an aggregate or trivially copyable etc x These changes were written from scratch using only this repository the C Working Draft including any cited standards other WG papers excluding reference implementations outside of proposed standard wording and LWG issues as reference material If they were derived from a project thats already listed in NOTICEtxt thats fine but please mention it If they were derived from any other project including Boost and libc which are not yet listed in NOTICEtxt you must mention it here so we can determine whether the license is compatible and what else needs to be done 