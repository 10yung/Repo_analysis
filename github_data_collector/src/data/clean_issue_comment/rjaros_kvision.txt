Is it possible to add the Onsen UI framework to KVision as an optional dependency I dont mind creating the wrapper but Ive never done much with the virtual DOM in KVision I might need some pointers to get started or perhaps a suggestion on which existing dependency I could use as a template It looks like most of the functionality is in custom tags This is for our new mobile app that our team decided to use KVision for We need to keep it online so Electron is out of the question but still need it to look and feel like a mobile app Bootstrap styles are very cool but is possible in future some updates bringing Material Design to this project It might be very cool Thanks in advance How to configure kvision to compile into webassembly For example in Blazor is just working out of the box But kvision didnt mention anything about it which is outmoded Hello I am trying to run full stack template on GAE but without success I would appriciate help what needs to be done error What went wrong Project googleappenginestandard not found in root project templatefullstackktor Try Run with stacktrace option to get the stack trace Run with info or debug option to get more log output Run with scan to get full insights Get more help at Deprecated Gradle features were used in this build making it incompatible with Gradle Use warningmode all to show the individual deprecation warnings See build gradle import orgjetbrainskotlingradlefrontendKotlinFrontendExtension import orgjetbrainskotlingradlefrontendnpmNpmExtension import orgjetbrainskotlingradlefrontendwebpackWebPackExtension import orgjetbrainskotlingradlefrontendwebpackWebPackRunTask import orgjetbrainskotlingradletargetsjsnodejsNodeJsRootPlugin import orgjetbrainskotlingradletasksKotlin JsCompile import orgjetbrainskotlingradletasksKotlinJsDce import orgjetbrainskotlinirbackendjscompile buildscript extrasetproduction findPropertyprod findPropertyproduction false true dependencies classpathpltreksoftkvisiongradlepluginSystemgetPropertykvisionVersion classpathcomgooglecloudtoolsappenginegradleplugin classpath comgoogleappengineappengineSystemgetPropertyappengineVersion classpath comgoogleappengineappengineSystemgetPropertyappengineVersion plugins val kotlinVersion String by SystemgetProperties idkotlinxserialization version kotlinVersion idkotlinmultiplatform version kotlinVersion idkotlindcejs version kotlinVersion kotlinfrontend version SystemgetPropertyfrontendPluginVersion war appengine idcomgooglecloudtoolsappengine version SystemgetPropertyappenginePlugin applyplugin pltreksoftkvision version SNAPSHOT group comexample repositories mavenCentral jcenter maven url uri maven url uri maven url uri maven url uri maven url uri maven url uri Googles mirror of Maven Central mavenLocal Versions val kotlinVersion String by SystemgetProperties val ktorVersion String by project val exposedVersion String by project val hikariVersion String by project val h Version String by project val pgsqlVersion String by project val kweryVersion String by project val logbackVersion String by project val kvisionVersion String by SystemgetProperties val commonsCodecVersion String by project val jdbcNamedParametersVersion String by project Custom Properties val webDir filesrcfrontendMainweb val isProductionBuild projectextragetproduction as Boolean val mainClassName ioktorservernettyEngineMain kotlin jvmbackend compilationsall kotlinOptions jvmTarget jsfrontend compilationsall kotlinOptions moduleKind umd sourceMap isProductionBuild metaInfo true if isProductionBuild sourceMapEmbedSources always sourceSets getByNamecommonMain dependencies implementationkotlinstdlibcommon implementationpltreksoftkvisioncommontypeskvisionVersion implementationpltreksoftkvisioncommonremotekvisionVersion implementationpltreksoftkvisioncommonannotationskvisionVersion implementation comgoogleappengineappengineapi sdk implementation javaxservletjavaxservletapi implementation comgoogleappengineappenginejavasdk implementation comgoogleappenginearchetypesappenginestandardarchetype implementationcomgoogleappengineappengineSystemgetPropertyappengineVersion apicomgoogleappengineappengineSystemgetPropertyappengineVersion kotlinsrcDirbuildgeneratedsrccommon getByNamecommonTest dependencies implementationkotlintestcommon implementationkotlintestannotationscommon getByNamebackendMain dependencies implementationkotlinstdlibjdk implementationkotlinreflect implementationpltreksoftkvisionserverktorkvisionVersion implementationioktorktorservernettyktorVersion implementationioktorktorauthktorVersion implementationchqoslogbacklogbackclassiclogbackVersion implementationcomh databaseh h Version implementationorgjetbrainsexposedexposedexposedVersion implementationorgpostgresqlpostgresqlpgsqlVersion implementationcomzaxxerHikariCPhikariVersion implementationcommonscodeccommonscodeccommonsCodecVersion implementationcomaxiomalaskajdbcnamedparametersjdbcNamedParametersVersion implementationcomgithubandrewomakwerycorekweryVersion implementation comgoogleappengineappengineapi sdk apicomgoogleappengineappengineSystemgetPropertyappengineVersion getByNamebackendTest dependencies implementationkotlintest implementationkotlintestjunit getByNamefrontendMain resourcessrcDirwebDir dependencies implementationkotlinstdlibjs implementationpltreksoftkvisionkvisionVersion implementationpltreksoftkvisionbootstrapkvisionVersion implementationpltreksoftkvisionbootstrapcsskvisionVersion implementationpltreksoftkvisionbootstrapselectkvisionVersion implementationpltreksoftkvisionbootstrapdatetimekvisionVersion implementationpltreksoftkvisionbootstrapspinnerkvisionVersion implementationpltreksoftkvisionbootstrapuploadkvisionVersion implementationpltreksoftkvisionbootstrapdialogkvisionVersion implementationpltreksoftkvisionfontawesomekvisionVersion implementationpltreksoftkvisioni nkvisionVersion implementationpltreksoftkvisionrichtextkvisionVersion implementationpltreksoftkvisionhandlebarskvisionVersion implementationpltreksoftkvisiondatacontainerkvisionVersion implementationpltreksoftkvisionreduxkvisionVersion implementationpltreksoftkvisionchartkvisionVersion implementationpltreksoftkvisiontabulatorkvisionVersion implementationpltreksoftkvisionpacekvisionVersion implementationpltreksoftkvisionmomentkvisionVersion implementationpltreksoftkvisionremotekvisionVersion implementation comgoogleappengineappengineapi sdk apicomgoogleappengineappengineSystemgetPropertyappengineVersion kotlinsrcDirbuildgeneratedsrcfrontend getByNamefrontendTest dependencies implementationkotlintestjs ktor port mainClass mainClassName jvmOptions arrayOf workDir buildDir kotlinFrontend sourceMaps isProductionBuild npm devDependencypo json devDependencygrunt devDependencygruntpot webpackBundle bundleName main sourceMapEnabled false port proxyUrl contentPath webDir mode if isProductionBuild production else development definePRODUCTION isProductionBuild tasks withTypeKotlin JsCompile kotlinOptions moduleKind umd sourceMap isProductionBuild metaInfo true if isProductionBuild sourceMapEmbedSources always withTypeKotlinJsDce dceOptions devMode isProductionBuild inputspropertyproduction isProductionBuild doFirst destinationDirdeleteRecursively doLast copy filebuildDirnodemodulesimportedlistFilesforEach if itisDirectory itnamestartsWithkvision fromit includecss includeimg includejs intofilebuildDirpath kotlinjsminfrontendmain creategenerateGruntfile outputsfilebuildDirGruntfilejs doLast filebuildDirGruntfilejsrun writeText moduleexports function grunt gruntinitConfig pot options textdomain messages dest srcfrontendMainresourcesi n keywords tr ntr gettext ngettext encoding UTF files src srcfrontendMainkotlinkt expand true gruntloadNpmTasksgruntpot trimIndent creategeneratePotFile Execclass dependsOnnpminstall generateGruntfile workingDir filebuildDir executable NodeJsRootPluginapplyprojectnodeCommand argsbuildDirnodemodulesgruntbingrunt pot inputsfileskotlinsourceSets frontendMain kotlinfiles outputsfileprojectDirsrcfrontendMainresourcesi nmessagespot afterEvaluate tasks getByNamefrontendProcessResources Copyclass dependsOnnpminstall excludepot doLastConvert PO to JSON destinationDirwalkTopDownfilter itisFile itextension po forEach exec executable NodeJsRootPluginapplyprojectnodeCommand args buildDirnodemodulespo jsonbinpo json itabsolutePath itparentitnameWithoutExtensionjson f jed x printlnConverted itname to itnameWithoutExtensionjson itdelete getByNamewebpackrun WebPackRunTaskclass dependsOnfrontendMainClasses doFirst copy fromprojecttasks frontendProcessResources as CopydestinationDir intoprojecttasks processResources as CopydestinationDir getByNamewebpackbundle dependsOnfrontendMainClasses runDceFrontendKotlin doFirst copy fromprojecttasks frontendProcessResources as CopydestinationDir intoprojecttasks processResources as CopydestinationDir replacefrontendJar Jarclassapply dependsOnwebpackbundle group package archiveAppendixsetfrontend val from projecttasks webpackbundle outputsfiles webDir fromfrom intoassets inputsfilesfrom outputsfilearchiveFile manifest attributes mapOf ImplementationTitle to rootProjectname ImplementationGroup to rootProjectgroup ImplementationVersion to rootProjectversion Timestamp to SystemcurrentTimeMillis createfrontendZip Zipclass dependsOnwebpackbundle group package archiveAppendixsetfrontend destinationDirectorysetfilebuildDirlibs val from projecttasks webpackbundle outputsfiles webDir fromfrom inputsfilesfrom outputsfilearchiveFile getByNamebackendJargroup package replacejar Jarclassapply dependsOnfrontendJar backendJar group package manifest attributes mapOf ImplementationTitle to rootProjectname ImplementationGroup to rootProjectgroup ImplementationVersion to rootProjectversion Timestamp to SystemcurrentTimeMillis MainClass to mainClassName val dependencies configurations backendRuntimeClasspath filter itnameendsWithjar projecttasks backendJar outputsfiles projecttasks frontendJar outputsfiles dependenciesforEach if itisDirectory fromit else fromzipTreeit excludeMETAINFRSA METAINFSF METAINFDSA inputsfilesdependencies outputsfilearchiveFile createfrontendRun dependsOnwebpackrun group run createbackendRun dependsOnktorrun group run getByNamerun dependsOnfrontendRun backendRunappengineRun createfrontendStop dependsOnwebpackstop group run createbackendStop dependsOnktorstop group run getByNamestop dependsOnfrontendStop backendStop getByNamecompileKotlinBackend dependsOncompileKotlinMetadata getByNamecompileKotlinFrontend dependsOncompileKotlinMetadata fun KotlinFrontendExtensionwebpackBundleblock WebPackExtension Unit bundlewebpack delegateClosureOfblock fun KotlinFrontendExtensionnpmblock NpmExtension Unit configureblock settings gradle pluginManagement repositories mavenCentral gradlePluginPortal google jcenter maven url uri maven url uri maven url uri maven url uri mavenLocal resolutionStrategy eachPlugin when requestedidid kotlinmultiplatform useModuleorgjetbrainskotlinkotlingradlepluginrequestedversion requestedidid orgjetbrainskotlinfrontend useModuleorgjetbrainskotlinkotlinfrontendpluginrequestedversion requestedidid kotlinxserialization useModuleorgjetbrainskotlinkotlinserializationrequestedversion requestedidid kotlindcejs useModuleorgjetbrainskotlinkotlingradlepluginrequestedversion requestedidid comgooglecloudtoolsappengine useModulecomgooglecloudtoolsappenginegradlepluginrequestedversion rootProjectname templatefullstackktor gradle properties javaVersion kotlinincrementaljsfalse Plugins systemPropkotlinVersion systemPropfrontendPluginVersion serializationVersion systemPropappenginePlugin Dependencies systemPropkvisionVersion ktorVersion hikariVersion commonsCodecVersion jdbcNamedParametersVersion exposedVersion pac jVersion logbackVersion h Version pgsqlVersion kweryVersion systemPropappengineVersion Im creating one of my first websites to display data You can see the WIP page here Click the numbers on the left and use ctrl the up and down arrow keys to naviage Im wondering if there is a way to switch these images without the screen flickering and irritating peoples eyes This may be due to a lack of experience on my part or it may be an inherent limitation of kvision Probably the former and if so I apologize but I wasnt sure where else to ask this When you switch between subjects this code is eventually called to make the change this is called within a VPanel thats inside the tab kotlin inspectChildrenRetrieval constructs all the components and returns a ListWidget I was hoping this would reduce the flickering by preloading and preparing the images val hopefullyPrepped inspectChildrenRetrievalobj removes all children from the VPanel I see at the bottom of this the function refresh is called Perhaps this is bad for my situation Is there some way to avoid the refresh here to reduce visual flicker removeAll obviously the main flicker happens here when everything is added The images seem to appear at the wrong size and then quickly fix themselves How can I make them appear at the right size and location right away addAllhopefullyPrepped Is there currently any way to create something like an A HTML template that can be printed to pdf One way I have tried is to create a print template with kvision components and use the Printjs library to transform it into a pdf but I cant seem to translate the inline style elements from kvision to show up on the final print off Any idea how I can do this There could also be a jQuery print plugin that might make it easier designing a print off in kvision is very easy just need a way to translate it to a pdf with styles intact Currently Im struggling to setup my local environment for KVision framework development and testing A short contributors guide would be most useful Hi Im opening this issue to get feedback about some development decisions Im going to drop dependency on kotlinobservablejs project which seems to be over complicated and constantly causes errors in my IntelliJ IDE Ive created a new ObservableList implementation which is already pushed to master Its very simple implementation backed by standard MutableMap which seems to be stable and efficient This new implementation will be used in DataContainer and Tabulator components from the next release All projects using comlightningkitekotlinobservablelistObservableList would need to migrate to a new class If someone has problems with this change let me know As far as I could see in the examples all HTML rendering is done on the clientside Thats ok for internal apps But I would be interested in using kvision for a public website which would highly benefit from SSR because SEO and speed Do you think its possible to do SSR with kvision Do you have ideas about what would be needed to implement it And while were at it code splitting for the css would be great too to improve initial page loadrender I think this would be great enhancements to kvision whats your opinion on this I want to write feedback as a user who used the framework maybe you need it It is a framework that can have great skills in the future as I think perhaps will compete with Vaadin Its a good thing you support him It would be very good to have documentation with live examples no only code such as within the yested framework see here which is also written on kotlin you can directly see the code and what UI it generates in the same place it will be very nice Thank you for attention