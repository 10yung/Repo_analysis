 Tips please read the style guide before submitting your patch docsstyleguidemd docsstyleguidemd commit message titles must be in the form topic Capitalized message with no trailing period or topic topic Capitalized message with no trailing period golang code must be formatted according to the standard please run make gofmt formats the entire project correctly or format a single golang file correctly gofmt w yourcodego please rebase your patch against current git master git checkout master git pull origin master git checkout yourfeature git rebase master git push yourremote yourfeature hub pullrequest or submit with the github web ui after a patch review please ping purpleidea so we know to rereview make changes based on reviews git add p add new changes git commit amend combine with existing commit git push yourremote yourfeature f now ping purpleidea in the github PR since it doesnt notify us automatically Thanks for contributing to mgmt and welcome to the team I think it would be great for mgmt community and Debian users to have mgmt in the Debian archive because then it can be easily installed with apt install mgmt This would probably increase testing and adoption of mgmt and make users like me happy because wed get cryptographic verification of the binaries and no extra work would be needed to have mgmt running on Debian systems Another benefit is wed also get the package into Ubuntu without any extra effort One possible workflow to get this done is Coordinate with current package maintainer check if he already has plans for this ping aequitas Create an ITP in the Debian bug tracking system Review the current package with regards to Debian Go Packaging Team standards Review the state of mgmt Go dependencies in Debian Recurse these very same steps into them Coordinate the upload with Debian Go Packaging Team to upload the package Depending on the state of dependencies packaging we might have enough time to get this into the next Debian stable version codename bullseye which should be released in I am willing to help with this if this is something this community is interested in doing Resources should be able to export constants which would be made available in the language Perhaps under some global constresfilestateexists type namespace Naming TBD In addition we may want to consider also telling the user about the defaults Not sure if its very important though That idea came from here Relevant text blockquote Default values A simpler subset of this problem is one of specifying the default value for a particular param If we have a way to undef a parameter then omitting it that way is a simple way to cause the default value to be used If it turns out that we want to actually know those values then it would be relatively easy to export a constresfilemode type variable which contains the default value for the mode for the file resource Other constants could also be exported blockquote Tips please read the style guide before submitting your patch docsstyleguidemd docsstyleguidemd commit message titles must be in the form topic Capitalized message with no trailing period or topic topic Capitalized message with no trailing period golang code must be formatted according to the standard please run make gofmt formats the entire project correctly or format a single golang file correctly gofmt w yourcodego please rebase your patch against current git master git checkout master git pull origin master git checkout yourfeature git rebase master git push yourremote yourfeature hub pullrequest or submit with the github web ui after a patch review please ping purpleidea so we know to rereview make changes based on reviews git add p add new changes git commit amend combine with existing commit git push yourremote yourfeature f now ping purpleidea in the github PR since it doesnt notify us automatically Thanks for contributing to mgmt and welcome to the team Basically were in the DAG so make sure weve let all the other resources like files get built that might be used for the file server before the server sends anything out We could either block or just not return anything yet As an aside does the rfReadFrom bit not get cancelled properly on close Versions mgmt version g a d dirty Ubuntu LTS go version go linuxamd Description When creating an exec resource in mcl if the same field is defined more than once it is not immediately prohibited This causes errors down the line Here is a simple example file to demonstrate exec exec shell binbash ifcmd bintrue ifshell binbash cmd usrbinenv cmd usrbin running this example produces the following output I cli lang lexingparsing I cli lang init I cli lang interpolating I cli lang building scope I cli lang running type unification I cli lang input exampleslangexecduplicatefieldmcl I cli lang tree execduplicatefieldmcl metadatayaml This is mgmt version g a d dirty Copyright C James Shubin and the project contributors Written by James Shubin jamesshubinca and the project contributors main start main warning working prefix directory is temporary main working prefix is tmpmgmtcompy PGP Created key CD B main no seeds specified etcd running etcd watching chooser etcd bootstrapping etcd nominated compy etcd waiting for server etcd server runServer newClustertrue compy etcd server starting etcd server ready etcd connect etcd connected etcd chooser set dynamic cluster size to etcd watching nominees etcd nominated compy etcd watching volunteers etcd volunteering etcd watching endpoints main etcd is ready main waiting etcd volunteers compy etcd chooser compy etcd chooser result main running main waiting gapi generating new graph gapi swap gapi lang lexingparsing etcd volunteers compy etcd chooser compy etcd chooser result gapi lang init gapi lang interpolating gapi lang building scope gapi lang running type unification gapi lang building function graph gapi lang function engine initializing gapi lang function engine validating gapi lang function engine starting gapi lang stream gapi lang loop gapi lang funcs func strbintrue started gapi lang funcs func strusrbin started gapi lang funcs func strbinbash started gapi lang funcs func strbintrue changed gapi lang funcs func strbintrue stopped gapi lang funcs func strbinbash started gapi lang funcs func strusrbinenv started gapi lang funcs func strbinbash changed gapi lang funcs func strexec started gapi lang funcs func strusrbin changed gapi lang funcs func strusrbin stopped gapi lang funcs func strbinbash stopped gapi lang funcs func strexec changed gapi lang funcs func strexec stopped gapi lang funcs func strbinbash changed gapi lang funcs func strbinbash stopped gapi lang funcs func strusrbinenv changed gapi lang funcs func strusrbinenv stopped gapi generating new graph gapi generating new graph gapi lang running interpret engine autoedge adding autoedges engine autogroup algorithm wrappedGrouper NonReachabilityGrouper main commit engine graph sync main graph Vertices Edges main waiting gapi lang running interpret engine autoedge adding autoedges engine autogroup algorithm wrappedGrouper NonReachabilityGrouper engine Workerexec exec main commit engine graph sync main graph Vertices Edges main waiting engine Watchexec exec engine exec exec CheckApplytrue engine exec exec resource ifcmd output is empty engine exec exec resource Apply engine exec exec CheckApplytrue Returnfalse exit status cmd error exit status githubcompurpleideamgmtutilerrwrapWrapf homeusergosrcgithubcompurpleideamgmtutilerrwraperrwrapgo githubcompurpleideamgmtengineresourcesExecResCheckApply homeusergosrcgithubcompurpleideamgmtengineresourcesexecgo githubcompurpleideamgmtenginegraphEngineProcess homeusergosrcgithubcompurpleideamgmtenginegraphactionsgo githubcompurpleideamgmtenginegraphEngineWorker homeusergosrcgithubcompurpleideamgmtenginegraphactionsgo githubcompurpleideamgmtenginegraphEngineCommitfunc homeusergosrcgithubcompurpleideamgmtenginegraphenginego runtimegoexit usrlocalgosrcruntimeasmamd s engine Watchexec exec Exitednil engine Workerexec exec Exitedexit status cmd error exit status githubcompurpleideamgmtutilerrwrapWrapf homeusergosrcgithubcompurpleideamgmtutilerrwraperrwrapgo githubcompurpleideamgmtengineresourcesExecResCheckApply homeusergosrcgithubcompurpleideamgmtengineresourcesexecgo githubcompurpleideamgmtenginegraphEngineProcess homeusergosrcgithubcompurpleideamgmtenginegraphactionsgo githubcompurpleideamgmtenginegraphEngineWorker homeusergosrcgithubcompurpleideamgmtenginegraphactionsgo githubcompurpleideamgmtenginegraphEngineCommitfunc homeusergosrcgithubcompurpleideamgmtenginegraphenginego runtimegoexit usrlocalgosrcruntimeasmamd s error during Process githubcompurpleideamgmtutilerrwrapWrapf homeusergosrcgithubcompurpleideamgmtutilerrwraperrwrapgo githubcompurpleideamgmtenginegraphEngineProcess homeusergosrcgithubcompurpleideamgmtenginegraphactionsgo githubcompurpleideamgmtenginegraphEngineWorker homeusergosrcgithubcompurpleideamgmtenginegraphactionsgo githubcompurpleideamgmtenginegraphEngineCommitfunc homeusergosrcgithubcompurpleideamgmtenginegraphenginego runtimegoexit usrlocalgosrcruntimeasmamd s This is a very basic non functioning port to OpenBSD current related to issue Before trying to build you will need to install the following dependencies pkgadd go pkgadd augeas pkgadd ruby I am unsure of the importance of the ruby dependency but follow their respective pkgreadmes to set them up The following list of go packages should all be installed but Im not yet sure if some of these are optional go get pkg githubcomawsawssdkgoaws githubcomawsawssdkgoawsawserr githubcomawsawssdkgoawsrequest githubcomawsawssdkgoawssession githubcomawsawssdkgoservicecloudwatchevents githubcomawsawssdkgoserviceec githubcomawsawssdkgoservicesns githubcomcoreosbbolt githubcomcoreosgosemversemver githubcomcoreosgosystemddbus githubcomcoreosgosystemdjournal githubcomcoreosgosystemdmachine githubcomcoreosgosystemdunit githubcomcoreosgosystemdutil githubcomcoreospkgcapnslog githubcomdeniswernertgofstab githubcomdgrijalvajwtgo githubcomghodssyaml githubcomgodbusdbus githubcomgogoprotobufgogoproto githubcomgogoprotobufproto githubcomgolangprotobufjsonpb githubcomgolangprotobufproto githubcomgolangprotobufptypes githubcomgooglebtree githubcomhashicorpconsulapi githubcomhashicorpgomultierror githubcomhashicorphil githubcomhashicorphilast githubcomiancolemanstrcase githubcomjonboulleclockwork githubcompbormanuuid githubcompkgerrors githubcomprometheusclientgolangprometheus githubcomprometheusclientgolangprometheuspromhttp githubcomsoheilhycmux githubcomspf afero githubcomtmcgrpcwebsocketproxywsproxy githubcomurfavecli githubcomvishvanandanetlink githubcomxiang probing gouberorgzap golangorgxcryptobcrypt golangorgxcryptoopenpgp golangorgxcryptoopenpgppacket golangorgxnetcontext golangorgxnethttp golangorgxnethttp hpack golangorgxnettrace golangorgxsysunix golangorgxtimerate googlegolangorggenprotogoogleapisrpcstatus gopkginsrcdgogitv gopkginyamlv Afterwards you can try a build with GOTAGSnovirt nodocker gmake build Fair warning though this does not work yet The dependency stuff could be moved over to the make deps step but Im unsure this works well with OpenBSD porting guidelines and I might need to make separate ports for every dependency I will have to look at other ports of go projects Finally its probably not a good idea to hardcode the path for bash in mischeadersh but Ill cross that bridge later Tips please read the style guide before submitting your patch docsstyleguidemd docsstyleguidemd commit message titles must be in the form topic Capitalized message with no trailing period or topic topic Capitalized message with no trailing period golang code must be formatted according to the standard please run make gofmt formats the entire project correctly or format a single golang file correctly gofmt w yourcodego please rebase your patch against current git master git checkout master git pull origin master git checkout yourfeature git rebase master git push yourremote yourfeature hub pullrequest or submit with the github web ui after a patch review please ping purpleidea so we know to rereview make changes based on reviews git add p add new changes git commit amend combine with existing commit git push yourremote yourfeature f now ping purpleidea in the github PR since it doesnt notify us automatically Thanks for contributing to mgmt and welcome to the team I would really love to see git modules go away in favour of golang modules I am trying to build mgmt inside customer infra and will have to maintain an internal fork of mgmt with modules to be able to build it Go modules enable more reproducible builds and they are pushed by golang upstream we should use them Tips please read the style guide before submitting your patch docsstyleguidemd docsstyleguidemd commit message titles must be in the form topic Capitalized message with no trailing period or topic topic Capitalized message with no trailing period golang code must be formatted according to the standard please run make gofmt formats the entire project correctly or format a single golang file correctly gofmt w yourcodego please rebase your patch against current git master git checkout master git pull origin master git checkout yourfeature git rebase master git push yourremote yourfeature hub pullrequest or submit with the github web ui after a patch review please ping purpleidea so we know to rereview make changes based on reviews git add p add new changes git commit amend combine with existing commit git push yourremote yourfeature f now ping purpleidea in the github PR since it doesnt notify us automatically Thanks for contributing to mgmt and welcome to the team Versions mgmt version eg mgmt version git master operating systemdistribution eg uname a OpenBSD GENERICMP amd golang version eg go version go version go openbsdamd Description Id like to create a port of mgmt for OpenBSD 