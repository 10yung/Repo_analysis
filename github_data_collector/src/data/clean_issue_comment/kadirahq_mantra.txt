 have a meteor v app with react But I have a problem with the composeWithTracker function This function have been taken off reactkomposer used by storybook but is still declared in distindex So I have a question How could I send data from my containers to my components Need help please When I do this in my container with import useDeps composeWithTracker composeAll from export const classeComposer context onData const Meteor FlowRouter Collections context if Meteorsubscribeclasseslistready const lesClasses CollectionsClassesfind fields id code nbrePlaces sort code nbrePlaces fetch const nbreClasses CollectionsClassesfindcount onDatanull lesClasses nbreClasses else onData export const classeMapper context actions addclasse actionsclassesaddclasse updateclasse actionsclassesupdateclasse deleteclasse actionsclassesdeleteclasse context context export default component composeAll composeWithTrackerclasseComposer useDepsclasseMapper component I have this error in my consol Uncaught in promise TypeError composeWithTracker is not a function at eval importsmodulescorecontainersClassesjs at Routecallee at tryCatch at Generatorinvoke as invoke at Generatorprototypeanonymous function as next at tryCatch at invoke at at at Need help please I would like to clarify for myself the meaning of module termin related to Mantra Does module represent single viewpage or does it represent collection of pages related to each other with common sense One way or another there is some problems i feel in design concept Example module represent a single pageview So if i add a custom accounts management to the project i end up with modules just for this one purpose userList userAdd userEdit I see a problem in this as module should represent one concept like it does in Django for example Example module represent a several pagesviews In this case userList userAdd and userEdit view are gathered up in one module that is seems correct for me But all actionscomponentsconteiners from all this pagesviews are ending up in one directory Sometimes its really hard to tell which component belongs to specific view I tried to create a subdirectories for each view but this approach has a bottleneck in how Mantra handles actions I cannot have an action defined as viewInsideModule component cmpAction I think it may be related to It would be nice to have ndeep tree of actions That would allow any kind of namespacing permodule or perview inside the module js class MyComponent extends ReactComponent dataINeed return thisstate const MyComponentContainer composeAll composeWithTrackercomposer useDepsmapper ExamQuestion const MainComponent return div MyComponent refc consolelogcdataINeed MyComponentContainer how to get components REF div Example of actions format is given here This lays out the following format for actions actions myNamespace doSomething context arg This is ok however it would be much better to namespace the actions by the module instead When dealing with a lot of actions within many modules Id much rather have this format actions myModule myNamespace doSomething context arg For example given this layout currently modulescoreactions indexjs foojs barjs modulesfooactions indexjs foojs Since actions are not namespaced per module its very easy to overwrite and cross bounds of other files Right now calling actionsfoosetTitle with the above structure leads to a lot of problems This leads one to currently do the following modulescoreactions indexjs coreFoojs coreBarjs modulesfooactions indexjs fooFoojs This properly resolves the ambiguity problem because now I can call actionscoreFoosetTitle and actionsfooFoosetTitle and I know which one Im calling however this is not DRY It would be much better to be able to have this layout modulescoreactions indexjs foojs barjs modulesfooactions indexjs foojs and properly modulenamespace as follows actions core foo setTitle context arg So then the action can be called with actionscorefoosetTitle and actionsfoofoosetTitle I know its been fairly settled on using all lowercase naming conventions with an underscore to separate words per I think this is ok for regular files However Ive used both formats and this format PascalCase feels far more intuitive specifically for react components Id like to know others thoughts on this and why In the current mantra spec it is recommended to define the methods in the server and then again to define a method stub in the client to benefit from the optimistic UI But this results in a lot of code replication Wouldnt be better to define the methods in lib or common code as it is suggested by the guide I have been working with Mantrajs for awhile and I love it Great work all around There is an issue I have been facing that seems to be exclusive to Google Chrome on android firefox safari or others work fine Chrome works fine on iOS and any browser works fine on desktop When I scroll up and down the page the site keeps rerendering everything and it makes it unusable No where in my code do I explicitly specify when to rerender It is odd because unless it is Chrome on Android it works perfectly and makes it seem like this is an odd bug Has anyone run into this issue Does anyone have any suggestions Is there something about Android Chrome that I need to know about Thanks in advance Tim In the specs at State Management the bullet point with MeteorMiniMongo Remote Statesuggests that MeteorMiniMongo is a Remote State However MeteorMiniMongo is located at the client and therefore a Local State And yes in most of the use cases MiniMongo is connected with a real Mongo database on a server but that is not mandatory Since is out of beta I updated the link to point to the Meteor announcement sungwoncho started working on a linter for Mantra I think this will help us to write better Mantra code Heres the project We can discuss about this here 