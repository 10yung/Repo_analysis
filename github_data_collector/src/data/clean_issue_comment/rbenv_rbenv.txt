Originally posted by mislav in I have recently started a new Mac running Catalina with zsh In a new project gem install budler returns You dont have write permissions for the LibraryRubyGems directory Please offer any help for this problem or allow me to clarify if you need further information Thanks I run gem env home LibraryRubyGems I run rbenv global system I run rbenv shell rbenv no shellspecific version configured I run rbenv init export PATHUserstheresamarquisrbenvshimsPATH export RBENVSHELLzsh source usrlocalCellarrbenv libexeccompletionsrbenvzsh command rbenv rehash devnull rbenv local command command if gt then shift fi case command in rehashshell eval rbenv shcommand command rbenv command esac I run echo PATH Userstheresamarquisrbenvshims Userstheresamarquisrbenvbin Userstheresamarquisrbenvshims Userstheresamarquisrbenvbin usrlocalbin usrbin bin usrsbin sbin ApplicationsPostgresappContentsVersionslatestbin Userstheresamarquisrbenvbin Userstheresamarquisrbenvshims I look at etcpaths usrlocalbin usrbin bin usrsbin sbin Running rbenvdoctor with curl fsSL bash returns Checking for rbenv in PATH usrlocalbinrbenv Checking for rbenv shims in PATH OK Checking rbenv install support usrlocalbinrbenvinstall rubybuild Counting installed Ruby versions versions Checking RubyGems settings OK Auditing installed plugins OK zshrc contains source HOMEzshenv export RUBYCONFIGUREOPTSwithopenssldirbrew prefix openssl export PATHHOMErbenvbinPATH eval rbenv init zshenv contains export PATHHOMErbenvbinPATH I have setup rbenv according to the documentation on a fresh CentOS machine The result is that the installation does not work ruby is not found regardless of me adding it as local or global I finally found out that the shims directory never makes it to the path and therefore executed echo export PATHHOMErbenvshimsPATH bashprofile which made the stuff work I am unsure whether the installer or rbenv init should do this or the documentation is lacking this step There might be tools interested in the original path This was included in but closed for other reasons Do you think it makes sense to provide the original PATH in a separate variable Not sure if anyone else has encountered this already with serving ruby app I am trying to serve an app that uses ruby I get the following from terminal rails server Traceback most recent call last from binrails in main from binrails in load from UserstiffanyloCHAYNSoulMedicinesoulmedicinebinspring in top required from Userstiffanylorbenvversions libruby rubygemscoreextkernelrequirerb in require Userstiffanylorbenvversions libruby rubygemscoreextkernelrequirerb in require cannot load such file bundler LoadError Makes rbenv look for Ruby installations in both rbenvversions as well as in RBENVSYSTEMVERSIONSDIR if set This allows installing Ruby versions in a systemwide manner thats available to all users on the system When SHELLOPTS is exportedset when bash starts up it will use settings from there A common use case might be to exportuse it for xtrace but that should not cause errors inside of rbenvpyenv for things like n FOO Ref Ref This PR Buffers the help output so that it is printed all at once rather than a scrolled output L requires a trailing space after a newline otherwise bash strips newlines when strings are psuedoreturned from a function Prior unbuffered rbenvunbuffered Buffered rbenvbuffered Just to get the ball rolling Its a bad convention Im not a dev on this project just a user Recent conversation on this topic I successfully just used RBENVROOT to install rbenv in another location so I assume it wouldnt be a big deal technically to change it by default to something more sane rbenvversionfile which rbenvversion uses indirectly by way of rbenvversionname and rbenvversionorigin by default does its file lookup starting from RBENVDIR and works up the hierarchy falling back to PWD though RBENVDIR itself is defaulted to PWD by rbenv if not already set in the environment so in most cases the fallback is a noop However rbenvlocal explicitly forces the file lookup to only look from PWD ignoring RBENVDIR entirely This leads to some dissonance in certain scenarios Given pwd tmp cat tmpfoorubyversion export RBENVDIRtmpfoo rbenv version set by tmpfoorubyversion rbenv local rbenv no local version configured for this directory So rbenvversion and thus the rbenv itself when invoking a shim considers the version to be set by a local file in the RBENVDIR hierarchy but rbenvlocal reports no local version set Further attempting to rbenvlocal unset would be a noop and would not delete the rubyversion file found in RBENVDIR which is rather confusing I would expect rbenv version to be determined by the global version file immediately after rbenv local unset not continue to be determined by a local file The same inconsistency pertains to overwriting a local version or even creating one I traced through some history as it pertains to this behavior Initially rbenv would read from PWD and up rbenvlocal would only readwritedelete the file directly in PWD Later aeda f d fb f c d a f introduced RBENVDIR such that rbenvversion would respect a specified directory other than PWD rbenvlocal still ignored RBENVDIR Later still c fb ffd ff d e f eaf e d e added PWD as a fallback for RBENVDIR rbenvlocal still ignored RBENVDIR ca ffbb a a a a d eeccde prepared rbenvversionfile such that rbenvlocal could leverage it then ba adcb a c df a afccdca a changed rbenvlocal to use rbenvversionfile for the local file lookup This commit changed rbenvlocal behavior to respect files found in the hierarchy not only immediately in PWD However it still only uses PWD for the lookup So it seems that from the very introduction of RBENVDIR it wasnt respected consistently by rbenvs subcommands However each subsequent change reduced the dissonance somewhat first adding PWD as a fallback for RBENVDIR and later ensuring rbenvlocal would look up the directory hierarchy just as rbenvversion did The only remaining inconsistency is that rbenvlocal doesnt respect RBENVDIR at all if set Is this agreed to be a bug and PR welcomed Im on Ubuntu and use Bash When I followed step of Basic Github Checkout in README I executed both a step for Bash and for Ubuntu Desktop That caused the appearance of bashprofile which isnt sourced by default in the shell So when I executed rbenv init I was advised to append a line to bashprofile because it existed That didnt help as the file wasnt sourced It looks like quite many users also had such issue Perhaps step should clarify that appending a line to bashprofile on Ubuntu isnt needed Also it may be good to improve a detection logic in rbenv init to check if bashprofile is sourced