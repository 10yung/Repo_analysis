Increase the size passed to strncat by to silence gcc warning The increased value is accounted for the NULL terminator This change wont change anything at runtime since strncat will append that if size of dst is reached but is not found It appears that this functionality was not fully implemented Thus code generation always failed when trying to use QRinputsetFNC First Signedoffby R diger Ihle rihlestde In splitc there is such a function static int SplitsplitStringconst char string QRinput inputQRencodeMode hint int length QRencodeMode mode ifstring return mode SplitidentifyModestring hint ifmode QRMODENUM length SpliteatNumstring input hint else ifmode QRMODEAN length SpliteatAnstring input hint else ifmode QRMODEKANJI hint QRMODEKANJI length SpliteatKanjistring input hint else length Spliteat string input hint iflength return iflength return return SplitsplitString string length input hintRepeated caller There is a problem here When I transplanted the code onto MCU I caused a stack overflow Many people make the code run by modifying the stack size at the expense of SRAM space However I later found that it would be no problem to modify this function to the following static int SplitsplitStringconst char string QRinput inputQRencodeMode hint int length QRencodeMode mode whilestring mode SplitidentifyModestring hint ifmode QRMODENUM length SpliteatNumstring input hint else ifmode QRMODEAN length SpliteatAnstring input hint else ifmode QRMODEKANJI hint QRMODEKANJI length SpliteatKanjistring input hint else length Spliteat string input hint iflength return iflength return string string length length return In this way even if the stack size does not need to be increased it can run normally This may be better Coverity complains of the follow line Line else ifentrysize words val unsigned intentrydata words val unsigned intentrydata words BitStreamappendNumbstream val ifret return here MediumUnchecked return valueCHECKEDRETURN CWE Value returned from a function is not checked for errors before being used Calling BitStreamappendNum without checking return value as is done elsewhere out of times Im curious whether we should check this BitStreamappendNum result or not Thanks I love the fact that I can make a qr code with the qrencode command line utility with t UTF that I can save as a text file and open in eg Notepad in Windows which displays the code The only problem is that the default color scheme of Notepad is black text on a white background That means in order for the code to scan I have to select the text Please add an option so the code will be generated to use dark text on a light background thanks we successfully encoded a qrcode using the given c code but how can i decode a qrcode using the same I was trying to install and compile libqrencode by following the instructions in FUKUCHI Kentaros web with CygWin pages When I proceeded to the step Now you are ready to compile the library and tool Type the following commands configure make sudo make install sudo ldconfig I typed configure in the command line but got remarks as following configure checking build system type x unknowncygwin checking host system type x unknowncygwin checking target system type x unknowncygwin checking for a BSDcompatible install usrbininstall c checking whether build environment is sane yes checking for a threadsafe mkdir p usrbinmkdir p checking for gawk gawk checking whether make sets MAKE no checking whether make supports nested variables no checking for style of include used by make none checking for gcc no checking for cc no checking for clexe clexe checking whether the C compiler works yes checking for C compiler default output file name conftestexe checking for suffix of executables exe checking whether we are cross compiling no checking for suffix of object files obj checking whether we are using the GNU C compiler no checking whether clexe accepts g yes checking for clexe option to accept ISO C none needed checking whether clexe understands c and o together no checking dependency style of cygdrivecUsersAdministratorDesktoplibqrencodemasterusecompile clexe none checking for an ANSI Cconforming const yes checking for inline inline checking how to run the C preprocessor cygdrivecUsersAdministratorDesktoplibqrencodemasterusecompile clexe E checking for grep that handles long lines and e usrbingrep checking for egrep usrbingrep E checking for ANSI C header files yes checking how to print strings printf checking for a sed that does not truncate output usrbinsed checking for fgrep usrbingrep F checking for nonGNU ld no configure error no acceptable ld found in PATH How could I fix this problem Thanks I originally was going to implement these but turns out they already exist So this simply documents them XPM is supposed to be a valid C syntax but the output of qrencode doesnt parse qrencode M v t XPM xc cc c xc xc error expected identifier or before string constant BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB xc error expected identifier or before string constant BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB xc error expected identifier or before string constant BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB Looking at the bottom of the output we can see that the trailing brace and semicolon are repeated XPM static const char const qrcodexpm width height ncolors charsperpixel colors F c B c ffffff pixels BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB snipped lines BBBBBBFFFFFFFFFBBBFFFBBBFFFFFFFFFFFFFFFBBBBBB BBBBBBFFFFFFFFFBBBFFFBBBFFFFFFFFFFFFFFFBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB proposal Fix to not search getopth or sys timeh when building only static libraries Now you can build with MSVC changes checkincludefilegetopth HAVEGETOPTH is invoked when WITHTOOLS option is ON checkincludefilesystimeh HAVESYSTIMEH is invoked when WITHTEST option is ON