Afaics there is currently no support for setting the SameSite attribute for cookies in http k Would be nice to have a dedicated method for that and probably add the three options None Strict and Lax as an enum Id even go so far and make Lax the default for Cookies as recommended in Would love to know your opinion on that Receiving the following headers and body as a response Im not able to parse the parts Exception thrown orghttp kmultipartParseError no name for part Headers received HTTP OK Date Fri Dec GMT ContentType multipartformdata boundaryofz Oi n E F IC sf bcHAX sy TransferEncoding chunked Connection keepalive YTroOptapiRequestid ofz Oi n E F IC sf bcHAX sy StrictTransportSecurity maxage includeSubDomains Server trorisalve Body received ofz Oi n E F IC sf bcHAX sy ContentDisposition attachment namevalues ContentType textcsv ABC A A ofz Oi n E F IC sf bcHAX sy ContentDisposition attachment namelogs ContentType applicationxndjson levelinfotime messageStarting build e d master with run id pid threadid levelinfotime messageReading input from stdinpid threadid ofz Oi n E F IC sf bcHAX sy The exception is thrown in StreamingMultipartFormsPartkt val contentDisposition ParameterParserparseheaders ContentDisposition val fieldName if contentDispositioncontainsKeyattachment mixedName else trimcontentDisposition name throw ParseErrorno name for part mixedName is null and should probably only be used within a multipartmixed context if I read the code correctly Call site code val client ApacheClient val response clientrequest val multipart MultipartFormBodyfromresponse printlnmultipart boundary multipartboundary http k version Seems like the below code will always default to null unless an asterisk is provided Am I misunderstanding it This code would return a null for the origins header ServerFiltersCorsCorsPolicyheaders listOfcontenttype query methods listOfMethodGET MethodPOST MethodPUT MethodDELETE MethodOPTIONS MethodTRACE MethodPATCH MethodPURGE MethodHEAD origins listOflocalhost mydomaincom object Cors private fun ListStringjoined joinToString operator fun invokepolicy CorsPolicy Filter next val response if itmethod OPTIONS ResponseOK else nextit val origin itheaderOrigin val allowedOrigin when policyoriginscontains policyoriginscontainsorigin origin else null responsewith Headerrequiredaccesscontrolalloworigin of allowedOrigin Headerrequiredaccesscontrolallowheaders of policyheadersjoined Headerrequiredaccesscontrolallowmethods of policymethodsmap itname joined Its common for teams to use a common serialisation approach with a core set of data classes kotlinxserialization can do a lot of the things that we need Investigate ways to use this library as the serialisationdeserialisation method for things like JSON CBOR Protobufs and Avro http k already supports Zipkin traces It would be useful to support other distributed tracing services like AWS XRay another one well take a look at pushing a pr to you for this one with normal routes you do a regex matcher on the path but for resources you do string starts with that means that you cant use wildcards as theres no regex handling but also if you have multiple routes at different levels you might have the wrong ones catch the wrong resource say uidata and ui routes would both match for a resource at uidata though if you put them in the wrong order youre a numpty anyway the issue were seeing is we want the resource route to support the wildcards as an example we build our ui via react but package it as a single page js into the server rather than run a node server just for the ui so were trying to mirror the wildcard support in react router to pass the server routes through to react The line in question if in orghttp kroutinginternalkt line obviously theres others matches you use to fallback to indexhtml so well see what comes out but thats the area were looking into not sure if thats something youre already looking at as well though thanks In trying to add a catch all using the http k routing but am struggling From what I can see aggregate routing http handler had the catch all already in the form of the not found handler Param but the ability to set that is not exposed at least from what I can see maybe Im missing a component Is there any chance of adding an additional method to routingkt to pass in my own not found catch all handler please V of the WebDriver uses some deprecated By implementations This PR upgrades to the new API which is more restrictive as we are backed by JSoup and hence only support CSS search and not Xpath Implements a new set of By implementations which hang off of the orghttp kwebdriverBy object Future implementations of By can be attached to that object Due to JSoup not implementing some lookups we suspect that no current users of the module will be broken apart from reimporting the correct By class but want to make sure so sending to contributors for possible clarification although those implementations will break with V of selenium anyway as the APIs are being removed quii gypsydave jshiell We are blocked on this Love http k Please consider supporting our collective Pretty much as the title says doesnt look like its supported Im taking a look and seeing if I can put together a PR