For compatibility reasons therere certain bugs that we have to leave to the next hardfork to fix However those bugs especially VM bugs might lead to surprising unexpected behaviors This change adds a new checker that checks against newly created cells for scripts with bugs and reject those transaction when we can This way we can alert users about the bugs as early as we can Ease developing a node directly integrated into CKB P P network See the requirement from This RPC requires user to create the index first None Learned from HTTP Response use StatusCode to indicate the result of syncoperation try to replace original ResultT futureError More detail Mostly changes are generated by moleculec The core idea is to introduce a HeaderContext used in the POWVerifier context to allow us to put a signature The HeaderContextType has two kinds NoneContext the HeaderContext only contains header itself Cellbase the HeaderContext need cellbase tx as its context The core logic of poa TODO more testsync relay poa blocks miner support mine POA block Purpose Replace the JSONRPC method getcellbaseoutputcapacitydetails Reasons Remove the Ambiguity Secondary Issuance According to CKB RFC Then of the secondary issuance goes to the miners of the issuance goes to the NervosDAO to be distributed to the locked tokens proportionally Only of the secondary issuance goes to the miners But we cant see it from the response of getcellbaseoutputcapacitydetails Transaction Fees According to CKB v Code rust Miner get txfee of tx fee for tx commitment Be careful of the rounding txfee of tx fee is different from of tx fee pub fn txsfees self target HeaderView ResultCapacity Error omitted Earliest proposer get of tx fee as reward when tx committed omitted pub fn proposalreward self parent HeaderView target HeaderView ResultCapacity Error omitted The transaction fees which paid to miner is not same as the total transaction fee of all transactions in the mined block The txfee in getcellbaseoutputcapacitydetails is only about of total transaction fee in the mined block And transaction fees in miner reward have two part committed feereward and proposal feereward Help for Doing Statistics Currently there is no interface can query total issuance of a block Currently there is no interface can query total transaction fee of a block Simplify the Usage Currently if we want to know which miner mined blockN and how many rewards he received for blockN we have to use a magic number its a bit obscure and reading the source code is the only way to get it and call JSONRPC times rust pseudocode let miner rpc getblockhashN maphash rpcgetblockhashcellbasewitnessparseminer unwrap let reward rpc getblockhashN maphash rpcgetcellbaseoutputcapacitydetailshash unwrap The new JSONRPC method will hide the magic number and return the block hash which finalized the miner reward rust pseudocode let hash rpcgetblockhashNunwrap let miner rpcgetblockhashcellbasewitnessparseminerunwrap let reward rpcgetblockeconomicstatehashunwrap Further Currently the Transaction Fee on the ckb explorer is the sum of committed reward and proposal reward in miner reward of a block not the total transaction fee of all transactions in that block Its really hard to understand the Transaction Fee for newbies For example block on mainnet has no proposal transaction and total transaction fee of it is CKB but the Transaction Fee on the ckb explorer is CKB block on mainnet has no transaction expect cellbase but the Transaction Fee on the ckb explorer is CKB I think we should unify the names And I didnt find any description about how to partition the total transaction fee of all transactions in a block into committed feereward and proposal feereward in CKB RFCs Did I miss it getcellbaseoutputcapacitydetails For example client may want to know minfeerate These infos can be added to the method txpoolinfo