This adds two failing tests to address the following bugs DataLoaders do not batch load data when run with a SerialExecutionStrategy Field resolve functions that await before returning the DataLoaderss LoadAsync function result in deadlock The tests are set to skip execution so they will not run at present so this PR can be merged if desired Relevant issues are DataLoader and SerialExecutionStrategy not bulking DataLoader deadlock with multiple awaits Should the DataLoader work inside a Mutation Also reference ParallelExecution in queries I suggest we define the tests then we can work on solutions As is tagged for release I will provide a separate PR suggesting a solution UPDATE Added test for supporting chained data loaders within a resolver How to handle multiple data loader calls Slight performance enhancement BenchmarkDotNetv OSWindows Intel Core i X CPU GHz Kaby Lake CPU logical and physical cores NET Core SDK Host NET Core CoreCLR CoreFX X RyuJIT DefaultJob NET Core CoreCLR CoreFX X RyuJIT before Method Mean Error StdDev Gen Gen Gen Allocated Introspection us us us KB Hero us us us KB after Method Mean Error StdDev Gen Gen Gen Allocated Introspection us us us KB Hero us us us KB These properties of the ResolveConnectionContext class and IResolveConnectionContext interface are not used by the project c int NumberOfSkippedEntries get int TotalCount get bool IsPartial get These properties are only get properties on the interface and therefor will only ever return default values I recommend removing the properties New feature from graphql spec graphqlgraphqlspec graphqlgraphqlspec requires changes in Parser Validation Introspection Some internal logic DO NOT MERGE THIS BEFORE and fixes info on why embedded pdbs Description If a class contains a nullable Guid public class Product public string Code get set public Guid DataSheetId get set and one tries to define the corresponding GraphQL type using a specific version of the Field method public class ProductType ObjectGraphTypeProduct public ProductTypeIDataLoaderContextAccessor accessor Name Product FieldNonNullGraphTypeIdGraphTypeCode Fieldx xDataSheetId nullable true an exception is thrown even if nullable true is specified The exception is not thrown everything works if a different version of the same method is used FieldGuidGraphTypeDataSheetId Steps to reproduce Add a nullable Guid to any class and define the type as explained above Expected result The code should not throw an exception Actual result The following exception is thrown GraphQLExecutionError The GraphQL type for Field DataSheetId on parent type Product could not be derived implicitly SystemArgumentException The GraphQL type for Field DataSheetId on parent type Product could not be derived implicitly SystemArgumentOutOfRangeException Explicitly nullable type NullableGuid cannot be coerced to a non nullable GraphQL type Parameter name isNullable at GraphQLTypeExtensionsGetGraphTypeFromTypeType type Boolean isNullable at GraphQLTypesComplexGraphType Field TProperty String name Expression expression Boolean nullable Type type End of inner exception stack trace at GraphQLTypesComplexGraphType Field TProperty String name Expression expression Boolean nullable Type type at PartsGraphQLProductTypectorIDataLoaderContextAccessor accessor in homefogCustomerscellinopartspartsapigraphqlProductTypecsline Environment graphqldotnet dotnet core Summary Need to be able to limit size of the string field on arguments or mutation input graphs Ideally this would be something graphql client would be able to see in the schema and also show errors in graphiQL when they enter the value thats over the limit Relevant information Also since we base most of our input graph types on the entity framework entities ideally this length would come from that StringLength attribute on the EF entity property Were using graph types first approach version Summary Two questions I cant find the code for preview Theres no release for this in git hub or any tags on any branch for this version Where can I find this code How do I intercept and time messages sent to Graph QL over sockets I intercepted in middleware for HTTP but the middleware doesnt see the socket frames I cant find any documentation on this Thanks in advance Environment if relevant Windows NET Core 