How to reproduce the issue Load the file below with the latest dnlib CrackMe zip save the file withwithout modifying it then OutOfMemoryException will occur after that I need help because i dont understand much about dnlib internal functions The also error occurs when saving the file with dnspy Hello I would like to implement some kind of way for dnlib to auto download missing framework references from nuget on Linux systems so before doing anything i just wanted to discuss about what would be acceptable way of implementing this My initial idea is to implement new properties into resolver class that would be allow nuget downloading and nuget cache folder that would probably be on temp by default or some folder in same folder as dnlib and on Resolve method would add some kind of downloaded to get correct dll and place it in cache folder and resolve it using dnlibDotNet using dnlibDotNetEmit using System using SystemCollectionsGeneric using SystemLinq using SystemText class Program static void Mainstring args ConsoleWriteLinePress Enter to run otherwise modify assembly if ConsoleReadKeyKey ConsoleKeyEnter ConsoleWriteLineMystringTest else var module ModuleDefMDLoadtypeofProgramAssemblyLocation moduleContext ModuleDefCreateModuleContext var importer new Importermodule ImporterOptionsTryToUseDefs new GenericParamContext var type typeofMy var fi typeGetFieldaa var iField importerImportfi ConsoleWriteLineiFieldGetType var instrs moduleFindNormalMy FindMethodTestBodyInstructions instrsClear instrsAddOpCodesLdsfldToInstructioniField instrsAddOpCodesRetToInstruction moduleWriteoutputexe ConsoleWriteLineOK ConsoleReadKey class MyT public static int aa public static int Test return aa E B A IL ldsfld int class My Taa Compiler will generate ldsfld MemberRef in Test But when I use importerImportfi I will get a ldsfld FieldDef and the output cant run var importer new Importermodule ImporterOptionsTryToUseDefs new GenericParamContext new AssemblyVersionMappermodule importerImportmi After a lot of time I find the reason TypeDefFindMethod failed because of PrivateScope I find more and more issues about PrivateScope whats the meaning of PrivateScope Why do you always check it It works fine if dont check it Related issue A good example is ConfuserExs anti tamper Just loading and saving the file with dnlib will remove the extra section injected by ConfuserEx and the assembly cannot be run or deobfuscated any further SystemArgumentException if contains generic It works with this but Im not sure whether it allways works return importerImportSRFieldInfoGetFieldFromHandleRuntimeFieldHandleobj defaultRuntimeTypeHandle What happens with PrivateScope Why does TypeDefFindMethod check PrivateScope even if the name and sig matches The most frequent error of dnlib is Error calculating max stack value Now dnSpy de dot ref dnlib by nuget not source everytime I must debug de dotexe in dnSpy and breaking in WriteMethodBodies to view the method name Its so troublesome Can you restore dnlib source instead of nuget Not everyone is so skilled as you we must debug with dnlib source to resolve our problem Can you show method name when occurs Error calculating max stack value dnlib will preserve tokens if IsILOnly is false that means even if I remove a generic method and all refs to it dnlib will still write its MethodSpec this will occur an error A type was removed that is still referenced by this module Of course I can disable PreserveMethodSpecRids but Im not sure whether its safe Becuase it wont preserve any MethodSpecs rather than only one MethodSpec