Background for this PR Having a few experiments running without using the Static Helper was trying to disable all experiments at once by using the Enabled method Turns out it wasnt possible To achieve this Had to create a implementation of Scientist and override the IsEnabledAsync This PR aims to allow the set of the Enabled func globally for experiments using the helper and for the implementations The IsEnabledAsync remains virtual so that we can still override the enabled behaviour for a specific one Currently the project is referencing NetStandard Library Upgrade to version Scientist is designed to always return results from the control however during development I have found it helpful to return the result from the candidate rather than the control ie during design and debugging an issue etc The following PR exposes a delegate that will can effectively ignore the control and return the result from the first candidate It has similar affects to turning off Scientist ie no comparison reports are generated no over head etc using GitHub public void ScientistSetup ScientistEnabledControl HostingEnvironmentIsDevelopmentEnvironment public bool UseExperimentResultIUser user return ScientistScienceboolwidgetpermissions experiment experimentUse IsCollaboratoruser control experimentTry HasAccessuser candidate returns the candidate value The README has some interesting examples but maybe we could go further and have a published site hosted somewhere thats more discoverable From Get me the new project questionnaire doesnt have to be perfectly filled out check with me if youve got questions Haacked was this a manual process before Id love for it to be driven from tags but Im also rusty as hell on all this so Im happy to defer to those who have a better idea of whats technically feasible these days With the passage of time the previous maintainers have moved on to other things which is how I find myself again filling these shoes Im trying to avoid new responsibilities at the moment and ScientistNET is not something I am suited to be taking charge of Ive not contributed to the project in any capacity Im not aware of this being used on any GitHub projects Im no longer doing C development And so Im now looking out for others to take up ownership of the project If I dont hear anything before February th I plan to archive the repository to confirm its dormancy This project has been rather quiet for a while in terms of issues and contributions which is why I favour archiving currently Heres a cursory glance at the activity two issues opened three PRs merged one open PR outstanding The release went out about months ago and heres the overall NuGet stats img width src But if someone preferably multiple people to share the load wants to step up but isnt quite sure Im happy to provide guidance and mentoring whenever I have bandwidth but I would love to get to a spot where we have people who know the project and want to actively work on it in charge The rough transition process I have in my head is identify interested contributors and figure out a proper transition process transfer this repository to a different ownerlocation on GitHub it doesnt make sense to have this under the GitHub organization when its not actively used in GitHubs projects identify other systems they need access to to continue publishing releases CI systems NuGet etc Feel free to ask any question you may have here or you can email me handle at this website if you wish to talk privately Hi I like the idea of ScientistNet as I often dont want to set up a full BenchmarkNet run However I really felt the loss of the memory allocation information that I could get from BenchmarkNet This Pull Request has a working proposal with unit tests for a new AllocatedBytes field on Observation To enable this to work cross runtime Ive cribbed the workarounds from BenchmarkNets implementation Garbage Collection tooling is wildly inconsistent see the last paragraph Included are a test for the basic functionality and one that asserts that Scientists own allocations dont appear in the results Note that I did not include Generational counts because it seemed trivially easy to get miscounts given that ScientistNet works inline versus BenchmarkNets dedicated test runs I also upped the versions of the Nuget package for my testing the Core SDK for the exeunit tests so they used the latest GC Tooling You can revert these changes and the code will still work the unit tests will need slight modification though In terms of impact of adding this behaviour For Net Core it is almost imperceptible for Net Framework the only way to achieve this functionality is with GCCollects which is a little more invasive I hope that the benefit of seeing allocations outweighs any perceived downsides Lastly Ive proposed an addition to vNext of Net Standard that would do away with all the hackery for both this BenchmarkNet and anyone else who cares about allocations at runtime Commit notes Added target for Net Standard to detect better GC tooling Added test for new AllocatedBytes feature Added test to account for Scientists own allocations in AllocatedBytes Upgraded test and console app to netcoreapp to use new GC Tooling Some portions of GCHelper were derived from BenchmarkNet and are used under license Im not sure how scientist handle this nor how ruby handles this situation and I know you want to stay close to the ruby lib but it could be useful to support different return types between the control and candidate When refactoring there is no guarantee that the candidate methods will return the same type as the existing method which could lead to hardships trying to experiment on them Supporting different types allows us to get around that issue and we can check the differences between different complex objects in the comparison A potential implementation csharp internal class ExperimentTControl TCandidate FuncTaskTControl control FuncTaskTCandidate candidate public void UseFuncTaskTControl control public void TryFuncTaskTCandidate candidate public void CompareFuncTControl TCandidate bool comparison 