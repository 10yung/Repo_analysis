As release eliminates eosjsecc library two important functions are missing signing and verifying an arbitrary piece of data using eosioecc I could take a serialized private key and sign a blob of data and export the signature in text or binary form Also I could load the signature from a bytes binary array and verify it against a public key and the data blob Now if I do the same I need to replicate the conversion from serialized form into elliptic object and call its sign or verify methods This creates code duplication and risk of incompatibility The eosjs library needs to export simple methods for signing and verifying an arbitrary blob of data At the moment the Signature Provider object does it for transaction data directly so theres no abstraction interface Version of EOSJS which version of eosjs exhibits the issue eosjs Describe the bug A clear and concise description of what the bug is For now most jungle node change to hyperion history from v history So does the eosjs still support Hyperion version Because when i try to get access to hyperion node the follow error will be got storeman syncLogger ERROR getBlockNumberSync from EOS FetchError invalid json response body at reason Unexpected token in JSON at position at Y wanchain crossChain git storeman nodemodules nodefetch lib indexjs at processtickCallback internalprocessnexttickjs message invalid json response body at reason Unexpected token in JSON at position type invalidjson isFetchError true And in file nodemodules eosjs dist eosjsjsonrpcjs we can find follow does this mean this cannot support hyperion version Raw call to v chaingetinfo JsonRpcprototypegetinfo function return awaiterthis void void function return generatorthis function a switch alabel case return yield thisfetchv chaingetinfo case return return asent PLEASE FILL OUT THE FOLLOWING MARKDOWN TEMPLATE PR title alone should be sufficient to understand changes Change Description Describe your changes their justification AND their impact Reference issues or pull requests where possible use XX or GHXX where XX is the issue or pull request number API Changes API Changes checked x API changes unchecked no changes ignore this section If this PR introduces API changes please describe the changes here What will developers need to know before upgrading to this version Documentation Additions Documentation Additions checked x Documentation changes unchecked no changes ignore this section Describe what must be added to the documentation after merge Version of EOSJS Describe the bug This looks like a dead link linked from this page To Reproduce Steps to reproduce the behavior Go to Is it because of the NodeOS node version or the wrong way of using it Overview This is a rather simple semantic to add to the project Currently the documentation asks users to clone and build the project from scratch As seen here Of course a CDN is much simpler and easier to use You can just pop in a script and youre good to go However it would be nice to have some DevOps integrations to automatically deploy new releases on every RC or commit to master Suggested Tasks Update a CDN ie JSDelivr with the latest build from yarn buildweb via CI Update documentation to point users to be able to use the CDN over having to manually build the web files from scratch Version of EOSJS Describe the bug the yarn buildweb command does not seem working in this page Some prerequisite is required To Reproduce Steps to reproduce the behavior Run this command yarn buildweb Expected behavior command can be execute Desktop please complete the following information OS mac os x brew x yarn v Additional context Add any other context about the problem here Hi is there any way to validate eos wallet address regex or smth like that How to use the Consensus upgrade feature billtoaccounts in eosjs which is mentioned in Please advice Version of EOSJS Latest Describe the bug The GetBlockResult type defined in eosjsrpcinterfacests is missing a large amount of data that is actually returned in this call In particular the following fields are missing transactions newproducers headerextensions blockextensions To Reproduce Attempt to use EOSJS in TypeScript application and access data on a transaction in a block TypeScript will complain that the transactions property does not exist so compilations will fail when trying to access it or any of the many subproperties Expected behavior The dts typescript definitions should include ALL properties in the GetBlockResult return type Screenshots img width altScreen Shot at AM src 