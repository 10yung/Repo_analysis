 says Licensed under the Apache License Version LICENSE contains the text of the MIT license GitHub picks up the MIT license but I ran into an issue with license detection because of the READMEmd license Presumably the exact licensing situation should be fully spelled out and consistent Allow the following header to be parsed without throwing an exception SetCookie namevalue MaxAge domainexamplecom path SameSiteStrict secure Its not valid but it shouldnt result in a nil exception Background We ran into an issue with a trusted client sending SetCookie headers which were invalid and which we were proxying to the end user The headers were in the form SetCookie namevalue MaxAge domainexamplecom path SameSiteStrict secure When SecureHeadersCookieparse encounters the it blows up because ruby cookiesplit seach do pairs pairs name values pairssplit pairssplit ie name values nil name CGIunescapename raises exception ie bash for rb in do chrubyexec rb ruby r cgi e p RUBYVERSION split p CGIunescapenil done optrubies p libruby cgiutilrb in unescape undefined method tr for nilNilClass NoMethodError from e in main optrubiesruby libruby cgiutilrb in unescape undefined method tr for nilNilClass NoMethodError from e in main optrubiesruby libruby cgiutilrb in unescape undefined method tr for nilNilClass NoMethodError from e in main optrubiesruby libruby cgiutilrb in unescape undefined method tr for nilNilClass NoMethodError from e in main e in unescape no implicit conversion of nil into String TypeError from e in main Traceback most recent call last from e in main e in unescape no implicit conversion of nil into String TypeError Traceback most recent call last from e in main e in unescape no implicit conversion of nil into String TypeError X Has tests Documentation updated Feature Requests Currently the viewhelpers dont include a noncedjavascriptpackswithchunkstag This would be a handy addition for those folks using webpacker with split chunks enabled See Im looking to archive this and encourage forks but I have extracted the cookie functionality into a separate gem and it would be nice to have secureheaders wrap this gem so the code isnt maintained in two places My goal is to eventually upstream cookiesandcream functionality into rails but its going to need to go heavy on the railsisms and right now its pretty much just an extract I hope this is as simple as having secureheaders include the gem but the tests will probably need to be reworked to reflect the different API I just upgraded to which removed support for HPKP in commit b b a This change wasnt captured in the changelog and it broke my build Im not sure whether youd want to just amend the changlog to reflect this or pull and cut a Hi We started using SameSite configuration on a few of our cookies I misread the docs goofed and did this ruby samesite strict buttercookie This does not cause a startup error it just doesnt work silently In other cases when I have made mistakes secureheaders told me I was doing something wrong eg Unknown config directive dogs better This caused a bit of head scratching because I have come to expect nice errors from here when I make a mistake thanks for that Is there a use where samesitestrict can be set to an array and do something useful If not does it make sense to validate that the strict key can only be assigned to a TrueClass FalseClass or a Hash via isa Along the same lines if it is a hash it can also silently fail like so ruby samesite strict rly biscotticookie So that leads me to a question of what is the philosophy around validation for configuration Im happy to take a stab at a PR to improve validation around cookie configuration but I wanted to get my head around what should be done first A discussion in was about ensuring that rails gets support for feature policy and how it would require an API similar to the CSP API It made me think we should evaluate current features and open issues to see what wed also like to see in rails Compile a list Review it open PRsissues Id like to deprecate andor transfer ownership of this library eventually smile One of the features of secureheaders is that it will do a lot to shrink the size of a complicated policy Using childsrcframesrc based on bug from years ago Removing protocols Deduping hosts Discard trailing entries excluding unsafe since accomplishes the same Discard any none values if more directives are supplied since none may override values Removes duplicates and sources that already match an existing wild card Removes unsupported directives But most of all it leads to confusing output that sometimes actually prevents you from using CSP correctly What are the motivations for policy minifying So humans can grok it To save a few bytes I know Scott Helme recently published a blog post about twitters monstrous CSP and how it could be minified I think its the place of this library to suggest improvements but not magically manipulate them with a few hundred lines of ruby code no matter how well commented smile So how about modifying policies we can turn on some sort of dynamic linting maybe that logs or raises exceptions in devtest but is turned off in prod One thing about CSP that Ive always found extremely dangerous is its ability to generate an enormous amount of traffic for a reporting endpoint if you hit browser bugs or use a misconfigured policy This was a very real issue for us and something weve mitigated using a patch to only send a percentage of the reports to the reporting endpoint We tune this number up and down based on the risk when we roll out an updated policy My question to the other users of secureheaders is whether or not this configuration option would be valuable to you If so Im happy to open a PR with our base implementation and we can expand on it from there To give you a bit of an idea around the implementation rb initializer configcspreportonly snip reporturi w samplerate only send of violations The above configuration would then result in the reporturi directive for the policy only being appended of the time and the remaining would not have the reporturi directive at all When I have the following as part of my csp header config ruby configcsp frameancestors w foocom preserveschemes true and Im serving my frame over https to be embedded on the is required but is being removed by minifysourcelist Expected outcome I expect to have frameancestors foocom in my CSP header Actual outcome The CSP header had only frameancestors foocom Config ruby SecureHeadersConfigurationdefault do config configcsp defaultsrc w self scriptsrc w self frameancestors w foocom preserveschemes true end Generated headers ContentSecurityPolicy defaultsrc self frameancestors foocom scriptsrc self 