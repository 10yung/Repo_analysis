 Fixed Taras blog links the archive was moved to docsmicrosoftcom Hello i found the following bug if i use the following Options in the Content Pipline grafik grafik if i use instead this optionsTextureFormatColor grafik grafik Texture Im using but made it smaller for Github tilelandmacros Also if Im not using BlendStateAlphaBlend instead using BlendStateNonPremultiplied in my Spritebatch all working correctly with the compressed Images How can i get Compression without the Artifacts What version of MonoGame does the bug occur on MonoGame What operating system are you using Windows What MonoGame platform are you using DesktopGL Content Pipeline Please make sure that the issue is present in the develop branch of MonoGame before reporting You can download the development build installer from Write your issue below Regardless if I initialize the GraphicsAdapter in the DesktopGL or Content Pipeline GraphicsAdapterAdapters always returns for multiscreen desktop environments In contrast if the project is built as a Windows project the number of adapters is or more as intended for multiple displays I am unable to compile my code as a Windows project as that project type doesnt support more than controllers in which we need I am able to work around this problem temporarily by setting the position of the window offscreen to set to monitor with the disadvantage of not discovering supported resolutions Example for monitor one set window position For monitor two showing a p display on one set window position System stats What version of MonoGame does the bug occur on MonoGame What operating system are you using Windows What MonoGame platform are you using eg DesktopGL WindowsDX WindowsUWP Android DesktopGL Content Pipeline I was checking out the website and I thought this project was abandoned because the latest news if from Recently Ive been switching from BlendStateAlphaBlend to BlendStateNonPremultiplied since it simplifies things and improves loading performance by removing the need to premultiply textures loaded through Texture DFromStream However there is an issue with the way BlendStateNonPremultiplied behaves Using the source alpha as AlphaSourceBlend results in more translucency than I would expect and in fact can reduce the overall opacity of the resulting image when using render targets as seen here The backbuffer is cleared to be magenta but the background image is fully opaque and thus should hide it completely The correct result would be as follows Ive created a sample project demonstrating this Testzip The corrected blendstate is as follows csharp var nonPremultiplied new BlendState ColorSourceBlend BlendSourceAlpha ColorDestinationBlend BlendInverseSourceAlpha AlphaSourceBlend BlendOne AlphaDestinationBlend BlendInverseSourceAlpha What version of MonoGame does the bug occur on MonoGame What operating system are you using Windows Pro x What MonoGame platform are you using WindowsDX Hello there On UWP when using an Xbox gamepad and pressing the start button KeyboardStateGetPressedKeys will return a key with the code This is likely a WindowsUICoreCoreWindowKeyDown issue from the WinRT API I havent looked into it any further System stats What version of MonoGame does the bug occur on latest develop branch What operating system are you using Windows What MonoGame platform are you using eg DesktopGL WindowsDX WindowsUWP Android UWP Closes This pull request is still a work in progress I am just creating it so I can see the CI Test results as I am having issues testing on my own machine Sorry I messed up the last one 