Root issue for stuff that needs to happen when AGP v is the new minimum Ive been bashing my head against screen for some time I followed instructions from your doc but my service account would just not show up in my google dev console Then I started googling and found this stackoveflow question I set owner permission or whatever was required for the access here and suddenly it appreared Why do you explicitly say that I should not select any roles Is it outdated or am I missing something It definitely confused me and needs some clarifications This options leads to unexpected behavior If a user has a play config like this playpromoteTrack foo then the track option wont actually do anything since well see that a promoteTrack has been specified We could redirect the track option to the promotetrack option but that could lead to more confusion so might as well keep things explicit and just get rid of the option altogether Root issue for stuff that needs to happen when we bump the plugin to v There have been numerous regressions that should have been caught by tests Tests to add x Unit tests for Validationkt methods x Unit tests for Pluginskt x Unit tests for logic in CliOptionskt x Unit tests integration tests for PlayWorkerskt x Integration tests Agpkt x Integration tests with and without a mapping file x Integration tests validating customDir artifact fetching behavior Integration tests for each task validating that its publishing stuff Integration tests validating the correct extension was picked Remove all Groovy Root issue for stuff that needs to happen when AGP v is the new minimum Currently we let devs put whatever they want in playConfigs even if its something the plugin never looks at This is bad since it requires guesswork to know if youve got the right flavorvariantetc See This will let us get rid of dependsOngenEditTask Currently if all release variants are disabled the lifecycle publishing tasks will run and succeed but nothing will actually happen Instead we should Wrap each lifecycle task creator in a lazy that gets invoked only when a dependent task needs it That way the build will fail if someone tries to run an empty task because it wont exist Keep track of every task weve created with some static set that gets reset after every build keep track of whether or not any release variants have been configured If none and the startParametertaskNames contains one of our tasks log an error This is needed so we dont log an error on every single build only those intended to use GPP Also this solution isnt perfect since someone could create a wrapper task with us a dependency and we wouldnt know but whatevs My project has a few flavors Each flavor has its own app ID I wanted to publish prebuilt APKs per each flavor After reading the documentation section about Uploading a preexisting artifact I understood that I need to execute the following command per each flavors apk gradlew publishApk artifactdir pathtoflavorapk But executing the command above actually tried to publish that specific apk to all flavors I could see that the flavor specific publishing task ie publishApkFlavorBuildType was executed where the first one which matched the app ID of the provided apk was successful while the rest obviously failed I decided to try specifying the flavor specific publishApk task with artifactdir option eg gradlew publishApkFlavorBuildType artifactdir pathtoflavorapk and it worked Im not sure if this is by design or a bug If its by design please make the documentation clearer regarding flavor publishing Thank you for your awesome work 