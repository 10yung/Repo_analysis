In Opera when the fix is applied and deleteCount is missing no elements are deleted This is incorrect and when deleteCount is missing the behaviour should be to delete all elements from start onwards js function f var b fbind new f instanceof b true in native but false in shim When we traverse the prototype chain of obj as follows var obj while obj obj ObjectgetPrototypeOfobj The method getPrototypeOf always return a prototypeOfObject that cause the endless loop See and Reproducible example js e toExponential Pretty much every other JS engine even IE give the expected e but Edge give e ping ljharb Can be detected and fixed I believe Quite large numbers of people affected that are using libraries such as bigjs bignumberjs and decimaljs Anyway just a heads up IE Other browsers Hello devs Would you please be kind enough to make clear what is the role of the licenses in the contributorsmd fileFrom a legal point of view what should we understand by the copyrights described into that file As the whole component is licensed under MIT does those copyrights influence the global license in any way Are there any specific snippets from the source code that are under those licenses found in contributirsmd file Thank you in advance Br Alexandru The new version of Firefox broke the parseInt behavior on the test if parseIntws parseIntws x line because of wrong whitespace characters returning NaN for both instead of and Thus parseInt is redefined by your shim However the case parseInt empty parameter or undefined or null throws an exception while using trimstring line instead of returning NaN as default behavior trim should never be called with undefined or null as parameter This fixes the issue if str undefined str null str to add before line Do not attempt to return NaN directly instead as it has bad side effects on some libraries such as PerfectScrollbar I dont know why but it does Full example javascript ES eslintdisable radix if parseIntws parseIntws x eslintenable radix global parseInt true parseInt function origParseInt var hexRegex xX return function parseIntstr radix if str undefined str null str Fix here var string trimstr var defaultedRadix Numberradix hexRegexteststring return origParseIntstring defaultedRadix parseInt The redefined function parseFloat should have the same fix too before line Ive reported the parseInt issue to Bugzilla and here is the answer To sum up u E is no longer supported in Unicode as a whitespace This particular test should be removed in the ws variable line ljharb I have added two tests which show thin places of both decisions in FF versions current one and my previous one from line on My current solution is a littlle bit difficult but I have not found more simple one yet In case when we have regular expression with assertion the wrappedReplaceValue which decorate the original replaceValue function cant define correct arguments because the coincidence which was passed to replaceValue function dont match the RegExp pattern and the final arguments have just only two values the offset of the matched substring within the whole string being examined and the whole string being examined There is a certain problem when whole RegExp dont match with found coincidence but in fact there is a coincidence StringPrototypereplace polyfill 