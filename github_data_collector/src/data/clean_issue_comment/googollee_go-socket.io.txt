Heres the client code javascript doctype html html head titleSocketIO chattitle style margin padding boxsizing borderbox body font px Helvetica Arial form background padding px position fixed bottom width form input border padding px width marginright form button width background rgb border none padding px messages liststyletype none margin padding messages li padding px px messages linthchildodd background eee style head body div classchat ul li vformessage in messages message li ul div script src script src script src body script var socket io socketonreply function d consolelogd new Vue el chat data messages mounted function socketonreply function d thismessagespushd bindthis consolelogmsg script html Server code go package main import fmt githubcomgoogolleegosocketio githubcomlabstackechov log func main server err socketioNewServernil if err nil logFatalerr app echoNew appStatic appAnysocketio funcc echoContext error serverServeHTTPcResponse cRequest return nil serverOnConnect funcs socketioConn error sSetContext fmtPrintlnconnected sID sEmitreply Connected return nil serverOnError funce error fmtPrintlnmeet error e serverOnDisconnect funcs socketioConn reason string fmtPrintlnclosed reason go serverServe defer serverClose appStart But if I create another io on server side it works fine Like this one javascript doctype html html head titleSocketIO chattitle style margin padding boxsizing borderbox body font px Helvetica Arial form background padding px position fixed bottom width form input border padding px width marginright form button width background rgb border none padding px messages liststyletype none margin padding messages li padding px px messages linthchildodd background eee style head body div classchat ul li vformessage in messages message li ul div script src script src script src body script var socket io socketonreply function d consolelogd new Vue el chat data messages mounted function socketonreply function d thismessagespushd bindthis consolelogmsg var s iochat script html Ive checked using nodeJS socket server version and it works perfectly Only the go socket version has this bug javascript var app requireexpress var http requirehttpServerapp var io requiresocketiohttp appget function request response responsesendFiledirname indexhtml ioonconnection function socket consolelognew user socketemitreply Connected httplisten You can verify this using the example given with this repo just remove the line that creates another socket javascript var s iochat Just remove this line When emitting events from client I got Bad Request POST Bad Request And on the server console it said resume Heres my client code javascript var socket io var mesageForm documentgetElementByIdsendcontainer var mesageContainer documentgetElementByIdmessagecontainer var mesageInput documentgetElementByIdmessageinput const name promptWhat is your name appendMessageYou joined socketemitnewuser name socketonchatmessage data appendMessagedata socketonuserconnected name appendMessagename joined mesageFormaddEventListenersubmit function e epreventDefault const message mesageInputvalue socketemitsendchatmessage message mesageInputvalue function appendMessagemsg const messageElement documentcreateElementdiv messageElementinnerText msg mesageContainerappendmessageElement And heres my server code go package main import socketio githubcomgoogolleegosocketio githubcomlabstackecho type Sock struct sock socketioConn Name string var socks makemap string Sock func main io socketioNewServernil app echoNew appStatic appAnysocketio funcs echoContext error ioServeHTTPsResponseWriter sRequest return nil ioOnConnect funcs socketioConn error socks sID Sock sock s sEmitchatmessage Server Hello World return nil ioOnEvent newuser funcs socketioConn name string sk socks sID skName name for k v range socks if k sID vsockEmituserconnected name ioOnEvent sendchatmessage funcs socketioConn msg string for k v range socks if k sID vsockEmitchatmessage msg go ioServe defer ioClose appStart Its annoying What is causing this error Travis CI test coverage log githubcomgoogolleegosocketiobroadcastgo NewBroadcast githubcomgoogolleegosocketiobroadcastgo Join githubcomgoogolleegosocketiobroadcastgo Leave githubcomgoogolleegosocketiobroadcastgo LeaveAll githubcomgoogolleegosocketiobroadcastgo Clear githubcomgoogolleegosocketiobroadcastgo Send githubcomgoogolleegosocketiobroadcastgo SendAll githubcomgoogolleegosocketiobroadcastgo Len githubcomgoogolleegosocketiobroadcastgo Rooms Travis CI test coverage log githubcomgoogolleegosocketioconngo newConn githubcomgoogolleegosocketioconngo Close githubcomgoogolleegosocketioconngo connect githubcomgoogolleegosocketioconngo nextID githubcomgoogolleegosocketioconngo write githubcomgoogolleegosocketioconngo onError githubcomgoogolleegosocketioconngo parseArgs githubcomgoogolleegosocketioconngo serveError githubcomgoogolleegosocketioconngo serveWrite githubcomgoogolleegosocketioconngo serveRead Travis CI test coverage githubcomgoogolleegosocketionamespacego newNamespaceConn githubcomgoogolleegosocketionamespacego SetContext githubcomgoogolleegosocketionamespacego Context githubcomgoogolleegosocketionamespacego Namespace githubcomgoogolleegosocketionamespacego Emit githubcomgoogolleegosocketionamespacego Join githubcomgoogolleegosocketionamespacego Leave githubcomgoogolleegosocketionamespacego LeaveAll githubcomgoogolleegosocketionamespacego Rooms githubcomgoogolleegosocketionamespacego dispatch Travis CI test coverage githubcomgoogolleegosocketioparserdecodergo Close githubcomgoogolleegosocketioparserdecodergo DecodeHeader githubcomgoogolleegosocketioparserdecodergo DecodeArgs githubcomgoogolleegosocketioparserdecodergo readString githubcomgoogolleegosocketioparserdecodergo readHeader githubcomgoogolleegosocketioparserdecodergo readEvent githubcomgoogolleegosocketioparserdecodergo readBuffer githubcomgoogolleegosocketioparserdecodergo detachBuffer githubcomgoogolleegosocketioparserencodergo Encode githubcomgoogolleegosocketioparserencodergo writePacket githubcomgoogolleegosocketioparserencodergo writeUint githubcomgoogolleegosocketioparserencodergo attachBuffer Travis CI test coverage githubcomgoogolleegosocketioservergo NewServer githubcomgoogolleegosocketioservergo Close githubcomgoogolleegosocketioservergo ServeHTTP githubcomgoogolleegosocketioservergo OnConnect githubcomgoogolleegosocketioservergo OnDisconnect githubcomgoogolleegosocketioservergo OnError githubcomgoogolleegosocketioservergo OnEvent githubcomgoogolleegosocketioservergo Serve githubcomgoogolleegosocketioservergo JoinRoom githubcomgoogolleegosocketioservergo LeaveRoom githubcomgoogolleegosocketioservergo LeaveAllRooms githubcomgoogolleegosocketioservergo ClearRoom githubcomgoogolleegosocketioservergo BroadcastToRoom githubcomgoogolleegosocketioservergo RoomLen githubcomgoogolleegosocketioservergo Rooms githubcomgoogolleegosocketioservergo serveConn githubcomgoogolleegosocketioservergo getNamespace Hey is there a way to get the IDs of all to a specific room connected clients It is needed to iterate through it and send every client different data BroadcastToRoom doesnt help me for this project Describe the bug Panic when disconnecting with node client bash websocket close abnormal closure unexpected EOF panic runtime error index out of range with length To Reproduce Use node client to connect to master branch Connect to server join new room disconnect Expected behavior No panic and actually it should not even enter this error handler It should run the disconnect handler Environment please complete the following information Go Node v githubcomgoogolleegosocketio v f b d master githubcomgoogolleegoengineio v indirect githubcomgorillawebsocket v indirect socketio Additional context bash websocket close abnormal closure unexpected EOF panic runtime error index out of range with length goroutine running mainwsEventsfunc x b xc ba x ab d x b homegopherDocumentscodegosrcbitbucketorgcnxdevsdispatchermaingo x githubcomgoogolleegosocket eioconnClosefunc homegopherDocumentscodegopkgmodgithubcomgoogolleegosocketiov f b d conngo x syncOncedoSlow xc b e xc fda usrlibgolangsrcsynconcego xe syncOnceDo usrlibgolangsrcsynconcego githubcomgoogolleegosocket eioconnClose xc b x x homegopherDocumentscodegopkgmodgithubcomgoogolleegosocketiov f b d conngo x githubcomgoogolleegosocket eioconnserveRead xc b homegopherDocumentscodegopkgmodgithubcomgoogolleegosocketiov f b d conngo xd b created by githubcomgoogolleegosocket eioconnconnect homegopherDocumentscodegopkgmodgithubcomgoogolleegosocketiov f b d conngo x e exit status it could be the connection that is passed on the error handler which has been changed in the master branch As title There is no Clientgo after V and the client of v is wrong 