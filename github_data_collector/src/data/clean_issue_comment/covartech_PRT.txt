nFeatures is currently a scalar but if its a vector we should search over the vector Currently if you build a prtFeatSelSfs with nFeatures and the performance goes dsOut featSelrunds will always give you the dsOut with features despite features being better Propose add parameter selectBestNumberFeatures false During RUNif the best performance was achieved with fewer than nFeatures then just select that features pre Undefined variable inputStructure or class inputStructurehandleEmptyClusters Error in prtClusterKmodestrainAction line switch lowerinputStructurehandleEmptyClusters pre Checkout this revision b b c f c c f a then run pre ds prtDataGenUnimodal class prtClassFld ds classkfoldsds dispds pre You will see ds has userData is a x struct This bit me in the ass when I was running some crossvalidation experiments because pre ds classkfoldsds ds classkfoldsds ds classkfoldsds pre Will make a very large userData structure Because in the first instance we make a ds with a x userData and then we make a x userData then x etc Thats no good Note that as far as I can tell this does NOT happen in the parent commit f f ce b ad e a efebffb c fc The problem is that userData was never intended to be used to hold information from different crossvalidation folds userData was always intended to be a single global set of information for the dataSet and mucking with it inside kfolds breaks that assumption The bug above only really matters if you run crossvalidaton on the same data set a bunch of times it is admittedly not the worst problem in the world but it can be weird If userData was actually BIG this problem can be significant I dont necessarily want copies of userData for my folds I dont know what the right answer is Usually Id suggest putting whatever this information that you want to store in userData on every fold in the ACTION and use the second output of kfolds or crossValidate but thats clearly suboptimal and confusing We could ADD a new field to dataSets kfoldsUserData which is an nFolds x array of userData Then in crossValidate we can change prtDataSetBasecrossValidateCombineFoldResults to do this pre for i lengthdsTestCell dsOutkfoldsUserDatai dsTestCelliuserData end pre Thoughts We can have multiple Targets it would be nice to enforce a hierarchy on the targets so that plots displays etc knew to group by T then group by T for eg plots In landmines you might have two labels youre interested in exploring Lane and MineNoMine It would be nice to say pre dshierarchicalLabeling LaneisTarget dsplot pre and have the resulting data plot use eg color for lanes and within a color use shape for isTarget The same could be done in imagesc etc The exact implementation details are unclear Use multiple target columns Multiple target columns probably breaks a ton of classifier code Use fields in the observationInfo Other The help for prtDataSetClassbootstrap says it uses sampling with replacement I would like to randomly subsample my training data without getting redundant observations Does that functionality exist in the PRT I wrote a new prtClass in which metadata is written out to DataSetuserData in the runAction method However when I call crossValidate on that prtClass or use it as a base classifier in prtClassBinaryToMaryOneVsAll the userData is not saved to the output I would like it such that userData was saved to the DataSet that comes out of either prtClasscrossValidate or prtClassBinaryToMaryOneVsAllrunAction Is this an easy internal PRT fix I am trying to implement prtRegressLibSvm but LibSVM is segfaulting on me Is this our bad Heres the simplest version I can make ds prtDataGenNoisySinc model prtExternallibsvmsvmtraindsY dsX s dontNeed dontNeed decisionvalues prtExternallibsvmsvmpredictdsY dsX model Yikes This is preventing me from making prtRegressLibSvm A bunch of objects eg prtRvplotPdf plotLogPdf classifier plots etc all call prtPlotUtilPlotGriddedEvaledFunction or some equivalent It would be nice if we could pass input arguments into that method cleanly So you could specify eg parameters to slice or imagesc I did this in prtRvplot so you can do close all plotdsPrtPreProc hold on g prtRvGmm gplotPdfaxisslicerLocations FaceAlpha But its not ideal eg the first input to plotPdf is the axis limits for some reason That should be gplotPdfaxisLimitsaxis The generalization of this is not straightforward to me though Should there be prtUtilDefaultImagescVarargin Or did we miss the boat here and we need a prtPlotUtilPlotGriddedEvaled OBJECT 