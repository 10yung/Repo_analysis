This was causing a compilation error under pedantic builds Roughly of the time when stopping the capture and starting the data receiving stage it gets stuck It looks like the problem might be in SocketListenerlistenCapture specifically calling measySocketreceive The receive function will always return a when it hangs like this The code block being referred to is this while bytes sizeofprofilernetMessage int receivedBytes measySocketreceivebuffer seek bytes buffersize if receivedBytes bytes receivedBytes break bytes receivedBytes The profile binary format for version v appears to have changed to accommodate bookmarks but there is no accompanying documentation in the wiki static should come before thread etc This causes warnings with clang when using eg EASYTHREAD warning thread before static Wpedantic It seems this was partially addressed with ce but some instances were missed This PR adds QNX cmake toolchains for easyprofilercore Hi Im making updates for Open Collective Either you or another core contributor signed this repository up for Open Collective This pull request adds financial contributors from your Open Collective What it does adds a badge to show the latest number of financial contributors adds a banner displaying contributors to the project on GitHub adds a banner displaying all individuals contributing financially on Open Collective adds a section displaying all organizations contributing financially on Open Collective with their logo and a link to their website PS As with any pull request feel free to comment or suggest changes Thank you for your great contribution to the Open Source community You are awesome And welcome to the Open Collective community Come chat with us in the opensource channel on great place to ask questions and share best practices with other Open Source sustainers mstoredSpin lock is held by calling EASYFORCEEVENT which itself locks mstoredSpin profilemanagercpp if expired EASYFORCEEVENT thread endtime ThreadExpired EASYCOLORTHREADEND num Weve ported easyprofiler to some new platforms and have observed on one of those platforms that the id recycling nature of pthreadself used here can result in different threads being identified as the same thread in easyprofiler It looks like the same code would be invoked in the main repository if running on certain apple devices The circumstances are convoluted to get into the details but in short Throughout the lifetime of our capture threads are spawning and being terminated causing pthreadself to reuse the same id and having those threads treated as one inside the profilergui and disallowing us to name them after the first instance The situation is exasperated by the fact that one of the threads retroactively pushes a bunch of data into easyprofiler via the storeBlock API meaning that the same thread now has multiple blocks of data overlapping causing bad rendering in the GUI Its possible that the pthread implementation on the target platform is causing these IDs to be recycled more aggressively and this might not be an issue for you on the apple platforms that utilize the same function I built easyprofilercore for Android using mk files no cmake and linked it to my app as a static library I added a few profiling blocks all toplevel blocks are closed as described in After the app has finished I download the testprofileprof to my PC and try loading it via precompiled profilerguiexe binary release from GitHub Here is the error message I am getting What might be the issue PS I checked as well No good I tried use easy profiler to profile c code in one of my mac apps without success I tried to isolate the problem and test with simple hello world and as well with profilersample app Here is what I found out My environment is MacOS Mojave and Xcode I can build the project and tested all included samples successfully when built using included cmake script but built the following way instead cmake DCMAKEBUILDTYPERelease DCMAKEPREFIXPATHusrlocalCellarqt libcmakeQt Widgets Built librarary I installed to usrlocal macbookbin patryk find usrlocal iname easyprofile usrlocallibcmakeeasyprofiler usrlocallibcmakeeasyprofilereasyprofilerConfigcmake usrlocallibcmakeeasyprofilereasyprofilerConfigVersioncmake usrlocallibcmakeeasyprofilereasyprofilerTargetsreleasecmake usrlocallibcmakeeasyprofilereasyprofilerTargetscmake usrlocalliblibeasyprofilerdylib profilersample built with cmake returns good results Objects count Render steps Modelling steps Resource loading count Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Elapsed time usec Blocks count However when I created sample Xcode objectivec project with only profilersamplecpp profiler doesnt work and doesnt dump any files Objects count Render steps Modelling steps Resource loading count Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Frame time max us avg us Elapsed time usec Blocks count Ive added usrlocalinclude to Header Search Paths usrlocallib to Library Search Paths and leasyprofiler to Other Linker Flags Is there any way to make it work with Xcode projects 