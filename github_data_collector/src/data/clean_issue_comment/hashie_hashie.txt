This PR suppresses the following warning that deepmerge method and deepupdate method are defined twice when using Ruby console bundle exec rake snip Userskoicsrcgithubcomhahiehashielibhashiemashrb warning method redefined discarding old deepmerge Userskoicsrcgithubcomhahiehashielibhashiemashrb warning previous definition of deepmerge was here Userskoicsrcgithubcomhahiehashielibhashiemashrb warning method redefined discarding old deepupdate Userskoicsrcgithubcomhahiehashielibhashiemashrb warning previous definition of deepupdate was here Copyright on Hashie is currently Copyright c Intridea Inc and Contributors We are going to change it to Copyright c Intridea Inc and Contributors As maintainers we dont feel we can remove the company that sponsored the project creation so even though Intridea hasnt been involved in years we are leaving it here IANAL but wanted to open this in case someone has objections or comments or suggestions I described part of the piece I was trying to do in but I didnt explain well enough This is really for coercion on initialization of Dash with coercion included these cases show what I mean So I feel like this is supposed to happen but its a bit confusing still My goal was to make it if an object is initialized with a hash coming from a Grape API endpoint params that if the key is set to nil to convert it to a String I started looking at defaults as well in this research but I found something confusing to me I have this object ruby class WriterParams HashieTrash include HashieExtensionsIgnoreUndeclared include HashieExtensionsIndifferentAccess end class AllowedParams WriterParams property description default end When this is ran with this initialization the description property is set to nil ruby ap AllowedParamsnewdescription nil AllowedParams descriptionnil Ok no worries I did explicitly set that but The Dash documents caught my eye with this ruby pupdateattributesoccupation nil poccupation Rubyist Sure enough doing an updateattributes on my AllowedParams class gives the same result apupdateattributesdescription nil byebug apdescription So Im curious why this is the case is this a bug I feel like doing an updateattributes with a nil value should behave the same way as an initialize right This is a failing test that demonstrates a regression in in v The bug was initially raised as If a Dashie is initialized with a nil value then the key is missing when the Dashie is written out with toh class Test HashieDash property foo property bar end Hashie Testnewfoo hi bar niltoh foohi barnil Hashie Testnewfoo hi bar niltoh foohi The exact line that is causing this is this one as part of Allow codependent Dash attributes to initialize I didnt attempt a fix immediately as michaelherold may have some ideas about how to incorporate it in this area The comment that However this is an indication of a larger problem with the architecture of Dash Rearchitecting this will be quite an undertaking made me think this might need some thought from those more familiar with the project There has been a change regression in hashie such that when a value is nil the key is no longer written out to hash eg class Test HashieDash property foo property bar end Hashie Testnewfoo hi bar niltoh foohi barnil Hashie Testnewfoo hi bar niltoh foohi I cant see anything in the changelogs to point to this Is it an intentional change Is there any way to have some required properties to be set in the constructor while still allowing the structure to be extended ie a mash where you can declare required properties as is done with Dash or a Dash without the constraint that only declared properties can be assigned Lets say I have a hash subclass with IndifferentAccess mixed in ruby class MyIndifferentHash Hash include HashieExtensionsIndifferentAccess end What if you want to turn this back into a completely ordinary hash At this toplevel toh works as indeed its documented in ruby core as Returns self If called on a subclass of Hash converts the receiver to a Hash object ruby ihash MyIndifferentHashnew ihash foo bar ihash foo bar ihashtohclass Hah ihashtoh foo nil ihashtoh foo bar Great so far so good and as expected This came up because I ran into a bug that in my particular case I could have worked around if I were able to take my indifferent hash and turn it into a completely normal hash While it looks like you can do it above you can not do it with a sub hash of the above hash ruby ihash MyIndifferentHashnew ihash subhash subkey subvalue But I could not figure out how to that Standard ruby Hashtoh is documented as so that seems promissing Its source is also C in MRI which I dont read well so Im not sure how its interacting with the Hashie extension However it does not The subhash has been turned into indifferent access too which is part of the contract of IndifferentAccess and great ruby ihash MyIndifferentHashnew ihash subhash subkey subvalue Even though it still just a Hash not a subclass its been magically given indifferent access ihash subhash class Hash ihash subhash subkey subvalue ihash subhash subkey subvalue But what if I want to turn this subhash back into a completely ordinary Hash with no indifferent access Because Ive run into a bug in the indiffernet access functionality and want to work around it or for any reason I just want an ordinary undecorated hash back I cant find any way to do it Its not toh ruby tohsubhash ihash subhash toh tohsubhash subkey subvalue tohsubhash subkey subvalue tohsubhashrespondtoindifferentvalue true Its still a magic indifferent hash Is there a way for me to turn it back into an ordinary hash Should there be Should it be toh hashie ruby class HashWithI Hash include HashieExtensionsIndifferentAccess end hi HashWithInew hi hashvalue one one value as expected the subhash is indifferent too which is cool hi hashvalue one one value hi hashvalue one one value And we can still use merge with an ordinary hash on toplevel himergenew top level new top level value hashvalueoneone value new top levelnew top level value But we CAN NOT use merge on the subhash which is a problem hi hashvalue mergenew subkey new subvalue NoMethodError undefined method convert for oneone value new subkeynew subvalueHash from Usersjrochkindgemruby gemshashie libhashieextensionsindifferentaccessrb in merge hi hashvalue mergenew subkey new subvalue NoMethodError undefined method convert for oneone value new subkeynew subvalueHash from Usersjrochkindgemruby gemshashie libhashieextensionsindifferentaccessrb in merge 