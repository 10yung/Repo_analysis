Use Case I would like to use the Snackbar to display messages to the user as they click through my app to provided a guided experience This can happen when a new component mounts or when they click a button for example This requires being able to clear currently shown Snackbars when required in order to show another or as the current Snackbar may no longer be relevant after a user has performed another action At the moment clearing is only provided by waiting for timeout to expire or requiring user to click the action button on the Snackbar to close it With more Snackbars requiring the user to click the Got it action on the Snackbar repeatedly to close each provides a cumbersome experience My Attempt I am currently trying to clear the queue to remove the previous Snackbar on the screen before I call queuenotify to show a new one as follows const queue createSnackbarQueue const clear queuemessagesarray remove previous Snackbar display a new one const onClick clear queuenotify message I am Snackbar This appears to work in removing the previous Snackbar and showing the new but when using this method the newly shown Snackbar appears to receive a timeout that is equal to the remainder of the previous Snackbars timeout So if Snackbar has a s timeout and is on screen for s before the button is clicked and Snackbar is shown then even if Snackbar was set to have a s timeout it will disappear after s Other It appears MaterialUI provides this feature though this may not be able to be used from anywhere in the app See here for reference As I see z has default value IMHO it should be optional With required mode I see false positive warnings in my IDE What RMWC Version are you using majorminorpatch Name your build system Webpack Rollup Webpack Describe the bug with as much detail as possible For the life of me I couldnt figure out why my rmwc css was working in dev but not getting bundled via webpack in production Finally learned that it was being tree shaken out because webpack thought it wasnt actually needed Googling this is clearly an area for improvement in webpack however they say by putting as rmwc does sideEffects false in the packagejson files webpack interprets a css import eg import rmwctooltiptooltipcss as having no side effects and therefore the entire contents of tooltipcss is tree shaken away atm Ive worked around the issue by doing this import tooltipCss from rmwctooltiptooltipcss eslintdisablenextline nounusedvars const seeAsUsed tooltipCss however there are various suggestions that this is what the packagejsons really should have sideEffects css What happened rmwc components broken in production cause of missing css And what was supposed to happen rmwc widgets looking nice with css found in the bundle References The current issue with sideEffects false pops up in various repos though its webpacks fault Note the warning theyve added at the bottom here Open issue asking to make webpack smarter about this It is currently not possible to add a className definition to a CollapsibleList component The following sandbox shows the problem in action Edit determinedbouman u d Inspect the CollapsibleList component with the DevTools The CSS class collapsibleliststyles is ignored The reason for this behavior is that the className is directly set on the CollapsibleRoot component without appending the className property from the props The following code is taken from the file CollapsibleRoot rest onFocusthishandleFocus refel HTMLDivElement thisroot el classNameclassNamesrmwccollapsiblelist rmwccollapsiblelistopen open In my opinion the className of the props should be appended to the classNames generated by the classNames function RMWC Version Build System webpack mdclist Im having the same issue with icon spacing inside a SimpleListItem like this one this is the actual css style of the icon css mdclistitemgraphic marginleft marginright px this is causing the glitch width px height px flexshrink webkitboxalign center alignitems center webkitboxpack center justifycontent center fill currentColor Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details PLEASE READ THIS BEFORE FILING AN ISSUE RMWC or MDC Im pretty sure its RMWC What RMWC Version are you using majorminorpatch Name your build system Webpack Rollup Webpack Describe the bug with as much detail as possible I have a SimpleMenu component that renders a list of options the options are being served as an array of MenuItem where every MenuItem receives a disabled boolean as a prop For some reason the items act normally no matter if theyre disabled or not What happened and what was supposed to happen Items on the menu should be unclickable disabled but they can be clicked and change the menu value Code Example Ive made sure that the disabled prop the Dropdown components gets and passes down to menu item has the current value and Ive also tried inserting values manually to the the ItemMenu disabled prop const Dropdown props const options selected placeholder disabled onChange props let title placeholder const dropDownOptions optionsmapelem if selected elemvalue title elem return MenuItem disableddisabled selectedselected elemvalue keyelemvalueelemtitleMenuItem return SimpleMenu onSelecte onChange value edetailindex handle div classNameclassNamesmdcselect stylesdropdownContainer div classNameclassNamesmdcselectnativecontrol stylesdropdownInputtitlediv div dropDownOptions SimpleMenu Do you really want it fixed Make a repro in the sandbox What RMWC Version are you using majorminorpatch Name your build system Webpack Rollup Webpack Describe the bug with as much detail as possible Slider in Dialog does not move and has max prop as standard value on onChange Though it does move and work correctly after resizing the window when the dialog is opened It does also occur if the dialog is opened by default What happened and what was supposed to happen Slider does not work as intended We were able to reproduce the bug in a sandbox RMWC MDC Web has support for styling tabs to the size of their content rather than expanding them to the width of the container This is done via the mdctabminwidth class I can currently do this when using RMWC by adding the class myself However it would be nice if this was exposed by RMWC as a boolean prop for tabs