 Provide a general summary of the issue in the Title above I met this issue when I tried to run the compress test testcompresscompresssh rootspdkscriptsrpcpy setcompresspmd p request pmd method setcompresspmd reqid Got JSONRPC error response response code message Method not found trap ERR printbacktrace ehxBE e xtracedisable no yes PREVBASHOPTSehxBE ehxBE x XTRACEDISABLEDyes set x And then I started a spdktgt and tried to run setcompresspmd and bdevcompresscreate but found out both methods are not found even in rpcgetmethods I think it lacks some certain dependencies so I added withreduce to configure I think it has something to do with compress but it remains no change Also tried several other parameters Expected Behavior Tell us what should happen compresssh successfully execute Current Behavior Tell us what happens instead of the expected behavior request pmd method setcompresspmd reqid Got JSONRPC error response response code message Method not found Possible Solution Not obligatory but suggest a fixreason for the bug Add some dependencies to current environment Steps to Reproduce Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant configure withreduce make testcompresscompresssh Context Environment including OS version SPDK version etc Providing context helps us come up with a solution that is most useful in the real world CentOS Linux release Core Linux version el x SPDK v pre git sha c When using RHEL with official kernel from distribution el x it is not possible to bind nvme devices to uiopcigeneric driver and due to that to use them within SPDK environment genirq Threaded irq requested with handlerNULL and ONESHOT for irq uiopcigeneric probe of failed with error The issue was previously reported in SPDK bugzilla here for vanilla kernel Unfortunately the kernel used in RHEL does not contain the proper bugfix backported Even that this issue is not directly caused by spdk code it still makes impossible to use SPDK in such a configuration so probably should be tracked here in order to find some solutionworkaround since RHEL is rather important distribution for the enterprise Expected Behavior NVMe devices can be used within SPDK environment when using RHEL as OS Current Behavior NVMe devices are not visible within SPDK environment since they are not bind to any pcie driver Possible Solution Manually applying the missing commit into the RHEL uio module source code and rebuilding it solves the issue Steps to Reproduce Boot into RHEL with official kernel Run setupsh script Try to use any of the nvme devices within SPDK environment Context Environment including OS version SPDK version etc RHEL with official kernel el x I didnt test RHEL kernel but based on changelog the issue should occur there too SPDK changeset c dc f ff c a a c a e b Issue Description SPDK will crash when I invoke applyfirmware RPC method without a right firmware file Test Env SPDK version SPDK v pre DPDK version DPDK rc OS centos vmd enabled Reproducing Scenario Start SPDK with the following commands appvhostvhost m x s S varrunspdk c usrlocaletcspdkvhostconf Invoke applyfirmware RPC scriptsrpcpy applyfirmware xxxx e e d bd ab f fbf nvmen Root Cause I checked the callstack when spdk crashed and found that the wild pointer was in the spdkjsondecodestring func which had freed a char s pointer Actully this pointer is struct rpcapplyfirmware req in the spdkrpcbdevnvmeapplyfirmware and it will be passed into spdkjsondecodeobject I dont know why spdkjsondecodestring needs to free this object I add some print info in this function and call applyfirmware and getbdevs RPC int spdkjsondecodestringconst struct spdkjsonval val void out char s out printfoutp n s frees s spdkjsonstrdupval if s return else return getbdevs scriptsrpcpy getbdevs b e e d bd ab f fbf nvmen spdk output rpcc spdkjsonrpchandler WARNING RPC method getbdevs is deprecated Use bdevgetbdevs instead outnil applyfirmware scriptsrpcpy applyfirmware xxxx e e d bd ab f fbf nvmen spdk output rpcc spdkjsonrpchandler WARNING RPC method applynvmefirmware is deprecated Use bdevnvmeapplyfirmware instead out x f e d d c We can see void out is NULL or a wild pointer so I think we should not free in this func Bug Solution I think void out is no use for spdkjsondecodestring so it should be deleted int spdkjsondecodestringconst struct spdkjsonval val char s s spdkjsonstrdupval if s return else return Moreover any funcs which calls this func should be modified too crashtxt vhostconf Please use the issue tracker only for reporting suspected issues See The SPDK Community Page for other SPDK communications channels Provide a general summary of the issue in the Title above Expected Behavior No error out Current Behavior SPDK reported error Device d is still attached at shutdown Possible Solution The Device d is the vmd device so I think we need to some shutdown codes in the vmd driver Steps to Reproduce Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant enable vmd in the BIOS get current vmd devices lspcigrep d d RAID bus controller Intel Corporation Device d rev run setupsh PCIWHITELIST d scriptssetupsh run spdk tgt appspdktgtspdktgt waitforrpc in another terminal run rpc command to enable vmd scriptsrpcpy enablevmd back to the original terminal use ctrlrc to kill the spdk target Context Environment including OS version SPDK version etc SPDK COMMIT d dd b be e c de e f While working on adding jsonconfig support to bdev fio plugin it seems that some interaction between FIO and QoS causes the application to hang Expected Behavior It should be possible to add QoS limits on bdev via jsonconfig even in bdev fio plugin Current Behavior When a limit is defined on a bdev the fio application hangs Possible Solution Steps to Reproduce Jsonconfig load to fio is added in patch An example test patch converting current configuration file to json for fio tests Remove following lines to reproduce the issue For some reason QoS hangs fio at the end of run if it was enabled by jsonrpc Disable it for now and will try to create minimal repro steps rpcpy bdevsetqoslimit rwiospersec Malloc rpcpy bdevsetqoslimit rwmbytespersec Malloc Context Environment including OS version SPDK version etc killprocess function caused the following error on freebsd ps noheaders o comm ps illegal option usage ps aCcdefHhjlmrSTuvwXxZ O fmt o fmt G gid gid J jid jid M core N system p pid pid t tty tty U user user ps L sudo echo killing process with pid killing process with pid kill wait exit This issue was separated from We will have to consider different method to remove headers of ps output on freebsd This is happening on a lot of test runs A VM will fail somewhere random during the test due to hitting the max amount of time When you look at the time stamps youll see that the build itself is taking minutes Links coming Several of these seen in the test pool will post links shortly IOPS IOPS echo tickrate bdevs name Null bytesread numreadops byteswritten numwriteops bytesunmapped numunmapops readlatencyticks writelatencyticks unmaplatencyticks jq r bdevs numreadops ioresultafter echo qosresult IOPS BANDWIDTH echo awk printfi lowerlimit echo awk printfi upperlimit lt gt echo Failed to limit the io read rate of NULL bdev by qos Failed to limit the io read rate of NULL bdev by qos varjenkinsworkspaceOthersystemsfreebsdautotestspdkscriptsrpcpy bdevnulldelete Null Logical core Null IOs MBs Total IOs MBs killprocess z kill ps noheaders o comm ps illegal option usage ps aCcdefHhjlmrSTuvwXxZ O fmt o fmt G gid gid J jid jid M core N system p pid pid t tty tty U user user ps L sudo echo killing process with pid killing process with pid kill Vhost nightly tests fail on step nightlyvhostintegrityblk This started between commits da and e d Most likely candidate that introduced it is dd cd c All of the following logs occurred on fedoraphynightly Have only seen passes on fedoraphynightly Both machines have iommu enabled Although checking logs the failing fedoraphynightly selects PA mode and passing fedoraphynightly machines selects VA benlwalker Do you mind taking a look 