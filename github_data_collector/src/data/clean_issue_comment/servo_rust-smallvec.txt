To mirror The implementation is a straight copy of Vecs implementation only altered to call lenreserve instead of accessing the internal len and buf field respectively as those do not exist in SmallVec An extra type parameter were also required for Drain This issue popped up in context of SmallVec is often used when the common scenario is a very limited number of elements In such cases pulling in the whole complex sort mechanism is an overkill so having some sort of dumbsort which is cheap and can reasonably well handle elements would fit into smallvec These are changes that werent ready in time for Depends on unstable Rust features Use const generics to change SmallVec T N to SmallVecT N Remove the Array trait rustlangrust Support custom allocators rustlangrust Use specialization to optimize extend insertmany and from for slices of Copy types Deprecate and remove extendfromslice insertfromslice and fromslice rustlangrust Use the union representation by default and remove the optional union feature added in rustlangrust Breaking API changes Fix variance of SmallVec T N over T Constant generic is becoming more mature and I would like to know if is someone porting the existing code to use it behind a feature flag If not I might do it myself if you guys dont mind it SmallVec T N is invariant over T Although T N is covariant over T as expected This is due to SmallVecA having field of type A as ArrayItem in underlying union I propose to change that field type to A and remove A Array bound from type declaration This adds a pushlight alternative to push which is optimized for inlining and for vectors which fit inside the fixed size Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend eg I could envision a fn upholdsinvariants bool method that could be debugasserted on all methods that use unsafe thereby allowing us to fuzzcheck for mistakes we may have made wrt memory safety Alas there are some invariants we cannot check for now namely around uninitialized memory but we could at least document them We could also add more comments describing why what we do really should be safe so others can understand and try to poke holes into our thinking The slice primitive type has a tovec method which makes it convenient to convert a slice to a vector It would be great if this crate could define an extension trait that added a method called tosmallvec or some other name which did the same thing for SmallVec This makes it particularly convenient to port code to using SmallVec since you can just import that extension trait instead of converting all the calls to tovec smiley I was profiling my serde deserialization library and I went down the rabbit hole of benchmarking different KV container storage types Got down to Vec a u a u as the fastest and I wanted to see if my code would be faster by putting those string pointers on the stack So I tried out SmallVec was actually a little bit slower than vec Should this be expected I did not consider memory gains but the deserialization change doesnt make sense to me I extract my benchmark to run inside of rustsmallvec featuretest macrouse extern crate smallvec extern crate test extern crate bincode extern crate serde macrouse extern crate serdederive use selftestBencher use smallvecExtendFromSlice SmallVec bench fn smallveci benchmarkb mut Bencher use selfbincodeserialize deserialize let data let tinyvec SmallVec i smallvec let sv tinyvec serialize svunwrap biter let tinyvec SmallVec i deserialize data unwrap bench fn veci benchmarkb mut Bencher use selfbincodeserialize deserialize let data let tinyvec Veci vec let sv tinyvec serialize svunwrap biter let tinyvec Veci deserialize data unwrap bench fn smallvectuplebenchmarkb mut Bencher use selfbincodeserialize deserialize let data let k hey let v now let k youre let v an let k all let v star let k get let v your let k game let v one let tinyvec SmallVec str str smallvec k v k v k v k v k v let sv tinyvec serialize svunwrap biter let tinyvec SmallVec str str deserialize data unwrap bench fn vectuplebenchmarkb mut Bencher use smallvecExtendFromSlice SmallVec use selfbincodeserialize deserialize let data let k hey let v now let k youre let v an let k all let v star let k get let v your let k game let v one let regvec Vec str str vec k v k v k v k v k v let v regvec serialize vunwrap biter let tinyvec Vec str str deserialize data unwrap on my laptop this spits out these numbers running tests test smallveci benchmark bench nsiter test smallvectuplebenchmark bench nsiter test veci benchmark bench nsiter test vectuplebenchmark bench nsiter test result ok passed failed ignored measured filtered out Hi growing the internal buffer of the vector by factor is not ideal better would be a value close to Please read 