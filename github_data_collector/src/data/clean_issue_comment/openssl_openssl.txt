Certificate validation in general requires asynchronous operations such as OCSPCRL fetch On the other hand the callback from SSLCTXsetcertverifycallback expects a synchronous result success failure reference I find it kind of odd that any validation of this type is expected to be synchronous Is there an alternative API for certificate chain validation that supports asynchronous operations Or perhaps thats a feature worth implementing Configure creates an empty cryptoinclude which gets not cleaned up with make distclean This is for only at the time master has more to clean up Mea culpa This broke with bea ae dda c cff e cc b b where AESASM was no longer defined since AESencrypt is no longer done in assembler but what this function really needs is AESNIASM The common routine osslprovprintlabeledbignum didnt print the BIGNUM quite the way it should It treated the limbs in a big endian fashion when they are really organised in a little endian fashion Furthermore we make it inherit the behaviour from the print of legacy keys where a number starting with the high bit set gets an extra zero printed first The BIOfbuffer documentation tells in enough detail how it affects BIOgets but not how it affects BIOreadex This change remedies that Fixes This is an alternative to I think it would be good to say explicitly on the page SSLCTXsetpskclientcallback whether the maxidentitylen parameter of SSLpskclientcbfunc includes the terminating NUL byte or not The documentation of SSLread states In this case a call to SSLgeterror with the return value of the read function will yield SSLERRORWANTREAD or SSLERRORWANTWRITE When using a nonblocking socket nothing is to be done However if there has been a call to SSLwrite previously which also did not fully complete eg also returned SSLERRORWANTWRITE I would think that a SSLERRORWANTWRITE error of SSLread indicates that the previous SSLwrite should be retried instead of nothing is to be done Is this not correct Thanks the openssl speed command could not benchmark FFDH speed but it could benchmark ECDH making comparisons between the two hard this commit adds this feature fixes There are over options in this command One hundred and seventy bleedin five And of them arent documented This PR is intended to add that documentation The first commit reorders the options to put them in the same order the help output and puts them into subheads Subsequent commits will add the missing documentation This PR is based on but it also probably needs to wait for and as well This adds an analog to the currently unused x optimization from vpaesarmv pl and a ctr f implementation This PR probably should not be merged asis I havent integrated it into the C portions or even tested that it works in OpenSSL Rather this PR is so berndedlinger can look into integrating it into if it helps remove bsaesx pl which while constanttime is currently integrated with other bits that are not constanttime and is a little awkward at small inputs In BoringSSL we found that while bsaesx pl is still faster the gap became small enough that we were comfortable removing bsaesx pl and reducing the number of AES implementations we carried around Perhaps thisll help you all too See also and Note that by then we had already batched the nonconstanttime fallback for small inputs in bsaesctr encryptblocks Checklist tests are added or updated 