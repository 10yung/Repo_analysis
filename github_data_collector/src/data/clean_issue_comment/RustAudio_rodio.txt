hello I am trying to figure out how to increase the volume without decreasing the quality of the audio Ive found that increasing it beyond x and x adds little crackles to the base at least on my built in external speakers Is there any way to prevent this or is it not really possible Thanks We should consider switching to a purerust mp decoder There seem to be two alternatives puremp and sonata We should study their quality as well as their speed to find out whether adoption is feasible When playing a mono ogg file that is a different sample rate than your output devices through ChannelVolume the audio switches between the left and right channels I think it has to do with compression because it usually happens on the beat of a song Ive narrowed the issue down to SampleRateConverters Iteratornext function but I dont know much about converting sample rate so Im lost as to where the problem actually is This issue could be related to the lower level decoding library lewton but since the ogg plays perfectly fine when the sample rates match I think its related to SampleRateConverter in rodio I found this issue when using Windows with my output sample rate set to in the sound settings I was trying to play a Hz sound through the SpatialSink which in turn uses ChannelVolume Heres a minimal reprorepo Thanks Hello Im just getting started with Rust for Audio manipulation Very happy I found rodio Lots of frameworks already in place and support for different media My goal is to implement crossfading between two sources This operation seems common enough to include in the library Client code will be responsible for chaining clips sound A Crossfade end of sound A start of sound B middle of sound B Crossfade crates a mix of the existing filter FadeIn and a new filter FadeOut Based on the previous pull request for FadeOut I decided to add the filter to a structure that already knows the remaining and total duration TakeDuration I couldnt find a clean way to add a slot in TakeDuration to accept usercreated filters so instead the FadeOut is bakedin Not sure how this may effect existing TakeDuration usage Please let me know if you have any concerns or suggestions Reworks to use cpal with the event loop removed The upstream work isnt finished but I thought Id raise this anyway as I wrote the code to investigate The decoder seems not working with audio files generated by youtubedl and ffmpeg Heres a minimal repro Run Bash youtubedl ytsearch okay extractaudio audioformat mp output musicmp Build and run Rust use rodioSink use stdioBufReader fn main let device rodiodefaultoutputdeviceunwrap let sink Sinknew device let file stdfsFileopenmusicmp unwrap sinkappendrodioDecodernewBufReadernewfileunwrap sinksleepuntilend Output thread main panicked at called Resultunwrap on an Err value UnrecognizedFormat srclibcoreresultrs note Run with RUSTBACKTRACE environment variable to display a backtrace This is the same case for wav files too The audio files works perfectly with other players Its done in games like Geometry Dash In GD the orbs get bigger if the music gets louder as a visual effect I want to do something similar to that This isnt the volume method since that just gets a multiplier that we multiply with the samples to make it louderquieter I want the actual current volume that the person hears Can we please specify the platforms OS which rodio supports Are all platforms supported by cpal Windows Linux macOS iOS Emscripten supported by rodio If so I think it should be mentioned somewhere Currently I dont see the list in the documentation Thanks Hi I would like to get tags of the FLAC file Im reading Claxon FlacReader has a method for that However I cannot find a way in rodio to access the DecoderImpl here FlacDecoder to get the reader property Is it possible with the current code base Or is it require some visibility changes Thanks Im in the process of writing a player that gets its audio data from HTTP requests and would like to do so using rodio The documentation only mentions playing audio files directly not arbitrary audio data Does this crate support this functionality