Hi EduardoPires I was wondering if the application layer could have a dependency to the automapper After reading a little about architecture Clean Architecture mainly I step into the point of the Domain and Application layers never have dependencies of any other framework or libraries Can you explain it a little more and if its ok or not Thanks Whats the best way to create the migrations from a blank database Firstly it complains about not having a default constructor then I have a null when trying to get a connectionstring I can sort it out but have to change source code then copy back there has to be a simple way to this Update project to Net Core Hi Im not sure if anyone else has come across this issue where authorization will fail for certain policies and passes for others even though they are all properly registered Turns out the ClaimsRequirementHandler class is responsible and here is why var claim contextUserClaimsFirstOrDefaultc cType requirementClaimName if claim null claimValueContainsrequirementClaimValue contextSucceedrequirement It is possible for validation to fail since the FirstOrDefault will return the first matching Claim with the claim name but not necessarily the claim with its value The update below fixes the issue var claim contextUserClaimsFirstOrDefaultc cType requirementClaimName cValueContainsrequirementClaimValue if claim null contextSucceedrequirement Or am i missing something Thanks for sharing this project and also the effort that went into it Hello Before I dive into the architecture and implementation too deep could someone what got acquainted with the Equinox suggest if as it is currently it would be possible to reconstruct read DB from event store or does the even store only holds audit records and actual read entities when there will be many arent reconstructable Thanks ProblemDetails as default return errors Its based on RFC Feature Request There are several articles describing good practices around Restfull APIs and how to deal with Responses in each scenario Ill address some references at the end ASPNET Core support several different types of Response eg Ok NoContent BadRequest CreatedAtAction NotFound So Equinox could provide a more Restful approach by supporting some of these requests instead of just Ok and BadRequest and also provide an example of Patch HTTP Verb For example CreatedAtAction is a perfect response for POST because it provides a location header where data could be found Patch is a good way to prevent several Put methods like UpdateName UpdateMiddleName etc Best Practices for Designing a Pragmatic RESTful API HTTP Status Code Online Book Representational State Transfer REST There is a RFC about default response type for APIs in case of error Abstract This document defines a problem detail as a way to carry machine readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs RFC And Microsoft has a default implementation in ASPNET Core ProblemDetails So instead return a custom object in BadRequest it could return a ProblemDetails Why Support best practices Hi guys Thanks for sharing this project with the community Have benefited a lot from here just by studying and trying out the project structure Would like to clarify regarding the handling of exceptions for this project It seems like any exceptions that are found in the domain layer is not able to be captured by a global exception Example In one of my domain model constructor I were to deliberate throw an exception img width altScreenshot at PM src I would expect it to be caught by a global exception handler such as below and returns an error img width altScreenshot at PM src However the API constantly returns a OK success with no error message probably because I didnt use the domainNotification Bus I also tried implementing along with GlobalExceptionFilter Exception Middleware but to no avail It seems like the system exceptions are not surfaced to the API project Exception Handlers Have been looking for solutions for a few days now Hence any advise would be greatly appreciated Regards 