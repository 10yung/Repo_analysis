Return int from all the functions that arent dispose or free functions This allows us to gracefully fail on bad inputs instead of an assert or crashing with a segmentation fault Only functions that cannot fail will remain void This includes dispose and free which should gracefully take NULL pointers ignore them and continue giterrclear which cannot fail since it just updates pointers in global state giterrsetoom which cannot fail since it just updates pointers in global state libgit does not use typet suffixes as its redundant thus rename some internal types to remove type from the name githttpauthtypet githttpautht gititeratortypet gititeratort gitrebasetypet gitrebaset gitmergedifftypet gitmergedifft Reproduction steps Use RepositoryRetrieveStatus from libgit sharp from inside Unity D editor script download this libgit gitdifftreetoindexCrashzip download Unity f other versions crash as well open the above project select menu item Git ErrorRetrieveStatus CRASH note native crash with the log below Expected behavior No crash instead returns RepositoryStatus Actual behavior git a f dll caused an Access Violation xc in module git a f dll at cb ae Stack Trace of Crashed Thread x FFC CB AE git a f gitdifftreetoindex x FFC CBB B git a f gitstatuslistnew x C EADBF LibGit Sharp LibGit SharpCoreNativeMethodsgitstatuslistnew x C EAB B LibGit Sharp LibGit SharpCoreProxygitstatuslistnew x C E FB LibGit Sharp LibGit SharpRepositoryStatusctor x C E FB LibGit Sharp LibGit SharpRepositoryRetrieveStatus Version of libgit release number or SHA git a f but also happens with eg git ce e happened with all versions I tried Operating systems tested Windows The function gitpathresolverelative is not only used for paths but also for URLs As a result it needs to detect certain URL prefixes like for example schemata which are not to be removed during any directory traversals We already handle the schemata part correctly but we are missing the special case of SSH In contrast to most other protocols SSH uses a colon instead of a slash after the host part like for example in gitexamplecomfoo As a result gitpathresolverelative wouldve treated the complete gitexamplecomfoo part as a single directory part and thus remove it during upwardstraversal This problem is relatively easy to hit when having submodules with a relative URL As gitsubmoduleresolveurl calls out to gitpathresolverelative it mistreated SSH URLs and thus didnt compute them correctly Fix the issue by specialcasing the SSH protocol Detection makes use either of the ssh prefix or with a heuristic that tries to detect whether theres a colon before a slash Note that especially the second heuristic is error prone but it is in fact what git uses right now Add some tests to verify behaviour Fixes Reproduction steps Mount a CIFS share Initialize a Git repo with corefsyncObjectFiles Attempt to write a commit Expected behavior Write success with no errors Actual behavior An error is generated failed to fsync directory tmpmytest Invalid argument CIFS does not support fsync to a directory It seems gitfutilsfsyncdir attempts to detect if the system supports an fsync on a directory but Windows is the only check We may need to call statfs and check ftype Version of libgit release number or SHA v Operating systems tested Linux mounting CIFS share See also I have written a mostly complete implementation of reftable as a standalone library that depends only on zlib It is here subdirectory c for the C code I have some alphaquality code that integrates it into gitcore and am currently discussing how to proceed both with the gitcore team and the opensource lawyers at Google I had intended this library to also be used in libgit There are a couple of questions Do you want this in libgit as well I think so given the earlier comment How can we structure this We could keep reftable as a standaloneseparate library or it can be integrated into some other project eg libgit If it is in libgit could patches move from libgit to gitcore licensewise If we keep it as a separate library do you see licensing problems with leaving the library under Apache mhagger ethomson Previously we were using umaskmask umask to fetch the current umask in order to apply it to the desired mode but this is broken in the presence of threads There is no portable way to directly fetch umask without mutating it Instead create the file with permissions and fstat it to reverse engineer what umask was when the file was created and then apply that as a mask on the mode Fixes jmgaopore Initial test run at supporting paths on Windows Works as far as I can tell clone commit checkout etc but definitely needs more testing TODO x Do we need to respect corelongpaths or can we simply always support long paths Im assuming we need to respect it but AFAIK this exists because CLI Git for Windows doesnt support long paths across all commandsinternal scripts and is seen as experimental x Potentially keep static buffers at dynamically allocate past that Is an increase in path static buffer size from bytes to bytes too much for Win Static is nice here since there is no allocation performance penalty regardless of whether short or long paths are used Do we support variants of Windows with small stack sizes eg Windows CE Tests tests tests tests tests x Test cleanup fails DeleteFileWbuffer Reproduction steps Open a repo with ssh url like gitgithubcomlibgit libgit git use gitsubmoduleresolveurl with relative url like libuvlibuvgit Expected behavior get result gitgithubcomlibuvlibuvgit Actual behavior get wrong result libuvlibuvgit Version of libgit release number or SHA commit id db e d c b e c af d e f Operating systems tested macos This takes a different approach than as there are hardly any changes to existing code A separate transport is added for emscripten and the builtin examples are used for calling from js added an extra example for commit Instead of adding a workaround for emscripten mmap Ive submitted a PR for handling offset Would be great with some feedback on this approach compared to my previous pullrequest 