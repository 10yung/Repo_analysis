Upon installing gitmob with volta volta install gitmob I noticed that it didnt work When I invoke any of the commands eg git mob I get the following error git mob env node r No such file or directory The reason it turns out is that the package was published to NPM incorrectly on a Windows machine and the shebang line ended up being usrbinenv node r so node r is passed to env and its complaining about that You can inspect the published package using npm view gitmob latest disttarball and see the issue for yourself the files are inside bin of the tarball Since this effectively means this tool is broken for everyone on unix which is presumably what that shebang line is for in the first place I figured someone must have already reported the issue To my surprise everyone else seems to be running this tool just fine without issues I tried following the instructions and install it via npm install g without volta and surprisingly it worked When I inspected the files installed by npm I noticed that all the CRLF in the files are still present except in the shebang line This leads me to believe that this must be a commonenough problem that npm and probably yarn already corrects for specifically shebang lines that ends in CRLF in bin files Because I am using volta to install the tool it is also bypassing the correction that npmyarn would have performed So I think volta install should also do the same fix automatically even though it is ultimately a mistake by the package maintainer From a discussion on Discord While in most cases a shim delegating to a local version of a tool specified in dependencies or devDependencies makes sense there are some usecases where the user explicitly wants to use the default version of the tool In those cases we should have some method for the user to tell Volta how to resolve the binary overriding the default triage that would normally be performed It does not seem like Volta can detect system installations of tools In my case I already had Node and Yarn installed via Homebrew and I noticed that Volta does not list them When you use volta install to install a package binary from NPM volta chooses a node version to pin to that package using the following rules from the docs If the package has engines specified in packagejson use the latest LTS version of Node that meets the requirements If no LTS versions meet the requirements then use the latest overall version that satisfies engines If engines isn t available use the most recent LTS version of Node This often results in a good choice However sometimes you need to pick a different version than volta would have picked to workaround bugs For example if a dependency of the binary is broken under latest node there is currently no supported way to downgrade A current workaround is to manually edit json files under voltatoolsuserbins and voltatoolsuserpackages A related issue is that the only supported way to upgrade the pinned node version is to uninstall and reinstall the package binary A solution to the downgrade problem could probably be designed to also offer upgrades without needing to reinstall the whole package binary Recently opensslsys added support for libressl The openssl crate already had that support for some time So please add the support This is an alternative approach to the sourcing achieving the same goal as but in a different way PlatformSpec is now a trait which exposes methods that return the various sourced versions Concrete structs now exist for DefaultPlatformSpec ProjectPlatformSpec BinaryPlatformSpec and MergedPlatformSpec each of which has simpler creation semantics since the sources are known ahead of time This makes creating a PlatformSpec more ergonomic since you create the specific concrete type It also allows for more typesafety since we can ensure that Project only ever contains a ProjectPlatformSpec The readside of things is about the same as in but that wasnt a problem ergonomically anyway chriskrycho Thoughts on which is more usable understandable As part of support for installing pinning npm we need to handle all combinations of the Versions in PlatformSpec coming from different sources Currently we handle sources with a single enum that only supports values Project Default and ProjectNodeDefaultYarn This was already unwieldy and adding support for new Package Managers will result in an exponential expansion in the variants of the enum Instead we want each Version to have an associated Source independent from the other versions so that each tool can specify where it came from easily This should also simplify the merging logic by removing the need to set a toplevel Source value As of now Volta looks into the devDependencies of a package that is being installed through volta install However by definition these devDependencies dont need to be installed for a library so it would be great if volta would ignore these This would fix the situation that a version scheme is being used which Volta doesnt know in the linked issue its the workspace version protocol supported by yarn and pnpm Its a separate issue that this workspace protocol shouldnt even end up in the devDependencies which is being tracked here Using Volta to add the NPM package emptytrashcli this is my console output bash alexdilibertoAlexBookPro voltabin volta install emptytrashcli Package emptytrashcli is already installed alexdilibertoAlexBookPro voltabin which a emptytrash Usersalexdilibertovoltabinemptytrash alexdilibertoAlexBookPro voltabin VOLTALOGLEVELdebug RUSTBACKTRACEfull emptytrash Volta error Could not determine path to executable emptytrash Please rerun the command that triggered this error with the environment variables VOLTALOGLEVEL set to debug and RUSTBACKTRACE set to full and open an issue at with the details verbose Error cause No such file or directory os error stack backtrace backtracebacktracetracehaa x ac c backtracecaptureBacktracenewunresolvedhed f deb bab x ab failurebacktraceinternalInternalBacktracenewhe e fae acb x aaf failurebacktraceBacktrace as coredefaultDefaultdefaulth f c ee x ab E as voltafailFailExtwithcontexth ddf cb fd bf x f ea d voltacoretoolpackagebinfullpathhc f eb x f be b voltacorerunbinaryDefaultBinaryfromconfigh f c c def x f b voltacorerunbinaryDefaultBinaryfromnameh f d c e x f bf voltacorerunexecutetoolh d e d e x f f b shimexecuterunshimh d fb c ec f x f ef stdrtlangstartclosureh b d f f ad x f e stdpanickingtrydocallha a e a eb x c rustmaybecatchpanic x d e f stdrtlangstartinternalhcf e a dc x c ece main x f b Error details written to Usersalexdilibertovoltalogvoltaerror log verbose No custom hooks found Volta uses the volta directory to store state about the users settings as well as cached tool installs However we currently dont make any guarantees around concurrent access to that state While most access is readonly running a shim after youve already downloaded the versions it is possible to have multiple processes trying to modify the directory at the same time eg two different commands trying to download the same version of node concurrently Additionally with the introduction of migrations there is an additional set of possible mutations that can happen on multiple simultaneous invocations of Volta or one of the shims Given the potential for conflicting changes to the Volta directory we should try to perform any mutations in an atomic and concurrencysafe way so that we dont wind up overwriting the same location with multiple processes The goal should be that we can recover from any failure in a way that prevents corruption to the Volta directory Corruption here means that there is no way for us to detect and fix the problems programmatically We should also try to provide a volta repair command that can recover from the more complicated of such situations and get Volta back into a working state for the user We want them to neither have to manually edit files directory nor file an issue but rather people able to recover based on the tools that Volta itself provides