Our application use custom credentials for SQS queue on AWS Currently this is not supported in the SqsConnectionFactory and we cant modify the config for the inner sqs client configured in it What about adding a protected method for building the sqs client configuration that can be then overriden in a subclass If I use multiple connections when I register extension in service this extension applies only one instance enqueue version packagesenqueueyaml enqueue default transport amqplibenqueueamqpuserenqueueamqppassenqueueamqphostenqueueamqpportenqueueamqpvhostheartbeatontick client prefix enqueueclientprefix appname enqueueclientapp job true asynccommands true task transport amqplibenqueueamqpuserenqueueamqppassenqueueamqphostenqueueamqpportenqueueamqpvhostheartbeatontick client prefix enqueueclientprefix appname enqueuetaskclientapp asynccommands true taskevent transport amqplibenqueueamqpuserenqueueamqppassenqueueamqphostenqueueamqpportenqueueamqpvhostheartbeatontick client prefix enqueueclientprefix appname enqueuetaskeventclientapp asynccommands true servicesservicesyaml AdgoalCommon FaultTolerance RabbitEnqueue QueueFaultTolerantExtension autowire true tags name enqueueconsumptionextension priority Ive looked through the docs the code issues and pull requests but cannot find how to set the default visibliity timeout when using enqueueenqueuebundle Symfony I have found that the SqsDestinationphp has several attributes one of which is the visibilityTimeout It seems to me that this sets the Default Visibility Timeout since this default is indeed normally seconds in SQS But how do I set this attribute Looking into the SqsDriver it seems that with the standard enqueuesetupbroker its impossible to add attributes var SqsDestination queue queue thiscreateRouteQueueroute if arraykeyexistsqueuegetQueueName declaredQueues continue logDeclare processor queue s queuegetQueueName thisgetContextdeclareQueuequeue I would need to add queuesetVisibilityTimeout here before the declareQueue is called Am I correct that the only way to modify this is to extend the SqsDriver Seems to me that there is probably an easier way here Seems like many Destination classes have attributes isnt there a more generic way to configure these attributes for my application Why We are using MessagePack as a serializer instead of standard JSON and Gzip for compressing to reduce the message size so basically we do the following body value of the Interop message is processed like gzencodemsgpackpackbodyValue headers values in the same way When the message is sent from RdKafkaProducer headers are sent as native headers using producev method while still duplicated inside the Interop Message And the whole message looks like img width altheaderssent src But when the message is read from topic Gzipped and MessagePacked headers are corrupted img width altheaderscorrupted src note the difference in the headers values in producer and consumer b x F x corrupted messages The issue is those corrupted headers are merged and used as a priority here Proposed solution So in order to workaround it we need to not send it actually we dont use those native headers so it would be useful to not send extra data s we need a setting Alternative solution Alternative solution would be to not serialize native headers at all But that would be a BC break So we probably can introduce a setting to leave the headers as is disabled by default This is definitely a bug with phprdkafka or librdkafka that headers are being corrupted I will report it separately to corresponded repositories Considering configpackagesenqueueyaml enqueue default transport dsn rdkafka global bootstrapservers envKAFKABOOTSTRAPSERVERS securityprotocol ssl groupid envKAFKAGROUPID sslcalocation envKAFKAROOTCA sslcertificatelocation envKAFKACERT sslkeylocation envKAFKAKEY enablesslcertificateverification false sslendpointidentificationalgorithm none enableautocommit true topic autooffsetreset latest client and configpackagesdevenqueueyaml enqueue default transport global debug all I would like debug all to be merged to global configuration from main configuration Unfortunately it does not work this way enqueuebundle the final config for global is taken from last occurence It works when I add arrayNodeglobal ignoreExtraKeysfalse end to the Enqueue Symfony DependencyInjection TransportFactorygetConfiguration Symfonys DI container has to know that there is global node with array type which can take any options informationsource Would be great if it could be fixed in branch because were using srozemessengerenqueuetransport which currently does not allow using Enqueue Hi Im using this package within Symfony I have configured processor with custom queue because I dont want to read and write messages to enqueueappdefault queue So my processor service configuration is cacheprocessor class My CacheProcessor arguments My CacheUpdater tags name enqueueprocessor processor mycache queue mycache topic phpconst My CachePublisherSUBSCRIBEDTOPIC As you can see here the queue is mycache and after calling php binconsole enqueuesetupbroker I can see it in my rabbitMQ web interface My CachePublisher sends message through producer thisproducersendEventthisgetSubscribedTopic thismessage where getSubscribedTopic returns topic parameter value from processors tag specified earlier The problem is that it sends all messages to enqueueappdefault queue while I expect it to push them to the mycache queue Maybe I dont understand something Any help appreciated Hi how to send message by stomp to ActiveMQ through SSL This is example by using rethabstompphp opts ssl cafile storagepathcrt rootCAcrt verifypeer true producer new Stompsslcoresecureesbdmzappsokdgazpromneftlocal opts Fixes If there is any error from rdkafka extension like this one FAILrdkafkaconsumer thrdkafka bootstrap kafka bootstrap Failed to resolve kafka Name does not resolve it cant be handled or reached Maybe some exception can be thrown here