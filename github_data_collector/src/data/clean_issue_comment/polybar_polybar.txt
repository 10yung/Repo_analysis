In the case where NETNUMBEROFDESKTOPS NETDESKTOPNAMES the last branch of the getdesktopnames method would return a vector with NETNUMBEROFDESKTOPS elements because we iterate until NETNUMBEROFDESKTOPS Fixes Describe the issue The xworkspaces module will show one desktopworkspace too many when the window manager does not provide workspace names such as bwm Expected behavior The number of workspaces displayed should be equal to the actual number of workspaces Actual behavior When no names are provided the number of names is smaller than the number of workspaces This results in the names vector being filled with n values even though there are only n workspaces thus adding one name too many The would need to be removed Was it working before No this bug existed since the xworkspaces module was merged To Reproduce A minimal but complete config with which the problem occurs dosini barexample center ewmh moduleewmh type internalxworkspaces pinworkspaces false A window manager that doesnt set workspace names such as bwm is necessary Default bwm will have workspaces so the bar will display instead Polybar Log No relevant logs since no crashes etc occur Environment WM bwm Distro Arch polybar vvv polybar g cbbc Features alsa curl i mpd networklibnl pulseaudio xkeyboard X extensions randr monitors composite xkb xrm xcursor Build type Release Compiler usrbinc Compiler flags marchx mtunegeneric O pipe fstackprotectorstrong fnoplt Wall Wextra Wpedantic O DNDEBUG Linker flags WlO sortcommonasneededzrelroznow Describe the issue When running a script module that updates its contents extremely fast the formatting string passed to the parser polybar s can get corrupted In particular the formatting string is missing characters and contains unexpected characters control characters etc This was first discovered by urunningnak d on reddit here and here Was it working before Did you also experience this bug in an earlier version of polybar I also tested this with polybar and was still able to trigger this bug This has likely been here from the start To Reproduce dosini barexample modulesleft script modulescript type customscript exec tmpxsh tail true vimset ftdosini tmpxsh bash usrbinenv bash bars bars F f Fff F ff Ff bars F f F F f F F f FFff F F f FFff F F f FFff FFf F F f FFff FFf F bars F f FF f Fff FF f Ff FF f F ffFF f F fFF f Ff fFF f while true do for b in bars do echo b done done Since this is likely a race condition bug you cannot always reliably reproduce this Try to use some of the other bars arrays From what I have found the bug is easier to reproduce with larger strings with strings with more formatting tags because you also get parser errors and with strings containting multibyte characters because you get cairo UTF errors Polybar Log The bug is not necessarily obvious if you dont look at the log I was able to get the following warnings and errors error cairoscaledfonttexttoglyphsinput string not valid UTF warn Dropping unmatched character U I was also able to get a parser error but I cant find the log message and am not able to reproduce that error again The cairo error only happens once and after that no text will be rendered on the bar until it is restarted Environment WM HerbstluftWM Distro ArchLinux Output of polybar vvv polybar g e e Features alsa curl i mpd networklibnl pulseaudio xkeyboard X extensions randr monitors composite xkb xrm xcursor Build type Release Compiler usrlibccachebinc Compiler flags marchx mtunegeneric O pipe fnoplt Wall Wextra Wpedantic O DNDEBUG Linker flags WlO sortcommonasneededzrelroznow Additional context The bug occurs before formatting string is sent to the parser because the formatting string polybar s is already malformed The expected sequence of formatting strings would be lPR lPR lPR But polybar s gave me things like ldPR With the last bars variable I was even able to get l W F f PR This one is particularly interesting I always thought the issue lies in the script module not correctly reading input but l is generated by the controller But I have found out that the entire l is still generated it just doesnt show up in the output of polybar s because it is followed by the b backspace control character which makes it look like things were deleted even though they still exist in the generated text I confirmed this by adding the following patch to polybar patch diff git asrcmodulesscriptcpp bsrcmodulesscriptcpp index eb c e asrcmodulesscriptcpp bsrcmodulesscriptcpp namespace modules while mstopping fd mcommandisrunning ioutilpollfd POLLHUP if ioutilpollreadfd continue else if moutput mcommandreadline mprev mprev moutput broadcast else moutput mcommandreadline forchar c moutput assertiscntrlc if moutput mprev mprev moutput broadcast namespace modules return forchar c moutput assertiscntrlc if mlabel mlabelresettokens mlabelreplacetokenoutput moutput forchar c mlabelget assertiscntrlc string cnttostringmcounter This also showed me that the command output is read correctly at least it doesnt contain control characters But the first assertion fails in the getoutput method So moutput is read from mcommand fine and at some point in between that and getoutput gets corrupted I tried putting a lockguard with a new mutex everywhere moutput is used but I got a deadlock and couldnt figure out why Lomadriel do you mind taking a look at this Maybe you have some insights here I have just successfully compiled polybar for Debian Buster and packaged it up into an installable deb package that I can throw into my own local repo This has several advantages I can build the package in a container and deploy to my normal system without having to install all of the build dependencies on it When installing the package from my local repo APT will do the dependency resolution for me and only install the runtime dependencies Right now the packaging option in CMake is turned off my default Building the package works via the new package target Open questionsfuture work Possibly add the package building option to buildsh Maybe automatically build packages on Travis CI and deploy via GitHub releases Perhaps users do not want to build both DEB and RPM for which theyd have to have dpkg and rpm installed so maybe split the CMake option into two Here is what building the package looks like in the terminal console rootdebianpolybarbuild make package Built target xpp Built target jsoncpplibstatic Built target i ipc Built target poly Built target polybar Built target polybarmsg Run CPack packaging tool CPack Create package using TGZ CPack Install projects CPack Run preinstall target for polybar CPack Install project polybar CPack Create package CPack package rootpolybarbuildpolybar Linuxtargz generated CPack Create package using RPM CPack Install projects CPack Run preinstall target for polybar CPack Install project polybar CPack Create package CPackRPMDebug Using CPACKRPMROOTDIRrootpolybarbuildCPackPackagesLinuxRPM CPackRPM Will use GENERATED spec file rootpolybarbuildCPackPackagesLinuxRPMSPECSpolybarspec CPack package rootpolybarbuildpolybar Linuxrpm generated CPack Create package using DEB CPack Install projects CPack Run preinstall target for polybar CPack Install project polybar CPack Create package CPackDeb Generating dependency list CPack package rootpolybarbuildpolybar Linuxdeb generated Packaged and available in official repos Now on QA Please hold a little bit this PR and dont merge until status in Bodhi will be changed from PendingTesting to Stable DeepinScreenshotselectarea TEAM EDIT Closes Closes If you want to create a polybar package for your distro please read this page in our documentation If you are already maintaining a polybar package in some distro please subscribe to this thread We will post a comment here whenever there is a new release and we will also include anything that has changed for building and packaging the new version This thread is not intended for discussions of new releases please do not comment here we dont want to spam people that have subscribed to this thread If you have any issues or questions about packaging the new release please open a new issue or ask on Gitter This is a first proof of concept for something discussed in I separated out all the backend logic in the cpu module that gathers the data for the module into an adapter that is instantiated by the module I also tried to see how well the module state machine idea could be implemented Separating out this backend logic that talks to the outside world to gather data has the benefit that it makes the cpu module more easily testable by creating a mock implementation of the adapter It theoretically also allows for implementing multiple adapters that work on different OSes though I have not implemented any of that yet The idea for the module state machines was to make the module more robust but also have things like warning states for high usage etc Im not really sure the adapter is the right place to put that state machine For one if there are multiple adapters each would have to reimplement the warning states and so on even though the logic for those is the same Also the adapter should only be responsible for gathering data and the frontend should be responsible for deciding if we are in a warning state or not Maybe it would be a better idea to divide each module into three components The adapter Is responsible for gathering information for the module The module state machine Calls the adapter to read information and handles state transitions should either the adapter return an error or should the new data indicate a new state high temperature battery dischargingcharging The module itself Triggers updates in the state machine Determines the format to use depending on the state Reads data from the state machine and uses it to produce the module output Lomadriel what are your thoughts on the module state machine idea As I see from the installation instructions there are no specific way to install polybar in Debian based distros which gives me the following question Will polybar be packaged under Debian format If not can I try to do something about it This is a basic implementation of padding for progressbar based loosely on the implementation for label I also looked at animation and ramp but it appears they should get padding support automatically due to the use of loadoptionallabel and copyundefined in their load methods This was targeting at resolving issue Is your feature request related to a problem Please describe We only can declare static path this is not modular Why does polybar need this feature Make configuration more modular Describe the solution youd like It would be great to create file per module in a modulesd and add in config includefiles modulesd 