The issue is described in detail on this SO question Basically I have a situation where the release pipeline cannot create some resources but the Service Principal is good and the terraform configuration is good as well tested in the Azure Cloud Shell using the same principal and the same terraform files Setting AWS service connection as optional allows the use of environment variables to authenticate AWS CLI commands against Reference for further details Currently TerraformTaskV requires a mandatory AWS Service Connection parameter Making the service connection mandatory is a major roadblock for using AWS credentials set as environment variables AWS CLI tasks support this as a native authentication option and Amazonmanaged Azure DevOps tasks leave the AWS Service Connection parameter as optional I need to be able to set parameters such as AWSACCESSKEYID AWSSECRETACCESSKEY AWSSESSIONTOKEN in the environment and run scripts using these for temporary authentication instead of creating a service connection Please set the AWS Service Connection as optional for TerraformTaskV to allow this Is hard to review the generated plan Example Here is an output plan from another Terraform extension Please clean up the output When you configur plan or validte task to one provider for instance AWS and then change to other Azure the reference for service connection is not removed and if you try to import and export the pipeline you get errors I have a selfhosted DevOps agent running on a server with an installation of Visual Studio Build Tools that includes the MicrosoftVisualStudioComponentSQLSSDTBuildSku component Despite the fact that SqlPackage is listed as a capability on the agent whenever a job with the SqlDacpacDeploymentOnMachineGroupV task link to task repo is run on this agent the task fails with the error Unable to find the location of Dac Framework SqlPackageexe from registry on machine Machine Name I traced this issue to the vswhere command changed in this PR Since VS Build Tools doesnt show up in the list of VS Installations by default when using vswhere the SqlPacakgeexe included in the MicrosoftVisualStudioComponentSQLSSDTBuildSku component installed on Visual Studio Build Tools is never found The addition of the products argument will list all installed Visual Studio products including installations of VS Build Tools This issue appears to be related theyre using SSDT as well although its not clear if its through a VS Build Tools installation Hi all I tried to install IIS Web App Deployment Using WinRM but I kept getting the error taskjson file was not found in contribution I found out that the version of TFS TFS RTM TFS Version that I am isnt compatible with the marketplace version I also tried manually downloading the latest version here and it is different looks buggy from the version that I have on my preproduction environment Aside from upgrading my environment does anyone know of any alternatives or a lower version of this vNext custom task that I can install Thanks Randy In a fresh environment running this script Does not work with Az PowerShell Module v installed The following error occurs Script requires AzureRM modules to be present Obtain AzureRM from Please refer terTasksAzureResourceGroupDeploymentV READMEmd for recommended AzureRM versions This is an enhancement request to support the latest version of the Az PowerShell module Users should not have to install an older Azure PowerShell module to run this script Reproduce Clean environment ie Windows Sandbox Install Az module InstallModule Name Az Repository PSGallery Force Answer Yes to NuGet prompt Restart PS environment ISE Open or copy and paste SPNCreationps and execute Environment Windows v PowerShell v Edition Desktop Build Azure Retail PAYG Subscription In Azure DevOps for the Terraform extension for the azurerm provider it seems that the validate and validate apply stages throw an error as per below if using an Azure Subscription service connector that is created by a Service Principle Error Error building ARM Config Azure CLI Authorization Profile was not found Please ensure the Azure CLI is installed and then login with az login it seems it doesnt pass extra vars or pass through the Service connection IDs for the Azure subscription As a result the extension should be able to extract this info from the Azure DevOps service connection and build the Environment Variables This works for Terraform Plan so looks like a bug in the validate validate apply which is now a blocker for our deployments Full error below T Z section Starting Terraform azurerm T Z T Z Task Terraform T Z Description Execute terraform commands to manage resources on AzureRM Amazon Web ServicesAWS and Google Cloud PlatformGCP T Z Version T Z Author Microsoft Corporation T Z Help Learn more about this task T Z T Z command C hostedtoolcache windows terraform x terraformexe validate T Z m T Z m mError m m mError building ARM Config Azure CLI Authorization Profile was not found Please ensure the Azure CLI is installed and then login with az login m T Z T Z m m m T Z error Error The process C hostedtoolcache windows terraform x terraformexe failed with exit code T Z section Finishing Terraform azurerm Im not sure if this code is supposed to address this in azureterraformcommandhandlerts public handleProvidercommand TerraformAuthorizationCommandInitializer if commandserviceProvidername processenv ARMSUBSCRIPTIONID tasksgetEndpointDataParametercommandserviceProvidername subscriptionid false processenv ARMTENANTID tasksgetEndpointAuthorizationParametercommandserviceProvidername tenantid false processenv ARMCLIENTID tasksgetEndpointAuthorizationParametercommandserviceProvidername serviceprincipalid false processenv ARMCLIENTSECRET tasksgetEndpointAuthorizationParametercommandserviceProvidername serviceprincipalkey false If so its not working on the validate plan and apply stages When I am running validate and apply step it is failing on terraform validate as it is not passing additional command arguments Is there a way to run apply only without validation in the same step