I am told the proper way is use modelBuilder and hasData I asked a questions about it here I am trying to figure out the correct way to have the code so that on new releases I can seed data as well as change the model Im curious about preparing for Blazors release next spring in terms of implementing it for eShopOnWeb Id thought Id read a post by ardalis somewhere but Ive poked around without finding anything Has anything addressing this been published Perhaps we are still too far out from release to do anything really productive seems theres still work for Core x to be completed Am generally just interested in find out next steps for the project thx There is no implantation details for the GroupBy and Select in SpecificationT pattern Please add this showing how we can get the data based on GroupBy using the SpecificationT pattern For example how can I build the following equivalent output uisng SpecificationT pattern var empAvgSalary contextSetEmployeeGroupBye new eEmployeeName eDepartmentName Selectgroup new EmployeeName groupKeyEmployeeName DepartmentName groupKeyDepartmentName AvgSalary groupAveragee eSalary ToList Thank you I noticed that the naming of the test methods is not consistent in the whole repository It may improve readability and orientation while navigating through the tests Maybe you could stick to a schema like the one mentioned here Thanks for maintaining this repository It is really a great guide This is a quick example of a way to bubble up an error that was thrown by a service in ApplicationCore or the business logic Just for an example the business gave us a rule that a customer cannot add more than of the same item to their cart Since this logic should not be in the Web project it lives in the BasketService In the BasketService we will throw an InvalidOperationException when the input breaks the business rule In the Controller we then put a trycatch around the existing call and catch the specific exception We then need to display something to the user when that specific exception had been caught so we can add an ErrorMessage property to the ViewModel When we catch the exception we can set the ErrorMessage value and if there is a value present we can display that to the user on the frontend indicating what went wrong Steps to see the error Login with the demo user Add an item to your cart Navigate to the cart Try to update the quantity of the item to or more You should see a new message display at the bottom indicating that an error occurred The example uses LocalDb as development which is only a valid option on Windows Using SQLite as development database will work on all platforms Build everything Run all the tests Update a badge on README This issue builds further on the idea of Currently all the validation logic of the domain models are happening in the Constructor which is not always the best choice since the properties are set via a private setter This means we can still manipulate them in the domain entity itself even if its invalid Since EF Core doest use the setter but the backing field and not revalidating each time We should move our Validation logic into the setter instead of the constructor This makes sure the property and entity are never in an invalid state Altough this will create additional Fields An example In Basketcs were even using a public setter for the buyerId without a constructor As of EF Core we can use Private ConstructorsSetters to encapsulate the Domain EF used to break the encapsulation principal of the domain since we had to use Public Setters but as of we can use a real DDD approach again I do believe we should promote this feature First of all thanks a lot for this great and very useful repo It will be Great to Add an eShopOnSPA Angular Example to this Repo without all the complications of microservices and containers in here 