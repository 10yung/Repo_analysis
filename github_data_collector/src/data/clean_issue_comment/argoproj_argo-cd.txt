Checklist X Ive searched in the docs and FAQ for my answer X Ive included steps to reproduce the bug X Ive pasted the output of argocd version Describe the bug When using ArgoCD to create subscriptions to operators from operatorhub Argo only tracks the objects used for the subscription ie a subscription operatorgroup and then tracks these objects and the installPlan that the subscription creates However it doesnt detect any of the other objects that are also generated clusterserviceversion deployments pods etc What logic determines what objects are picked up Are there labels that can be applied to these generated objects via a hook to have them included A clear and concise description of what the bug is I would like to see all objects that are generated by my application so that I have a full picture of my deployment To Reproduce Apply the following configuration in a cluster running Operator Lifecycle Manager operatorgroup apiVersion operatorscoreoscomv kind OperatorGroup metadata name myoperatorgroup namespace mynamespace spec targetNamespaces mynamespace subscription apiVersion operatorscoreoscomv alpha kind Subscription metadata annotations argocdargoprojiosyncoptions Validatefalse name opendatahub namespace mynamespace spec channel alpha installPlanApproval Automatic name opendatahuboperator source communityoperators sourceNamespace openshiftmarketplace Once this has been applied youll notice that the operatorgroup and subscription are tracked as well as a generated installPlan However no other objects ie the operator deployment or pods are detectedtracked Expected behavior I would like to see all objects that are generated by my application Screenshots NA Version shell argocd v be c BuildDate T Z GitCommit be c ce db f c c cfdfb e bf GitTreeState clean GoVersion go Compiler gc Platform darwinamd argocdserver v be c BuildDate T Z GitCommit be c ce db f c c cfdfb e bf GitTreeState clean GoVersion go Compiler gc Platform linuxamd Ksonnet Version v Kustomize Version Version Versionkustomizev GitCommitd b c f cf f a aac f BuildDate T Z GoOslinux GoArchamd Helm Version v Kubectl Version v Logs NA Summary The input box during creation and edit of an app using a custom config plugin for ENV vars is a simple input When multiline values are input the rendering is bad visually nonedit mode and during edit its very cumbersome Motivation Writing a custom configuration plugin which will have ENV vars that could potentially be quite large blocks yaml etc Proposal Change inputs to textareas Example snippet to illustrate the issue plugin name helmfile env name KUBEVERSION value name HELMFILEHELMFILE value repositories name stable url name elastic url name influx url name kiwigrid url releases name grafanatwo namespace monitoring chart stablegrafana set name adminPassword value admin name persistenceenabled value true name ingressenabled value true name ingresshosts value grafanaexamplecom name ingressannotationskubernetes ioingress class value traefikinternal name grafana iniauthdisableloginform value true name grafana iniauth anonymousenabled value true name grafana iniauth anonymousorgrole value Admin Summary Set the ENV vars so plugins can have access to the required data during rendering processes Motivation Im building a custom helmfile integration which invokes helm behind the scenes To sanely invoke the commands Ill need access to the data thats appropriate to a given cluster Proposal Just set the vars in the execution environment of the init and generate phases Summary Connections to eks clusters should use the aws cli to get the connection token instead of awsiamauthenticator awsiamauthenticator hasnt released in over months and thus still does not support OIDC based IAM role assumption as described here Motivation Were setting up an argocd instance in a tools EKS cluster and we want it to connect to other EKS clusters via IAM The awsiamauthenticator doesnt pick up the AWSWEBIDENTITYTOKENFILE environment variable Master of awsiamauthenticator pulls in an updated SDK version that should work but its not released yet and it doesnt seem like they will release any time soon The AWS cli seems to be better supported and more frequently updated Proposal Replace awsiamauthenticator with aws cli Checklist x Ive searched in the docs and FAQ for my answer x Ive included steps to reproduce the bug x Ive pasted the output of argocd version Describe the bug When you have two different Application objects each of which is managing the others Application then argocd thinks that both are in a degraded state even though neither is It may sound like an unusual setup but Im bootstrapping my cluster My argocd application contains the App of Apps root and the root contains the definition for the argocd application This way all I have to manually install is the argocd application and the rest builds itself up To Reproduce Its super simple to setup with one repository and two subpaths like so repo first resourcesyaml secondapplicationyaml second otherresourcesyaml firstapplicationyaml Expected behavior Ideally argocd would be able to safely detect the loop by marking apps and choosing not to redescend but if you want to declare this as nonsupported I would understand that choice Version shell penguin argocd version argocd v be c BuildDate T Z GitCommit be c ce db f c c cfdfb e bf GitTreeState clean GoVersion go Compiler gc Platform linuxamd argocdserver v be c BuildDate T Z GitCommit be c ce db f c c cfdfb e bf GitTreeState clean GoVersion go Compiler gc Platform linuxamd Ksonnet Version v Kustomize Version Version Versionkustomizev GitCommitd b c f cf f a aac f BuildDate T Z GoOslinux GoArchamd Helm Version v Kubectl Version v close I upgraded Go to the latest version shell git grep E No hits git grep E circleciconfigyml name Install Golang v circleciconfigyml go get golangorgdlgo circleciconfigyml e homecirclecisdkgo go download circleciconfigyml echo export PATHhomecirclecisdkgo bin PATH tee a BASHENV circleciconfigyml homecirclecisdkgo DockerfileFROM golang as builder DockerfileFROM golang as argocdbuild hackDockerfiledevtoolsFROM golang as builder Checklist x this does not need to be in the release notes x The title of the PR states what changed and the related issues number used for the release note x Ive updated both the CLI and UI to expose my feature or I plan to submit a second PR with them x Ive signed the CLA and my build is green troubleshooting builds Checklist Ive searched in the docs and FAQ for my answer Ive included steps to reproduce the bug Ive pasted the output of argocd version Describe the bug ArgoCD is crashing when a broken csv policy is applied If ArgoCD is configured to track itself from the git then the fix of the policy will not be applied because argocdserver crashed and not receiving any updates Only manual kubectl apply will help to recover argocdserver To Reproduce apply the argocdrbaccm ConfigMap with a broken policycsv For Example apiVersion v kind ConfigMap metadata name argocdrbaccm data policydefault rolenone policycsv g maximtacuexamplecom roleadmin scopes email A comma is missing after the email in the example above Expected behavior A policy csv syntax checker would be NICE TO HAVE in argocd before applying it In case if a broken policy is pushed the best way would be to discard policies to none or readonly for everyone until a new fix will be releasedpushed to the repo which is tracked by argocd and applied by itself without any manual intervention Version Currently we just upgraded to the latest one but all versions are affected shell argocd version argocd v rc af f BuildDate T Z GitCommit af f ad fa d b d f aedcdb f a GitTreeState clean GoVersion go Compiler gc Platform linuxamd argocdserver v rc af f BuildDate T Z GitCommit af f ad fa d b d f aedcdb f a GitTreeState clean GoVersion go Compiler gc Platform linuxamd Ksonnet Version v Kustomize Version Version Versionkustomizev GitCommitd b c f cf f a aac f BuildDate T Z GoOslinux GoArchamd Helm Version v Kubectl Version v Logs Argocdserver crash logs panic grouping policy elements do not meet role definition goroutine running githubcomcasbincasbinmodelAssertionbuildRoleLinks xc ef x f xc d gosrcgithubcomcasbincasbinmodelassertiongo x bd githubcomcasbincasbinmodelModelBuildRoleLinks xc fd x f xc d gosrcgithubcomcasbincasbinmodelpolicygo xd githubcomcasbincasbinEnforcerBuildRoleLinks xc c d gosrcgithubcomcasbincasbinenforcergo x githubcomcasbincasbinEnforcerLoadPolicy xc c d x x gosrcgithubcomcasbincasbinenforcergo xa githubcomargoprojargocdutilrbacEnforcerSetUserPolicy gosrcgithubcomargoprojargocdutilrbacrbacgo githubcomargoprojargocdutilrbacEnforcersyncUpdate xc f xc c xc d x x gosrcgithubcomargoprojargocdutilrbacrbacgo x githubcomargoprojargocdutilrbacEnforcerRunPolicyLoader xc f x d c xc d xc d x x gosrcgithubcomargoprojargocdutilrbacrbacgo x ac githubcomargoprojargocdserverArgoCDServerrbacPolicyLoader xc d a x d c xc d gosrcgithubcomargoprojargocdserverservergo x f created by githubcomargoprojargocdserverArgoCDServerRun gosrcgithubcomargoprojargocdserverservergo x c Summary ArgoCD automatically refreshes every minutes IMO it would be a great improvement to make this schedule configurable via the Helm charts valuesyaml Motivation Configuring a shorter schedule time could lead to shorter feedback cycles for developers without the need to implement a webhook eg if your repository solution is not supported by Argo CD yet Proposal I would love to see this beeing configured via the Argo CD Helm charts valuesyaml Summary Maybe a spinning wheel or something to indicate that a request is inflight 