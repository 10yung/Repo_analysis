 Hi The Compute Particles example uses vkCmdPipelineBarrier on lines and with the pipeline stage VKPIPELINESTAGEVERTEXSHADERBIT respectively as srcStageMask and as dstStageMask VKACCESSVERTEXATTRIBUTEREADBIT is used by both barriers as respectively the srcAccessMask and dstAccessMask However the Vulkan specification indicates that VKACCESSVERTEXATTRIBUTEREADBIT can only be used with a corresponding pipeline stage of VKPIPELINESTAGEVERTEXINPUTBIT as opposed to VKPIPELINESTAGEVERTEXSHADERBIT This is also picked up by the core validation layers If this is indeed a typo in the code is it meant to read VKPIPELINESTAGEVERTEXINPUTBIT as the pipeline stage for both barriers Cheers This PR adds a clangformat file to the root of the repository and also reformats the contents of the base directory based on this file Ive attempted to setup the format file to produce the minimal possible changes although I wasnt able to produce one that created NO changes mostly due to inconsistent use of spaces vs tabs in the code clang format will reformat to one or the other inconsistent use of brace positioning in the code some small items I dont know how to tell clangformat to do pbrtexture homewjlgithubVulkanbaseVulkanTexturehpp void vksTexture DloadFromFilestdcxx string VkFormat vksVulkanDevice VkQueue VkImageUsageFlags VkImageLayout bool Assertion result KTXSUCCESS failed Aborted core dumped GDB results GIraise raisec x ffff cae GIabort abortc x ffff cc assertfailbase assertc x ffff bc a GIassertfail assertc x ffff bc vksTexture DloadFromFile VulkanTexturehpp x aac a VulkanExampleloadAssets maincpp x b ab VulkanExampleprepare maincpp x baec main maincpp x a d Break point texturesaoMaploadFromFileASSETPATH modelscerberusaoktx VKFORMATR UNORM vulkanDevice queue Improve the documentation with blueprints in SVGPNG format for each of the current and future examples This extension was promoted to core and there are various implementations which support only the core version There seems to be no precedent for samples doing something different in a environment though so unsure how you want to do this Currently VulkanUIOverlay references the RobotoMediumttf by relative path to the compiled binary which can results in the following error I suggest using getAssetPath for all data file accessing which is defined in Two minor changes Added the NUMSHADERGROUPS macro to the raytracingbasic example Removed the unused VkDeviceSize offset variable from all ray tracing examples Removed unnessessary line data shaderGroupHandleSize in the copyShaderIdentifier function Enchancement suggestion Add examples of water reflect and refract