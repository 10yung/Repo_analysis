like title Looks like a VecStruct works and an OptionStruct works but an OptionVecStruct does not error E no method named validate found for type stdvecVecmodelexecuteAlertLanguageContentMap in the current scope srcmodelexecuteAlertrs deriveDebug Serialize Deserialize Validate rust validate languageContentMap OptionVecLanguageContentMap This will build if I remove the validate This rust validaterangemin max northing f Doesnt work error procmacro derive panicked srcmodelgeospatialrs deriveDebug Serialize Deserialize Validate help message internal error entered unreachable code Got something other than a list of attributes while checking field northing Should this be supported If I have the following rust pub struct Polygon validate validatelengthmin max messageINVALIDTARGET codePolygon is constructed of less than or more than points vertices VecCoordinates pub struct Coordinates validatecustommessageINVALIDTARGET functioneastingvalidator easting f validatecustommessageINVALIDTARGET functionnorthingvalidator northing f And the validation on vertices fails then I do not get validation errors on easting or northing Is there a way to get both in one response Im using nested validations and it would be great if there was a simple way to get at the ValidationError objects At the moment its obscured by the many levels of ValidationErrors I suggest to handle the derive macro like serde and create a derive feature Then only rust use validatorValidate is needed Edit I am not sure if is related Hi I would like to validate enums for example rust enum A A a u A b String Is this possible From rust for length from to is excluded validatelength for length from to is included validatelength for length equal to validatelength To replace minmaxequal Thoughts Some issues with path resolution for regex and functions Seeing maybe we can The next branch is using attrliterals already 