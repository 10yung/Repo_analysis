Hi Thank you for PHPCompatibility it helps to check my phpBB extensions for code compatibility A small suggestion I use my own test system for phpBB extensions and I show the version of PHPCompatibility on the report page Currently I use RegEx to retrieve the version from CHANGELOGmd This works but it would be much more stable if I can simply read composerjson Regards The NewLateStaticBinding sniff was underreporting for instanceof static and new static Fixed now Includes unit tests This Updates the minimum requirements in composerjson the README and the CONTRIBUTING docs Updates the Travis script to no longer test against PHP nor PHPCS Updates the LowPHPCS and LowPHP sniffs to reflect the new minimum and recommended PHP and PHPCS versions Updates the PHPCS ruleset to now longer check the code of PHPCompatibility for crossversion compatibility with PHP Includes removing any and all workarounds for supporting PHPCS and PHP which I could find in the codebase See the individual commits for full details Closes The following code triggers a syntax error on PHP versions below php class MyClass const MYCONSTANT value class AnotherClass public prop public function construct thisprop new MyClass instance new AnotherClass echo instancepropMYCONSTANT Parse error syntax error unexpected TPAAMAYIMNEKUDOTAYIM Can this be detected Version Description Usage of a string as the assertion became deprecated It now emits an EDEPRECATED notice when both assertactive and zendassertions are set to assert is now a language construct and not a function assertion can now be an expression The second parameter is now interpreted either as an exception if a Throwable object is given or as the description supported from PHP onwards The description parameter was added The description is also now provided to a callback function in ASSERTCALLBACK mode as the fourth argument Source Please add detection for PHP Notice Only variables should be passed by reference for native PHP functions Example site end explode path PHP Notice Only variables should be passed by reference I was directed here from a PHPCS feature request Call time pass by reference was removed in PHP and this was reclassified as a Notice in PHP Note that this is not currently detected by SyntaxCallTimePassByReference sniff Proposal There are certain tokenizer quirks especially around the changes in integers like binary integers and numeric literals with underscores which are making supporting PHP more and more complicated Id like to propose for PHPCompatibility to drop PHP support once PHP comes out The new minimum PHP version will then be PHP which is still ancient PHP has already been the minimum recommended PHP version since June cb c f ff a b f fca In anticipation of this Id like to suggest adding a PHPCompatibilityUpgradeLowPHP sniff to warn people who are still running PHPCompatibility on PHP about the impending change in the minimum requirements Proposal Along the same lines Id like to propose we drop support for PHPCodeSniffer at the same time PHPCodeSniffer has already been the minimum recommended PHPCS version for PHPCompatibility since August f ca fe a ba e a a Additionally the LowPHPCS upgrade warning sniff has been in place since July and has not generated any support requests Open questions If this proposal is accepted it would be a good idea to set new higher recommended PHP and PHPCS versions when the version drop is implemented Id like to suggest the following for those PHP PHPCS This is just an issue to keep track of which of the implemented RFCs for PHP have been addressed This list should be updated when additional RFCs are acceptedimplemented To Do Always generate fatal error for incompatible method signatures Resolve inconsistent handling of abstract and nonabstract methods during inheritance Arrays starting with a negative index Proposes to make implicit array keys consistent Consistent type errors for internal functions Consistently throw TypeError for parameter parsing failures of internal functions JIT Just in Time Compiler Claimed None so far Has PR None so far Reviewed and concluded nonsniffable None so far Process If anyone starts work on updating PHPCompatibility to handle any of these issues please either update the above list if you can or leave a comment below so one of the maintainers can update the list Once PHP comes out individual issues should be opened for the changes which remain at that point in time This is just an issue to keep track of which of the implemented RFCs for PHP have been addressed This list should be updated when additional RFCs are acceptedimplemented To Do EWARNING for invalid containers Raise EWARNING for array access on invalid containers Notes This is very likely impossible to sniff for reliably The only code pattern I can currently come up with which could be used to find at least some of these would be to sniff for isarray var key and to verify that this is preceded by a check with isset var key but that would still only find a small percentage of the problem cases and will also flag false positives where the additional isset is not needed as the key will always exist Base Convert improvements Changes to base convert to warn the user when incorrect values are passed Also allow negative numbers to be parsed Covariant Returns and Contravariant Parameters Preloading Preload PHP functions and classes once and use them in the context of any future request without overhead Improve opensslrandompseudobytes Proposes making opensslrandompseudobytes fail closed and deprecate the second parameter Escape PDO parameter placeholder Changes to PDO to allow using operators containing with pdopgsql most commonly the JSON key exists operator Deprecations for PHP Functionality to be deprecated in PHP and removed in PHP Sublist arraykeyexists with objects Reflection export methods Unbinding this from nonstatic closures Claimed Numeric Literal Separator Enable improved code readability by supporting an underscore between digits in numeric literals Status Basically done just waiting for a decision on how this will be tokenized in PHPCS see the below linked issue Owner jrfnl Notes Any sniff which looks at TLNUMBER and TDNUMBER will also need to be examined to verify they can handle these type of numbers correctly If so unit tests proving this should be added to the sniff If not sniffs may need adjusting andor an issue may need to be opened in PHPCS upstream to discuss how to handle this change from a Tokenizer perspective Also see Arrow functions Adds short closures arrow functions Status WIP Owner jrfnl Notes This change causes the double arrow to take on an additional role and existing sniffs which look at the TDOUBLEARROW token should also be reviewed This change introduces a new way to declare functions and existing sniffs which look at function declarations should also be reviewed This change introduces a new token TFN which PHPCS currently does not yet backfill for older PHP versions Also see This change introduces a new semireserved keyword Has PR A heavycheckmark indicates that the PR has been merged x heavycheckmark Deprecate alternate access to array elements and chars in string Deprecate curly braces array and string syntax access x heavycheckmark Allow throwing exceptions from toString PR Support throwing exceptions from toString x heavycheckmark Spread Operator in Array Expression PR x heavycheckmark Deprecate leftassociative ternary operator PR Deprecate nesting of ternaries without explicit use of parentheses x heavycheckmark Deprecate and remove extinterbase PR Deprecate and eventually remove the InterBase extension in the Core x heavycheckmark weakrefs PR x heavycheckmark FFI Foreign Function Interface PR x heavycheckmark Typed Properties PR Add support for typed properties including static properties and references to typed properties x heavycheckmark Null Coalesce Equal Operator PR Allow shorthand for self assigning null coalesce operator x heavycheckmark Password Hash Registry PR Make the mechanisms used by passwordhashverifyetc extensible by other modules x heavycheckmark mbstrsplit Split multibyte string PR x heavycheckmark Reflection for references PR Introduces the ReflectionReference class to allow detecting references and determining reference equality x heavycheckmark Unbundle extwddx PR x heavycheckmark New custom object serialization mechanism PR Introduces new custom object serialization mechanism to replace Serializable x heavycheckmark Change the precedence of the concatenation operator PR x heavycheckmark Argon support from sodium PR Provide passwordhash support for argon iargon id from extsodium if standard does not x heavycheckmark Unbundle extrecode PR Deprecations for PHP Functionality to be deprecated in PHP and removed in PHP Sublist x heavycheckmark The real type PR x heavycheckmark Magic quotes legacy PR x heavycheckmark FILTERSANITIZEMAGICQUOTES filter PR x heavycheckmark mbstrrpos with encoding as rd argument PR x heavycheckmark implode parameter order mix PR x heavycheckmark hebrevc function PR x heavycheckmark convertcyrstring function PR x heavycheckmark moneyformat function PR x heavycheckmark ezmlmhash function PR x heavycheckmark restoreincludepath function PR x heavycheckmark allowurlinclude ini directive PR Reviewed and concluded nonsniffable Always available hash extension Proposes to make the hash extension available to every build of PHP Notes The only thing which could be sniffed for is calls to extensionloaded functionexists et al checking for the availability of the hash extension Those calls are no longer needed However this is not a compatibility issue those calls will now always return true so leaving them in place doesnt break anything This might be something to sniff for in the PHPModernizer standard with a recommendation that those calls can now be removed Process If anyone starts work on updating PHPCompatibility to handle any of these issues please either update the above list if you can or leave a comment below so one of the maintainers can update the list Once PHP comes out individual issues should be opened for the changes which remain at that point in time I understand what the ForbiddenGlobalVariableVariable sniff is checking for but am slightly surprised by one of the warnings it generates WARNING Global with anything other than bare variables is discouraged since PHP Found Key This is not mentioned anywhere in the PHP manual including in the migration guide As far as I know there is no reason why variable variables should cause a problem if they are unambiguous even when used in a global declaration I have done some sleuthing and have found that this was added as an outcome of this conversation which quoted the migration guide As a general principle using anything other than a bare variable with global is discouraged However a Google search for this phrase gives very little It looks like this existed in an old version of the guide but it appears that it has since been removed and is therefore no longer something that should be sniffed for