 Hello there is there any way that i can change the schema of the table that i am using on a per use for example usersschema change schema before execution usersfetchAll reason behind this is that i have a database that has multiple schemas that are identitcal db schema user schema user To create a DAO class with activeslick I need to extend a concrete JDBCProfileProfile eg class CoffeeRepo extends EntityActions with H ProfileProvider Is it possible in any way to support multiple DB types eg H for testing and Postgres for deployment This is probably a general question for Slick rather than specifically for activeslick but its an issue that has troubled me since starting to look at Slick First of all great api Ive spent half day implementing my own generic DAO but then I found yours I have a question on your definition of EntityActionsidLens as defined like this in EntityActions def idLens Lens Entity Option Id Wouldnt it be better to have it rather than this below without Option def idLens Lens Entity Id Looking at your documentation on you use the Coffee example where id is optional But I think this depends and should not be limited by your API In your example you have this object CoffeeRepo extends EntityActions with H ProfileProvider type Id Int val idLens lens coffee Coffee coffeeid coffee id coffeecopyid id In my case all my IDs are mandatory and not optional Now I have to override idLens by this val idLens lens entity Entity Optionentityid getter function entity id entitycopyid idget setter function Thanks Tai Users often dont see the motivation for JdbcProfileProvider A good example in the docs can be the usage of slickpg and the cake pattern delete and deleteById methods do an effective deletion We could have a trait to change its behavior like the OptimisticLocking that implements logical deletion instead Current implementation requires a Id of type Option It would be better to let the users choose how they want to represent it 