Upon merging I noticed I left an unfortunate error buried in the testing logic It felt wrong to leave it there without a fix Heres the patch This change refactors the vstream functionality into a separate file along with its own manager With this change we introduce a new special Gtid value current which will start the streams at the current position If no keyspace is specified then all keyspaces are included If a keyspace has not shard specified then all shards are included We reserve the empty Gtid value for the future to request all data including existing rows COMPREPARE Signedoffby Jacques Grove aquarapidgmailcom Scenario Cluster with unsharded keyspace and vschema tables schemamigrations SQL schema CREATE TABLE schemamigrations version bigint NOT NULL insertedat datetime DEFAULT NULL PRIMARY KEY version ENGINEInnoDB DEFAULT CHARSETutf Run a program that prepares a statement with a syntax error eg This uses the official MySQL python connector import mysqlconnector from mysqlconnectorcursor import MySQLCursorPrepared cnx mysqlconnectorConnecthostlocalhost port databasecommerce userroot charsetutf getwarningsTrue curprep cnxcursorcursorclassMySQLCursorPrepared cur cnxcursor prepstmt delete s from schemamigrations as s where s version convert unsigned limit curprepexecuteprepstmt cnxcommit Running this will fail with a lost connection python preppy Traceback most recent call last File homejacquespreppy line in module curprepexecuteprepstmt File homejacqueslocallibpython sitepackagesmysqlconnectorcursorpy line in execute selfprepared selfconnectioncmdstmtprepareoperation File homejacqueslocallibpython sitepackagesmysqlconnectorconnectionpy line in cmdstmtprepare packet selfsendcmdServerCmdSTMTPREPARE statement File homejacqueslocallibpython sitepackagesmysqlconnectorconnectionpy line in sendcmd return selfsocketrecv File homejacqueslocallibpython sitepackagesmysqlconnectornetworkpy line in recvplain raise errorsInterfaceErrorerrno mysqlconnectorerrorsInterfaceError Lost connection to MySQL server during query No errors in the vtgate infoerror logs and the prepared statement does not show up in the vtgate query logs Inspecting a tcpdump of the connection vtgate seems to shut down the connection after the client sends the COMPREPARE staetment see attached image Looking through the code it seems that we return a bare error at after parsing the prepared statement instead of forming and writing a MySQL error packet to the client Ill generate a PR to fix This allows using vtctl ApplySchema to execute ALTER DATABASE across all shards of a keyspace The main problem was just that ALTER DATABASE had never been added to the sqlparser at all This continues adding MySQL functions that are implemented and rewritten at the vtgate level It builds on and contains the some of the same commits as exist in only commits after ecef are new to this branch can vitess be configured as nonsharding can vitess be configured as direct send to mysql so the sql can be Compatible with mysql Vitess User Guide Any other questions can be asked in the community Slack workspace Allow LDPRELOAD to be added to the execution environment Fixes Scenario Sharded keyspace Use a vschema like this with a reference table sharded true vindexes hash type hash tables testing type reference Create a table via vtgate mysql create table testing version bigint insertedat datetime PRIMARY KEY version ENGINE INNODB Query OK rows affected sec Now try to insert to the keyspace not a shardspecific one mysql insert into testing versioninsertedat VALUES ERROR HY Lost connection to MySQL server during query mysql The panic from the vtgate log file E servergo mysqlserver caught panic runtime error index out of range with length usrlibgolangsrcruntimepanicgo x f goPanicIndex panicboundsErrorx int x signed true y y code boundsIndex homejacquesgosrcvitessiovitessgovtvtgateengineinsertgo xaca df iovitessgovtvtgateengineInsertgetInsertShardedRoute keyspaceIDs err insprocessPrimaryvcursor vindexRowsValues insTableColumnVindexes homejacquesgosrcvitessiovitessgovtvtgateengineinsertgo xac iovitessgovtvtgateengineInsertexecInsertSharded rss queries err insgetInsertShardedRoutevcursor bindVars homejacquesgosrcvitessiovitessgovtvtgateengineinsertgo xac de iovitessgovtvtgateengineInsertExecute return insexecInsertShardedvcursor bindVars homejacquesgosrcvitessiovitessgovtvtgateexecutorgo xb iovitessgovtvtgateExecutorhandleExec qr err planInstructionsExecutevcursor bindVars true homejacquesgosrcvitessiovitessgovtvtgateexecutorgo xb adc iovitessgovtvtgateExecutorexecute qr err ehandleExecctx safeSession sql bindVars destKeyspace destTabletType dest logStats stmtType homejacquesgosrcvitessiovitessgovtvtgateexecutorgo xb b iovitessgovtvtgateExecutorExecute result err eexecutectx safeSession sql bindVars logStats homejacquesgosrcvitessiovitessgovtvtgatevtgatego xb d c iovitessgovtvtgateVTGateExecute qr err vtgexecutorExecutectx Execute NewSafeSessionsession sql bindVariables homejacquesgosrcvitessiovitessgovtvtgatepluginmysqlservergo xb ac iovitessgovtvtgatevtgateHandlerComQuery session result err vhvtgExecutectx session query makemap string querypbBindVariable homejacquesgosrcvitessiovitessgomysqlconngo x c b iovitessgomysqlConnexecQuery err handlerComQueryc query funcqr sqltypesResult error homejacquesgosrcvitessiovitessgomysqlconngo x b d iovitessgomysqlConnhandleNextCommand if err cexecQuerysql handler more err nil homejacquesgosrcvitessiovitessgomysqlservergo x ae iovitessgomysqlListenerhandle err chandleNextCommandlhandler usrlibgolangsrcruntimeasmamd s x goexit BYTE x NOP vtgate version vtgate version Version b aa Git branch master built on Wed Jan PST Obviously reference tables dont work this way and you should insert on a pershard level or use vreplication to populate the tables However inserting to it should not cause a vtgate panic and kill the connection Currently the vttablet currently only exposes resource pool wait count and aggregated wait times Adding timing histogram metrics to the resource pool would provide information on the distribution of the wait time latencies This is specially useful to in determining tail latencies Example output from debugvars look for TransactionPoolResourceWaitTime Waits TotalCount TotalTime HistogramsConsolidations inf Count Time TransactionPoolResourceWaitTime inf Count Time 