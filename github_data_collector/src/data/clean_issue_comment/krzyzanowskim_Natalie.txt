A project I am working on correlates our Storyboard files names with the UIViewController subclass that is its initial view controller The result is a Storyboards struct that conflicts in naming with the view controller type itself swift struct ExampleViewController Storyboard static let identifier ExampleViewController static var storyboard UIStoryboard return UIStoryboardname selfidentifier bundle nil static func instantiateExampleViewController ExampleViewController return selfstoryboardinstantiateExampleViewController as ExampleViewController static func instantiateViewControllerwithIdentifier identifier String UIViewController return selfstoryboardinstantiateViewControllerwithIdentifier identifier static func instantiateViewControllerT UIViewControllerofType type TType T where T IdentifiableProtocol return selfstoryboardinstantiateViewControllerofType type I appreciate the brevity of the structs name and appending something like File clutters that On the other hand it is more explicit these are mappings to files as much as wed love to abstract them away I am getting a build issue in my generated output file The issue is with this code swift extension IdentifiableProtocol where Self ExpenseClaimsNavigationController public var storyboardIdentifier String return ExpenseClaimsNavigationController static var storyboardIdentifier String return ExpenseClaimsNavigationController Specifically the public var The exact error is Cannot declare a public var in an extension with internal requirements This is the relevant class swift class RotatingNavigationController UINavigationController override var shouldAutorotate Bool return true override var supportedInterfaceOrientations UIInterfaceOrientationMask return portrait landscape class LeaveAttachmentNavigationController RotatingNavigationController class ExpenseClaimsNavigationController RotatingNavigationController Strangely I dont have this issue in another project the public keyword is not present Am I doing something wrong or is this an issue with Natalie This is an issue if the storyboard has the same name as the initial controller eg struct Storyboards struct FooViewController Storyboard static func instantiateInitialController FooViewController return selfstoryboardinstantiateInitialController as FooViewController Opps instantiateInitialController returns a StoryboardsFooViewController not a ModuleFooViewController The obvious workaround is not to name storyboards using the same name as the initial view controller However for simple storyboards this can be a convenient and natural naming Looks like natalie just needs to parse the customModule attribute for viewControllers in the storyboard xml We have a project that came with Natalie installed and contains a very large storyboard Our next step is that we want to refactor this main storyboard into a number of smaller storyboards Do you have any suggestions of how to do this with Natalie installed At the moment as I understand it there are a few issues being caused I cant really find any documentation on this and the team members gslondon havent really used Natalie before If you could give some suggestions documentations or blog posts about this that would be really helpful Hello I have just integrated Natalie with my project using the build script given in the README When trying to compile the generated Storyboardsswift I am having the error Ambiguous type name Segue The issue is caused on a custom view controller inheriting from another custom view controller therefore on the child view controller the type Segue can refer to neither its own type or its parents type The generated code looks like the following swift extension X enum Segue String CustomStringConvertible SegueProtocol case viewDetail viewDetail var kind SegueKind switch self case viewDetail return SegueKindrawValue show var destination UIViewControllerType switch self default assertionFailureUnknown destination return nil var identifier String return selfdescription var description String return selfrawValue extension UIStoryboardSegue func selection YSegue Error on this line if let identifier selfidentifier return DeliveryOrderHistoryViewControllerSeguerawValue identifier return nil extension Y enum Segue String CustomStringConvertible SegueProtocol case viewDetail viewDetail var kind SegueKind switch self case viewDetail return SegueKindrawValue show var destination UIViewControllerType switch self default assertionFailureUnknown destination return nil var identifier String return selfdescription var description String return selfrawValue On the code above Y inherits from X which in turn inherits from UIViewController Do you have any recommendations on how to fix the issue Currently a fatalError is thrown fatal error Unsupported file usrlocalbinnatalieswift line Two changes I made Natalie support multiple inputs folders or files I made Natalie generate an initialization function for identifier view controllers which dont have a custom class One feature request Id like is for Natalie to allow an xcodeproj file as argument parse it to find out which storyboards are included in which targets and generate a Storyboardsswift for each target Like that if the project has storyboards in an app target and in an extension target Natalie will generate a separate file to include in each target that only makes the targets storyboards visible It will also solve name collisions when targets have storyboards with the same name As a side note Im currently implementing this by wrapping Natalie around a ruby script which parses an xcodeproj file with the Xcodeproj gem which came out of the Cocoapods project and feeds Storyboard files to natalie Unfortunately there doesnt seem to be equally good Xcodeproj parsing libs in Swift krzyzanowskim Heres a proposed fix for as per phimages suggestion This commit modifies natalieswift so it can take a second argument importsfilejson This JSON file must contain an array of all the framework names to import and that natalie might not be able to autodetect see original issue For example in natalieimportsjson FlatUIKit and then natalieswift pathtoproject natalieimportsjson which will add import FlatUIKit right before custom module imports A couple notes In a perfect world I would love natalieimportsjson to be automatically detected in projectdir but since the documentation says that the path should be projectdirprojectname wed have to go one directory up and that seems a bit hacky Having a long argument like additionalimports natalieimportsjson would be best but I didnt want to add too much code without your approval since wed need to hack around Processargv Let me know what you think about this solution and how to possibly improve it Im not sure that this functionality should be placed directly inside Natalie may be should be created a different tool Generating identifiers for storyboards stuff definitely is a good step But there are also quite a lot of magic strings in the project for localizable strings NSLocalizedStringHello or for images UIImagenamed Logo and other files in the bundle So may be also can be generated analogue of R file on android So for strings and images can be generated something like Swift struct Strings static let Hello Hello struct Images static let Logo Logo And for convenience Swift struct LocalizedString static var Hello return NSLocalizedStringStringshello 