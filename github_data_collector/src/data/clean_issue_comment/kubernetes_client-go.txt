I am loading my local kubeconfig which contains multiple clusters and contexts The default context is prod and one of the config values I want to override is the CurrentContext clientConfig clientcmdNewNonInteractiveDeferredLoadingClientConfig clientcmdClientConfigLoadingRulesExplicitPath Usersmekubeconfig clientcmdConfigOverrides CurrentContext stage rawConfig clientConfigRawConfig logPrintfrawConfigCurrentContext outputs prod instead of stage When I inspect RawConfig the current context is still prod instead of stage Why does the config override not work Also how does the override for AuthInfo etc work The override accepts only a single AuthInfo whereas the configuration contains a map of AuthInfo etc What happened I wanted to test my method to scale deployments But after changing the replicas by using updateScale I was not able to list deployments anymore What you expected to happen create fake api create mock deployment scale it list it How to reproduce it as minimally and precisely as possible create fake api create a mock deployment scale the deployment list the deployment Anything else we need to know package scaling import testing v api k sioapiappsv autoscalingv k sioapiautoscalingv metav k sioapimachinerypkgapismetav k sioclientgokubernetesfake githubcomstretchrtestifyrequire func TestScalingt testingT initialReplicas int cs fakeNewSimpleClientset err csAppsV DeploymentstestnamespaceCreate v apiDeployment ObjectMeta metav ObjectMeta Name testdeployment Labels map string string app testapp Spec v apiDeploymentSpec Replicas initialReplicas requireNoErrort err scale autoscalingv Scale ObjectMeta metav ObjectMeta Name testdeployment Namespace testnamespace Spec autoscalingv ScaleSpec Replicas err csAppsV DeploymentstestnamespaceUpdateScaletestdeployment scale requireNoErrort err err csAppsV DeploymentstestnamespaceListmetav ListOptionsFieldSelector apptestapp requireNoErrort err Run like this go test run TestScaling scaling This will lead to an error like the following item cant assign or convert v Scale into v Deployment Environment go version go linuxamd clientgo version k sioclientgov related issuesprs Istio uses SharedInformer to set up watchers for resources and process them as events See here for some of the core code involved One problem weve run into is that if there is a permission error the SharedInformer apparently does nothing to tell us We get a log message and thats it Were adding a timeout as a workaround for our immediate issue but it feels like a crude option Is there a proper way to handle errors such as permission errors that happen in the course of using a SharedInformer It would be nice to be able to directly respond to specific kinds of errors eg on permissions error choose to fail immediately on network error choose to retry with timeout If not consider this a feature request Thank you How to query pods that are not associated with a replica controller who can help me The description of this field says If you set this to trueyou may have two processes simultaneously acting on the critical path However my understanding is the opposite if we set this field to true then when the context is cancelled the current leading process will update its own observedRecord so it wont consider itself as leader Therefore we wont have two processes acting on the same critical path Conversely if we set this field to false then the current leading process wont update its observedRecord Its leader elector will exit and it will always think that itself is the leader It wont ever check the leader election record again unless it restarts its leader elector Another process will take over the lease Now we have two processes both believing themselves as the leader Did I understand this correctly Issue When running a remotecommand and the connection dies or is killed eg by using tcpkill the returned values here are and nil since BufferReadFrom handles the EOF case and returns nil These values do not meet any of the conditions so it ends up sending a nil error into the channel Desired result Maybe we should return an error What happens now is that the stream dies but instead it appears that everything is OK I try to run the example codes outofconfigure with clientgokubernetes I try to use the command go build to generate the app but I find an error gopkgmodk sioclientgov b faab c incompatiblerestrequestgo not enough arguments in call to watchNewStreamWatcher have versionedDecoder want watchDecoder watchReporter We have a custom controller for a CRD The controller updates status subresource in each sync loop In real world it works fine But when unit test with fake clientset the update causes informer to trigger resource updated function and lead to another sync loop As result the sync never stops in unit test How real k s client break the loop in such scenario Anything we can do to solve the problem I have been through several examples of connection eg this and all of them seem to include usage of the config file If I am trying to connect to a Kubernetes cluster from OUTSIDE of the cluster how to proceed I was looking into having service accounts and roles eg here But is there any example where one can do it using the go client Thanks This is related to this issue described here Helm initializes a ClientSet using the RESTClientGetter in order to manage its storage driver functionality This same implementation is used in the new version of the helm terraform provider where theres a flag controlling if it should or should not load the local kubeconfig file The problem is that even if we set the KubeConfig field to nil on the ConfigFlags instance it still loads the default config file right here and there seems to be no way to prevent that from happening at the moment at least at the level of the ConfigFlags struct Im just wondering if this is a bug or if it was intentionally implemented this way and if thats the case what would be the ideal solution for instructing the client to not load the local configuration The only thing I was able to come up was to set the KubeConfig to an empty files path Hoping we can figure something out here Thank you