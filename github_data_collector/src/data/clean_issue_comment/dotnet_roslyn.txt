 VB allows you to write vb summary see crefInteger summary but emits see crefTSystemInt for that Note C warns in this case as something invalid If you want to reference a nullable type at the top level you need to write it as see crefNullableSomeTName Builds on Extracted from and generalized to work with Visual Basic Baseline numbers a ca f d e bcab a ccbd text Found diagnostics in ms bytes allocated Execution times ms CSharpSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances IdentifierName ms to try simplifying instances GenericName ms to try simplifying instances QualifiedName ms to try simplifying instances QualifiedCref ms to try simplifying instances AliasQualifiedName ms to try simplifying instances VisualBasicSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances IdentifierName ms to try simplifying instances GenericName ms to try simplifying instances QualifiedName ms to try simplifying instances Updated numbers a ca f d e bcab a ccbd this pull request text Found diagnostics in ms bytes allocated Execution times ms CSharpSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances GenericName ms to try simplifying instances QualifiedName ms to try simplifying instances IdentifierName ms to try simplifying instances QualifiedCref ms to try simplifying instances AliasQualifiedName ms to try simplifying instances VisualBasicSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances QualifiedName ms to try simplifying instances GenericName ms to try simplifying instances IdentifierName ms to try simplifying instances The increase in diagnostics is due to a bug in Simplify Type Names for the Visual Basic code NameOf Object The apparent increase in analyzer execution time is noise caused by contested locks used for measuring the callbacks The allocation numbers and endtoend time improvements were consistent In combination with of calls to TrySimplify were eliminated as unnecessary for IdentifierNameSyntax The current system just dumps too much code into a single location leading to lots of confusino about the purpose of each method and causing clutter with lots of unrelated methods These identifiers are already simplified as part of nodes further up the tree Extracted from Baseline numbers a ca f d e bcab a ccbd text Found diagnostics in ms bytes allocated Execution times ms CSharpSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances IdentifierName ms to try simplifying instances GenericName ms to try simplifying instances QualifiedName ms to try simplifying instances QualifiedCref ms to try simplifying instances AliasQualifiedName ms to try simplifying instances VisualBasicSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances IdentifierName ms to try simplifying instances GenericName ms to try simplifying instances QualifiedName ms to try simplifying instances Updated numbers a ca f d e bcab a ccbd this pull request text Found diagnostics in ms bytes allocated Execution times ms CSharpSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances IdentifierName ms to try simplifying instances GenericName ms to try simplifying instances QualifiedName ms to try simplifying instances QualifiedCref ms to try simplifying instances AliasQualifiedName ms to try simplifying instances VisualBasicSimplifyTypeNamesDiagnosticAnalyzer SimpleMemberAccessExpression ms to try simplifying instances IdentifierName ms to try simplifying instances GenericName ms to try simplifying instances QualifiedName ms to try simplifying instances Closes Thanks cston for your help with this This found a bug added tests and a simple fix in CommandLineParserEnumerateFiles I also added a null check in CommandLineParser line which I could not protect or rationalize otherwise 