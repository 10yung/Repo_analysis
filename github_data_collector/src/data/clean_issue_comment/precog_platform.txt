Is there an option that we can exhaust and put the Precog databases fully InMemory Cached queries are implemented in Precog master but may have bugs have not been tested extensively and their APIs likely differ from the required format The following document contains the analysis API which is meant to replace the old query APIs and form the basis of cached queries This ticket will be considered complete when these APIs are implemented tested and thoroughly documented This works datamstatisticsjobsmonths datam datamResults where datamJobGroupDatabase Administrator finalmonthflattendatam avgsalbyitskill with datedatamQueryDate finalmonth This doesn t and its essentially the same data just in a different collection datastatisticsjobsjobgroups data dataResults where dataJobGroupDatabase Administrator dataQueryDate finaldayflattendata avgsalbyitskill with datedataQueryDate finalday This is the error I am getting atcher E cpssSyncQueryServiceHandler Error executing shard query javalangUnsupportedOperationException emptymax at scalacollectionTraversableOnceclassmaxTraversableOncescala at scalacollectionimmutableSetEmptySetmaxSetscala at comprecogdazeArrayLibModuleArrayLibFlattenanonfunapply anonfun applyArrayLibscala at comprecogdazeArrayLibModuleArrayLibFlattenanonfunapply anonfun applyArrayLibscala at scalazStreamTanonfunmap anonfunapply applyStreamTscala at scalazStreamTanonfunmap anonfunapply applyStreamTscala at scalazStreamTYieldanon applyStreamTscala at scalazStreamTanonfunmap applyStreamTscala at scalazStreamTanonfunmap applyStreamTscala at scalazMonadanonfunmap anonfunapply applyMonadscala at akkadispatchFutureanon liftedTree Futurescala at akkadispatchFutureanon runFuturescala at akkadispatchTaskInvocationrunAbstractDispatcherscala at akkajsr yForkJoinTaskAdaptedRunnableActionexecForkJoinTaskjava at akkajsr yForkJoinTaskdoExecForkJoinTaskjava at akkajsr yForkJoinPoolWorkQueuerunTaskForkJoinPooljava at akkajsr yForkJoinPoolrunWorkerForkJoinPooljava at akkajsr yForkJoinWorkerThreadrunForkJoinWorkerThreadjava startshardsh tries to download zookeeper and kafka from a private s repo Zookeeper can be obtained on the apache project website Kafka zip file seems problematic as explained here is not an official release Adding additional shard services to a current precog instance requires copying over the sharddata path However since the original pathname is stored in the cooked files the new shard service will not be able to query the new copied sharddata path Here is the config queryExecutor systemId dev precog storage root homeprecogworkshard data Here is the error log patcher E cpssSyncQueryServiceHandler Error executing shard query javaioFileNotFoundException homeprecogworksharddatadata statisticsjobsjobgroupsperAuthProjectionsb a be ef e a a f c bb cookedblockssegment Decimal cooked No such file or directory at javaioFileInputStreamopenNative Method at javaioFileInputStreaminitFileInputStreamjava at comprecogniflheimCookedReadercomprecogniflheimCookedReaderreadCookedReaderscala at comprecogniflheimCookedReaderanonfunload anonfunapply anonfun applyCookedReaderscala at comprecogniflheimCookedReaderanonfunload anonfunapply anonfun applyCookedReaderscala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionLinearSeqOptimizedclassforeachLinearSeqOptimizedscala at scalacollectionimmutableListforeachListscala at scalacollectionTraversableLikeclassmapTraversableLikescala at scalacollectionimmutableListmapListscala at comprecogniflheimCookedReaderanonfunload anonfunapply applyCookedReaderscala at comprecogniflheimCookedReaderanonfunload anonfunapply applyCookedReaderscala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionLinearSeqOptimizedclassforeachLinearSeqOptimizedscala at scalacollectionimmutableListforeachListscala at scalacollectionTraversableLikeclassmapTraversableLikescala at scalacollectionimmutableListmapListscala at comprecogniflheimCookedReaderanonfunload applyCookedReaderscala at comprecogniflheimCookedReaderanonfunload applyCookedReaderscala at scalazValidationclassflatMapValidationscala at scalazSuccessflatMapValidationscala at comprecogniflheimCookedReaderloadCookedReaderscala at comprecogniflheimCookedReaderanonfun applyCookedReaderscala at comprecogniflheimCookedReaderanonfun applyCookedReaderscala at scalaOptionmapOptionscala at comprecogniflheimCookedReadersnapshotRefCookedReaderscala at comprecogniflheimNIHDBSnapshotanonfungetBlockAfter applyNIHDBSnapshotscala at comprecogniflheimNIHDBSnapshotanonfungetBlockAfter applyNIHDBSnapshotscala at scalaOptionmapOptionscala at comprecogniflheimNIHDBSnapshotclassgetBlockAfterNIHDBSnapshotscala at comprecogniflheimNIHDBSnapshotanon getBlockAfterNIHDBSnapshotscala at comprecogniflheimNIHDBanonfungetBlockAfter applyNIHDBActorscala at comprecogniflheimNIHDBanonfungetBlockAfter applyNIHDBActorscala at akkadispatchFutureanonfunmap liftedTree Futurescala at akkadispatchFutureanonfunmap applyFuturescala at akkadispatchFutureanonfunmap applyFuturescala at akkadispatchDefaultPromiseakkadispatchDefaultPromisenotifyCompletedFuturescala at akkadispatchDefaultPromiseanonfuntryComplete anonfunapplymcVsp applyFuturescala at akkadispatchDefaultPromiseanonfuntryComplete anonfunapplymcVsp applyFuturescala at scalacollectionLinearSeqOptimizedclassforeachLinearSeqOptimizedscala at scalacollectionimmutableListforeachListscala at akkadispatchDefaultPromiseanonfuntryComplete applymcVspFuturescala at akkadispatchFutureanon anonfunrun applymcVspFuturescala at akkadispatchFutureanon anonfunrun applyFuturescala at akkadispatchFutureanon anonfunrun applyFuturescala at scalautilDynamicVariablewithValueDynamicVariablescala at akkadispatchFutureanon runFuturescala at akkadispatchTaskInvocationrunAbstractDispatcherscala at akkajsr yForkJoinTaskAdaptedRunnableActionexecForkJoinTaskjava at akkajsr yForkJoinTaskdoExecForkJoinTaskjava at akkajsr yForkJoinPoolWorkQueuerunTaskForkJoinPooljava at akkajsr yForkJoinPoolrunWorkerForkJoinPooljava at akkajsr yForkJoinWorkerThreadrunForkJoinWorkerThreadjava currently we have shard server running we can fetch data now is there any document on how to run labcoat against this Our data is getting around GB and our query times are going up quite substantially in terms of time to complete It seems that with no indexing it is doing full data or full table scans of the data This is a pretty high priority since our data will begin to grow at GBday Thanks ERROR PrecogShardakkaactordefaultdispatcher akkadispatchDispatcher Promise already completed akkadispatchDefaultPromise dccd tried to complete with RightHttpResponseOK HttpHeadersMapAccessControlAllowOrigin AccessControlAllowHeaders OriginXRequestedWithContentTypeXFileNameXFileSizeXFileTypeXPrecogPathXPrecogServiceXPrecogTokenXPrecogUuidAcceptAuthorization AccessControlAllowMethods GETPOSTOPTIONSDELETEPUT Allow GETPOSTOPTIONSDELETEPUT ContentType applicationjsonSomeRightscalazStreamT e HTTP javalangIllegalStateException Promise already completed akkadispatchDefaultPromise dccd tried to complete with RightHttpResponseOK HttpHeadersMapAccessControlAllowOrigin AccessControlAllowHeaders OriginXRequestedWithContentTypeXFileNameXFileSizeXFileTypeXPrecogPathXPrecogServiceXPrecogTokenXPrecogUuidAcceptAuthorization AccessControlAllowMethods GETPOSTOPTIONSDELETEPUT Allow GETPOSTOPTIONSDELETEPUT ContentType applicationjsonSomeRightscalazStreamT e HTTP at akkadispatchPromiseclasscompleteFuturescala at akkadispatchDefaultPromisecompleteFuturescala at akkadispatchFutureanonfunrecover applyFuturescala at akkadispatchFutureanonfunrecover applyFuturescala at akkadispatchDefaultPromiseakkadispatchDefaultPromisenotifyCompletedFuturescala at akkadispatchDefaultPromiseanonfuntryComplete anonfunapplymcVsp applyFuturescala at akkadispatchDefaultPromiseanonfuntryComplete anonfunapplymcVsp applyFuturescala at scalacollectionLinearSeqOptimizedclassforeachLinearSeqOptimizedscala at scalacollectionimmutableListforeachListscala at akkadispatchDefaultPromiseanonfuntryComplete applymcVspFuturescala at akkadispatchFutureanon anonfunrun applymcVspFuturescala at akkadispatchFutureanon anonfunrun applyFuturescala at akkadispatchFutureanon anonfunrun applyFuturescala at scalautilDynamicVariablewithValueDynamicVariablescala at akkadispatchFutureanon runFuturescala at akkadispatchTaskInvocationrunAbstractDispatcherscala at akkajsr yForkJoinTaskAdaptedRunnableActionexecForkJoinTaskjava at akkajsr yForkJoinTaskdoExecForkJoinTaskjava at akkajsr yForkJoinPoolWorkQueuerunTaskForkJoinPooljava at akkajsr yForkJoinPoolrunWorkerForkJoinPooljava at akkajsr yForkJoinWorkerThreadrunForkJoinWorkerThreadjava ERROR PrecogShardakkaactordefaultdispatcher akkadispatchDispatcher Promise already completed akkadispatchDefaultPromise a e b tried to complete with RightHttpResponseOK HttpHeadersMapSomeLeftjavanioHeapByteBuffer pos lim cap HTTP javalangIllegalStateException Promise already completed akkadispatchDefaultPromise a e b tried to complete with RightHttpResponseOK HttpHeadersMapSomeLeftjavanioHeapByteBuffer pos lim cap HTTP at akkadispatchPromiseclasscompleteFuturescala at akkadispatchDefaultPromisecompleteFuturescala at akkadispatchFutureanonfunrecover applyFuturescala at akkadispatchFutureanonfunrecover applyFuturescala at akkadispatchDefaultPromiseakkadispatchDefaultPromisenotifyCompletedFuturescala at akkadispatchDefaultPromiseanonfuntryComplete anonfunapplymcVsp applyFuturescala at akkadispatchDefaultPromiseanonfuntryComplete anonfunapplymcVsp applyFuturescala at scalacollectionLinearSeqOptimizedclassforeachLinearSeqOptimizedscala at scalacollectionimmutableListforeachListscala at akkadispatchDefaultPromiseanonfuntryComplete applymcVspFuturescala at akkadispatchFutureanon anonfunrun applymcVspFuturescala at akkadispatchFutureanon anonfunrun applyFuturescala at akkadispatchFutureanon anonfunrun applyFuturescala at scalautilDynamicVariablewithValueDynamicVariablescala at akkadispatchFutureanon runFuturescala at akkadispatchTaskInvocationrunAbstractDispatcherscala at akkajsr yForkJoinTaskAdaptedRunnableActionexecForkJoinTaskjava at akkajsr yForkJoinTaskdoExecForkJoinTaskjava at akkajsr yForkJoinPoolWorkQueuerunTaskForkJoinPooljava at akkajsr yForkJoinPoolrunWorkerForkJoinPooljava at akkajsr yForkJoinWorkerThreadrunForkJoinWorkerThreadjava To make it as simple as possible to run Precog we need to bundle Precog and Labcoat and all required dependencies into a fully selfcontained package suitable for distribution run all Precog services in a single process using a single port and launch Precog and Labcoat with a single command Configuration options for this single process server should be kept extremely minimal and every option must have a sensible default which works out of the box on all supported platforms Mac Linux Windows Among the possible options The port to run on Could default to something like The home directory for the file system if local file system is being used Could default to something like data The home directory for temporary files Could default to tmp or tmp The directory for accountssecurityetc metadata location of H database Could default to something like meta With no external dependencies and simple configuration options that all have sensible defaults it will be possible for average and casual users to maintain Precog and many more people to try Precog out without having to master a half dozen other technologies kafka zookeeper haproxy mongodb httpd etc This ticket will be considered complete when the following is possible Run an sbt task to build the new standalone release from scratch both Precog and Labcoat cd into the standalone release directory Run precog or precogbat scripts depending on OS MacLinux or Windows If no commandline arguments are specified the script launches Precog server in a single process and port if it is not already running and launches Labcoat configured to point to the newlylaunched Precog server In addition to the default action of starting Precog and launching Labcoat the scripts support the commands stop start and restart which stop start and restart the Precog server respectively as well as a launch command which launches Labcoat and a status command which shows whether or not Precog server is running The standalone release will be the release version thats prebuilt and distributed online for users who dont want to build Precog Labcoat from scratch Therefore its essential that it be bulletproof and just work out of the box with no tweaking configuration or additional external dependencies This ticket should not be completed most of the other tickets in the Simplified Precog milestone have been completed The auth and accounts services need to be merged they are heavily dependent on each other and their interfaces simplified Below is a brief account of the intended Precog security model resulting from this ticket Users have grants Grants are the analogue of operations in an ACL security model All grants are bound to a particular file or directory they confer permissions with respect to that resource Read Read contents of file read children of directory Append Append new contents to file append new child in directory Update Change contents of file rename children Execute Execute script execute default script associated with directory Delete Delete file delete directory Mount Mount a data source to the file mount a data source in the directory Unmount Unmount a data source to the file unmount a data source in the directory Unlike the POSIX file security model grants are hierarchical Currently they are always and only hierarchical Grants can be used to create additional grants that have the same or reduced permissions This ticket will be considered complete when the auth and accounts service have been unified into a single service the internal logic simplified and refactored to match the above and a clean robust and welldocumented REST API exposed the existing API is not unified is inconsistent in places is not robust and is poorly documented Minimal API GET POST accessusers GET PUT accessusersuserId GET accessusersuserIdgrants GET accessusersuserIdgrantsgrantId GET POST DELETE accessusersuserIdsharesbyusersuser GET POST DELETE accessusersuserIdsharesbypathspath GET POST DELETE accessusersuserIdsharesbypermsperm 