 WORK IN PROGRESS Support for xmldoc comments namespace examplesome foobar enum FooBar foo two lines Foo bar Bar not included Baz This is my struct nd line struct SomeStruct some field codesomeField code this is ignored last line int someField this is ignored not ignored int otherField int notDocumented Gets converted to C where the xmldoc comments are moved over BinSkim analysis shows error BA for following dlls BondAttributesdll Bonddll BondIOdll BondJSONdll Error message Images should be correctly signed by trusted publishers using cryptographically secure signature algorithms This rule invokes WinTrustVerify to validate that binary hash signing and public key algorithms are secure and where configurable that key sizes meet acceptable size thresholds Cryptographically weak signatures digest algorithm sha NoSign digest encryption algorithm RSA Customers have huge and complex pipelines Bond serialization is buried deep in the code and sporadic errors like a null value in some record may require an humongous amount of time such as connecting to the cloud service for debugging before getting clearance for doing so or adding more logs elsewhere which would be duplicated when Bond is used for logging and deploying again Therefore this error message is not being helpful at all It should state at very minimum the field that is not satisfying the condition and ideally the schema name as well An API which I am using requires me to provide the serialized data as a stdstring So I am wondering what is the most efficient way to serialize bond data to a stdstring SomeCustomType msg stdstring buffer bondOutputBuffer outputbuffer bondSimpleBinaryWriterbondOutputBuffer writeroutputbuffer bondSerializemsg writer auto blob outputbufferGetBuffer bufferclear bufferassignblobcontent blobsize The following code works but I guess that it is not very efficient I would assume that I have a least memcopies once copying from outputbuffer to blob and then from blob to buffer the target stdstring Do you know if how I can get either the SimpleBinaryWriter or the OutputBuffer to directly serialize to a stdstring or do you have another proposal how I can achieve that Also is there a way to reset clear the Output buffer so that I can reuse the buffer als well as the writer If I repeatedly call the Serialize method the data gets aggregated in the OutputBuffer object Thanks for your help I am trying to integrate Bond with our buildsystem to evaluate it properly but I am running into various problems Bond installation does not provide a BondConfigcmake file which can be consumed by other projects Bond does not export CMake functions to generate code from bond files though they are defined in cmakeBondcmake like the addbondcodegen function Bond exports its targets to bondcmake which is good but they include absolute paths to the boost library Hence the bond package is not relocatable and I cannot distribute a bond package build by a CI server to be consumed by the users If bond used modern CMake imported targets for libraries code generation functions and provided a BondConfigcmake file it would be much easier to integrate Would you be interested for me to work on a PR to address this issues I am not quite sure how much work it will be I have not yet looked at all of the CMake files for this project yet I added stdc option in so that I could make use of stdstringview I got this error in Bond c dev vcpkg installed x windows include bond core detail visitanyh error C stdresultoft warning STL stdresultof and stdresultoft are deprecated in C They are superseded by stdinvokeresult and stdinvokeresultt You can define SILENCECXX RESULTOFDEPRECATIONWARNING or SILENCEALLCXX DEPRECATIONWARNINGS to acknowledge that you have received this warning Please would you add an option to cmake which only builds static libraries and installs headers eg without requiring ghc This would address situations where it is not possible to run gbc on the client eg Raspberry Pi with GB where the gbc has been run elsewhere and gbc generated code is part of the clients project I would like to be able to validate the format of a serialized object at runtime using the RuntimeSchema instead of compile time information I am thinking it would be a dry run of the deserializer but using only the schema As far as I can tell it cant be done at present and it even seems the deserializer is ignorant of the supplied schema at least thats the case when using the tagged format where it does sortof make sense Any good ideas for how to approach this We use Bond to persist the state of our CC applications and its very efficient Our only problem is that we cant completely define the initial state of the application in the bond files because explicit default values are not supported for containers and structures Is this something that could be implemented