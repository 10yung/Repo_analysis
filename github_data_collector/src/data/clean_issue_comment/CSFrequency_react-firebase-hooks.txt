Hi I have some data structured something like the following Root doc Middle collection of node docs only layer deep for now Collection of leaf docs Normally I might break this up into separate components that each have their own hook but I am using a library that accepts the data in hierarchical form Is there a way I can query the whole structure at once Alternatively do people have best practices for structuring data like this so it can be queried in parts and then assembled in an efficient way for reading say Playing around with it now may update with work in progress as I go Thanks for this library I guess this issue is related with Firebaseauth itself and not the hook but this is the journey Steps to reproduce Not register user go to a registration form in Tab the Registration form shows a useremailVerified false on the top The user register using the form A verification email is sent to the user The form now shows a message pending verify email The user goes to the email and clicks in the verification link opening Tab Current result Returning to the Tab the message useremailVerified false remains if in the console I access the user entity useremailVerified true Expected result useremailVerified changes triggers a component rerender Returning to the Tab the message is useremailVerified true What is the currently recommended way to fetch references from within a loaded document snapshot Could we add an option to automatically hydrate child references into a snapshot or data object Use reset instead of set value when no value is present Should fix I couldnt find anything about refreshing data for a document that is loaded using useDocumentDataOnce My app will have a refresh button or a pulltorefresh gesture I tried using a dummy local state to force the rerender but it doesnt work since the document refs are the same across renders js const refreshCount setRefreshCount useState const refresh setRefreshCountrefreshCount Is this possible to implement this behaviour Still fleshing the idea out but wanted to note in case there was interest Itd be handy for our use case to be able to apply transformations to returned objects Often times the data we have stored is not necessarily the data we want to display so we often wind up running the same transformations after fetch A few examples Our users always have a firstname and a lastname Sometimes they also have a displayname We always want the displayname to take precendence and run a transformation on retrieved data to do so We use Firebase timestamps which are really handy on the server and really notsohandy on the client since they always need to be coerced with at least toDate Currency formatting always winds up with something like toLocaleString or something I cant even remember off the top of my head and would need to look into our codebase for how we typically format Suggested enhacnement Provide a transformations property in options that all data is run through A transformation could either be added to an object or overwrite a property of an incoming object For example lets say my source object is a user js firstname John lastname Smith createdat firebasefirestoreTimestamp With transformations js const user userLoading userError useDocumentData myCollectionRefusers transformations displayname data return datadisplayname datadisplayname datafirstname datalastname createdat data return datacreatedattoDatetoDateString Expected output from consoleloguser js firstname John lastname Smith displayname John Smith createdat Wed Dec I could see this coming in handy for us since we could store a handful of schema transformations and add to them with spread syntax eg js transformations randomOneOffProp data datafieldtoLowercase commonPeopleTransformsFromFile Ideally the same could be applied to collection data For Firestore collections and docs it would be nice if each of the Data hooks would automatically add the idField if provided as a keyvalue to the T generic For example the useDocumentData hook would return something like T idField string instead of just T In this case idField should be represented by the actual string value entered into optionsidField Does this make sense I feel like it should be trivial to do something like this but couldnt quite get it to work myself Id be happy to make a pull request if anyone has some extra insight Thanks Im trying to figure out how to use this My best attempt is copied below although it generates an error that says ReferenceError Cannot access snapshot before initialization const GeneralTest props const register handleSubmit setValue errors reset useForm const action useStateMachineupdateAction const onSubit data actiondata propshistorypushProposalMethod const snapshot loading error useDocumentOnce firebasefirestorecollectionabsforcodes snapshotpush value snapshotdatatitlereplace g label snapshotdatatitle ABS snapshotid const valuesField setField useState selectedOptionField const handleMultiChangeField selectedOption setValuefield selectedOption setField selectedOption const handleMultiChangeField selectedOption setValuefield selectedOption setField selectedOption useEffect registername field Before hooks I was able to use componentDidMount like so class Form extends ReactComponent state options async componentDidMount const fsDB firebasefirestore Dont worry about this line if it comes from your config let options await fsDBcollectionabsforcodesgetthenfunction querySnapshot querySnapshotforEachfunctiondoc consolelogdocid docdata optionspush value docdatatitlereplace g label docdatatitle ABS docid thissetState options Im looking to figure out how to use this tool to extract data from the database and then use it to populate a select menu like so Select classNamereactSelect namefield placeholderSelect at least one valuevaluesFieldselectedOption optionssnapshot onChangehandleMultiChangeField isMulti refregister Any chance it might get implemented I dont understand it is not in here yet Am I the first to ask Just tried the example you provided import useAuthState from reactfirebasehooksauth const CurrentUser const user initialising error useAuthStatefirebaseauth const login firebaseauthsignInWithEmailAndPasswordtesttestcom password const logout firebaseauthsignOut if initialising return div pInitialising Userp div if error return div pError errorp div if user return div pCurrent User useremailp button onClicklogoutLog outbutton div return button onClickloginLog inbutton Same result Uncaught error Using v 