I was wondering whether that is an option or how youd think about that I would imagine using the same storage model or at least have a bridge importer exporter from one format to the other would be cool Distributed bug trackers are not a simple concept and are not widely in peoples scope for tools to actually use in practice Widening marketshare by combining efforts or at least combining the potential userbase should benefit bothall projects Not to mention the sharing of brilliant minds focused on the same topics this issue might be a good point for initiating contact if it does not exist yet or do you see fundamental incompatibilities in the ideas behind the two projects I am checking out different ingit issue trackers right now and browsing yours I missed in the README directly the data model found it later in a linkedto document why you chose not to store issues in files if there is a TUI andor a GUI for submitting issues I am happy that you still use github issues one of the other projects sit does not and it is basically impossible to get in contact with them except though sending emails adress extracted from git history to the devs or understanding compiling installing reading docs creating an issue submitting hopefully all wihtout problems practically very unlikely ride on This is merely a note for myself Maybe it is possible and maybe even a nice way to do it sending issues or rather new messages using gitformatpatch and applying using gitam I should try this and if it is possible and niceniceish we could provide simple convenience wrappers for these I am currently in the process of writing an app with libgitdit and I found that it is way to hard to use For example for checking whether an issue is open this code has to be written rust pub fn issueisopenai Issuea Resultbool use libgitdittraileraccumulation use libgitdittraileraccumulationAccumulator use libgitdittrailerTrailerValue use libgitditMessage let policy accumulationAccumulationPolicyLatest let mut acc accumulationSingleAccumulatornewDitstatustoowned policy let mut messages vec for message in imessages let mut trailers messagetrailerscollect messagesappend mut trailers accprocessallmessagesintoiter if let Some val accintoiternext match val TrailerValueStrings s OPEN s open s Open false return Okfalse The actual check for open OPEN and Open is trivial but the aggregating of trailers is way too complex Of course this functionality should be part of libgitdit as in IssuegetlatesttrailerDitstatus Open for example but thats another problem The boilerplate for writing this code is way to much This is only one example there are other places where this library is too complex to use Simple proposal for colored output No flags for disabling or changing of color yet Might be an idea to add though I guess this first proposal might suffice IMO git dit list should show author date rather than committer date At least not with push When listing a huge threadtree with show g it would be awesome to have colors to quickly see where what is located Other commands might benefit as well from a bit of color Not that important in yz development though necessary for a nice Right now we lack a way to git dit show t all issues am I right Or even list all issues with g one might want that Discussion issue for binary attachements Two options which I currently see here gitannex which is an awesome tool and fits perfectly well for the job but has the one disadvantage that it uses symlinks so intree files for referencing content ipfs which is wonderful and works great but then binary content is not tied to the repository This means that binary blobs can be dropped and would be lost then without modifying the repository at all Im not sure whether we want such a thing With IPLD though we could still refer from the content to the issue more accurately To a hash it belongs to So thats not a problem Of course this is not a thing which might be solved tomorrow but Id like to open this anyways to keep track of ideas