 Issue was caused by JSON Value ToString implementation as only quoted string is a valid json value I was loadtesting my service at highest rps and when I got or errors drill panicked I think better behaviour is to fail iteration and count failures For now I handled this with making default value but I can handle it better later Currently Assign seems to miss an regexp feature I need to extract a variable from json embedded into an html document Is there something existing There are times when its useful to ignore cookies being sent from the server I tried building and using drill on Windows with cargo install for a particular client where I needed to use their SoE desktop in a quick project The colourprinting code didnt work right I got ANSI escape codes printed literally on the terminal This was running in VScode with either powershell or git bash I got the same in the powershell gui window I set CLICOLOR and got on with the task but I wanted to come back and fix the problem so I could leave them with a working setup I then cloned the repo but to my surprise cargo run showed the colours correctly Invoking the same executable from targetreleasedrillexe printed ANSI codes again The windows console doesnt interpret ANSI codes by defaut and needs a console API call to set it into the appropriate mode It turns out cargo uses this mode and leaves it active when invoking the program via cargo run The below patch fixes or at least works around the problem diff diff git asrcmainrs bsrcmainrs index af db b asrcmainrs bsrcmainrs fn main let nocheckcertificate matchesispresentnocheckcertificate let quiet matchesispresentquiet let nanosec matchesispresentnanosec cfgwindows let controlsetvirtualterminaltrue let begin timeprecisetimes let listreportsresult benchmarkexecutebenchmarkfile reportpathoption nocheckcertificate quiet nanosec Note Im a very infrequent Windows user and this was my first time trying Rust on Windows Unfortunately I didnt have a chance to fully test this change in all combinations while on site so it might still misbehave in the case of redirected output or some other situation See the comments at the top of for more detail there may be more that needs to be done to properly set up the windows console Thats one reason Ive given a code example as a diff rather than a PR Big hattip to retep for pointing out the consolemode api I was well down the wrong rabbithole looking at differences in other environment variables between the two invocation methods When assigning a JSON response string variable will be surrounded by double quotes and unusable in request url eg assigning to test id abc using testid for next request as follow url test testid will generate the request instead of reproducible example benchmark file yml threads base iterations rampup plan name todos request url todos assign todo name example request url todotitle result bash Threads Iterations Rampup Base URL todos OK ms example aut autem Not Found ms this example doesnt really make sense as title has spaces but its to illustrate with publicly available api versions rustc c d drill config threads base iterations rampup plan name json request url json result targetreleasedrill benchmark benchmarkyml stats q Threads Iterations Rampup Base URL json Total requests json Successful requests json Failed requests json Median time per request ms json Average time per request ms json Sample standard deviation ms Concurrency Level Time taken for tests seconds Total requests Successful requests Failed requests Requests per second sec Median time per request ms Average time per request ms Sample standard deviation ms run same benchmark with ab ab n k c This is ApacheBench Version Revision Copyright Adam Twiss Zeus Technology Ltd Licensed to The Apache Software Foundation Benchmarking localhost be patient Completed requests Completed requests Completed requests Completed requests Completed requests Completed requests Completed requests Completed requests Completed requests Completed requests Finished requests Server Software wizzardo Server Hostname localhost Server Port Document Path json Document Length bytes Concurrency Level Time taken for tests seconds Complete requests Failed requests KeepAlive requests Total transferred bytes HTML transferred bytes Requests per second sec mean Time per request ms mean Time per request ms mean across all concurrent requests Transfer rate Kbytessec received Connection Times ms min mean sd median max Connect Processing Waiting Total Percentage of the requests served within a certain time ms longest request Hey This isnt necessarily a mergeready pull request but heres my initial implementation of websocket support The code itself should be pretty straightforward though there are a few questions around how to handle return values from websocket messages which could be a relatively common scenario and how the syntax should look like in the benchmark file Currently I use this for the benchmark definition threads base url iterations plan name Websocket test websocketmessage url url data something somethingelse ae b d bb This way the same plan can mix both HTTP and WS eg Artillery makes it so that you define an engine for a test scenario that might be either HTTP or WS At the moment this code works and Ive successfully used it to test our backends so weve now used Drill against software running in production Ive also cleaned it up from warnings so its mergeready once the format for WS messages is finalized