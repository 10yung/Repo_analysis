I wanted a default route to run if there was not a match found My route root can be defined in the module and is set on page render through bonerouterstartrootresppathpushState true I was running into issues finding a simple work around My first question is am I overlooking something simple here If not this is the solution I am using to add a catchall regex route Is there a better way Add a defaultRoute as the last route defaultRoute and update routeToRegex routeToRegex functionroute var escapeRegExp namedParam optionalParam splatParam ifroute return new RegExp s optionalParam g namedParam wg splatParam wg escapeRegExp s g route routereplaceescapeRegExp replaceoptionalParam replacenamedParam functionmatch optional if optional return match else return replacesplatParam return new RegExp route as client script socket ioconnect bonesetiooptions socket socket script how to send chat message I saw boneio is quite similar to backbonejs for some aspect like router and views Why has been decided to not provide a built in support for models and collections Is there another way to manage data structures Have I to rely only on boneio feature for that In this example clicking the link will redirect user to a page javascript a hrefsearchohhyeasearcha script bonerouter routes searchquery find find functionquery data alertquery bonerouterstartpushState true script Hi boneio looks really interesting I did some work with NodeJS but I still need to use other serverside programming languages and technologies for other stuff Mostly Ive been using SockJS and its various implementations on top of other servers For now boneio seems to work with socketio and on top of NodeJS correct me if Im wrong Is there a plan for create a pluggable system where I can map boneio calls to SockJS just an example and then make it work with my own technologies That would be really interesting Best regards Richard Great framework Just curios to see if there is a scaffolded template to start a new project with 