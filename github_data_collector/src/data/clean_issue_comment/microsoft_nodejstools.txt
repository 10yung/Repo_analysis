hi why dont you have a compatibility table or a list of compatibility versions vs nodejstools node I use vs can I update the node js to x lts will debugging work Hi There I saw this information on your code section The Output link can be clicked to display the text that was printed to the console during the test including the standard unittest output Question I have a lot of test and it taking a lot of time to click the link to open the standard output screen Is there an option or setting that put the standard output screen were the link is so that when i click on a test i can see all the test detail summary in one place Breakpoints are not catching right away after I upgraded from Node to Node When Node was installed I could set a breakpoint on a global statement and it would hit Now AFTER node runs first I have to remove and readd a breakpoint Once doing so all other breakpoints on the opened code window start working also It seems none of the breakpoints get registered properly BEFORE node runs the app Here you can see the debugger statement causes the debugger to hit there only while all breakpoints do not work Removing and adding any one breakpoint fixes all of them Rolling back to Node fixes the issue and everything works as expected Expected Behavior Global scope breakpoint hit Actual Behavior Breakpoint is not hit from Help About Microsoft Visual Studio OS Windows Visual Studio Version VS Nodejs Version Steps to Reproduce Create new node project in Visual Studio Download node installer to get the latest stable release of node which is Upgrade node to node Upgrade npm to the latest npm install g npm stable Upgrade node installed via NPM to match the downloaded version if necessary npm install g node Create a module with a global statement and set a breakpoint on it Breakpoint is never hit I have a Mocha setup that uses modulealias and esm to load modules using ES import That works fine when running that through npm using mocha require modulealiasregister require esm testjs Ive added a mochajson with the same require require modulealiasregister esm From the test log I can see that this configuration is read correctly but the test discovery fails with an error message indicating that the ES import is not understood Test discovery error mytestjs function exports require module filename dirname import assert from chai SyntaxError Unexpected token at new Script vmjs at createScript vmjs at ObjectrunInThisContext vmjs This is the exact same error I get when running through npm without require esm Test discovery not working for the default react template dotnet new react Test adapter assumes that nodemodules folder will be in root of a project but in case of the react template it in ClientApp folder defined by SpaRoot property This patch adds code for handling SpaRoot property and overriding work directory based on it Expected Command on context menu Build builds ts files Actual Behavior Command fails to execute as tscexe file no longer exists NTVS Version Commit Hashc fc f cf cc c ae b e fc d d Visual Studio Version Preview Nodejs Version Steps to Reproduce Create a new folder on the file explorer Open Visual Studio File Open Folder Choose the newly created folder Add a tsconfigjson file Right click the tsconfigjson Build See error on output Tsc Build Started C Program Files x Microsoft SDKs TypeScript tscexe p C Users user source repos OpenFolderError tsconfigjson SystemComponentModelWin Exception x The system cannot find the file specified at SystemDiagnosticsProcessStartWithCreateProcessProcessStartInfo startInfo at SystemDiagnosticsProcessStart at MicrosoftVisualStudioToolsProjectProcessOutputctorProcess process Redirector redirector Error Failed to start C Program Files x Microsoft SDKs TypeScript tscexe I noticed other posts on the issue which are now quite old Is it still the stance that this will not be supported at all Im trying to get a seemingly simple thing to work which is to not have the Visual Studio debugger detach when nodemon restarts NodeJS I imagine it happens because the NodeJS process terminates and restarts but a port is being used so it may just be the connection is lost Is there no way at all to have VS autoreconnect to the port Is it really that big of a problem to support this If not I may be forced to switch to VS Code Im sure Im not the first or the last if this persists I work for a large company and we are switching over to doing a lot with NodeJS If we convert projects over to VS Code we will just use that and stop using VS which seems like a bad business choice for MS Expected Behavior New tests get discoverer Actual Behavior VS freezes Here are the two stacks which contain both the file watcher service and the nodejs TestAdapter when the freeze occurs Not Flagged Main Thread Main Thread MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingNoMessagePumpSyncContextWait mscorlibdllSystemThreadingTasksTaskWaitSystemTimeSpan timeout MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingJoinableTaskFactoryWaitSynchronouslyCoreSystemThreadingTasksTask task MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingJoinableTaskFactoryRunstringSystemFuncSystemThreadingTasksTaskstring asyncMethod MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeServiceRunWithTracingstringMicrosoftVisualStudioServicesFileChangeServiceCompletionTracer tracer SystemFuncSystemThreadingCancellationToken SystemThreadingTasksTaskstring func MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeServiceUnadviseFileChangeuint cookie MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeServiceMicrosoftVisualStudioShellInteropIVsFileChangeExUnadviseFileChangeuint cookie MicrosoftNodejsToolsTestAdapterImpldllMicrosoftNodejsToolsTestAdapterTestFilesUpdateWatcherRemoveFileWatchstring path MicrosoftNodejsToolsTestAdapterImpldllMicrosoftNodejsToolsTestAdapterTestContainerDiscovererOnProjectItemChangedobject sender MicrosoftNodejsToolsTestAdapterTestFileChangedEventArgs e MicrosoftNodejsToolsTestAdapterImpldllMicrosoftNodejsToolsTestAdapterTestFilesUpdateWatcherFilesChangedAnonymousMethod mscorlibdllSystemRuntimeCompilerServicesAsyncMethodBuilderCoreMoveNextRunnerInvokeMoveNextobject stateMachine mscorlibdllSystemThreadingExecutionContextRunInternalSystemThreadingExecutionContext executionContext SystemThreadingContextCallback callback object state bool preserveSyncCtx mscorlibdllSystemThreadingExecutionContextRunSystemThreadingExecutionContext executionContext SystemThreadingContextCallback callback object state bool preserveSyncCtx mscorlibdllSystemRuntimeCompilerServicesAsyncMethodBuilderCoreMoveNextRunnerRun mscorlibdllSystemRuntimeCompilerServicesAsyncMethodBuilderCoreOutputAsyncCausalityEventsAnonymousMethod mscorlibdllSystemRuntimeCompilerServicesAsyncMethodBuilderCoreContinuationWrapperInvoke MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingJoinableTaskFactorySingleExecuteProtectorTryExecute MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingJoinableTaskFactoryRunboolSystemFuncSystemThreadingTasksTaskbool asyncMethod MicrosoftVisualStudioThreadingJoinableTaskCreationOptions creationOptions MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeServiceRunWithTracingboolMicrosoftVisualStudioServicesFileChangeServiceCompletionTracer tracer SystemFuncSystemThreadingCancellationToken SystemThreadingTasksTaskbool func MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeServiceRunWithTracingMicrosoftVisualStudioServicesFileChangeServiceCompletionTracer tracer SystemFuncSystemThreadingCancellationToken SystemThreadingTasksTask func MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeServiceSyncFilestring filename MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeServiceMicrosoftVisualStudioShellInteropIVsFileChangeExSyncFilestring filename MicrosoftVisualStudioEditorImplementationdllMicrosoftVisualStudioEditorImplementationTextDocDataSuspendFileChangeNotificationstring pszFilename int fSuspend MicrosoftVisualStudioEditorImplementationdllMicrosoftVisualStudioEditorImplementationTextDocDataBaseSavestring pszFilename int fRemember MicrosoftVisualStudioEditorImplementationdllMicrosoftVisualStudioEditorImplementationTextDocDataSavestring pszFilename int fRemember uint nFormatIndex MicrosoftVisualStudioEditorImplementationdllMicrosoftVisualStudioEditorImplementationTextDocDataSavestring pszFileName int fRemember Not Flagged Worker Thread Worker Thread MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingJoinableTaskFactoryWaitSynchronouslyCore Managed to Native Transition mscorlibdllSystemThreadingMonitorWaitobject obj int millisecondsTimeout bool exitContext mscorlibdllSystemThreadingTasksTaskWaitSystemTimeSpan timeout MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingJoinableTaskFactoryWaitSynchronouslyCoreSystemThreadingTasksTask task MicrosoftVisualStudioThreadingdllMicrosoftVisualStudioThreadingJoinableTaskFactoryRunintSystemFuncSystemThreadingTasksTaskint asyncMethod MicrosoftVisualStudioThreadingJoinableTaskCreationOptions creationOptions MicrosoftNodejsToolsTestAdapterImpldllMicrosoftNodejsToolsTestAdapterTestFilesUpdateWatcherFilesChangeduint cChanges string rgpszFile uint rggrfChange MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeEventSinkBundleFilesChangedstring files uint changes string traceInfo MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeNotificationPoolFileChangeJobProcessCoreSystemThreadingCancellationToken cancellationToken MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeNotificationPoolJobProcessSystemThreadingCancellationToken cancellationToken MicrosoftVisualStudioShellUIInternaldllMicrosoftVisualStudioServicesFileChangeNotificationPoolProcessNotificationsAsyncMicrosoftVisualStudioServicesFileChangeNotificationPoolAsyncJobQueue queue bool callInBackground SystemThreadingCancellationToken token Resuming Async Method mscorlibdllSystemRuntimeCompilerServicesAsyncMethodBuilderCoreMoveNextRunnerInvokeMoveNextobject stateMachine mscorlibdllSystemRuntimeCompilerServicesYieldAwaitableYieldAwaiterRunActionobject state mscorlibdllSystemThreadingQueueUserWorkItemCallbackSystemThreadingIThreadPoolWorkItemExecuteWorkItem mscorlibdllSystemThreadingThreadPoolWorkQueueDispatch mscorlibdllSystemThreadingThreadPoolWaitCallbackPerformWaitCallback Native to Managed Transition NTVS Version Commit Hash a de e e ea c e ef Visual Studio Version preview Nodejs Version Steps to Reproduce Open a csproj and add a javascript test file Update the file and run build Sometimes the tests get rediscovered and sometimes VS freezes Note that as part of these I was often closingreopening projects and deletingcreating the javascript files Expected Behavior The TestContainerDiscoverer class is responsible for notifying the TestWindow of containers where tests should be discovered It should call the TestContainersUpdated event whenever tests could potentially have changed My expectation is that OnProjectLoaded and OnProjectUnloaded should send the TestContainersUpdated event Actual Behavior If you would put a breakpoint you can see that the OnTestContainersChanged is called but the if condition evaluates to false and the event isnt actually sent meaning that tests dont get removed on project close and dont get discovered on project open from Help About Microsoft Visual Studio NTVS Version Commit Hash a de e e ea c e ef Visual Studio Version preview Nodejs Version Steps to Reproduce Open a nodejs project Run build to discover tests Unload the project If the event would have been sent successfully the tests for the unloaded project should disappear In the OnProjectUnloaded method the project is removed from knownProjects and this makes the if condition always fail whereas in the OnProjectLoaded method the newly created project has HasRequestedContainers set to false making the if condition always fail To report a bug please fill out the fields below Feel free to add additional information too For feature requests or questions you can clear this text Expected Behavior Unable to find RemoteDebugjs Actual Behavior from Help About Microsoft Visual Studio NTVS Version Not able to find the version Visual Studio Version Community Nodejs Version Steps to Reproduce 