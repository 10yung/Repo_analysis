Like other standalone tools we should add a page to the docs describing drdisas Related issues Adds the syntax options to drdisas along with tests The PR also includes minor changes such as the mention of drdisas in the ReadMemd file and a bug fix concerning drdisass redzone bounds check Fixes Updates a nowstale detail in the rseq limitation docs we no longer try to analyze readwrite sequences for restoring state for the second rseq execution We do still limit our checkpointing to generalpurpose registers Issue Travis Mac keeps failing due to yet the test failures are ignored somehow This issue covers figuring out why and fixing the runsuite scripts added the drdisas tool This is a feature request to add options for specifying the output syntax and adding a test for each added rseq support to DR using a runtwice scheme documented in the wiki On the native run we can have the kernel abort and target the abort handler for a migration or context switch with a resulting control flow redirection in the code stream seen by a client However DR does not raise a kernel xfer event there This issue covers adding the event and probably a new type of transfer Xref related issues This issue covers implementing automated binary rerelativization of AArch and AArch instructions We will need a different strategy than the x approach of storing the location of a bit immediate due to the varying immediate encodings For now decodefromcopy invalidates the raw bits to force a reencoding as a workaround for not having this feature usephysical is only supported for online drcachesim today but that is not made clear in the docs nor in actual usage The tool lets you run offline usephysical and ends up with a postprocessed trace with physical data addresses but virtual PC fetches due to an accident instrofflinetgetentryaddr blindly treats the entry as a data ref so it tries to translate bogus addresses composed of module id offset encodings And indeed we get warnings at verbose virtual physical translation failure for x c f virtual physical virtual physical translation failure for x c c d virtual physical translation failure for x c d virtual physical translation failure for x c de virtual physical translation failure for x a c dd virtual physical virtual physical virtual physical translation failure for x c de Those are the instruction entries od t x A x ls td drmemtracethreadsigdir head rawraw head c efaa a c c c f ef c c d ee ee ed ed ec ec c d c de a c dd aa e c de So we have two action items First we should have the frontend refuse to combine usephysical and offline for now and update the docs to reflect this Next we need to decide whether to try to support this combination Is it possible that future Linux distros will all shut down access to pagemap Although for research purposes running as sudo or something may still be feasible How would we support this Wed either have to store extra info for each data ref plus an entry for each instr like for DGC or have a custom solution just for offline where each block PC has entries one virtual and one physical The former will not work well w tools that want operands like opcodemix or microarch simulators but that would be the same for DGC so we might need an option to store the full instr bytes Another limitation today which perhaps should have its own issue with usephysical relates to static linking which we often use for offline tracing Unfortunately the use of stdunorderedmap in physaddrt calls malloc and thus we cannot support it for static linking so we override the DRDISALLOWUNSAFESTATIC declaration drallowunsafestaticbehavior ifdef DRMEMTRACESTATIC NOTIFY usephysical is unsafe with statically linked clients n endif Xref but that issue has many confusing entries so it seemed better to start clean here Today DRs IR considers the address in eaxrax for OPmonitor to just be a register source and not a memory reference Perhaps it should be considered a memref even if there would be no fault on a bad address and thus all tools like Dr Memory would be forced to specialcase it just like prefetch instructions The memory size would be read from cpuid though that just gives a min and max monitorline size Im trying to get VS built tests to pass The drcachesim and drcpusim tests all crash on appveyor and fail locally Locally once I work around I hit this assert Application D derek dr git buildx dbgtests suite tests bin simpleappexe Internal Error DynamoRIO debug check failure D derek dr git src core win callbackc dcontextwhereami DRWHEREFCACHE ba af ad bd dynamoriodrinternalerror x d d derek dr git src core utilsc ba af b f d dynamoriointerceptcallbackstart x d d derek dr git src core win callbackc ba af bc ba af be dynamoriointerceptioncodearray xf d ba af bc e e x ba af be ba af bd dynamoriogetprocaddresscommon xc d derek dr git src core win modulesharedc frame ba af b f d dynamoriointerceptcallbackstart x d d derek dr git src core win callbackc dcontextwhereami drwhereamit DRWHEREAPP n Trying to look up the stack above getprocaddresscommon Im seeing a lot of ucrt crap dealing w msgboxes Seems like all this ucrt code in the client is making alertable calls resulting in a callback ba af eb ffd ce e win uNtUserGetProcessWindowStation x ba af eb ff e drmemtracestring ba af ec ff e drmemtracecandidatemodules ba af ec ba af ed ba af ed ba af ed ff ac c drmemtraceacrtisinteractive x c minkernel crts ucrt src appcrt internal winapithunkscpp ba af ee b ba af ee ff aba a drmemtracetrygetMessageBoxW x a minkernel crts ucrt src appcrt internal winapithunkscpp ba af f ff a drmemtracecommonshowmessageboxwchart xd minkernel crts ucrt src appcrt misc crtmboxcpp ba af f ba af ba af f ff a drmemtraceacrtgetptdnoexit x minkernel crts ucrt src appcrt internal perthreaddatacpp ba af f a a ba af f ff ec a drmemtracewcslen x a minkernel crts ucrt src appcrt string strnlencpp ba af f b ba af f ff e drmemtracesnwprintfs x minkernel crts ucrt inc corecrtwstdioh ba af f ba af ba af f ff bbd drmemtraceerrno x minkernel crts ucrt src appcrt misc errnocpp ba af fa fff ba af fa ff a drmemtraceacrtshowwidemessagebox x minkernel crts ucrt src appcrt misc crtmboxcpp ba af fb ba af ba af fb ff d a drmemtracestring ba af fc ba af fc ba af fd ba af fd ff fb drmemtracecommonmessagew Though it seems that ucrt is trying to report an error Back to the kn callstack if that is accurate and the callback came in here were in trouble U e e dynamoriogetprocaddresscommon xc d derek dr git src core win modulesharedc e e e f dcffff call dynamorioconvertdatatofunction deb U deb dynamorioconvertdatatofunction d derek dr git src core arch archexportsh deb c mov qword ptr rsp rcx deb b mov raxqword ptr rsp deb a c ret I think windbg got it wrong and were really in the ucrt msgbox code Snooping through strings on the stack seeing stuff like ff d a Microsoft Visual C Runtime Lib ff d e rary du ff d a ff d a Debug lsProgram lslslsl ff d e slslslslslslslslsPres ff d s Retry to debug the application ff d du ff d ea ff d ea Assertion Failed du ff d a ff d a du ff d a ff d a du ff d ff d File du ff c e ff c e C PROGRA MIB PROFES ff c VC Tools MSVC incl ff c ude vector du ff d ff d Line du ff d ff d du ff d ff d Expression du ff d ee ff d ee For information on how your pr ff d f ogram can cause an assertionfai ff d f lure see the Visual C documen ff d fa tation on asserts Running in the debugger it shows the error g Breakpoint hit dynamorioprivloadcallentry x fd d b mov raxqword ptr rsp h ss c e bced ea e c dt privmod Local var xc e bced Type privmodt x ea e c x base x a f MZ x size x a x name x a ee KERNELBASEdll x path C WINDOWSsystem KERNELBASEdll x c refcount x d x externallyloaded x isclient x next x ea e privmodt x prev x ea e a privmodt x osprivmoddata null reason unsigned int g Debug Assertion Failed Program File C PROGRA MIB PROFES VC Tools MSVC include vector Line Expression vector iterator not dereferencable For information on how your program can cause an assertion failure see the Visual C documentation on asserts Press Retry to debug the application ModLoad ffd c ffd c AppCoredll ModLoad ffd e ffd e RPCRT dll Breakpoint hit It doesnt pause there though it keeps going and hits the RPCRT privloadcallentry bp Rerunning it happens in instrumentinits call to drmemtraceclientmains call to droptionparsertparseargv Its the st deref of opi Having trouble using debugger drmemtracedroptionparsertallops x d derek dr git buildx dbgtests ext include droptionh ff d f lea rax drmemtraceallopsvec ff f a ff c add rsp h ff d c ret dt drmemtraceallopsvec Symbol drmemtraceallopsvec not found stdvectordroptionparsert ff f a Ambiguous symbol error at stdvectordroptionparsert ff f a stdvectordroptionparsert ff f a Ambiguous symbol error at stdvectordroptionparsert ff f a stdvectordrmemtracedroptionparsert ff f a Couldnt resolve error at stdvectordrmemtracedroptionparsert ff f a The error sounds like Im at allopsend but the for loop should prevent that Probably its some initializer that was supposed to run but our private loader failed to call it If I create a local vector of the same type I can iterate it Heres allops tracedroptionparsertallops allopsvec no type information Uf ac drmemtracedroptionparsertallops d derek dr git buildx dbgtests ext include droptionh ac ec sub rsp h ac b mov eax ac bc mov eaxeax acb b d f a mov ecxdword ptr drmemtracetlsindex b ad b mov rdxqword ptr gs h ada b cca mov rcxqword ptr rdxrcx ade b mov eaxdword ptr raxrcx ae c c cmp dword ptr drmemtraceTSS templateparameter droptionparsertllopsunsigned longunsigned char void const stdvectordroptionparsert ptr stdallocatordroptionparsert ptr int b b eax ae e jle drmemtracedroptionparsertallops x b Branch drmemtracedroptionparsertallops x d derek dr git buildx dbgtests ext include droptionh ae d dc c lea rcx drmemtraceTSS templateparameter droptionparsertllopsunsigned longunsigned char void const stdvectordroptionparsert ptr stdallocatordroptionparsert ptr int b b af e bd call drmemtraceInitthreadheader af db c ff cmp dword ptr drmemtraceTSS templateparameter droptionparsertllopsunsigned longunsigned char void const stdvectordroptionparsert ptr stdallocatordroptionparsert ptr int b b FFFFFFFFh afc jne drmemtracedroptionparsertallops x b Branch drmemtracedroptionparsertallops x e d derek dr git buildx dbgtests ext include droptionh afe d d bc lea rcx drmemtraceallopsvec b b e aaffff call drmemtracestdvectordroptionparsert ptr stdallocatordroptionparsert ptr vectordroptionparsert ptr stdallocatordroptionparsert ptr e b a d d fa lea rcx drmemtracedroptionparsertallops dynamic atexit destructor for allopsvec e b e ead call drmemtraceatexit b d d c lea rcx drmemtraceTSS templateparameter droptionparsertllopsunsigned longunsigned char void const stdvectordroptionparsert ptr stdallocatordroptionparsert ptr int b b b d e ed call drmemtraceInitthreadfooter drmemtracedroptionparsertallops x d derek dr git buildx dbgtests ext include droptionh b d c lea rax drmemtraceallopsvec b b c add rsp h b d c ret gs x TEBThreadLocalStoragePointer Maybe we didnt miss an initializer maybe the TLS view for privlibs is not correct TODO compare to a native run using this same ucrt and vector code If we bypass this assert we hit CRASH debug code accessing PEBKernelCallbackTable which is NULL Application D derek dr git buildx dbgtests suite tests bin simpleappexe DynamoRIO Cache Simulator Tracer internal crash at PC x ad c Please report this at Program aborted xc x x ad c x ad c x x a Base x Registers eax x ebx x ecx x edx x f d f d esi x edi x esp x f d f e ebp x r x f d f d r x r x r x r x r x r x r x eflags x version custom build ChildSP RetAddr Call Site f d f e f d dynamoriointerceptcallbackstart x d derek dr git src core win callbackc f d f f f d f f dynamoriointerceptioncodearray xf d f d f f e de x f d f f f d f f dynamoriogetprocaddresscommon xc d derek dr git src core win modulesharedc U rip dynamoriointerceptcallbackstart x d derek dr git src core win callbackc ad c b c mov raxqword ptr rcxrax ad c mov qword ptr rsp h rax ad ce d cmp qword ptr dynamoriodrstats ad d f je dynamoriointerceptcallbackstart x ad ad dc b mov raxqword ptr dynamoriodrstats ad e b cmp dword ptr rax h ad ea f jb dynamoriointerceptcallbackstart x ad ad f b mov raxqword ptr dynamoriodrstats r Last set context rax rbx rcx rdx f d f d rsi rdi rip ad c rsp f d f e rbp r f d f d r r r r r r r dt PEB peb x KernelCallbackTable null 