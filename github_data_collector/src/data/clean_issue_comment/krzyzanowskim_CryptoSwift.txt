Hi I bumped into some issues while upgrading from swift to swift On swift I was using version and all works well What I did was I went on some trials from version and the result was On version and AES successfully generated but failed with EXCEXCEPTION when trying to encrypt the value swift try chiperencryptArraytextutf While on version greater than the result was a failure to generate AES with a result of nil value Here are some snap of the related codes swift static private func generateKeysalt String text String keyLength Int iterations Int throws UInt let utf Text Arraytextutf let hexSalt salthexaBytes let generator try PKCS PBKDF password utf Textsalt hexSaltiterations iterationskeyLength keyLengthvariant HMACVariantsha return try generatorcalculate swift initsalt String iv String password String keyLength Int iterations Int selfpassword password do let chiperKey try ChipergenerateKeysalt saltpassword passwordkeyLength keyLengthiterations iterations let blockMode CBCiv ivhexaBytes selfchiper try AESkey chiperKey blockMode blockMode catch return nil Any suggestions Fixes Checklist x Correct file headers see CONTRIBUTINGmd x Formatted with SwiftFormat x Tests added Changes proposed in this pull request Implementation of OCB mode RFC Describe the bug Cannot convert value of type UnsafeRawPointer to expected argument type ArrayUInt Reproduce Steps to reproduce the behavior pod update Pull latest version of the code Also tried version and version I was trying to figure out whether this was an issue related to compiling with Swift so I tried prior versions Compile application for macCatalyst target or iPhone target or iPad target Same result any way with any code base version and any target Compile error is happening on line of StringExtensionswift A second compiler error is also occurring on line of the same file Value of type UInt has no member toBase If I was at my day job I would tend to think that one of our developers forgot to check in a file There was another issue that may or may not be related After updating to the latest version the compiler complained that a file was not available called RandomBytesSequenceswift This file does not exist so I cannot confirm if this is related by viewing the source because nothing opens when I click on it so I disassociated it with the target and attempted the build Describe the bug Im try to decrypt string with AESCTRNoPadding Reproduce func aesDecryptkey String iv String throws String let ctr CTRiv Arrayivutf let decrypt try AESkeyArraykeyutf blockModectrpaddingnoPaddingdecryptArrayselfutf toHexString return StringinitdataDatahex decrypt encoding utf extension Data public inithex String selfinitArrayUInt hex hex by using this func but i got empty string every time please help me thank you OCB is an AEAD scheme that is specified in RFC The author made a mode friendly specification in Fixes Checklist x Correct file headers see CONTRIBUTINGmd x Formatted with SwiftFormat x Tests added Changes proposed in this pull request code formatted as per swift standards Checklist Correct file headers see CONTRIBUTINGmd Formatted with SwiftFormat Tests added Changes proposed in this pull request Gets rid of very strange looking allocations where plain arrays could be used Whenever possible ArrayinitunsafeUninitializedCapacityinitializingWith is used Describe the bug On Mac OS untested on iOS using as a cocoapod Code coverage fails with the error Failed to generate coverage for target Podstestsframework at path UsersbrianLibraryDeveloperXcodeDerivedDatacryptotestacbtwdrzwlpbjmaszlynljvafncwBuildProductsDebugPodstestsframeworkVersionsAPodstests Malformed coverage data To Reproduce Steps to reproduce the behavior Create a unit test target for your project install the CryptoSwift pod against that target target tests do Comment the next line if youre not using Swift and dont want to use dynamic frameworks useframeworks pod CryptoSwift Pods for cryptotest end enable code coverage for some targets exclude pods code coverage fails for all tests Sample code NA Expected behavior Code coverage should not break when including this pod Environment please complete the following information Swift version Platform iOSmacOSLinux MacOS Installation method CocoaPodsCarthageSPM CocoaPods Project name NA Additional context I easily reproduced this with at totally clean test project Checklist x Correct file headers see CONTRIBUTINGmd x Formatted with SwiftFormat x Tests passed Changes proposed in this pull request The Salsa algorithm has been added The ChaCha algorithm implementation is simplified Is your feature request related to a problem Please describe To create any Bitcoin addresses you need both of these functions Describe the solution youd like Simply add a well respected implementation of the above algorithms Describe alternatives youve considered Manually bringing an implementation in my project Would be nice if it was packaged as part of CryptoSwift Additional context 