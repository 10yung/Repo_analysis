Compatibility to AVR Arduino is not premium in this case as the very much out of spec defaults for the servo PWM timings cause my servos to RUN HOT and PERMANENTLY FAIL The defaults can be overridden but they must be within public specification for unsuspecting initial use Still under investigation is the recently patched maximum servo count limit seems from current experience with running fan controls and servos too high besides where can one connect servos to an ESP default GPIOs AFAIK the servo lib does not apply to I C servo extension boards Basic Infos X This issue complies with the issue POLICY doc X I have read the documentation at readthedocs and the issue is not addressed there I have tested that the issue is present in current master branch aka latest git X I have searched the issue tracker for a similar issue If there is a stack dump I have decoded it X I have filled out all fields below Platform Hardware ESP Core Version Development Env NA Operating System NA Settings in IDE NA Problem Description I was sent here from the Tasmoda wiki I am still investigating but figured I would post while I worked on it I am using Tasmotalite v on a Gosund WP When I clear settings RESET the device gets a DHCP address and seems to follow the server lease time h in my case However after the first lease renewal approx h later it requests a lease approx every minutes Rebooting does not go back to the server config lease time it immediately starts with the minute renewals One weird thing may be that it send DHCPREQUEST and immediately a DHCPDISCOVER Then the handshake proceeds It looks like it might be requesting a lease renewal without going through the whole DORA process but it doesnt wait long enough for the server to answer the initial request The server ACKs the request but the device has already sent the DISCOVER I have verified with wireshark that the lease time being sent to the device is correct The device just seems to ignore it after the first renewal I am using dnsmasq v on RaspberryPi running arch Linux dns ARCH SMP PREEMPT Tue Oct UTC armv l GNULinux My Tasmoda devices are the only one exhibiting this behavior All over devices wait the standard one half of lease time to start requesting again I have verified with wireshark that the devices are being given the proper initial lease time I suspect that not a lot of people are checking their DHCP logs probably on a networking device so not sure how many even know this is happening MCVE Sketch cpp include Arduinoh void setup void loop Debug Messages Debug messages go here Basic Infos X This issue complies with the issue POLICY doc X I have read the documentation at readthedocs and the issue is not addressed there X I have tested that the issue is present in current master branch aka latest git X I have searched the issue tracker for a similar issue X If there is a stack dump I have decoded it X I have filled out all fields below Platform Hardware ESP Core Version Core SDK dev a e same issue with Development Env Platformio Operating System Windows Settings in IDE Module Generic ESP Module Flash Mode qio Flash Size MB lwip Variant v Lower Memory Reset Method nodemcu Flash Frequency Mhz CPU Frequency MHz Upload Using SERIAL Upload Speed serial upload only Problem Description On some fielded units I am getting an exception after WiFi disconnect On a few units it happens very frequently On most units the same code is not taking an exception at all and my application connectsdisconnects every minutes This is a long standing defect The exception address in the current build using core is xx D but it looks like the same defect has been happening using and earlier The exception address moves around of course but always decodes to somewhere in ESP WiFiGenericcpp and usually to code related to WiFi disconnectshutdown which is what is happening when the exception takes place Does anyone know what excvaddr means It has similar values across all of the exceptions in different Core versions x The stack trace is short and does not contain anything useful Consider the following stack trace shown in the debug output below It decodes as follows espaddr line D C Users david platformio packages frameworkarduinoespressif libraries ESP WiFi srcESP WiFiGenericcpp Which is in ESP WiFiGenericClassshutdown uint sleepUs WiFiState state exception address is this line statecrc shutdownCRCstate The message Disconnected from AP r n see code below is the last thing printed before the exception ie my disconnect callback is being called The rest of the exception stack trace is short and not useful nothing decodes to useful textspace addresses MCVE Sketch cpp void ICACHERAMATTR onSTADisconnectedWiFiEventStationModeDisconnected eventinfo if connecttime save disconnect time and reason disconnecttime rtcget disconnectreason eventinforeason disconnectssid eventinfossid connecttime if configgetDebug configdebugwifi SerialprintfDisconnected from AP r n Registration done elsewhere before WiFibegin is called WiFionStationModeDisconnectedonSTADisconnected Code that shuts down WiFi wifistationdhcpcstop WiFimodeWIFIOFF any thoughts would be much appreciated Debug Messages Disconnected from AP output from my disconnect handler Fatal exception LoadStoreAlignmentCause epc x d epc x epc x excvaddr x depc x Exception epc x d epc x epc x excvaddr x depc x stack ctx sys sp ffffdc end fffffb offset a fffff c ffefcd fffff fffdc fff fffff f fffdab fffdab f fffff e fffffb fffffa fffff aa aa c bd stack signingpy Adding shellTrue to line seams to correct an issue with signing a binary on windows Someone would need to test whether that change brakes it on linux or other OSs Illustrates the use of SSE using ESP WebServer edit from maintainer closes A Hardware WDT Reset stack dump tool by Michael Hightower This Sketch demonstrates the use of a tool that prints a stack dump after a Hardware WDT reset After a Hardware Watchdog Timer reset the module hwdtappentrycpp writes a stack dump to the serial interface The goal was to have a file hwdtappentrycpp that could be dropped into a sketch directory then open the sketch project build upload and debug Note at the restart the UART speed is set by the ROM to bps This is the speed your serial device needs to be for displaying the dump See hwdtappentrycpp for more options and details This is a request for support of HTML Server Sent Events aka Event Source It allows eg to implement an event bus over HTML The required changes to the ESP WebServer library are absolutely minimal zero impact on existing code and increase in code sizememory footprint of just few bytes basically sizeof bool Essentially the variable bool keepCurrentClient which is currently hardcoded to false becomes a protected class variable in the ESP WebServer class that can be modified via a new function called keepCurrentClientbool To enable Server Sent Eventsevent subscription it requires two web server instances one being changed to keep the client socketsession an event listener open until disconnected ESP WebServer serverport ESP WebServer SSEserverport serverbegin SSEserverkeepCurrentClienttrue SSEserverbegin Everything else can implemented in user code event subscription event bus keepalive messages event payload etc I have this currently working on a clean fork from master branch with just this one change Happy to post a PR its ready to post if this is a reasonable request I can also contribute a working example I suppose in the ESP WebServer examples section Thanks once again for this brilliant library and for taking the time to consider this request Ewald Basic Infos This issue complies with the issue POLICY doc X I have read the documentation at readthedocs and the issue is not addressed there X I have tested that the issue is present in current master branch aka latest git X I have searched the issue tracker for a similar issue If there is a stack dump I have decoded it I have filled out all fields below Platform Hardware ESP Core Version latest git hash Development Env Arduino IDE Operating System Windows Settings in IDE Module Wemos D mini r Flash Mode qio Flash Size MB lwip Variant v Lower Memory Reset Method ck Flash Frequency Mhz CPU Frequency Mhz Upload Using SERIAL Upload Speed Problem Description I have problem with WiFi UDP program with UDP Example In the beginning Wemos is receiving UDP data But after some minutes minutes Wemos is not receiving UDP data Any solution Thank You Code include ESP WiFih include WiFiUdph const char ssid const char password WiFiUDP Udp unsigned int localUdpPort local port to listen on char incomingPacket buffer for incoming packets char replyPacket Hi there Got the message a reply string to send back void setup Serialbegin Serialprintln SerialprintfConnecting to s ssid WiFibeginssid password while WiFistatus WLCONNECTED delay Serialprint Serialprintln connected UdpbeginlocalUdpPort SerialprintfNow listening at IP s UDP port d n WiFilocalIPtoStringcstr localUdpPort void loop int packetSize UdpparsePacket if packetSize receive incoming UDP packets SerialprintfReceived d bytes from s port d n packetSize UdpremoteIPtoStringcstr UdpremotePort int len UdpreadincomingPacket if len incomingPacket len SerialprintfUDP packet contents s n incomingPacket send back a reply to the IP address and port we got the packet from UdpbeginPacketUdpremoteIP UdpremotePort UdpwritereplyPacket UdpendPacket Platform Hardware Wemos D mini Core Version d e c Problem Description The docs for WiFistatus state Function returns one of the following connection statuses WLCONNECTED after successful connection is established WLNOSSIDAVAIL in case configured SSID cannot be reached WLCONNECTFAILED if password is incorrect WLIDLESTATUS when WiFi is in process of changing between statuses WLDISCONNECTED if module is not configured in station mode The code just does a mapping from the return values of wifistationgetconnectstatus to Arduino constants wlstatust ESP WiFiSTAClassstatus stationstatust status wifistationgetconnectstatus switchstatus case STATIONGOTIP return WLCONNECTED case STATIONNOAPFOUND return WLNOSSIDAVAIL case STATIONCONNECTFAIL case STATIONWRONGPASSWORD return WLCONNECTFAILED case STATIONIDLE return WLIDLESTATUS default return WLDISCONNECTED IMHO the documentation and the code have the following issues WLNOSSIDAVAIL and WLCONNECTFAILED From what I experienced both states only happen with setAutoReconnecttrue Thats mostly an issue with the underlying esp sdk but I think the docs should at least state the fact Also looking at the code suggests that a wrong password isnt the only possible cause though I dont know under which circumstances wifistationgetconnectstatus would return STATIONCONNECTFAIL WLIDLESTATUSand WLDISCONNECTED I think the two status values are mixed up The implementation should probably reflect the semantics of the original Arduino library quoted below WLIDLESTATUS it is a temporary status assigned when WiFibegin is called and remains active until the number of attempts expires resulting in WLCONNECTFAILED or a connection is established resulting in WLCONNECTED WLDISCONNECTED assigned when disconnected from a network But as it is implemented now its excatly the other way round WLIDLESTATUS is reported before and after WiFibegin resp WiFidisconnect are called and WLDISCONNECTED in the time between the two calls before a connection has been made Demo sketch Output Status before WiFibegin WLIDLESTATUS Status while connecting WLDISCONNECTED Status after connecting WLCONNECTED Status after WiFidisconnect WLIDLESTATUS include ESP WiFih define SSID xxx define PW xxx const char wiFiStatus switch WiFistatus case WLIDLESTATUS return WLIDLESTATUS case WLCONNECTED return WLCONNECTED case WLDISCONNECTED return WLDISCONNECTED default return Unhandled value void setup Serialbegin WiFipersistentfalse WiFisetAutoConnectfalse WiFidisconnect SerialprintfStatus before WiFibegin s n wiFiStatus WiFibeginSSID PW while WiFistatus WLCONNECTED SerialprintfStatus while connecting s n wiFiStatus delay SerialprintfStatus after connecting s n wiFiStatus WiFidisconnect SerialprintfStatus after WiFidisconnect s n wiFiStatus void loop Id be happy to prepare a PR but Id like to discuss the prefered solution first The obvious fix would be to swap the two symbols in the switch statement but that would break backwards compatibilty with programs that rely on the current behaviour At very least the docs should be updated I have the impression that for WLIDLESTATUS and WLDISCONNECTED they try to represent what the implementation would be if it matched the definition of the original library so if isnt an option then the annotations for these two values should be swapped The longer term goal should imho be to fix WiFistatus to better represent the current state of the connection That would include making WLNOSSIDAVAIL and WLCONNECTFAILED work with setAutoReconnectfalse and maybe add the currently unsupported state WLCONNECTIONLOST i wont promise anything but would such a PR be considered given that it would break backwards compatibility even more