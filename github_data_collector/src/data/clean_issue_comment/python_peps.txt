If were deprecating and removing uu we should do the same to the codec of the same name Hi I am using mypy of version My minimal working example follows below It is to great extends a blackformated copy of the section in PEP about upper bounded types python from abc import ABCMeta abstractmethod from typing import Any TypeVar class ComparablemetaclassABCMeta abstractmethod def ltself other Any bool abstractmethod def gtself other Any bool class MyInt def initself n int None selfn n def ltself other Any bool if isinstanceother int return selfn other else raise NotImplementedError def gtself other Any bool if isinstanceother int return selfn other else raise NotImplementedError CT TypeVarCT boundComparable def minx CT y CT CT if x y return x else return y minMyInt MyInt ok return type int min ok return type int minx y ok return type str If I check this code I get the following bash mypy pythonversion boundmwepy boundmwepy error Value of type variable CT of min cannot be MyInt boundmwepy error Value of type variable CT of min cannot be int boundmwepy error Value of type variable CT of min cannot be str Found errors in file checked source file I find that very confusing Im currently talking with a process management researcher and asked them why their nominal process flow has a Replaced state in it Turns out they took it straight from the diagram in PEP The Superseded box is labeled as Replaced That part of the diagram is weird anyway as its more likely to be Active PEPs that go to Superseded than Final ones Currently PEP states Within a repository the root URL MUST be a valid HTML page with a single anchor element per project in the repository HTML page is used in a few other places to refer to the expected return value of the PEP repository HTML specifies two syntaxesdocument formats HTML and XML Currently pip only supports HTML documents I would propose the following Add a note to PEP to the effect of Below HTML page can be taken to mean an HTML document confirming to HTML and then replace each instance of HTML page with HTML page Add a constraint to the existing list When served via HTTP repositories SHOULD include a ContentType header with a mediatype value of texthtml when returning an HTML page Clients MAY choose to parse an HTTP response body as an HTML page in the absence of a ContentType header References pypapip Looks like footnotes are shifted on PEP This concern has been raised in the past in a Zulip topic The Newbugsannounce mailing list Hello I feel frustrated by the PEP RSS feed not containing the PEP abstract but only its title It seems like it would be possible to add the PEP abstract as the items description and move the PEP author as the items author using the docutils library to parse the PEP file when generating the RSS feed What do you think about this proposition The changes to PEP following the appointment of the first Steering Council have made the BDFLDelegate role more significant since every PEP is now expected to have a delegate appointed even in cases where the delegate is an SC member speaking on behalf of the SC However this information isnt presented in the PEP Index overview its only visible on the individual project pages Similarly which version a PEP is targeting is very useful overview information as a draft PEP targeting the next release currently needs different handling from one targeting a subsequent release Updating the PEP generator to include that additional information would be reasonably straightforward as it already reads in all the headers for all the PEPs so the main complication would be to ensure that the pythonorg PEP index rendering doesnt break as discussed in zooba Im using this issue as a to be discussed list for PEP Some are just crazy ideas that I wanted to dump into text form before I forget them again prevent piping code from stdin like curl spython use I isolated mode which also sets E and s explain why importing from pyc is not supported optionally have further restrictions for openforimport like OMAYEXEC and W X Python file must not be owned or writeable by current effective uidgid unless its root optionally allow passing arguments to scripts On Linux its common to have command line utilities in Python There must be a way to mark a script for arguments perhaps spython arguments on the second line of the script Or only allow arguments from scripts in wellknown directories like binsbin optionally prevent interactive consoles may have to block pdb cmd code discuss if spython should blocklimit ctypes block exec of imports in pth files force compile exec to go through a file on the file system Maybe something that can be generated on build time and then shipped optionally block exec completely namedtuple uses exec to generate a new function The function generator could be implemented as tuplemakenew or so dataclasses are using exec cgi trace doctest timeit and a couple of more modules use exec They are probably not useful in secure mode SPYTHONLOG breaks with tradition to have all Python env vars prefixed with PYTHON The part of PEP that was actually accepted is the installation directory layout the discussion of Python level APIs in the Implementation Details section isnt accurate This section should be updated to point readers towards distlib and importlibmetadata instead Example acceptsint intfloat returnsintfloat def funcarg arg return arg arg The order of accepts and returns should be reversed otherwise the assertion will be raised Traceback most recent call last File UsersjackPycharmProjectstutorialtestdecoratorpy line in module returnsintfloat File UsersjackPycharmProjectstutorialtestdecoratorpy line in checkaccepts assert lentypes ffunccodecoargcount AssertionError 