Describe the solution youd like Supporting Swift so that module stability can be achieved Additional context The current MagazineLayout target is still using Swift This means every time Xcode updates with a newer swift version well have to rebuild MagazineLayout Updating to Swift will make use of the module stability to allow us rebuild only when we really want to Details A crash occurs during layout when a section is updated to be empty hide the footer Under these conditions initialLayoutAttributesForAppearingSupplementaryElementofKind elementKind String at elementIndexPath IndexPath is called with an empty IndexPath This results in a crash when elementIndexPathsection is accessed Related Issue If this is related to any issues link them here Motivation and Context Our project has a notion of a collapsed section which is essentially an empty section Collapsed sections do not show a footer view but the expanded section may have a footer How Has This Been Tested I have modified the example project to reproduce the issue see second commit on my PR To test I removed all of the items from a section that had a footer I observed that without the fix the modified example crashes with the fix the modified example does not crash I took at look at the test suite to see if I could add coverage for this test case but Im not sure what the your preferred strategy for testing this code path would be The logic lives within the MagazineLayout class which is not currently under test as far as I can tell Note Im not sure that the changes to example app are appropriate to bring back but I wanted to be able to show you what was up Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Docs change refactoring dependency upgrade x Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help x My code follows the code style of this project I think so My change requires a change to the documentation I have updated the documentation accordingly x I have read the CONTRIBUTING document I have added tests to cover my changes Describe the bug If a refreshcontrol is added to the collectionView pulling to refresh will cause the sticky header to pin to incorrect position instead of top of the screen To Reproduce Steps to reproduce the behavior Go to MagazineLayoutExample Go to ViewControllerswift Inside viewDidLoad add collectionViewrefreshControl init Run the project and pull to refresh then scroll down You will see the same behavior as shown in the attached gif Expected behavior The sticky header is expected to pin to the top even when the refresh control is active Screenshots fdg Smartphone Simulator iPhone Plus OS Version Latest I just want to say upfront thanks so much for open sourcing this library They say naming variables and caching data is the hardest thing in computer science but Id argue dealing with collection view layouts on iOS has made me pull out more hair over the years than anything else I can think of I have one feature request and its something Ive been messing with over the last few days but this is your library and I want to make sure that everyone here is happy with the ideaapproach Is your feature request related to a problem Please describe Section headers can be pinned to the top of the screen like table view headers can This is fantastic And more than enough in most circumstances However I have a use case where instead of the section header scrolling off screen when we get to the next section I want it to stay stuck until I encounter the next pinned section So lets say section and section are pinned I want the header in section to stay on screen while scrolling through sections until only scrolling off once we reach section Describe the solution youd like Currently in MagazineLayoutHeaderVisibilityMode theres a boolean pinToVisibleBounds property I propose changing this to be an enum to be something like public enum MagazineLayoutPinningMode case none case sectionVisibleBounds case visibleBounds As mentioned in the opening naming things are hard so Im not married to any of these But essentially none is the same is the current pinToVisibleBounds being set to false sectionVisibleBounds is the current truebehaviour and visibleBounds would be this new case Im talking about Describe alternatives youve considered One alternative could be to instead just allow the ability to create a header similar to table view headers not section headers which could have pinning behaviour on it In some ways this might be preferable as it doesnt muddy the implementation of section headers which already behave as youd probably expect based on how they work on table view headers and doesnt break existing API But this is also a little less flexible Additional context This has come about because Im working on an app which has a component based API Im guessing Airbnb has something similar if theyve gone to the trouble of building this library where all content is driven by the server Each component is part of its own section and I want video players to be able to stick around on screen The option of putting everything in one section and only having one sticky header was investigated but in the end this made things even more tricky to deal with Scroll collection view to the bottom then delete some cells the behavior is unexpected The animation of deleting cell is great but the contentOffset is adjusted without any animation the collection view just jumps Screenshots If applicable add screenshots to help explain your problem Smartphone please complete the following information Simulator iPhone iOS Describe the bug When reloadData is called the collectionView sometimes doesnt preserve the scrolling position causing the collectionView to jump abruptly To Reproduce Steps to reproduce the behavior Open and run the stock example project workspacce under MagazineLayoutExample Please see the attached gif to reproduce this issue Note this doesnt occur every time you need to adjust scrolling position before reloading the data if you cannot reproduce it at the beginning Expected behavior The screen should maintain its position after reloading data Screenshots Untitled Smartphone please complete the following information Simulator iPhone Pro Max OS iOS Version current Additional context Not sure if this could be a bug in UICollectionView rather than MagazineLayout please advise UICollectionViewLayout supports the ability to order its elements cells supplementary views decoration views not only by their IndexPath so items with small IndexPath will be in the collectionView subviews stack in front of item with bigger IndexPath This is required for example if you want to have an animation on a cells content which will hover above all other cells Itd be great if MagazineLayout will support changing items zIndex I can implement it make a pull request I think that the best place to get this data is part of the delegate call for MagazineLayoutItemSizeMode maybe we need to change its name to MagazineLayoutItemSizeAndOrderMode Currently all widths are represented as a fraction n of the width How would you suggest to add support for something like Redefining fractionalWidth to use a floating point number or adding a numerator associated value to that enum Thanks