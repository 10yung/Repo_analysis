This is still WIP and in RFC state It implements reverse dynamic forwarding added in OpenSSH ssh add support for reverse dynamic forwarding In this mode ssh will act as a SOCKS proxy and forward connections to destinations requested by the remote SOCKS client This mode is requested using extended syntax for the R and RemoteForward options and because it is implemented solely at the client does not require the server be updated to be supported Usage is the same like in the ssh commandline tool using var client new SshClientlocalhost username password clientConnect var forwarding new ForwardedPortRemote clientAddForwardedPortforwarding forwardingStart Add support to parse OpenSSH Keys with ECDSA and RSA ChangeId Iaa cce f e fee a cb f f b cc Currently SSHNET only supports MD with the bigish struggles right not being that FingerPrint being just a bite array so something we cant easily add new algorithm support to Were currently calculating our own fingerprint for SHA support but ideally having the library support this out of the box would be best To prevent breaking backwards comparability we can Make additional properties per algorithm not the best easy though accessible matches current convention Make a new property that allows us to look up by algorithm all algorithms need to be checked upfront and stored but we can add more Make a method that takes an algorithm that well return the thumbprint for internal implementation may cache this What probably makes the most sense Or does everyone just roll their own and its not really a big deal It would be great if there was an async version of the Connect method as that would allow nonblocking behavior which can be very useful when dealing with unresponsive devices that cause the connection timeout to be triggered wasting precious thread time Sending a command and receiving the response I cannot open nano I can use vi but I get the output of that but then I cant perform in edits to it because all I am receiving is the output of that command How do you create an environment like putty using SSHNET Is it possible to create an environment like putty Hello I am using SSHnet to connect to a unix server it works very well but I have a problem when trying to execute the following command sqr RS filesqr username password It sends me an error since it does not recognize sqr as a valid command This is because when logging in with sshnet it does not load the profile of the user who is logging on Can you tell me what can I do Hi We use SSHNET to establish a tunnel with nodehttpproxy It works perfectly by using shell SSH client With SSHNET the connection will drop unexpectedly with the error ProtocolError data packet referred to nonexistent channel This will happen easily if multiple channels are open and closed rapidly then the whole session will be dropped unexpectedly Any idea Hi I am new to SSHNET and C too I have question about use of SshClient I am using Visual studio community I am connecting from win pc to Raspberry pi B Buster Everything works fine But do I always have to connect client like private void GONClickobject sender EventArgs e using var client new SshClient pi Rpi clientConnect clientRunCommandgpio mode out clientDisonnect Can I just somewhere initialize var client new SshClient pi Rpi clientConnect And then use it in other classes for example in the buttons click private void BUTOPENClickobject sender EventArgs e clientRunCommandgpio write Thanks in advance for your reply There is an issue where the session is closed and ErrorOccured will not be triggered We have inserted the logging to the library and attached here in the issue We found that at the client sent ChannelCloseMessage to the server but after that from onwards the client again sent a few ChannelDataMessage to the server again Finally at the server replied DisconnectMessage and the client closed the SSH session completely without returning any events issuenonexistentchanneltxt Hi for an succesful connection to my DUT I would need Key Exchange Method diffiehellmangroup sha is there a chance for a new version that supports that method in the next time