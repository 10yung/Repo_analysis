 Create new Xamarin project UWP Add TinyIoC to all projects in solution Add TinyIoCContainer to Appxamlcs using TinyIoC using XamarinForms using XFDependencyInjectionTestModels using XFDependencyInjectionTestServices using XFDependencyInjectionTestViews namespace XFDependencyInjectionTest public partial class App Application public static TinyIoCContainer tinyIoCContainer public App InitializeComponent tinyIoCContainer new TinyIoCContainer tinyIoCContainerRegisterIDataStoreItem MockDataStore DependencyServiceRegisterMockDataStore MainPage new MainPage Inject object into constructor of viewmodel public class AboutViewModel BaseViewModel public AboutViewModelIDataStoreItem dataStore basedataStore Title About OpenWebCommand new Commandasync await BrowserOpenAsync Buildrun UWP project Error Could not load file or assembly XLabsIocTinyIOC Version Cultureneutral PublicKeyTokennull The system cannot find the file specified Bin directory contains XLabsIocdll and XLabsIocTinyIOCWP dll Version numbers for DLLs do not match version in error Hi guys I found out the following issue When I register multiple implementations for the same interface but do it individually one by one the unnamed one if present isnt resolved when using constructor injection of IEnumerableType On the other hand it works when using ResolveAllType method Consider following registration example TinyIoCContainerCurrentRegisterInterface Impl TinyIoCContainerCurrentRegisterInterface Impl When calling TinyIoCContainerCurrentResolveAllInterface resulting list contains both of registered implementations But if its used this way TinyIoCContainerCurrentResolveCtorTest where class CtorTest looks like this public class CtorTest public CtorTestIEnumerableInterface impls resulting list contains only named registrations When I was digging in sources I found out that in following method private object GetIEnumerableRequestType type if NETFXCORE var genericResolveAllMethod thisGetTypeGetGenericMethodResolveAll typeGenericTypeArguments new typeofbool else var genericResolveAllMethod thisGetTypeGetGenericMethodBindingFlagsPublic BindingFlagsInstance ResolveAll typeGetGenericArguments new typeofbool endif return genericResolveAllMethodInvokethis new object false the last row invokes method with last parameter set to false This parameter is actually includeUnnamed parameter in ResolveAllType method When ResolveAllType is called directly as in fisrst example it falls to default call where includeUnnamed is set to true Thats why it works in first example but doesnt work in second My question is is that a purpose If so can you examplain me why Thanks Patrik For RESOLVEOPENGENERICS add a new requestedType parameter when calling a factory method providing the type object for the type being resolved This allows factory methods for registered open generic types to properly resolve the particular closed generic type requested Ensure that registered open generics can be resolved from child containers I couldnt find any info about platform compatibility in the wiki I would like to use TinyIoC for a Unity game potentially targeting pcmaclinuxxboxps androidios Im guessing pc mac and linux should be no problem at least it is working fine so far I dont have other devices yet to make any tests Are those platforms mobile and console officially or not so officially supported by TinyIoC and TinyMessenger Why do SafeDictionary and TinyIoCContainer both call GCSuppressFinalize when neither have finalizers From I ran into the issue that you cannot delegate factories with the AsSingleton method csharp containerRegisterMyConcreteClassc o var dependency cResolveMyDependency return new MyConcreteClass dependencyAFunction AsSingleton does not work It throws an exception an Register I believe it is more like a missing feature But I found no reason why it is not supported Can this be fixed I think the line that undefs APPDOMAINGETASSEMBLIES here should be extended to additional netstandard versions My understanding I could be wrong is that AppDomain is not part of the netstandard as its gone away in netcore Adding TinyIoC with Nuget in a blank UWP Project in Visual Studio dont include the cs file in the project