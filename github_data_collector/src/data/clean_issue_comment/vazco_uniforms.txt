This pull request answers the need for faster reproductions Codesandbox is able to pull data directly from github repository to create sandboxes Ive set it to pull from the master branch and reproductions directory This will ensure that reproductions are always up to date with the master branch Created boilerplate code for presenting code samples Added link to codesandbox when creating github issue Hi the readonly attribute of an html input doesnt seem to be supported I want to use it in the case where one of the fields is calculated from others so that the user sees and submits the value but cant modify it via the UI The disabled attribute doesnt fit my case as I want it to be styled appropriately via bootstrap themes and submitted accordingly edit Im using SimpleSchema and Bootstrap Hi Ive recently written a component that adds reordering items to ListField and improves look of buttons IconButon with fullWidth is not goodlooking in my opinion It is written only for MaterialUI so I didnt do a PR Maybe I should If so as a new component or modifying ListField Check it out here code and demo I am quite new to this project so I hope to hear feedback about my modifications To simplify the work and information flow weve decided to keep the changelog up to date as much as possible and treat it as a kind of log of the work You can install the latest version with npm install uniformsnext details summaryPrevious contentsummary We are finally sure how to approach the new release Ive already mentioned it in a few places like and So how its going to look like Version x is still actively maintained Well try to limit the number of added features Frequent releases of preview versions Probably alphan As the SemVer states not everything is guaranteed to work and breaking changes may happen Well try to keep you up to date with the changes in this issue and in the changelog on v branch The first version should be released by the end of November Status x New context API Already implemented all tests are passing The new context tries to stay in align with v so an additional wrapper is needed Its going to be changed Custom hooks Not started yet Deprecated lifecycle methods Not started yet Way to simplify making custom themes Not started yet Rethink bridges error handling Not started yet Complete typings There are more types than in v but theres a lot to be done details Validators currently work by throwing an object that is at a minimum details arrayOfErrors This is not best practice as validation errors are not actually runtime errors but the proper result of a working validator against a currently invalid model In future versions it would be better to handle this via returning errors directly versus returning nothing to indicate success using promises error first callbacks etc Side note The current system also requires throwing a somewhat nonstandard Error object that cannot be created via the Error constructor alone If I am using for instance the JSONSchemaBridge and want to throw a standard Error object as to appease a linter I would need the following code throw Objectassignnew ErrorValidation Error details validatorerrors Of course one could argue throwing a standard Error object is perhaps worse because once again this is not an actual error condition In my case I settle on just disabling ESLint for the line in question If you just want to replace one field eg replace the ListField with a custom one for all schemas you need to reimplement the whole AutoField It would probably easier if you could pass a getFieldComponent to a AutoForm which would hook into here and would take props and could return a Component If no component is returned it would fallback to the normal logic Warning componentWillMount has been renamed and is not recommended for use See for details Move code with side effects to componentDidMount and set initial state in the constructor Rename componentWillMount to UNSAFEcomponentWillMount to suppress this warning in nonstrict mode In React x only the UNSAFE name will work To rename all deprecated lifecycles to their new names you can run npx reactcodemod renameunsafelifecycles in your project source folder Please update the following components AutoValidatedQuickUnstyledForm BoolField ErrorField SideEffectNullComponent TextField Im using React v and Im getting a lot of such and similar warnings in the console Because of this its really hard to see any new warning I understand that uniforms supports react all the way down to v wow I hope uniforms v can drop support for at least some of these older react versions Im also looking forward for uniforms with hooks That will be amazing addition Thanks Recursive JSON schemas such as this one where the recursi e property is not required make this library crash It should not ideally definitions address type object properties billingaddress title Billing address ref definitionsaddress streetaddress type string city type string state type string required streetaddress city state type object properties billingaddress title Billing address ref definitionsaddress Ive started to use hooks and they make a lot of sense Heres what I suggest some ideas AutoForm to accept the prop ref as a useRef const form useRef AutoForm refformAutoForm ConnectField const onChange useUnifield would something like this even work Sub components especially on large forms should be able to have access AutoForm parent reference const uniforms useUniforms It would be nice if you could do something like that includes a dummy setup of Uniforms running So if someone wants to show a bug or something automatically forks your sandbox and leaves the link inside GitHub 