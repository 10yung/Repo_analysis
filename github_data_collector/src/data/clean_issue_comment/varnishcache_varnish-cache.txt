A panic which I do not understand straight away because I see no way how a taskpriv NULL could end up on the idlequeue Other things to note temp R fixed in a da d a fcab c bff a e Panic at Fri Jan GMT Assert error in poolgetidleworker cachecachewrkc line Conditionwrk not true version varnishtrunk revision df d a a d f b d ccd fc cbc d vrt api ident jsolarissumemsdefaulthcritbitports now mono real Backtrace d ab optlocalsbinvarnishdpanic x b x d ab c f optlocalsbinvarnishdVASFail x x c f d optlocalsbinvarnishdpoolgetidleworker x x d dc optlocalsbinvarnishdPoolTask x x dc cbad optlocalsbinvarnishdVBFFetch x d x cbad optlocalsbinvarnishdCNTRequest x x e optlocalsbinvarnishdhttp req x c x e d c optlocalsbinvarnishdWRKThread x c x d c d a optlocalsbinvarnishdpoolthread x x d a fffffc fef e ea libamd libcso thrpsetup x a xfffffc fef e ea thread cacheworker thrreq bb vxid transport HTTP state HTTP Proc step RSTPMISS reqbody RBODYNONE restarts esilevel sp fd vxid topen tidle ws id ses s f r e a transport HTTP state HTTP Proc client XXXX tmpvarnishproxysock worker fffffc fe fdcc ws fffffc fe fdd id wrk s f r e fffffc fe fd VCLmethod MISS VCLreturn fetch VCLmethods RECV HASH MISS ws bb id req s f r e bb a httpconn bb fd doclose NULL ws bb Already dumped see above rxbufb rxbufe bb a bb pipelineb pipelinee contentlength bodystatus none firstbytetimeout betweenbytestimeout http req bb e ws bb Already dumped see above hdrs GET mediaREDACTEDjpg HTTP Host REDACTED UserAgent REDACTED XForwardedFor REDACTED XForwardedProto https XRealIp REDACTED XVarnishStatic true vdc bb f nxt retval vcl name boot busy discard state auto temp R conf syntax srcname optlocaletcvarnishdefaultvcl Builtin optlocaletcvarnishcommonvcl optlocaletcvarnishprefreshvcl objcore REQ bd refcnt flags busy expflags boc b d refcnt state invalid vary stevedorepriv exp objhead d stevedore flags privs bb d top bb req bb Already dumped see above privs bb thrbusyobj c e end d c retries req bb Already dumped see above sp Already dumped see above vfc ca d failed req resp wrk oc objflags x ws c id bo s f r e ca wsbo objcore fetch bd Already dumped see above flags dostream directorreq d cliname bootdefault adminhealth healthy changed type backend ipv port hosthdr nconn vcl name boot busy discard state auto temp R conf syntax srcname optlocaletcvarnishdefaultvcl Builtin optlocaletcvarnishcommonvcl optlocaletcvarnishprefreshvcl vmods blob eaf Varnish trunk df d a a d f b d ccd fc cbc d std eba Varnish trunk df d a a d f b d ccd fc cbc d The purpose of this ticket is to reach agreement on how to fix a race during the worker process shutdown e d ff cb c d aa exposes a race caused by objects being freed after STVclose has run see the bottom of this note for an explanation why it is only exposed by the umem stevedore The current umem code asserts that no stevedore operations happen after the close yet they exist the expiry thread continued to run this was fixed in b e d eb b c ef e but we continue to see panics from calls into the stevedore presumably from ordinary worker threads handling passes like this one from vtest c vtc dT v debugInfo Child ended v debugError Child Panic at Tue Jan GMT v debugAssert error in smufree binvarnishdstoragestorageumemc line v debug Conditionscsmucache not true v debugversion varnishtrunk revision b e d eb b c ef e vrt api v debugident jsolarissdefaultsdefaulthcritbitports v debugnow mono real v debug v debugInfo v debugChild said Child dies While I do not have a stack trace yet pinpointing the root cause my working hypothesis is that the above is caused by ObjSlim called from HSHCancel called from the worker thread for hfmhfpprivate objects This ticket is to ask how we should solve this race two ideas make our shutdown graceful in that we wait for all worker threads to terminate this option would close the STVclose race with the assumed definition that no stevedore operations should happen after a close In my opinion this would actually fix our worker shutdown which currently terminates all threads forcibly no matter what state they are in To implement this option we could promote the existing pool destruction code which right now is only active when the droppools debug bit is set define stevedores to be required to support frees after close this is a trivial change in umem see df d a a d f b d ccd fc cbc d should fix the panics we are seeing in vtest But in my mind this option might be the wrong choice from a design perspective and it would probably lead to follow up issues should we ever want to support pluggeable stevedores with a lifetime shorter than the worker process Why we only observe this race in vtest with umem The race only affects stevedores implementing the close callback which in varnishcache core only deprecatedpersistent and umem use Of these two umem is the only one we actually test extensively from vtest umem drops a cache in the close callback which is being used during frees Using http and berespdostream true we can take as long as we want to send data but after switching to http the sendtimeout is triggered and connection closes Expected Behavior Either connection should close using http to honor sendtimeout configuration or it should not close in http Current Behavior Connection is closed after sendtimeout using http but not http both with berespdostream true berespdogzip false and berespttl s Possible Solution Improve docs to explain http behaviour Ability to configure sendtimeout in VCL will solve problem Steps to Reproduce have a backend which send data regularly taking a high time for exemple we sent a dot every second for seconds to reach the default s timeout use http to call the backend we used haproxy in tcp mode for ssl termination wait until the timeout connection get closed using http connection is not closed Context Were sending a file to client generating it on the fly Right now we increased timeout to hours so its working but we might be keeping idle connections for naught I must stress out that connection is not closed using http so were sending enough data to keep connection alive Your Environment Version used Operating System and version docker image Source of binary packages used if any official docker image Running behind a haproxy in proxy mode The th of march is a Sunday so well probably shift it a few days Name Number Rank things to do before then The timestamp field is a string in the varnishstat j output whereas all the others are objects that all follow the same structure This makes writing parsers a pain because timestamp always needs to be specialcased for little to no extra value Id like to see it gone for the next major and if people are ok with that theres the question of the replacement none sit on this ticket and once we know that the next release will be just retire timestamp offer a time attribute that follows the common structure Im personally in favor of option once the data has been deserialized adding your own timestamp is super easy Also varnishstat doesnt have a timestamp field Following up on the whole import essential vmods intree and specifically heres vmodcookie The bar is not very high it needs to either be an empty string or a list of absolute directories separated by colon characters But that validation is pretty strict When we discussed during last bugwash the question of validating path parameters came up In this patch series I first trimmed some fat then implemented a absolute path validation and plugged everything into parameter handling and libvcc A nice side effect to this change is that we only ever build VCL and VMOD paths once per change including once for the initial value So between the single allocation for the data structure and no longer rebuilding both paths whenever we load a VCL its a bit of churn that goes away admittedly not in a critical part of the code base Another interesting result of this change is that we now have a single call site for VFILsetpath and that could still be the case if reached consensus I deliberately left path escape out of the scope By that I mean using directory components to attempt reading files outside of the designated path There was no clear we should do that feeling from the bugwash contrary to the absolute paths question There might be other means to escape the path like creating symbolic links I dont know whether we could really do something about that And next thing you know someones gonna yell that we broke their use case After updating hitch on vco github webhooks failed via https It would be generous to describe the resulting diagnostics as obscure In githubs end all you see is We couldn t deliver this payload No error In varnishlog I get Begin c sess PROXY SessOpen c a Proxy c SessClose c OVERLOAD End c I realize that the length of some of the tlvs may be under an attackers control but I would still expect some hint that maybe I have a misconfiguration and something pointing in the direction of the session workspace I am launching the command from systemd Ubuntu server without w parameter and with D and with P Expected Behavior Launching with no problem Current Behavior There is an execution error missing w parameter Possible Solution Get working without w Steps to Reproduce for bugs Change on systemdvarnishncsa deleting the default w log Context I want to send all the output to syslog Your Environment Version used Operating System and version Ubuntu server Source of binary packages used if any default Generalize cci to also handle centos scrub rst pdf references while at it