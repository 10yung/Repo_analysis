while zsh handles binary data correctly in its process substitution other shells like bash and fish dont zsh print R n pass wc c bash bash warning command substitution ignored null byte in input echo n e pass wc c fish echo n e pass wc c In order to pass the correct key to cryptsetup I think the best way would be to pipe the gpg output to head c to remove the newline created by gpg this way the commands would be lolosetup f losetup f secrettomb gpg d secretkey head c cryptsetup keyfile luksOpen lo secret mount devmappersecret mnt edit That test was with a gpg key today i tried with symmetric encryption and the resulting file from gpg didnt have a newline so the commands above wouldnt work maybe this is a gpg bug edit Its definitely not a gpg bug in genkey the print options are just for a gpg key line and n for a symmetric key line If a user sets GNUPGHOME before the first run the keyring wouldnt be stored in HOMEgnupg so the check in lines would just create an empty folder with an empty file I would update the aforementioned check with this snippet local gpghomeGNUPGHOMEHOMEgnupg r gpghomepubringgpg mkdir p m gpghome touch gpghomepubringgpg This software uses userxattr to save hashes of files and their mtime to detect changes It may be used to check both on tomb contents and on tomb files There are situations in which one may be coerced to give up the password with a fine or imprisonment or even torture We can address this in Tomb v with a new feature hereby proposed An additional emergency password may be given when used to open the tomb will silently wipe all contents and eventually place decoy contents inside to not raise suspicion This should happen without leaving a trace of the operation Of course those adopting this feature are supposed to have backups of the Tomb in another place Im interested in discussing this feature while designing the upcoming Tomb major version which will rely on Zenroom rather than GnuPG for key encryption hence offering more advanced logics of interaction with passwords and keys as well advanced crypto as zeroknowledge proofs zkSNARKS Comments welcome The manpage tomb mentions tomb dig but doesnt tell what are the arguments and in what order tomb dig tomb Commanded to dig tomb tomb E Missing path to tomb tomb dig mytomb tomb Commanded to dig tomb mytomb tomb E Tombs cant be smaller than mebibytes tomb dig mytomb tomb Commanded to dig tomb mytomb tomb E Tombs cant be smaller than mebibytes tomb dig h tomb Commanded to dig tomb tomb E Missing path to tomb tomb dig h should give the subcommand help and the manpage should mention expected args for a subcommand When trying to resize a tomb the e fsck tool is used so e fsprogs should be a dependency via tomb resize s passwordtomb k passwordtombkey tomb Commanded to resize tomb passwordtomb to mebibytes tomb Valid tomb file found passwordtomb tomb Key is valid tomb Generating passwordtomb of MiB records in records out bytes MB MiB copied s MBs tomb A password is required to use key passwordtombkey tomb Password OK tomb opening tomb password files noncontiguous blocks tomb E e fsck failed to check tombpassword loop via took s e fsck zsh command not found e fsck Im trying to run Tomb in Termux I have been able to install pinentry gnupg cryptsetup and zsh bash pkg install rootrepo pkg install pinentry gnupg cryptsetup zsh I then got Tombs source code cd into it and ran make install successfully Now trying to run tomb version I get datadatacomtermuxfilesusrbintomb failed to load module zshmapfile tomb E Missing required dependency sudo Please install it If in Termux sudo should not be used I dont know how to fix the zshmapfile failure yet Would you want to support Termux anyway Could be great to have tombs on my phone wink I cant open one of my encrypted containers because of the next error tomb D using pinentrygtk tomb D getlukskey tomb D Created tempfile tmpzsh tomb D gpg datos cifrados DES tomb D GNUPG NEEDPASSPHRASESYM tomb D gpg cifrado con frase contrase a tomb D GNUPG BEGINDECRYPTION tomb D GNUPG DECRYPTIONCOMPLIANCEMODE tomb D GNUPG DECRYPTIONINFO tomb D GNUPG PLAINTEXT tomb JYbkTu tomb D GNUPG PLAINTEXTLENGTH tomb D gpg ATENCI N la intgridad del mensaje no est protegida tomb D gpg Hint If this message was created before the year it is tomb D likely that this message is legitimate This is because back tomb D then integrity protection was not widely used tomb D gpg Use the option ignoremdcerror to decrypt anyway tomb D GNUPG ERROR nomdcwithlegacycipher tomb D gpg decryption forced to fail tomb D GNUPG DECRYPTIONFAILED tomb D GNUPG ENDDECRYPTION My Tomb version is and the command executed tomb open ignoreswap misdatostomb k misdatostombkey My Linux kernel version Linux arch arch ARCH SMP PREEMPT Tue Nov UTC x GNULinux Is there anything I can do in order to open my container Thank you very much A tomb file would become impossible to mount in certain conditions after a failed resize Heres how to reproduce the issue Create a tomb as normal dig forge a key then lock the tomb with that key Use tomb resize on the tomb file Insert a wrong password times or at least until it fails Now the tomb file is resized evenutally however it will becomes umountable and returns Failure mounting the encrypted file Id suggest to fix by asking for the passphrase before actually resizing it semid semop failed for cookie xd d cac incorrect semaphore state Failed to set a proper state for notification semaphore identified by cookie value xd d cac to initialize waiting for incoming notifications This happens often when you tomb lock Perhaps it happens on other functions also This message turns out to be harmless and happens when everythings going perfectly But it reduces user confidence in a program that already has some misleading content This message seems to indicate yet another try to get possession of a file If so and if you have control over the software writing this message it should say seeking control of file whatever not something with the word failed in it