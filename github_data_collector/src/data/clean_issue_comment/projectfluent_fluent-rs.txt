What is the correct way to format values with currencies with fluentrs Is there an equivalent to FluentNumberArgument mainjs data amount FluentNumberArgumentvalue currency USD mainftl amountowed You owe amount As we integrate fluent into Gecko one of the last items to be resolved is how to plug a formatter into the resolver from outside In JS model we have FluentNumber and FluentDateTime which is a bit arbitrary and not very extendible In Rust we have only FluentNumber so adding a datetime type is challenging That inflexibility is being addressed in But the other issue is that even for types that we do have in Rust FluentNumber we dont have a formatter baked into the API In JS we use IntlNumberFormat and expect the environment to polyfill it in case its missing In Rust Im not sure how to address it I have an equivalent of IntlNumberFormat but it is provided by the Gecko and not part of fluentbundle crate so I need some way to register the formatter and the resolver to know to use it for the given variant of the FluentValue stasm Pike any recommendations Is it feasible to compile down this project as a web assembly module to use for example in Go projects using or Manishearth heres how Id use the memoizer One challenge I see is that theres no easy way to have a Default if I need to allocate an IntlMemoizer externally Im wondering if it would be possible to have FluentBundle either take an external one or allocate its own if not provided but Im not sure how to design such a generic As I posted on discourse Im looking for a basic CLI to query a message from ftl files I finally figured out how to at least compile the parser and resolver binaries The former was somewhat selfexplanitory as it responded to a help flag and seems to do what it says on the tin Pass it a single argument of at FTL file name and get an parsed AST representation back on STDOUT Okay but what do I do with resolver It doesnt show any help messages clearly is waiting for something on STDIN but crashes no matter what I pass it The link in the Readme should be fixed as it currently links to something on cratesio that doesnt exist A help message of some kind should be added that explains the usage what input it expects and what output can be achieved CLI tool usage should be mentioned somewhere maybe in the main rust docs I dont know where actually but I dont see it anywhere the project is talked about We should try to make fluentbundle release size as small as possible cmyr pointed out in that at the moment the size increase is kb Id like to look for ways to make it smaller According to the analysis the bulk of the size increase goes into rental and syn used for langid macro I think that first low hanging fruit would be to stop using the macro in fluentbundle and investigate the rental not really related to but thinking along related lines Thinking about the sort of API I would like to expose to application developers I have a few guiding principles localization should not fail at runtime as much as possible messages should be validated at compile time the type system should encode as much as possible types and counts of message arguments eg Adoption should be as close to trivial as possible application code should be easy to read With those goals in mind Ive been sketching out some possible ways to use a derive macro to encode the number and type of arguments alongside the message key rust trait FluentMessage const KEY static str fn localizeR BorrowFluentResource self ctx FluentBundleR String deriveFluentMessage struct MacosMenuAboutApp appname String This generates approximately the following code rust impl MacosMenuAboutApp pub fn newappname impl IntoString Self MacosMenuAboutApp appname impl FluentMessage for MacosMenuAboutApp const KEY static str macosmenuaboutapp fn localizeR BorrowFluentResource self ctx FluentBundleR String let args fluentargs appname selfappnameasstr let msg ctxgetmessageSelfKEYexpectmissing localization key let value msgvalueasrefexpectmissing value let mut errs Vecnew let result ctxformatpatternvalue Some args mut errs for err in errs eprintlnlocalization error err resulttostring Which when used would look something like rust fn somefunction let bundle FluentBundle getfluentbundle let title MacosMenuAboutAppnewMyApplocalizebundle asserteq title About MyApp Again this is just a sketch and Im not yet very familiar with all of fluents features its very possible that this wont work for some cases but I thought I would share the idea The thing I would really like here is some way to verify messages at compile time This might involve something like rust mainrs verifylocalizationwithbundlesresourcesl nlocaleresid which would compile down to something like rust lazystatic static ref FLUENTVERIFIER ArcMutexFluentVerifier let mgr fluentResourceManagernewresourcesl nlocaleresid fluentFluentVerifiermgr fn fluentstaticverifymsg str args OptionFluentArgs Result VerificationError FLUENTVERIFIERlockunwrapverifymsg args And then each time the derive runs for our trait before we generate our type we would check that the provided message and args work for some set of specified locales This is definitely a halfbaked idea right now and there are lots of details that would need to be shared but wanted to at least get my initial thoughts out Now that PGO landed in stable I think it may be generally useful especially to speed up the parser Fixes Fixes 