Reading the docs for the windows temp dir selection it goes through several fallbacks before it selects a dir Would it be possible for this crate to check that the dir selected is writable by the current user before selecting it See Fixes As the title says currently the code doesnt make any validations if the prefix or suffix are valid path component values ie they dont contain a slash or If needed I can provide the patch So unix really is lovely sh mkdir p foobar cd foobar chmod ax foo touch first touch foobarsecond touch cannot touch foobarsecond Permission denied As written this library has the same problem as the second case We use the absolute path when creating temporary files instead of the relative path I believe this can actually be an issue in practice with some jails Fixing this on linux is doable with openat and unlinkat Fixing this on osx is possible using perthread CWDs at the cost of two extra syscalls to setunset the threadlocal CWD Linux supports linking a securely created temporary file OTMPFILE back into the filesystem so long as it wasnt created with OEXCL I believe this will improve the performance and security of one of my applications This branch extends NamedTemporaryFile to create these unnamed temporary files such that the existing interface is maintained you can persist these unnamed NamedTemporaryFiles into the filesystem rust let tmp NamedTempFilenewdeleted tempdirunwrap tmppersistnoclobber somedirectoryunwrap The code hasnt turned out that great I dont like the name newdeleted nor attemptwithoutname nor ramming this support for unnamed temporary files into an interface named NamedTemporaryFile I decided to add it to NamedTemporaryFile as it is where the persist functionality currently exists and because we can gracefully fallback to a real named file without breaking anyone hopefully The path function continues to exist and returns an implementation detail the path to the procselffd While not inherently harmful this is at least confusing I cannot see how to renameat directly into the filesystem so for the persistclobbering case the code has to create yet another named temporary file and link into that then rename This is horrible I havent tested it on nonLinux and suspect Ive made some mistakes there Note that NamedTemporaryFiles cant end up marked as deleted on nonmodernlinux platforms so the error handlingfallback around those cases is less interesting eg the bailing in the windows persist implementation So Should this functionality belong in this create Can anyone else think of a better interface or name Is there anything horribly wrong with whats here Like and it would be nice to get a normal file after calling persist on a NamedTemporaryFile NamedTemporaryFile is opened with o Id expect to get a o file after that