Would definitely appreciate a PR that fixes this issue With a small baby at home I rarely have time to work on fixes myself anymore but if you write a PR Ill work with you to get it merged Originally posted by mallorypaine in This is a difficult phase for any OS project Path has obviously abandoned any work on FastImageCache mallorypaine one ofthe original developer announced in that hell continue maintaining FIC issuecomment even though hes not associated with Path anymore mallorypaine please object if you changed your mind while I try to push more work your way To prevent any further fragmentation we should try to channel as many issues and PRs towards mallorypaines fork Long term we should try to move the repository entirely The Plan Upvote this issue to gain attention If youre about to open an issue or PR head over to mallorypaines fork to do so Get in touch with GitHub and see if theres a way to transfer the repository Find a way to update the podspec In Xcode the new main thread checker kept warning me about FastImageCache using UIApplications isProtectedDataAvailable on a background thread This should be innocuous but I think Xcode is just broadly looking at UIKit on background threads More consequently this was preventing me from running unit tests locally on my own project The basic change here is to use NSNotificationCenter to watch for notifications when protected data becomes available or unavailable and maintain that state as a static variable which the instances can then utilize it would be MUCH more performant to use dispatch queues instead of locks Also super simple to make the switch Seeing these errors in the console when running FastImageCache on iOS using Xcode beta Main Thread Checker UI API called on a background thread UIApplication isProtectedDataAvailable PID TID Thread name none Queue name compathFastImageCacheQueue QoS Backtrace FastImageCache x bd d FICImageTable canAccessEntryData FastImageCache x bda e FICImageTable entryDataAtIndex FastImageCache x bd FICImageTable setEntryForEntityUUIDsourceImageUUIDimageDrawingBlock FastImageCache x bf f FICImageCache processImageforEntityimageTablecompletionBlocks blockinvoke libclangrtasaniossimdynamicdylib x f a wrapdispatchasyncblockinvoke libdispatchdylib x b cf dispatchcallblockandrelease libdispatchdylib x b dispatchclientcallout libdispatchdylib x b b a dispatchqueueserialdrain libdispatchdylib x b c a dispatchqueueinvoke libdispatchdylib x b f dispatchrootqueuedrain libdispatchdylib x b ece dispatchworkerthread libsystempthreaddylib x b b a pthreadwqthread libsystempthreaddylib x b b d startwqthread Venmo reports Main Thread Checker UI API called on a background thread UIApplication isProtectedDataAvailable PID TID Thread name none Queue name compathFastImageCacheQueue QoS Backtrace FastImageCache x bd d FICImageTable canAccessEntryData FastImageCache x bda e FICImageTable entryDataAtIndex FastImageCache x bd FICImageTable setEntryForEntityUUIDsourceImageUUIDimageDrawingBlock FastImageCache x bf f FICImageCache processImageforEntityimageTablecompletionBlocks blockinvoke libclangrtasaniossimdynamicdylib x f a wrapdispatchasyncblockinvoke libdispatchdylib x b cf dispatchcallblockandrelease libdispatchdylib x b dispatchclientcallout libdispatchdylib x b b a dispatchqueueserialdrain libdispatchdylib x b c a dispatchqueueinvoke libdispatchdylib x b f dispatchrootqueuedrain libdispatchdylib x b ece dispatchworkerthread libsystempthreaddylib x b b a pthreadwqthread libsystempthreaddylib x b b d startwqthread Were currently pulling in commit e b dfe c b a cf b d c f thanks Security scan tools are complaining that we should apply appropriate protection mode everytime when we are writing content to the file Im having trouble converting my old source to Swift in following area Ive this following usage which was working prior to the version extension NewManPhoto FICEntity internal var UUID String if UUID nil MD hashing is expensive enough that we only want to do it once let imageName String sourceImageURLlastPathComponent let UUIDBytes CFUUIDBytes FICUUIDBytesFromMD HashOfStringimageName UUID FICStringWithUUIDBytesUUIDBytes return UUID New XCode starts giving me following error UUID has been renamed to uuid But when I looked inside the FICEntity file I noticed it had UUID only property nonatomic copy readonly NSString UUID Anyway after accepting Xcodes autofix suggestion it became smallcase but pops another error ObjectiveC method uuid provided by getter for uuid does not match the requirements selector UUID The code became something like this internal var uuid String objcUUID But beside it fixed XCode erupt same error again to the line ObjectiveC method uuid provided by getter for uuid does not match the requirements selector UUID and the problem continues until the source became looks ugly and nonfixable Can you help how to resolve this situation mallorypaine when will you release the next version There are some interesting merged and yet unmerged changes that surely some people would like to have in their apps We have been using the library for some time and we occasionally get reports from users where they get stuck in a state where avatars are displayed for incorrect users The issue is persisted across app and phone restarts as well AFAIK we are doing nothing out of the ordinary 