Hi According to and the end of the interval is included when splitting by period I guess there should be a way in this library to cover not only the inclusive case but also the exclusive To cover the exclusive case I suggest one of the following Add until to RichReadableInstantscala scala RichReadableInstantscala def untilother ReadableInstant Interval tootherwithEndothertoInstantminus L Users code val inclusive start to stop by minutes val exclusive start until stop by minutes The problem here is that interval contains intervalend is false Add exclusiveBy to RichIntervalscala scala RichIntervalscala def exclusiveByperiod ReadablePeriod List DateTime byperioddropRight Users code val inclusive start to stop by minutes val exclusive start to stop exclusiveBy minutes I will be glad to create a PR with one of the proposed or any other solutions Hi Recently Ive seen something missing from this library the ability to add a duration to a date time Ive written an extension class for this myself but maybe something similar could be added to nscalatime If you think thats cool I could probably work in a PR to add this feature scala import scalaconcurrentdurationFiniteDuration import orgjodatimeDateTime object DateTimeSyntax implicit class RichDateTimedateTime DateTime def minusduration FiniteDuration DateTime dateTimeminusMillisdurationtoMillistoInt def duration FiniteDuration DateTime minusduration def plusduration FiniteDuration DateTime dateTimeplusMillisdurationtoMillistoInt def duration FiniteDuration DateTime plusduration Existing toDateTime in RichLong always uses default time zone which is not always what is desired For using custom time zone its necessary to do double call like toDateTimetoDateTimeDateTimeZoneUTC which doesnt look nice So my request is to please add more toDateTime helper which also accept DateTimeZone code scala import comgithubnscalatimetimeImports hour hourmillis day daymillis results import comgithubnscalatimetimeImports res comgithubnscalatimetimeDurationBuilder comgithubnscalatimetimeDurationBuilderfef c res Long res orgjodatimePeriod P D res Int At the moment ScalaJS allows to use either javascript Date class or javautilDate classes That is why for cross scalascalajs libraries one has to use only terrible default javautilDate class 