Added Altair GraphQL Client to docs I want to test my entire scheme by testing each type individually to decouple testing process and make it more expressive mock root element and then instantiate the one I want to test something like this public function testTestCarOwnerIsCorect expected id name Alex age car Carquerywhereid getfirst carGraphqlType thisappgetCarGraphqlTypeclass ownerResolver carGraphqlTypeowner owner ownerResolvercar selfassertEqualsexpected owner if I define resolver explicitly on CarGraphqlType for owner filed I can easily get it and resolve the owner field carGraphqlType thisappgetCarGraphqlTypeclass ownerResolver carGraphqlTypeowner owner ownerResolvercar Is there a way to get a default resolver from a field through its Type instance if the resolver is not defined explicitly There gotta be a way to do it since It works well when I query it through graphql endpoint while resolver for owners is not defined on the CarGraphqlType under the hood it somehow resolve it using default resolver query carsid id owner id name age So Is there some way to do so without explicitly defining resolver for owner on CarGraphqlType carGraphqlType thisappgetCarGraphqlTypeclass ownerResolver carGraphqlTypeowner owner ownerResolvercar The specification recently included a new keyword repeatable that allows specifying directives that may be defined multiple times Reading multiple directives already works fine so that part should not be too hard We will have to add support for the new keyword and adapt the validation steps to handle it Partial support was already added to the reference implementation Full support is underway too I want to take my SQL database and create a GraphQL endpoint for it So I am trying out graphqlphp Is there any tool that you know of which can make it easier to define types Let me explain I can go to my database pull out all the records from a given table and create php objects from each row and its fields I can then JSON encode that and send it over an HTTP endpoint Is there anything that will take a sample JSON object and generate infer the graphqlphp type from that Replace XDebug by PCOV faster for coverage Upgrade PHPUnit to v keep v for EOLed PHP Run coverage on PHP Fix PHPUnit v deprecations Port assertArraySubset from dmsphpunitarraysubsetasserts for the method in PHPUnit its deprecated Also library does not support PHP therefore must be ported enabled extension installer so we do not need to reference extension includes for extensions supporting it added baseline so no more violations can be added while theres no need to fix current ones right now few violation fixes To regenerate baseline theres a new script in Composer phpstanbaseline GA test x test CS break x test PHPStan break x test unit test break To compare with Travis run Hello Vladimir I am tried to use Query batching how described at My endpoint code is schema new Schema query Typesquery mutation Typesmutation config ServerConfigcreatesetSchemaschemasetDebugtruesetQueryBatchingtrue server new StandardServerconfig serverhandleRequest The code works well with query query eventid id But dont work with batching query query eventid externalid content There is an error errors message Syntax Error Unexpected extensions category graphql locations line column Please help me how to use query batching I dont know whether this is an implementation bug or just incorrect documentation The documentation for enum types value entries is stating Type mixed Notes Internal representation of enum item in your application could be any value including complex objects or callbacks But any value is incorrect as arrays are not allowed If you pass in an array as value its simply ignored and the name of the enum value is used instead So its basically everything except and array ServerRequestInterface is not needed parent RequestInterface is sufficient Replaced custom PSR test stubs with nyholmpsr implementation Fixed reading body contents ServerRequestInterface extends RequestInterface so for this case I think its not a BC break Rephrasing exception message might be considered a BC break I guess