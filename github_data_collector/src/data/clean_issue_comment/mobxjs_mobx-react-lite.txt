 I havent really looked into it and to be honest I havent fully grasped current solution in next branch yet RoystonS can you perhaps have a look cc mweststrate Related issue This change allows wrapping generic components while preserving generic parameters There is also unintended change that preserves all static types This has mostly positive effect though typeof type compare and render which are not copied over remain with their original type if defined on base component I didnt find a way to omit these properties as any kind of narrowing will cause generic parameters to be converted to unknown When using observer to wrap component that accepts generic argument the generic argument is lost effectively removing option to have observer components with generics Ive been able to hack together following workaround but it would be great if generics werent lost by default in observer mobxreact works with generic component correctly Workaround ts function genericObserverT extends ReactFunctionComponentP P extends object T extends ReactFunctionComponentinfer P P unknownfn T T return observerPfn as T Current behavior Desired behavior similar to mobxreact Sample codesandbox Currently Im using ErrorBoundary class component implements componentDidCatch etc that wraps up the hooks since they dont support error catching yet ErrorBoundary App ErrorBoundary Is there some tricky way to retain or set the function name when using observer wrapper with an arrow function const App observer throw new Errortest Results in The above error occurred in the wrappedComponent component in wrappedComponent in ErrorBoundary Ive tried settings displayName and defaultPropsname with no luck The only workaround so far is to convert the arrow function to a named one const App observerfunction App Which results in The above error occurred in the App component in App in ErrorBoundary Here is the related code typescript import React from react import observer useLocalStore from mobxreactlite const context ReactcreateContextnull function useTest const store any ReactuseContextcontext return storelistmape e const Test observer const store any ReactuseContextcontext consolelogrender const list useTest const local useLocalStoresource get list return sourcelist list return div p str JSONstringifylocallist p button onClickstoresetclickbutton div const App const store useLocalStore list as any set storelist return contextProvider valuestore as any Test contextProvider export default App It will render unlimited times every time I set the store data list Mobx mobxreactlite react On the docs specifically this page there is a commen Note that using a local store might conflict with future React features like concurrent rendering Is it possible to address why this might conflict What does conflict mean Ive seen some discussion about Reacts ability to rebase and Michel Westrate suggesting that mobx shouldnt be used for local component state Is this still a valid claim still Related issues from around the place If you create a new react native project on and create a component wrapped with observer HOC you get an error when hot reloadingfast refresh The Observer component seems to work finewhich would make sense Everything else seems good with useLocalStore and others Just wanted to bring it up incase others are running into it Unfortunately I cant get anything to run online Snack doesnt support latest react native Id be glad to walk someone through it or create a project if needed Thanks Ive decided not to bother with ESLint for x and this will go straight to Also added running linter as part of CircleCI I think its time to get this thing out It seems that React has included some preliminary changes for upcoming Concurrent mode which are causing trouble with the current test With the code of useObserver from next branch tests are passing again although there is a bunch of act warnings which might be false positive as its actually necessary to simulate commit phases and similar We can review that later Personally we have been using this branch for a couple of months now in production and no related problem seems to occur Changelog follows Breaking changes Remove deprecated hooks useComputed useDisposable useObservable Internals of useObserver are rewritten to support React Strict mode RoystonS Simplified and optimized build output with TSDX tool CommonJS build is the main inside indexjs which uses either mobxreactlitecjsproductionminjs or mobxreactlitecjsdevelopmentjs depending on NODEENV variable ESM build is moved to mobxreactliteesmjs and its up to the consumer to minify it Webpack does it automatically UMD build is moved to mobxreactliteumdproductionminjs or mobxreactliteumddevelopmentjs respectively React Native no longer has a specific build the regular one can be used Closes 