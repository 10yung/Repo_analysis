Hello I found a warning in your library in the DHTcpp file comparison between signed and unsigned integer expressions I think that it can be fixed by replacing on line define TIMEOUT with define TIMEOUT xffffffffUL or maybe define TIMEOUT UINT MAX Hello friends I am trying out this DHT Sensor Library and started off by using the DHTtester example The issue is related to this line of code TLDR I think the include directive here must be used with angle brackets rather than double quotes to reduce the chance of surprises If this is deemed unnecessary kindly explain to me Thanks Details Upon a quick inspection of the DHTtester example code I noticed the library was included as include DHTh That is the DHTh was included as a source file from current sketch directory rather than using angle brackets to include it as a standard header file as in include DHTh Both versions compile fine for me even when I have my sketch folder in another location However I think the angle bracket version would be a better option as that would prevent any surprises for example if the user somehow had another DHTh file in their working sketch folder Furthermore the other example which is DHTUnifiedSensor uses angle brackets to include the DHTh and other dependencies as shown below In conclusion I think we should use angle brackets for DHTtester example If this is however deemed unnecessary I would be glad to get an explanation for that so I can learn from it Thanks for your hardwork and efforts to put together this library and many others Cheers This change sets pullTime to a reasonable value if begin isnt called Its arguably an error to not call begin but this used to work just fine in version Right now if you forget to call begin you just get bogus or nan values and with debugging enabled DHT checksum errors With this change if read is called before begin well print a helpful message if debugging is enabled and continue with the default value of pullTime Thank you for creating a pull request to contribute to Adafruits GitHub code Before you open the request please review the following guidelines and tips to help it be more easily integrated Describe the scope of your changeie what the change does and what parts of the code were modified This will help us understand any risks of integrating the code No functional changes only a cast to remove warnings about comparisons between signed and unsigned integers and commenting out an unused parameter to suppress that warning Describe any known limitations with your change For example if the change doesnt apply to a supported platform of the library please mention it No known limitations Please run any tests or examples that can exercise your modified code We strive to not break users of the code and running testsexamples helps with this process No functionality of the code was changed The InterruptLock exists in coresesp interruptsh in ESP Arduino This PR adds a simple preprocessor guard to elicit the redefinition of InterruptLock for the ESP target DHT on D of TEENSY powered with V or V not able to be read by this library or by idDHT library Tried suggested fixes of changing pullup delay time in declaration but with no resolution Seems time scale related idDHT library able to read for first few seconds then throws checksum errors continuously Retrieving information from sensor Read sensor OK Humidity Temperature oC Temperature oF Temperature K Dew Point oC Dew Point Slow oC Retrieving information from sensor Read sensor OK Humidity Temperature oC Temperature oF Temperature K Dew Point oC Dew Point Slow oC Retrieving information from sensor Read sensor OK Humidity Temperature oC Temperature oF Temperature K Dew Point oC Dew Point Slow oC Retrieving information from sensor Read sensor Error Checksum error Humidity Temperature oC Temperature oF Temperature K Dew Point oC Dew Point Slow oC Code execution stalls when trying to initialize more than one DHT object dynamically stdvectorDHT am for uint t i i i am emplacebackSENSORS i DHTTYPE am i begin If the for loop is run just once the code runs as it should but on a second iteration the code stalls at the am emplaceback line The result is the same when using any other way to declare iterable objects for example DHT am am new DHT uint t i for i i i am i new DHTSENSORS i DHTTYPE am i begin in which case it stalls at am i new DHTSENSORS i DHTTYPE on the second iteration I kindly request to reopen the issue ESP and DHT NAN errors using libraries as I do not find it is resolved yet and I have a justified reason for it I am working on a Wemos D R boards interfacing with DHT sensor and as usual I have been getting the NaN errors using the given libraries I went through all the given solutions given for issue individually as well as combining but no solution is working out for me My Wemos D R board has nothing wrong as I have already accomplished a Data Acquisition with IoT project on it I am not kind of a person who asks random questions I try to solve the issue myself first If I really find myself stuck up I ask a question I am being advised in issue to go with other forums but actually I would like to inform that this issue is studied analyzed and approached the best way compared to other forums Github has taught me never to give up so I kindly request to reopen the issue as I am the one who is still to be answered Shaunak Agastya Vyas Hi I did some changes in order to avoid the blocking delay in the flow Basically I created a loop function that is called in the main loop It has an internal state machine for the operation Clearly the reading phase is done in a blocking way I tested it on my NodeMCU and WeMos board and it works fine I suggest to create a dedicated branch like I did Maybe in the future a common solution where the user can choise which method he prefers can be done in order to get an unique library Regards Salvo In the ESP Arduino library noInterrupts is a nop so interrupts still occur while receiving a value On my board there is at least one interrupt every time we try to read a value which messes up the reading Instead of counting cycles use micros to keep track of time This increases the success rate of receiving data to or so A better fix would be to implement noInterrupts for the ESP but that looks a lot harder The new code path is probably not suitable for slower micros but hopefully those use the AVR code path anyway Thank you for creating a pull request to contribute to Adafruits GitHub code Before you open the request please review the following guidelines and tips to help it be more easily integrated Im not sure this should be merged asis but I want it to be available to people who are running into the same problem