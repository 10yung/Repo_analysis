I am having an issue with what seems to be an inconsistent event feed when fetching using the organizationevents and userevents APIs Apparently some events are missing from the feed returned by the OctokitClientorganizationevents Heres a small snippet to demonstrate ruby require octokit client OctokitClientnewaccesstoken VALID TOKEN HERE clientautopaginate true userevents clientusereventsorocosmap tohash userevents clientorganizationeventsorocosmap tohash pullrequestevents usereventsselect e e type PullRequestEvent repoevents pullrequesteventsselect e e payload pullrequest base repo name orocoskinematicsdynamics bogusprevents repoeventsselect e e payload pullrequest number boguspreventseach do e puts e createdat e payload pullrequest base user login e payload pullrequest base repo name e payload pullrequest number branch e payload pullrequest base ref action e payload action end Running the snippet the output I get is console UTC orocosorocoskinematicsdynamics branch master action opened Uncommenting line and commenting out in the above snippet aka fetching events with userevents rather than organizationevents I get instead console UTC orocosorocoskinematicsdynamics branch master action closed UTC orocosorocoskinematicsdynamics branch master action opened Which is consistent with the state the PR currently is in closed Right now I am looking for any insightsreasonable explanations for this other than a bug in githubs event feed api Any comments are appreciated Part of Generalizes the openapigenerator to work with the projects and gists clients Realized some of the method names I accepted for the previous clients like issues arent specific enough and so there are some retroactive breaking changes although some are reverting to the original method names Heres the current breakdown projectsrb projects repositoryprojects createprojects createrepositoryprojects createproject createrepositoryproject columncards projectcards new methods for collaborators and helper methods projectcollaborators addprojectcollaborator removeprojectcollaborator userpermissionlevel openproject closeproject the same project projects updateproject deleteproject orgprojects but no alias for organizationprojects createorgprojects but no alias for createorganizationprojects projectcolumns createprojectcolumn projectcolumn updateprojectcolumn deleteprojectcolumn createprojectcard projectcard updateprojectcard moveprojectcard deleteprojectcard gistsrb publicgists gistpublic gists split into userpublicgists and gists no alias for listgists gist split into gist and gistrevision creategist has files as a specific parameter editgist updategist giststarred isstarred the same forkgist gistforks gistcommits gistcomment stargist unstargist starredgists deletegists creategistcomment updategistcomment deletegistcomment gistcomments retroactive changes releasebytag tagrelease createcomment createissuecomment updatecomment updateissuecomment deletecomment deleteissuecomment addassignee addissueassignee removeassignee removeissueassignee comment issuecomment comments issuecomments addlabels addissuelabels removelabel removeissuelabel removelabels removeissuelabels replacelabels replaceissuelabels label issuelabel createlabel createissuelabel updatelabel updateissuelabel deletelabel deleteissuelabel milestone issuemilestone createmilestone createissuemilestone updatemilestone updateissuemilestone deletemilestone deleteissuemilestone Also sorry for rerecording all of the cassettes and having files changed TODO x clean up methods in generator x fix preview header generation read in from previewsrb x add new project collaborator tests x double check the tests clean up after themselves double colon Github has announced some deprecations here But octokitrb seems to still be using the deprecated methods For example Should be replaced by POST applicationsclientidtoken refsrb already contains helper methods made specifically for updating and deleting branches This adds a helper method for creating a branch as well Opening this to track the progress of generating the client code from the OpenAPI spec in the shared routes directory eyes for proof of concept eyes for more context Currently the only options for pagination are manual and auto the latter of which will fetch and concatenate the results from every page into a single array up front This means that users may be fetching a lot more results than they need to much faster than they may need to and may hit their rate limit as a result Could Octokit offer an EnumerableLazy interface for pagination akin to Octokit RESTjss iterator support In GitHub API headers contain additional information about the error so they are needed for diagnostics See eg where the cause is unclear from just the error code Hi I am trying to assign labels onto cards in the same column for a project I have tried the this tool by querying from project to column to cards Unfortunately I couldnt continue anymore because The cards response from the tool doesnt return the contenturl Refering to github api Here is the result of my query using Octokit url idxx nodeidxx notenull archivedfalse creator loginxxx idxx nodeidxx avatarurl gravatarid url htmlurl followersurl followingurl gistsurl starredurl subscriptionsurl organizationsurl reposurl eventsurl receivedeventsurl typeUser siteadminfalse createdat UTC updatedat UTC The tool only supports assigning labels to issues but not pull request Is there any way to solve this thank you Hello Im wondering about a behaviour that seems a bit inconsistent If I pass a ref parameter with a refs prefix to Clientcreateref such as refsmyrefathing createref will use that exact ref in the post body a ref at refsmyrefathing As the ref method signatures are very similar Id expect the behaviours for other ref methods like updateref to be similar for operations to occur on or to the ref refsmyrefathing However if I call updateref with the same ref input it will add a prefix causing undesired behaviour as it tries to PATCH to refsrefsmyrefathing I think it would make sense for updateref to have similar behaviour to createref by conditionally including or not refs in the request url such that callers can treat the methods similarly Or it could make sense to have updaterefs parameter named differently from createref to differentiate it further