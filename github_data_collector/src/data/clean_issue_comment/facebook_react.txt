Not really a bug but something that botheredconcerned me when writing hooks Initially I thought the dispatcher functions for useState and useReducer retained the same reference but it wasnt until today when the dispatcher functions caused my useEffect hooks to rerun I was expecting this js const myState setState ReactuseStatemyInitialValue ReactuseEffect consolelogDispatcher changed setState ReactuseEffect Trigger an update on mount setStatenewValue Not to log Dispatcher changed I think these dispatcher functions should really retain its references across updates and rerenders since old dispatcher references can still update the state or is there any motivation as to why the reference isnt kept Please follow one of these issue templates Note to keep the backlog clean and actionable issues may be immediately closed if they do not follow one of the above issue templates Please follow one of these issue templates Note to keep the backlog clean and actionable issues may be immediately closed if they do not follow one of the above issue templates I am trying to create a React web app and Reactnative app with monorepo by using yarn workspaces So I created web and controllers and it works fine I was able to make graphql queries to my apolloexpress server But after adding reactnative application I see this enter image description here I am that I am not breaking any react hooks rules because before adding reactnative application it was work fine Is there any way how can I solve it Apollo controller import useQuery from apolloreacthooks import gql from graphqltag export const useHelloQuery useQuery gql hello React component function Test const data useHelloQuery return TextawesoeText before adding reactnative it was exactly same In order to make focusblur work for Fabric we need to make event targets be a component instance instead of a react tag That PR has landed behind a feature flag Before we can land this we need that to roll out completely and flip the feature flag on by default This PR then updates the Renderer integration with TextInputState to handle instances instead of reactTag In order to make that work we have to have an instance Which means that components with NativeMethodsMixin and ReactNativeNativeComponent will no longer be able to call focus or blur This is a breaking change but we are okay with that For Fabric components implemented with those arent supported anyways This changes the HostComponents making them pass themselves to TextInputState Also added tests For Facebook employees This PR will need to land and by synced in conjunction with D When owner and self are different for string refs we cant easily convert them to callback refs This PR adds a warning for string refs also behind the warnAboutStringRefs flag when owner and self are different to tell users to manually update these refs Thanks for submitting a pull request We appreciate you spending the time to work on these changes Please provide enough information so that others can review your pull request The three fields below are mandatory Before submitting a pull request please make sure the following is done Fork the repository and create your branch from master Run yarn in the repository root If youve fixed a bug or added code that should be tested add tests Ensure the test suite passes yarn test Tip yarn test watch TestName is helpful in development Run yarn testprod to test in the production environment It supports the same options as yarn test If you need a debugger run yarn debugtest watch TestName open chromeinspect and press Inspect Format your code with prettier yarn prettier Make sure your code lints yarn lint Tip yarn linc to only check changed files Run the Flow typechecks yarn flow If you havent already complete the CLA Learn more about contributing Summary Makes yarn audit happier Test Plan HTML coverage report still works In React Fiber implementation everywhere prop objects are checked using operator which in case of object doesn t verify using deep equality check and works like a reference equality See below for the code mentions React version ReactDom version Steps To Reproduce Write the following code to test it Check in the console js const logDifferences nameOfComponent oldProps newProps const serializedOldProps JSONstringifyoldProps const serializedNewProps JSONstringifynewProps consolewarn nameOfComponent Differences old props serializedOldProps new props serializedNewProps verdict serializedOldProps serializedNewProps class Child extends ReactComponent componentWillReceiveProps nextProps nextContext logDifferencesChildthisprops nextProps render return Child got rendered at new DatetoISOString class SweetChild extends ReactPureComponent componentWillReceiveProps nextProps nextContext logDifferencesSweetChildthisprops nextProps render return Sweet Child got rendered at new DatetoISOString class Parent extends ReactComponent state currentDate new Date componentDidMount setInterval thissetStatecurrentDate new Date render return div Parent state updated at thisstatecurrentDatetoISOString br Child a b br SweetChild a b div ReactDOMrenderParent documentbody Link to code example The current behavior For Component instances componentWillReceiveProps is called and component is re rendered For PureComponent instances componentWillReceiveProps is called but component is not re rendered when props are shallowEqual The expected behavior For both Component and PureComponent componentWillReceiveProps should not be called and not rerendered Possible reasons Temporary Solution Override shouldComponentUpdatenextProps nextState nextContext to stop extra rerendering Steps To Reproduce Hover a component in DevTools Keep hovering it for a second or so Quickly move the cursor out of the DevTools without hovering anything else Expected DOM highlighting goes away Actual DOM highlighting gets stuck This PR fixes Still inject Global Hook Code in textplain case It hasnt been ignored unintentionally in 