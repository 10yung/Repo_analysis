GitHub Pages is made in It would be nice to be able to open in browser easily In this PR pathtoswiftlint showdocs command will open in default browser New Issue Checklist x Updated SwiftLint to the latest version x I searched for existing GitHub issues Describe the bug When the indentationwidth is enabled it would give warning on a multiple cases in different lines for switchcase statement Sample swift switch enumValue case value value printwarning above case value printNo warning on this Complete output when running SwiftLint including the stack trace and command used bash swiftlint lint fileswift warning Indentation Width Violation Code should be indented with tabs or spaces but not both in the same line indentationwidth Environment SwiftLint version run swiftlint version to be sure Installation method used Homebrew CocoaPods building from source etc CocoaPods Paste your configuration file excluded paths to ignore during linting Takes precedence over included Carthage Pods optinrules anyobjectprotocol arrayinit attributes blockbasedkvo classdelegateprotocol closingbrace closurebodylength closureendindentation closureparameterposition closurespacing collectionalignment colon comma compilerprotocolinit conditionalreturnsonnewline containsoverfiltercount containsoverfilterisempty containsoverfirstnotnil containsoverrangenilcomparison controlstatement conveniencetype customrules cyclomaticcomplexity discardednotificationcenterobserver discourageddirectinit discouragedobjectliteral discouragedoptionalboolean discouragedoptionalcollection duplicateimports dynamicinline emptycollectionliteral emptycount emptyenumarguments emptyparameters emptyparentheseswithtrailingclosure emptystring emptyxctestmethod enumcaseassociatedvaluescount expiringtodo explicitacl explicitenumrawvalue explicitinit explicitself explicittoplevelacl explicittypeinterface extensionaccessmodifier fallthrough fatalerrormessage fileheader filelength filename filenamenospace filetypesorder firstwhere flatmapovermapreduce forwhere forcecast forcetry forceunwrapping functionbodylength functiondefaultparameteratend functionparametercount generictypename identicaloperands identifiername implicitgetter implicitreturn implicitlyunwrappedoptional indentationwidth inertdefer isdisjoint joineddefaultparameter largetuple lastwhere leadingwhitespace legacycggeometryfunctions legacyconstant legacyconstructor legacyhashing legacymultiple legacynsgeometryfunctions legacyrandom letvarwhitespace linelength literalexpressionendindentation loweraclthanparent mark missingdocs modifierorder multilinearguments multilineargumentsbrackets multilinefunctionchains multilineliteralbrackets multilineparameters multilineparametersbrackets multipleclosureswithtrailingclosure nesting nimbleoperator noextensionaccessmodifier nofallthroughonly nogroupingextension notificationcenterdetachment numberseparator nslocalizedstringkey objectliteral openingbrace operatorusagewhitespace operatorwhitespace optionalenumcasematching overriddensupercall overrideinextension patternmatchingkeywords preferselftypeovertypeofself prefixedtoplevelconstant privateaction privateoutlet privateoverfileprivate privateunittest prohibitedinterfacebuilder prohibitedsupercall protocolpropertyaccessorsorder quickdiscouragedcall quickdiscouragedfocusedtest quickdiscouragedpendingtest rawvalueforcamelcasedcodableenum reduceboolean reduceinto redundantdiscardablelet redundantnilcoalescing redundantobjcattribute redundantoptionalinitialization redundantsetaccesscontrol redundantstringenumvalue redundanttypeannotation redundantvoidreturn requireddeinit requiredenumcase returnarrowwhitespace shorthandoperator singletestclass sortedfirstlast sortedimports statementposition staticoperator strictfileprivate strongiboutlet superfluousdisablecommand switchcasealignment switchcaseonnewline syntacticsugar todo togglebool trailingclosure trailingcomma trailingnewline trailingsemicolon trailingwhitespace typebodylength typecontentsorder typename unavailablefunction unneededbreakinswitch unneededparenthesesinclosureargument unownedvariablecapture untypederrorincatch unusedcapturelist unusedclosureparameter unusedcontrolflowlabel unuseddeclaration unusedenumerated unusedimport unusedoptionalbinding unusedsettervalue validibinspectable verticalparameteralignment verticalparameteralignmentoncall verticalwhitespace verticalwhitespacebetweencases verticalwhitespaceclosingbraces verticalwhitespaceopeningbraces voidreturn weakdelegate xctfailmessage xctspecificmatcher yodacondition rule parameters indentation conditionalreturnsonnewline ifonly true filelength warning error ignorecommentonlylines true cyclomaticcomplexity ignorescasestatements true warning error nesting typelevel warning statementlevel warning functionbodylength warning error linelength typebodylength warning error largetuple warning error identifiername excluded to id by of at str on x y L mr ms dr privateoutlet allowprivateset true allowspublicgetter true indentation tabs multilinearguments onlyenforceafterfirstclosureonfirstline true yml insert yaml contents here Are you using nested configurations If so paste their relative paths and respective contents No Which Xcode version are you using check xcodebuild version Xcode Do you have a sample that shows the issue Run echo string here swiftlint lint nocache usestdin enableallrules to quickly test if your example is really demonstrating the issue If your example is more complex you can use swiftlint lint path file here nocache enableallrules swift switch enumValue case value value This triggers a violation printwarning above case value printNo warning on this Is it still possible to write compiling Swift code that overrides in an extension I tried this code sample and Xcode generates an error Swift import Foundation objc class Class NSObject objc func str String return Hello playground class Subclass Class extension Subclass override func str String return Hi Error Cannot override a nondynamic class declaration from an extension New Issue Checklist x Updated SwiftLint to the latest version x I searched for existing GitHub issues Describe the bug The optionalenumcasematching rule is triggered when switching over an optional struct with cases that are static members of the struct In these instances removing the on the case results in code that doesnt compile Xcode Complete output when running SwiftLint including the stack trace and command used bash swiftlint lint usestdin enableallrules Test struct public struct Foo Equatable public static let bar Foo initfoo bar public let foo String Test variable public var something Foo switch something case bar printbar default printdefault nopath warning Optional Enum Case Match Violation Matching an enum case against an optional enum without is supported on Swift and above optionalenumcasematching Done linting Found violation serious in file Environment SwiftLint version run swiftlint version to be sure Installation method used Homebrew CocoaPods building from source etc CocoaPods Paste your configuration file na Are you using nested configurations If so paste their relative paths and respective contents na Which Xcode version are you using check xcodebuild version Xcode Build version A Do you have a sample that shows the issue Run echo string here swiftlint lint nocache usestdin enableallrules to quickly test if your example is really demonstrating the issue If your example is more complex you can use swiftlint lint path file here nocache enableallrules see above New Issue Checklist x Updated SwiftLint to the latest version x I searched for existing GitHub issues New rule request Currently the openingbrace rule works for methods to enforce the following condition func foo some code But in the case where the method name andor parameters exceeds you column limit some folks will have this automaticallymanually wrap to the next line This is quite common when using Cocoa types as they have very descriptive and long names eg NSAccessibilityParameterizedAttributelayoutPointForScreenPoint func aReallyLongMethodnamed String with Int many String vars ACrazyLongLongReallyLongProtocolNameDelegate some code In the above instance I find to improve local reasoning that having the curly brace on the next line makes it much easier to read func aReallyLongMethodnamed String with Int many String vars ACrazyLongLongReallyLongProtocolNameDelegate some code Granted I could just disable this rule for this instance But I have to add the following comments swiftlintdisable openingbrace func aReallyLongMethodnamed String with Int many String vars ACrazyLongLongReallyLongProtocolNameDelegate swiftlintenable openingbrace some code Obviously I could clean that up but it just eats up vertical space and makes it even harder to read I have no clue how to write this custom rule but it would be great to have this as a parameter in the openingbrace rule that the user can enable I imagine this would be an optin parameter Im open to thoughts and discussion about this proposal and Im happy to put the work in on the programming side to help make it happen Thanks GW Hi What do you think about this configuration option Im open to rename the options top and bottom to first and last Fixes x Make it work x Finish adding Example literal init to all strings and remove ExpressibleByStringLiteral conformance from Example type x Find out whether we can remove trailing n from the many test cases that have them x Remove trailing newlines from all examples where possible rolled back because it was too invasive x Resolve file and line length warnings x fix broken tests merge jpsim heres a start I took a pretty lazy approach to converting files over to the new format opting for an ExpressibleByStringLiteral bandaid that doesnt even partially work just so I can get it up and running Before merging well need to go through and add an explicit Example initializer to literally every example Ive also been pretty liberal with smashing things in order to get it all compiling so Im very open to ideas if you have suggestions for how to make the PR more conservative I have two open questions that Id love some feedback on A ton of examples have a trailing n but not all of them do Do you know why its there Can I delete those newlines Heres an example public func a n Some of the file and line length warnings dont seem that useful on a project like this where file length isnt a good indicator of code complexity its just a bunch of datalike string literals and sometimes the file gets longer just because we wrap lines to make them clearer However Im not the project owner so Id appreciate any guidance you have on how to get around those warnings New Issue Checklist x Updated SwiftLint to the latest version x I searched for existing GitHub issues Describe the bug At Codacy we are using SwiftLint to analyse Swift code We are trying to use a custom configuration file by passing it to config param If the source code directory contains a swiftlintyml file and we run SwiftLint with a custom configuration on or more specific files by passing them as param to the command it ignores the custom the configuration and uses swiftlintyml file present inside the source code directory If I run the same command but specifying only file or a directory with multiple files inside it uses the custom configuration file we are providing Example As an example we have a src folder with the following files dynamicinlineswift with dynamicinline violation swift class C inlinealways dynamic func f class C inlinealways public dynamic func f class C inlinealways dynamic internal func f class C inlinealways dynamic func f class C inlinealways dynamic func f closingbraceswift with closingbrace violation swift map map testyml file whitelistrules dynamicinline swiftlintyml file whitelistrules closingbrace With this source folder we are making these tests Custom configuration file testyml and analysing file returns the expected result bash swiftlint lint config srctestyml srcdynamicinlineswift Loading configuration from srctestyml Linting Swift files at paths srcdynamicinlineswift Linting dynamicinlineswift srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline Done linting Found violations serious in file Custom configuration file testyml and analysing entire src folder returns the expected result bash swiftlint lint config srctestyml src Loading configuration from srctestyml Linting Swift files at paths srcdynamicinlineswift Linting dynamicinlineswift srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline srcdynamicinlineswift error Dynamic Inline Violation Avoid using dynamic and inlinealways together dynamicinline Done linting Found violations serious in file Custom configuration file testyml and analysing or more files returns result different from the expected bash swiftlint lint config srctestyml srcdynamicinlineswift srcclosingbraceswift Loading configuration from srctestyml Linting Swift files at paths srcdynamicinlineswift srcclosingbraceswift Linting closingbraceswift Linting dynamicinlineswift srcclosingbraceswift warning Closing Brace Spacing Violation Closing brace with closing parenthesis should not have any whitespaces in the middle closingbrace srcclosingbraceswift warning Closing Brace Spacing Violation Closing brace with closing parenthesis should not have any whitespaces in the middle closingbrace Done linting Found violations serious in files Environment SwiftLint version New Issue Checklist Updated SwiftLint to the latest version I searched for existing GitHub issues Describe the bug hello swift is not excluded when execute swiftlint in tmp dir bash tree tmpswiftlintexcludedissue tmpswiftlintexcludedissue swift swift configyaml hello swift directories files cd tmp swiftlint path tmpswiftlintexcludedissue config tmpswiftlintexcludedissueconfigyaml Loading configuration from tmpswiftlintexcludedissueconfigyaml Linting Swift files at paths tmpswiftlintexcludedissue Linting swift Linting hello swift Done linting Found violations serious in files cd tmpswiftlintexcludedissue swiftlint path tmpswiftlintexcludedissue config tmpswiftlintexcludedissueconfigyaml Loading configuration from tmpswiftlintexcludedissueconfigyaml Linting Swift files at paths tmpswiftlintexcludedissue Linting swift Done linting Found violations serious in file Environment SwiftLint version Installation method used Homebrew Paste your configuration file yml excluded swift helloswift New Issue Checklist x Updated SwiftLint to the latest version x I searched for existing GitHub issues Describe the bug When developing rules and fixing bugs trying to correlate the test output with the code can be difficult It would be nicer if incorrectly triggered or ignored examples were highlighted in Xcode like other test failures This would be possible with the technique I describe in this blog post XCTest Line by Line As a quick sketch it would transform the test case declarations from this swift public static let description RuleDescription identifier foo name Foo description some description kind idiomatic minSwiftVersion fourDotOne nonTriggeringExamples enum SomeExample etc to something more like this swift public static let description RuleDescription identifier foo name Foo description some description kind idiomatic minSwiftVersion fourDotOne nonTriggeringExamples Example enum SomeExample etc etc The addition of the Example wrapper struct would capture the file and line number which would be passed to the XCTest methods ensuring that failures are reflected on the correct line The initializer of the Example struct would have to look like this swift example parameter could also be a StaticString if you want to encourage passing string literals to aid in debugging init example String file StaticString file line Uint line Id be interested in contributing a PR to address this