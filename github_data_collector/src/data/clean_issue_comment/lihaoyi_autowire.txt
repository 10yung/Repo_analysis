 This builds autowire for scala using mill Ive moved the directory structure to be mill like and less verbose Some version combinations wont build due to missing upickle versions or a mill problem with scalajs mill includes scalajstools for M which no longer exists Ive removed the sbt build as it wont work under the new directory structure and various parts of it are too old to work Hope thats ok package abcdefshared trait Api def storedata Seq Todo Unit def load Seq Todo val routes Route pathPrefixapi pathSegments segments postAutowireServerdispatchsegments This results in calls such as apiabcdefsharedApistore which is a bit weird Id love it if it would be possible to leave out the namespacing and leave only apistore or some customizable prefix using a class attribute perhaps preCallOp param allows set contexts in the worker thread For example we may set some authorizationauthentication info without change the trait for client side Example scala trait SomeEntityApi def retrievelimit Option Int skip Int Future Seq Entity works while scala trait SomeEntityApi def retrievelimit Option Int None skip Int Future Seq Entity fails with warn an unexpected type representation reached the compiler backend while compiling Applicationscala error If possible please file a bug on error Error while emitting Applicationscala error error of class scalareflectinternalTypesErrorType error Error while emitting Applicationscala error assertion failed ClassBTypeinfo not yet assigned LcontrollersApplicationanonfun warn one warning found error two errors found error Compile compileIncremental Compilation failed Note What actually fails is the compilation of Routerroute EventApi new EventService present in Applicationscala in this case Note Worked with Scala Thank you Hi Love autowire using it extensively My stack is mostly catsIO based doobie http s and so on and autowire would fit in more naturally ie no unsafeToFuture calls or having to choose to return Int or Future Int if I could make the server side generated code have a different effect type ie the usual F which for me would be catseffectIO I understand this may not be something you would want to spend any time on but perhaps youanyone could give your thoughts on the amount of surgery needed Id like to try it Note PR adds support for IO but by calling unsafeToFuture I would like to avoid the Futures altogether Thank you Hi my AjaxClient has some dependencies so Ive made it a class and create it on demand with this method def withFileMap Trait files Map String File onProgress Option Double Callback Callbackempty progressNotComputable Boolean Callback Callbackempty ClientProxy Trait Json Decoder Encoder new AjaxClientfiles onProgress progressNotComputable Trait From time to time I get the following macro error Cannot find proxy for Funny thing is that I can fix it by not using lambdas withSimpleOptionalFileList WiredApi banner stateselectedImageFile onProgress e modState Macro error def updateProgressd Option Double modStatecopyprogress d withSimpleOptionalFileList WiredApi banner stateselectedImageFile onProgress updateProgress no Macro error Type parameters for client here worked scala case class objParamurlString def getAtw t ClientProxy t ByteBuffer DefaultPickler DefaultPickler ok val aautowireJs aatwParamsobjParamsharedOlogxrpcAuthedologxpath a t object autowireJs extends autowireClient ByteBuffer Pickler Pickler override def doCallreq Request Future ByteBuffer domextAjax post url sharedOlogxrpcAuthedologxpath reqpathmkString data PickleintoBytesreqargs responseType arraybuffer headers MapContentType applicationoctetstream mapr TypedArrayBufferwraprresponseasInstanceOf ArrayBuffer but the server side do not workit compilesbut get runtime error when client tries to do rpc call scala object autowireServer extends autowireServer ByteBuffer Pickler Pickler override def read R Pickler p ByteBuffer Unpickle R fromBytesp override def write R Pickler r R PickleintoBytesr inline final def run t apiImpl t damn this can not be made generic reqPathList List String reqBodyBytes ByteString Future ByteBuffer lgatw reqPathListreqPathList thisroute t apiImpl the problem is route t autowireCoreRequest reqPathList read Map String ByteBuffer reqBodyBytesasByteBuffer even if i inline it the error is scalaMatchError RequestListrpcAuthedOlogx tstMap of class autowireCoreRequest at scalaPartialFunctionanon applyPartialFunctionscala at scalaPartialFunctionanon applyPartialFunctionscala at jvmUtilsakkaHttpUtilrpcserverautowireServerClsanonfunrun applyOrElsejvmUtilsscala Currently implicit arguments in method seems not workingfor example scala def implsStringimplicit isStringUnit Is that feature supported