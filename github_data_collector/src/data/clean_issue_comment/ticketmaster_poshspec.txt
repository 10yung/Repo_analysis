When testing for PowerShell auditing settings I am unable to test for the following value as it contains a The code below is what Im currently using which doesnt work I have tried escaping the by but that doesnt work Registry HKLM Software Policies Microsoft Windows PowerShell ModuleLogging ModuleNames Should Be The problem code is the expandproperty as shown below GetItemProperty HKLM Software Policies Microsoft Windows PowerShell ModuleLogging ModuleNames SelectObject ExpandProperty Here is the Full Context that Im using for the PowerShell Audit Settings Context Name Powershell Auditing Fixture Turn on Module Logging Enabled Registry HKLM Software Policies Microsoft Windows PowerShell ModuleLogging EnableModuleLogging Should BeExactly Module Names Registry HKLM Software Policies Microsoft Windows PowerShell ModuleLogging ModuleNames Should Be Turn on Powershell Script Block Logging Enabled Registry HKLM Software Policies Microsoft Windows PowerShell ScriptBlockLogging EnableScriptBlockLogging Should Be Log script block invocation start stop events Disabled IF TestPath HKLM Software Policies Microsoft Windows PowerShell ScriptBlockLogging EnableScriptBlockInvocationLogging If Value doesnt exist it defaults to Registry HKLM Software Policies Microsoft Windows PowerShell ScriptBlockLogging EnableScriptBlockInvocationLogging Should BeLessOrEqual Ive added some new functions over the last months Added a Ping function based off the TcpPort function This projects documentation is somewhat limited I suggest migrating towards a documentation solution using either MkDocs or GitBook Expected Behavior Users should be able to access a documentation site for the project which includes tutorials design explanationsconcept guides and reference materials Preferably this documentation should be versioned available as a downloadable artifact source controlled and built automatically via CI Current Behavior Documentation exists in limited form as wiki articles in the project though these are not always up to date Possible Solution We could use either MkDocs or GitBook to create the documentation site GitBook can also be used to export to PDFepubmobi format for artifact download I suggest breaking documentation into three broad parts Tutorials This section includes more bloglike documentation conversationally walking prospective usersdevelopers through using and interacting with the project This is a perfect place to give an example of how to create a plugin or how to set permissions for a role Guides This section is more like an informal set of white papers or design documents explaining design decisions security concerns and other topics not best suited to a blog format but which still need to be covered Reference This section is where all of the actual reference documentation exported comment based help class references etc belong Context I have found that this type of documentation makes using a project much easier from both a normal user standpoint as well as from a contributing developer standpoint It doesnt have to be written all at once but providing a base level of useful documentation and then iterating on it can help to drive adoption and help answer questions about the project more easily Simple SQL connectivity check I am using Package resource for my infrastructure validation As my environment has only powershell v Getpackage function was not there I have written a module named Poshspechelper in my machine and written a custom function GetInstalledPackage The function is given below function GetInstalledPackage CmdletBinding paramappName appVersion if GetWmiObject win operatingsystemOSArchitecture notmatch keys GetItemProperty HKLM SOFTWARE Microsoft Windows CurrentVersion Uninstall possiblepath HKCU Software Microsoft Windows CurrentVersion Uninstall if TestPath possiblepath keys GetItemProperty possiblepath else keys GetItemProperty HKLM SOFTWARE Microsoft Windows CurrentVersion Uninstall HKLM SOFTWARE Wow Node Microsoft Windows CurrentVersion Uninstall possiblepath HKCU Software Microsoft Windows CurrentVersion Uninstall if TestPath possiblepath keys GetItemProperty possiblepath possiblepath HKCU Software Wow Node Microsoft Windows CurrentVersion Uninstall if TestPath possiblepath keys GetItemProperty possiblepath if appVersion eq null keys WhereObject DisplayName like appName or PSChildName like appNameLength gt else IsAppInstalled keys WhereObject DisplayName like appName or PSChildName like appNameLength gt VersionAvailable keys WhereObject DisplayName like appName or PSChildName like appName WhereObject DisplayVersion eq appVersion Length gt if VersionAvailable Version appVersion object Pscustomobject IsInstalled IsAppInstalled Version Version WriteOutput object When i run this with pester like below it worked as expected Importmodule pester ImportModule PoshspecHelper Describe Orca msi validation It Package validation GetInstalledPackage appName Orca appVersion ErrorAction SilentlyContinue SelectObject ExpandProperty version should be But when i call this in packageps file instead of Getpackage like given below i am getting error given below the code expression GetPackage Name Target ErrorAction SilentlyContinue expression GetInstalledPackage appName Target appVersion Property ErrorAction SilentlyContinue Package property version for Orca should be s Expected But was GetInstalledPackage appName Orca appVersion version ErrorAction SilentlyContinue SelectObject ExpandProperty versio n should be at ScriptBlock No file line at ScriptBlock C Program Files WindowsPowerShell Modules Poshspec Private InvokePoshspecExpressionps line Please check and let me know what went wrong when i debugged it it always failed in the below line at InvokePoshspecExpressionps file InvokeExpression InputObjectExpression Since the Assertion in the PoshSpec is placed inside a scriptblock how does one reference variables in it eg below works fine when the assertion is hardcoded Describe test Service Bits Status Should be Running But when a variable is placed in the assertion it cant see them eg Describe test DesiredStatus Running Service Bits Status Should be DesiredStatus Above gives me the error Describing test Service property Status for Bits Should be DesiredStatus ms Expected But was Running GetService Name Bits SelectObject ExpandProperty Status Should be Desir edStatus at ScriptBlock No file line at ScriptBlock C Users DeepakDhami Documents GitHub poshspec Private InvokePoshsp ecExpressionps line The idea is to use a CSV file as a template for all the service and their compliant status How do I do something like this with PoshSpec Describe IT Compliance for Services ObjectFromCSV PSCustomObject NameBits StatusStopped ObjectFromCSVForeach Service PSItemName Status Should be PSItemStatus Does the above make sense to be added to the DnsHost implementation I am working on project where we have multiple DNS servers set on the client nodes and want to validate that the name resolution works using each of the DNS server also at the same time be able to make different type of DNS queries to the DNS server Current implementation of the DnsHost does not let you specify a DNS server or the type of DNS query to for a validation test For Example a machine can have multiple DNS servers so this test should allow specifying a specific DNS server for the name resolution along with the type of DNS query to run for the test eg MX or an A record query etc PowerShell Describe multiple DNS servers Context Test for the DNS server DnsHost cloudlocal Should Not BeNullOrEmpty query the domain FQDN DnsHost mailcloudlocal Type MX Should Not BeNullOrEmpty test the MX record Context Test for the DNS server DnsHost cloudlocal Should Not BeNullOrEmpty DnsHost mailcloudlocal Type MX Should Not BeNullOrEmpty Check active directory settings for existence of users OUs OU paths systems Add tests for things such as email accounts deleted check licenses etc 