Elaborated on here The short version Windows designates as a nonroutable metaaddress used to designate an invalid unknown or nonapplicable target It is not subject to timeout resolution and does not interfere with local web servers Profiles essentially host file fragments would allow entire blocks of IP addresses to be saved and appliedremoved from the system hosts file Primary use case are swapping entire sets of domains between different environments or to bypass a load balancer or simply shipping a set of dev host entries along with an application Initial thoughts on Cmdlets ExportHostsProfile Hosts hosta hostb Profile SomeProfile RemoveHostsProfile Profile SomeProfile Essentially just RemoveItem on the file PublishHostsProfile Profile SomeProfile Merges a hosts profile into the hosts file basically calling SetHostEntry Force for each of them UnpublishHostsProfile Profile SomeProfile Removes all host entries specified by a profile no attempt to restore previous values Profile is either a path to a file or potentially just be a name in which case it will be stored in Documents PsHosts Profiles Its probably unnecessary for any of these cmdlets to be C since they are all wrapping basic functionality around the core hosts cmdlets Because writes to the hosts file arent committed until EndProcessing piping together write operations fail For example the following test fails Set rereads the hosts file and doesnt find the added entry because it hasnt been saved yet It would also cause undefined side effects as both cmdlets would attempt to save their copy of the hosts file Im not sure the best way to resolve this problem particularly since its quite unlikely that someone would pipe the write operations together but I thought it was worth documenting PowerShell Describe AddHostEntry Context Piping into Set BeforeEach AddTestHostEntry Name hostname Loopback HostsPath hostsFile SetTestHostEntry Address HostsPath hostsFile It Should update new entry results GetTestHostEntry hostname HostsPath hostsFile resultsLength Should be Can we add a Backup flag or maybe it takes a path eg hostsbak is created before write operations This would act as a nice failsafe when anything goes wrong The hosts format actually uses hostlocal alias hostlocal alias hostlocal Add an Aliases property to HostEntry Add a third parameter Aliases to AddHostEntry that can either be a string or an array Have GetHostEntry match against aliases Have RemoveHostEntry remove an alias when not matched against the primary TODO Should the entire entry still be removed when the primary host is removed even though there are aliases remaining Im thinking yes