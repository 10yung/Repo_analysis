Is this project is in active state or it is completely dead coffeescript paint containerhidefadeIn instead of coffeescript paint done containerhidefadeIn done Also coffeescript fetch ajax posts instead of coffeescript fetch ajax posts success data data data It can simply work with standard then approach All custom code can be attached with q library or something like this Resource introspection can be useful in some cases For instance its desirable to retrieve entity name when translating and to get an attribute list when building a form or table helper I think that at least following resource attributes which are already available but private should be accessible ModelentityName currently available is private entityName ModelprimaryKey currently available is private entityName ModelattributeList can be easily built by attrAccessor RESTCollectionresource currently available is private resource I guess something wrong with ResourcesRESTcollectionPath First of all Stringunderscore is sugarjs method I heard joosy is not depend on it now Anyway if i include sugarjs in my app ill get TypeError Object object global has no method replace Second IMO Joosynamespace should not affect to result url It need only for avoid name collisions right It would be better if namespace for url if it surely need can be specified evidently in Resource class Make it possible to address particular route or set of routes to a widget instead of global application container With this we can expose the state of nested widgets to global URL this is quite old We have to make a new one featuring branch This time we should use I was meditating about all this History API and serverside rendering stuff and I have derived following thoughts about current lie of the land Hashbang Its current problem is overhead I like a joke that the whole webdevelopment is a science about concatenating strings And hashbang makes lots of useless jobs rendering DOM setting events and much more But all we need on the server side is just rendering an html page as a string Main idea is show client some content and if he can he will also execute Joosy some kind of progressive enhancement So I was thinking about two approaches for this problem Templates sharing The main idea of this approach is mapping all indexable Joosy routes to server And that does not mean only Mustache or Handlebars though I changed my mind about Handlebars in last two months its really not so bad as you think Even Hamlcoffee can be evaluated with therubyracer in Rails environment Pros It is fast You have no additional layers just render shared template for html and jbuilder for json You can control indexed routes for example unionize History API with hash and get something like posts edit posts can be processed both on server and with Joosy with History API edit action is only accessible by humans browser You can avoid initial ajaxrequest on Joosy initialization by including inline json data in rendered page Cons You are supposed to choose one of two evils You are designing apps architecture with big restrictions not more than one ajax request per page to map it to controller for example or duplicate all code that does not suite this restrictions You can highly minimize code duplication but some things like template helpers still will be duplicated Serverside version of Joosy Main idea is to replace headless webkits with just the Nodejs In most cases you can avoid any DOM manipulations to initially render a data with templates on Joosy page But this can be achived with only one way you should have a reduced modified version of Joosy runtime on server with all DOM stuff just nooped for example Pros It will be much faster than Hashbang It can be really used for human requests not only escapedfragment But still not as fast as shared templates No code duplication at all You run your client Joosy app as with Hashbang And wildcard route sends all html requests to the Node Cons We will have to support two versions of Joosy Possible sideeffects of Joosys modified version You will have to follow some restrictions in your frontend app design otherwise it can turn up messy or even broken We will have to deal somehow with initial ajaxrequests from Node to Rails This approach will hardly support things like Russian Doll caching Guys I want to hear your opinion about these approaches because I want to make some experimental support of it for Joosy 