Here you dont count vertices with negative modularities Why so Its strange because it leads to different modularities for same compressed and not compressed graph IfI am right modularities for such graphs must be equal Or not Has anyone been successful in getting this to work on an EMR cluster which is managed by YARN Everything is running fine locally but I have not been able to get this to work with the cluster mode Command gradle clean dist Pcdhversioncdh Error Task dgagiraphcompileJava FAILED homehduserdistributedgraphanalyticsdgagiraphsrcmainjavacomsoteradefensedgaDGAYarnRunnerjava error package orgapachehadoopyarnconf does not exist import orgapachehadoopyarnconfYarnConfiguration homehduserdistributedgraphanalyticsdgagiraphsrcmainjavacomsoteradefensedgaDGAYarnRunnerjava error cannot find symbol UserGroupInformationcreateRemoteUserYarnConfigurationDEFAULTNMNONSECUREMODELOCALUSERdoAsnew PrivilegedActionVoid symbol variable YarnConfiguration location class DGAYarnRunner Note homehduserdistributedgraphanalyticsdgagiraphsrcmainjavacomsoteradefensedgaioformatsDGAVertexOutputFormatjava uses unchecked or unsafe operations Note Recompile with Xlintunchecked for details errors FAILURE Build failed with an exception What went wrong Execution failed for task dgagiraphcompileJava Please help in line of LouvainCorescala deltaQ kiin ki sigmatot M M is the total weight of the graph My understanding is that M m m number of edges so deltaQ may should be calculated as kiin ki sigmatot M instead erickimbrel hi i am trying to run your code in an ubuntu machine after compiling and packaging i tried the command louvian but i always get this error Error Could not find or load main class comsoteradefensedgagraphxlouvainMain what probably could be the cause and how can i fix it Regards aljawarneh After a couple of iterations the final graph to be saved is a compressed version of the original one How can I assign communities to all the original nodes in my graph given some level Updated for Spark as bundled with Cloudera and fixed issue with saveAsTextFile failing to overwrite qvalues now saving each levels qvalues separately Also changed to allow parsing input with the third column being nonnumeric ignores Added option to specify serialization In line of This file when calculating kiinL the variable internalWeight is added if the community that the node is in and the community the node is testing is the same community If I understand it correctly variable internalWeight is the selfloop edge If that is the case the weight of self loop should not be included in kiin because both ends of this edge are the same node and therefore are always in the same community erickimbrel 