Hello Im using createAsyncAction to create my async actions Then I create another function using reduxthunk to actually perform those actions alltogether This leaves me with a confusing export list in my actionsts for example file For example autocomplete suggests me both the action generator and the action executor functions when trying to use it in my container components I cant seem to find a way to tie everything together without exporting all functions everywhere For example typescript export const fetchTeamsAsync createAsyncAction teamsFETCHTEAMSREQUEST teamsFETCHTEAMSSUCCESS teamsFETCHTEAMSFAILURE teamsFETCHTEAMSCANCELLED undefined CancellableStartMeta NormalizedSchemaany string CancellableEndMeta Error CancellableEndMeta undefined CancellableEndMeta export const execFetchTeamsAsync async dispatch Dispatch getState TypesRootState Promisevoid fetch data dispatch request success failure etc In my reducer I use the createReducer and handleAction functions which need the exported fetchTeamsAsync variable typescript createReducerinitialStatecurrentItemshandleActionfetchTeamsAsyncsuccess state action state So essentially I was wondering if there is a way of only exporting the executing function since this is the only one that needs to be exposed to my container components Any help would be appreciated Hi piotrwitek Regarding the section Typing connected component with reduxthunk integration I use the guide mentioned in the Warning of the docs and this works very well in my case However I was wondering if this was a temporary measure or is this something futureproof and still valid when updating reduxthunk ts version etc Description Hi there I wrote a Chinese Version of the readme to let more people saw your great work by add a READMESOURCEzhmd But Im not sure the doctoc so other files are untouched Is there any chance for us to finish the process and merge it If okay I would find some language reviewers Changed x words description translated line by line code block untouched maybe working on comments later x toc untouched but auto generated contributors section untouched x back to top and some other inplace anchors translated x some docs links translated to zh version tslangcn zhhansreactjsorg Checklist x I have read CONTRIBUTINGmd I have edited READMESOURCEmd NOT READMEmd I have run CI script locally npm run cicheck to generate an updated READMEmd I have linked all related issues above I have rebased my branch Redux and ReactRouter have introduced new hooks that drastically change the standard patterns Some of these benefit from extra typescript typings that this guide could help with such as useDispatch requiring you to pass the type of the dispatch for action type safety or useSelector benefiting from a type override so you dont have to type the state parameter each call Hi Firstly I have found the patterns in the guide very helpful for configuring actions epics reducers etc However I do not understand how to dispatch a fetch API request action and subsequently bind to a fetch successful action I have managed to create an epic for a fetch API request that then triggers a success or error action depending upon the successfailure of the API request I do not understand how to hook this up to a functional component as highlighted in the comments of the CourseList functional component code listing below CourseList Functional Component typescript import React useEffect from react import Grid from materialuicoreGrid import GridSpacing from materialuicoreGrid import Course from componentsCourseCourse import Course as CourseModel from reduxfeaturescoursemodel type Props courses CourseModel onFetchCourseRequest I want to bind this to the fetch courses action but do not understand how what type should this be export const CourseList ReactFCProps props const courses onFetchCourseRequest props functional equivalent of componentDidMount this only gets triggered once since dependency list is empty I want this to to trigger the dispatch of a FETCHCOURSELIST action and bind to resulting FETCHCOURSELIST I do not understand how to do this from examples useEffect onFetchCourseRequest return div style marginTop padding Grid container spacing as GridSpacing justifycenter coursesmapelement Grid item keyelementcourseID Course courseelement Grid Grid div CourseListConnected typescript import RootState from ReduxTypes import connect from reactredux import CourseList from CourseList import courseActions courseSelectors from reduxfeaturescourse const mapDispatchToProps onFetchCoursesRequest courseActionsfetchCoursesRequest const mapStateToProps state RootState courses courseSelectorsgetReduxCoursesstatecoursesfetchCoursesSuccess const CourseListConnected connect mapStateToProps mapDispatchToProps CourseList export default CourseListConnected Epic for Fetching a Course from API typescript import RootAction RootState Services from ReduxTypes import Epic from reduxobservable import isOfType from typesafeactions import of from rxjs import catchError filter ignoreElements map switchMap from rxjsoperators import fetchCoursesFail fetchCoursesSuccess from actions import constants from constants export const fetchCoursesRequestAction Epic RootAction RootAction RootState Services action state courseServices actionpipe filterisOfTypeconstantsFETCHCOURSESREQUEST switchMapaction courseServicesdefaultgetCoursespipe mapcourses fetchCoursesSuccesscourses catchErrorerror offetchCoursesFailerror ignoreElements ignore everything except complete and error template does this First of all thanks for all the hard work youve put into this fantastic guide if I had tried to migrate my teams codebase to typescript without typsafeactions it would have turned into a total dumpster fire Having endtoend type data for the redux store makes the entire application such a breeze to work on All that being said I do have some gripes about the guide It seems really odd that theres such a heavy emphasis on reduxobservable Its great that there is some guidance for people that are using it but in my experience its a pretty uncommon middleware It would be much less frustrating for typescript novices if the documentation was limited to reduxthunk as thats pretty much the bare bones vanilla redux stack Ive been following the guide and Im stuck on trying to create the store with the dispatch function constrained to the RootAction type and my web searches have only turned up a bunch of outdated garbage blog posts The lack of typescript examples is of course a huge flaw in the official redux documentation but since this repository is the de facto guide to typesafe react it would be much easier to follow if the examples used a very basic store configuration It would be great to include examples with redux saga and redux observable in the recipes but it clutters up the basic examples which should ideally be something that anyone can copy and paste to get a store set up quickly This applies to the playground as well As it stands ts import RootAction RootState Services from MyTypes What is MyTypes and Services I havent seen this mentioned anywhere else in the guide up to this point import createStore applyMiddleware from redux import createEpicMiddleware from reduxobservable Ive never used reduxobservable before what does this do import createBrowserHistory from history import routerMiddleware as createRouterMiddleware from connectedreactrouter Okay but I dont need a router to create a basic redux template and theres nothing here that couldnt be copy pasted from the reduxrouter documentation import composeEnhancers from utils What is utils It isnt mentioned anywhere else in the guide I know its in the playground source but its confusing if you dont already know where to look import rootReducer from rootreducer import rootEpic from rootepic import services from services browser history export const history createBrowserHistory export const epicMiddleware createEpicMiddleware RootAction RootAction RootState Services dependencies services const routerMiddleware createRouterMiddlewarehistory configure middlewares const middlewares epicMiddleware routerMiddleware compose enhancers const enhancer composeEnhancersapplyMiddlewaremiddlewares rehydrate state on app start const initialState create store const store createStorerootReducerhistory initialState enhancer epicMiddlewarerunrootEpic export store singleton instance export default store I think it would be better to limit this to what weve already seen in the guide ts import RootAction RootState from types How do I supply this to redux import createStore applyMiddleware from redux import thunk from reduxthunk import createRootReducer from rootreducer rehydrate state on app start const initialState create store const store createStorecreateRootReducer initialState applyMiddlewarethunk export store singleton instance export default store Now theres nothing in there to distract from the purpose of the guide which is learning how to use redux without losing type information Unfortunately when setting up the store this way it has an AnyAction constraint on dispatch StoreRootState AnyAction I cant figure out how to get a store instance with dispatch constrained to RootAction Thanks again for all the great work youve done Currently the guide has for react components the state type defined up with the props Instead I propose its changed to be flipped a bit For example jsx type ownProps const initialState isOpen false class Modal extends ReactComponentownProps typeof initialState state initialState this better follows the repositories philosophy of implementation being the source of truth Reason being that it doesnt work properly with class components that have default props ts class Foo extends ReactComponentbar number static defaultProps bar const props ReactComponentPropstypeof Foo const foo Foo Of course works Results in Property bar is missing in type but required in type bar number ts Also the team who originally wrote it said it was only supposed to be used internally Considering that that discussion about improving ComponentProps I just linked to ended without getting resolved Id like to suggest to go with one of the following for this guide Instead of ComponentProps have a code block with a custom type for people to use possibly the one from the PR since it does work While I personally do this in my projects it seems to me that youre trying to stick with whats possible out of the box so this might not be an acceptable solution for this guide I suppose Completely remove the part about ComponentProps from the README Warn about the shortcomings of using the vanilla ComponentProps Id also like to note that theres a second shortcoming to both ComponentProps as well as my enhanced version Its just not possible to use this with generic class components Since TS doesnt support something like ReactComponentPropstypeof Foostring As far as I know But one of course can export generic prop types Hi I created a toolkit for React Redux Typescript and Rx epics website repo Is it possible to create a new section in Readme Toolkits I can submit a PR Thanks