Hi Can you please look into adding Log Rotation into StatsD Perhaps configurable by file size Even better add something ala MongoDB where sending a SIGUSR command rotates the log file Thank you We have an application reporting the current number of inflight requests as a gauge and the value is reported every time a request is added to the queue or removed from it This generates a lot of data but statsd only reports the last value it has seen before the flush What wed like to see is an average of all values received since the last flush so that if a spike occurs during an interval we can spot it on the graphs Weve worked around this for now by abusing timers but it would be nice to have some sort of an official nonhacky way to support this use case With the console backend enabled on with the reference example config Im seeing a doubleflush every seconds every third flush on a second interval Flushing stats at Fri Sep GMT Coordinated Universal Time counters statsdbadlinesseen statsdpacketsreceived statsdmetricsreceived timers gauges statsdtimestamplag timerdata counterrates statsdbadlinesseen statsdpacketsreceived statsdmetricsreceived sets pctThreshold Flushing stats at Fri Sep GMT Coordinated Universal Time counters statsdbadlinesseen statsdpacketsreceived statsdmetricsreceived timers gauges statsdtimestamplag timerdata counterrates statsdbadlinesseen statsdpacketsreceived statsdmetricsreceived sets pctThreshold See the related issue on the Graphite project Hello we would like to add port into SELinux however its not officially assigned by IANA While this is not required for port to be added into the base SELinux port policy I would like to ask the community to consider filing application form at The port is currently free to use and the workflow is relatively fast and easy It can prevent from port conflicts in the future Thanks Cheers I have a setup where applications are sending metrics to different statsd Both Statsd are sending to a graphite backend I decide to test repeater backend on one of statsd in order to copy all metrics to statsdexporter and expose some metrics in prometheus format The scenario is the following using statsd version v STATSD and STATSD are running on different servers Everything is running in a docker UDP STATSD UDP GRAPHITEBACKEND APPLICATION TCP REPEATERBACKEND STATSDEXPORTER UDP STATSD UDP GRAPHITEBACKEND What is happening here is that when I activate REPEATERBACKEND on STATSD the data sent to GRAPHITEBACKEND are different from the data sent to GRAPHITEBACKEND and also seems some data are lost If I disable REPEATERBACKEND GRAPHITEBACKEND and GRAPHITEBACKEND receive same data and everything is working as expected Here the configuration that I used on STATSD STATSD port mgmtport percentThreshold graphitePort graphiteHost relay flushInterval deleteIdleStats true debug false backends backendsrepeater backendsgraphite repeater host statsdexporter port repeaterProtocol tcp graphite legacyNamespace false I tried also with another scenario as following UDP STATSD UDP GRAPHITEBACKEND APPLICATION TCP REPEATERBACKEND STATSDEXPORTER UDP STATSD TCP REPEATERBACKEND STATSDGRAPHITE UDP GRAPHITEBACKEND With following configurations STATSD port mgmtport percentThreshold flushInterval deleteIdleStats true debug false backends backendsrepeater repeater host statsdexporter port host statsdgraphite port repeaterProtocol tcp graphite legacyNamespace false STATSDGRAPHITE port mgmtport percentThreshold graphitePort graphiteHost relay flushInterval deleteIdleStats true debug false server serverstcp backends backendsgraphite graphite legacyNamespace false But the values sent are different Here you can find screenshot of data read from GRAPHITEBACKEND Screenshot at GRAPHITEBACKEND Screenshot at Do you have any idea why this is happening or have any suggestions on ways to troubleshoot that Thank you Right now we support stdout and local system syslog as opposed to a remote syslog Id like to propose a plugable logging system where youd pass in a logger object that you create in the config file including examples The would work around the issue of needing optionalDeps at all and would remove modernsyslog from the build allowing people to use any logging system they want remote syslog winston pino etc Im volunteering to do this but Its a major breaking change so I wanted to solicit feedback first Currently there are over a dozen metrics that get sent out for every timer stat that comes in Being able to filter on the specific aggregated metrics you want for a timer at the config level will allow for drastic reduction in the data sent out from statsd and stored The config that Ive added is calculatedtimermetrics which by default will send all metrics however once any other values are added it will only send those specified This also allows for the not sending percentile metrics as well Currently running these changes in production has reduced our Carbonwhisper load by Related to this issue This adds a configuration option for skipping the calculation of counter rates This can save a lot of metric volume if the user uses a consistent flushInterval and would rather calculate rate at query time This is the followup to The transfer is now done but we still have an open call for maintainers If you are genuinely interested in becoming a maintainer start contributing now by eg commenting on issues suggesting labels testing PRs writing PRs This will help with becoming a maintainer as it Provides a history of contributing to the project Gives you an idea of what is involved to be a maintainer so you will know if its something you actually are still interested in Then follow the steps in the maintainers doc 