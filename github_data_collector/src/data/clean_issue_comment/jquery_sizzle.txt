PR made Sizzle crash earlier on a documentElementmissing document However we want selection to work on nodes inside of a template element for which ownerDocument will point to a document fragment with a null documentElement As gibson said in We discussed inmeeting and had rough consensus that the right behavior was to stop at a disconnected fragment but to traverse up through a fragments template host when one exists But unfortunately it seems difficult and maybe impossible to differentiate the two My ideal change would instead be to tolerate null documentElement but more changes will be required for that Migrated from Test case Seems like maybe the process the of checking for focus in Edge causes the input to lose focus More thorough analysis is available in the comments on the jQuery issue Add invalid and valid pseudoclass selectors The implementation is based on elements validity attribute If element has no validity attribute its supposed that both functions return false This also matches CSS behaviour Consider the following collection js const array a b c Retrieving array can be done relatively quickly However when the property doesn t exist on the receiver JavaScript engines must continue to look up the prototype chain until either the property is found or the chain ends This is inherently slower than not doing any prototype chain lookups Retrieving an outofbounds index eg array triggers this scenario resulting in decreased performance This patch changes the way some loops are written to avoid running into the slow case unnecessarily Similar patch for jQuery Migrated from We decided in the meeting to try a for loop instead of pushapply Check perf to be sure but for loops are so heavily optimized these days that it might even be better It has the added advantage of not causing stack limit exceeded errors I have written a robust CSS selector parser It does not cover the entire sizzlejs spec however that would be a simple change I am making Scalpel an extendable parser Would there be any interest from Sizzle team to integrate Scalpel should it cover the entire spec The main benefits would be a clear separation of concerns and robustness of the parser It seems that the elementisfocus detection of jQuery and therefore Sizzle has troubles detecting the currently focused element in the Android version of the Chrome browser I have created fiffdle for this problem I had the same issue in Safari on an iOS device Maybe this is a webkit related problem Firefox works fine though Desktop browser seem to handle it fine because tags arent enough Cf jqueryjqueryissues This issue should close when one of the following two conditions are satisfied Someone adds a comment certifying that they have examined all unit tests and found no selections scoped so broadly that they could match QUnit output A commit lands on the master branch claiming to correct all such selections eg by either scoping more tightly or for those that are explicitly documentscope reducing with jQueryfilter qunitfixture before comparing to expected results The next release will be adding some surface area and the one after that breaking some littleused interfaces Such changes need to be captured 