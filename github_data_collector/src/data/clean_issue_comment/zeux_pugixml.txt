Hi First thanks for your great work I met a problem that pugixml does not support data format like below Data x y z It seems like some single quote or double quotes must be added I have some xml created by TinyXML and wrote in the format as above without quotes and I want to change to pugi as my tool to process XML files What is you suggestion to deal with these cases Best Yanming The xmlmemorypool interface is a simplified version of the C s stdpmrmemoryresource Allows construction of pugixmldocumentpugixpathquery objects using preallocated memory buffers Two specific memory pools are provided xmlmonotonicmemorypool similar to stdpmrmonotonicmemoryresource memoryresourceadapterT wrapper for classes which implement interface similar to stdpmrmemoryresource Some limitations xmlmemorypool cannot be used with all xpathrelated classes due to binary incompatibility only xpathquery is supported xpathquery swaps memory pools in move assignment operator since functionality to clone internal structures is missing Static analyser of Xcode version reports potential null pointer dereference in nodecopytree function img width altScreenshot at src One thing that disturbs me when working with pugi is that the lib is based upon an internal string encoding that is either UTF for char or UTF for wchar As the rest of the C world still havent agreed upon a standard encoding for Strings also there is no datatype for that yet one has to work often with applications that rely on other encodings internally than that So in order to work with pugi one has always to convert between the used encoding of once program and the chosen UTF encoding used by pugi for string data It would be great if those conversion functions would be part of the public API in order to make it easier to do those stuff They must be existent but I havent understood found the location in the source where those conversions happen I would think of something like that decode a source string into UTF based upon PUGIXMLWCHARMODE stdstring decodeconst stdstring value xmlencoding encoding encode a pugi internal string from UTF into the chosen destination encoding stdstring encodeconst stdstring value xmlencoding encoding That would be imho a big improvement Assuming node visitor interface is a good idea is it not clear there are several problems with existing xmltreewalker beginend are pretty pointless could be called from external code No way to get callbacks beforeafter the subtree this is what beginend could have been This was mentioned if memory serves in but this link is now dead No way to skip a subtree This is mentioned in issue While manually implementing a recursive traversal is pretty trivial all traversals that pugixml implements are stackless which is not as simpleconcise to write yourself so there seems to be some value in a generic traversal There are still several implementation options though Interface with virtual functions This will have to be a new interface to maintain binary compatibility xmltreevisitor or something like that Pseudointerface with templated member functions This can be faster although in a nonLTO build its a weird tradeoff templated implementations cant inline node structure accessors while an implementation based on virtual dispatch cant inline user code With LTO or headeronly mode the approach based on compiletime polymorphism should be faster though This can be seen as an extension of xmlnodefindnode Tree iterator with ability to descend into a subtree or skip it so that the user code is in control of the flow These need to be evaluated for the performance and versatility in various scenarios and are extensions of existring traverse support while is basically a separate idea Finally there is as it is quite a few ways to traverse the nodes in pugixml Ideally if we do need a new way it has to supplant the old one that is we should at the minimum deprecate existing traverse in favor of whatever the new interface is Hi and thanks for amazing library Do you plan to add stdstring overloads for most settersconstructors It makes code usage much more convenient Narrowchar interface on Windows is useless because it automatically makes its users Unicodebroken This would enable supporting Unicode seamlessly in portable code Would let us open XMLs referenced from another XML document external databases or configuration files all UTF without platform dependent reencoding logic See how SQLite does it I had never ever worried about Unicode with SQLite because of this its still a huge difference if there is a attribute with valid or invalid content or complete absent of the attribute itself xmlvalueint tryint usage xmlvalueint value attributexyztryint valueexists truefalse const valuevalid successfull converted const int x value conversion operator const This issue was filed on Google Code There are concerns about using errno on some platforms even on platforms that have MTsafe errno parsing denormal numbers will set errno to ERANGE but keep the parsed output as far as I know Checking the end pointer can potentially be a breaking change if applications relied on parsing numbers like f This issue was filed on Google Code Sometimes the current offset information is hard to use and users are willing to sacrifice some additional performancememory to translate offsets into lines Right now it can be done externally but this does not work if encoding conversion has to be performed 