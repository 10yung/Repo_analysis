 Per a discussion on Git mailing list at One failed self test on Fedora and assorted followups The discussion concerns itself with a failed audit due to unaligned accesses in sha dcsha c using CFLAGS fsanitizeundefined And in particular from Jeff King at disabling sha dc unaligned access Unfortunately I dont think sha dc currently supports defines in that direction The only logic is if we are on intel do unaligned loads and even if we are not on intel do it anyway There is no even if we are on intel do not do unaligned loads I think youd need something like this diff git aMakefile bMakefile index b c dcd aMakefile bMakefile BASICCFLAGS fsanitizeSANITIZE fnosanitizerecoverSANITIZE BASICCFLAGS fnoomitframepointer ifneq filter undefinedSANITIZERS BASICCFLAGS DNOUNALIGNEDLOADS BASICCFLAGS DSHA DCDISALLOWUNALIGNEDACCESS endif ifneq filter leakSANITIZERS BASICCFLAGS DSUPPRESSANNOTATEDLEAKS diff git asha dcsha c bsha dcsha c index df bc d bdf d asha dcsha c bsha dcsha c endif ENDIANNESS SELECTION ifndef SHA DCDISALLOWUNALIGNEDACCESS if definedSHA DCFORCEUNALIGNEDACCESS definedSHA DCONINTELLIKEPROCESSOR define SHA DCALLOWUNALIGNEDACCESS endif UNALIGNMENT DETECTION endif define rotaterightxn xnx n but of course we cannot touch sha dc because we might actually be using the submodule copy instead And AFAIK there is no good way to modify the submoduleprovided content as part of the build Why do we even have the submodule again P I guess the same would be true for DCSHA EXTERNAL too though So anyway I think this needs a patch to the upstream sha dc project Please provide an option to disable unaligned accesses This is the continuation of e b gitignore ignore libdepend and other depend directories and helps gitgit which uses this as a submodule When running make coverage in gitgit well find some files with the extension of gcda and gcno to be ignored in this submodule Signedoffby Stefan Beller sbellergooglecom Building on AIX using XLC gives an error during make test Error Compiled for incorrect endianness This also breaks in git from Add a ifdef guard based on macros defined at and Should perhaps xlc should should be changed to or combined with AIX based on the behavour of GCC on AIX or XL C on Linux Makes compilation using xlc on AIX and likely other compilers not warn so much I noticed that on some older PPC systems I have the SHA hashes created in git were failing since this code was included When built with newer gcc compilers eg gcc git would generate properly working binaries The stock Apple compilers are gcc and less and they dont generate the defines needed to succeed in the current big endian tests Forcing big endian with DSHA DCFORCEBIGENDIAN does work to create a working git Perhaps the big endian detection might be tweaked to add support for these older stock Apple compilers and that would fix git on these systems Heres the output gccapple E dM devnull define DBLMINEXP define FLTMIN e F define DEC DEN E DD define CHARBIT define ARCHPPCGR define WCHARMAX define DBLDENORMMIN e define FLTEVALMETHOD define DBLMIN EXP define FINITEMATHONLY define GNUCPATCHLEVEL define DEC MAXEXP define SHRTMAX define LDBLMAX e L define APPLECC define UINTMAXTYPE long long unsigned int define DEC EPSILON E DF define block attributeblocksbyref define LDBLMAXEXP define SCHARMAX define USERLABELPREFIX define STDCHOSTED define LDBLHASINFINITY define DEC MINEXP define DBLDIG define FLTEPSILON e F define LDBLMIN e L define DEC MAX E DF define ppc define strong define APPLE define DECIMALDIG define LDBLHASQUIETNAN define DYNAMIC define GNUC define FLTHASDENORM define DBLMAX e define DBLHASINFINITY define DEC MINEXP define OBJCNEWPROPERTIES define LDBLHASDENORM define DEC MAX E DL define DEC MIN E DF define weak attributeobjcgcweak define DBLMAXEXP define DEC EPSILON E DL define LONGLONGMAX LL define GXXABIVERSION define FLTMINEXP define DBLMIN e define DBLHASQUIETNAN define DEC MIN E DL define REGISTERPREFIX define DBLHASDENORM define NOINLINE define DECEVALMETHOD define ARCHPPC define FLTMANTDIG define VERSION Apple Inc build dot MacPorts applegcc define BIGENDIAN define DEC EPSILON E DD define DEC MINEXP define ENVIRONMENTMACOSXVERSIONMINREQUIRED define SIZETYPE long unsigned int define DEC DEN E DF define FLTRADIX define LDBLEPSILON e L define NATURALALIGNMENT define LDBLDIG define FLTHASQUIETNAN define FLTMAX EXP define LONGMAX L define FLTHASINFINITY define DEC MAX E DD define DEC MANTDIG define DEC MAXEXP define BIGENDIAN define DEC DEN E DL define LDBLMANTDIG define CONSTANTCFSTRINGS define WCHARTYPE int define pic define FLTDIG define INTMAX define LONGDOUBLE define FLTMAXEXP define BLOCKS define DBLMANTDIG define DEC MIN E DD define WINTTYPE int define LDBLMINEXP define MACH define LDBLMAX EXP define DBLEPSILON e define INTMAXMAX LL define FLTDENORMMIN e F define PIC define FLTMAX e F define FLTMIN EXP define INTMAXTYPE long long int define DEC MAXEXP define GNUCMINOR define DEC MANTDIG define DBLMAX EXP define LDBLDENORMMIN e L define STDC define PTRDIFFTYPE int define DEC MANTDIG define LDBLMIN EXP define POWERPC define GNUCGNUINLINE perhaps checking for APPLE and BIGENDIAN would do it Upon code review crmarcstevens and I noticed that the ihv buffers and m buffers on the context are unnecessary for the struct And hence can be removed to simplify the code Declare API entry points as cdecl through a compilerspecific macro Add a new void parameter to the callback function Allow multiple calls to SHA DCFinal enable getting partial hashes FIX Callback was never called 