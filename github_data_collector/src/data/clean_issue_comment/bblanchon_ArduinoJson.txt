Hi I am using ArduinoJson to parse large JSON files on Arduino platform In order to decrease the RAM usage I parse the input using the streamfind streamfindUntil approach It works perfectly for simple JSON objects stored in an JSON array Instead of deserializing whole array I loop through the array with streamfindUntil and deserialize individual objects separately It is great The problem I have now a JSON where the top level array consists of JSON objects that consist of other objects and arrays I would like to deserialize these nested objects using the same memory saving technique ie find findUntil and limit the NESTINGLIMIT to But I am of course running into problem with file position pointer as well as it seems that the NESTINGLIMIT stops parsing when it encounters first occurrence of a nested object ie not skipping it but not parsing from them point further This is short version of the JSON Especially the rules arrays can be huge and I would like to parse its items individually It would be ideal however if I could parse each level of nesting individually Any suggestions how to approach it JSON devices id nameYamaha DX instrumentdx port channel patch request responses header B rules id pPos byte bPos size id pPos byte bPos size header C rules id pPos byte bPos size id pPos byte bPos size request responses header E rules id pPos byte bPos size id nameGeneric MIDI instrumentcc port channel Before opening an issue please read the FAQ Please provide all the relevant information good title short description of the problem target platform compiler model and version MVCE compiler output Good questions get fast answers Before opening an issue please read the FAQ Please provide all the relevant information good title short description of the problem target platform compiler model and version MVCE compiler output Good questions get fast answers Hi I am using ArduinoJson to communicate on arduino and esp Arduino is sending data to esp using serializeJsonsaveDataDoc EspSerial Esp is using deserializeJsondoc Serial to get data I want to debuglook json data which creates DeserializationError when esp try to deserialize data came from Arduino Serial So i can understand whats wrong in data Before opening an issue please read the FAQ Please provide all the relevant information good title short description of the problem target platform compiler model and version MVCE compiler output Good questions get fast answers i use an esp cam for my project and i want to parse a big json file from the client response So in order to calculate a possible capacity i took a big json response and duplicate it in arduinoJson assistance It gave me const sizet capacity JSONARRAYSIZE JSONOBJECTSIZE When i use it even with much smaller json i get no memory error When i change to the real capacity of my current json response to const sizet capacity JSONARRAYSIZE JSONOBJECTSIZE it works fine So my questions are why i get this error even i give so much space is there any limit for capacity in esp i guess deserializeJsondoc client is much more efficient in speed and memory compared to get the payload String and do deserializeJsondoc payloadam i correct I ran into a problem where my Arduino has several JSON documents created even after clearing the object the memory is still full can you show me how to destroy a JSON document after creating it I dont want to clear it I want to destroy it I use ArduinoJson V with the current ESP Core The same problems also occurs with an ESP Im facing a strange issue with the function below I call during void setup HttpConnection is established and the parsing also works fine Calling the next function in setup the ESP crashes and reboots with Exception LoadStoreAlignmentCause My function void getNews WiFiClient client HTTPClient http for uint t w wnewssources w loop for number of news sources String url uint t newsmultiplier numofarticles w if w url naAPIKEY if w url naAPIKEY if w url naAPIKEY ifhttpbeginclienturl int httpCode httpsendRequestGET ifhttpCode DynamicJsonDocument doc DeserializationError error deserializeJsondoc httpgetStream if error SerialprintlndeserializeJson failed Serialprintlnerrorcstr return else JsonArray articles doc articles JsonObject articles articles const char name articles source name const char title articles title const char url articles url JsonObject articles articles const char name articles source name const char title articles title const char url articles url JsonObject articles articles const char name articles source name const char title articles title const char url articles url snprintftable newsmultiplier newscur sizeoftable newsmultiplier newscur s s s msgNews name title snprintftable newsmultiplier newslink sizeoftable newsmultiplier newslink s url snprintftable newsmultiplier newscur sizeoftable newsmultiplier newscur s s s msgNews name title snprintftable newsmultiplier newslink sizeoftable newsmultiplier newslink s url snprintftable newsmultiplier newscur sizeoftable newsmultiplier newscur s s s msgNews name title snprintftable newsmultiplier newslink sizeoftable newsmultiplier newslink s url else Serialprintfhttp error httperrorToStringhttpCodecstr Serialprintlntable newsmultiplier newscur Serialprintlntable newsmultiplier newscur Serialprintlntable newsmultiplier newscur Serialprintlntable newsmultiplier newslink Serialprintlntable newsmultiplier newslink Serialprintlntable newsmultiplier newslink else SerialprintlnUnable to connect to news API httpend I used Json Assistant which calculated a doc size of about I tried doc size with an higher but that didnt change anything ESP keeps crashing though parsing and printing into the arrays had worked I have no idea what happens any ideas would be appreciated Thank you I have read through the API docs but didnt find such a basic functionality so I have to implement my own A containsElement method would help jsonArraycontainsElementStringthird find out at index jsonArraycontainsElementStringnone didnt find out Hi I have to parse a big String obj coming from PubSubClient callback Every thing is running on a Arduino MKR zero SAMD I passed it to the parseObject method but I cant get it to parse The string is a JSON object and I verified it was read right by printing it on Serial The same string defined in the code is parsed without any problem Even when read from SD is okay Here the string CONFIGTXT Here the callback method void mqttCallbackchar topic byte payload unsigned int len ifdef DEBUG SerialUSBprintMessage arrived SerialUSBprinttopic SerialUSBprint SerialUSBwritepayload len SerialUSBprintln endif String strPayload Stringcharpayload if Stringtopic mqttOtaTopic readJSONConfigFromStringstrPayload saveJSONConfig readConfig else if Stringtopic mqttCtrlTopic readJSONCommandstrPayload Here the parsing method a bit modified from your assistant void readJSONConfigFromStringString json DynamicJsonBuffer jsonBuf JsonObject root jsonBufparseObjectjson JsonObject global root global deviceName global name asString KAON pollTime global poll snoozeTime global snooze updTime global upd alarmOn global alarm on alarmOff global alarm off adcBit global adc JsonArray digital root digital for int i i i JsonObject obj digital i Dnames i obj name asString channel obj type asString INPUT Dtype i INPUT Dtype i OUTPUT INPUT Dalarm i obj alarm false Dthres i obj thres Dpriority i obj priority Ddelay i obj delay JsonObject ch root counters CH Cnames ch name asString channel Cunits ch unit asString m Cmult ch mult vals ch off Calarm ch alarm false Cthres ch thres Cpriority ch priority Chour ch time JsonObject ch root counters CH Cnames ch name asString channel Cunits ch unit asString m Cmult ch mult vals ch off Calarm ch alarm false Cthres ch thres Cpriority ch priority Chour ch time JsonArray analogIn root analogInput for int i i i JsonObject obj analogIn i Anames i obj name asString ai Aunits i obj unit asString m Amult i obj mult Aoffset i obj off obj type asString mA Atype i mAp Atype i V p mA Aalarm i obj alarm false Alow i obj low Ahigh i obj high Apriority i obj priority Adelay i obj delay JsonObject aOut root analogOutput JsonObject obj aOut AO AOnames obj name asString ai obj type asString mA AOtype mAp AOtype V p m JsonObject obj aOut AO AOnames obj name asString ai obj type asString mA AOtype mAp AOtype V p m JsonObject comp root logic comp comp a charToChannelcomp a CH comp b charToChannelcomp b CH comp fun comp fun asStringcharAt comp out charToChannelcomp out CH JsonObject comp root logic comp comp a charToChannelcomp a AI comp b charToChannelcomp b AI comp fun comp fun asStringcharAt comp out charToChannelcomp out CH JsonObject pid root pid pidInput charToChannelpid in AI pidSet pid set pidMin pid min pidMax pid max pidP pid p pidI pid i pidD pid d pid out AO pidOutput pidOutput AO JsonObject sms root sms smsAlive sms alive false smsTele sms tele false smsAlarm sms alarm true JsonArray smstarget sms target nSms smstargetsize for int i i nSms i smsTargets i smstarget i asString JsonObject network root network JsonObject networkapn network apn apnName networkapn name asString TM apnUser networkapn user asString apnPwd networkapn pw asString JsonObject networkmqtt network mqtt mqttUser networkmqtt user asString mqttPwd networkmqtt pw asString ifdef DEBUG networkmqttprintToSerialUSB endif mqttBroker networkmqtt broker asString mqtteclipseorg mqttPort networkmqtt port mqttId networkmqtt id asString dev mqttAlive networkmqtt alive false mqttTele networkmqtt tele false mqttAlarm networkmqtt alarm true mqttCtrl networkmqtt control false mqttOta networkmqtt ota true JsonObject networkrest network rest restUrl networkrest url asString restPort networkrest port restId networkrest id asString dev restAlive networkrest alive false restTele networkrest tele false restAlarm networkrest alarm true restCtrl networkrest control false restOta networkrest ota true jsonBufclear Im storing configuration in SPIFFS and so I have to size the DynamicJsonDocument large enough that it wont unexpectedly fail to readwrite the whole configuration file The problem I have is that this allocation is then always quite large and made in one request from the heap which significantly fragments the heap Id like it to make additional allocations as required from the heap up to a specified limit instead I dont need it to free the memory until the document is destroyed I know youve discounted this on the basis that it causes more heap fragmentation but I disagree The fragmentation of the heap is affected by the size of allocations being made By always making one big allocation of total memory theres a significant risk that once freed the space occupied by that allocation will be reused by smaller allocations and a contiguous block of that size will no longer be available from the heap Before opening an issue please read the FAQ Please provide all the relevant information good title short description of the problem target platform compiler model and version MVCE compiler output Good questions get fast answers Currently it is not possible to rename an object key efficiently However renaming an object key can be handy at times For example I am currently implementing a JsonRPC library The library also provides a server class which processes JsonRPC requests a JsonVariant and calls appropriate callback methods which in turn fill a JsonRPC response also a JsonVariant Depending on the success of the callback either the result member or the error member must be filled according to the specification If renaming object keys would be possible with ArduinoJson the callbacks could just care about filling a JsonVariant with a result or an error object and the server would take care of choosing the right key name depending on the callbacks success Currently the callbacks need to be aware of the JsonRPC specification which I consider a rather clumsy style This is just my use case of renaming object keys but I am sure other people would also benefit from this feature BTW Thank you so much for this awesome library Yann I would like to deserialize a JsonObject partly to save memory by not deserializing properties of unknown size Example I have a string containing a serialized partly known object UnknownProperty valueWithUnknownSize KnownProperty valueWithKnownSize Is it possible to only deserialize a known specific property from a serialized object Eg StaticJsonDocument doc deserializeJsonSpecificPropertydoc example KnownProperty This would be helpful for a library that only knows the required size for deserializing part of the object Thanks