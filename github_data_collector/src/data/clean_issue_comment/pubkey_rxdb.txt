This PR contains the following updates Package Type Update Change typesws devDependencies major Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Disabled by config Please merge this manually once you are satisfied recycle Rebasing Whenever PR is stale or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about this update again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here This PR contains the following updates Package Type Update Change testcafehammerhead devDependencies patch Release Notes details summaryDevExpresstestcafehammerheadsummary v Compare Source What s Changed Fix legacy api regression miherlosev v Compare Source What s Changed Remove unused code miherlosev Dont rewrite proxy handler if it has been overwritten link Fix wrong new window opening miherlosev details Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Enabled recycle Rebasing Whenever PR is stale or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about this update again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here Case Feature Request Issue Currently GraphQL based replication does not support syncing revisions The documentation mentions that the server needs to resolve conflicts However often for the server to even detect conflicts it needs to have some kind of versioning information Further for many use cases some kind of user intervention is required for resolving a conflict ie the server cannot completely auto resolve conflicts It would therefore be useful if there was a mechanism to sync the version data as well I can think of the following approach to implementing this add two new fields to the syncGraphQL options syncRevisions boolean and revisionField string If these options are set then the pushQueryBuilder would get the pouchdb revision along with the rest of the doc for every document pulled using the pullQueryBuilder we can create the revision using the value of the revisionField endpointHash plugin ident before storing into pouchdb If the approach sounds correct I can try to make a pull request This PR contains the following updates Package Type Update Change typescript source devDependencies minor typescript source devDependencies patch typescript source devDependencies minor Release Notes details summaryMicrosoftTypeScriptsummary v Compare Source For the complete list of fixed issues check out the fixed issues query for Typescript v Beta fixed issues query for Typescript v RC fixed issues query for Typescript v Final fixed issues query for Typescript v fixed issues query for Typescript v fixed issues query for Typescript v v Compare Source For the complete list of fixed issues check out the fixed issues query for Typescript v Beta fixed issues query for Typescript v RC fixed issues query for Typescript v Final fixed issues query for Typescript v fixed issues query for Typescript v Downloads are available on npm Visual Studio Select new version in project options NuGet package v Compare Source For the complete list of fixed issues check out the fixed issues query for Typescript v Beta fixed issues query for Typescript v RC fixed issues query for Typescript v Final fixed issues query for Typescript v Downloads are available on npm Visual Studio Select new version in project options NuGet package v Compare Source For release notes check out the release announcement For new features check out the Whats new in TypeScript v For the complete list of fixed issues check out the fixed issues query for Typescript v Beta fixed issues query for Typescript v RC fixed issues query for Typescript v Final Downloads are available on npm Visual Studio Select new version in project options NuGet package details Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Enabled recycle Rebasing Whenever PR is stale or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about these updates again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here Based on the last user survey I have worked out some changes that I want to make in the next major release of RxDB Please start discussions and improvements in this issue Move rxjs into a plugin instead of having it internal RxDB relies heavily on rxjs This made it easy in the past to handle the data flow inside of RxDB and also created featurerich interfaces for users when they want to observe data As long as you have rxjs in your project anyways like you would have in an angular project there is no problem with that As soon as a user has another datahandling library like redux or mobx rxjs increases the build size by kb kb gzipped and also adds the burden to map rxjs observables into the own state management The change would ensure that rxjs is no longer used inside of RxDB And also there will be a RxDBplugin which offers the same observablefeatures as there are today but optional This would also allow us to create plugins for mobx or reacthooks in the future Move pouchdb into a plugin When I started creating RxDB I used the best solution for a noSQL storage engine that I could find This was pouchdb Not only because it is a very mature project but also because it has adapters for so many environments The problem with pouchdb is the build size of kb gziped with indexeddb adapter and also the performance decrease by its overhead which comes from how it handles its revision tree The change would ensure that the storageengine is abstracted in a way that I can be swapped out by any other noSQL database out there Users could then use different storage engines depending if they want smaller builds or better performance For example there are these out there NeDB Minimongo Dexiejs WorkerPouch Or any database with a changestream like Postgre mongo etc This would also make it possible to use RxDB together with NativeScript in the future Pouchdb will still be the default in the main build Make RxDcouments immutable At the current version of RxDB RxDocuments mutate themself when they recieve ChangeEvents from the database For example when you have a document where name foo and some update changes the state to name bar in the database then the previous javascriptobject will change its own property to the have docname bar This feature is great when you use a RxDocument with some changedetection like in angular or vue templates You can use document properties directly in the template and all updates will be reflected in the view without having to use observables or subscriptions However this behavior is also confusing many times When the state in the database is changed it is not clear at which exact point of time the objects attribute changes Also the selfmutating behavior created some problem with vue and reactdevtools because of how they clone objects Also to not confuse with fast changes that happen directly after each other the whole jsondatatoRxDocumentpiple has to be synchronous With the change this can be async which will allow us to have async postresulttransformations like an asynchronous encryption plugin with the Web Crypto API or also move things into a webworker The change would make all RxDocuments immutable When you subscribe to a query and the same document is returned in the results this will always be a new javascript object Use immutable objects instead of deepcloning stuff RxDB often uses outgoing data also in the internals For example the result of a query is not only send to the user but also used inside of RxDBs querychangedetection To ensure that mutation of the outgoing data is not changing internal stuff which would cause strange bugs outgoing data is always deepcloned before This is a common practice on many javascript libraries The problem is that deepcloning big objects can be very CPU expensive So instead of doing a deepclone RxDB will assume that outgoing data is immutable If the users wants to modify that data it has be be deepcloned by the user To ensure immutability RxDB will use deepfreeze in the devmode about same expensive as deep clone Also typescript will throw a buildtime error because we will use ReadonlyArray and readonly to define outgoing data immutable In productionmode there will be nothing that ensures immutability This PR contains the following updates Package Type Update Change spectron devDependencies major Release Notes details summaryelectronspectronsummary v Compare Source Add support for Electron x line details Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Disabled by config Please merge this manually once you are satisfied recycle Rebasing Whenever PR is stale or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about this update again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here This PR contains the following updates Package Type Update Change electron dependencies major Release Notes details summaryelectronelectronsummary v Compare Source Release Notes for v Fixes Fixed a crash in contextBridge that happens on garbage collection Fixed a crash that would occur when Notifications were closed in concert with app termination Fixed an issue that could cause frameless windows to become undraggable in some circumstances Fixed an issue that could prevent communication between a sandboxed child window opened with nativeWindowOpen false and an unsandboxed parent window Also fixed documentvisibilityState not working in sandboxed webview Fixed an issue with potential duplicate error popups when calling shellshowItemInFolder on Windows Fixed white flash when foregrounding an occluded window Documentation Documentation changes v Compare Source Release Notes for v Fixes Fixed an issue in the net module where aborting a request during a redirect could cause an error to be thrown Fixed incorrect button highlighting when defaultId is passed for dialog message boxes Other Changes Updated crashReporter to throw an error for getLastCrashReport if crashReporter not started v Compare Source Release Notes for v Fixes Fixed an issue where calling allowNTLMCredentialsForDomains could cause a change in Kerberos SPN generation behavior v Compare Source Release Notes for v Fixes Fixed black boxes with select tag inside webview and OOPIF on windows Fixed mediaspecific globalShortcuts not working on macOS v Compare Source Release Notes for v Fixes Added workaround for nativeWindowOpen hang Fixed cookiesset not working correctly when name or expirationDate is omitted Fixed a weird behaviors and crashes when controlling window menu by keys Fixed accessibility window title on macOS Fixed contextBridge crash when opening and closing many windows Fixed source maps not loading in devtools with file scheme Fixed window menu unable to hide on startup Removed Electrondsym from macOS application zip v Compare Source Release Notes for v Fixes Fixed an issue that caused ClientRequestgetUploadProgress to return incorrect values Fixed compositor recycling when creating new BrowserView Fixed contextBridge crash when closing a window Fixed issues where noLink and checkboxChecked were not passed correctly on Windows Fixed throttling in webContentssetBackgroundThrottling Other Changes Updated Chromium to v Compare Source Release Notes for v Fixes Fixed ignoreconnectionslimit ironically being ignored Fixed broken focus with OOPIF embedded inside webview Fixed context menu disappearing when showing Fixed contextBridge crash Fixed the login event not being emitted when HTTP Basic auth was requested during a netrequest Net module requests no longer raise errors when non xx responses are received The disabledbydefaultcpuprofiler tracing category now correctly records stack samples from the main process and utility processes webContentsreloadIgnoringCache will now forcefully ignore all caches including service workers windowroot and windowGLOBAL are both now undefined when nodeIntegration is disabled as expected Other Changes Fixed some crashes that could occur when using the net module Generate debug symbols on Linux Made stripabsolutepathsfromdebugsymbols to false in debuggn Updated Chromium to v Compare Source Release Notes for v Fixes Disabled Touch Bar typing suggestions with autocorrectoff and spellcheckfalse Fixed ENOMEM error with Nodejs childprocess when using empty optionsenv Fixed webviewcapturePage resolving with an empty object instead of NativeImage instance Fixed webRequest module unable to modify CORS headers Fixed an issue where custom protocols registered using registerStreamProtocol would sometimes fail to complete the response when the stream ended Fixed flickering when maximizing and restoring frameless windows Fixed incorrect size of windows on differently scaled monitors Fixed the login event not being emitted when HTTP Basic auth was requested from a WebContents Other Changes Updated Chromium to v Compare Source Release Notes for v Fixes Fixed backgroundThrottling false not having an effect Fixed broken globalShortcutregisterAll on Windows and Linux Fixed crash on exit in aura platforms with webview Fixed exiting HTML fullscreen for crossorigin iframes eg YouTube while in macOS fullscreen Fixed improper label internationalization for the recentDocuments MenuItem Fixed issue where appsetAppLogsPath did not work when you provided a valid path Fixed webrequest api typings Other Changes Updated Chromium to v Compare Source Release Notes for v This release is a minor bump as it contains exactly one new feature contextBridge module this feature is outlined below along with the other fixes and changes that went into this release The x series is now only release line in the xy major release line that will receive bug fixes and security fixes It is recommended you upgrade to x Features Added new contextBridge module to make it easier to communicate between an isolated context and the main world Fixes Fixed nativeTheme not accessible via the remote module Fixed a memory leak issue when setting Tray images Fixed issue where proxied remote promises might not resolve if Bluebird was installed in the renderer Other Changes Prepare for b ef b Updated Chromium to v Compare Source Release Notes for v Fixes Fixed shellopenExternal option workingDirectory not working with Unicode characters Fixed a crash in Menus related to menupopup Fixed a label mismatch on open and save dialogs on GTK Fixed a regression in the recentDocuments role on macOS Fixed an issue where objects referenced by remote could sometimes not be correctly freed Fixed crashes when calling webContentsprintToPDF multiple times Fixed devtools extensions not loading due to Connect to unknown extension object Object errors Fixed flicker when switching between BrowserViews Fixed fsmkdirmkdirSync hang with recursive true for invalid names with node on windows Fixed hang when closing a scriptable popup window using the remote module Fixed memory leaks caused by callbacks not being released when the remote module is used in subframes iframe or scriptable popup Fixed native module size increase on windows follow up fix to Fixed several deprecation warnings in Electron code Other Changes Updated Chromium to Documentation Documentation changes v Compare Source Release Notes for v Notable Changes Stack upgrades Stack Version in Electron Version in Electron Whats New Chromium V Nodejs Added Windows on Arm bit release Added ipcRendererinvoke and ipcMainhandle for asynchronous requestresponsestyle IPC These are strongly recommended over the remote module See this Electron s remote module considered harmful blog post for more information Added nativeTheme API to read and respond to changes in the OSs theme and color scheme Switched to a new TypeScript Definitions generator which generates more precise definitions If your TypeScript build fails this is the likely cause Breaking Changes More information about these and future changes can be found on projects Planned Breaking Changes page Removed deprecated APIs Callbackbased versions of functions that now use Promises TraysetHighlightMode macOS appenableMixedSandbox appgetApplicationMenu appsetApplicationMenu powerMonitorquerySystemIdleState powerMonitorquerySystemIdleTime webFramesetIsolatedWorldContentSecurityPolicy webFramesetIsolatedWorldHumanReadableName webFramesetIsolatedWorldSecurityOrigin SessionclearAuthCache no longer allows filtering the cleared cache entries Native interfaces on macOS menus dialogs etc now automatically match the dark mode setting on the users machine Updated the electron module to use electronget The minimum supported node version is now Node The electronasar file no longer exists Any packaging scripts that depend on its existence should be updated New Features netLogstartLogging now returns a promise which resolves when the net log has started recording All async webContents webview methods now return a Promise Added alwaysontopchanged event emission for macOS Added appresignCurrentActivity to allows marking inactive the current Handoff user activity without invalidating it Added captureMode and maxFileSize options to the netLog API Added creationTime sandboxed integrityLevel to appgetAppMetrics output Added failureReason parameter to the webContentsprint callback function to distinguish between success failure and cancellation Added getBounds method for BrowserView Added gpuinfoupdate event to app which is emitted whenever there is a GPU info update Added memory to appgetAppMetrics Added processgetBlinkMemoryInfo Added removeInsertedCSS to webFrame webContents webview Added zoomchanged event to webContents which is emitted when the user zooms using the mouse wheel on Windows even if the focus is inside an xorigin iframe Migrated Tray from custom to native view to be compatible with Catalina macOS Added a MenuItemtoolTip property macOS Added printing customization options Added an optional conflict handling callback to appmoveToApplicationsFolder Added missing support for ELECTRONDEFAULTERRORMODE in the GPU process Added security warning for remote modules with remote content Support CSS origin in webFrameinsertCSS Support HTTP preconnect resource hints Support NSVisualEffectMaterials vibrancy types added in macOS Mojave Support mousemove event of Tray API on Windows Support systemPreferencesisDarkMode API on Windows Support systemPreferencesisHighContrastColorScheme API on macOS Support pictureinpicture mode for video elements Support rotation multitouch gestures on BrowserWindow for macOS Added the ability to set authors in the Linux implementation of the About panel Calling contentTracingstopTracing with no arguments is now permitted and has the same behaviour as calling it with an empty string tracing data will be written to a temporary file Can set a window always on top but behind the taskbar on Windows Enabled the W C Reporting API Exposed the value of NSNotificationobject to subscribers of notifications in systemPreferences Implemented BrowserWindowsetFocusable on macOS Renderer processes hosting crossorigin frames are now sandboxed unless the parent BrowserWindow enables nodeIntegrationInSubFrames Set the ELECTRONSKIPBINARYDOWNLOAD environment variable to skip electron binary download Deprecated netLogcurrentlyLoggingPath Added Windows on Arm node header files to checksum file Properties Converted webContents primitive getters and setters to actual properties Converted badgeCount to an actual property on the app module appname is now a property nativeImagetemplateImage is now a property on the nativeImage prototype Converted appLevelAppearance to be a property on systemPreferences Converted autoHideMenuBar to a property on BrowserWindow instances Converted savePath accessor to a property on DownloadItem instances Converted closable fullscreenable maximizable minimizable movable and resizable to be properties on the BrowserWindow prototype Fixes Node integration with remote content and loading insecure content warning messages are suppressed for localhost connections ELECTRONRUNASNODE now correctly parses both node options and v flags Eg exposegc Fixed Linux console warning about gtkdisablesetlocale Fixed triggeredByAccelerator Event property behavior for MenuItems Fixed a crash in windowprint Fixed a crash on manual print cancellation as well as an issue with deviceName not working Fixed a crash on tray popup being called multiple times in a row Fixed bug where the close event would not emit upon closing modal window on macOS Fixed crashReporter addExtraParameter removeExtraParameter methods undefined in macOS node child processes Fixed desktopCapturer leak Fixed setting src on webview being too slow Fixed several cases where documentvisibilityState would be incorrect The winshow and winhide methods now correctly update visibility state Fixed support for the webkitdirectory attribute on input typefile elements Fixed windows debug logging NodeJS globals process Buffer etc are no longer removed from the global scope if you have contextIsolation enabled as it is safe for those variables to still exist in their isolated world Nonabsolute session preload script paths are now ignored for sandboxed renderers getPathlogs now throws a more descriptive error if it fails to find the logs path webcontentscreated and browserwindowcreated no longer emit an empty object in place of Event Fixed an issue where netLogstartLogging would silently fail when called immediately during apponready Fixed an issue whereby requiring some modules before the app ready event had side effects Documentation Documentation changes End of Support for xy Electron xy has reached endofsupport as per the projects support policy Developers and applications are encouraged to upgrade to a newer version of Electron details Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Disabled by config Please merge this manually once you are satisfied recycle Rebasing Whenever PR is stale or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about this update again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here This PR contains the following updates Package Type Update Change pouchdbadapterhttp dependencies minor pouchdbadapteridb dependencies minor pouchdbadapterlocalstorage dependencies minor pouchdbadaptermemory dependencies minor pouchdbfind dependencies minor pouchdbreplication dependencies minor pouchdbserver dependencies minor Release Notes details summarypouchdbpouchdbsummary v we have another PouchDB release The main improvements in this release are bug fixes and dependency updates For a full changelog from to please see the releases page or view the latest commits Get in touch As always we welcome feedback from the community and would love to hear what you think of this release as well as PouchDBs future direction Please dont hesitate to file issues or get in touch And of course a big thanks to all of our new and existing contributors If you wondering where is I had a slight publishing issue so the easiest was to bump it up to to do a fresh deploy details details summarypouchdbpouchdbserversummary v Compare Source Changelog Fix for swallowing info errors Fix for jest being a production dependency dependency updates details Renovate configuration date Schedule At any time no schedule defined verticaltrafficlight Automerge Enabled recycle Rebasing Whenever PR is stale or if you modify the PR title to begin with rebase ghost Immortal This PR will be recreated if closed unmerged Get config help if thats undesired rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here 