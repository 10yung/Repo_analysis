I tried the library using this codesandbox If I use Shift Enter to add a new line it works If I use Enter to add a new line then click away to on blur it it removes lines that were created Basically AAAAA aa AA becomes AAAAAaaAA browser Chrome version Alternative implementation to Please let me know if I can do anything more to get this feature added Ive created a new version that works with legacy react It can be maintained in a different branch Check out reactlegacy branch The trickiest part would be versioning Id like to see how youd handle that Overview When a function is passed as innerRef typing Japanese text and probably other texts that require text conversion does not work properly Detail The animation below is the expected behavior Japanese uses several kinds of characters hiragana katakana and kanji kanji is basically Chinese character When we want to type Kanji we first type hiragana and then convert it to kanji from the list of possible candidates The animation below is working example As I type hiragana I see a box appears which shows the list of candidate conversions to kanji japanesinputworking But when a function is passed as innerRef the conversion box does not appear and the characters are automatically converted to the sequence of alphabets and hiragana as you can see in the animation below japaneseinputstrange Reproducing the problem Reproducing code is available from here Possible solution I found that removing propsinnerRef nextPropsinnerRef part in componentShouldUpdate solves this problem But I am pretty sure this line is there because it is needed so I doubt removing this line is the correct measure onChange is not triggered when initial html prop has the same value with the first edited text of the editable component Use case component is initialised with html prop equal to in constructor thislastHtml components prop html is changed to a render function is called a new editable div is created with innerHTML a componentDidUpdate is called but thispropshtml elinnerHTML thus thislastHtml is will go out of sync hit backspace innnerHTML becomes emitChange is called but propsonChange is not called because elinnerHtml thislastHtml interface ReactSyntheticEventT Element Generic type SyntheticEventT requires between and type argumentsts The cause of this bug is related to In the following minimal example jsx import React Component ChangeEvent KeyboardEvent from react import ContentEditable from reactcontenteditable class TestContentEditable extends Component public readonly state html text public readonly render const html thisstate const handleChange e ChangeEventHTMLInputElement consoleloghtml consolelogthisstatehtml thissetState html etargetvalue const handleKeyPress e KeyboardEventHTMLDivElement const key e if key Enter epreventDefault consoleloghtml consolelogthisstatehtml return ContentEditable htmlhtml onChangehandleChange onKeyDownhandleKeyPress export default TestContentEditable we should expect the output of consoleloghtml in handleKeyPress to be equal to consolelogthisstatehtml However it is not and the old handleKeyPress handler is used that sees the initial html value in its context On the other hand onChange is correctly updated Hey very useful component thanks I ran into an issue when trying to use this component in a functional component combined with useState The issue is that not all prop changes lead to an update of the component therefore an onBlur like in my example would return the old initial content value The issue resides in the current implementation of shouldComponentUpdate Please look at this example Codesandbox I copied this components current source code over there and just return true in the shouldComponentUpdate and everything works fine To see the issue comment the return true and uncomment the original code If you type something and look in the console youll see the following logs render log render log a render log as render log asd onBlur log To fix this Id suggest going with a return true or make it a PureComponent to make updates based on prop changes Ive ran into an issue where I had validations like allowing only n characters in the ContentEditable so I had a code like onTextChange target if targetvaluelength return thissetState editableText targetvalue and render method ContentEditable innerRef thiscontentEditableRef html thisstateeditableText onChange thisonTextChange Now I expected that ContentEditable is depending on editableText so if I dont change the state it wont reflect But it did not work ContentEditable was rendering content event if editableText was not changed Same thing happened with Pasting large content Is it possible to disable mulitline Input Meaning no breaks And when the user presses return while typing nothing happens