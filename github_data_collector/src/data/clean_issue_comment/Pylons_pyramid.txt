 Im posting this on the main pyramid tracker but it concerns code in the pyramid docs and the pyramid cookiecutter The namingconvention in the starter template and pyramid docs which is sent to SqlAlchemy is inadequate and undergoing a change upstream Im opening a ticket here now just in case others experience this issue before the fix is released The issue using this setup will create errors in Sqlite and Mysql if the user declares a Boolean or Enum column On these backends SqlAlchemy generates a CHECK constraint to enforce the data type when the database is initialized however the template for ck requires a constraintname to be provided Advanced users will know this can be declared in the column definition but most users will not know this and just see an exception that is not very helpful A fix in SqlAlchemy and Alembic is underway branch is starting to fail now See and Im not sure what to do about it Reference Ive found it very useful to have multiple authentication methods in my pyramid applications I always used pyramidauthstack for this purpose After talking with Wichert he was enthusiastic to the idea of making it core pyramid auth In my opinion it would make sense to have an outofthe box option to have stackable policies This addition would not require any changes to pyramid tutorial just documentation of new policy some mentions in authentication section Alternatives include Mozillas however pyramidauthstack is a simple implementation that is easy to understand and reason about so I would consider it as the primary candidate for implementation When we remove the page on scaffolds docsnarrscaffoldingrst we need to set up a redirect to docsnarrcookiecuttersrst in the docspylonsprojectorg nginx configuration for the master branch latest and stable x master latest stable Example for master nginx location projectspyramidenmasternarrscaffoldinghtml return schemehostprojectspyramidenmasternarrcookiecuttershtml See This is a placeholder for supporting whatever becomes the successor to pip and managing virtual environments in Pyramid including poetry flit and pipenv Please add to it Questions How and where to install SUCCESSOR Where does installation of SUCCESSOR fit into our current installation documentation Are there any features of SUCCESSOR that we would use beside installation of packages and distribution of an app What would happen to the environment variable VENV in most of our commands How do we deal with features in setuppy only specifically entry points of consolescripts and pasterappfactory What will we do with the scaffolds and pcreate Should we remove instructions for how to make a distributable Pyramid application and replace it with references to suggested tools Assuming a rewrite of commands for SUCCESSOR do we retain or remove Windows commands for everything except installation and setup of an environment with a disclaimer that it is up to the user to know how to translate Unix commands to their platform of choice Refs Things to update Documentation wherever pip is used Pyramids packaging related files including setuppy Pyramid cookiecutters References Poetry Summary article about pipenv See Temporary patch Replicate Pyramids scaffoldstestspy to run on the Pyramid cookiecutters Although more work we should have tests in both Pyramid and each cookiecutter to run against Pyramids master branch I am opening this item here for discussion When building small scale websites most views have only one route to them in the form of simple path Having a separate call for viewconfig or addview and then addroute is often unnecessary These could be combined to one routeandviewconfig decorator Example viewspy python routedview routenamehome def homerequest Request Our little webby site landing page content vv vv oo oo oo vv vv American Cow Polish Cow Australian Cow return Responsecontenttypetextplain bodytextwrapdedentcontent charsetutf routedviewawesome rendererfunkypt def awesomerequest Request viewname automatically set to awesome routename automatically set to awesome Then in init python from import views configscanviews Will add route and views Motivation All view related configuration in one place the decorator instead of being split between viewconfig in viewspy and addroute in initpy Make development and maintenance easier especially for newcomers who can get away with less lines and less questions Feature parity with Flask Existing implementations simpleroute in Websauna based on latter Original tombroutes package Resolving issue between route priorization In earlier IRC coffee table discussion people have noted that there should be some sort of weight integer added to routes so that routes scanned in different order can be resolved in correct order Is see this as unnecessary complication to be implemented but instead suggest to resolve this through documentation Only use routeandview for simple cases If there are competing routes and view configurations then it is suggested to use calls to addroute and addview explicitly instead of routeandview approach Suggested signature python def routedviewconfigfunc pattern routenameNone viewnameNone factoryNone rendererNone kwargs A function termdecorator allowing a developer to create simple view and corresponding routing configuration This is a termconfiguration decoration that wraps a termview callable function and configures view and routing arguments for it The module providing the view function must be scanned via pymethpyramidconfigConfiguratorscan This decorator is intended to be used with refURL dispatch views urldispatchchapter only For traversable views you should use pyfuncpyramidviewviewconfig Minimal usage example For example this code could in a module myappviewspy codeblock python from pyramidview import routedviewconfig routedviewconfig def homerequest return OK Then in initpy or similar place where you set up your Pyramid application you need to codeblock python configscanmyappviews Rendering views with templates Pass renderer codeblock python from pyramidview import routedviewconfig routedviewconfig rendererinfopt def inforequest return projectname Foobar warning routedviewconfig does not handle multiple routes and multiple views An exception is raised in the case there are conflicting routes seealso pymethpyramidconfigConfiguratoraddroute pymethpyramidconfigConfiguratoraddview pyfuncpyramidviewviewconfig Below is a description of most commonly used arguments Any other arguments through kwargs pattern are passed to pymethpyramidconfigConfiguratoraddview param pattern Required Equals to pattern in pymethpyramidconfigConfiguratoraddroute This can be a simple path like myview or one with the items like mylocationitem For item usage see refmatchdict param viewname Optional If viewname is not given the function name is used Equals to name in pymethpyramidconfigConfiguratoraddview param routename Optional If routename is not given the function name is used Equals to name in pymethpyramidconfigConfiguratoraddroute param renderer Optional View renderer Usually a template name Equals to addview in pymethpyramidconfigConfiguratoraddview param factory Route factory Optional Equals to factory in pymethpyramidconfigConfiguratoraddroute param decorator View decorator Optional Equals to decorator in pymethpyramidconfigConfiguratoraddview param permission Permission name required to access the view Optional Equals to permission in pymethpyramidconfigConfiguratoraddview raise ConflictingRouteConfiguration In the case there is already a route registered with a same name pass Hi I just started using Pyramid few weeks ago and it also took that time to set up i n with gettext My setup Python chameleon templates and gettext Ubuntu and Arch as dev environment and PyCharm as IDE I added translation to templates first and code later Heres some struggles I had Issues with setuppy extractmessages I added messageextractors myapp py python None pt chameleon None static ignore None To setuppy as was stated in manual Running VENVbinsetuppy extractmessages couldnt find chameleon extractor I tried xml linguachameleon linguaxml and linguaxml linguachameleon etc All sorts of combinations I couldnt find a way to list those extractors I also tried setupcfg approach So first suggestion dont give extractor not found as error Either list the possible extractors or give instructions how to list them Later I found that according to this message in SO the extraction method has been changed somewhere in or before I abandoned setuppy extractmessages and moved to VENVbinpotcreate Issues with VENVbinpotcreate I ran VENVbinpotcreate output myapplocaledefaultpot myapp Error Nothing found Hmm And the pot file is completely empty Next try strace e traceopen VENVbinpotcreate output myapplocaledefaultpot myapp Ok it is scanning py and pt files from right locations First suggestion Please list scanned files while potcreate is running or add verbose or other parameter to give this information I got the impression that it was doing nothing I found that the issue was missing i ndomainmyapp attribute in the templates After that strings started to appear to the defaultpot I created my first translation and I could change to it through pyramiddefaultlocalename in the ini file Finally some progress Issues with changing language from URL Next thing I wanted to change language based on URL For example fihome enhome etc And without adding language parameter to addroute This route pattern is very common in many web frameworks and theres examples how to implement it and its usually documented in URL routing andor i n section I think it should be added to i n documentation I couldnt figure out even where to start how to implement it so I went to IRC for help I got help from Mikko Ohtamaa and Michael Merickel and heres the current implementation Include file Enable language in URL from pyramidrequest import Request import logging log logginggetLoggername def addlocalizedrouteconfig name pattern factoryNone pregeneratorNone kw Create path language aware routing paths Each route will have lang prefix added to them Optionally if default language is set well create redirect from an URL without language path component to the URL with the language path component origfactory factory def wrapperfactoryrequest Request lang requestmatchdict lang determine if this is a supported lang and convert it to a locale likely defaulting to your default language if the requested one is not supported by your app requestpathlang lang requestlocalename lang if origfactory return origfactoryrequest origpregenerator pregenerator def wrapperpregeneratorrequest Request elements kw if lang not in kw not quite right but figure out how to convert requestLOCALE back into a language url kw lang requestlocalename if origpregenerator return origpregeneratorelements kw return elements kw if patternstartswith newpattern pattern else newpattern pattern newpattern lang newpattern Languageaware URL routed configaddroutename newpattern factorywrapperfactory pregeneratorwrapperpregenerator kw def includemeconfig Load configadddirectiveaddlocalizedroute addlocalizedroute logdebugincluded s name This wouldnt work with addroute changing addlocalizedroute addroute so existing routes had to be changed to configaddlocalizedroutehome configaddlocalizedroutelogin login configaddlocalizedroutelogout logout Going to would give error so I had to add some logic notfoundviewconfigrenderertemplates pt def notfoundrequest Request if requestpath or requestpathcount Redirect to default language import pyramidhttpexceptions as exc from pyramidthreadlocal import getcurrentregistry You could also read the browsers acceptlanguage headers here deflang getcurrentregistrysettings pyramiddefaultlocalename redirect deflang return excHTTPFoundlocationredirect requestresponsestatus return Custom layout would die because it lost the matchdict lang var generated by addlocalizedroute this fixed it in the initpy before main subscriberNewRequest def ReqLanguageevent NewRequest Read language code from URL and set it to request object request eventrequestpath if requestcount and lenrequest eventrequestlocalename request split Issues with gettext domains and paths Now I had translations changing with URL correctly and templates with stuff like a classnavbarbrand href talattributeshref requestroutepathhome i ntranslateHomea worked fine and language was added automatically without touching anything Now I started to implement login and there were the first translatable strings error messages in the code I dont remember all the details but it was either potcreate didnt find the translations from the py files or those translations werent transferred to mo file during compile The problem was fixed with just changing the po and mo filename to messagespomo because I found from the internal code that messages was the default translation domain I couldnt find any ini or config parameters to change default domain I think this should be configurable I also found that if pt had just i ndomain potcreate couldnt find the translations but as long as the i ndomain was just something the translation were found The languageLCMESSAGES directory seems to be also hardcoded What other frameworks Ive used I had no problems just using myapplocalelanguagepomo I hope this helps to improve i n docs and future codemodules and making i n more dynamically configurable Some issues may not be directly Pyramid related because I dont yet know whats belonging to what 