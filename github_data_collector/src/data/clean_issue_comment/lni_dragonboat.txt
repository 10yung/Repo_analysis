Universal compaction in RocksDB has been supported in Dragonboat it can help to reduce write amplification compared to the default leveled compaction The current support is marked experimental as more testing is required universal compaction options are not supported LevelDB support was added as a compromise to allow users to use dragonboat without manually installing any CC libraries how to install rocksdb was the most frequently asked question LevelDB support in dragonboat will be depreciated once the Pebble support has its experimental label removed These days when user tries to add a new raft node and avoid unnecessary downtime the first step is to add the new node as observer wait it to catch up and then promote it as a follower manually This whole process could be automated in Dragonboat The detailed motivation is described in Raft paper but the implementation takes a different approach In the paper leader is responsible for tracking the observer progress by monitoring the new entry replication speed and promote the observer when one replication round is less than election timeout which suggests the gap is sufficiently small This idea adds burden to leader logic complexity and overhead for leadership transfer Instead Dragonboat chooses a selfnomination approach through observer initiates readIndex call to make sure it is sufficiently catching up with the leader If we see consecutive rounds of readIndex success within election timeout the observer will trigger a config change to add itself as a follower on next round This is a decentralized design which saves the dependency on elected leader to decide the role thus easier to reason about A potential user mentioned in his email that he wants to use Raft Log as the state machine In such setup committed entries wont be pasted to any user state machine as the Raft Log is the state machine User applications can query the Raft Log to get what they want Did some preliminary reviews on the internalrsm package and other connecting components This PR only contains some refactoring and styling fixes Some notes are marked in code for further discussion Will also talk to lni for next steps Remove the GetHash method from examples they are confusing users see details in Dragonboat currently uses TCP based transport for exchanging Raft messages between NodeHost instances Such strictly ordered reliable transport is not actually required The existing TCP based transport is pretty straight forward it is implemented in a single go file with only a couple hundred lines of code It will be very interesting to experiment whether UDP can be somehow used to achieve better performance It might be done by using the UDP support in Gos stdlib or build on top of some rd party librariesprotocols eg quicgo without HTTP Note that Ive tried the UDP based kcpgo sadly I failed to get higher bandwidth or lower latency add examples to exampletestgo Add benchmark results for on disk SM 