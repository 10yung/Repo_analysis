Maybe Im missing something but is there a Santa setting to monitor for launches of processesapps that are unsigned adhocsigned improperly signed revoked or expired certificates etc thirdpartysigned invalidated due to modifications after codesigning and so on When reading this I thought that its a bit weird that my own app launch monitor a shell script I created in one afternoon would catch applications launching through this exploit but Santa would not A blockwhitelist option would actually be nice not only because of this Gatekeeper exploit or similar exploits not yet discovered but also because of applications not receiving a comapplequarantine XA depending on the download method cURL etc or archive extraction method Hello I ran into an issue with an app running in Lockdown mode where Santa wouldnt scan the bundle for binaries or it fails The app is Heres the file tree partial ApplicationsJdmAppapp Contents Frameworks jdmapp Helperapp Contents Infoplist MacOS jdmapp Helper PkgInfo CodeSignature CodeResources Helpers plugins G libusb G plugin gplugin gplugin libgccs dylib libstdc dylib vsnplugin vsnplugin Infoplist MacOS jdm jdmapp libgccs dylib libstdc dylib libusb dylib When the jdmapp is opened it gets blocked but doesnt calculate the bundle identifier img width altScreen Shot at PM src I doublechecked to see if Bundle Scanning is enabled and it is When I whitelisted jdmapp other binaries triggered and generated more Santa prompts Any help is appreciated Hello I am exploring the FCM feature in Santa I have a few questions As per Santa docs the fcmtoken should be pushed from the sync server As per my understanding the way FCM works is client generates the FCM token and sends it to the server which is then used by the server to send FCM messages I dont have firsthand experience with FCM so I might be incorrect If the fcmtoken has to be generated from the server can anyone point me to an API document for reference Thanks so much This is an enhancement request Do you think it would be possible to support pkg file with santactl fileinfo Currently this command can not parse signature of pkg file Therefore we have to use pkgutil checksignature command As explained in the design doc Santa makes no attempt to support blocking of shell scripts which is understandable in general But in the case of a user double clicking a app containing a shell script or a sh file directly from the finder it seems much more reasonable to allow for some way to block this action Perhaps you have already spent some time considering the feasibility of this but I would like to discuss how this could be achieved one thing that comes to mind is that if we had the ability to blacklist a process bash based on its parent process launchctl we might be able to block this vector of attack Clearly this wouldnt prevent a user opening terminal and running malware but we care more about preventing our nontechnical staff from being tricked into running simple malware Two existing methods on the driver interface exist just to expose stats cachecount cachebucketcount These could be unified and extended with a getstats method that returns a struct containing all the counters wed want to expose Some additional stats that would be nice to have cache hits cache misses EXEC counts WRITE counts etc In the same vein we have some methods for setting things that could be unified and replaced clearcache filemodprefixfilteradd filemodprefixfilterreset These could be replaced with a setoptions method that again takes a struct containing the new values Other options that could be added cache sizes cache load factors Hello I am trying to use Client certificate auth for Santa sync server I tried using the PKCS certificate on disk providing ClientAuthCertificateFile and ClientAuthCertificatePassword However when I try to sync it doesnt seem to work I tried using the ClientAuthCertificateCN field importing the same PKCS certificate in system keychain and it worked as expected when syncd manually The auto sync doesnt seem to work in this case Logs when using ClientAuthCertificateFile sudo santactl sync debug Server Trust OABC IncOUnullCNabccomSHA b f f d Server asked for client authentication but no usable client certificate found Failed to decode JSON response Error DomainNSCocoaErrorDomain Code JSON text did not start with array or object and option to allow fragments not set UserInfoNSDebugDescriptionJSON text did not start with array or object and option to allow fragments not set Preflight complete Event upload complete Failed to decode JSON response Error DomainNSCocoaErrorDomain Code JSON text did not start with array or object and option to allow fragments not set UserInfoNSDebugDescriptionJSON text did not start with array or object and option to allow fragments not set Rule download complete Failed to decode JSON response Error DomainNSCocoaErrorDomain Code JSON text did not start with array or object and option to allow fragments not set UserInfoNSDebugDescriptionJSON text did not start with array or object and option to allow fragments not set Postflight complete Sync completed successfully The JSON decode exception is due to the sync server returning a HTML response since the server didnt receive a client certificate Am I missing anything An overview of Santa A detailed guide on how to set it up UAKEL Rules A detailed guide on using a sync server The santad santactl privileged unprivileged dance The filemod prefix filter Check the rest of the docs for accuracy Proto has a canonical JSON encoding for proto messages though as far as I can tell this isnt supported by the ObjectiveC library at the moment It would be nice to use this instead of our handwritten JSON parser which while fuzzed and probably relatively bugfree now is a bit of a pain to maintain and its a lot of code It would also allow the proto file to serve as documentation of what fields are in each request and response and and how those fit together Unfortunately this will have to wait until after switching to Bazel for building as the alternative is a lot more work and for the ObjC API to support JSON encoding otherwise well have to use the C API which wouldnt be terrible but would involve a lot of conversions from NSString to stdstring