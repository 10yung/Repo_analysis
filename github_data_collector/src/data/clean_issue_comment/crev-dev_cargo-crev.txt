 I think it would be worth adding To me the noun verb grouping of commands is unhelpful On a first glance it seems like a logical thing to do but it has many problems in practice for many operations theres actually more than one thing involved so its unclear which noun is the special one For example if an operation requires querying repositories about crate information its entirely arbitrary whether thats crate info or repo query I cant develop intuition when to use cargo crev crate because it changes the meaning of crate depending on subcommand Sometimes its the current crate sometimes its some other crate sometimes its search for crates This seems wrong to me because crate verify verifies my crate in the current directory and given that Id expect other crate subcommands to be consistent and also apply to my crate in the current directory but they dont the choice of toplevel nouns is odd For example reviews are an essential object for crev but they werent given a noun in the UI Theres no cargo crev review create Instead of review delete theres crate unreview To me repositories are an implementation detail more like a transport mechanism So to me cargo crev repo is as weird as cargo crev http would be Because most crev features are backed by some repo somewhere the cargo crev repo subcommands perform lots of unrelated operations from editing my readme to searching other peoples reviews The commands are long to type Ive noticed you use an undocumented c v shortcut Poor users who read cargo crev help end up suffering the long versions There is no similarity between verbs The verbs dont apply equally to the nouns A noun verb design would make sense for a music player that allows song play and album play but crevs nouns arent interchangeable like that In crevs case these are mostly just unique twoword commands structoptclap doesnt think of them as nouns and verbs but as nested subcommands Because of that it doesnt display full commands and cargo crev help is useless Look at cargo itself It has cargo update not cargo index update It has cargo build not cargo crate build cargo publish not cargo package publish Flattening of options allows cargo help to display the most common and most useful options Hi After todays Reddit posts regarding the repeated treatment of UB in upstream dependencies I thought to give crev a shot and review the dependencies of our project Unfortunately I didnt get very far before I was too frustrated and gave up I took a few minutes to write down my user journey maybe you find this interesting I started out by landing in some random repo that was a clone of crevproofs and didnt quite understand where to start I had to click few times to find the actual crev repo which was not crev but cargocrev why doesnt the crevproofs README template explain that in sentences and link to crev proper prominently and then click the Getting Started link hidden in the middle of that page Getting the tool I wanted precompiled binaries on MacOS using brew in particular too lazy to manually download and copy a binary However self compiling worked alright cargo install cargocrev So how do I start cargo crev only printed a general help but didnt lead me to getting a successful firsttime user output why not print Run cargo crev to review this crate somewhere Maybe cargo crev crate review Something something Crate name argument Huh Oh maybe wrong command Time to check README Ah cargo crev crate verify alright Its doing something Wait the output looks nothing like advertised on web page No geiger no issues just weird flags status issues flgs crate version latestt none constanttimeeq none falliblestreamingiterator none pkgconfig none rustcdemangle It says use one or more showxyz options to print more details Uhm which one Is Geiger an option now since the README was written Trying cargo crev crate verify help suggested showgeiger Oookay lets try that cargo crev crate verify showgeiger error The argument showgeiger showgeiger requires a value but none was supplied Ah fuck it Im too busy anyway maybe another time Happened with cargocrev on macOS As mentioned in the beginning this is not really an issue more of a report I wanted to share Feel free to close Cargo uses vers xyz to specify crate versions for commands cargo crev uses name version pattern instead which wasnt obvious to me Ive also tried nameversion pattern used by npm but it showed a generic error message about crate not being found without indicating that its a wrong syntax I suggest supporting vers andor providing advice in case theres in the crate name So I just started playing with cargocrev today and just ran into two weird issues possibly related Ive been following the getting started doc and reviewed one of my small libs On running cargo crev repo publish I got a Repository not found error Turns out that running cargo crev id new url actually set the origin url to crevproofsgit which is incorrect On fixing that I then ran cargo crev repo publish I then got First rewinding head to replay your work on top of it which wiped out the the commit from crev id trust and the commit from the review On refetching dpccrevproofs retrusting and rereviewing I can publish successfully So something weird happened in the initial id creation Not quite sure what though System details cargocrev cargo install cargocrev Funtoo Linux git Basically the author of a work is often blind to the problems of a work If theres a bug that they put in there on accident theyre obviously not going to see it during review because theyd fix it if they did see it I know that the identities arent currently linked to anything so theres no for sure way to determine if the ID of a review is connected to the person who wrote the crate being reviewed but even a best effort system such as looking at the git URL of the ID and looking at the authors repository and homepage entries in the crates Cargotoml file would probably be helpful here Sometimes people give a negative review to a crate and we conciously would like to overwrite them Current example Me and other crev user reviewed smallvec and gave it a negative review because it was ridden with unsafe and had a history of unsoundness Then I submitted a fuzzer to smallvec and I think with a fuzzer we can have more confidence and this crate does not deserve a negative rating anymore At very least I dont want it to fail in my own crate verify output So Id like to overwrite the other persons which I still trust review in this case I could ask them to change their review but thats not the point I am thinking that a review could have an optional overruleoverwriteoverride section with a list of reviews of other other people that should be ignored for some reason because this review says they no longer apply were a mistake etc We could identify other reviews by by id of their author digest signature The id is the longest but is the easiest for the humans to understand and use so I think Ill stick with it For other users my override would only apply if they trust me more than then a person Im trying to override here more or equal maybe Should be fairly easy to implement though I could use some second opinion Calculate all the useful stuff for particular crate and display nicely ids all the metrics all the recursive metrics flags in a nice readable form number of reviews split into groups etc active issues alternatives dependencies reverse dependencies Format Possibly gather in a serde struct and serialize to yaml Good enough for humans good enough for robots Getting critical feedback about your code from random strangers from the Internet will naturally not always go well with emotions and egos of parties involved Sometimes the reviewer will be wrong about their judgment making them look unfair etc It would be good to establish an etiquette and set of standards to make everyone involved feel more comfortable 