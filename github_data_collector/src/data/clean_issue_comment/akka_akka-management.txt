 Pull Request Checklist X Have you read through the contributor guidelines CONTRIBUTINGmd X Have you signed the Lightbend CLA X Have you updated the documentation Purpose Fix the API link in Readme thanks johanandren for pointing me in the right direction Purpose Add a new discovery method for Akka in ECS Fargate using TaskSets Changes Add awsapiecstasksetasync Update aws docs Tested on our own instances using AWS CodeDeploy Background Context ECS can be used together with AWS CodeDeploy to support bluegreen deployments These new nodes are spawned in the same servicegroup Therefore we need a new approach to make sure nodes only form a cluster with only newly spawned nodes Otherwise the new nodes will join the existing AkkaCluster forming large cluster instead of smaller ones Purpose Extends the awsecsasync discovery method to also be able to filter nodes based on tags Changes Adds new tags configuration key Filter based on tags configuration Background Context Be able to only form a cluster with specific tasks using certain tags info should form a cluster FAILED seconds milliseconds info The code passed to eventually never returned normally Attempted times over seconds Last failure message ListUp Joining Joining did not equal ListUp Up Up LocalBootstrapTestscala info orgscalatestexceptionsTestFailedDueToTimeoutException info at orgscalatestconcurrentEventuallyclasstryTryAgain Eventuallyscala info at orgscalatestconcurrentEventuallyclasseventuallyEventuallyscala info at akkamanagementLocalBootstrapTesteventuallyLocalBootstrapTestscala info at akkamanagementLocalBootstrapTestanonfun anonfunapplymcVsp applymcVspLocalBootstrapTestscala info at akkamanagementLocalBootstrapTestanonfun anonfunapplymcVsp applyLocalBootstrapTestscala info at akkamanagementLocalBootstrapTestanonfun anonfunapplymcVsp applyLocalBootstrapTestscala None I am using the pod label selection mechanism It assumes that every pod in the cluster has the same label selector However this is not always the case such as during an upgrade that changes the label selector As a result the cluster can get into a weird state and fail in different ways I expect the discovery algorithm to be Given pod label selector X Select all pods P that match X Exclude any pod p in P whose label selector is not X is missing in the current discovery implementation This means we could inadvertently include pods that have their own idea of what a cluster looks like leading to an illdefined state An example of this is Create a pod with a broken label selector it fails to bootstrap as it cant select itself Fix the label selector and apply the new Deployment Observe that the new pod cannot form a cluster because it considers the broken pod part of its cluster despite having a different label selector When installing Kubernetes you can configure your DNS server with pods disabled to disabled producing DNS records for individual pods Currently our kubernetesapi discovery mechanism requires pod DNS entries to be enabled which is the default setting It looks like we could support the other setting as well though There is a workinprogress PR that adds this but it is unfinished and closed due to lack of interest If you need this feature do get in touch Since people prefer looking at code examples rather than reading bullet lists Do we need a minor release for that Seems surprising to do it in a patch release The akkaakkateam dont have any experience or test environments for the Consul Matathon and AWS discovery mechanisms Wed like to invite new maintainers to assist with these Original contributors users that have contributed Consul mlosiewiczpl Marathon ygree longshorej ECS dhpiggott EC tag based sebastianharko StephenKing Would any of you be interested in becoming maintainers to help with reviewing testing merging PRs related to these areas This would also be open to people who have not contributed but use them and can test they work in their environment 