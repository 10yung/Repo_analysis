Hey I am new to angular and especially ngrx but I have built a working example with different components using ngrxstore counter and chat I understood so far the application state is cut into different pieces of states I have a state defined for the counter and a state for the chat both together is the application state In my components I select the corresponding properties and everything works fine My Question is What exactly is a slice Is it a selected part of properties of a state or is it an emitted update of a selected state Hope somebody can explain it Greetings Lukas Scheerer Ive been trying to work out a preferred solution for me when dealing with reducers I wanted to have type safety so that I dont need to guess what the payload of an action is This is the result which I currently use in my project and I think it would be valuable for many other developers Also I think switch is the worst language construct that ever existed right after goto and I believe we should try to reduce the amount of developers who need to use it Its error prone unsafe and a complete syntax mess This is an example of how to use switchReduce in conjunction with TypedActionT which Ive also added to the READMEmd What do you think javascript import ActionReducer TypedAction switchReduce from ngrxstore export class AddAction implements TypedActionnumber readonly type ADD constructorpublic readonly payload number export class SubtractAction implements TypedActionnumber readonly type SUBTRACT constructorpublic readonly payload number export class ResetAction implements TypedActionany readonly type RESET readonly payload any constructor export const counterReducer ActionReducernumber state number action TypedActionany switchReducestate action byClassAddAction num number return state num byClassSubtractAction num number return state num byClassResetAction return reduce This is not an actual PR more like proposal for consideration Typesafe maniac like would be really grateful for strictly typed Action TS v introduces defaults for generic types so ActionT any means Action is generic but it will be any if type not provided What do you think TS proposal here Proposed feature Provide option to send extra data through optional meta field Why In many situation I need to pass extra data to be consumed by different Effects One example would be for an Alert reducer enabling us to pass successfail messages from any action Example flux dispatch LOGIN action with payload and meta successMessage Welcome LOGIN effect passes meta to LOGINSUCCESS action after its own logic ALERT reducer listening to LOGINSUCCESS changes its state return actionmetasuccessMessage several warnings about missing semicolon or whitespace was reported by tslint The first time to probe for an initial state if you did not provide one the second time when Store is instantiated ngc does not support function call now It will be good to support passing a function parameter to provideStore Current situation During design of your state tree you typically divide it up into different sections Fe javascript ui uiReducer data dataReducer NGRXStore provides the combineReducers method to easily work with such structures Problem description If you want to work with multiple levels of nesting in your state tree you need to do something else Fe javascript ui login main data In that case youd could Write a uiReducer yourself which delegates every action related to login to a loginReducer and every main related action to the mainReducer Use a utility such as which handles this for you Nest the combineReducers method like this javascript const rootReducer ui combineReducers login loginReducer main mainReducer data dataReducer Improvement description Option provides you with extra work and option forces you to work with a third party library I personally prefer option where you nest the combineReducers method inside your tree This could actually be easily integrated into the current combineReducers method and make the following possible javascript rootReducer ui login loginReducer main mainReducer data dataReducer new StorerootReducer Its a lot cleaner than approach where you nest the combineReducers method yourself This implemented by making the combineReducers function a recursive one Happy to hear any feedback on the feature requestimplementation I also created test for this functionality If you feel these are insufficient or not in the correct placefile Im happy to change this as per your instructions 