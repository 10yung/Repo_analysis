Solution bump dependency versions and update module imports based on compiler errors There hasnt been any activity for the last half year and documentation is still very sparse Is this already dead Looked like a useful software Queue operation doc pages are missing their input output sections A quick update to this will make it easier to understand their usage Running cargo bench acker in the pumpkindbengine crate nightly last known good nightly test scripttestsackermann bench nsiter test scripttestsackermannstack bench nsiter Most likely first offender nightly test scripttestsackermann bench nsiter test scripttestsackermannstack bench nsiter Random builds test scripttestsackermann bench nsiter test scripttestsackermannstack bench nsiter test scripttestsackermann bench nsiter test scripttestsackermannstack bench nsiter test scripttestsackermann bench nsiter test scripttestsackermannstack bench nsiter test scripttestsackermann bench nsiter test scripttestsackermannstack bench nsiter Last build test scripttestsackermann bench nsiter test scripttestsackermannstack bench nsiter Proposed solution figure out what happened in the first place why did it get so much slower Currently builtins uses lazystatic to prepare BUILTINS map of instructions This means that until handlebuiltins is first called nothing is going to get parsed So if theres for example a parsing mistake the whole engine will crash Proposed solution find a way to parse builtins during compile time For most enduser cases PumpkinDB is too close to the metal to be easily plugged into a business application especially if event sourcing type of scenarios are considered Proposed solution implement a higher level database on top of PumpkinDB Currently all builtin instruction files currently using builtins extension with instruction implementation pairs handle these as rough equivalents of DEF This works most of the time except that in some cases it would be preferable to avoid recomputing values that are static in nature Proposed solution find a way to have a notation for a semantic equivalent of SET and implement it For example they would use different prefixes for constant instructions private instructions namespaces etc Proposed solution develop a standard convention proposal Currently lmdb is very entangled with PumpkinDBs code Should we want to add another backend existing or a new one we develop for PumpkinDB it will require some serious modifications When adding a constant to a builtins see builtins and handlebuiltins macros file like this FIXATTRLEN When trying to use it get the following error PumpkinDB FIXATTRLEN Error Unknown instruction x x However using binary syntax works fine FIXATTRLEN x works as expected PumpkinDB FIXATTRLEN x 