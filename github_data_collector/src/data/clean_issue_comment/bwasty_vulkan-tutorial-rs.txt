 As noted in the README there are some Validation Layer issues with this but I dont have any solutions This issue describes the same thing at the end Essentially when blitting and the destination and source are the same the image layout is properly transitioned I was experimenting with UnsafeCommandBufferBuilder and manually creating the memory barriers and image transitions but ran into a lot of issues because I also then needed to manually synchronize and submit everything bypassing all of the nice abstractions that Vulkano has provided and I didnt include any of that It didnt seem worth it as its not the point of Vulkano and if Im going to be rewritingimplementing some of these core building blocks Id rather just spend the time working on Vulkano itself itself and get it to a point where we can idiomatically handle cases like this I linked to Ash and their version of this tutorial so users can see what a more direct translation of this would look like in Rust Let me know any feedback on this whether you think we should figure out our own abstraction on the lower level building blocks etc etc And as with the other PRs I havent tested on mac yet Im planning on getting the last section multisampling in and then giving it a full test sweep on Windows and Mac and maybe a few linux flavors if Im motivated I started running everything through Clippy and only some internal macro stuff is getting tagged this is the second half of the uniform buffer section with descriptor pools and sets