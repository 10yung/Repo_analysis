I cannot see any release in although the artifacts are released When building tests for catsTests for Scala with Ywarnunused I get a following lint warning warn tmpbettermonadicforcatstestssrctestscalacomolegpybm CatsSyntaxTestscala local val in value anonfun is never used warn dummypure F warn A minimal example for this looks like this scala def f F Monad for dummypure F a yield a Additionally under the same conditions this code scala import catsMonad import catsimplicits object Foo def foo F Monad F Unit for pure F a b printlnsa b yield also produces warnings warn tmpbettermonadicforcatstestssrctestscalacomolegpybm Fooscala local val in value anonfun is never used warn a b warn warn tmpbettermonadicforcatstestssrctestscalacomolegpybm Fooscala local val in value anonfun is never used warn printlnsa b warn These two seem to be introduced in eba bb This code scala val x for n Some if n yield n triggers the unused parameter lint Error parameter value n in value anonfun is never used n Some The following causes some noise during migration to this plugin scala import catsimplicits case class Fooa Long for Fooa Eitherright String Foo Foo b EitherrightFoo Fooc b yield a c yields scala for Fooa Eitherright String Foo Foo b EitherrightFoo Fooc b yield a c console warning wartremoverNonUnitStatements Statements must return Unit for Fooa Eitherright String Foo Foo b EitherrightFoo Fooc b yield a c res scalautilEither StringLong Right Walking through the tree I cant even see where this error is coming from By spacing out the above code I can narrow it down to console warning wartremoverNonUnitStatements Statements must return Unit Fooc b Any pointers or insight would be appreciated This is already excellent just looking to learn The simplified tree from the SBT console is object iw extends scalaAnyRef def init superinit val res Eitherright String Foo Foo withFiltercheckifrefutable checkifrefutable scalaunchecked match case Fooa true case false flatMapx x scalaunchecked match case Fooa EitherrightFoo mapb synthetic artifact private this val x b scalaunchecked match case x Fooc scalaTuple x c val x x val c x scalaTuple b x mapx x scalaunchecked match case scalaTuple b Fooc aplusc 