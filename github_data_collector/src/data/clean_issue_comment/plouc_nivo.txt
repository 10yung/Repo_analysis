 With point scales and data of different series lengths points are not sorted correctly To reproduce run with the following data json id A data data axis a data axis c id B data data axis b data axis c data axis d data axis e Id expect that the pointScaleExpectation would still be a b c d e Will file a PR Network component seem to be poorly documented on how to use with Layers as well as interactivity My immediate desire is to be able to show some information about a node on hover or always such as a label I cant seem to find anything about this anywhere and it seems to be a very common use case for this type of data visualization There isnt much to learn from an unlabeled graph Ideally the API would allow for rendering any arbitrary component as a node which would take the place of supplying nodeColor nodeBorderWidth nodeBorderColor and allow for more flexibility For example jsx harmony const CustomNodesNetwork data const renderNode node svg width height version xmlns g rect x y width height fillnodecolor text x y fillblack nodelabel text g svg return ResponsiveNetwork height nodesdatanodes linksdatalinks renderNodet renderNodet linkThicknesst tsourcedepth Alternatively a default labelhover behavior could easily render some text under certain conditions jsx harmony ResponsiveNetwork nodeLabelt tlabel labelVisibilityvisible boolean string Thanks for your hard work on this excellent library and sorry if this the library already has this capability and Im just dumb First time using anything D js related Is your feature request related to a problem Please describe I would like to wrap treemap labels and dynamically determine line length based on tile widthheight I saw that in people suggested ways to wrap axis label text and that there are properties like opacity textAnchor textBaseline textX textY theme value x y that are exposed through the renderTick api Is there a way the treemap api can also expose these values I am also hoping that the treemap api can expose the width and height of a tile By digging into d hierarchy for a bit seems like width and height of a specific node is attainable through nodeSize Anyway nivos treemap api can somehow make the nodeSize accessible Describe the solution youd like It would be nice if the nivo treemap api can expose tile size and tile labels textAnchor textBaseline textX textY x y properties Describe alternatives youve considered For now I am just truncating the treemap labels see code snippet below labeld tspan truncateTextdid tspan function truncateTexttext const truncatedText textslice return textlength truncateTextlength truncatedText text But it would be nicer if I can wrap treemap label text instead Thanks for considering Describeexplain the bug This is on the latest chrome browser Not having a plot of in the data set for the y axis causes the markers to shift and not scale Int he example the now would render below the x axis which has caused the fill to draw down to that point rather than stopping at the x axis render code import React from react import ResponsiveLine from nivoline a react function that returns ResponsiveLine chartProps datadata curvesmooth natural linear lineWidth enableAreaarea areaOpacity datatestidlineChartResponsiveLine Data structure being passed const chartProps top right bottom left labelTextColor borderWidth enableDotstrueenableDotLabeltruedotSize dotColor dotBorderWidth themelabelstextfontSize legendstextfontSize axislegendtextfontSize fill tickslinefillCCCtextfontSize fill gridlinestroke strokeWidth enableGridXtrueenableGridYtruelabelSkipWidth yScaletypelinearminautomaxautomarkers axisyvalue lineStylestroke strokeWidth axisBottomorientbottomtickRotation tickSize tickPadding legendDateTime Hour of DaylegendOffset legendPositionmiddleaxisLeftorientlefttickSize tickPadding tickRotation legends colorsschemepairedanimatefalseisInteractivetruemotionStiffness motionDamping const data idDateTime Hour of Daydata x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName x y origClassName Legend prop type is missing in Choropleth thus the builds are failing please add the types Just a question really Im using a BarChart with patterns Unfortunately when overriding the BarComponent the computed pattern eg urllines is not accessible inside the BarComponent Would it be possible to pass the matched fill to the BarComponent Or is there another way to access it from within the BarComponent Heres a codesandbox where Im experimenting with defs and custom bar components Thank you Migrate the whole code base to TypeScript Infrastructure x update rollup config to support TS update rollup config to generate minified code terser make storybook using TS update TS example to CRA Remove nivo custom babel config to use babelenv only Get rid of circular dependencies between packages Packages Core packages annotations x axes x colors x core generators x legends x tooltip Charts bar bullet bump calendar chord circlepacking geo heatmap line network parallelcoordinates pie x radar sankey scales scatterplot stream sunburst swarmplot treemap voronoi waffle