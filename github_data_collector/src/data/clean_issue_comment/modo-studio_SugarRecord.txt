A pull request from a fork that does work on Swift and Xcode x Anyone can use it with pod SugarRecord git What Well I want to update an record which is already inserted Context Im saving records in the database For example I saved data in db at PM and now I sync app at PM and want to update the same records but It do Insert of new record I tried finding the update function but no success What Terminating app due to uncaught exception NSInvalidArgumentException reason An instance of NSFetchedResultsController requires a fetch request with sort descriptors Context swift let request FetchRequestDataObject FetchRequestDataObject selfobservable dbobservablerequest request pedometerDataObservableobserve changes in switch changes case initiallet objects print objectscount objects in the database case updatelet deletions let insertions let modifications print deletionscount deleted insertionscount inserted modificationscount modified case errorlet error printSomething went wrong errorlocalizedDescription Hello guys What According to best practices it is better to do Coredata related operations in the background not to cause any possible performance drops or UI blocks I feel like you are doing some database access in the main thread Context Class CoreDataObservable functionobserve and ClassCoreDataDefaultStorageTests functionspec both calling fetch which is doing database operations Proposal Dont you think it would be better to take these operations off the main thread What Describe here your issue a bug you found an idea that you had something that you think can be improved Context Provide information that helps with understanding your issue For example your use case that the project doesnt cover what you were doing when you found the bug You can also provide the version of the library that you were using how you integrated it with your project the platform version Proposal Attach your own proposal if you have it Well discuss in on the issue to find the best one that fits into the library What After updating to Xcode E and Swift an iOS project that depends on SugarRecord fails to build Carthage reports a compile error in CoreDataObservableswift unknown error unable to execute command Segmentation fault usrbinxcrun xcodebuild workspace UsersgoleinikWorkspacesiOSCarthageCheckoutsSugarRecordSugarRecordxcworkspace scheme iOSCoreData configuration Debug derivedDataPath UsersgoleinikWorkspacesiOSCarthageBuildDerivedData E SugarRecorddb b b a ce d c bb fc sdk iphonesimulator destination platformiOS Simulatorid AFE D C C A BD FDB F A destinationtimeout ONLYACTIVEARCHNO CODESIGNINGREQUIREDNO CODESIGNIDENTITY CARTHAGEYES build launched in UsersgoleinikWorkspacesiOSCarthageCheckoutsSugarRecord Context Sugar Record Release Carthage Version OSX Xcode E Swift Base SDK iOS What Support for third part frameworks like Core functionalities etc Context CoreDataGenerated entity files is not visible for apps working with frameworks using SugarRecord as dependency What Running pod install on the Example project fails Context I downloaded the SugarRecord project as a zip and tried to run pod install in the Example project It fails with the following error Could not find proper version of cocoapods rc in any of the sources My installed CocoaPods version is v Short description Adds a method ContextcountT and implement it in the NSManagedObjectContext extension Solution Counting number of results without getting the objects is a useful functionality specially when the objects are heavyweight to fetch simply to be counted and then discarded Implementation Add new protocol method ContextcountT Entity throws Int Implement this protocol on existing extension of NSManagedObjectContext with other protocol requirements GIF CoreData with brand new count method that gives two UserEntity instances What when I update the entity first it works but it failed when I update it again with different data Context Here is my code I called flowed function first and it worked when I restart my app static func storeAuth grantTypeString clientIdInt clientSecretString Bool let auth selfgetUserAuth if auth nil do try AppUserdboperation context save throws in let authUserAuth try contextnew authgrantType grantType authclientId clientId authclientSecret clientSecret try contextinsertauth save return true catch debugPrinterrorlocalizedDescription return false else do try AppUserdboperation context save throws in authgrantType grantType authclientId clientId authclientSecret clientSecret save return true catch debugPrinterrorlocalizedDescription return false and I call this function to update it again but when I restart my app the updated data was not stored the data was that updated before static func updateAuthTokenexpiresInInt refreshTokenString tokenTypeString accessTokenString let auth selfgetUserAuth if auth nil do try AppUserdboperation context save throws in authtokenExpiredAt NSDateaddingSecondsexpiresIn as NSDate authrefreshToken refreshToken authtokenType tokenType authaccessToken accessToken save catch debugPrinterrorlocalizedDescription 