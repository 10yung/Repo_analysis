Hi I have created a card for your framework here You can change any information there The IMGUI plugin demo fails the compilation on Windows AMD VS The error is Building CXX object depsimguibuildCMakeFilesbsfImguidirSrcBsImguiDemocppobj BsImguiDemocpp deps imguisrc Src BsImguih error C bsctImguiRendererExtensioncheck overriding virtual function return type differs and is not covariant from bsRendererExtensioncheck Source Foundation bsfCore Renderer BsRendererExtensionh note see declaration of bsRendererExtensioncheck deps imguisrc Src BsImguih error C bsctImguiRendererExtensionrender method with override specifier override did not override any base class methods I have not checked whether this fails compilation on any other platforms Memory is allocated but never freed WARNING WARNING Validation Code UNASSIGNEDCoreValidationShaderOutputNotConsumed Object x Type fragment shader writes to output location with no matching attachment in unsigned int cdecl bsctdebugMsgCallbackunsigned intenum VkDebugReportObjectTypeEXTunsigned int unsigned int intconst char const char void C dev bsf Source Plugins bsfVulkanRenderAPI BsVulkanRenderAPIcpp FATAL A fatal error occurred and the program has to terminate Error RenderingAPIException Description ERROR Validation Code UNASSIGNEDCoreValidationDrawStateInvalidQuery Object x d Type vkGetQueryPoolResults on VkQueryPool x d and query query may return no data In function unsigned int cdecl bsctdebugMsgCallbackunsigned intenum VkDebugReportObjectTypeEXTunsigned int unsigned int intconst char const char void In file C dev bsf Source Plugins bsfVulkanRenderAPI BsVulkanRenderAPIcpp Stack trace bsCrashHandlerreportCrash x File BsWin CrashHandlercpp Module bsfdll bsctdebugMsgCallback x File BsVulkanRenderAPIcpp Module bsfVulkanRenderAPIdll debuglogmsg x File vklayerloggingh Module VkLayerkhronosvalidationdll logmsg x File vklayerloggingh Module VkLayerkhronosvalidationdll CoreChecksPreCallValidateGetQueryPoolResults x File corevalidationcpp Module VkLayerkhronosvalidationdll vulkanlayerchassisGetQueryPoolResults x File chassiscpp Module VkLayerkhronosvalidationdll x Module vulkan dll bsctVulkanQuerygetResult x File BsVulkanQueryManagercpp Module bsfVulkanRenderAPIdll bsctVulkanTimerQueryisReady x File BsVulkanTimerQuerycpp Module bsfVulkanRenderAPIdll bsctQueryManagerupdate x File BsQueryManagercpp Module bsfdll stdInvokerpmfpointerCallvoid cdecl bsctQueryManagervoidbsctQueryManager x File typetraits Module bsfdll stdinvokevoid cdecl bsctQueryManager voidbsctQueryManager x File typetraits Module bsfdll stdInvokerretstdUnforced Callvoid cdecl bsctQueryManager voidbsctQueryManager x File typetraits Module bsfdll stdCallbinderstdUnforced void cdecl bsctQueryManagervoidstdtuplebsctQueryManager stdtuple x File functional Module bsfdll stdBinderstdUnforcedvoid cdecl bsctQueryManagervoidbsctQueryManager operator x File functional Module bsfdll stdInvokerfunctorCallstdBinderstdUnforcedvoid cdecl bsctQueryManagervoidbsctQueryManager x File typetraits Module bsfdll stdinvokestdBinderstdUnforcedvoid cdecl bsctQueryManagervoidbsctQueryManager x File typetraits Module bsfdll stdInvokerretvoid CallstdBinderstdUnforcedvoid cdecl bsctQueryManagervoidbsctQueryManager x File typetraits Module bsfdll stdFuncimplnoallocstdBinderstdUnforcedvoid cdecl bsctQueryManagervoidbsctQueryManager voidDocall x File functional Module bsfdll stdFuncclassvoidoperator x File functional Module bsfdll bsCommandQueueBaseplaybackWithNotify x File BsCommandQueuecpp Module bsfdll bsCoreThreadrunCoreThread x File BsCoreThreadcpp Module bsfdll stdInvokerpmfpointerCallvoid cdecl bsCoreThreadvoidbsCoreThread x File typetraits Module bsfdll stdinvokevoid cdecl bsCoreThread voidbsCoreThread x File typetraits Module bsfdll stdInvokerretstdUnforced Callvoid cdecl bsCoreThread voidbsCoreThread x File typetraits Module bsfdll stdCallbinderstdUnforced void cdecl bsCoreThreadvoidstdtuplebsCoreThread stdtuple x File functional Module bsfdll stdBinderstdUnforcedvoid cdecl bsCoreThreadvoidbsCoreThread operator x File functional Module bsfdll stdInvokerfunctorCallstdBinderstdUnforcedvoid cdecl bsCoreThreadvoidbsCoreThread x File typetraits Module bsfdll stdinvokestdBinderstdUnforcedvoid cdecl bsCoreThreadvoidbsCoreThread x File typetraits Module bsfdll stdInvokerretvoid CallstdBinderstdUnforcedvoid cdecl bsCoreThreadvoidbsCoreThread x File typetraits Module bsfdll stdFuncimplnoallocstdBinderstdUnforcedvoid cdecl bsCoreThreadvoidbsCoreThread voidDocall x File functional Module bsfdll stdFuncclassvoidoperator x File functional Module bsfdll bsPooledThreadrunFunctionHelper x File BsThreadPoolcpp Module bsfdll bsPooledThreadrun x File BsThreadPoolcpp Module bsfdll stdInvokerpmfpointerCallvoid cdecl bsPooledThreadvoidbsPooledThread x File typetraits Module bsfdll stdinvokevoid cdecl bsPooledThread voidbsPooledThread x File typetraits Module bsfdll stdInvokerretstdUnforced Callvoid cdecl bsPooledThread voidbsPooledThread x File typetraits Module bsfdll stdCallbinderstdUnforced void cdecl bsPooledThreadvoidstdtuplebsPooledThread stdtuple x File functional Module bsfdll stdBinderstdUnforcedvoid cdecl bsPooledThreadvoidbsPooledThread operator x File functional Module bsfdll stdInvokerfunctorCallstdBinderstdUnforcedvoid cdecl bsPooledThreadvoidbsPooledThread x File typetraits Module bsfdll stdinvokestdBinderstdUnforcedvoid cdecl bsPooledThreadvoidbsPooledThread x File typetraits Module bsfdll stdthreadInvokestdtuplestdBinderstdUnforcedvoid cdecl bsPooledThreadvoidbsPooledThread x File thread Module bsfdll x Module ucrtbaseddll x Module KERNEL DLL x Module ntdlldll Id like to have an option on the bsCamera to automatically set the aspect ratio based on where it is rendering Ogre had an option to enable auto aspect ratio but bsf doesnt seem to have it the samples also manually set the aspect ratio This requires extra work when the game window is resized which Id like for bsf to handle automatically Is there a way to enable GLVERTEXPROGRAMPOINTSIZE within the opengl renderer Ive encountered this problem when working on the VertexDataDecl PR when the VertexDataDecl was used in some places that caused the serialized structure layout to change in GpuProgramBytecode I can force it to work by reverting a few changes around there but I think that this problem can make any future changes to serialized shader asset layout quite painful Below is the analysis of the issue The import tool cannot be started if the compiled shader assets are missing Even if we want to create compiled shader assets smile This is caused by the following reduced chain of calls Running bsfImportTool on IrradianceComputeSHbsl executes ApplicationstartUp which calls RenderBeastinitializeCore which calls RenderBeastIBLUtilityfilterCubemapForIrradiance which requires that BuiltinResourcesgetShader returned a proper shader for IrradianceComputeSHbsl and that requires the asset to already exist This looks very much like a bootstrap problem encountered when a compiler is written in a language its meant to compile This is mostly a proposal and a call for help from D D and Vulkan gurus out there What is missing Vulkan support D D support Optional writtenareawithintarget checks I currently help out at REGoth a game engine reimplementation which uses bsf Recently a Manjaro user reported that he gets segmentation faults when he compiles and runs this engine Today I set up a virtual machine with Manjaro all updates applied and using Linux and installed REGoth and was able to reproduce these segmentation faults Here is the logfile together with a backtrace from gdb The backtrace shows that the segmentation fault seems to origin from some bsf code and I hereby wanted to report this issue in the hope to get this resolved If you need more information to debug this please let me know Publication notes Ive got proland working locally linux opengl needs to be translated to bsl shaders Screenshot from somewhat relevant to the official terrain issue 