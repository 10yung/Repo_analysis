In rails we get the following deprecation warning DEPRECATION WARNING Class level methods will no longer inherit scoping from create in Rails To continue using the scoped relation pass it into the block directly To instead access the full set of models as Rails will use model nameunscoped called from actsaslistlist at pathtoactsaslistlibactsaslistactiverecordactslistrb when we call findorcreateby on a model with actsaslist To get rid of this deprecation warning we need to use the full unscoped method instead of the restricted unscopeselect where No other tests seem to break with this change so I assume fully unscoping isnt going to cause any problems elsewhere in how actsaslist works In the first commit Ive also tweaked the Gemfile and Appraisals files to work out of the box now that rails is available and it doesnt work with sqlite Given the following index Postgres ruby addindex propertiesimages propertyid position unique true sequential updates will not be used and reordering always fail unless explicitly specified ruby actsaslist scope property sequentialupdates true One way to fix this would be to scan all indexes of the target table in SequentialUpdatesMethodDefiner and see if any of them include position Another way is just to mention this in the docs Opening a conversation first Make sure to read first Im using Rails with gem actsaslist Ive also tried lower versions and can not seem to get actsaslist working Below is an example trying to grab the last image to later perform a positional change irbmain sp StoragePropertyfirst StorageProperty Load ms SELECT storageproperties FROM storageproperties ORDER BY storagepropertiesid ASC LIMIT LIMIT StorageProperty id name ABC Storage createdat updatedat stripeid cusFbuU fMjwIR Sj cardbrand MasterCard cardlast cardexpmonth cardexpyear email infoabcstoragecom onboardingcompletedat status active streetaddress nil secondaryaddress nil cityname nil province nil postal nil country nil phonenumber nil cardtoken nil planid nil irbmain spimageslast Traceback most recent call last from irb from appmodelsimagerb in main from appmodelsimagerb in classImage NoMethodError undefined method actsaslist for Class x ff b ea Models class StorageProperty ApplicationRecord hasmany images orderposition asc dependent destroy acceptsnestedattributesfor images end class Image ApplicationRecord belongsto storageproperty actsaslist scope storageproperty hasoneattached file delegatemissingto file validates file presence true scope positioned orderposition asc end As title describe old implement cased bugs in STI use case I have a client which has many addresses and each address I use actsaslist scoped by the client My clientid in the addresses table has an index attached to it which broke my tests actsaslist scope client Now when I add the first address it gets position and the second gets position If I remove the index on clientid then it works as expected The first address gets position and the second address I add to the client gets position The only thing I changed was removing the index on clientid closes Resolves I have noticed that under some peculiar situations it is possible to end up with a list that contains duplicate positions in actsatlist The duplicate positions cause unexpected behaviors to actsaslist and sometimes leads to errors Would it be OK if I created a PR with a function that fixes lists that contain duplicate positions It could be done by arbitrarily choosing an order for the items with duplicated positions there is no way of knowing which should come first with respect to one another and moving other items out of the way Related to The description says that codeaddnewat nilcode will result in new items not being added to the list on create ie position will be kept nil after create but it not says that subsequent scope changes will not change its position What should be the correct behavior Some context I have a scope codeactsaslist scope distributioncenter state preparationqueue code and Im having trouble adding elements to this list I noticed that when a record satisfy this scope but already have a position value lower then the bottom element it duplicates the correspondent value on the list before sending the element to bottom So I just put all positions to null when its not on the list and the one case that is missing is when a new element is created