Reproduce Step String str JSONObject object new JSONObjectstr Output javalangOutOfMemoryError Java heap space at javautilArrayscopyOfArraysjava at javalangAbstractStringBuilderensureCapacityInternalAbstractStringBuilderjava at javalangAbstractStringBuilderappendAbstractStringBuilderjava at javalangStringBufferappendStringBufferjava at javaioStringWriterwriteStringWriterjava at orgjsonJSONObjectwriteJSONObjectjava at orgjsonJSONObjecttoStringJSONObjectjava at orgjsonJSONObjecttoStringJSONObjectjava at orgjsonJSONObjectinitJSONObjectjava at orgjsonJSONTokenernextValueJSONTokenerjava at orgjsonJSONObjectinitJSONObjectjava at orgjsonJSONTokenernextValueJSONTokenerjava at orgjsonJSONObjectinitJSONObjectjava at orgjsonJSONTokenernextValueJSONTokenerjava at orgjsonJSONObjectinitJSONObjectjava at orgjsonJSONTokenernextValueJSONTokenerjava at orgjsonJSONObjectinitJSONObjectjava at orgjsonJSONObjectinitJSONObjectjava Cause The main cause of this problem is JSONJava allows the key of JSON text to be JSONObjectStandard JSON key should be String but JSON parser allows nonJSON forms During the deserialization process the quote method is called to wrap the key value with quotation marks When the key is a nested JSONObject the and in the inner layer need to be escaped the space occupied by the key value is exponentially increased resulting in an OOM exception at last it output toString quote So I come up with two way to solve this problem Option Under normal circumstances a key should not be a nested JSONObject so I think there is no need to parse nested key and directly parse the outer layer key into a String like this Option we could limit the length of a json String or the length of a key stleary johnjaylward Looking forward your suggestions Hi Team The below sample works fine studentnameNeeraj Mishranameage agestudent studentage nameNeeraj Mishra The below item is not working attributes is shown as separate tag here studentage namecontentNeeraj Mishratypeemployee studentnameNeeraj Mishratypeemployeetypenameage agestudent Expected output studentname typeemployeeNeeraj Mishranameage agestudent Thanks Hello Great lib thank you very much But for me one useful method is absent It is useful for situations where nested JSON can be a either JSONObject or JSONArray so you should add everywhere these boring checks Should I add a pull request public ListJSONObject getAsListJSONObject o final String key ListJSONObject result new ArrayList if ohaskey Object t ogetkey if t instanceof JSONArray for int i i JSONArray tlength i resultaddJSONArray tgetJSONObjecti if t instanceof JSONObject resultaddJSONObject t return result Generate the javadoc from the latest sources and also link the to JDK javadocs The command used to generate the javadoc is the following javadoc d link java What problem does this code solve See issue use BigDecimal for underlying storage of decimal number types Risks Medium Changes to the API No but it changes how certain API calls work for decimalfloatingpoint types work for example a JSON document list this json float would parse like this java JSONObject jo new JSONObject float jogetfloat used to return a Double now returns a BigDecimal jogetDoublefloat still returns the valueobject as in the old version Double In general the raw getopt methods with no type information like getDouble getInt optDouble etc are not guaranteed to be useful as the backing types were never guaranteed However people may be using them without the knowledge that the backing types are semidynamic ie number types have always been backed differently if an Integer was parsed vs a float So even a standard document like this json items floatValue floatValue Would have a Double stored for the first floatValue and an Integer for the second floatValue before the change After the change they would be stored as BigDecimal and Integer respectively Will this require a new release Yes Should the documentation be updated Yes we should probably mention that the backing type has changed and how that may affect existing code Does it break the unit tests Yes many of the tests depend on the data type stored for numbers The tests have been updated to reflect the new backing type See the updated tests here Was any code refactored in this commit Yes changes were made to the number parsing methods for XML and JSONObject they need to be kept in sync for Android support Review status NOT REVIEWED