Fixes by not using ModuleManifest explicitly anymore Fixes by not loosing the value of the prefix Address because was so darn close The buildpsd is optional I dont think this will break anything but Id like some reassurance If theres any doubt Ill do a alpha and we can beg people to test it Regardless even if nobody finds any bugs Im willing to bump major because of the buildpsd change if yall think its necessary I have this buildpsd file powershell ModuleManifest ModuleNamepsd CopyDirectories Formats Lib Target CleanBuild Prefix Prefixps Suffix Suffixps When I run BuildModule buildpsd the contents of the prefix file are not copied in to the resulting psm file but the suffix is included I verified that this works if I load the v module Hi Jaykul The module creates the PSM as UTF no BOM in PS but as UTF with BOM in WinPS Could we update the code here So we can Set the file content without the BOM in WinPS I guess that you have some specific requirements here for perf so what approach you think would work best the bootstrap buildps file uses something called gitversion which is not listed in RequiredModules and I have no idea what it is or how to get it Im aware of the gitversion project but this gitversion uses Powershell style parameter passing but doesnt follow Powershell cmdlet naming functions and also I cant find any reference to a showvariable parameter in the gitversion documentation I also cant find anything in the powershell gallery related to gitversion Looking through the sourcecode of gitversion there does appear to be a showvariable parameter but it also requires output json which isnt being specified here so I dont think this is just merely the gitversion executable And IF IT IS just the gitversion executable that needs to be called out in the documentation When Im building multiple modules on a build server and need to force them all to go in a specific output folder I want BuildBinariesDirectory ModuleOne ModuleOnepsm BuildBinariesDirectory ModuleTwo ModuleTwopsm BuildBinariesDirectory ModuleThree ModuleThreepsm So I would like to specify PowerShell BuildModule Destination BuildBinariesDirectory NamedOutputDirectory VersionedOutputDirectory And have BuildModule automatically do IOPath FileNameWithoutExtension on the Path parameter after reading buildpsd and guarantee that the actual OutputDirectory either already ends with that or if not add that before adding the version When invoking the command BuildModule with required Parameters like this BuildModule Path Source ModuleBuilderpsd OutputDirectory VersionedOutputDirectory but the Buildpsd file is absent we get the error below The only way to work around it is to create a Buildpsd with an empty hashtable I think we should make that file optional when required parameters are provided and clearer error when not buildmodule Path Source ModuleBuilderpsd OutputDirectory VersionedOutputDirectory ImportMetadata Cant find file C src ModuleBuilder Source Bb uildpsd At C src ModuleBuilder output ModuleBuilder ModuleBuilderpsm char BuildInfo ImportMetadata Path JoinPath ModuleSource Bb uildp CategoryInfo ObjectNotFound ImportMetadata ItemNotFoundException FullyQualifiedErrorId PathNotFoundMetadata ImportMetadataImportMetadata InitializeBuild You cannot call a method on a nullvalued expression At C src ModuleBuilder output ModuleBuilder ModuleBuilderpsm char ModuleInfo InitializeBuild SourcePath CategoryInfo InvalidOperation InitializeBuild RuntimeException FullyQualifiedErrorId InvokeMethodOnNullInitializeBuild With this setting PowerShell Path MyModulepsd OutputDirectory C temp Delivery MyModule VersionedOutputDirectory true CopyDirectories Demos frFR TypeData Prefix Initialzationps Suffix Finalizationps If the file does not exist no errors are triggered If I correct the file name the addition is done correctly The error exists but is not displayed Same behavior with Suffix Its possible values are not explained ValidateSetClean Build CleanBuild Regarding its behavior should the value Clean delete the versioned directory buildpds Powershell Path MyModulepsd OutputDirectory C temp Delivery MyModule VersionedOutputDirectory true CopyDirectories Demos frFR TypeData Internally we have begun using a module builder that is heavily inspired by this project and tweaked a bit for our environment One piece of feedback I received was that arranging the code so that classes and functions live in separate files makes debugging harder Assuming you were working with a monolithic psm It would be possible to debug and refactor within the same file with VS Code With code living in separate files you have to build the module set your breakpoints in the compiled psm follow the code to its bug then fix the bug in a similar location in the actual source file While tooling for converting source line to compiled line and vice versa is somewhat helpful here it does make the debugging experience more cumbersome I have tried to consider a way in which you can debug and code in the source files but Im at a loss One thing I considered was allowing a Debug Build which would create a psm that dot sources the function files This is doable but would only work for functions because classes have to live in the psm to support using each other class a uses class b and class b uses class a As I vaguely recall there are other caveats to dot sourcing classes Or maybe there is some way to allow for edits in the compiled psm to be pushed back to the source file or something Anyway I never ran into this issue because my module coding workflows dont rely heavily on the debugging engine However a few of my coworkers do rely on it Im looking for feedback on how we either document debugging modules built from this project or tools to make it much easier The Passthru switch doesnt work when the build is skipped because its already up to date