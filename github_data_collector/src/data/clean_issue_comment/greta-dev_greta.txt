Hi Nick As previously discussed Ive begun to work on this I thought Id open this issue To track it To host discussion and so I could ask some questions Namely is the number of samples both warmup and total stored anywhere in the modelinfo attribute of a gretamcmclist object I thought it would be saved in the sampler class but it doesnt appear to be I wanted to get it to display it at the top the print method I think thats useful and its also what rstan does Cheers suppress checktfversion when running on CI so installation and tests dont fail reconfigure TF and TFP installation in travis to accept different versions add a matrix of TF and TFP versions add information to a check results readme somewhere Im just starting out on a twomonth with some interruptions coding sprint on greta There are a bunch of bugfixes halffinished and some halfbaked features and some required refactoring that I have been putting off because was a pretty busy year Im hoping to make some headway on some of these major issues and features Ive been promising for a while Ill keep chipping away at things on this list which I will modify as I go The list is just here for me to keep track of things to do and for others to follow along and comment if there are features they are particularly interested in The order here is neither in order of priority nor the order in which I intend to work on things Ill release new versions as I go but Im not sure yet which features and fixes each release will contain During this work Ill also be trying to keep on top of other issues that come up and the forum which Ive been neglecting over the Christmas break Nows a good time to ask questions over there Bugfixes misc This is a subset of the open issues that Im particularly keen to fix and have a plan for This doesnt mean the other open issues arent important as well and Ill try to get to some of those too Fix thinning to do after Speed up subsetting x Arrayscalar dispatch Automated decentreing of distributions requires delayed graph definition or extended representations interface also applies to gretagp for Gaussian GPs x Fixexclude linting issues x Enable memorysafe batched prediction in calculate x Make the output of mcmc have its own class inheriting from codas mcmc class and provide methods for posthoc windowing thinning etc x Fix silently erroring primitive functions Compatibility A number of things have changed in the interfaces to TF and TFP particularly in moving to TF greta currently still works with the compatibility functions but some refactoring is needed to fully support these Refactor distributions code to be closer to TFP also enables gretahmm to use the TFP hmm funcitonality Refactor internals to use TF functions not graphs for full compatibility with TF Use TFP sampler adaptation with progress bar updating Marginalisation Theres an incomplete branch featuremarginalise that implements an interface for marginalisation of discrete random variables in a greta model Theres some work towards marginalisation of a priori multivariate normal variables via the Laplace approximation too This all needs polishing up thorough testing documenting and releasing Implement marginalisation interface Check discrete marginalisation Check and fix Laplace marginalisation Plan generalpurpose variational marginalisation Write documentation that exaplains what this feature is since it will be unfamiliar to most users of MCMC software Sampling discrete variables This has been on the todo list for a long time It will require a bit of refactoring and redesigning internals but theres nothing about sampling of discrete random variables that should bee particularly tricky to implemnent Implement discrete variables Implement discreteonly samplers Implement Gibbs sampling between discrete and continuous parameter spaces Simulation Random independent sampling from a model object optionally conditionally on fixed values or posterior samples is a muchrequested feature that needs a surprising amount of engineering in the background and careful thinking about an intuitive interface Theres some existing work that just needs implementing polishing up testing and documenting along with some examples of postreior predictive checks etc Implement simulation interface via calculate following the discussion and proposed interface here Continuous integration TF versions greta versions are now being tied to specific releases of TF and TFP I was trying for a while not to do this because I believe its best practice not to be overly prescriptive about dependencies However both TF and TFP are evolving fast and regularly introduce breaking changes It would be good to catch these changes early with CI testing on the nightly releases of those dependencies Set up a continuous integration grid that reflects the specific dependencies of all currently available and recent releases of greta Add a table greta version vs required TF and TF versions of badges to the readme with the test results for these versions Add an entry for the dev version of greta agains both stable and nightly versions of TF and TFP Installing greta in R on Ubuntu fails and gives the following traceback also occurs on Ubuntu r installpackagesgreta Installing package into homeusernameRx pclinuxgnulibrary as lib is unspecified trying URL Content type applicationxgzip length bytes KB downloaded KB installing source package greta package greta successfully unpacked and MD sums checked using staged installation R inst bytecompile and prepare package for lazy loading help installing help indices copying figures building package indices installing vignettes testing if installed package can be loaded from temporary location caught illegal operation address x fc e f cause illegal operand Traceback pymoduleimportmodule convert convert importmodule doTryCatchreturnexpr name parentenv handler tryCatchOneexpr names parentenv handlers L tryCatchListexpr classes parentenv handlers tryCatch importmodule TRUE error clearerrorhandlerFALSE reticulatepymoduleavailabletensorflow havetf checktfversionstartup funlibname pkgname doTryCatchreturnexpr name parentenv handler tryCatchOneexpr names parentenv handlers L tryCatchListexpr classes parentenv handlers tryCatchfunlibname pkgname error identity runHookonLoad env packagelib package loadNamespacepackage libloc doTryCatchreturnexpr name parentenv handler tryCatchOneexpr names parentenv handlers L tryCatchListexpr classes parentenv handlers tryCatch attrpackage LibPath whichlibloc ns loadNamespacepackage libloc env attachNamespacens pos pos deps exclude includeonly error functione P if isnullcc conditionCalle paste in deparsecc L else msg gettextfpackage or namespace load failed for ss n s sQuotepackage P conditionMessagee if logicalreturn messagepasteError msg domain NA else stopmsg call FALSE domain NA librarypkgname libloc lib characteronly TRUE logicalreturn TRUE withCallingHandlersexpr packageStartupMessage functionc invokeRestartmuffleMessage suppressPackageStartupMessageslibrarypkgname libloc lib characteronly TRUE logicalreturn TRUE doTryCatchreturnexpr name parentenv handler tryCatchOneexpr names parentenv handlers L tryCatchListexpr classes parentenv handlers tryCatchexpr error functione call conditionCalle if isnullcall if identicalcall L quotedoTryCatch call syscall L dcall deparsecall L prefix pasteError in dcall LONG L sm strsplitconditionMessagee n L w L nchardcall type w ncharsm L type w if isnaw w L nchardcall type b ncharsm L type b if w LONG prefix paste prefix n else prefix Error msg paste prefix conditionMessagee n Internalseterrmessagemsg L if silent isTRUEgetOptionshowerrormessages catmsg file outFile InternalprintDeferredWarnings invisiblestructuremsg class tryerror condition e trysuppressPackageStartupMessageslibrarypkgname libloc lib characteronly TRUE logicalreturn TRUE toolstestloadpackagegreta homeusernameRx pclinuxgnulibrary LOCKgreta new An irrecoverable exception occurred R is aborting now Illegal instruction core dumped ERROR loading failed removing homeusernameRx pclinuxgnulibrary greta Warning in installpackages installation of package greta had nonzero exit status The downloaded source packages are in tmpRtmpkHutkbdownloadedpackages This issues is apprently related to also I believe the root cause of is that according to docs when pbupdate thin pbupdate is selected to be thin This is extremely poor decision because as human beings users tend to select thin divisable by eg therefore pbudpate can be a prime number and not a divisor of nsample or warmup in the mcmc method Now different values of pbupdate cause greta to fail at the end of sampling with some python TensorArrayzerosize error I ran some tests for different combinations of pbupdate and thin to check what values are causing those crashes The best thing is that mcmcverbose FALSE appears to solve the problem so greta crashes are actually caused by UI behaviour I was unable to locate the source of the problem but I would say it happens at the last sampling step maybe here Changes introduced in might be causing the problem In the following table look at x and x which update by x This appears to almost always crash and it is exactly what happens if pbupdate thin r reticulateusecondaenvrtensorflowgpu required TRUE librarygreta warnconflicts FALSE librarypurrr warnconflicts FALSE librarydplyr warnconflicts FALSE libraryvctrs warnconflicts FALSE runmodel functionnwarm nspin nthin npbupdate x normal model modelx result suppressWarnings suppressMessages mcmcmodel nsamples nspin warmup nwarm thin nthin pbupdate npbupdate chains ncores summaryresultstatistics wrapcall functionnwarm nspin nthin npbupdate pmaplistnwarm nspin nthin npbupdate functionnw ns nt npb result tryCatchrunmodelnw ns nt npb error functione returne if inheritsresult error returnlistWarmup nw Spin ns Thin nt Pb npb Mean NAreal SD NAreal Status FALSE Message resultmessage else returnlistWarmup nw Spin ns Thin nt Pb npb Mean result Mean SD result SD Status TRUE Message OK bindrows wrapcall nwarm L nspin L nthin vecc L L L L L L L L npbupdate vecc L L L L L L L L temp printtemp A tibble x Warmup Spin Thin Pb Mean SD Status Message int int int int dbl dbl lgl chr TRUE OK TRUE OK TRUE OK NA NA FALSE greta hit a tensorflow TRUE OK TRUE OK NA NA FALSE greta hit a tensorflow TRUE OK r sessionInfo R version Platform x w mingw x bit Running under Windows x build Matrix products default locale LCCOLLATEEnglishUnited States LCCTYPEEnglishUnited States LCMONETARYEnglishUnited States LCNUMERICC LCTIMEEnglishUnited States r reticulatepyconfig python C PROGRA MINICO envs RTENS pythonexe libpython CPROGRA MINICO envsRTENS python dll pythonhome C PROGRA MINICO envs RTENS version default Aug MSC v bit AMD Architecture bit numpy C PROGRA MINICO envs RTENS lib sitepackages numpy numpyversion python versions found C PROGRA MINICO envs RTENS pythonexe C PROGRA MINICO pythonexe C ProgramData Miniconda pythonexe C ProgramData Miniconda envs rtensorflowgpu pythonexe r reticulateusecondaenvrtensorflowgpu required TRUE tensorflowtfconfig TensorFlow v C PROGRA MINICO envs RTENS lib sitepackages tensorflow initp Python v C ProgramData Miniconda envs rtensorflowgpu pythonexe tensorflowtfgpuconfigured TensorFlow built with CUDA TRUE GPU device name deviceGPU TRUE r packageDescriptiongreta Package greta Type Package Title Simple and Scalable Statistical Modelling in R Version Date Encoding UTF LazyData true Depends R Collate packageR utilsR tffunctionsR overloadedR Imports R tensorflow reticulate progress future coda methods Suggests knitr rmarkdown DiagrammeR bayesplot lattice testthat mvtnorm MCMCpack rmutil extraDistr truncdist tidyverse fields MASS abind spelling VignetteBuilder knitr RoxygenNote Language enGB RemoteType github RemoteHost apigithubcom RemoteRepo greta RemoteUsername gretadev RemoteRef master RemoteSha d a e bc a c fd c ebf GithubRepo greta GithubUsername gretadev GithubRef master GithubSHA d a e bc a c fd c ebf NeedsCompilation no Built R UTC windows supCreated on by the reprex package v sup greta hit a tensorflow error Error in pycallimplcallable dotsargs dotskeywords UnimplementedError root errors found Unimplemented TensorArray has size zero but element shape is not fully defined Currently only static shapes are supported when packing zerosize TensorArrays node mcmcsamplechaintracescanTensorArrayStack TensorArrayGatherV defined at tensorflowprobability python mcmc internal utilpy mcmcsamplechaintracescanwhilesmartforloopwhileExit Unimplemented TensorArray has size zero but element shape is not fully defined Currently only static shapes are supported when packing zerosize TensorArrays node mcmcsamplechaintracescanTensorArrayStack TensorArrayGatherV defined at tensorflowprobability python mcmc internal utilpy successful operations derived errors ignored Errors may have originated from an input operation Input Source operations connected to node mcmcsamplechaintracescanTensorArrayStack TensorArrayGatherV mcmcsamplechaintracescanwhileExit defined at tensorflowprobability python mcmc internal utilpy mcmcsamplechaintracescanTensorArray defined at tensorflowprobability python mcmc internal utilpy Input Source operations connected to node mcmcsamplechaintracescanTensorArrayStack TensorArrayGatherV mcmcsamplechaintracescanwhileExit defined at tensorflowprobability python mcmc internal utilpy mcmcsamplechaintracescanTensorArray defined at tensorflowprobability python mcmc internal utilpy Original stack trace for mcmcsamplechaintracescanTensorArrayStack TensorArrayGatherV File tensorflowprobability python mcmc samplepy line in samplechain paralleliterationsparalleliterations File tensorflowprobability python mcmc internal utilpy line in tracescan stackedtrace tfnestmapstructurelambda x xstack tracearrays File tensorflow python util nestpy line in mapstructure structure funcx for x in entries File tensorflow python util nestpy line in listcomp structure funcx for x in entries File tensorflowprobability python mcmc internal utilpy line in lambda stackedtrace tfnestmapstructurelambda x xstack tracearrays File tensorflow python ops tensorarrayopspy line in stack return selfimplementationstacknamename File tensorflow python ops tensorarrayopspy line in stack return selfgathermathopsrange selfsize namename File tensorflow python ops tensorarrayopspy line in gather elementshapeelementshape File tensorflow python ops gendataflowopspy line in tensorarraygatherv elementshapeelementshape namename File tensorflow python framework opdeflibrarypy line in applyophelper opdefopdef File tensorflow python util deprecationpy line in newfunc return funcargs kwargs File tensorflow python framework opspy line in createop opdefopdef File tensorflow python framework opspy line in init selftraceback tfstackextractstack Detailed traceback File C PROGRA MINICO envs RTENS lib sitepackages tensorflow python client sessionpy line in run runmetadataptr File C PROGRA MINICO envs RTENS lib sitepackages tensorflow python client sessionpy line in run feeddicttensor options runmetadata File C PROGRA MINICO envs RTENS lib sitepackages tensorflow python client sessionpy line in dorun runmetadata File C PROGRA MINICO envs RTENS lib sitepackages tensorflow python client sessionpy line in docall raise typeenodedef op message Tensorflow probability has just open sourced its unrolled NUTS implementation here Personally I think having a NUTS implementation would be a big thing for greta I assume this means that it very parallely Hi Nick This single commit pull request outlines my idea for a sampling interface for distributions in greta I worked a bit a while ago on a substantive pull request which added sampling to almost all distributions Writing the code to sample the distributions was pretty easy but I was very unsure of the best simplest most consistent with other greta internals etc interface Some reasons I was confused about this were Confusion about the arguments to tfdistrib which I thought tfsample should try to emulate Why are the parameters passed not accessed using self I instinctively feel that tfsample should have no arguments What form are the parameters meant to take Why is dag passed but not used I wasnt sure what sort of internal juggling of tensorflow tenors would be required to sample a full model and how this might effect the necessary interface The commit outlines my best idea but I am happy to receive any other ideas Once the interface is decided on I would be very happy to actually go through and implement the sampling for each distribution Jeffrey Or at least it would be if I knew how to edit commit messages properly gretas extraction eg a x and replacement eg x syntax uses the internal tensorflow functions tfextract and tfreplace to do the operations on tensors with a shim to map Rs extractreplace syntax onto TensorFlows This shim doesnt always use the most efficient operations for common extraction methods For example x could use tfslice which might be more efficient than the current general approach or reshaping to a vector using tfgather and then reshaping to a matrix x could use tftensorscatterndupdate which would probably be much more efficient than the current gretatfrecombine approach of flattening the vector breaking it up into vectors replacing some and then recombining them with tfconcat before reshaping the vector into a matrix This would particularly help when people write for loops to that alter elements in matrices eg for timeseries models and reduce the need for nasty hacks like storing the iterated components in lists This issue is about planning ahead to dealing with major TensorFlow API changes when a greta version has to work with TensorFlow It doesnt affect anything yet optimisers Tensorflows various optimiser interfaces are being unified details here Some of the old versions will still be available in the compat compatibility module though there may be speed benefit to changing to more recent versions In addition the TF x contrib module will no longer be available in TF and wont be in compat There is a tensorflow addons repo with an optimizers module though with no apparent overlap with existing optimisers and a TFP optimizer module which has a couple of the methods greta optimiser TF x function TF function neldermead tfcontriboptScipyOptimizerInterface tfpoptimizerneldermeadminimize powell tfcontriboptScipyOptimizerInterface cg tfcontriboptScipyOptimizerInterface bfgs tfcontriboptScipyOptimizerInterface tfpoptimizerbfgsminimize newtoncg tfcontriboptScipyOptimizerInterface lbfgsb tfcontriboptScipyOptimizerInterface tnc tfcontriboptScipyOptimizerInterface cobyla tfcontriboptScipyOptimizerInterface slsqp tfcontriboptScipyOptimizerInterface gradientdescent tfcompatv trainGradientDescentOptimizer tfkerasoptimizersSGD adadelta tfcompatv trainAdadeltaOptimizer tfkerasoptimizersAdadelta adagrad tfcompatv trainAdagradOptimizer tfkerasoptimizersAdagrad adagradda tfcompatv trainAdagradDAOptimizer tfcompatv trainAdagradDAOptimizer momentum tfcompatv trainMomentumOptimizer tfkerasoptimizersSGD adam tfcompatv trainAdamOptimizer tfkerasoptimizersAdam ftrl tfcompatv trainFtrlOptimizer tfkerasoptimizersFTRL proximalgradientdescent tfcompatv trainProximalGradientDescentOptimizer tfcompatv trainProximalGradientDescentOptimizer proximaladagrad tfcompatv trainProximalAdagradOptimizer tfcompatv trainProximalAdagradOptimizer rmsprop tfcompatv trainRMSPropOptimizer tfkerasoptimizersRMSProp though arguments may have changed so tfcompatv trainRMSPropOptimizer as a backup Unless another interface to the Scipy optimisers is developed the optimisers without replacements will have to be removed from the API Itll bee a little hard to deprecate them without knowing whether a replacement will be coming ode solvers The gretadynamics packages odesolve functionality also depends on contrib using the tfcontribintegrateodeint and odeintfixed methods tfpmathodeSolversolve may be a viable replacement