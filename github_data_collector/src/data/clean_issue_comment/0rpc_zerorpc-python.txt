hi I used zerorpc server with python with msgpack invoking methods from any client would make the server end raise an exception as below Traceback most recent call last File optworkpyenvversionsmtaslibpython sitepackageszerorpcchannelpy line in channeldispatcher event selfeventsrecv File optworkpyenvversionsmtaslibpython sitepackageszerorpceventspy line in recv event Eventunpackgetpyzmqframebufferblob File optworkpyenvversionsmtaslibpython sitepackageszerorpceventspy line in unpack unpacker msgpackUnpackerrawFalse File msgpackunpackerpyx line in msgpackunpackerUnpackerinit msgpackunpackercpp TypeError init got an unexpected keyword argument raw and this obviously resulted from incompatible use of msgpackUnpacker with arg raw which could only be used in python so I made this fix If I run the server or client in a thread other than the main thread it seems to trigger the missing event bug python import zerorpc import threading import time def runserver class HelloRPC def helloself name age return fHello name of age age s zerorpcServerHelloRPC sbindtcp srun Start server in background serverthread threadingThreadtargetrunserver serverthreaddaemon True serverthreadstart Run client c zerorpcClienttcp for in range printchelloThread timesleep Output python experimentsrpcthreadinggeventbugpy Hello Thread of age geventzeromq BUG catching up after missing event RECV Hello Thread of age How do I fix this Shouldnt it work fine since the client and server both have their own threadlocal event loop with gevent zerorpc is build by pyzmq and it has the ip v option zmqIPV this may make zerorpcpython better thanks is there any way to cancel a zerorpc call I have a frontend zerorpcnode communicating with a backend zerorpcpython that needs to a be able to send requests to the backend standard zerorpc call b be able to run multiple backend processes simultaneously followed the architecture in c be able to cancel a backend process at will not sure how to do this with current architecture Any guidance would be much appreciated I can import zerorpc and confirm Server class was in zerorpccore module but the interpreter always report AttributeError module object has no attribute Server Test platform windows python Traceback most recent call last File eTooldevelopmentpythonresourcepy virenvtestAutomationzerorpcprojectzerorpcpy line in module import zerorpc File e Tooldevelopment pythonresource py virenv testAutomation zerorpcproject zerorpcpy line in module s zerorpc Server AttributeError module object has no attribute Server Test Script class HelloRPCobject def helloself name return Hello s name import zerorpc test zerorpcServerHelloRPC s zerorpcServer sbindtcp srun pip list DEPRECATION Python will reach the end of its life on January st Please upgrade your Python as Python wont be maintained after that date A future version of pip will drop support for Python Package Version cffi future gevent greenlet msgpack pip pycparser pyzmq setuptools wheel zerorpc I have two rpc server and the code is below file Serverpy import zerorpc class Serverobject def initself pass def addself a b return a b if name main s zerorpcServerServer sbindtcp srun file Server py import zerorpc class Server object def initself pass def mulself a b return a b if name main s zerorpcServerServer sbindtcp srun I constructed a rpc client in main process and connect to Server and then start a subprocess to connect to Server However the rpc call was stucked file clinet py import zerorpc import multiprocessing as mp def subfunc subclient zerorpcClient subclientconnecttcp printsubclientmul if name main client zerorpcClient clientconnecttcp ps mpProcesstargetsubfunc args psstart printclientadd psjoin When I start subprocess and then constructed client in main process both calls sucess file client py import zerorpc import multiprocessing as mp def subfunc subclient zerorpcClient subclientconnecttcp printsubclientmul if name main ps mpProcesstargetsubfunc args psstart client zerorpcClient clientconnecttcp printclientadd psjoin Python version zerorpc version How can I use zerorpc client in Django I put connection in django settings and try to use the rpc connection in anywhere in Django project However it always hangs it shows the error File Userskimihowenvathenalibpython sitepackageszerorpceventspy line in call selfsendqueueputparts timeouttimeout File srcgeventqueuepy line in geventqueueChannelput File srcgeventqueuepy line in geventqueueChannelput File srcgeventwaiterpy line in geventwaiterWaiterget File srcgeventgreenletprimitivespy line in geventgreenletprimitivesSwitchOutGreenletWithLoopswitch File srcgeventgreenletprimitivespy line in geventgreenletprimitivesSwitchOutGreenletWithLoopswitch File srcgeventgreenletprimitivespy line in geventgreenletprimitivesSwitchOutGreenletWithLoopswitch File srcgeventgreenletprimitivespxd line in geventgreenletprimitivesgreenletswitch geventexceptionsLoopExit This operation would block forever Hub Hub at x ba cc select pending ref threadident x Handles Is it possible to reduce the time before the TIMEWAIT turns to closed connection Once the client has finished the connection remains opened on TIMEWAIT for seconds or so I have a multithread task task that executes every seconds opening a new connection If I cant find a way to reduce the time before the connection closes I risk to exhaust all the available ports It looks like that scheduling jobs with Apscheduler doesnt go along with zerorpc When testing using testsomevalue zerorpc works wll When stating the scheduler I get always the following exception geventexceptionsLoopExit This operation would block forever Hub Hub at x aff select pending ref threadident x c Handles This is my code python import zerorpc from apschedulerschedulersbackground import BlockingScheduler from datetime import datetime rpc zerorpcClient rpcconnecttcpformat def testx rpcwritevariablename x def run def test rpcwritevariablename rpcwritevariablename scheduler BlockingScheduler scheduleraddjob functest triggerinterval seconds startdatedatetimenow schedulerstart Would it be possible to have Decimal values correctly serialized