Some error struct have Cause error method indicating the cause of the error but that method could return nil indicating that that itself is the root cause in the error chain look at this struct go type myError struct message string cause error func m myError Error string func m myError Cause error return mcause func Newmessage string error return myErrormessage message At the moment there is no way to provide a custom stack trace for an error the stack trace is captured at Wrapf or other such wrapping time While this is totally acceptable for pureGo code it would be useful to be able to add a stacktrace from a nonGo library which generates its own stacktraces The usecase that drives this is its a Rust library for which Im writing some Go bindings The fundamental cause of the error is within Rust code but the Rust code provides through C FFI a full backtrace at the point the error occurred Being able to produce lossfree Go errors would be pretty useful IMHO This proposal basically boils down to having something as simple as func stack WithCustomStacktraces StackTrace Need method to check if error is wrapped When using errorsWrap the default delimiter is But for me at least it seem like it should be with that I can wrap errors like this errorsWrapferr Error while trying to open file s fileName I thing that instead of hardcoded delimiter we should be able to configure it with errorsSetDelimiter string Wrap and Wrapf are good example of annotating error with stack trace and given error message Wrap and Wrapf are best option if errors comes in different labelsdifferent function If errors are in same labelsame function then we can have an option to merge those errors in a single error annotating with extra message How do you see the future of pkgerrors after the proposal for go That will even works with older version of go requires changes to the way the stack is analysed See in v for example As requested in I made the minimal changes here you requested Small note it would be nice if the standard library implemented type Grower interface Grown int so we could assert for it instead but no idea if that would be considered or not console benchmark old nsop new nsop delta BenchmarkStackFormattingvstack BenchmarkStackFormattingvstack BenchmarkStackFormattingvstack benchmark old allocs new allocs delta BenchmarkStackFormattingvstack BenchmarkStackFormattingvstack BenchmarkStackFormattingvstack benchmark old bytes new bytes delta BenchmarkStackFormattingvstack BenchmarkStackFormattingvstack BenchmarkStackFormattingvstack For this issue 