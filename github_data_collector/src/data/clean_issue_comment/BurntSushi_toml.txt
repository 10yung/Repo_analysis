Usually a timeDuration in string format decode to a struct we must do more things First create timeDuration parse struct go import time type Duration struct timeDuration func d Duration UnmarshalTexttext byte error var err error dDuration err timeParseDurationstringtext return err Then change config struct field for timeDuration timeDuration myDuration This will cause we must pre process config field for adapt some third library So create this merge request for parse timeDuration in string format And then we dont need to create personal Duration HeyguysI just changed the project to support go modulewish you can merge it to the masterthank you When encoding a map that was previously decoded from JSON using UseNumber the TOML encoder marshals integers and floats to string see and For some reason the YAML encoder used by Helm is not facing the same issue but I couldnt find any kind of special treatment for jsonNumber Im not a Go programmer but I think we could deal with such case with something like that func convertJSONNumbern jsonNumber interface error i err nInt if err nil f err nFloat if err nil return errorsNewfmtSprintfUnable to convert s to neither int nor float n return f nil return i nil See Seems to fix Im having a problem roundtripping a structure containing nested anonymous structs package main import bytes fmt log githubcomBurntSushitoml type A struct A string B struct B string C struct C string BC struct B C Foo struct A BC func main foo Foo A A A a BC BC B B B b C C C c buf newbytesBuffer if err tomlNewEncoderbufEncodefoo err nil logFatalerr fmtPrintlnbufString var blob A aa B bb C cc foo Foo md err tomlDecodeblob foo if err nil logFatalerr fmtPrintfv n foo fmtPrintlnundecoded mdUndecoded This program outputs A a A a B B b AAaa BCBBbb CCcc undecoded The TOML duplicates field A does not treat B as a toplevel field and is missing field C altogether I would have expected the output of Encode to look like A a B b C c In the latter part of the example code you can see that the blob variable decodes as expected Am I doing something wrong Ive encountered an issue where I had a configuration file like this toml defaultdisplay loop false slideshowdelay forceresolution x and a struct like this go type Cfg struct Loop bool tomlloop SlideShowDelay int tomlslideshowdelay ForceResolution string tomlforceresolution and after parsing CfgLoop would always be true even if in the configuration file it was set to false I fixed the issue by renaming it from loop to imgloop and now they look like this toml defaultdisplay imgloop false slideshowdelay forceresolution x go type Cfg struct Loop bool tomlimgloop SlideShowDelay int tomlslideshowdelay ForceResolution string tomlforceresolution Could potentially also just copy here Using the following input toml date t z I get the error Error decoding TOML Near line last key parsed expected a toplevel item to end with a newline comment or EOF but got t instead The expected output is something like json date type datetime value T Z According to RFC and the toml ABNF the T and Z part of a datetime value are case insensitive and can therefore be lower case characters Hey this small change would increase the debugability on errors during decoding Now we would have a small hint which value causes the actual issue WDYT Fixes 