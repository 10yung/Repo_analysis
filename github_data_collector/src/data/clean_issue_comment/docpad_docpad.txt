Considering the decision at We should rip out the localisation code I have this weird issue where build files are being generated correctly I see the desired result in my code editor and via the file path in my browser yet when served through DocPad select changes are not applied Below is the build workflow A less file is changed DocPad picks this event up and transpiles into css using docpadpluginless nothing special here docpadplugingulp is configured to execute the gulp cssmin task on writeAfter this works Below is the cssmin task and the tasks it depends on cssprefix task gulptask csspre gulp src outassetscssscreencss pipe autoprefixer browsers last versions firefox cascade false pipe gulpdest outassetscss cssconcat task gulptask cssconcat csspre gulp src outassetscsscss pipe concat screencss pipe gulpdest outdistcss cssmin task gulptask cssmin cssconcat gulp src outdistcssscreencss pipe cssmin pipe rename suffix min pipe gulpdest outdistcss The resulting minified file is as desired the placeholders in the form are blue However in development mode I want to link assetscssscreencss directly again this setup does work I can see in my code editor that the prefixes are applied after each generate but if I view the files through the console on a DocPad served page the prefixes are not present Neither are the onscreen results My bet is DocPad stores the files somewhere in memory and theyre updated after each generate but before my gulp tasks are completed I doubt this is caused by autoprefixer itself because the files are updated correctly outside the DocPad environment It is neither caused by livereload as the issue persists while this plugin is disabled As the code of this project is available on GitHub you may try to reproduce the issue there I dont exclude some stupidity of mine but that would be an embarrassment As per This task will track progress of this conversion in relation to DocPad and what needs to be done Immediate Update plugins to JavaScript Update core to JavaScript Future x Abstract out testers into own package x Abstract out plugin class to own package x Abstract out plugin loader to own package One of the most common issues that people run into with DocPad as well as other node modules is permission errors due to incorrectly configuration installations of node If people are using DocPad with sudo then we should error and tell them no If people are using DocPad and permissions arent set correctly we should also exit and tell them no Besides the usual permission errors here are some other issues caused by sudo and incorrect permissions bountysourceplugin Want to back this issue Place a bounty on it We accept bounties via Bountysource bountysourceplugin Now that javascript objects have native getters setters and mutation observers we could actually get rid of backbone models This would remove a whole lot of confusion about why toJSON is needed etc It would also pave the way to having queryengine have live collections for native javascript objects bountysourceplugin Want to back this issue Place a bounty on it We accept bounties via Bountysource bountysourceplugin bountysourceplugin Want to back this issue Place a bounty on it We accept bounties via Bountysource bountysourceplugin Related Repurposing the major version of the a plugins version to specify metadata about a dependency ie depends on docpad plugin api v does not strike me as the best practice The reason reason why we do version is just a general convention Version plugins are compatible for with DocPad v whereas Version plugins are compatible with DocPad v before DocPad v plugins were bundled Can we consider using the docpad key in the engine hash of packagesjson Or if that already has a specific purpose perhaps we could create a docpadplugin engine The current practice would seem to keep a users plugin from being able to use semver and likely also prevents them from properly versioning their own project ie things like using the xy convention for prestable packages etc Thanks cc unframework bountysourceplugin Want to back this issue Place a bounty on it We accept bounties via Bountysource bountysourceplugin This should already be supported but their content will be in documentgetContent as a buffer So a guide will need to be made bountysourceplugin Want to back this issue Place a bounty on it We accept bounties via Bountysource bountysourceplugin 