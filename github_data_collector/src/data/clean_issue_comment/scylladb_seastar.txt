I have recently spent most of a day tracking a bug that did not reproduce in debug build The issue was just a stack overflow but since debug is the only mode with stack guards the crashes were super hard to track since they manifested as corrupted data structures Once I manually enabled the stack guard the problem became obvious I have seen enough crashes in scylla that look impossible so I am a bit suspicious that we might be hitting a stack overflow from time to time in there Right now the stack protector actually allocates a page and changes the protection It should be possible to not back the guard page and not count that memory as used in our own allocator With that the stack guards would be effectively free and we could always enable them HEAD cfe f c b c fe e ca Description Native stack doesnt check UDP checksum at all According to the specificatiopn its optional for IPv but in this case it should carry allzeros For IPv is obligatory In reactorcc there are the following codes and comments c expirelowrestimers must be before sigpoller because lowrestimerpollfn may arm the first highres timer which can add a new signal to be registerd If the order is reversed then signalpollfnexitinterruptmode can reblock the timer signal poller expirelowrestimersstdmakeuniquelowrestimerpollfnthis poller sigpollerstdmakeuniquesignalpollfnthis That means the lowrestimerpollfn must be before signalpollfn But when we build seastar in debug mode the flag SEASTARSHUFFLETASKQUEUE will enable the following code in reactorhh and swap the positions of the pollfers c void addtaskstduniqueptrtask t auto sg tgroup auto q taskqueues sgid get bool wasempty qqempty qqpushbackstdmovet ifdef SEASTARSHUFFLETASKQUEUE shuffleqqback q endif if wasempty activateq Not sure when was this introduced Most recently seen in FWIW I couldnt reproduce this warning when building seastar as standalone T Z Building CXX object CMakeFilesseastardirgensrcprotometrics pbcco T Z In member function void ioprometheusclientBucketSharedCtor T Z inlined from ioprometheusclientBucketBucket at gensrcprotometrics pbcc T Z inlined from void protobufmetrics eprotoInitDefaultsBucket at gensrcprotometrics pbcc T Z gensrcprotometrics pbcc warning void memsetvoid int sizet offset from the object at ioprometheusclientBucketdefaultinstance is out of the bounds of referenced subobject ioprometheusclientBucketcumulativecount with type long unsigned int at offset Warraybounds T Z memset cumulativecount staticcastsizet T Z T Z reinterpretcastchar upperbound T Z T Z reinterpretcastchar cumulativecount sizeofupperbound T Z T Z In member function void ioprometheusclientQuantileSharedCtor T Z inlined from ioprometheusclientQuantileQuantile at gensrcprotometrics pbcc T Z inlined from void protobufmetrics eprotoInitDefaultsQuantile at gensrcprotometrics pbcc T Z gensrcprotometrics pbcc warning void memsetvoid int sizet offset from the object at ioprometheusclientQuantiledefaultinstance is out of the bounds of referenced subobject ioprometheusclientQuantilequantile with type double at offset Warraybounds T Z memset quantile staticcastsizet T Z T Z reinterpretcastchar value T Z T Z reinterpretcastchar quantile sizeofvalue T Z T Z In member function void ioprometheusclientSummarySharedCtor T Z inlined from ioprometheusclientSummarySummary at gensrcprotometrics pbcc T Z inlined from void protobufmetrics eprotoInitDefaultsSummary at gensrcprotometrics pbcc T Z gensrcprotometrics pbcc warning void memsetvoid int sizet offset from the object at ioprometheusclientSummarydefaultinstance is out of the bounds of referenced subobject ioprometheusclientSummarysamplecount with type long unsigned int at offset Warraybounds T Z memset samplecount staticcastsizet T Z T Z reinterpretcastchar samplesum T Z T Z reinterpretcastchar samplecount sizeofsamplesum T Z T Z In member function void ioprometheusclientHistogramSharedCtor T Z inlined from ioprometheusclientHistogramHistogram at gensrcprotometrics pbcc T Z inlined from void protobufmetrics eprotoInitDefaultsHistogram at gensrcprotometrics pbcc T Z gensrcprotometrics pbcc warning void memsetvoid int sizet offset from the object at ioprometheusclientHistogramdefaultinstance is out of the bounds of referenced subobject ioprometheusclientHistogramsamplecount with type long unsigned int at offset Warraybounds T Z memset samplecount staticcastsizet T Z T Z reinterpretcastchar samplesum T Z T Z reinterpretcastchar samplecount sizeofsamplesum T Z T Z In member function void ioprometheusclientMetricSharedCtor T Z inlined from ioprometheusclientMetricMetric at gensrcprotometrics pbcc T Z inlined from void protobufmetrics eprotoInitDefaultsMetric at gensrcprotometrics pbcc T Z gensrcprotometrics pbcc warning void memsetvoid int sizet offset from the object at ioprometheusclientMetricdefaultinstance is out of the bounds of referenced subobject ioprometheusclientMetricgauge with type ioprometheusclientGauge at offset Warraybounds T Z memset gauge staticcastsizet T Z T Z reinterpretcastchar timestampms T Z T Z reinterpretcastchar gauge sizeoftimestampms T Z On startup on fedora I see WARN seastar Couldnt read cgroup file sysfscgroupcpusetcpusetcpus WARN seastar Unable to parse cgroups cpuset Ignoring WARN seastar Couldnt read cgroup file sysfscgroupmemorymemorylimitinbytes in sysfscgroup I have cgroupcontrollers cgroupmaxdescendants cgroupstat cgroupthreads cpusetcpuseffective initscope machineslice systemslice cgroupmaxdepth cgroupprocs cgroupsubtreecontrol cpupressure cpusetmemseffective iopressure memorypressure userslice The test has future dowork current maxconcurrentobserved stdmaxcurrent maxconcurrentobserved return sleep msthen this maxconcurrentobserved stdmaxcurrent maxconcurrentobserved current The hope seems to be that all increments execute before all decrements but that is timing dependent On my workstation that started failing in debug builds for some reason Changing the delay to ms hides the problem but that is likely not the right fix Can we fix the compilation warnings coretransferhh warning unused parameter a Wunusedparameter transferpass Alloc a T from T to coretransferhh warning unused parameter from Wunusedparameter transferpass Alloc a T from T to coretransferhh warning unused parameter to Wunusedparameter transferpass Alloc a T from T to corecircularbufferhh warning unused parameter unused Wunusedparameter HEAD f ef df ac c e f ccd Description Timers eg steadyclocktimer dont work In particular lowresclockimplupdate is not called and as a result lowresclock doesnt work either This seems to be specific to a linuxaio backend because when we switch to an epoll backend I cant reproduce the issue How to reproduce Provision m d xl smaller VMs with ENA NICs would do nicely too with NICs Compile httpd application Allocate huge pages per NUMA node NUMHUGEPAGESPERNODE echo Allocating NUMHUGEPAGESPERNODE MB huge pages on each NUMA Node for d in sysdevicessystemnodenode do echo NUMHUGEPAGESPERNODE dhugepageshugepages kBnrhugepages curnodebasename d echo curnode done done modeprobe vfiopci Enable unsafenoiommumode echo sysmodulevfioparametersenableunsafenoiommumode Bind on of NICs to vfiopci eg scriptsdpdknicbindpy b vfiopci ens Run httpd buildreleaseappshttpdhttpd networkstack native smp dpdkpmd dhcp hostipv addr hugepages devhugepages m G lro off netmaskipv addr collectd defaultloglevel info argv l httpd is going to stuck waiting for a link Run it this way buildreleaseappshttpdhttpd networkstack native smp dpdkpmd dhcp hostipv addr hugepages devhugepages m G lro off netmaskipv addr collectd defaultloglevel info argv l reactorbackend epoll And it will be fully operational Note The above relies on a notyetmerged nor sent to the mlist patches pasted below for seastar commit b c a edfc a af b b c f eb Author Vlad Zolotarov vladzscylladbcom Date Wed Sep DPDK actually implement argv parameter One can pass additional parameter to DPDK using this new parameter For instance Giving argv v devvsock t blabla will result in passing the following additional list of parameters to DPDK v devvsock t blabla Signedoffby Vlad Zolotarov vladzscylladbcom diff git asrccoredpdkrtecc bsrccoredpdkrtecc index c d cd db asrccoredpdkrtecc bsrccoredpdkrtecc ifdef SEASTARHAVEDPDK include cinttypes include iostream include seastarnetdpdkhh include seastarcoredpdkrtehh include seastarutilconversionshh include seastarutilstdcompathh include rtepcih include boostalgorithmstringhpp namespace seastar namespace dpdk void ealinitcpuset cpus boostprogramoptionsvariablesmap opts stdstring maskstr maskstr stdreversemaskstrbegin maskstrend TODO Inherit these from the app parameters opts stdvectorstdvectorchar args string vectoropts argv asstdstring string vectoropts argv asstdstring string vectorc string vectormaskstr string vectorn string vector stdstring argv opts argv asstdstring stdvectorstdstring argv params if argv empty boostsplitargv params argv boostisanyof for const stdstring p argv params argspushbackstring vectorp stdcout dpdk args for far args stdendl compatoptionalstdstring hugepagespath if optscounthugepages hugepagespath opts hugepages asstdstring diff git asrccorereactorcc bsrccorereactorcc index e c c e b asrccorereactorcc bsrccorereactorcc smpgetoptionsdescription mbind bpovaluebooldefaultvaluetrue enable mbind ifndef SEASTARNOEXCEPTIONHACK enableglibcexceptionscalingworkaround bpovaluebooldefaultvaluetrue enable workaround for glibcgcc c exception scalablity problem endif ifdef SEASTARHAVEDPDK argv bpovaluestdstring Additional DPDK parameters endif return opts For DPDK diff git adriversnetenaenaethdevc bdriversnetenaenaethdevc index eb cead e adriversnetenaenaethdevc bdriversnetenaenaethdevc static int enarxqueuesetupstruct rteethdev dev return ENACOMFAULT if nbdesc RTEETHDEVFALLBACKRXRINGSIZE nbdesc adapterrxringsize if nbdesc RTEETHDEVFALLBACKRXRINGSIZE nbdesc adapterrxringsize if rteispowerof nbdesc RTELOGERR PMD Hi I am trying to run the Memcached application with DPDK and native network stack on a system wit Mellanox ConnectX cards Previously I could use dpdktarget to specify my custom DPDK but it seems this option is not available anymore With the current Seastar build system mlx PMD is not linked with the applications which does not enable Memcached to detect my NIC I am using the following command to build seastar configurepy modedev enabledpdk cook fmt cook Boost cook yamlcpp Do you have any suggestion that could fix my problem BR Amir Seastars command line options are parsed using boost the problem is that if a seastar based application cant decide to have unregistered options The reason is here I have two possible solution suggestions Add a boolean to rundeprecated and another run method parameteroverload that will run the parser with allowunregistered Have seastar open with allowunregistered unconditionally and transfer the responsibility to detect unregistered options and throw to the application I am in favor of the first solution patch will follow since there is no real reason to duplicate the options handling logic we should probably just make the options available to the applications main logic