ftfyfixtext fixentitiesTrue returns an empty string I would have expected UFFFE which is otherwise left intact Im not actually sure what the correct unescaping behaviour is here according to the standards but ufffeencodeascii xmlcharrefreplacedecodeascii generates it which is how I ran into the issue we use that method to generate strings with entities in our unit tests and Hypothesis happened to generate UFFFE edit I wrote UFFFD by mistake when I meant to write UFFFE Fixed now import ftfy s i A j p X j bpng ftfyftfys i A j p X j bpng sencodecp decodeshiftjis png Possible Thanks I have problems with mojibake of the letter in K nig U F Ll LATIN SMALL LETTER O WITH DIAERESIS These are some examples that might be mojibaked not sure about the first just added them in case they are solvable The first look the same in the browser but different in unicode K nig or K nig UFFFD So REPLACEMENT CHARACTER K nig This is mojibakesolved by ftfyfixtext as a U Po QUOTATION MARK U x Cc unknown K nig U C Lu LATIN CAPITAL LETTER A WITH TILDE U B Po PILCROW SIGN K nig U A Sm SQUARE ROOT U Sm PARTIAL DIFFERENTIAL Are any of these solvable Im looking into using ftfy to help upstream data sources clean up their data a common format is CSV files These data sources often manage to mix up encoding in different columns in the same row maybe theyre from different databases or web forms ftfy will be even more useful for me if it were possible to fix mixed encodings on the same line or alternatively to add an argument to control what is considered a segment Obviously I could just make some code to use ftfy functions in CSV fields myself to get the desired results but ftfy is a well documented easy to use tool so Id really like offload the analysis to the bad data providers themselves If its agreed this could be a feature I might be able to spend some time on it It would be great if ftfy could fix cases like this python s u print sencodelatin decodeeuckr but it doesnt python print ftfyfixtextsegments Source There is apparently a fair amount of Spanish text out there that contains a mixup between Windows and MacRoman before being encoded in UTF Because Latin for Windows is the only singlebyte mixup we detect we assume thats what happened and get text that looks like Prev n diputados inaugurar periodo de sesiones con c digo penal This is not a false positive because the encoding is in fact incorrect its actually got the UTF encoding of the wrong characters in it and ftfy is trying to fix it Its in fact using the same fix that any web browser would use However the resulting text makes no sense because its not the correct fix This mixup is apparently common enough that it would be worth fixing as another special case 