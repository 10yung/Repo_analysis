 Issue description In Spock parameterized tests are automatically unrolled Therefore it seems to be intuitive to automatically resolved placeholders put in a test name How to reproduce def should resolve placeholder in test name by default text expect textlength lenght where text lenght dog tiger generates It is required to use Unroll implicitly to resolve placeholders Link to a gist or similar optional Slightly related regarding the context but for Spock and probably with different implementation reason Additional Environment information OpenJDK spockcore M groovy Idea There is no need to separate sneakyThrow and doSneakyThrow it can be done in one declaration I also added a return type so it can be used in methods or lambdas that need a return value Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend This is an issue to track an ability to better handle calling gox when the generic Java mock implementation is used for an Groovy object in Groovy Currently a working but ugly and fragile workaround aka hack is applied but we hope to have some better way Related discussion on the Groovy devel mailing list A quotation from the original message TLTR How would be best to distinguish in Groovy foox and foogetPropertyx in a call at the level of an interceptor for a mocking system More detailed version Working on the Spock adjustment to Groovy I spotted that Groovy started for a property access gox go some GroovyObject instance with a field x to call gogetPropertyx instead of gogetX directly as it took place in Groovy This broke tests for mocking with a property call getX is stubbed but gox is called and forced me to detect getPropertyx calls in a mock interceptor to analyze deeper and check which method here getter is being called and if has been stubbed However in addition it should be possible to just stub direct gogetPropertyx calls To do that currently I have to analyze a stack trace to detect groovylangGroovyObjectgetPropertycall at the position for direct gogetPropertyx calls and deeper process only the other calls gox It seems to work but its quite ugly and fragile I wonder how to reliably differentiate those two types of calls Summary This pull request provides expermental Spock compatibility compilation tests with Groovy In addition the Groovy compatibility is kept There are variants available known from the previous Spock versions There is a compatibility layer to cover breaking changes in Groovy The builds pass on Travis with Groovy and variants on supported range of Java versions Known issueslimitations to be fixed or acknowledged before merge Unlike with the NamedParam annotation dummy classes LambdaExpression and MethodReferenceExpression have to be on runtime classpath with Groovy they are used as method arguments It brings a runtime risk if groovy x and spockgroovy compat xgroovy artifacts are accidentally mixed in one project however I dont know if we can do it another way Recently merged tests in AnonymousInnerClasses fails with Groovy Vampire you are uptodate with the changes maybe you would like to take a look at it adjusted to Groovy by Vampire CompileTimeErrorReportingconstructor declaration test fails with Groovy the implementation of SpecParserconstructorMayHaveBeenAddedByCompiler has to be improved Its not a critical issue so temporarily skipped it to finish making codebase crosscompatible Contribution with that is welcome diagnosed by Vampire tracked in GROOVY Long term known issues to be fixed before final is released in separate PRs Groovy allows to use and in assertions eg assert i This is not compatible with Groovy and Spocks assumptions I reported it GROOVY and most likely it would be reverted before final update to Groovy final once released More lambada and method reference tests for Spock tests contribution is welcome Other issuesideas Im not satisfied with the way property calls are handled in mocks after changes in Groovy I asked on the Groovy mailing list about some better ideas tracked in JavaStubs tests could be rewritten to parameterized tests to test both interface and classbased stubs Other remarks It is recommended to merge this pull request WITHOUT squashing to keep the original commit separation They contain extra information about incompatibilities and in addition would be easier to selectively revert if needed Feel free to comment and propose possible improvements Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Fixes Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Issue description Several own Spock tests started to fail after upgrade junitbom from to RC master with groovylangMissingMethodException No signature of method static spockutilEmbeddedSpecRunnertests is applicable for argument types values It would be good to make Spock junit Platform compatible Eg method name can still contain parentheses Condition failed with Exception resulttestsstartedlisttestDescriptordisplayName an actor named fred age groovylangMissingMethodException No signature of method static spockutilEmbeddedSpecRunnertests is applicable for argument types values Possible solutions use LjavalangObject getAtjavalangString usejavautilList groovylangClosure usejavalangClass groovylangClosure wait waitlong at orgspockframeworksmokeparameterizationUnrolledFeatureMethodsmethod name can still contain parenthesesUnrolledFeatureMethodsgroovy spockutilEmbeddedSpecRunnerSummarizedEngineExecutionResults ce resultsorgjunitplatformtestkitengineEngineExecutionResults at orgspockframeworksmokeparameterizationUnrolledFeatureMethodsmethod name can still contain parenthesesUnrolledFeatureMethodsgroovy Caused by groovylangMissingMethodException No signature of method static spockutilEmbeddedSpecRunnertests is applicable for argument types values Possible solutions use LjavalangObject getAtjavalangString usejavautilList groovylangClosure usejavalangClass groovylangClosure wait waitlong more All the tests seem to be related to parameterization How to reproduce Bump junitbom to orgjunitjunitbom RC and call gw check Additional Environment information OpenJDK Linux spock from master Additional information Failed tests FeatureMethods are nevertheless reported with their original name FeatureMethods can have names containing any characters in embedded specs PendingFeatureExtensionSpec PendingFeature includes reason in exception message RequiresExtension verifyExecution DataTables cell references are evaluated correctly in the methods name UnrolledFeatureMethods can unroll a whole class at once UnrolledFeatureMethods expressions in naming pattern that cant be evaluated are prefixed with Error UnrolledFeatureMethods if creation of a data provider fails feature isnt unrolled UnrolledFeatureMethods iterations of an unrolled feature foo are named foo foo etc UnrolledFeatureMethods method name can act as naming pattern UnrolledFeatureMethods method name can still contain parentheses UnrolledFeatureMethods methodlevel unroll annotation wins over classlevel annotation UnrolledFeatureMethods naming pattern in Unroll annotation wins over naming pattern in method name UnrolledFeatureMethods naming pattern may refer to data variables UnrolledFeatureMethods naming pattern may refer to feature name and iteration count UnrolledFeatureMethods naming pattern supports property expressions UnrolledFeatureMethods naming pattern supports zeroarg method calls UnrolledFeatureMethods variables in naming pattern whose value is null are replaced correctly groovy def NPE given ListString list Mock when def len listget length then len listget hello Fails with javalangNullPointerException Cannot invoke method length on null object We loose any information that this was caused by a wrong argument to the mock If there are Unmatched invocations then they should be reported as well Too few invocations for listget hello invocations Unmatched invocations ordered by similarity listget One or more argumentss didnt match argument expected false Issue description Unrolling a test only executes the first test If i remove the Unroll everything works If i remove the queryValue from the method name everythings works How to reproduce groovy import spocklangSpecification import spocklangUnroll class UnrollBugSpec extends Specification Unroll void Valid Mandatory QueryValue queryValuesString queryValues Boolean returnStatus expect assert returnStatus where queryValues returnStatus from to true from to true to from divisionstest teamstest productstest false Additional Environment information JavaJDK java version openjdk version OpenJDK Runtime Environment Corretto build b OpenJDK Bit Server VM Corretto build b mixed mode Groovy version Build tool version Gradle Operating System Windows IDE IntelliJ Buildtool dependencies used GradleGrails testImplementationorgspockframeworkspockcore groovy Added flexible support for Java Removed methods for unsupported Java versions Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend A try to Spock M with Groovy RC manually playing with Groovy dependencies results in very cryptic error message Task compileTestGroovy FAILED startup failed Could not instantiate global transform class orgspockframeworkcompilerSpockTransform specified at jarfilespockcore M groovy jarMETAINFservicesorgcodehausgroovytransformASTTransformation because of exception javalangreflectInvocationTargetException error Having Groovy and Spock groovy returns much more verbose Task compileTestGroovy FAILED startup failed Could not instantiate global transform class orgspockframeworkcompilerSpockTransform specified at jarfilespockcore groovy jarMETAINFservicesorgcodehausgroovytransformASTTransformation because of exception orgspockframeworkutilIncompatibleGroovyVersionException The Spock compiler plugin cannot execute because Spock groovy is not compatible with Groovy For more information see Spock artifact filespockcore groovy jar Groovy artifact filegroovy jar error It would be good to try to detect that incompatibility earlier and fail with more verbose error message for Spock and Groovy Btw as at least basic tests pass with Spock groovy SNAPSHOT and Groovy RC maybe it would be good to allow to run Spock M with Groovy x to facilitate testing that configuration before Spock can be built and tested with Groovy 