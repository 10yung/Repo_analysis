I try to evaluate swc parser to replace my usage of babelparser Is the AST compatible with babelparser result Also babelparser has an estree plugin which I use to generate estree compatible AST tree Does swc have something equivalent to produce estree output Im attempting to use swc with a project on windows and getting the following error ERROR in tsappsindextsx Module build failed from nodemodulesswcloadersrcindexjs Error MYDIRECTORY nodemodules swc core native indexnode is not a valid Win application MYDIRECTORY nodemodules swc core native indexnode at ObjectModuleextensionsnode internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at Modulerequire internalmodulescjsloaderjs at require internalmodulescjshelpersjs at Objectanonymous C Development JNC royalappsuite src Web nodemodules swc core indexjs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at Modulerequire internalmodulescjsloaderjs at require internalmodulescjshelpersjs at Objectanonymous C Development JNC royalappsuite src Web nodemodules swcloader src indexjs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs multi tsappsindextsx app Im using windows cmd prompt not WSL node v x version webpack The binary is win x should I be using bit node Or downloading rust myself to build it for x The installation instructions are a little unclear there I interpret it to mean the npm install command will install a prebuilt binary if it can If you want to or need to build your own you should install rust If you need to install rust on windows go to rustuprs but that installing rust is not necessary if you are using the prebuilt binary I took a look and couldnt find any mention of this anywhere React has replaced reacthotloader with with a new Fast Refresh system which can be integrated with watch builds babel and webpack in order to do Hot Module Reloading Im still working out exactly where the boundaries are myself in terms of what work to support this belongs in swc and what belongs in react or an external webpack plugin But I wanted to at least get this on the radar as a Feature Request Cannot use webpacks resolvealias resolve resolvesource Error failed to parse config file data did not match any variant of untagged enum Rc multi There have been a decent amount of bugs related to the AST node start and end being incorrect I think we could help prevent regressions and make future node positions a little more testable if we develop a new test for this Perhaps beyond the current test that uses numbers it would be useful to create two typescript files one jsx one nonjsx that hold all the different possible AST node combinations Then a json test file that has all the AST nodes but only contains the type text and any children Maybe something like the following json perhaps wed skip the root module text because that would just be long and not so useful type FunctionDeclaration text function test name type Identifier text test params etc other statements go here The file would be autogenerated similar to the inputtsjson files but this would make it extremely easy to visually identify problems with node span lengths Thoughts Im working on it Heres some code from the TypeScript compiler in checkerts ts const filterFn t Type boolean operator SyntaxKindEqualsEqualsToken t areTypesComparablet valueType isCoercibleUnderDoubleEqualst valueType t areTypesComparablet valueType The following error occurs not yet implemented reparseexpraspat patty BindingPat expr ArrowArrowExpr span Span lo BytePos hi BytePos ctxt params IdentIdent span Span lo BytePos hi BytePos ctxt sym Atomt typeinline typeann None optional false body ExprBinBinExpr span Span lo BytePos hi BytePos ctxt op left CallCallExpr span Span lo BytePos hi BytePos ctxt callee ExprIdentIdent span Span lo BytePos hi BytePos ctxt sym AtomareTypesComparable typedynamic typeann None optional false args ExprOrSpread spread None expr IdentIdent span Span lo BytePos hi BytePos ctxt sym Atomt typeinline typeann None optional false ExprOrSpread spread None expr IdentIdent span Span lo BytePos hi BytePos ctxt sym AtomvalueType typedynamic typeann None optional false typeargs None right CallCallExpr span Span lo BytePos hi BytePos ctxt callee ExprIdentIdent span Span lo BytePos hi BytePos ctxt sym AtomisCoercibleUnderDoubleEquals typedynamic typeann None optional false args ExprOrSpread spread None expr IdentIdent span Span lo BytePos hi BytePos ctxt sym Atomt typeinline typeann None optional false ExprOrSpread spread None expr IdentIdent span Span lo BytePos hi BytePos ctxt sym AtomvalueType typedynamic typeann None optional false typeargs None isasync false isgenerator false typeparams None returntype None This also fails with babel but is fine with the TS compiler Note this happens because of the type annotation on the variable declaration see here how this compiles Edit Actually in swc removing the type annotation doesnt fix the problem This is low priority I wanted to make the following recommendations on the AST node names for import specifiers ImportDefault ImportDefaultSpecifier ImportStarAs ImportStarAsSpecifier or ImportNamespaceSpecifier as babel calls it ImportSpecific ImportNamedSpecifier The comments for these should also probably be updated ex on ImportDefault it should go from eg import foo from modjs to eg foo in import foo from modjs Note that the export specifier names should probably be switch to be consistent as well if we decide to do this NamespaceExportSpecifier ExportNamespaceSpecifier DefaultExportSpecifier ExportDefaultSpecifier NamedExportSpecifier ExportNamedSpecifier Hello Im exploring SWC as a base for a build tool One of the things that Id like to have is a dependency graph starting at an entry point module Ideally it could be separate CLIAPI operation that emits dependency graph Is this something SWC could have We have switched from Babel to swc which worked fine In the next PR of our project suddenly all elements created with documentcreateElementtagnameconst were turned into br elements which of course breaks the whole website This problem only occured on a MacBook in all browsers but in no browser on a Windows laptop We had to temporarily switch back to Babel which made it work again because we had no time to investigate the issue I plan to update this Issue later with more information which is why I do not expect any bug fixing work to this issue right now Our project is currently private but I want to try to reproduce the error from scratch later 