There is no way to tell which upgrade upgrades the range of a unitweapon There is no easy way to check which upgrade upgrades the speed of a unit not even the upgrades function does that You can get the speed of a unit through the player but thats obviously a very clunky interface for some usages There is currently no way to get the attack speed upgrade status of a unitweapon Where does this go to begin with unit or weapon The unit type doesnt have an easy way to get the attack upgrade for the unit type You first have to get the ground weapon then the air weapon if that failed Then you can check the weapon for the upgrade type As far as I know both the air and ground weapons share upgrade levels Resolution Expander stretches the visible field of the StarCraft Window past x This would be nice to have because the larger field of view makes it easier to see what your bot is doing SSCAIT has been using Resolution Expander for years This also demonstrates that it works correctly with BWAPI draw commands I tried to inject the winner AI from AIIDE starcraft competition with BWAPI into SC ver without compilation Simply by modifying the setting file in order to redierct tha winner AI dll path to bwapi wont work Bot crashes at the very beginning of single game It would be very nice if the designers of new BWAPI could include those top AI into the upcoming version and make it possible for common players to enjoy games between AI and human What if remastered SC could have such top AI features ie maybe It will be nice to not have to reimplement all of the frontend API Example Established bots should already check for valid positions and coordinates before calling any of the BWAPI methods Right now a bot author checks for a valid TilePosition then calls the relevant BWAPI methods in order to retrieve the state of the game and each of those methods duplicates the slow redundant checks if a valid tile position too This hurts performance Besides calling a method like isVisible with an invalid TilePosition could lead to hard to catch logic bugs where false is assumed to mean its not visible so send a unit to explore that particular TilePosition So my suggestion either expose the data member variable as public not optimal or remove the slow if TilePositionx y return false checks or create an unsafe version of each of those methods eg isVisibleUnafe PS One can always implement their own wrappers around the unsafe methods and duplicating the safe check everywhere while removing the check from the safer methods is not possible Eg the Java wrappers could be more newbiefriendly by adding such checks to the low level BWAPI methods