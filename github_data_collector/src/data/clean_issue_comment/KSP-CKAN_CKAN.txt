Background Operating System Windows Home build CKAN Version KSP Version with both expansions installed No manual changes to GameData Problem Upon installing any mod via CKAN it immediately gets marked as AD in the interface as if it were an autodetected manuallyinstalled mod Steps to reproduce Install CKANexe in the KSP game install folder Start CKAN open File Manage KSP Instances this will list no instances Add the KSP instance where the CKANexe file resides as a new instance and set it as default Use CKAN to install any mod Mod will install without error but will immediately be marked AD Expected behavior CKANinstalled mods should be marked appropriately Motivation and problems Lots of annoyances in GUI code The CKANGUI source folder is almost entirely unorganized with all GUI files just dumped there together which makes it hard to find a given class The Main class includes lots of controls and code that belong in independent controls which can make it hard to find a given control or even remember which ones are or arent in Main GUIuser is used as a global variable but it will not work properly if MainInstance isnt set which is bad Similarly GUIUser relied on MainInstance for most of its functions which is not guaranteed to be ready to fulfill them GUI and ConsoleUI each have their own separate logic for recommendations and suggestions MainModInfo and MainAllModVersions are not part of the Main class but they have Main in their names anyway ManageKspInstances is the only dialog whose name doesnt end in Dialog HintTextBox has a Designercs file but it also created and added a control in its constructor outside that file which isnt how thats supposed to work The recommendations tab uses MonitorWait and MonitorPulse to signal completion whereas the provides tab uses TaskCompletionSource even though both are used for the same purpose Changes New subdirs of GUI Model files that just hold data for other classes to use Main files for the Main class Controls files providing UserControls Dialogs files providing Forms except Main which is special Plugins logic for CKAN plugins New controls broken out of Main into the Controls directory Changeset the change set tab ChooseProvidedMods the tab for choosing provided mods ChooseRecommendedMods the tab for choosing recommendations and suggestions Wait the tab for the progress bar This required refactoring ModInfos downloading code it now fires an event when you click the download button which triggers a callback in Main that drives Wait GUIuser is deleted and replaced by MaincurrentUser passed around as needed GUIUsers constructor now accepts as parameters the two objects it needs to provide its functions Main and Wait GUIs recommendations business logic is moved to Cores MainInstallerFindRecommendations and used by both GUI and ConsoleUI Behold ModInfo AllModVersions and ManageKspInstancesDialog HintTextBoxDesignercs sets up all the contained controls The recommendations tab is switched over to TaskCompletionSource The files are now easier to browse Main is smaller and easier to browse and several important chunks of UI are encapsulated and provide their functionality via explicit public interfaces rather than having their controls changed from all over the place There should be no functional changes here other than ConsoleUI now including Supported By modules thanks to the shared FindRecommendations function There are some subtle visual changes in the new controls to make them work like the DeleteDirectories control with respect to layoutscaling since the Anchor property doesnt work well in UserControls Considered and not done possibly for future Break the mod list out into a control would be cleaner but probably really complicated Share FindRecommendations with CmdLine Problem Recent netcore builds have been failing Error The assembly name is invalid Today my Ubuntu upgraded from Mono to Mono and suddenly I was affected locally by the same problem for all builds Cause See cakebuildcake it looks like a check was added to Mono in monomono to reject full pathnames for assemblies but unfortunately parts of MicrosoftCodeAnalysis closed source appear to pass full pathnames which breaks Cake This will probably need to be fixed on the Mono side but I dont yet have enough information for a useful report The netcore builds were set to mono latest instead of a specific version like everything else so when this apparently broken version shipped we started using it immediately Changes To fix the error Now our netcore builds use Mono instead of latest General upkeep Now we build on bionic instead of xenial Versions of Mono older than are dropped through are added and well ship the one from NuGet and Cake and CakeSemVer versions are updated netcore version is updated from to Problem As suggested by yalov on the Discord sometimes two mods technically can be installed and work together but they do mostly the same thing and usually the user would only want one or the other For example KerbalNRAP and UtilityWeight both add parts that can be used to simulate a payload of a specific mass They can be installed together without crashing KSP but it would be redundant and unnecessary Other examples KER VOID BasicOrbit Autopilot mods WaterLaunchSites KSCHarbor Suggestions This could be handled with a new discourages relationship intended to connote the opposite of recommends json identifier KerbalNRAP discourages name UtilityWeight This would have the following effects Downgrade a recommendation checked by default to a suggestion unchecked by default if it is discouraged by any of my installed or installing mods presumably with a message somewhere When selecting discouraged mods on the modlist show a highlight and a warning that looks similar to a conflict but can be bypassed the apply changes button isnt disabled A similar warning andor confirmation prompt if a discouraged mod is pulled in as a dependency Problem We have various mod authors delisted from CKAN due to installation issues Our policy is that authors of FOSS mods can ask for their mods not to be installed by the CKAN client and we will honour those requests But it is a problem for users to have to download and track manually installed mod versions separately Suggestions We need a system to assist users to manually install a mod and have its metadata tracked by the CKAN client Ideally we would have a rightclick option on the mod version list which would download the mod versions zip file and then launch two separate processes a File system browser window targeted at the KSP instances GameData folder and a compression tool window opening the zip file The user can then look at the instructions in the zip file and copy files wherever they need to go The CKAN client should then open a dialog box asking the user if they successfully installed the mod which would let us set the mod up as installed though without any installed files Wed need a way to indicate that the mod has been manually installed but we would be able to use the mod version for dependency purposes Once we have this system in place we can look at adding a new tag to the metadata which would force this system to be used for a given mod and we could then clarify the deindexing policy and return to a more inclusive strategy I use the CKAN CLI when Im on my OSX laptop It works fine but its quite annoying to have to pass the ksp whateverinstall parameter to every call that needs it Very often I find myself making the calls from within that KSP installs directory anyway Setting a default install works but is annoying especially when I need to change installs and as a modder I often find myself with several for testing different things So it would be great if the CKAN CLI would autodetect an install if the current working directory is in that install or a subdirectory This would take lower priority than the default install or directly specifying the ksp option I think I see how to implement this just wanted to get buyin before I started trying to work on it At game startup When starting a game with a number of mods which according to CKAN are not compatible a dialog is show with all the mods listed in a single line of text Its hard to read Would be better to show a listbox or at least a text field with one mod per line Background Operating System Windows Linux CKAN Version KSP Version Have you made any manual changes to your GameData folder ie not via CKAN poop Problem Describe the bug While cleaning up old version epochs in KSPCKANCKANmeta I realized that epoching a historical version breaks its automatic archiveorg fallback from There were a few in that PR that are only available on archiveorg since theyve been removed from GitHub and they failed to download when the validation scripts attempted to install them Checking the mods were there just without an epoch Steps to reproduce Add a netkan for a mod with a redistributable license Allow multiple versions of this mod to be indexed its releases will be added to archiveorg automatically Remove the original downloads for some of the older versions the CKAN client will still be able to download them from archiveorg Edit the ckan files in CKANmeta to change the mods epochs Now the fallback doesnt work Expected behavior Somehow find the original uploads to archiveorg Suggestions Strip epochs when archiving archiveorg would have only the pure upstream version numbers Run a conversion on the currently archived mods to remove epochs Strip epochs out when the download fallback code runs We would need to figure out a migration strategy clients from before and after step would expect different fallback URLs so steps and would need to run at a time that would be minimally disruptive to users Problem Knowing when there are new mod releases has been a long standing request was opened in Mid Historically this has been challenging for two reasons Not all of sources for metadata contain this information One of the early design philosophies behind Netkan was that anyone could produce a ckan from a netkan in exactly the same manner as our bots This had the side effect of it being stateless which has meant especially with the old infrastructure that populating a field with a current time stamp would mean it would always change Since we have a number of ways we can tackle this and a solution should be straight forward Suggestions Spec Add releasedate to the schema that complies with the following Field assumed to be UTC Full date time ISO compliant T Example json specversion comment flagmod identifier DogeCoinFlag name Dogecoin Flag releasedate T abstract Such flag Very currency Wow description Adorn your craft with your favourite cryptocurrency To the m n author daviddwk license CCBY resources homepage repository version v kspversion any download downloadsize downloadhash sha BFB B E AC E B EB C B EF F DF sha CF CE F F FB CF C E CDA A D AD A A C C D F FD BA downloadcontenttype applicationzip xgeneratedby netkan NetKAN It is desirable to keep Netkan as the source of the truth It persists the ability for anyone to produce metadata that matches exactly what the bot produces As a consequence It would be responsible for populating the releasedate field This would enable us to initially use the system timestamp but also enhance our transformers to retrieve this information from the relevant APIs where available An optional releasedate flag on Netkan means we can switch this on when were ready Indexer Currently the indexer is using an MD generated by SQS to compare with the file on disk HebaruSan has already put a lot of work into creating a Ckan class we can lean on to do an equivalence check For example if an existing ckan is found load it in as a Ckan and compare it to the received inflation The Ckan class to have a custom eq method that compares the objects but ignores the releasedate This keeps Netkan as the source of the truth Allows us to write to disk exactly as its received from Netkan Keeps our existing logic we just compare inflated existing instead of the MD s We can do this in advance to enabling the releasedate flag This is trivial to write a test case for and doesnt require any complicated logic changes to the indexer Manual Metadata We still need to update manual data occasionally so we should add some tests to our CI to ensure that we dont accidentally overwrite the release data field if it exists or submit metadata without the field if it doesnt Historical Metadata Historical metadata should be treated as a separate exercise We can dig out reasonable approximations from the git history and populate them in all in one pass disabling webhookscanceling the tests as needed We did something similar when we populated the historical download hashes Summary It would be wonderful to get this long standing request added so I welcome any critique and suggestions 