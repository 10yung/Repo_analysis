With Moq we used to be able to do the following to capture a NaturalIdentifier NHibernate criterion added to an NHibernate criteria cs MockICriteria criteriaMock var naturalIds new ListNaturalIdentifier criteriaMockVerifyx xAddCaptureInnaturalIds var naturalId naturalIdsSingle After upgarding to the naturalIds list is empty after passing the Verify call resuting in an exception from the Single call As a workaround weve had to change our test to instead work on the Invocations collection cs var addInvocation criteriaMockInvocations Singlex xMethodName nameofICriteriaAdd var naturalId NaturalIdentifieraddInvocationArguments The workaround work but feels less type safe since we have to match the method cal by name rather than by the expression tree or do our own expression three handling to get the MethodInfo from an expression Hi moq contributors This is to let you know that I will be on vacation until midMarch As I am currently the only active collaborator on this repository any currently open issues and pull requests will likely remain open until I get back My apologies for the delay besides travel preparations and regular daytime work there unfortunately wasnt enough time to get everything resolved before my departure Have a happy new year everyone and see you in cc kzu hi I have an issue with Moq NUnit below is the issue SystemNullReferenceException Object reference not set to an instance of an object at CastleDynamicProxyAbstractInvocationThrowOnNoTarget at CastleDynamicProxyInternalCompositionInvocationEnsureValidTarget at CastleProxiesInvocationsIInterceptorgetNameInvokeMethodOnTarget at CastleProxiesIInterceptorProxygetName at BwinPosAPIModulesUnitTestsAuthenticationInterceptorsGenericInterceptorFixturecMapLoginSubStatesCheckSubErrorCodeIsMappedSuccessb IInterceptor x in D Projects Platform PosAPI Test Modules UnitTests Authentication Interceptors GenericInterceptorFixturecsline at SystemLinqEnumerableWhereArrayIterator MoveNext at BwinPosAPIModulesUnitTestsAuthenticationInterceptorsGenericInterceptorFixtureMapLoginSubStatesCheckSubErrorCodeIsMappedSuccess in D Projects Platform PosAPI Test Modules UnitTests Authentication Interceptors GenericInterceptorFixturecsline I have an interface defined like this public interface IInterceptor string Name get I want to get all implementations of this and test that none of them contains an empty or null name and some other stuff In my setup I have var serviceCollection new ServiceCollection serviceCollectionTryAddSingletonp staticDataServiceMockObject serviceCollectionTryAddSingletonp cacheFactoryMockObject serviceCollectionAddAllImplementationsOfIInterceptor var sv serviceCollectionBuildServiceProvider var interceptors svGetServicesIInterceptor AddAllImplementations method is just a simple one public static IServiceCollection AddAllImplementationsOfTInterface this IServiceCollection serviceCollection ServiceLifetime lifetime ServiceLifetimeSingleton where TInterface class var types GetAllImplementationsTInterface foreach var type in types serviceCollectionAddnew ServiceDescriptortype type lifetime serviceCollectionAddnew ServiceDescriptortypeofTInterface p pGetRequiredServicetype lifetime return serviceCollection private static IEnumerableType GetAllImplementationsTInterface where TInterface class return AppDomainCurrentDomainGetAssemblies SelectManyx xGetTypes Wherex typeofTInterfaceIsAssignableFromx xIsInterface xIsAbstract Selectx x basically I am adding some dependencies and at the end i get all interceptors from the ServiceProvider store them in a variable and do a foreach on all of them like below foreach var interceptor in interceptorsWherex xNameEqualsFAKE Do testing here I tried to remove the Where condition for a moment but still I get SystemNullReferenceException Object reference not set to an instance of an object at CastleDynamicProxyAbstractInvocationThrowOnNoTarget at CastleDynamicProxyInternalCompositionInvocationEnsureValidTarget at CastleProxiesInvocationsIInterceptorgetNameInvokeMethodOnTarget at CastleProxiesIInterceptorProxygetName at BwinPosAPIModulesUnitTestsAuthenticationInterceptorsGenericInterceptorFixtureMapLoginSubStatesCheckSubErrorCodeIsMappedSuccess in D Projects Platform PosAPI Test Modules UnitTests Authentication Interceptors GenericInterceptorFixturecsline Any idea why this might happen Do u think that my interface name IInterceptor might cause issues with dynamicproxy or something Funny fact this method fails only if I run the whole project If i run only this one it does not fail Also I tried in Visual Studio and both behave the same way The Moq version was and then i updated to but still no luck This closes At the moment new MockT and MockOfT are similar but if you need use non generic constructor you must use new MockT If you are using the MockOfT syntax in the project change all for this will be a problem Add support for this is a very little change and give more functionality to the MockOfT syntax It is possible to use Verifiable on a conditional setup I mean a setup with When preceding the setup method but the Verify method doesnt actually verify it Example var mock new MockICloneable mockWhen true Setupo oClone Verifiable mockVerify No exception mockSetupo oClone Verifiable mockVerify MockException setup was not matched As I have seen in the source code it looks like the method SetupCollectionToArrayLive ignores all setups with a condition For me it would be convenient that the Verify method verifies also the setup if the condition is valid during the verification public class UnitTest Fact public void TestMethod Arrange Guid itemId GuidNewGuid var session new MockNHibernateISession var repo new Repository sessionSetupx xQueryOverItemWhereb bId itemIdListReturnsnew ListItem Act var res repoGetByIditemId sessionObject Verify class Repository public IListItem GetByIdGuid id ISession session var items sessionQueryOverItem Whereb bId id List return items public class Item public Guid Id get set and above getting SystemNullReferenceException Object reference not set to an instance of an object and beyond works Attached is a sample solution See exception when running the test Downgrade to and see error is gone UnitTestProject zip Example csharp mockSetupm mMethodItIsAnystring ItIsAnyItIsAnyType ItIsAnyint Callbackstring arg object arg int arg which is arguably more userfriendly than having the following which we have today csharp mockSetupm mMethodItIsAnystring ItIsAnyItIsAnyType ItIsAnyint CallbackIInvocation invocation My goal is similar to so I am using VerifyAll to detect unused setups However there are a few very common setups done in common helpers that I dont want to detect It would be great to have some way to optout of VerifyAll in specific cases eg by using Verifiablefalse