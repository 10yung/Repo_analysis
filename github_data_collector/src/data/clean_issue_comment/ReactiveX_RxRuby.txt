 Observablesubscribeon incorrectly referred to the latter but the class was actually called the former Looking at similar implementation it seems to me to be more in line with a subscription than a disposable so I updated the class description to match Added a simple test that uses subscribeon and discovered that the test still failed when using the CurrentThreadScheduler which seemed to be fixed by switching to curly brace syntax for the lambda in unsubscribe Fix what I assume is a typo Hope the added test is inline with existing ones since I havent had the time to get into the tests Fixes ReactiveXRxRuby how can I install by gem The following code generates this traceback varlibgems gemsrx librxsubjectsbehaviorsubjectrb in block in onnext private method checkunsubscribed called for RxBehaviorSubject x b d NoMethodError from varlibgems gemsrx librxsubjectsbehaviorsubjectrb in synchronize from varlibgems gemsrx librxsubjectsbehaviorsubjectrb in onnext from behaviorexamplerb in main require rx subject RxBehaviorSubjectnew subjectonnext subjectasobservablesubscribe puts hello when run using ruby p armlinuxgnueabihf on a raspberrypi Is there a reason the method is marked private It seems to work fine if I comment out the private keyword When no block is specified the combinelatest operator should combine its two streams into an array a pair of elements Currently combinelatest errors when no block is specified ruby require rx require pp left RxSubjectnew right RxSubjectnew lo leftasobservable ro rightasobservable locombinelatestrosubscribe x pp x leftonnext rightonnext leftonnext rightonnext Error output truncated rx librxoperatorsmultiplerb in block levels in combinelatest undefined method call for nilNilClass NoMethodError In the RxJS implementation elements from both streams are combined into an array by default js let left new RxSubject let right new RxSubject let lo leftasObservable let ro rightasObservable locombineLatestrosubscribex consolelogx leftonNext rightonNext leftonNext rightonNext As expected this prints In RxRuby this is also the behavior with the static version of combinelatest ie RxObservablecombinelatestlo rosubscribe x pp x works as expected see implementation here This patch updates the instance version of combinelatest to match the static version and makes locombinelatestrosubscribe x pp x work as expected by combining the elements into an array RxRuby should implement the ReactiveX Sample operator Ive found Sample in the RxNET library useful in my NET projects and I find myself needing it in my current Ruby project You can see the RxNET implementation here Ive hacked up something that seems to have the behavior Im looking for but it is very untested and probably has some leaks and incorrect corner cases ruby module RxObservable def samplesampler sample samplermap e e true merged RxObservablemergeselfmap e e false sample mergedzipmergedskip select l r r map l r l end end I looked into implementing Sample myself natively in the library and contributing a pull request but after looking at the source for some other operators I think it would take far too much time for me to contribute a correct implementation The project has stop developing for a while Does the develop team keep update this project in the future There seems to be a bug in the Ruby implementation of startwith The two examples below one written using RxRb the other using RxPy construct the same observable emitting a number every two seconds To the observable two observers are subscribed which print the received value in colour While the Python code prints a series of numbers in both colours the Ruby code only produces yellow numbers the blue observer never receives its input Ruby example ruby require colorize require rx observable RxObservable interval startwith observablesubscribe i puts itoscolorizeyellow observablesubscribe i puts itoscolorizeblue while Threadlistsize Threadlist Threadcurrent each join end Python example python import asyncio import rx import time from termcolor import colored class ColouredObserver def initself colour selfcolour colour def onnextself x selfprintGot s x def onerrorself e selfprintGot error s e def oncompletedself selfprintSequence completed def printself what printcoloredwhat selfcolour observable rxObservableinterval startwith observablesubscribeColouredObserveryellow observablesubscribeColouredObserverblue timesleep 