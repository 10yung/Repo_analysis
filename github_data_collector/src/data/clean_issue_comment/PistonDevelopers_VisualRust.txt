 Im using visual studio community and Id like to use Visual Rust with it I installed the bin VisualRustSetup Release VisualRustSetup exe artifact dated December th from I couldnt find any other version for VS It installed just fine with no errors When I started VS back up I dont see anything differentno new templates or project types or anything VS does think its installed based on going to toolsextensions it just doesnt seem to do anything If I go to add new project or add new file and looksearch for rust nothing However if I open a rs file in VS it does syntax highlight it but go to definition doesnt work and I cant build I was looking for the latest version which supports Cargo build So I downloaded the build VS But it fails to install with the error The file is not a valid VSIX package Visual Studio Community The plugin installs ok But no Rust project template under New Project category Ive installed visual rust I have rustcexe and some other files installed here C Users steve cargo bin But when I try to build rust project in msvc I get this error C Program Files x MSBuild VisualRust VisualRustRusttargets error No Rust installation detected You can download official Rust installer from How is the installation detected How can I fix this I may have discovered why only master branch release builds were being built git LFS quotas git clone q branchmaster C projects visualrust Downloading build zaexe MB Error downloading object build zaexe ff e Smudge error Error downloading build zaexe ff e d b f e cb b c a f a ffea cc batch response This repository is over its data quota Purchase more data packs to restore access Apparently my fork counts against your quota Sorry about that build accounts for MB lib accounts for MB in the form of two z files apparently containing mingw installs As a temporary measure Ive disabled appveyor builds from my repository It looks like there may be ways to enable caching Some Options Bribe donate to whoever runs PistonDevelopers to get our quota increased Hack up appveyors build scripts to cache lfs stuff might not be sufficient Switch to an external package manager chocolatey lpg likes vcpkg Just stop using git lfs and put things directly into the repository What its used for MinGW build zaexe used to unpackage lib z libi releaseposixdwarfrtv rev z bit MinGW libx releaseposixsehrtv rev z bit MinGW We then repackage gdb and some dependencies from mingw directly into the vsix as I understand it to enable some built in debugging This could be axed in favor of Windows Subsystem for Linux Win Alternatively it might be worth seeing if it might be preferable to rely on one of the other existing integrations of gdb into visual studio instead of rolling our own StrongNamer buildStrongNamer MonoCecilMdbdll buildStrongNamer MonoCecilPdbdll buildStrongNamer MonoCecilRocksdll buildStrongNamer MonoCecildll buildStrongNamer StrongNamerdll I believe these allow us to use unsigned dependencies from signed assemblies Might be worth seeing if we can get rid of the dependency by signing more of the projects There are also nuget packages Trying to uninstall the latest VSIX the VSIX Installer crashed with an error about a missing file C PROGRAM FILES X MICROSOFT VISUAL STUDIO PREVIEW ENTERPRISE COMMON IDE LICENSEtxt If I add that file manually it will uninstall Seems like the VSIX has a relative path somewhere instead of an absolute one Not sure why itd be looking for a file in that directory otherwise Have you considered signing the binaries dlls setup exes and VSIXs with an Authenticode certificate to help prevent tampering in your official builds Its easy to integrate into a CI build as well with the code signing service I wrote Happy to help set that up for you if you want and it supports all of the file types this project needs With the latest AppVeyor version for Im getting exceptions on build PM SystemNullReferenceException Object reference not set to an instance of an object at VisualRustBuildRustcLogRustcMessageRustcMessageJson msg String rootPath TaskLoggingHelper log at VisualRustBuildCargoBuildExecuteCargob Object sender DataReceivedEventArgs e at SystemDiagnosticsProcessOutputReadNotifyUserString data at SystemDiagnosticsAsyncStreamReaderFlushMessageQueue at SystemDiagnosticsAsyncStreamReaderGetLinesFromStringBuilder at SystemDiagnosticsAsyncStreamReaderReadBufferIAsyncResult ar at SystemIOStreamReadWriteTaskInvokeAsyncCallbackObject completedTask at SystemThreadingExecutionContextRunInternalExecutionContext executionContext ContextCallback callback Object state Boolean preserveSyncCtx at SystemThreadingExecutionContextRunExecutionContext executionContext ContextCallback callback Object state Boolean preserveSyncCtx at SystemIOStreamReadWriteTaskSystemThreadingTasksITaskCompletionActionInvokeTask completingTask at SystemThreadingTasksTaskFinishContinuations at SystemThreadingTasksTaskFinishStageThree at SystemThreadingTasksTaskFinishStageTwo at SystemThreadingTasksTaskFinishBoolean bUserDelegateExecuted at SystemThreadingTasksTaskExecuteWithThreadLocalTask currentTaskSlot at SystemThreadingTasksTaskExecuteEntryBoolean bPreventDoubleExecution at SystemThreadingTasksTaskSystemThreadingIThreadPoolWorkItemExecuteWorkItem at SystemThreadingThreadPoolWorkQueueDispatch at SystemThreadingThreadPoolWaitCallbackPerformWaitCallback VS has the CPS project system available a fully managed replacement to the legacy project systems before Its the one NET Core and NET Standard projects default to and the ones that have the ultralight syntax Virtually nothing needs to be in it since everything needed is provided by an SDK set of targetsprops The project file would essentially be mostly blank The implicit properties would exclude the target vs and other directories as is common in VS not showing build artifacts in the IDE It would be really nice if Rust was supported in this way I imagine that a set of Rust targets could be created that are mostly wrappers around cargo to do the build This would be different than the VS approach but I believe is ultimately cleaner and faster I suspect that someone from davkeans team could provide some guidance as to how to do this The project system itself is open source 