Im not convinced that the justTypenameQuery implementation is worth the graphqltag dependency see but if byte savings is the goal we can drop the query operation type and use the shorthand query syntax Thanks Intended outcome Run npm i after pulling repo locally on windows Expected install succeeds and Im able to run npm run watch Actual outcome npm i fails with this error verbose pkgid fsevents verbose cwd d v src apolloclient verbose WindowsNT verbose argv C Program Files nodejs nodeexe C Program Files nodejs nodemodules npm bin npmclijs i verbose node v verbose npm v error code EBADPLATFORM error notsup Unsupported platform for fsevents wanted osdarwinarchany current oswin archx error notsup Valid OS darwin error notsup Valid Arch any error notsup Actual OS win error notsup Actual Arch x I looked around stackoverflow for a solution and apparently the recommended approach is to remove fsevents from packagejson So I gave that a try reran npm i and then tried to run npm run watch This failed with the following error d v src apolloclientnpm run watch apolloclient beta watch d v src apolloclient npx tscwatch onSuccess npm run postbuild npx installed in s Cannot find module typescriptbintsc Require stack C Users v AppData Roaming npmcache npx nodemodules tscwatch lib tscwatchjs C Users v AppData Roaming npmcache npx nodemodules tscwatch indexjs npm ERR code ELIFECYCLE npm ERR errno npm ERR apolloclient beta watch npx tscwatch onSuccess npm run postbuild npm ERR Exit status How to reproduce the issue Pull repo locally on Windows Run npm i Run npm run watch Versions System OS Windows Binaries Node C Program Files nodejs nodeEXE npm C Program Files nodejs npmCMD Browsers Edge Suggested solutions Does fsevents need to be a direct dependency of apolloclient I couldnt find any usages of it in the codebase It seems like jest requires it but it pulls fsevents in as an optional dependency so the install doesnt fail on Windows Can we either remove it from apolloclients packagejson or make it an optional dependency Change the scripts in packagejson to call tsctscwatchrimraf etc directly instead of going through npx ie diff build npx tsc build tsc Ive already made these changes locally and verified its building Im happy to send a PR if youre OK with this approach Upgraded to beta everything worked until I did a hard restart of my createreactapp Upon running my app I receive the following error nodemodulesapolloreacthookslibreacthooksesmjs Module not found Cant resolve apolloclient in Usersbstromdevreviewtoolnodemodulesapolloreacthookslib Versions System OS macOS Mojave Binaries Node nvmversionsnodev binnode Yarn usrlocalbinyarn npm nvmversionsnodev binnpm Browsers Chrome Firefox Safari npmPackages apolloclient beta beta apolloreacthooks apolloreacttesting apollocacheinmemory apollolink apollolinkerror apollolinkhttp apolloserver Im having a problem getting data with useQuery I have calls with useQuery for the same query using a different variable the problem is that if when returning data some values of the returning array of the calls are identically the first call is getting updated with the values of the second call automatically losing the data it should have As you can see on the image at first it return an array of values and other of values of them are same values of the array of values but it get updated automatically for no reason getting both calls with array of same values img width alt src The useQuery calls are const listFront useQueryGETLISTITEMSBYLISTNAMEQUERY variables listName propsrouterquerylistName isReverse false const listReverse useQueryGETLISTITEMSBYLISTNAMEQUERY variables listName propsrouterquerylistName isReverse true I guess I will solve it by just calling graphql for only list and separating it on front end but still its so weird graphql just update your query to make it same as other query because values of query are included on the other query This might have negative consequences for users that are relying on babelplugingraphqltag or a similar transform to remove graphqllanguageparser from their app bundles Thanks Great work on Hey I dont know if this is the right place to request this I have found a feature in AWS Appsync and their GraphQL implementation that would be really nice to have when working with GraphQL and Apollo Client Basic example of what AWS Appsync generates for you based on a schema like this type Todo model id ID name String description String you can generate an Angular service file likes this servicets import Injectable from angularcore import API graphqlOperation from awsamplifyapi import GraphQLResult from awsamplifyapilibtypes import as Observable from zenobservable export type CreateTodoInput id string null name string description string null export type UpdateTodoInput id string name string null description string null export type DeleteTodoInput id string null export type ModelTodoFilterInput id ModelIDFilterInput null name ModelStringFilterInput null description ModelStringFilterInput null and ArrayModelTodoFilterInput null null or ArrayModelTodoFilterInput null null not ModelTodoFilterInput null export type ModelIDFilterInput ne string null eq string null le string null lt string null ge string null gt string null contains string null notContains string null between Arraystring null null beginsWith string null export type ModelStringFilterInput ne string null eq string null le string null lt string null ge string null gt string null contains string null notContains string null between Arraystring null null beginsWith string null export type CreateTodoMutation typename Todo id string name string description string null export type UpdateTodoMutation typename Todo id string name string description string null export type DeleteTodoMutation typename Todo id string name string description string null export type GetTodoQuery typename Todo id string name string description string null export type ListTodosQuery typename ModelTodoConnection items Array typename Todo id string name string description string null null null nextToken string null export type OnCreateTodoSubscription typename Todo id string name string description string null export type OnUpdateTodoSubscription typename Todo id string name string description string null export type OnDeleteTodoSubscription typename Todo id string name string description string null Injectable providedIn root export class APIService async CreateTodoinput CreateTodoInput PromiseCreateTodoMutation const statement mutation CreateTodoinput CreateTodoInput createTodoinput input typename id name description const gqlAPIServiceArguments any input const response await APIgraphql graphqlOperationstatement gqlAPIServiceArguments as any return CreateTodoMutationresponsedatacreateTodo async UpdateTodoinput UpdateTodoInput PromiseUpdateTodoMutation const statement mutation UpdateTodoinput UpdateTodoInput updateTodoinput input typename id name description const gqlAPIServiceArguments any input const response await APIgraphql graphqlOperationstatement gqlAPIServiceArguments as any return UpdateTodoMutationresponsedataupdateTodo async DeleteTodoinput DeleteTodoInput PromiseDeleteTodoMutation const statement mutation DeleteTodoinput DeleteTodoInput deleteTodoinput input typename id name description const gqlAPIServiceArguments any input const response await APIgraphql graphqlOperationstatement gqlAPIServiceArguments as any return DeleteTodoMutationresponsedatadeleteTodo async GetTodoid string PromiseGetTodoQuery const statement query GetTodoid ID getTodoid id typename id name description const gqlAPIServiceArguments any id const response await APIgraphql graphqlOperationstatement gqlAPIServiceArguments as any return GetTodoQueryresponsedatagetTodo async ListTodos filter ModelTodoFilterInput limit number nextToken string PromiseListTodosQuery const statement query ListTodosfilter ModelTodoFilterInput limit Int nextToken String listTodosfilter filter limit limit nextToken nextToken typename items typename id name description nextToken const gqlAPIServiceArguments any if filter gqlAPIServiceArgumentsfilter filter if limit gqlAPIServiceArgumentslimit limit if nextToken gqlAPIServiceArgumentsnextToken nextToken const response await APIgraphql graphqlOperationstatement gqlAPIServiceArguments as any return ListTodosQueryresponsedatalistTodos OnCreateTodoListener ObservableOnCreateTodoSubscription APIgraphql graphqlOperation subscription OnCreateTodo onCreateTodo typename id name description as ObservableOnCreateTodoSubscription OnUpdateTodoListener ObservableOnUpdateTodoSubscription APIgraphql graphqlOperation subscription OnUpdateTodo onUpdateTodo typename id name description as ObservableOnUpdateTodoSubscription OnDeleteTodoListener ObservableOnDeleteTodoSubscription APIgraphql graphqlOperation subscription OnDeleteTodo onDeleteTodo typename id name description as ObservableOnDeleteTodoSubscription I know that you can generate a service based on an existing GraphQL query like this but I am looking for a way to generate like the above example based on a schema file heres what I have this project started as the base react skeleton with typescript ts import ApolloClient from apolloboost const client new ApolloClient uri UserscalebcushingIdeaProjectsmyappsrcindextsx TypeScript error in UserscalebcushingIdeaProjectsmyappsrcindextsx Argument of type uri string is not assignable to parameter of type ApolloClientOptionsunknown Object literal may only specify known properties and uri does not exist in type ApolloClientOptionsunknown TS const client new ApolloClient uri ReactDOMrenderApp documentgetElementByIdroot this is the typescript definition ts export default class ApolloClientTCacheShape implements DataProxy link ApolloLink store DataStoreTCacheShape cache ApolloCacheTCacheShape readonly queryManager QueryManagerTCacheShape disableNetworkFetches boolean version string queryDeduplication boolean defaultOptions DefaultOptions readonly typeDefs ApolloClientOptionsTCacheShape typeDefs private devToolsHookCb private resetStoreCallbacks private clearStoreCallbacks private localState constructoroptions ApolloClientOptionsTCacheShape stop void watchQueryT any TVariables OperationVariablesoptions WatchQueryOptionsTVariables ObservableQueryT TVariables queryT any TVariables OperationVariablesoptions QueryOptionsTVariables PromiseApolloQueryResultT mutateT any TVariables OperationVariablesoptions MutationOptionsT TVariables PromiseFetchResultT subscribeT any TVariables OperationVariablesoptions SubscriptionOptionsTVariables ObservableFetchResultT readQueryT any TVariables OperationVariablesoptions DataProxyQueryTVariables optimistic boolean T null readFragmentT any TVariables OperationVariablesoptions DataProxyFragmentTVariables optimistic boolean T null writeQueryTData any TVariables OperationVariablesoptions DataProxyWriteQueryOptionsTData TVariables void writeFragmentTData any TVariables OperationVariablesoptions DataProxyWriteFragmentOptionsTData TVariables void writeDataTData anyoptions DataProxyWriteDataOptionsTData void actionHookForDevToolscb any void requestRawpayload GraphQLRequest ObservableExecutionResult initQueryManager QueryManagerTCacheShape resetStore PromiseApolloQueryResultany null clearStore Promiseany onResetStorecb Promiseany void onClearStorecb Promiseany void reFetchObservableQueriesincludeStandby boolean PromiseApolloQueryResultany extractoptimistic boolean TCacheShape restoreserializedState TCacheShape ApolloCacheTCacheShape addResolversresolvers Resolvers Resolvers void setResolversresolvers Resolvers Resolvers void getResolvers Resolvers setLocalStateFragmentMatcherfragmentMatcher FragmentMatcher void so I can see why its not compiling but it baffles me that it doesnt match the documentation Versions System OS macOS Mojave Binaries Node usrlocalbinnode Yarn IdeaProjectsmyappnodemodulesbinyarn npm usrlocalbinnpm Browsers Chrome Firefox Safari npmPackages apolloreacthooks apollo apolloboost Hello Ive been using your client implementation for some time now but always in the imperative implementation I see your docs only provide examples of the declarative form using components Im not sure if this has been discussedasked yet but would you consider providing imperative documentation to your websiterepository Or if extensive documentation already exists do you know where I can find it I just felt like I should ask because I feel this could be of use to the community at large Specifically docs for code like the below would be nice const withAuctionBids graphqlQUERYAUCTIONBIDS name auctionBids options auctionData id variables input auctionId id fetchPolicy networkonly const withData compose graphqlACTIVEUSERSQUERY options fetchPolicy networkonly props ownProps data return data subscribeToNewData onAddedUsers onRemovedUsers return datasubscribeToMore document ACTIVEUSERSSUBSCRIPTION updateQuery prev subscriptionData const totalUsers addedUsers removedUserIds subscriptionDatadata if addedUsers onAddedUsers onAddedUsersaddedUsers if removedUserIds onRemovedUsers onRemovedUsersremovedUserIds if totalUsers undefined prev undefined return Objectassign prev activeUsers Objectassign prevactiveUsers totalUsers totalUsers return null getUserData name userData options fetchPolicy networkonly ActiveUsers Ive sort of been forced to learn this convention by asking other developers in person and copying the convention from other places in the repo Ive been working on This can be pretty difficult to get the hang of Thanks David This is a follow up from resolved issue Summary When using a TypePolicy in a cacheredirect style see code below and a cachemiss occurs the query should then generate a network request to get the data per this thread In actual fact the request just returns with an empty object Setup A TypePolicy references UserListView from a UserDetailView Query per below Initiate a request for a Userbypk with a cachefirst fetch policy export const UserTypePolicy TypePolicies Query fields Userbypk keyArgs id readexistingData args toReference return existingData toReference typename User id argsid Intended outcome If User entities are not available in cache a network request should be initiated to get the data Actual outcome An empty result is returned and not network request is generated How to reproduce the issue Setup TypePolicy per above Initiate a DetailView Query before a ListView query See that a network request is not triggered and an empty result is returned Versions System OS macOS Binaries Node usrlocalbinnode Yarn usrlocalbinyarn npm usrlocalbinnpm Browsers Chrome Safari npmPackages apolloclient linkwebclientnodemodulesapolloclient beta apolloreacthooks linkwebclientnodemodulesapolloreacthooks beta Happy new year 