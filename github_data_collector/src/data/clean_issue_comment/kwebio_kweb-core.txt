When running my KWeb application in debug mode from the IDE I would like to have the browser reload the page when there are code changes APIDiff can apparently detect breaking API changes in Java and I hope Kotlin libraries While it may be premature right now at some point it would be nice to integrate this into our continuous integration process I have some issues with Elementtext or Elementtext My snippet is like new divattributes mapOfid to mainstatsnew divclassesrow statsrownew divclassescolmd colsm statnew divclassesdatanew divnew spanclassesnumbertextvalue projectsCounttoString spantextvalue Projects and the resulting javascript is something like documentgetElementByIdKosetAttributeclass numberdocumentgetElementByIdKotextContentdocumentgetElementByIdKotextContent var newEl documentcreateElementspan I think it would be correct if the curly brace after would be shifted to a new line hence a break could fix this maybe Any thoughts EDIT Forgot to say The error is SyntaxError Unexpected identifier and Unexpected token EDIT After taking another look it looks like an unwanted nesting happens with textContent Currently when InputElementvalue or InputElementsetValue are used to connect a KVar to an input elements value or TextArea or other suitable element type the entire value contents is sent to the server with each change While not a problem for small text fields this could become a serious problem for larger text fields The solution is to modify the relevant code such that it will only send the difference between the previous value and the new value rather than the entire value Hello this is my first post on kwebcore Im quite excited about the idea of merging server and clientside programming I tested your TODOexample where I saw that the websocket gets quite verbose when filling the input text field caused by the inputonkeypress event handler code inputonkeypress ke if kecode Enter etc Woudnt that be a case for onImmediate I first thought As I read on issue onImmediate works with prerecording DOMchanges As you say in the docs the event handler for an onImmediate must limit itself to simple DOM modifications Do I suppose correctly that even a simple IF statement like above cannot be used in onImmediate because of its nature to just record the effects when executed once on the server side You should include this in your warning in the docs If positive is there no other way of offering a better onImmediate experience for example writing a Kotlin compiler plugin that is triggered on compiling the onImmediate method calls and compiles the onImmediate callback function parameters to a javascript file that gets included into the website or let the programmers put the onImmediate callbacks in a separate Kotlin compile unit that gets compiled into JavaScript code But there must be some magic such that the onImmediate method does not execute the callback but now has to add the right function pointer into the javascript event call Advantage The IDE could then better restrict the functions that are allowed to be called Disadvantage Separation for the programmer between Kotlin HTML generation and onImmediate callbacks into different compile units How would that work with query parameters I also did not find a convenient way to retrieve query parametes I ended up with fun WebBrowserqueryParameters parseQueryStringhttpRequestInforequestedUrlsubstringAftersubstringAfter F However I was not able to modify the url such that it hit the route on the server Seems that Github Issues is coming along meanwhile there have been rumors of the longterm stability of TravisCI the free service we currently use We should investigate whether a migration over is a good idea and ifso do it related In the event of a websocket connection failure Kweb should exponentially backoff in the event that it is unable to establish a websocket connection and display a clear error if repeated attempts to establish the connection are unsuccessful People have been searching for validation