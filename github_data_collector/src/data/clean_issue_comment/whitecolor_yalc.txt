 yalc version pre yarn version npm node v This is my project directory types indexdts CHANGELOGmd READMEmd packagelockjson packagejson src tsconfigjson watchjs yarnlock When I execute the command yalc publish I got those error node UnhandledPromiseRejectionWarning RangeError path should be a pathrelatived string but got typesindexdts at throwError Usersheierconfigyarnglobalnodemodulesyalcnodemodulesignoreindexjs at checkPath Usersheierconfigyarnglobalnodemodulesyalcnodemodulesignoreindexjs at Ignoretest Usersheierconfigyarnglobalnodemodulesyalcnodemodulesignoreindexjs at Ignoreignores Usersheierconfigyarnglobalnodemodulesyalcnodemodulesignoreindexjs at Usersheierconfigyarnglobalnodemodulesyalcsrccopyjs at Arrayfilter anonymous at Objectanonymous Usersheierconfigyarnglobalnodemodulesyalcsrccopyjs at step Usersheierconfigyarnglobalnodemodulesyalcsrccopyjs at Objectnext Usersheierconfigyarnglobalnodemodulesyalcsrccopyjs at fulfilled Usersheierconfigyarnglobalnodemodulesyalcsrccopyjs node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code No issues with yalc pre Hi I have a monorepo with about components and Im using yarn workspaces to deal with dependencies my folder structure and yarn are like this javascript folder structure packagescomp packagescomp packagesjson packagescomp packagescomp packagesjson packagescomp packagescomp packagesjson packagesjson workspaces packages Then I have a test application in another directory So to get everything working I would link the componentes one by one running yarn link inside their folder In the application run yarn install and after that I used to link all the packages comp comp comp to the application using yarn link comp Finally when Iv run the application I could change the components and test them perfectly But with that process I only had the package linked and not is dependencies so if I go to comp and update one of theyr dependencies the link will not find the new dependency After a little search Iv came across yalc and tried to use it but without success With this structure I have how should I use yalc Bumps jsyaml from to details summaryChangelogsummary Sourced from jsyamls changelog Fix possible code execution in already unsafe load Security fix safeLoad can hang when arrays with nested refs used as key Now throws exception for nested arrays Fix noArrayIndent option for root level Added noArrayIndent option details details summaryCommitssummary aadd released da ecf Browser files rebuild b f e Merge pull request from nodecatoString e afbf Fix possible code execution in already unsafe load d ce e released f c Browser files rebuild a ef Restrict data types for object keys b e Fix test name e fc released a Browser files rebuild Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Fixes This fixes where a package cannot be added or pushed multiple times in a long running node process since the initial package store cache is always used The intention of the cache is to cache the store across the two calls in addts which this modification achieves Were using yalc via node instead of running it via the commandline and have noticed that changes made after an initial push never make it to the installation dirs After debugging the code Ive found that the cause is the implementation of copyDirSafe which caches the contents of the package in memory which ignores any subsequent published changes to the package in the yalc store This works fine when run via the commandline since a package will only be addedpushed to a repo once in yalcs lifetime however this is not the case when running in node This allows the types in the repo to be consumed by third parties Upon running the clean command yalc installations clean mypackage I have already removed the module from my dependent project yalc remove mypackage The packages still lying in the global yalc folder Not sure if this is an issue Can somebody help Hi there Im getting the following error when running yalc add yalc add mypackage node UnhandledPromiseRejectionWarning Error absolute srcpath does not exist at symlinkPathsSync Usersastorijeconfigyarnglobalnodemodulesfsextralibensuresymlinkpathsjs at createSymlinkSync Usersastorijeconfigyarnglobalnodemodulesfsextralibensuresymlinkjs at addBinScript Usersastorijeconfigyarnglobalnodemodulesyalcsrcaddjs at Objectanonymous Usersastorijeconfigyarnglobalnodemodulesyalcsrcaddjs at step Usersastorijeconfigyarnglobalnodemodulesyalcsrcaddjs at Objectnext Usersastorijeconfigyarnglobalnodemodulesyalcsrcaddjs at fulfilled Usersastorijeconfigyarnglobalnodemodulesyalcsrcaddjs node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code This does not happen for all packages Maybe coincidentally but the package whose install fails has a bin script It installs as expected when commenting out those lines Run with the following versions yalc version pre yarn version Installed with yarn global add yalc Yalc is a godsend thank you so much It would be extemely useful for me to customize package location by dir switch or something in both add and publish methods In my particular case I would need that to do some advanced CI jobs I would like to store yalc packages in directory shared between all my projects That way I could work with yalc like with private npm repository I may implement it in PR if you agree