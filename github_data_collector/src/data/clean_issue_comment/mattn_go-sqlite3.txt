windows linkexe running gcc failed exit status golink o file not recognized File format not recognized collect exe error ld returned exit status how to resolve this problem and cgo If the interrupted SQL operation is an INSERT UPDATE or DELETE that is inside an explicit transaction then the entire transaction will be rolled back automatically Imagine the following contrived situation pseudocode go tx dbBegin defer txRollback ctx contextWithTimeouttimeSecond this times out so sqlite interrupt is called txExecContextctx INSERT INTO Foo VALUES this gets executed outside a transaction txExecINSERT INTO Foo VALUES noop txRollback This should result in the database being totally unmodified However as per the docs sqlite interrupt would have automatically aborted the explicit transaction Thus the second insert is actually executed in an implicit transaction The Go standard library calls Exec on the Conn There is no Exec on the Tx interface since the assumption is that the Conn is stateful Unfortunately this is mostly caused by sqlite interrupt not really lining up with what context cancellation is supposed to mean The best solution I can think of is to return sqlErrTxDone or something similar if the actual SQLite transaction has been aborted but the user has not called Rollback on the Tx yet Note that this would apply to both the methods of Conn and the methods of Stmt I have not found the next pragmas loc mutex and txlock in the list of pragmas So if they are only used by gosqlite please indicate it why If dbBeginTxctx nil context is cancelled too fast BEGIN statement can be completed inside DB but we still try to cancel it with sqlite interrupt In such case we get contextCancelled or contextDeadlineExceeded from exec but operation really completed Connection returned into pool and returns cannot start a transaction within a transaction error for next dbBeginTx call how If we get context cancelled on BEGIN statement call ROLLBACK to cleanup connection state Dont return cancellation error from exec if operation completed without sqlite interrupt testing Added unittest which reproduces issue Assuming we run this piece of code ctx cancel contextWithCancelctx tx err dbBeginTxctx nil it is possible to get at the same time contextCancelled error and started transaction This will happen only if we cancel context very fast This happens because context cancellation is inherently racy as performed not in same goroutine where statement is executed Proposed fix Join sqlite go and sqlite go go Join sqlite testgo and sqlite go testgo Remove x and x from travisyml This package doesnt seem to work with go modules Heres a simple recipe in Docker to make it easy to reproduce Please tell me what Im doing wrong docker run it rm golangalpine go apk add buildbase go mkdir src go cd src src cat maingo package main import fmt githubcommattngosqlite func main fmtPrintlnHello world src export CGOENABLED src go mod init examplecom go creating new gomod module examplecom src go get githubcommattngosqlite go finding githubcommattngosqlite v incompatible go downloading githubcommattngosqlite v incompatible go extracting githubcommattngosqlite v incompatible src go run build examplecom cannot load githubcommattngosqlite module githubcommattngosqlite latest v incompatible found but does not contain package githubcommattngosqlite go sqlite nil null int integer int integer float float bool integer byte blob string text timeTime timestampdatetime Date and Time Datatype SQLite does not have a storage class set aside for storing dates andor times Instead the builtin Date And Time Functions of SQLite are capable of storing dates and times as TEXT REAL or INTEGER values TEXT as ISO strings YYYYMMDD HHMMSSSSS REAL as Julian day numbers the number of days since noon in Greenwich on November BC according to the proleptic Gregorian calendar INTEGER as Unix Time the number of seconds since UTC Applications can chose to store dates and times in any of these formats and freely convert between formats using the builtin date and time functions I would really appreciate it if you could add the spellfix extension Thank you See There the user had defined a function that took a string and SQLite tried to pass NULL to it That resulted in an error from this library stating argument must be BLOB or TEXT Changing the function to take a string instead didnt work and resulted in an error stating dont know how to convert to string Please update the private callbackArg func used by RegisterFunc to properly handle an input type of kind reflectPtr