 Add headers xforwardedfor xforwardedport and xforwardedproto commonly used in load balancer setups Im sure if this is work the effort but about a year ago I tried to add HTTP to the Version enum and we hit the problem with exhaustive matching That was independently fixed by adding a NonExhaustive variant see In Rust the nonexhaustive attribute was landed so is there any benefit switching to that Ill start by demonstrating that CI is broken on latest master due to a new deprecation and go on to fix those things with edits here It seems the URI parser stumbles with URNs A simple test to reproduce rust fn main use httpuriUri let uri urnisbn parseUri println uri Produces the output shell testcase ErrInvalidUriInvalidAuthority The authority is only present when the scheme is followed by otherwise the parser should be parsing everything after the first as the path Python gets this right and Go parses this as Opaque instead of Host but still successfully parses Python python urlparseurnisbn ParseResultschemeurn netloc pathisbn params query fragment Go go url urlParseurnisbn fmtPrintlnHost Opaque urlOpaque Host Opaque isbn This is question more than an issue How do I serialize the httpRequest struct into its RFC byte array representation currently allows most bytes in the range or and expects these bytes to roundtrip safely through request and response headers The required code change is probably just to with more documentation lines to change than code lines Motivation A few AWS services like SQS IAM EC use applicationxwwwformurlencodedbased RPC calls While this encoding is typically handled by the SDKs this code needs to exist somewhere An offbydefault feature flag enabling a TryFrom conversion from urlUrl allows for building complex queries using urlUrls builder methods but then converting to httpUri at request construction time Since all of https builders implement accept a TryFromT in httprequestBuilders case a Uri TryFromT this feature allows for passing a urlUrl into a request builder I have a crate with the following http dependencies from cargo tree grep http after the update from http to http v http v http v httpbody v http v httparse v http v http v actixhttp v http v http v httparse v actixhttp v http v http v actixhttp v actixhttp v When I compile my project I get the following error one of many of the same type return EitherAfutureerreinto the trait stdconvertFromhttpuriInvalidUri is not implemented for errorError help the following implementations were found errorError as stdconvertFrom stdioError errorError as stdconvertFromfailureerrorError errorError as stdconvertFromhttperrorError errorError as stdconvertFromhttpuriInvalidUri and others note required because of the requirements on the impl of stdconvertIntoerrorError for httpuriInvalidUri where errorError is my error type even though I clearly have the following implementation rust impl FromhttpuriInvalidUri for errorError fn frome httpuriInvalidUri Self ErrorinvalidargmsgEntityUri e Is this due to the fact that some of my dependencies depend themselves on a previous version of http Is there a way to solve this 