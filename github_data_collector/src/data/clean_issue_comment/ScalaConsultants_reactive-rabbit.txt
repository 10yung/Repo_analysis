 val lolExchange Exchangebooklollol Direct durable true val lolSubscriber Subscriber Message connectionpublishlolExchangename class MessageBroadcasterActorsub Subscriber Message extends Actor import comgooglecommonnetMediaType implicit def toMsgrl RelatedProduct Message new Message body rlproductIdtoStringgetBytesStandardCharsetsUTF contentType SomeMediaTypePLAINTEXTUTF mode Persistent override def receive Receive case x RelatedProduct subonNexttoMsgx Im using the code above but I can only see the first message on rabbit Am I doing something wrong or is it a bug If there is a contenttype header in a Rabbit message which is not successfully parsed by Guavas MediaType class then an exception is thrown Although this is an invalid content type I would think that maybe this should be logged as a warning and the contentType field in the Message class just be set to a None Am happy to try and put together a PR if people agree that this is an issue Sample Exception comrabbitmqclientimplDefaultExceptionHandler Consumer QueueSubscriptionchannelAMQChannelamqpxxxxxxx queuexxx subscriberakkastreamimplfusingActorGraphInterpreterBoundarySubscriber fef dc demand buffersize amqctagzIlVYhaNIQ bmDQCbeZUA method handleDelivery for channel AMQChannelamqpxxxxxxx threw an exception for channel AMQChannelamqpxxxxxxxx javalangIllegalArgumentException Could not parse applicationjson at comgooglecommonnetMediaTypeparseMediaTypejava at ioscalacamqpimplConversionsanonfuntoMessage applyConversionsscala at ioscalacamqpimplConversionsanonfuntoMessage applyConversionsscala at scalaOptionmapOptionscala at ioscalacamqpimplConversionstoMessageConversionsscala at ioscalacamqpimplConversionstoDeliveryConversionsscala at ioscalacamqpimplQueueSubscriptionhandleDeliveryQueueSubscriptionscala at comrabbitmqclientimplConsumerDispatcher runConsumerDispatcherjava at comrabbitmqclientimplConsumerWorkServiceWorkPoolRunnablerunConsumerWorkServicejava at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava Caused by javalangIllegalStateException at comgooglecommonbasePreconditionscheckStatePreconditionsjava at comgooglecommonnetMediaTypeTokenizerconsumeCharacterMediaTypejava at comgooglecommonnetMediaTypeparseMediaTypejava more Rather than importing the global ExecutionContext allow the caller to specify the ExecutionContext Changed the minor version to since this is a breaking change to the API All the caller needs to do to maintain the existing behaviour however is import the global ExecutionContext if it has not already been imported as evidenced by the changes to the tests in this commit add functional test for handleShutdown using scalamock add a note into the readme for handleShutdown and handleBlocking Ref RabbitMQ Java Client ShutdownListener BlockedListener I made some changes to make the auto recovery work Ignore a channel shutdown event if it is a recoverable channel that wasnt shut down by an application Try to close the channel in handleCancel method QueuePublisher registers shutdown listeners to QueueSubscription Simplify QueueSubscription termination Reactive streams JVM specification mandates some part of code to be executed synchronously but quickly and some other asynchronously I think it is good idea to allow to pass ExecutionContext in each publish and consume method as implicit with default ExecutionContextImplicitsglobal Currently messages seem to be autoACKed after they are pulled off the queue and submitted downstream Have you given any thought to incorporating a way to ACK messages after theyve been fully processed by the stream If its something you think would be worthwhile and you have some ideas on how to implement I can take a crack at a PR I gave this template a try I start the app with activator run then kill the rabbitmq server and start it back up again Nothing happened even though I have the setting recoveryinterval s Am I missing something I tried debugging it and saw that you never set factorysetAutomaticRecoveryEnabledtrue Doing that helps but there are still issues with comrabbitmqclientAlreadyClosedException channel is already closed due to clean channel shutdown 