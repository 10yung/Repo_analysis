There is an excel workbook contains date value or displayed as and in the cells Try to read this workbook via xlwings v and pywin v using following code import xlwings as xw ws xwBookddemo xlsxsheets print wsrangeb b value Then got such error prompts Traceback most recent call last File Dpycharmtestpmypackageepy line in module print wsrangeb b value File D pycharm b venv lib sitepackages xlwings mainpy line in value return conversionreadself None selfoptions File D pycharm b venv lib sitepackages xlwings conversion initpy line in read pipelinectx File D pycharm b venv lib sitepackages xlwings conversion frameworkpy line in call stageargs kwargs File D pycharm b venv lib sitepackages xlwings conversion standardpy line in call cvalue crangerawvalue File D pycharm b venv lib sitepackages xlwings mainpy line in rawvalue return selfimplrawvalue File D pycharm b venv lib sitepackages xlwings xlwindowspy line in rawvalue return selfxlValue File D pycharm b venv lib sitepackages xlwings xlwindowspy line in getattr v getattrselfinner item File D pycharm b venv lib sitepackages win com client dynamicpy line in getattr ret selfoleobjInvokeretEntrydispid invoketype ValueError microsecond must be in Solution Down grade pywin to v or lower version there is no problem with these values Have tested the case on four computers all got same conclusion Error in pywin v OK in pywin v This is a feature request also open to helping contribute to add touch input to the pywin API It appears there is an equivalent input method to mouseevent InjectTouchInput which would allow pywin to emulate touch This would enable actions like autoopen of the onscreen keyboard on touch Services created against pywin release are broken in virtualenv under python s new DLL security policy It looks similar to the issue addressed in Any attempt to launch services report unable to find pywintypes dll So far the best solution weve found is to copy the dlls from the sitepackages pywin system folder into the sitepackages win folder Hi Can you add support to ARM architecture I tried to compile it but it failed for me with the below message LINK fatal error LNK invalid base address x E A ARM image cannot have base address below GB Thanks Sofian Theres an implicit relative import in adsis initpy that makes that subpackage unimportable on Python For reasons that are nonobvious the to build step isnt always fixing this automatically The Py k wheels for are correctly rewritten to use an explicit relative import but and have unchanged source code and fall over As pywin no long supports Python it should be fine to just do the same fix in the source code itself I got the following warning running pywin on python C Users user AppData Local Programs Python Python lib sitepackages win com client makepypy SyntaxWarning is not with a literal Did you mean if path is not and not ospathexistspath It seems it should be if path and not ospathexistspath Today I updated some packages in my Anaconda Python bit Windows environment and some things broke in my application Version of Python and pywin While trying to find the problem I noticed that the pywin package had been updated in the conda repositories from version to While inspecting further I installed version from condaforge and the problem persisted It only got back to normal when downgrading again to version from the main repository Steps to reproduce the problem The problem occurs when using SAPs GUI Scripting API to automate the UI In particular the first problem I met was when marking a checkbox With the SAP Logon window open run python from win comclient import Dispatch GetObject Session setup objRotSAPGUI GetObjectSAPGUI application objRotSAPGUIGetScriptingEngine session applicationConnections Sessions sessionStartTransactionIW sessionfindByIdwnd usrchkDYOFNSelected True This fails Expected behavior and actual behavior The last line was running without problems before the update Now it errs with the following traceback pythontraceback Traceback most recent call last File ipythoninput aba caa de line in module sessionfindByIdwnd usrchkDYOFNSelected True Aberto File C Users u fs papps anaconda lib sitepackages win com client dynamicpy line in setattr selfoleobjInvokeentrydispid invoketype value comerror N mero de par metros inv lido None None My system is in Portuguese The error message roughly translates to Invalid number of parameters Further tests indicate that I can read the property fine python sessionfindByIdwnd usrchkDYOFNSelected True I can update the parameter if I use lowercase python sessionfindByIdwnd usrchkDYOFNselected True No error The API documentation I was using states that the property name should start with upper case though I know some problems like this are relatively common Unfortunately some newer online documentation also suggests that the property name may start with lowercase So is this a regression in pywin or is it something that was flexible before but is now more strict in which case I might have to change all my code to conform Hello First of all thank you very much for this project Very useful It seems these following InfoLevel are not implemented in win serviceQueryServiceConfig SERVICECONFIGTRIGGERINFO SERVICECONFIGLAUNCHPROTECTED SERVICECONFIGPREFERREDNODE I suppose there is the same problem for win serviceQueryServiceConfig Do you know if these features will be implemented soon at least partially Im using the version of pywin I have seen this issue open here too More details Hi I pipinstalled pywin on my machine and everything works fine I tried it in a virtualenv and I get this error when importing pywintypes ModuleNotFoundError No module named pywintypes I should also note that pip show pywin shows it is installed also inside the virtualenv and the dll does exist inside myvenv Lib sitepackages pywin py winamd egg pywin system pywintypes dll Python bit on Windows x pywin virtualenv Possibly related though it seems a different issue to me Thanks We are developing a Python automation on top of our company s software which supplies some COM Interfaces When trying to send a COM Object to some functions an address access error is raised in the server because the pointer parameter to the object s interface is being sent with an offset This problem only happens when using pythoncom I think this may be a PythonCOM restrictionbug because if these same problematic examples are replicated in VB they run without any problem My guess is that this error is being generated in the parameter conversion mechanism of pythoncom MakeVariantToObj where the reference pointer to the proper interface of the expected object parameter is lost and somehow replaced by one of its inherited IDispatch or IUnknown causing the pointer to be off by an offset For example running the following code from Python AppRootNodeCreateStringNodeTestName AppRootNode Where App is a COM Object for the main application returned by win comclientDispatch RootNode is a property of App which returns a DataNode COM object CreateStringNode is a DataNode method with the following header function CreateStringNodeconst Name WideString const Owner LWDataNode XDim Integer YDim Integer Attributes LWDataNodeAttributes LWDataNode safecall Owner parameter is declared as VTUNKNOWN in the makepy generated InvokeTypes for CreateStringNode Has the following results when debugged in the server first GetRootNode returns TLWIDataNodeD D as ILWDataNode second GetRootNode returns TLWIDataNodeD D as ILWDataNode CreateStringNode is called on TLWIDataNodeD D as ILWDataNode Owner param in CreateStringNode is TLWIDataNodeD D as ILWDataNode As you can see the pointer sent as parameter has an offset of x Not all functions which receive a COM Object as parameter fails The difference we found between problematic and nonproblematic functions is how the parameter is being defined Along the lines of the previous example nonproblematic functions which also receive a DataNode as parameter define it as LWDataNode While problematic functions define the parameter as LWDataNode only no pointer If this Issue evolves we can work on a Demo server which replicates this behavior so you can run proper tests Also I can post more examples of problematic and nonproblematic functions Windows Version Windows Python Version pywin Version 