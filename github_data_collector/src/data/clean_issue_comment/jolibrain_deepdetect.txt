Hi I noticed an issue with chain endpoint with an incomplete output in the following case Given this request ressource predict calls service facedetection data parameters input connector image keeporig true output confidencethreshold bbox true mllib gpu true net testbatchsize parentid id facecrop action type crop service age parameters input connector image keeporig true output best confidencethreshold mllib gpu true net testbatchsize parentid facecrop if no faces are detected then the final output will be like statuscode msgOKheadmethodchaintime body But I expected at least to have the list of images in the response like predict ressource even if theres in the end classes is empty like for instance status code msg OK head method chain time body predictions uri classes Configuration DeepDetect version commit b a ce bf eccac b b dd on Docker ubuntu based image GPU Nvidia T with Cuda FIX ymin and ymax were previoulsy swapped ie ymin was ymax this patch correctly set ymin and ymax so that it respects caffe detectionouput layer semantics as for instance in when using output of detection models if ymin and ymax are used as is then problems are to be exepcted but if they are used with somthing like height absyminymax then this patch will not change anything Configuration Version of DeepDetect Locally compiled on Ubuntu LTS Commit shown by the server when starting Branch Master a b c ee dbde d d e c b a GPUS x Nvidia GTX Titan X Maxwell Your question the problem youre facing I have an issue when I want to make a chain prediction using a pipeline consisting of Detection Crop Classification The issue occurs when the crop layer tries to crop bounding boxes that are out of the image Error message if any steps to reproduce the problem Launch Dede Api call dede port Serveur log output DeepDetect commit a b c ee dbde d d e c b a api info Running DeepDetect HTTP server on localhost Create generic detection model curl X PUT d mllibcaffe descriptionobject detection service typesupervised parameters input connectorimage height width mllib nclasses gpu true gpuid net testbatchsize model repositorymodelsgenericdetection Create generic classification model curl X PUT d mllibcaffe descriptionobject detection service typesupervised parameters input connectorimage height width mllib nclasses gpu true gpuid net testbatchsize model repositorymodelsgenericclassification Then make a chain call Api call curl X POST d chain resource predict calls data parameters input connector image keeporig true mllib gpu true net testbatchsize output bbox true confidencethreshold service genericdet idfacecrop action type crop parentid facecrop parameters input connector image keeporig true mllib gpu true output best service classification Serveur log output testbboxes info number of calls testbboxes info executing predict on service genericdet testbboxes info executing action crop OpenCV Error Assertion failed roix roiwidth roix roiwidth mcols roiy roiheight roiy roiheight mrows in Mat file buildopencvL vuMjopencv dfsgmodulescoresrcmatrixcpp line api error POST chaintestbboxes If I make a prediction using only the detection service I have some bounding boxes out of ranges Here are a few examples bboxymin xmax xmin ymax catcl prob bboxymin xmax xmin ymax catcl prob The generic detection model is not well trained on purpose to see what happens when it generates some weird bounding boxes It would be nice to have a check for the bounding box before cropping in order to avoid this output logits in raw measure Configuration Building on Ubuntu in docker CPU only with CaffeTF enabled Deepdetect v Steps to reproduce the problem cmake DUSETFON DUSETFCPUONLYON DUSEDLIBON DUSEDLIBCPUONLYON DUSECAFFECPUONLYON make Build error optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowcoreframeworkdevicebaseh In member function virtual tensorflowAllocator tensorflowDeviceBaseGetAllocatortensorflowAllocatorAttributes optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowcoreframeworkdevicebaseh error invalid initialization of reference of type const string aka const stdcxx basicstringchar from expression of type const int LOGFATAL GetAllocator is not implemented In file included from optdeepdetectbuildcaffeddsrccaffeddincludecaffecommonhpp from optdeepdetectbuildcaffeddsrccaffeddincludecaffeblobhpp from optdeepdetectbuildcaffeddsrccaffeddincludecaffecaffehpp from optdeepdetectsrcbackendscaffecaffeinputconnsh from optdeepdetectsrcimginputfileconnh from optdeepdetectsrcbackendstftflibcc optdeepdetectbuildcaffeddsrccaffeddincludecaffelloggingh note in passing argument of CaffeLogger LOGconst string inline CaffeLogger LOGconst stdstring severity In file included from optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowcoreframeworkopkernelh from optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowcoreframeworkfunctionh from optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowcoregraphgraphh from optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowccframeworkopsh from optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowccopsconstoph from optdeepdetectsrcbackendstftfinputconnsh from optdeepdetectsrcimginputfileconnh from optdeepdetectsrcbackendstftflibcc optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowcoreframeworkdevicebaseh In member function virtual tensorflowAllocator tensorflowDeviceBaseGetScopedAllocatortensorflowAllocatorAttributes tensorflowint optdeepdetectbuildtensorflowccsrctensorflowcctensorflowccbuildtensorflowtensorflowcoreframeworkdevicebaseh error invalid initialization of reference of type const string aka const stdcxx basicstringchar from expression of type const int LOGFATAL Device does not implement GetScopedAllocator In file included from optdeepdetectbuildcaffeddsrccaffeddincludecaffecommonhpp from optdeepdetectbuildcaffeddsrccaffeddincludecaffeblobhpp from optdeepdetectbuildcaffeddsrccaffeddincludecaffecaffehpp from optdeepdetectsrcbackendscaffecaffeinputconnsh from optdeepdetectsrcimginputfileconnh from optdeepdetectsrcbackendstftflibcc optdeepdetectbuildcaffeddsrccaffeddincludecaffelloggingh note in passing argument of CaffeLogger LOGconst string inline CaffeLogger LOGconst stdstring severity This seems to be an issue when building with CaffeTF enabled where the TF version is v and bazel v When following the same steps with TF v and bazel v there is no error Im not sure if any of the changes in are related I see that the travis builds worked but Im not sure if CaffeTF are built in docker in those builds the same way These are the differences in between v and v at test time remove useless iteration over outputblobs get blob by name tested OK on car detection This allows finetuning strong OCR models from pretrained squeezeexcitation ResNet architectures Bazel version for TF builds Maintainer name update All builds based on CUDA to avoid unsupported ops in CUDA this PR cleans up cmake build file in order to build cleanly against TensorRT and allows to build agains oss parts of tensorRT closed tensorRT compile dede with DUSETENSORRTON for full closed source version and DUSETENSORRTON DUSETENSORRTOSSON for tensorrt open source parts have you test the resnet ctcblstm net 