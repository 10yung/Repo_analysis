Hello after setup a simple auth with a verification token after login Sinatra is taking on average something seconds to check the token Is the jwt config verify ttfb middleware JwtAuth frozenstringliteral true class JwtAuth def initializeapp app app end def callenv begin authtoken envfetchHTTPAUTHORIZATION payload JsonWebTokendecodeauthtoken unless Userexistsemail payload user email raise JWTInvalidPayload end raise JWTInvalidPayload unless Userexistsemail payload user email env user Userfindbyemail payload user email puts headers show headers on this request appcall env rescue JWTDecodeError ContentType textplain A token must be passed rescue JWTExpiredSignature ContentType textplain The token has expired rescue JWTInvalidIssuerError ContentType textplain The token does not have a valid issuer rescue JWTInvalidIatError ContentType textplain The token does not have a valid issued at time rescue JWTInvalidIatError ContentType textplain Invalid token end end end the JsonWebToken class JsonWebToken class self def encodeemail JWTencode payloademail ENV JWTSECRET HS end def decodeauthtoken options algorithm HS iss ENV JWTISSUER JWTdecodeauthtoken ENV JWTSECRET true options end def payloademail exp hoursfromnowtoi iat Timenowtoi iss ENV JWTISSUER user email email userid userid end end end ApiController class ApiController SinatraBase use JwtAuth before do contenttype json charset utf end get verify do add token to Authorization Header authtoken JsonWebTokenencodeemail if authtoken message verifiedtatus tojson else halt message Token failed verification tojson end end def currentuser currentuser requestenv user requestenv user end end configru use RackDeflater use RackMethodOverride run RackURLMapnew PublicController api ApiController Summary As of Decodeverifysignature evaluates keyfinder before validating algorithm This is quite inefficient and results in misleading failure messages see reasoning below I propose we move algorithm validation before finding the key so that we dont waste our time evaluating key finder when we know the algorithm is wrong Reasoning Key finder evaluation is usually used for supporting features like JWKS where a network call needs to be made to get a public key Making network calls can often be expensive for Ruby applications Therefore it makes sense to do the cheaper checks such as alg validation first The performance impact of this can be especially significant in applications where multiple types of token are accepted A token with the wrong algorithm is most likely never gonna find the right key In this case the exception should clearly indicating the issue with the incorrect algorithm and raise JWTIncorrectAlgorithm instead of JWTDecodeError No verification key available Please let me know if you are willing to accept a PR on this I would like to invalidate the token when the user logs out even before the expired time docs for the following code Hello curious what is the secret per JWT spec when using RSA keypair Traceback most recent call last from tokenrb in main from Usersrvmrubiesruby librubysiteruby rubygemscoreextkernelrequirerb in require Usersrvmrubiesruby librubysiteruby rubygemscoreextkernelrequirerb in require cannot load such file jwt LoadError require jwt payload data test token JWTencode payload nil none puts token decodedtoken JWTdecode token nil false puts decodedtoken This validates the certificate chain in accordance with RFC as described in RFC section To use this in your app here are a couple of notes you will want to cache the relevant CRL files and make sure the cache is expired by the OpenSSLX CRLnextupdate timestamp in case you need to dynamically extract the CRL distribution point URIs it is possible to use this class in the keyfinder block argument passed to JWTdecode Closes Closes Howdy should be selfexplanatory LMK if there are any questions Background when we upgrade from to we receive a lot of warnings about already initialized constant JWT Error when start rails or simply run rails c all errors inside this are shown I think it is related to use firstclass object short hand and Expect git checkout v irb require jwterror true requirerelative libjwterror true Actual git checkout v irb require jwterror true requirerelative libjwterror Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTDecodeError rvmgemsruby gemsjwt libjwterrorrb warning previous definition of DecodeError was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTVerificationError rvmgemsruby gemsjwt libjwterrorrb warning previous definition of VerificationError was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTExpiredSignature rvmgemsruby gemsjwt libjwterrorrb warning previous definition of ExpiredSignature was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTIncorrectAlgorithm rvmgemsruby gemsjwt libjwterrorrb warning previous definition of IncorrectAlgorithm was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTImmatureSignature rvmgemsruby gemsjwt libjwterrorrb warning previous definition of ImmatureSignature was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTInvalidIssuerError rvmgemsruby gemsjwt libjwterrorrb warning previous definition of InvalidIssuerError was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTInvalidIatError rvmgemsruby gemsjwt libjwterrorrb warning previous definition of InvalidIatError was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTInvalidAudError rvmgemsruby gemsjwt libjwterrorrb warning previous definition of InvalidAudError was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTInvalidSubError rvmgemsruby gemsjwt libjwterrorrb warning previous definition of InvalidSubError was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTInvalidJtiError rvmgemsruby gemsjwt libjwterrorrb warning previous definition of InvalidJtiError was here Documentsgithubrubyjwtlibjwterrorrb warning already initialized constant JWTInvalidPayload rvmgemsruby gemsjwt libjwterrorrb warning previous definition of InvalidPayload was here true The example tokens in this library use alg ED but the spec EdDSA crv is meant to be ED though 