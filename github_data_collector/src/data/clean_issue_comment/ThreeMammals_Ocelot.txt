Hi everyone I use Ocelot in my Routing Service and I love this library so much Its a truly powerful library that allows me to develop microservices and not care about routings I store all my configuration related to Ocelot in routingjson Also I use this file to build documentation for API of all microservices But recently I ran into a problem that I have to copypaste a lot of configuration peaces to add new endpoint of my microservices For example I have microservices that upload images to store I describe this one in my configuration as Key ImageUploader DownstreamPathTemplate imageuploadermicroserviceuploadimages DownstreamScheme http DownstreamHostAndPorts Host localhost Port UpstreamPathTemplate imageuploadermicroserviceuploadimages UpstreamHttpMethod POST But when I am adding new endpoint to ImageUploader microservice for example deleteimages I have to copy this block of configuration and paste with replacing uploadimages to deleteimages Ive read that I can use placeholders in the UpstreamPathTemplate but in this case I will broke my main logic of documentation building Are there more attractive way that allows me to configure routings more flexible Something like this UpstreamPathTemplate imageuploadermicroserviceaction AvailablePlaceholders action uploadimages deleteimages Expected Behavior New Feature Hi there Im using custom aggregator class for aggregation my multiple responses Here is my configuration file ReRoutes DownstreamPathTemplate api DownstreamScheme http DownstreamHostAndPorts Host redacted Port Key api Key UpstreamPathTemplate api AuthenticationOptions AuthenticationProviderKey Bearer AllowedScopes api DownstreamPathTemplate api DownstreamScheme http DownstreamHostAndPorts Host redacted Port Key api Key UpstreamPathTemplate api AuthenticationOptions AuthenticationProviderKey Bearer AllowedScopes api DynamicReRoutes Aggregates ReRouteKeys api key api key UpstreamPathTemplate getAll Aggregator Aggregator When i send get request to get all stub without token ocelot says not authenticated request in aggregator class But downstream property is empty Here is my startup file public override void ConfigureDependenciesIServiceCollection services ActionIdentityServerAuthenticationOptions options o oAuthority oApiName api oRequireHttpsMetadata false servicesAddAuthorization servicesAddAuthenticationBearerAddIdentityServerAuthenticationoptions servicesAddOcelotAddTransientDefinedAggregatorAggreagatorAddConsulAddConfigStoredInConsul public override void ConfigureRequestPipelineIApplicationBuilder app IWebHostEnvironment env appUseAuthorization appUseAuthentication appUseOcelotWait Expected Behavior New Feature Ocelot starts and works with IdentityServer Authentication Actual Behavior Motivation for New Feature Ocelot crashes with Unable to start Ocelot errors are Authentication Options AuthenticationProviderKeyTestKeyAllowedScopes is unsupported authentication provider Steps to Reproduce the Problem Follow the steps for IdentityServer Config looks like DownstreamPathTemplate everything DownstreamScheme https DownstreamHostAndPorts Host localhost Port UpstreamPathTemplate everything UpstreamHttpMethod Get Post AuthenticationOptions AuthenticationProviderKey TestKey AllowedScopes Startup public class Startup public StartupIConfiguration configuration Configuration configuration public IConfiguration Configuration get This method gets called by the runtime Use this method to add services to the container public void ConfigureServicesIServiceCollection services servicesAddControllers ConfigureIdentityServerservices servicesAddOcelot This method gets called by the runtime Use this method to configure the HTTP request pipeline public void ConfigureIApplicationBuilder app IWebHostEnvironment env if envIsDevelopment appUseDeveloperExceptionPage appUseStaticFiles appUseHttpsRedirection appUseRouting appUseAuthentication appUseAuthorization appUseEndpointsendpoints endpointsMapControllersRequireAuthorization appUseOcelotWait private void ConfigureIdentityServerIServiceCollection services IdentityServerConfig identityServerConfig new IdentityServerConfig ConfigurationBindIdentityServerConfig identityServerConfig var authenticationProviderKey TestKey servicesAddAuthentication AddIdentityServerAuthenticationauthenticationProviderKey options optionsRequireHttpsMetadata false optionsAuthority optionsApiName api Program public class Program public static void Mainstring args LogLogger new LoggerConfiguration EnrichFromLogContext MinimumLevelDebug WriteToConsole LogEventLevelVerbose NewLineTimestampHHmmss Level CorrelationToken MessageNewLineException CreateLogger try CreateHostBuilderargsBuildRun finally LogCloseAndFlush public static IWebHostBuilder CreateHostBuilderstring args WebHostCreateDefaultBuilderargs UseStartupStartup ConfigureAppConfigurationhostingContext config config SetBasePathhostingContextHostingEnvironmentContentRootPath AddJsonFileocelotjson AddEnvironmentVariables ConfigureServicess sAddOcelot sAddMvc ConfigureLogginghostingContext logging add your logging loggingAddSerilog Configurea aUseOcelotWait Run the application Specifications Version Ocelot Platform Net Core on Windows x Subsystem Hi Like Ocelot is already using Polly Is there a way to retry X times the calls to downstream to prevent occasionally fails im trying to implement Api GateWay using ocelot and Net Core but in Program class when i try to add ocelot VS shows me this error IServiceCollection doesnt contain a definition for AddOcelot or an accessible extension method AddOcelot that accepts a first argument of type IServiceCollection is any directive using or an assembly reference missing Why every time var services await servicesInvoke why no callback PollConsul As both middlewares should be at the end of the pipeline they cannot work together Expected Behavior New Feature It is expected to allow Ocelot to bypass the calls if they do not match a pattern for example That way the request could go to the next middleware In this case the dotnet Spa middleware This could be a parameter in the configuration when adding Ocelot Actual Behavior Motivation for New Feature If Ocelot is defined before the Spa middleware the APIs gateway works but we do not have the SPA feature If Ocelot is defined after the Spa middleware the APIs gateway doesnt work as all the requests are proxied to the Spa in my case Angular The motivation is to allow adding more middlewares to the pipeline without assuming Ocelot should be the last one Steps to Reproduce the Problem Just configure the middleware with UseOcelot and UseSpa in whatever the order you want Specifications Version latest stable for Net core How to fix the problem I fixed the issue by adding Ocelot first and controlling the calls via a simple validation If the request starts with gw then I should process it Otherwise continue with the next middleware in the pipeline I copied the code from OcelotMiddlewareExtensionscs and added a simple validation private static string gateWayPrefix gw private static IApplicationBuilder CreateOcelotPipelineIApplicationBuilder builder OcelotPipelineConfiguration pipelineConfiguration builderUseasync context task var defaultHttpContext context as MicrosoftAspNetCoreHttpDefaultHttpContext if defaultHttpContext null defaultHttpContextRequestPathStartsWithSegmentsnew MicrosoftAspNetCoreHttpPathStringgateWayPrefix We are not receiving a gw API call Therefore we should just pass the request to the next object in the pipeline await taskInvoke else Processing as usual var downstreamContext new DownstreamContextcontext await firstDelegateInvokedownstreamContext this simple trick solves my problem although Im not sure if its in line with the development of the library Expected Behavior New Feature Administration API should work after being properly configured in a NET Core x project Actual Behavior Motivation for New Feature Ocelot throws error when executed in pipeline claiming that UseMvc method should not be used on NET Core x projects Steps to Reproduce the Problem Create a NET Core x project Install and configure Ocelot and Ocelot Administration with IdentityServer authentication Run the app Specifications Version Platform Subsystem As far as I can see it all comes because of this line Im just starting to migrate stuff to NET Core x and still trying to come around with the new Endpoints stuff it brings but I assume Ocelot should make use of them to properly configure it If I remove the AddAdministration configuration from my Startup the Ocelot application runs with no further issues Fixes New Feature Fix Proposed Changes Should use registered scheme not only http Expected Behavior No exception Actual Behavior Motivation for New Feature SystemUriFormatException Invalid URI The URI scheme is not valid at OcelotMiddlewarePipelineOcelotPipelineBuilderExtensionscDisplayClass UseMiddlewareb dMoveNext in D Documents GitHub Ocelot src Ocelot Middleware Pipeline OcelotPipelineBuilderExtensionscsline End of stack trace from previous location where exception was thrown at OcelotMiddlewarePipelineMapWhenMiddlewareInvokeDownstreamContext context in D Documents GitHub Ocelot src Ocelot Middleware Pipeline MapWhenMiddlewarecsline at OcelotErrorsMiddlewareExceptionHandlerMiddlewareInvokeDownstreamContext context in D Documents GitHub Ocelot src Ocelot Errors Middleware ExceptionHandlerMiddlewarecsline Steps to Reproduce the Problem AddEureka Browse service Specifications Version develop source Platform Windows Subsystem Windows Reason DownstreamRequestScheme not use registered service scheme OcelotValuesService should add Scheme property and use it 