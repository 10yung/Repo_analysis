Hi Is it possible to build up the query in several steps somehow We are currently trying to move away from Chewy as we want to upgrade Elasticsearch and Chewy doesnt seem to support the newest versions What we do today is that we first apply some filtering then later we add more to the query In a Pundit PolicyScope add the basic filters that the user is allowed to fetch Later add more search specific filters to the query filter by name or whatever which doesnt belong in the PolicyScope Is this kind of chainablecomposable approach possible with the elasticsearch gems somehow If not how do you people handle similar cases AsyncHTTP is an asynchronous persistent and scalable HTTP client which works very well within the Falcon server I have been reading but its not clear how you achieve thread safety Do you use one faraday connection instance per client Are you aware of the new hooks to manage lifecycle of persistent connections eg FaradayConnectionclose Do you expose those methods from the client Just wondering how best to support elasticsearch hey so i have a model A that has a column deleted and that column is referenced and used in another model B which is done through index json now i do get the data but when i update the deleted column and save it elastic search does update the relevant column but when i get the column data from model B it still has the old data only if i reindex that model does it update with the right information How am i to go about fixing this and getting the data to update in all instances where it is used im fairly new to elastic search was put onto a project that uses it so i had to get familiar with it because of that i dont exactly know how to search for the correct answer on google for this Calling updatebyqueryrethrottle throws the following The reason is that while taskid is a required argument it is not whitelisted with the ParamsRegistryregister This PR fixes this by whitelisting taskid and making sure it is not propagated further on as a param to performrequest homeinokentiimykhailovgemruby gemselasticsearchapi libelasticsearchapiutilsrb in block in validateparams URL parameter taskid is not supported ArgumentError from homeinokentiimykhailovgemruby gemselasticsearchapi libelasticsearchapiutilsrb in each from homeinokentiimykhailovgemruby gemselasticsearchapi libelasticsearchapiutilsrb in validateparams from homeinokentiimykhailovgemruby gemselasticsearchapi libelasticsearchapiutilsrb in validateandextractparams from homeinokentiimykhailovgemruby gemselasticsearchapi libelasticsearchapiactionsupdatebyqueryrethrottlerb in updatebyqueryrethrottle from clirb in rethrottle from clirb in main I havent run this in production yet but i assume it works Btw i couldnt find autogeneratephrasequeries in the documentation is it maybe outdated syntax Were currently using ES and this client bug is causing us some trouble Could the fix be backported This is just a cherrypick of dfbfdea c c f ce a b e b all of the examples show mixing it into the global scope which in practice no would would ever do How do I use the DSL with rails models which is probably the typical usecase all of the rails examples show passing a hash into SomeModelsearch In all my searching I failed to find a concise example that used both elasticsearchmodelrails and elasticsearchdsl I added tracktotalhits support for ElasticsearchDSLSearchSearch Reference Is my understanding correct that if i want to do query bool must term shape round bool should term color red term color blue I would have to write query do bool do must do term shape round end must do bool do should do term color red end should do term color blue end end end end end notice the multiple mustshould blocks i didnt receive any error message when putting multiple terms into one must block it just swallowed the further ones did i do something wrong am i misunderstanding something is there a way to do arraylike syntax that i am unaware off If this is by design are there any other differences to the JSON syntax i should be aware off