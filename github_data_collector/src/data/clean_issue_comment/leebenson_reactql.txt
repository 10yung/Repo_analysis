Bumps mixindeep from to details summaryCommitssummary f c ee fa ensure keys are valid when mixing in values See full diff in compare view details details summaryMaintainer changessummary This version was pushed to npm by doowb a new releaser for mixindeep since your current version details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Why Hooks are the future Hooks have been declared as the future of Apollo client and also reduces the bundle size if you only use the apollo hooks API for querying Maybe modify codegenyml to emit hooks like in this example from the internet modelstsx documents packagesfilesclientstatesrcgql schema packagesclientstatesrcgraphql packagesmodulesmoduleserversrcgraphqlgraphql config namingConvention keep typesPrefix I withMutationFn true withHOC true withComponent true withHooks true preset cdmbaseimporttypespreset presetConfig typesPath core importTypesNamespace SchemaTypes I clone the project and try to run it but get this message from the terminal Could not find client in the context or passed in as an option Wrap the root component in an ApolloProvider If were on the server we only want to output the name loader isClient cssloader cssloaderlocals loader cssloader options Calculate how many loaders follow this one importLoaders loaderuselength Format for localised CSS modules localIdentName name local hashbase Add sourcemaps if were in dev sourceMap Specify modules options modules to If were on the server we only want to output the name loader isClient cssloader cssloaderlocals loader cssloader options Calculate how many loaders follow this one importLoaders loaderuselength Format for localised CSS modules modules localIdentName name local hashbase Add sourcemaps if were in dev sourceMap Specify modules options modules Current Issue Currently you have to use the code block below in any React component that uses to wish the CSS Prop for Emotion rather than via styled method Currently jsx jsx import jsx from emotioncore See for more details Emotion prescribes using the emotionbabelpresetcssprop babel preset in order to avoid this However this does not currently work with Typescript as discussed on the following issue or as seen by simpling trying to implement it Proposed Changes The proposed changes use the solution described here in order to support the use of the css prop without the need for the pragma statement This only affects the packages used and the webpack presetsplugins used slightly All functionality is intact Motivation I think its important to support both Emotion methodologies CSS Prop and Styled Components and doing so without the boiletplate currently needed in order to use the former I just cloned master and ran it on node Hot reloading doesnt give any errors However the component doesnt actually rerender Reloading the page loads the new changes Im trying to get this framework to behave but I must be missing something Ive added some styles to the stylesglobalscss file in order to create a pretty standard layout header footer sidebar Ive decided to use the Office Fabric React UI components Ive then structured my roottsx file as you can see below But for some reason the images and styles breaks At first I thought it was a problem with the hot reloading but doing a production build does not help Is there something in the ReactQL pipeline that is unusual regarding to building and packaging that makes this incompatible with standard rendering Sometimes the css comes backif I click on items in the ui without navigating Somethings it works after a reload sometimes i need to rebuild all But I cannot see any pattern to it Also the log prints out occasional errors like reactdomdevelopmentjs Warning Prop datafocuszoneid did not match Server FocusZone Client FocusZone Which makes me believe that something is way out of sync here Suggestions anyone PS Im very new to both this starter kit and the Office Fabric kit roottsx typescript Root entry point IMPORTS NPM import as React from react import Helmet from reacthelmet import hot from reacthotloaderroot import Route Switch from reactrouterdom import Global from emotioncore import Fabric loadTheme initializeIcons from officeuifabricreact Local Components import ScrollTop from componentshelpersscrollTop Global styles import globalStyles from globalstyles Routes import routes from dataroutes import Header from componentslayoutHeader import NavBar from componentslayoutNavBar import Footer from componentslayoutFooter loadTheme palette themePrimary f themeLighterAlt f fbfe themeLighter daedfd themeLight badefb themeTertiary bef themeSecondary ba f themeDarkAlt f da themeDark a b themeDarker neutralLighterAlt f f f neutralLighter f f f neutralLight eaeaea neutralQuaternaryAlt dadada neutralQuaternary d d d neutralTertiaryAlt c c c neutralTertiary d d d neutralSecondary a a a neutralPrimaryAlt neutralPrimary neutralDark a a a black white ffffff initializeIcons optional base url const Root div Global stylesglobalStyles Helmet titlePixon Administrationtitle Helmet ScrollTop Fabric classNameApp div classNameheader Header div div classNamebody div classNamecontent Switch routesmaproute Route keyroutepath route Switch div div classNamesidebar NavBar div div div classNamefooter Footer div Fabric ScrollTop div export default hotRoot Example broken styles Hi we are thinking about using your package in one of our projects and we usually really like to use sass with cssmodules on every component for styling We tried to implement it the way we always do but there seems to be a problem with the serverside rendering part We import the styles with import as styles from STYLEFILEscss Then we want to access the different style Classnames like div classNamestylesClassName The problem now is that we end up getting undefined as the className but if we change something and use hotreload so it rerenders on the client side only it works and shows the className correctly Also consolelogging the className gives the correct result Here is our example DemoComponent import as React from react import GetHackerNewsTopStoriesQuery from graphql import as styles from DemoListingscss interface IDemoListingPropType data GetHackerNewsTopStoriesQuery export class DemoListing extends ReactPureComponentIDemoListingPropType public render const data thisprops consolelogCheck it here stylesList return ul classNamestylesList datahntopStoriesmapstory li keystoryid a hrefstoryurl targetblank storytitle a li ul And here is our DemoListingscss file List liststyletypenone margin padding li displayblock borderbottom px solid e e e padding px fontsize px Hi leebenson Thanks for ton for this amazing boilerplate For sure have saved me tons of hours Wanted to discuss a challenge that I am facing As per Rehydration of the state from the local storage occurs after the apolloClient is already created at line Now if I used my store to keep the logged the authentication token the store autosaved to localstorage But would not be hydrated at the time of Apollo client creation That basically means that it since the store is hydrated later Now if I move line to So hydrate before creating the client I get this error in client console reactdomdevelopmentjs Warning Expected server HTML to contain a matching div in header Please let me know if you have additional questions or if I can help any how to fix this I tried to configure multiple entries in webpack but it breaks the app Additionally I would like to create multiple css bundles based on entry file