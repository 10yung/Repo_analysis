I am using version Installed latest version of rust for ubuntu sudo aptget update sudo aptget install rustc kurdtpageubuntudutree src rustc mainrs error E cant find crate for dutree mainrs extern crate dutree cant find crate error aborting due to previous error For more information about this error try rustc explain E run cargo build get the error extern crate unicodesegmentation cant find crate lack of something I see there is the x option but no example x exclude NAME exclude matching files or directories It only accepts full filename Would it be possible to support matching a filter pattern p pattern PATTERN Where you can use a pattern for filtering the results via globs includeexclude extensions webpjpgonly match these or exclude gifpreview In my case I just wanted to identify results with a certain file extension doesnt seem possible currently Thanks for the great tool its been helpful using some native system commands on a server wasnt working in large directories either raising an error that the arg list was too long or being unresponsive for a long time with no feedback dutree handled these directories like a champ implements The implementation is fairly rudimentary and doesnt allow to change depth aggregate or other options Something that the standard du gets correct but dutree does not is avoid doublecounting the usage of multiple directory entires that refer to the same files hard links Since you are generally using du to account for total disk usage you wouldnt want to doublecount files that are stored once but have multiple directory entries For example tree inodes bar d a b foo directory files du ha K bar K da K d K dutree dutest B d B b B a B bar B foo B dutree usage dutest KiB d KiB a KiB b KiB bar KiB foo KiB As we can see dutree usage overestimates the space used significantly compared to du How these should be displayed is a bit of an open question du prints files from the bottom up and skips displaying files for which it has already covered the give inode However for dutree it might make sense to still show the individual files in the tree structure but skip adding them to the common parent size Im not sure which approach would be better Tools like dutree or du are generally used for finding files to clean up to free up space The space that will be freed up corresponds to the files block usage on disk not the file size which could be smaller due to not using entire blocks or larger due to a file having holes While there may be some circumstances where the file size is useful to know for instance if transferring to some other system which doesnt support holes in files and doest round to block boundaries for the most common use cases usage is the better metric and its even implicit in the name where du stands for disk usage I compared dutree to my usual goto solution of du h d sort h on my src directory and it is much slower This is on macOS and this is after having run these a few times to warm up caches I suspect the reason for this is that youre doing too many syscalls the code seems to use Path to refer to files in many places and then does various tests on those paths which mean extra system calls to query the same information multiple times I would recommend instead passing around DirEntry from which many attributes can be queried without extra system calls or even better using the walkdir crate which is a pretty well optimized directory walker that provides its own slightly richer DirEntry that caches additional metadata time sh c du h d gsort h real m s user m s sys m s time dutree aggr m d real user sys It would be useful if it was possible to save a log with current disk usage to later come back and run a diff against the log instead of another directory My usecase is i have a server thats slowly filling up und i have no idea where the space is going Nice tool by the way x should have been stay on one filesystem instead of exclude for parity with du and ncdu Anyway there should be something like X then to avoid going to other filesystems mounted below this one and options to avoid following symlinks or maybe it should not follow symlinks by default unless L