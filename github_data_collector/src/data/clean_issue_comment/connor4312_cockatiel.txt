Like irbrownie suggested RxJS integration I think that would be neat but am unsure of the API consistency we can provide Retry policies work idiomatically within RxJS they can work the same way as the builtin retry operator js requestpipe switchMap getFromDatabaseOrWhatever toOperatorretryPolicy Bulkheads fit nicely as a switchMapmergeMapesque operator Its basically a mergeMap with a limited queue size The caveat is that if a call is rejected and emitted down the observable chain the results from any ongoing calls will be unable to emit Maybe we have a second catchErrorlike callback that maps the error js requestpipe toOperatorbulkhead getFromDatabaseOrWhatever args or curried perhaps error handler requestpipe toOperatorbulkhead getFromDatabaseOrWhatever err shouldEmiterr throwErrorerr EMPTY Circuit breakers and timeouts handles flow control upstream of making the request so I dont theres any nice reactive behavior we can do there there an upstream operator cant track downstream flow control so it would need to just wrap whatever async call is being made js requestpipe switchMap circuitBreakerexecute getFromDatabaseOrWhatever Im not sure theres any good way to handle wrapped policies since not all of them can map to operators in the same way wed be reduced to using the mode of most controlwhich is the circuit breaker example that lacks much reactive integration at all Open to any ideassuggestions