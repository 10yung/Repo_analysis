A proposed way to simplify version branches configuration so commits like e b a e ec ae d ae f a would potentially be limited to changing up to lines in configcmake and possibly some changes in appveyoryml Currently CI scripts read some of build settings directly from CMakeListstxt such scripts were corrected to allow configcmake define the necessary variables depending on certain conditions which was necessary to automate most of changes in e b a e ec ae d ae f a like commits The changes are not tested on CI build services yet Windowsrelated changes may need more attention as I didnt test them locally Resolves The suggestion to implement extra navigation shortcuts Originally this was for go to nextprevious system which brought the selection cursor to the topleft of the nextprevious system After the hint that this was too specialized and that other commands should be provided insteadadditionally here is a group of four commands and a description of their behavior I will cancel the previous pull request since this supersedes it Go to top staff Goes to current measures top staff If there is no selection at all this will go to the top staff at measure one Go to empty trailing measure This is a little more interesting If there is no active selection the result will be to take the user to the first staff at the first empty trailing measure of the entire score practically the same position where the ToolsRemove Empty Trailing Measures begins deleting This will give the exact same desired activity i wanted in the old proposed next system behavior under the assumption that the user is working persystem and that the next system starts at the empty trailing measure To give this command a doubleedged sword this will also go to an individual staffs empty trailing measure which may or may not be equivalent to the entire scores empty trailing measure This can be also useful at times and at first it was thought that only one or the other would be able to be implemented as a trade off but after testing I think having both function and contingent upon whether or not theres a selection makes the most sense with the only trade off being that if the user mainly wants the entire scores trailing measure instead of an individual staffs trailing measure an Escape or clicking off of any elements would be required first PS Since this is dealing explicitly with going to an empty measure it seemed most logical to enter into NoteEntry Mode automatically after issuing this command Not so with the other ones Finally although falling into the background I didnt want to completely banish having a pair of Go to nextprevious system commands to have available if a user should so happen to find it useful I still do at times even with the above two other functions depending on their workflow Especially for score traversal in larger scores However this time the selection will continue on the current working staff as would be expected for default behavior So here the user can traverse per system forward or backward Backward will also take the user to the beginning of the current system before going to previous system These are moreso helper functions like with the go to top staff in that if set up by a user they can aid in speed instead of doing ctrlleftright multiple times or altup multiple times these could be used These compiled locally passed the mtest make in mtest directory is really slow for me unfortunately and have no bugs as far as Ive tested them extensively Resolves This PR uses minAbsStemLength for all stems with tremolos default placement and placing midstem after some modification Quick overview Before and After Extracted from see to allow more discussion for this particular change and add a tooltip mentioning that the key is specified at concert pitch at least those that are backwards compatible to at least Qt There are such wanings C in MSVC this PR fixes all but of those The remaining ones use replacements that are available on Qt or sometimes even later so may need to get revisited later For consistency Resolves These commits resolve a couple of courtesy clef visualization bugs when show courtesy property is unchecked for the clef namely clef change and visualization of noncourtesy clef It also fixes the behavior of inspector for multiple selected clefs when show courtesy is checkedunchecked The case of multimeasure rest is not covered by this PR x I signed CLA x I made sure the code in the PR follows the coding rules x I made sure the code compiles on my machine x I made sure there are no unnecessary changes in the code x I made sure the title of the PR reflects the core meaning of the issue you are solving x I made sure the commit messages contain a description and answer the question Why do those changes fix that particular issue or Why are those changes really necessary as improvements x I made sure the commit message title starts with fix if there is a related issue x I created the test mtest vtest script test to verify the changes I made Partially resolves This enables the all lines attached to stem beam style for only minim twonote tremolo Its one of the most common things used in music notation which MuseScore currently doesnt support The style can be changed in the inspector and can also become a score style There should be another beam style for minim twonote tremolo with only one topbottom depending on stem direction line attached to stem but its much more complicated than the former case and less common too I havent seen that once but seen plenty of the all lines attached style This doesnt mean it shouldnt be supported but the all lines attached style option is much more requested and should probably be supported ASAP Resolves Issue This PR fixes a set of related logical bugs in the command line interface handling logic Essentially in master as it stands right now two options are somewhat intertwined but break each other in subtle ways which leads to plugins being entirely broken when run in command line mode Plugin mode does nothing when enabled by itself and after making changes to a score simply discards them Converter mode which should then save changes instead reloads score files discarding changes made by the plugin mode Finally converter mode also attempts to run plugins but however it doesnt run the plugin specified by the user said plugin name is replaced with the empty string so no plugins are actually run The overall effect is that plugins when specified at the command line either a do something and then discard their work or b are ignored This PR fixes this issue in the following way Firstly standalone plugin mode has been removed with plugins instead being run during converter mode Converter mode now correctly runs the userspecified plugin when invoked with plugin mode Converter mode also has a small number of fixes to correctly load a score in order to allow plugins to run correctly x I signed CLA x I made sure the code in the PR follows the coding rules x I made sure the code compiles on my machine x I made sure there are no unnecessary changes in the code x I made sure the title of the PR reflects the core meaning of the issue you are solving x I made sure the commit messages contain a description and answer the question Why do those changes fix that particular issue or Why are those changes really necessary as improvements x I made sure the commit message title starts with fix if there is a related issue I created the test mtest vtest script test to verify the changes I made 