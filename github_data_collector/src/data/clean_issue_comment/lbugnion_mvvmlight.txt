Starting from the GalaSoftMvvmLightPlatformAndroidSupport project it has been created a new project GalaSoftMvvmLightPlatformAndroidX in order to support the RecyclerView from the AndroidX library over the one from the Android Support Library In my opinion the GalaSoftMvvmLightPlatformAndroidSupport project should be deprecated and not maintained any further This is why I just duplicated the code instead of changing the using clauses with conditional compiling How can we proceed with Nuget package publishing Once the Nuget package is published this pull request closes Is it planned a migration from Android Support to AndroidX for the GalaSoftMvvmLightPlatformAndroidSupport package In my opinion this is a really blocking issue because it blocks the migration to AndroidX The migration is necessary in order to use the latest libraries for the Android Ecosystem Add GalaSoftMvvmLightPlatform for Net Core WPF DispatcherHelper NOTE version number still uses Sometimes when sending a message a OutOfMemoryException was thrown net framework An unhandled exception just occurredSystemReflectionTargetInvocationException Exception has been thrown by the target of an invocation SystemOutOfMemoryException Exception of type SystemOutOfMemoryException was thrown at SystemCollectionsGenericList setCapacityInt value at SystemCollectionsGenericList EnsureCapacityInt min at SystemCollectionsGenericList AddT item at SystemCollectionsGenericList ctorIEnumerable collection at SystemLinqEnumerableToList TSource IEnumerable source at GalaSoftMvvmLightMessagingMessengerSendToTargetOrType TMessage TMessage message Type messageTargetType Object token in c MvvmLight Source GalaSoftMvvmLight GalaSoftMvvmLight PCL Messaging Messengercsline at GalaSoftMvvmLightMessagingMessengerSend TMessage TMessage message in c MvvmLight Source GalaSoftMvvmLight GalaSoftMvvmLight PCL Messaging Messengercsline Projects since NET are compiled with PORTABLE define which causes PropertyChanging property to be skipped during compilation Project GalaSoftMvvmLightPlatform NET csproj only include project GalaSoftMvvmLight PCL csproj and doesnt change its define constants I need to implement ViewPager in MVVM please help In other runtimes SimpleIoc does not inherit IServiceLocator and breaks everything While it could be fixed with a simple change in the preprocessors here public interface ISimpleIoc if NETSTANDARD IServiceLocator endif Is dotnet core going to be supported any time soon Many firsts for me First real use of git First time git contribution forkpull request First Visual Studio Extension A good code review will be necessary lol I took the liberty of changing the template of the generated WPF project type to reflect new changes in the CommonServiceLocator namespace and small changes to make the generated code compile without warningerror I am creating project for Xamarinforms Tizen I am not able to integrate this lib with Tizen project Its working perfectly fine with Android and WPF platform Is it possible to integrate this lib with Tizen project I have a feature idea that I want to run by the community I have a situation where Im in my application and Im opening numerous windows in the View Model VM using messages and I need to listen to messages returned from the VM of the window that Im opening Here is a bit of the code that Im using Person chosenPerson null EmployerInfo EmployerInfo null bool dialogResult null try MessengerInstanceRegisterFindPersonMessagethis message chosenPerson messageContent true MessengerInstanceSendnew OpenWindowMessagecaseType result dialogResult result MessageTokensNewFindPersonFormChannel MessengerInstanceUnregisterFindPersonMessagethis if dialogResultHasValue dialogResultValue chosenPerson null MessengerInstanceRegisterSelectedEmployerMessagethis message EmployerInfo messageContent true MessengerInstanceSendnew OpenWindowMessagechosenPerson result dialogResult result MessageTokensNewFindEmployerFormChannel MessengerInstanceUnregisterSelectedEmployerMessagethis if dialogResultHasValue dialogResultValue EmployerInfo null MessengerInstanceSendnew ShowHideMessageShowHideMessageGoToWindowStateHide MessageTokensFindItemChannel MessengerInstanceSendnew OpenWindowMessagechosenPerson EmployerInfo finally MessengerInstanceUnregisterFindPersonMessagethis MessengerInstanceUnregisterSelectedEmployerMessagethis MessengerInstanceSendnew ShowHideMessageShowHideMessageGoToWindowStateShow MessageTokensFindItemChannel A command on the main form of my application will call this method on the VM which kicks off the workflow Two form gather information by allow a user to search through some databaselist and then finally hides the form that started the process and then calls the final form that will capture all the users data I think this demonstrates where an IDisposible return would allow you to easily unregister instead of putting your UnRegister calls in your finally It would still allow for strict adherence to using the Mediator pattern and allow for unit testing to still allow be modular and easy to implement the message handlers Maybe the method could even be called RegisterScope to denote that its only valid for a particular scope in the code Any thoughts on this Thanks Scott