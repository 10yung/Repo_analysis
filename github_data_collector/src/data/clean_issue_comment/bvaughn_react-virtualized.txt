 Do you want to request a feature or report a bug According to mozillaorg The HTML Table Caption element caption specifies the caption or title of a table and if used is always the first child of a table Ref As of reactvirtualized the source code of Tablejs provides no option to insert a caption element as the first child of the table component This is particularly helpful for accessibility since a screen reader can use the tag to announce the purpose of the table Example table captionExample Captioncaption tr thLoginth thEmailth tr tr tduser td tduser samplecomtd tr table Any chance we can add a simple caption attribute to the table component The code should simply conditionally render based on the property caption captioncaptioncaption Asking a Question I tried to list the huge amount of data using infinite scroller But in my case List of data need to render in reverse order But i didnt get the result its keep on loading the record Down wise I have updated the code in codepen kindly refer Which versions of React and reactvirtualized and which browser OS are affected by this issue Did this work in previous versions of reactvirtualized Browser Chrome OS Ubuntu React React DOM reactvirtualized Hi bvaughn Im currently using reactvirtualized and reactcustomscrollbars to produce a chat list in my project The chat list has a button that can scroll the list to the bottom First the list stopped at the position far away from the bottom and then some mutilline messages were added to the list What I want is when I click the button the list will scroll to the bottom position It actually scrolled but it stopped at the position a few distance away from the bottom It cant reach the bottom After I debugged many times I found the total height of the list is not correct I think this may be the cause of the problem The following is how I use it in my project import React from react import Types from proptypes import List AutoSizer CellMeasurer CellMeasurerCache from reactvirtualized import Scrollbars from reactcustomscrollbars const overscanRowCount const listStyle overflowX false overflowY false class MessageList extends ReactPureComponent static propTypes chatList TypesarrayOfTypesobject constructorprops superprops thiscache new CellMeasurerCache fixedWidth true thislist ReactcreateRef thisscrollbar ReactcreateRef onScroll event const scrollLeft scrollTop eventtarget const Grid thislistcurrent return GridhandleScrollEvent scrollTop scrollLeft scrollToBottom setTimeout thisscrollbarcurrentscrollToBottom renderThumbVertical div classNamescrollbar rowRenderer index key style parent const chatList thisprops const msg chatList index return CellMeasurer keykey cachethiscache parentparent columnIndex rowIndexindex div style padding px style MsgWrapper msgmsg div CellMeasurer render const chatList thisprops return div classNamemessagelistcontainer div classNamemessagelist AutoSizer width height Scrollbars onScrollthisonScroll style height width autoHide refthisscrollbar renderThumbVerticalthisrenderThumbVertical List refthislist widthwidth heightheight overscanRowCountoverscanRowCount rowCountchatListlength rowHeightthiscacherowHeight deferredMeasurementCachethiscache rowRendererthisrowRenderer stylelistStyle Scrollbars AutoSizer div div classNamenewmessagetip onClickthisscrollToBottom new message div div export default MessageList Finally the problem always happens with multiline messages Oneline messages will work well Hi bvaughn Im loving this Table and it provides almost all the required features Two quick questions though Is it possible to have a footer or something of that sort Lets say i have rows and the last row is total I want that to be displayed always Is there any way to freeze the right columns as we do on the left Any help would be appreciated Thanks For my use case I can have up to rows and since the user is able to scroll all the way to the end immediately I dont want to load every row that the user has scrolled past but only the ones in view where they finally ended up So Im throttling loadMoreRows then only loading the data for the items around the last given stopIndex then resolving the promise that loadMoreRows returns It seems to almost work but the rows in view dont render when I resolve the promise Im basically using the exact code from the InfiniteLoader example with a throttle and calculating the startIndex based on the given endIndex loadMoreRows throttle stopIndex const actualStopIndex stopIndex stopIndex const startIndex actualStopIndex const loadedRowsMap thisstate for let i startIndex i actualStopIndex i loadedRowsMap i STATUSLOADING consolelogloadMoreRows stopIndex loadedRowsMap const timeoutId setTimeout delete thistimeoutIdMap timeoutId for let i startIndex i actualStopIndex i loadedRowsMap i STATUSLOADED consolelogresolving promise actualStopIndex actualStopIndex promiseResolver MathroundMathrandom thistimeoutIdMap timeoutId true let promiseResolver return new Promiseresolve promiseResolver resolve From what the docs say it seems like resolving the promise should trigger the call to rowRenderer but that doesnt happen Then if I scroll just a tiny bit that does render the rows Am I misunderstanding the docs or is this a bug Thanks for contributing to reactvirtualized Before submitting a pull request please complete the following checklist x The existing test suites npm test all pass x For any new features or bug fixes both positive and negative test cases have been added x For any new features documentation has been added For any documentation changes the text has been proofread and is clear to both experienced users and beginners x Format your code with prettier yarn run prettier x Run the Flow typechecks yarn run typecheck Motivation This enables a way to use CellMeasurer without findDOMNode eg in React StrictMode Heres an example usage CellMeasurer registerChild div refregisterChild CellMeasurer Thanks for contributing to reactvirtualized Before submitting a pull request please complete the following checklist x The existing test suites npm test all pass For any new features or bug fixes both positive and negative test cases have been added For any new features documentation has been added For any documentation changes the text has been proofread and is clear to both experienced users and beginners x Format your code with prettier yarn run prettier x Run the Flow typechecks yarn run typecheck See This patch changes the following removes required from Columns width and assigns auto to flexbasis by default allows to use any string and number value for Columns width In React virtualized multigrid If we have the fixedRowCount as and fixedColumnCount as N If we scroll the left grid The right grid is not synced In order to replicate this issue Take this example Change the fixedRowCount to What is the current behavior When I scroll like a crazy man I have issue with viewing components I have only white space without any markup see screencast Code Sandbox ScreenCast ScreenCast What is the expected behavior No have only white space without any markup If you have any ideas I will be very grateful PS Do not scroll like crazy does not fit Which versions of React and reactvirtualized and which browser OS are affected by this issue Did this work in previous versions of reactvirtualized Browser Version Official Build bit OS Ubuntu LTS React React DOM reactvirtualized Is the willchange transform property still needed in Its causing Firefox to print the warning Willchange memory consumption is too high in console when used in a resourceintensive app From CHANGELOG Added willchange property to Grid to work around a Chrome bug that caused the entire grid to be repainted whenever a new row or column was added This was negatively impacting scrolling performance for Chrome under certain conditions This change is not expected to impact Firefox Safari or IE That was introduced back in early No noticeable scrolling performance was affected when I removed the property and tested in recent Chrome Mac Chrome Issue was produced on Firefox Mac OS 