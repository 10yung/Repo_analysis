Description Now that v has been released master will track and CHANGELOG is prepared for the new version Description By requiring railsall Solidus was loading a bunch of unnecessary code taking more time and consuming more memory This change allows apps that want to cherrypick Rails frameworks to benefit from the more attentive choice The list of frameworks I enabled for each component of Solidus comes from searching the subdir eg core with this regular expression bActionActiveApplication AZ Checklist x I have followed Pull Request guidelines x I have added a detailed description into each commit message x I have updated Guides and README accordingly to this change if needed x I have added tests to cover this change if needed x I have attached screenshots to this PR for visual changes if needed Description Ref This PR introduces SpreeApplicationRecord class and makes every ActiveRecord model previously inheriting from ActiveRecordBase inherit from it To leverage the new hierarchy an existing SpreeCorePermalinks monkey patch on ActiveRecordBase has been moved to SpreeApplicationRecord This way Solidus is more compliant with Rails recommendations and the risk of unwanted side effects on ActiveRecordBase is mitigated Checklist X I have followed Pull Request guidelines X I have added a detailed description into each commit message I am a new user I cannot find a demo Suggestion Either put a demo on your website or have some kind of showcase so new user can see how it looks like Going through Heroku just to have a demo install is not adequate as many of us dont use Heroku Description Loading decorators within toprepare with prepend or include ends up adding multiple copies of the decorator to the ancestors of the decorated class This typically causes trouble when using super within methods or when changes done in prepended or included are not idempotent Clearing dependencies also solves problems related to overwriting constants and removed methods ie when a method is removed by a decorator previous instances of the decorator that are still in the ancestors list will still have that method defined and will intercept calls to it Checklist x I have followed Pull Request guidelines x I have added a detailed description into each commit message x I have updated Guides and README accordingly to this change if needed x I have added tests to cover this change if needed x I have attached screenshots to this PR for visual changes if needed When I create a promotion that is automatically applied to all orders I shouldnt be able to manage the promo codes for that promotion since creating a code will result in the promotion getting into a broken state and failing validation Solidus Version but I guess it affects all versions To Reproduce Create a promotion that applies automatically Click on View codes list Click on Create promotion code Create a new code Current behavior The promotion displays All orders will attempt to use this promotion This promotion uses the promotion code c Furthermore the promotion cannot be updated in any way since it fails validation with the following error Apply Automatically Disallowed for promotions with a code Expected behavior I shouldnt even be allowed to create the promo code Screenshots img width altScreenshot src img width altScreenshot src Desktop please complete the following information NA Smartphone please complete the following information NA Additional context NA I get an error trying to clon a product from admin products Solidus Version Last master version Go to admin products Click on icon copy Current behavior Get error ActiveRecordRecordInvalid in SpreeAdminProductsControllerclone Valudation failed Images is not valid Master images is not valid Expected behavior Clone product Desktop please complete the following information Heroku Browser chrome Additional context I have the images connected to s with CDN Hey folks I am looking for some insight here perhaps you can help me We ran into a case in production where an order shows up in the cart but upon trying to proceed with checkout no order is found and the user is redirected back to the cart This is fundamentally because in SpreeOrdersControlleredit order currentorder SpreeOrderincompletefindorinitializebyguesttoken cookiessigned guesttoken However in SpreeCheckoutControllerloadorder order currentorder If we unpack currentorder behavior further you will see it uses a different query to load order SpreeOrderincompletelockoptions lock findbycurrentorderparams and def currentorderparams currency currentpricingoptionscurrency guesttoken cookiessigned guesttoken storeid currentstoreid userid tryspreecurrentusertryid end In our specific case the miss was happening because we had a state with the Order have a nonnil userid and the query kept asking for nil because the other session did not exist Solidus Version master To Reproduce I do not have all of the specific to reproduce but am hoping for some insightful discussion Current behavior Orders and Checkout controllers load orders differently Expected behavior I would expect them to abide by the same business logic and am curious why thats not the case I understand this behavior is inherited from a much older Spree release but hoping folks have extra insight Thanks yall Description The guides are build with Middleman and served by Netlify We do not need certain gems to make this work Checklist x I have followed Pull Request guidelines x I have added a detailed description into each commit message Is your feature request related to a problem Please describe outlined that its quite common to have the need for a constant gross price across several countries when calculating VAT prices The current behavior of the vat prices calculator with tax rates that have the includedinprice value is fix a net price amount the actual default price of the variant for each country requiring VAT ones that have includedinprice tax rates in that variants taxcategory create a price that is net price amount tax rate amount during the checkout the VAT amount will not be added to the order total its already part of the price but it will be shown as already present for taxing laws requirement There are stores that need to generate prices differently though The fixed part should be the gross price amount which should be identical in all countries Describe the solution youd like We already provided a way to change with but as mamhoff pointed out we could add this class in core allowing people to select it without adding any code Describe alternatives youve considered I was wondering if we can make this thing more granularly allowing admin users to select which method to apply per tax rate or per country 