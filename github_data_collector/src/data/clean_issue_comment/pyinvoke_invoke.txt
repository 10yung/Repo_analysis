Im not sure it is intentional or not but I noticed that if I create an object in a context and I try to pass it around after returning from a function or between tasks the original object is lost and got replaced by a newly constructed one eg class BuildContext def initself printconstructed selfbasedir Pathhomebuildercode selfprojectdir selfbasedir def copyself printcopied cop BuildContext copbasedir selfbasedir copprojectdir selfprojectdir return cop def updateprojectdirself project selfprojectdir project task def setupc project cbuildcontext BuildContext cbuildcontextupdateprojectdirproject here the projectdir is ok depssetupc here the projectdir is vanilla Overriding copy doesnt seem to fix the issue The data is lost somewhere beforehand Regardless there are loads of copies and constructions happening anyway Here is the output of inv setup project bob build Starting builder constructed copied constructed copied constructed copied constructed copied constructed copied constructed copied constructed copied constructed copied constructed homebuildercode Works with plain dicts but I would have been happier with encapsulated operations I want to write a task such as invoke run bash c echo hello where the task run is defined as follows in bash docker run it myapp How do I do the equivalent of in pyinvoke I have moved all core logic of a specific task out of my invoke tasks So what I am left with is each task validating user input whether arguments are ok or not and then calling a separate function doing the actual work As described here But now I want to test the argument validation part So basically I want to call my script from pytest as a user would do and then be able to validate the arguments I guess I need some kind of clirunner like click has I went through the docs and searched online but I cant seem to find any pointers on this Anyone any clues This is one of those could be considered a bugfix could be considered a feature things Follows kinda from as that exposed the needlack here when it created Promise tldr a subset of run kwargs are exposed explicitly in Result such as command pty etc but a bunch are not such as warn hide outstream It seems like it makes good sense to straightup copy any and all kwarg values from run into the structures that emerge as Result as well as Promise insofar as the what run did you come from property applies to both Followup from specifically this comment subthread around eg python promise Runnerrunfoo asynchronousTrue promiseinterrupt SIGINTs or otherwise terminates child as if C promisejoin This is relatively easy for Local but its harder to come up with a clean API that works for Fabric s Remote as well without either duplication of code silent noop behavior gross or proliferation of a lot of subroutines Theres certainly a way forward somewhere but it was not worth the dev time when wrapping up Resulthide s default value is False it s a empty tuple its means werent hidden from the user when the generating command executed When have a UnexceptionExit in defaulthide False it should be printed lines stdout and lines stderr but beacuse here is not in so in default it printed already printed twice taskspy from invoke import task task def testc with ccdtmp crunls csudols Result tmp rootpilafhomefermigiertmp inv test content of my tmp sudo cd command not found In other words run is ok sudo is not Running with inv d test I get the following exception invokeprogramrun Received a possiblyskippable exception UnexpectedExit cmdsudo S p sudo password cd tmp ls exited Note that usrbincd doesnt exist on Debian It exists on MacOS I havent tried other distributions This looks awesome If only I could get it to run from the command line Im missing something here Something really obvious and I just know Im going to feel foolish when I find out the answer Ive googled around for a while and found nothing specifically or generally I do pip install invoke it installs successfully In the command line on Ubuntu I try to run invoke but of course I get command not found How do I run invoke from the linux command line Please The version that comes with the ubuntu package manager is very old Example code python from functools import wraps from invoke import Task def somewrapperkwargs def innerf wrapsf def wrapperc a kw return fc a kw return Taskwrapper kwargs return inner somewrapper def mytaskc arg kwarg None pass Expected invoke mytask help lists arg and kwarg as options Actual invoke mytask help lists no options I have traced this to Taskargspec using inspectgetargspec which does not automatically look for a wrapped property I have produced a tiny change that should rectify this PR to follow As a point of note inspectgetargspec has been deprecated since Python in favor of inpectsignature which does automatically look for wrapped