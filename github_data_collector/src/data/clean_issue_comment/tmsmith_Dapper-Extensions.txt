Not sure this is an issue but the full framework version was using IDbConnection and the NET core one needs DbConnection Is this on purpose Or Im missing something How do I create a generci repository that injects a connection interface I am doing this to implement a base repository now public async TaskTEntity GetByIdlong id return await Queryc DbConnectioncGetTaskTEntityid look like its missing the T generic and calling the wrong DeleteAsync function Where is the source code for the DapperExtensionsDotNetCore nuget package It links back to this repository but the csproj files here are all for Dotnet Framework I have created a static business data access library that uses dapper dapperextensions and created a custom class mapper in order to provide my own table names via a table attribute on my objects I want to use my library in a web project ASPnet Web Forms In order to use my custom mapper in the web project where would I use this line DapperExtensionsDapperExtensionsDefaultMapper typeofMyDapperClassMapper Sometimes Insert Async would fail but it doesnt produce an error message for me is theyre a way to find out what has go wrong in the model I want to extend the dapper and dapper extension classes to use polly for retry policy Create a wrapper for dapper and dapperextensions classes and implement the methods with Polly and call the original dapper and dapperextension methods inside the wrapper methods I have done the following implementation let me know is there any better way of achieving the same public static class DapperExtensionsWithPolly private static Policy policy private static int retryCount private static readonly ILog NetService Log new Log NetServiceMethodBaseGetCurrentMethodDeclaringType static DapperExtensionsWithPolly policy Policy HandleSqlException WaitAndRetryretryCount retryAttempt TimeSpanFromSecondsMathPow retryAttempt exception span LogError exception occured at retryCount Dapper Extension methods public static int CountWithRetryTthis IDbConnection connection object predicate IDbTransaction transaction null int commandTimeout null where T class return policyExecute connectionCountTpredicate transaction commandTimeout Have you added support for Oracle with only one thing in mind support selecting only Although there are still inserting methods I asked this because actually looks like inserting methods are not tested fully they are failed in case of trying to insert an entity exposing bool properties whose mapped columns having type of NUMBER The underlying Dapper does not support this autoconversion but some ontop library like DapperExtensions should prepare that Its ridiculous that this simple use case is not tested I can write a simple similar extensions myself within days of working but really I always prefer to not reinventing the wheel Im not sure if this is not updated with the Oracle DBs behavior The column name is really kind of casesensitive especially when using double quotes around So why always force capitalizing the column name as in the code in OracleDialectcs public override string QuoteStringstring value if value null value return stringFormat OpenQuote valueSubstring valueLength CloseQuote return valueToUpper Ive had a day blocked issue with this before I had to determine to pull the source code to debug it All my columns are declared with double quotes already like this CREATE TABLE CCLIENTSYSTEMINFO Key NVARCHAR NOT NULL ENABLE Value NUMBER NOT NULL ENABLE instead of CREATE TABLE CCLIENTSYSTEMINFO Key NVARCHAR NOT NULL ENABLE Value NUMBER NOT NULL ENABLE And when quotes are used for the created table by the first statement above some query like this will fail with column written in uppercase with error like invalid identifier SELECT SYSTEMINFOKEY FROM SYSTEMINFO and it should be written with the column name exactly maintained as declared by mapping SELECT SYSTEMINFOKey FROM SYSTEMINFO The code above in OracleDialect always turns it to SYSTEMINFOKEY and thats why it blocked me for nearly days from working continuously Why do you think uppercase column names should always be fine with Oracle And do it just to make the generated query beautifully formatted Its a pity that I have to build my own dll of DapperExtensions with ToUpper removed or reference the whole source code in my solution which I always want to avoid Oracle insert error error code 