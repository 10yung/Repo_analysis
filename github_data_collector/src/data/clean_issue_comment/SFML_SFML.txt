This is an implementation issue not specific to any OS Compiler or version of SFML The issue about font advancing as originally reported was my error The later discussion about blurring bolded bitmap fonts still applies This patch changes the DirectInput device initialization process to only attempt setting the devices axis mode if the device reports having axes and its axis mode is not already set to absolute This should help when dealing with broken device drivers that report being game controllers and not fully supporting game controller functionality such as was reported here In order to test whether the negative case handling is improved find someone with such a broken device driver Subject of the issue FTLOADFORCEAUTOHINT causes shift of dots in letters i and j on the X axis Your environment Windows Latest master MXE cross compiling Steps to reproduce Use fonts that have dots in letters i and j wider that the base of the letter example Barlow Condensed SemiBold Expected behavior The dot should be aligned with the base of letter Actual behavior The mentioned flag causes hinting to be done separately on the base and the dot of the letters Additionally this flag causes too wide spacing between glyphs at small font sizes Im aware this has been requested to make small fonts look crisper but it has its own disadvantages Subject of the issue Combining GLIBCXXDEBUG and sfText does not work Allocating a sfText causes the program to segfault in sfTexts destruction My environment is pretty old If this cannot be reproduced using a newer setup then please close the issue and sorry for the noise Your environment Linux Ubuntu LTS Xfce Installed via apt apt says dfsg ubuntu My SFMLConfigh says define SFMLVERSIONMAJOR define SFMLVERSIONMINOR g Ubuntu ubuntu Problem only occurs with DGLIBCXXDEBUG Steps to reproduce Compile and run the code using bash g DGLIBCXXDEBUG bugcpp o bug lsfmlgraphics bug The C code is cpp include SFMLGraphicshpp int main sfText bug By compiling and running bash g DGLIBCXXDEBUG bugcpp ggdb O o bug lsfmlgraphics gdb args bug I obtained the following stack trace x ffff b in gnudebugSafesequencebaseMdetachall from usrlibx linuxgnulibstdcso x f in gnudebugSafesequencebaseSafesequencebase this x fffffffded inchrgoptimized out at usrincludec debugsafebaseh x f in gnudebugSafesequencestddebugvectorsfVertex stdallocatorsfVertex Safesequence this x fffffffded inchrgoptimized out at usrincludec debugsafesequenceh x in stddebugvectorsfVertex stdallocatorsfVertex vector this x fffffffdec inchrgoptimized out at usrincludec debugvector x fd in sfVertexArrayVertexArray this x fffffffdeb inchrgoptimized out at usrincludeSFMLGraphicsVertexArrayhpp x in sfTextText this x fffffffdde inchrgoptimized out at usrincludeSFMLGraphicsTexthpp x f in main at bugcpp Running the code cpp include SFMLGraphicshpp include iostream using namespace std int main sfText bug cout I am reached endl cout I am not reached endl shows that the seg fault happens in the destruction of sfText as the first string is printed but not the second Expected behavior Executing the program should do nothing Actual behavior The program segfaults From fedora spec files This is with the non free contents removed See rhbz and rhbz List of deleted files examplessoundresourcescanarywav examplesiOSresourcescanarywav examplesandroidappsrcmainassetscanarywav examplessoundresourcesorchestralogg examplesiOSresourcesorchestralogg examplesandroidappsrcmainassetsorchestralogg toolsxcodetemplatesSFMLSFML CLTxctemplatesansationttf toolsxcodetemplatesSFMLSFML Appxctemplatesansationttf examplesshaderresourcessansationttf examplespongresourcessansationttf examplesopenglresourcessansationttf examplesjoystickresourcessansationttf examplesislandresourcessansationttf examplesiOSresourcessansationttf examplescocoaresourcessansationttf examplesandroidappsrcmainassetssansationttf examplesshaderresourcesbackgroundjpg examplesopenglresourcesbackgroundjpg examplesopenglresourcestexturejpg examplespongresourcesballwav examplesshaderresourcesdevicespng exampleswin resourcesimage jpg exampleswin resourcesimage jpg Could you please consider create dist tar ball without that stuff to allow directly grab dist tar ball immediately after new release Subject of the issue Please add the ability to store loop through and get sockets directly into a socketselector right now we have to store our sockets into a vectors or list which shouldnt be necessary since socket selector already holds onto sockets in some sort of way I propose that a indexer be made available a getCount or getLength method be made available allow the user to set a max amount of sockets of a socketSelector Your environment Windows Ultimate bit SFML Visual Studio Community No compiler flags I know of Window larger than desktop size gets truncated on LinuxKDE My desktop size is x While trying to create window larger than this it gets truncated Eg windowcreatesfVideoMode My window Height is ok since its smaller that desktop but width is only Even if i resize the window afterwards by hand or by code its initial size stays truncated so coordinate conversion doesnt work and image im drawing as background which is x stays truncated on right This seems to be Linux or KDEonly issue because i cant reproduce it on windows Environment Linux Fedora KDE Plasma SFML gcc version Red Hat GCC Steps to reproduce cpp include SFMLGraphicshpp int main sfRenderWindow windowsfVideoMode Minimal complete and verifiable example windowsetFramerateLimit while windowisOpen sfEvent event while windowpollEventevent if eventtype sfEventClosed windowclose windowclear windowdisplay Expected behavior Window is created with size x Actual behavior Window is created with size x Description This pull request adds the feature described in How to test this PR Unfortunately I do not have any ready code that can prove this PR does the thing it should do However I have used a fork with the exact modification in my game using an adapted text drawable that uses HarfBuzz and needs to load the glyphs by using their index instead of the code point Subject of the issue When using Fullscreen modes on a Mac with a highdpi display in Scaled mode we observe a large black margin around the drawable area Your environment macOS SFML Xcode Special compiler flags used none Steps to reproduce Change Mac Display Resolution Settings to Scaled and More Space this selects the highest DPI img width altimage src Load default SFML Xcode app template and change to use highest fullscreen mode and render any sprite which covers the entire screen stdvectorsfVideoMode modes sfVideoModegetFullscreenModes sfRenderWindow windowsfVideoModemodes width modes height SFML window sfStyleFullscreen Expected behavior Drawable area should encompass the full screen Actual behavior We end up with a large black border around the outside of the image img width altimage src If we change the display to use the Default scaling it looks proper img width altimage src img width altimage src Subject of the issue Fullscreen is running on multiple monitors spanning On Linux many people including me have this issue maybe guaranteed But only one player has this issue in Windows Your environment Windows Linux MinGW latest Nvidia GTX from Windows user any other Nvidia card for Linux Steps to reproduce Have multiple monitors and run the program in fullscreen cpp include SFMLGraphicshpp int main sfRenderWindow windowsfVideoMode Fullscreen issue sfStyleFullscreen while windowisOpen sfEvent event while windowpollEventevent ifeventtype sfEventClosed windowclose windowclear windowdisplay Expected behavior Work on main monitor only Actual behavior Fullscreen spans over all monitors resolution does not matter like even if its x 