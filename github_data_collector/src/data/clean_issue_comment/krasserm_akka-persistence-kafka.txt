This is an early version with kafka support and transactional producers implemented as described in I would welcome some early feedback While this version works and passes the tests I think some additional work should still be done Replace all uses of the old scala kafka api with the new java producers and consumers Remove the dependency on kafka and only depend on kafkaclients Can the dependency on zookeeper and the BrokerWatcher mechanism be removed Upgrade to the latest version of akkapersistence not experimental anymore Dont use multiple KafkaProducer instances in the KafkaJournalWriters From the KafkaProducer javadoc The producer is thread safe and sharing a single producer instance across threads will generally be faster than having multiple instances Add tests for transactional behaviour by mocking the kafka producer Update the README Hi We are trying to use the library for Akka adn kafka It would be great if you add support to the latest versions Regards Sravan Has anyone tried to use this in conjunction with clustering I implemented a simple cluster singleton with persistence and a client When I run the system without persistence works like a charm When I run it with persistence enabled and LevelDB Cassandra or Couchbase backands also works When I run it with Kafka persistence enabled somehow the actors cannot communicate anymore Gossip protocol still works but the messages sent from the client simple case objects are not reaching the singleton anymore My guess is that somehow kafka persistence is interfering with message serialization but I dont really understand how has anyone has had similar experiences Thank you Hello I am using latest version akkapersistencekafka for persisting state of one kind of Actor but very hot Actor and I noticed lots CLOSEWAIT sockets and as application starts its number grows netstat ant grep CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT tcp CLOSEWAIT There is nothing except akkapersistence who connects to kafka looks like a bug See also Use case is the following an Akka application implementing event sourcing performs sharding internally before persisting events Such sharding would occur at a single actor with a fanout messages could then be sent along to a set of PersistentActors one for each partition of a topic This would allow external consumption of a partitioned topic when events are captured in an akka application 