 Use Rediscurrent instead of creating global redis variable in tests Move Feature class to its own file a follow up task could be to create a Rolloutcurrent that acts similar to Rediscurrent so we dont need to pollute the runtime with global variables I didnt do it here because I thought it warranted a conversation first as its a bit more complex than how Rediscurrent works Getting hundreds times activefeatures performance improvement with indices benchmark Something like this diff class Rollout def tohash results featureseach do feature withfeaturefeature do f results feature ftohash end end results end end I have tried to limit users by percent but seemed all the users can see the view that I blocked ruby if rolloutactive percentagerollout currentuser h Hello currentuserfirstname my initial instance ruby namespace RedisNamespacenewRailsenv redis redis rollout Rolloutnewnamespace rolloutdefinegrouppercetageusers do user user end rolloutactivateuserspercentagerollout Userall rolloutdeactivategrouppercentagerollout percentageusers rolloutactivatepercentage percentagerollout please correct me if what i did wrong here thanks Have yall thought about adding account support Our system has the concept of accounts which are collections of users We would like to enable a feature for a account without having to add each individual user Maybe Im using it wrong or its mentioned somewhere in the docs and I have not read it properly But if you do this user Userfirst rolloutactivategroupchat all Youd assume this activates feature for everyone and it does rolloutdeactivateuserchat user Im assuming this should only deactivate the feature for this user everyone else should still have it active rolloutactivechat user This should return false but returns true 