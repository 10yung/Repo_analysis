Addresses The Test Widget manufacturer now uses Mongo so the SKUs resemble ObjectIds Added a failing test to show why this is a problem Fix the problem Expected Behavior After softdeleting a resource a PATCH should restore it according to the documentation Actual Behavior When doing a PATCH request on a softdeleted resource it returns A PUT request returns Duplicate key error at index The resource has deleted true at a DB level I tried to manually change it to false and also remove it but nothing happens it seems that theres something else going on behind the scenes it doesnt simply look for a deleted property otherwise it would be restored Another thing that I noticed is that even if I disable the softdelete feature the resources that were softdeleted dont show up again when they should This is the relevant part of my domain places schema place allowunknown True commerces schema commerce datasource source places softdelete True professionals schema professional datasource source places softdelete True This is an example of the request that Im doing PATCH apicommerces deebafd a ce ba Environment Python version Eve version As a developer I want Eve to do no objectid coercion aside from id fields so that I can store foreign mongo ids and still have post and get working Background On from its not uncommon to have a service that allows clients to put data to the server and give the data handles determined by the client If the client side developers are also using mongodb then its a real use case to have strings that can be parsed as objectid but that we dont want to have as objectids This works with queryobjectidasstring however in more complicated queries where we mix in actual objectids it can break The fix here looks like it does the simplest thing that could work by checking to see if the type being gotten is an id field and if it is always cast to objectid Example use case A photo service where users can set a handle for the photos A client uploads the photo and sets the handle as their local objectid On the server Eve side the user id is an id And the photo id is a string The resulting request would fail with queryobjectidasstring set to either False or True curl in user in I think the prototype posted in would fix this Expected Behavior When using the command curl i localhost LASTEW SZ it should response the item specified by the key tscode with SZ python curl i localhost LASTEW HTTP OK ContentType applicationjson ContentLength XTotalCount Server Eve Werkzeug Python Date Fri Dec GMT items tscode SZ tradedate open close high low created Thu Jan GMT updated Thu Jan GMT etag b db b e accbab b d f links self title Lastew href LASTEW SZ tscode SZ tradedate open close high low created Thu Jan GMT updated Thu Jan GMT etag acbdc cb b e f c c links self title Lastew href LASTEW SZ links parent title home href self title LASTEW href LASTEW meta page maxresults total curl i localhost LASTEW SZ Actual Behavior But it responses a code pytb curl i localhost LASTEW SZ HTTP NOT FOUND ContentType applicationjson ContentLength Server Eve Werkzeug Python Date Fri Dec GMT status ERR error code message The requested URL was not found on the server If you entered the URL manually please check your spelling and try again Environment Python version Eve version required by evesqlalchemy reproduced when Eve is upgraded to MongoDB doesnt create new documents with provided IDFIELD File settingspy IDFIELDmyid POST new document returns myid in the response updated Sun Dec GMT created Sun Dec GMT etag c a d f a c d cf cd myid df c e e fcad c b links self title Account href accounts df c e e fcad c b status OK But when fetching documents identifier fields are still id items id df c e e fcad c b username admin password pbkdf sha jwkkbcNU dbce fa f e b c f ae c a fd c db a e roles admin updated Sun Dec GMT created Sun Dec GMT token youPRtNh CxrUndGaOJRM p m YkhRnr CNstHQ etag c a d f a c d cf cd links parent title home href self title accounts href accounts meta page maxresults total Expected Behavior The data base should create new documents having id field name is myid Actual Behavior Id fields are still id Environment Python version Python Eve version Eve The sense of the conditional python if configBANDWIDTHSAVER return makes the BANDWIDTHSAVER have no effect as all of the document fields get removed unless one has all the fields in the projection Example http POST Accept applicationjson ContentType applicationjson CacheControl nocache name Jaguar Jumps start T Z duration weeks expires true name Koala Kandy start T Z duration weeks expires true results in only the auto processed fields If I forcejump while debugging to skip to the return statement on the second one I get the expected entire document Below is what I get with that skip to the return json status OK items id df a a d a ef cad created T updated T etag d c a a fb e a c f a bfb links self title Rule href rules df a a d a ef cad status OK name Koala Kandy start T UTC duration weeks expires true updated T created T etag a a e cd a d cd bf a d a id df a a d a ef cae links self title Rule href rules df a a d a ef cae status OK Python version Eve version Schema python rules allowunknown True schema name type string start type datetime required True coerce todatetime duration type string allowed days weeks months years onetime required True expires type boolean default False Expected Behavior When performing a query via the url that returns items the response meta and response links reflects the total number of items in the collection only when I include a spatial query operator For example if my endpoint is geosensors and my geometry field is of type point a non spatial query returning items acts as expected geosensorswheregeometry returns items links parent titlehome href self titlegeosensors hrefgeosensors meta page maxresults total Actual Behavior I run a spatial query that returns items the response links and response meta reflects the totals items in the collection geosensorswheregeometry near geometry type Point coordinates maxDistance returns items links parent titlehome href self titlegeosensors hrefgeosensorswhere geometry near geometry type Point coordinates maxDistance next titlenext page hrefgeosensorswhere geometry near geometry type Point coordinates maxDistance page last titlelast page hrefgeosensorswhere geometry near geometry type Point coordinates maxDistance page meta page maxresults total Environment Python version Eve version Expected Behavior Given a certain resource assets with somedict as an attribute of its schema DOMAIN assets schema somedict type dict After a PATCH request to a given item say with body somedict the value of somedict should now be Actual Behavior Instead after the PATCH request somedict has the previous value for example weight Environment Python version Eve version Bug The problem is that the original value is being updated with an empty dict origvalueupdateresolvenesteddocumentsvalue origvalue where resolvenesteddocumentsvalue origvalue is and the result of this is that origvalue keeps their original values evemethodspatchpy def resolvenesteddocumentsupdates original Nested document updates are merged with the original contents we dont overwrite the whole thing See for details versionadded r for field value in updatesitems if isinstancevalue dict origvalue originalsetdefaultfield if origvalue is None r field value else origvalueupdateresolvenesteddocumentsvalue origvalue r field origvalue else r field value return r This pull request mitigates the problem described at Description Given a resource schema that uses an anyof in a list when parsing a value in a field Eve tries to apply all the possible deserializations but if several deserializations are possible it will end up parsing it using an invalid deserializator Example Using this resource definition python from eve import Eve MONGOHOST localhost MONGOPORT RESOURCEMETHODS GET POST DELETE ITEMMETHODS GET PATCH PUT DELETE resource description doc etagignorefields lastexecuted schema test type list schema anyof type dict schema type type string allowed number required True value type number required True type dict schema type type string allowed boolean required True value type boolean required True type dict schema type type string allowed datetime required True value type datetime required True type dict schema type type string allowed string required True value type string required True type dict schema type type string allowed integer required True value type integer required True url test resourcemethods GET POST itemmethods GET DELETE PUT PATCH settings DOMAIN test resource app Evesettingssettings apprun This are valid POST queries that will fail python Value is deserialized as an integer q test type boolean value True Value is deserialized as a boolean q test type number value Value is deserialized as a datetime q test type string value Tue Apr GMT This are invalid POST queries that wont fail python Value is deserialized as an integer q test type integer value True q test type number value True Environment Python version and Eve version and master branch 