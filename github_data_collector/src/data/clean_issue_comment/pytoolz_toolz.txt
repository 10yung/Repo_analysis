Resolves I find myself needing these extras to replace python operators that dont work well within pipelines If maintainers would like I can submit a pull request def curriedternarycondition ftrue ffalse def innerargs kwargs return ftrueargs kwargs if conditionargs kwargs else ffalseargs kwargs return inner def starfunction Callable Callable return lambda x functionx toolzcurry def assertfoutputoninpf inp assert finp def assertthatf return currieddoassertfoutputoninpf toolzcurry def containscontainer element return element in container toolzcurry def equalsx y return x y The online docs are for version while the latest release is For example the API documentation contains no reference to the composeleft function Can you also publish universal Python wheel at releases This should not be hard as the package is purely Python and this would just require adding additional bdistwheel to setuppy building pytoolz mrocklin jcrist eriknw Hello Ive noticed a surprising behavior of first which can be well illustrated by python printlistmap first I would expect this statement to raise an exception because first normally raises an exception on an empty sequence However the exception is StopIteration which seems to interfere with map and stops its iteration What do you think about catching StopIteration in first and reraising a different exception so it can propagate until explicitly caught Which exception would be appropriate Python gives us fold as functoolsreduce which allows us to collapse a sequence into a single value The dual to fold is unfold which generates a sequence from an initial value This PR introduces two generator functions for unfold called unfold and unfold The only difference between them is that the former takes a single function while the latter takes three One may be more convenient than the other depending on the use case See unfold in Ive tested and documented both functions This is because you cant easily use a lambda to raise an exception and sometimes the need arises to translate an exception X into exception Y when using toolzexcepts attrget and attrpluck work the same way as get and pluck on objects python class Aobject pass a A aid aname ABC attrgetid a Same as aid This feature shall be useful not only to standard objects but also data containers such as typingNamedTuple and dataclassesdataclass Hey I love toolz but the one thin Ive been missing is a possibility to create lambdas in a less verbose way At some point I had installed a library which I cant seem to find anymore that created lambdas through the use of Eg x was translated to lambda x x but it had its limits as something like len would not work I wrote a function that takes a string replaces percent signs by arguments and evals it python import re def fsingleargfunction body functionreplace replace replace return evallambda body def ffunction Translates the provided expression in string form into a lambda Any n where n is a int will be used as nth argument starting with If only one argument is required a can be used To escape a sign use singlepercentmatch researchr d function if singlepercentmatch return fsingleargfunction matches refindallrPn d function nargs if lenmatches else maxintmatch for match in matches replacetuples fn fn for n in rangenargs newbody function Not very functional but since this is python I think its pragmatic for tup in replacetuples newbody newbodyreplacetup head lambda joinpluck replacetuples if nargs else lambda return evalhead newbody Trying it out python f Hey Hey fHey Hey fHey Hey I found this would fit one of my favorite libraries perfectly what do you think about this Hi thank you for the great package We use it happily in several projects However the latest release broke some of our code Specifically in in section A there is explicitly written This makes the above example work However this may break existing code And it indeed broke our code It probably does not matter what the code was exactly However what matters is that we cannot rely on toolz versioning before it reaches because until that you can according to change everything Isnt it already time to release version and adhere to semver Is there any plan towards version 