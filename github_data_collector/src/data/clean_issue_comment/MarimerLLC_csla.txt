Describe the bug Fetching a large k data set using CSLA takes several seconds Doing the same with version takes less than one second ms For a minimal example see Version and Platform CSLA version OS Windows Platform Net Framework Describe the bug The PropertyStatus control is not showing on any broken rules when using a Net Core WPF project Both for net core and I have created a simple project in both WPF Net project and WPF Net Core project with the same code In WPF Net the brokenrule triggers the error display of the PropertyStatus control In the WPF Net Core project nothing happens Version and Platform CSLA version OS Windows Platform WPF Net Core Set up a CSLAspecific NuGet feed not on nugetorg but on Azure DevOps or MyGet or something so every CSLA CICD build in master results in an updated set of packages pushed to this feed That would allow people who want to use these daily builds to reference them by adding the feed to their Visual Studio instance It would simplify testing quite a lot for people working on CSLA itself too Describe the bug I used the MinLength rule in some unit tests in CslaBlazorTest without specifying the optional message parameter The AppVeyor build failed and this appears to be because there is a missing resources entry that the MinLength rule requires but only under the culture under which AppVeyor runs tests Unit tests were all passing when run on my local machine which will execute under the culture of enGB Version and Platform CSLA version preview OSplatform AppVeyor triggered by submission of PR to csla project on GitHub Code that Fails rule new CslaRulesCommonRulesMinLengthLastNameProperty ruleSeverity CslaRulesRuleSeverityWarning BusinessRulesAddRulerule Rule is broken after update to the property with which the rule is associated Stack Trace or Exception Detail The LastName field is required rulecslarulescommonrulesminlengthLastNamemin Could not find the resource CslaPropertiesResourcesresources among the resources embedded in the assembly Csla nor among the resources in any satellite assemblies for the specified culture Perhaps the resources were embedded with an incorrect name Additional context Identified during submission of PR Describe the bug When the code fix for CSLA is applied when no modifiers exist on the property the resultant code is odd Version and Platform CSLA version Whatever the latest is Code that Fails If I have my backing property defined like this This should fail because it isnt public PropertyInfobool ResourceNotPublicProperty RegisterPropertyboolc cResourceNotPublic And I use the code fix the resulting code looks like this This should fail because it isnt public public static readonly This should fail because it isnt public PropertyInfobool ResourceNotPublicProperty RegisterPropertyboolc cResourceNotPublic Technically it does compile but thats ugly For some reason it repeats the comment thats there This doesnt happen if I have at least one modifier for the property The code fix has to be better than that As of version the Csla NuGet package only contains the default enus language Theres a doc that describes two options for including localized resources via NuGet It sounds like the most direct approach is for the Csla nuspec to include the localized resources in the primary package Is your feature request related to a problem Please describe No problem just a code cleanup issue Describe the solution youd like I went through CSLAs code base using the VS Code Clones tool There are a couple of areas where there are exact copies Here are some examples BusinessBaseLoadPropertyPPropertyInfoP propertyInfo P newValue the code in the try block is duplicated in other places A lot of the portal classes GrpcPortal HttpPortal and RabbitMqPortal are copies CslaActionExtenderExecuteSaveActionISavable savableObject ITrackStatus trackableObject CslaActionExtenderProperties props this is duplicated in other places GrpcProxy and HttpProxy have duplication BusinessBaseInitializeBusinessRules is duplicated in ReadOnlyBase I realize that code duplication isnt always a bad thing in code and sometimes trying to share code can actually be a detriment That said it may be worth seeing if some of these duplications can be eliminated Describe alternatives youve considered Just leave it asis Is your feature request related to a problem Please describe Manager classes can be removed in support of DIIoC Describe the solution youd like I know CSLA has manager classes like ConnectionManager and I think DbContextManager that frankly should be handled by DIIoC With CSLA injecting dependencies like this is pretty easy and this is the pattern that is typically done in most code Furthermore using manager classes like this is a static shared dependency and follows the service locator antipattern and it makes it harder to write isolated unit tests Therefore we should consider deprecating or at least discouraging developers from using them I realize these types are hard to remove given that theyve been used in the past But better patternsapproaches exist and I think a longterm strategy should be investigated to remove them Describe alternatives youve considered Keep the types in CSLA but discourage people from using them Is your feature request related to a problem Please describe Ideally we would like the ConnectionManagerT class to support NET s SqlConnectionAccessToken property Were about to start using Azure MFA authentication so we arent going to be passing a UserPW but instead an Access Token However because ConnectionManagerT calls new C followed by COpen there is no time to set the AccessToken property Describe the solution youd like Recognizing that this would probably break pre apps i could imagine three options Change ConnectionManagerT to offer a virtual function we could override and set properties to prior to calling Open within an inherited class For example on Line here make a virtual function called OnBeforeOpen where we could set it similar to how you do it in GetHttpClient here Add a static event wed listen for to set the connections properties prior to calling Open Add a static dictionary of properties string PropertyName object PropertyValue to set with reflection prior to calling Open Describe alternatives youve considered The only other option would be to handle the sql references ourselves which is basically reinventing the wheel since you already offer an excellent solution