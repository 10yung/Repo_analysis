Hello Thank you for PromiseKit In this pull request I added a new parameter to some when versions With this parameter when behaves like race with the amount of winners Enabled the BUILDLIBRARYFORDISTRIBUTION flag introduced in Xcode for supporting framework distribution for creating the XCFramework I have multiple promises that can be pending for a long time or get rejected early on Im looking for a way to find out which is the first to fulfill For example One promise gets rejected another fulfills and a third is still pending In this case I would like the new promise to fulfill When all promises get rejected I would like the new promise to reject with an array of errors I cant use race since it will reject once my first promise will reject I cant use whenfulfilled since it will reject once one of my promise rejects and will continue after the first promise fulfills I cant use whenresolved since it will continue after the first promise resolves What Im looking for might not exist yet but I would expect it to be called something like racefulfilled In the v branch there is no podspec at least for the tip of it and the most recent release Promise installed via CocoaPods Im trying to use PromiseKit with ReSwift thunks and running into an issue which I feel might be down to my understanding of initializing Promises func foo Thunk Promise let promise Promise let thunk Thunk promisefulfill return thunk promise let thunk promise foo dispatchthunk promisedone My question is how do I initialize a Promise that returns String Any instead of the Void of Promise I try to use the Swift Package Manager I have no problem using with the promises classes and functions But I cant use the CLLocationManager extension I imported the PromiseKit but the extensions folder is outside the Sources folder of Swift Package Manager I think this is the problem Any suggestion As development of v is well underway and I just ran into this limitation I thought Id make the request Promise should be generic to its Error type This was previously and extensively discussed in However its been over years and much has changed including the addition of Result to the language and the fact that Error now conforms to itself making possible a fully typesafe error pipeline We recently made this change in Alamofire making our Response types generic to the Failure type as well as the Success type However for projects using Alamofire or any API that produces typed errors and PromiseKit this creates a rather tedious developer experience of having to cast back out to the known error type before processing Personally I dont see much in the way of a downside What do you think Moving PromiseKitconf to a static variable would enable thread safe lazy initialization Something like swift struct Configuration let label String struct ConfContainer static var conf Configuration Configuration label Default static let conf return conf ConfContainerconf Configuration label As Set print ConfContainerconflabel As Set The actual implementation should probably log a warning if the conf var is set after conf has been initialized I got the idea from this stack overflow post The post actually says that global variables initialize lazily but this this didnt work in my playground I suppose it might work in a project Im happy to work up a PR eventually not immediately but if you are interested in going this way we should discuss naming and design first Breaking change obviously This PR introduces tuple overloads for whenresolved which make use of Thenable protocol and additional tuple overloads for whenfulfilled up to arguments This PR also introduces an associated type R representing the result type in Thenable protocol which improves a return type in whenresolved when using Guarantees so this is now allowed let p Promisevaluetrue let p Promisevalue let g Guaranteevalueabc whenresolved p p g done r r r in r is ResultBool r is ResultInt r is String In the future it might be worth considering changing the pipe declaration to use R instead of ResultT this would however impact all the other operators so I didnt want to introduce such a big change in this PR When upgrading from PromiseKit to we are always getting an error in NSURLSessionAnyPromisem file Please let me know if anything specific needs to be changed in my project configuration 