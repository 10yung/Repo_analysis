As I see there are some people interested in the encryption ability for this library I propose to add callback handles which will help to add almost any external logic for transparent data encryption something like csharp Ecrypt byte BeforeSendbyte data and csharp Decrypt byte BeforeReceivebyte data where BeforeSend function result will replace the actual users data buffer right before actual sending the UDP without replacing librarys service data from header and BeforeReceive will be called on actual data receiving but BEFORE firing the NetworkReceiveEvent event Having just those handlers will allow to implement AES encryption really easy Sure the whole encryption logic implementation will remain on developer who will use the library cryptoprocessor initialization keys management etc I think it would be useful if NetManagerStart and NetManagerConnect were combined into two functions NetManagerHost and NetManagerJoin you could even make NetManagerHost accepts a passkey like NetManagerConnect and NetManagerJoin and automatically reject people host side that dont match Version OS Windows Home bit IDE Visual Studio Community As you may know there are bunch of cases where NAT Punch Through doesnt work So we need to have alternative way to communicate client and server both behind NAT And only options which seems working in every case is a Socks server So it will be very useful to have such options in the lib Hello Correct me if I am wrong but the actual system consists in fixing the bugs in the master branch eg and then merging all the fixes concerning the old versions too in a new stable build eg few weeks later Dont you think it would be clearer and easier to manage to fix the bugs at the same time in the master branch eg and in long term support branches eg Long Term Support It would also obviously bring the fixes faster for the stable versions I really liked this shift made by Unity concerning version management from x and patches to U x and long term support Regards Hi on iPhone if we block screen after some time we start get this toooone of messages and when we go to application he crash not enought memory Platform Unity many many this messages R Error code SystemNetSocketsSocketException x The socket is not connected at SystemNetSocketsSocketReceiveFrom SystemByte buffer SystemInt offset SystemInt size SystemNetSocketsSocketFlags socketFlags SystemNetEndPoint remoteEP x in at LiteNetLibNetSocketReceiveLogic SystemObject state x in at SystemThreadingThreadHelperThreadStartContext SystemObject state x in at SystemThreadingExecutionContextRunInternal SystemThreadingExecutionContext executionContext SystemThreadingContextCallback callback SystemObject state SystemBoolean preserveSyncCtx x in LiteNetLibNetDebugWriteLogicNetLogLevel String Object LiteNetLibNetSocketReceiveLogicObject SystemThreadingThreadHelperThreadStartContextObject SystemThreadingExecutionContextRunInternalExecutionContext ContextCallback Object Boolean With the current release we get this exception in the log when starting the server B Bind exception SocketException Protocol option not supported at SetSocketOption SocketOptionLevel optionLevel SocketOptionName optionName Boolean optionValue at LiteNetLibNetSocketBindSocket Socket socket IPEndPoint ep Boolean reuseAddress errorCode ProtocolOption And probably at the same time Unity writes this to stdout SystemNetSocketsSocketOptionName x b is not supported at IPv level Library version release version Framework Unity NET backend OS Linux Why packets does not have checksum data would get corrupted Thank you for this useful library I found that if any peer hole punches under a mobile network it will get socket exception and hole punch failed but if I increase the socketTtl to it works well csharp In NatPunchModulecs private void HandleNatIntroductionNetDataReader dr omitted if hostByte HostByte socketTtl here socketSendTowriterData writerLength remoteExternal ref errorCode socketTtl NetConstantsSocketTTL omitted Library version commit id b f eccdf dd ee d c b e ff Framework NET Framework OS Win Replace STATSENABLED with some bool flag like StatisticsEnabled or NetManagerStatisticsEnabled so it may be enableddisabled without recompiling AFAIK a simple bool flag check does not affect the CPU Not sure how big of an issue this is but it seems that the way connections are established is Client Send connect request with connectionID generated from tick time Client Receive connect request set connectionState to connected send connect accept with received connectionID Client Receive connect accept if connectionID is same we set connectionState to connected Shouldnt it be more so like how tcp way handshake does it Possibly for security reasons such as helping avoid spoofed ip address Client Send connect request with randomly generated long value Client Receive connect request send connect accept with received long value as well as send our own randomly generated long value Client Receive connect accept if sent long value is same we set connectionState to connected and we send a ConnectAcceptFinal message with received long value Client Receive connect accept final if sent long value is same we set connectionState to connected Maybe even then just keep connectionID a int that we just increment every new connection