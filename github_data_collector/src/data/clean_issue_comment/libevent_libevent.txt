 Getting the following issue while trying to run make libslibeventopenssl so undefined reference to SSLsetacceptstate libslibeventopenssl so undefined reference to BIOmethsetwrite clang error linker command failed with exit code use v to see invocation make Makefile sampleleproxy Error make Leaving directory sharedtmptempworkspacelibevent make Makefile all Error OS specs macOS Mojave make cmake openssl installed using brew Steps I have used Ensured Ensured the path and variables and running the following script usrbinenv bash set xe rm rf libevent git clone cd libevent make clean true Ensure ls lad NDKtoolchainsllvmprebuiltdarwinx export HOSTTAGdarwinx export NDKHOMELibraryAndroidsdkndk export GNUMAKENDKprebuiltHOSTTAGbinmake export GNUMAKEusrlocalbingmake export TOOLCHAINNDKtoolchainsllvmprebuiltHOSTTAG export ARTOOLCHAINbinaarch linuxandroidar export ASTOOLCHAINbinaarch linuxandroidas export CCTOOLCHAINbinaarch linuxandroid clang export CXXTOOLCHAINbinaarch linuxandroid clang export LDTOOLCHAINbinaarch linuxandroidld export RANLIBTOOLCHAINbinaarch linuxandroidranlib export STRIPTOOLCHAINbinaarch linuxandroidstrip export PKGCONFIGPATHusrlocaloptopenssl libpkgconfig autogensh configure host aarch linuxandroid GNUMAKE Pros windowsosxlinux in one place may fix tests under osx can be used to build docker images according to doc allows concurrent jobs although only for osx while travisci allows only concurrent jobs and no parallelism across various OSes Closes Closes Refs Hey there and happy new year Consider a user case of a HTTP download server which provides downloads of a large file by using evhttpsendchunkreply Assume that you want to shut down the server for the maintenance During the shutdown the server is still serving some active downloads and many requests may still be coming Is there any a nice way to deny the incoming requests and to store the states of all active downloads or finish those downloads before the shutdown in this case Additionally I have another question which could be relevant to the above question I use eventbaseloopexitevBase null to stop the event loop and expect that the loop will exit after it completes the handling of active downloads However I get an assertion when I shut down the server buffereventc Assertion bufevprivaterefcnt failed in buffereventdecrefandunlock I am not sure how eventbaseloopexit behaves The callback set by evhttpconnectionsetclosecb is not invoked during the loop exit Thank you for any tips Im trying to find out how to do a SSLshutdown and why there isnt a int buffereventsslshutdownstruct bufferevent bev function triggering a DISCONNECTED event similar to CONNECTED The underlying socket Im using is nonblocking Im trying to understand the following sentence from the OpenSSL manual in the context of being used with libevent When using a nonblocking socket nothing is to be done but select can be used to check for the required condition What required condition canshould be checked and is there a benefit of doing this in the libevent event loop make libevent shutdown aware I know I can get the SSL from buffereventopensslgetssl and call SSLshutdown directly followed by a buffereventfree But its not clear that this is correct if the socket is nonblocking As there is a reference that you may in some cases need further readwrites in case the BIO is nonblocking that wouldnt be sufficient I found this thread on the openssl maling list but it didnt make it clear to me Libevent Version System ubuntu LTS Desktop as title mentions after evdnsgetaddreinfo is called I free its base object by calling evdnsbasefreeevdnsbase before it get a result it might leaks some memory according to vg detection sample codes include event dnsh include event eventh include event threadh include cassert include cstdlib include cstring static void dnscallbackint errcode struct evutiladdrinfo addr void usrptr if errcode assertaddr else evutilfreeaddrinfoaddr int mainint char const char host wwwgooglecom evthreadusepthreads eventbase eventbase nullptr evdnsbase evdnsbase nullptr eventbase eventbasenew evdnsbase evdnsbaseneweventbase EVDNSBASEDISABLEWHENINACTIVE struct evutiladdrinfo hints memset hints sizeofhints hintsaifamily PFUNSPEC hintsaiprotocol IPPROTOTCP hintsaiflags EVUTILAICANONNAME evdnsgetaddrinfoevdnsbase host nullptr hints dnscallback nullptr lets not call eventbaseloop evdnsbasefreeevdnsbase eventbasefreeeventbase the VG test results Memcheck a memory error detector Copyright C and GNU GPLd by Julian Seward et al Using Valgrind and LibVEX rerun with h for copyright info Command zecorebuildbintestlibevent HEAP SUMMARY in use at exit bytes in blocks total heap usage allocs frees bytes allocated bytes in blocks are definitely lost in loss record of at x C B calloc in usrlibvalgrindvgpreloadmemcheckamd linuxso by x E C evdnsgetaddrinfo in usrlibx linuxgnulibeventextra so by x AB main testLibeventcpp LEAK SUMMARY definitely lost bytes in blocks indirectly lost bytes in blocks possibly lost bytes in blocks still reachable bytes in blocks suppressed bytes in blocks Reachable blocks those to which a pointer was found are not shown To see them rerun with leakcheckfull showleakkindsall For counts of detected and suppressed errors rerun with v ERROR SUMMARY errors from contexts suppressed from Ive registered a callback function via evhttpsetcb Inside of the callback function I create and send the reply via evhttpsendreply but how can I keep the connection open and read from and send to the peer after that I am implementing a simple WebSocket server so the connection might be open for a quite long time At installation rpath in installname is replaced with absolute path How can I prevent this cd LIBEVENTCMAKEPATH cmake DCMAKEINSTALLPREFIXPATHLIBEVENTBUILDPATH LIBEVENTPATH cmake build LIBEVENTCMAKEPATH target install config Release otool D LIBEVENTBUILDPATHliblibevent dylib Result Usersbarricadenickbuildlibevent macosliblibevent dylib Expected result rpathlibevent dylib the same as in zlib libpng SDL etc Mac OS If we do not remove a bad fd from the select list we keep getting the same error from select and we stop doing any progress as we loop on selectdispatch Thus we forcefully disable all bad fd as soon as select fails and we are back in track progress ensues and everything seems to work as expected no leftover events in the event base Signedoffby George Bosilca bosilcaiclutkedu I noticed that d beb dc b c edf b c added the ability to bind the HTTP server to a UNIX socket Is there a way to do the same but for the client A long time ago I submitted a PR for some code I used to make HTTP requests over a UNIX socket but this wasnt accepted Maybe my approach was wrong but Im still looking for a way to do this I m working on the Zeek project and we re investigating switching from our internallywritten event loop over to use something like libevent One of the features of our existing handwritten loop is that we can trigger it using an artificial time base which allows us to move time forward based on the timestamps of packets in a packet capture Timers can then fire based on the packet times instead of wallclock time and we get repeatable results when using such files as if they were still live data Does something like that already exist in libevent or cauld it be easily added I dug through the code a little bit today and it seems possible to add it but I thought I d ask before I went too far with it