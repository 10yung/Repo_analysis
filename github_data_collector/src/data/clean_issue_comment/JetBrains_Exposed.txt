orgjetbrainsexposedexceptionsDuplicateColumnException Duplicate column name id in table SYSUSER Performed the following changes Added KDoc comments to most public declarations There are still a few I didnt know how to describe Rearranged some declarations to group them by functionality Reformatted code to follow Kotlin Coding Conventions Added explicit type to public API declarations Edited some exception messages to be consistent Renamed internal object MysqlFunctionProviderINSTANSE to MysqlFunctionProviderINSTANCE should not break anything Hello I use exposedspringbootstarter but additionalspringconfigurationmetadatajson is not merged into springconfigurationmetadatajson Therefore code completion dosen t work with applicationproperties or applicationyml files jar tf exposedspringbootstarter jar METAINF METAINFMANIFESTMF org orgjetbrains orgjetbrainsexposed orgjetbrainsexposedspring orgjetbrainsexposedspringDatabaseInitializerKtclass orgjetbrainsexposedspringDatabaseInitializerclass orgjetbrainsexposedspringDatabaseInitializerCompanionclass orgjetbrainsexposedspringautoconfigure orgjetbrainsexposedspringautoconfigureExposedAutoConfigurationclass orgjetbrainsexposedspringautoconfigureExposedPropertiesclass METAINFexposedspringbootstarterkotlinmodule METAINFadditionalspringconfigurationmetadatajson METAINFspringfactories The releases on github appear to only go up to where as the bintray repository linked in the ReadMe goes up to and the Change Log says the versioning goes up through which can be found seperately after some searching here instead Can these be adapted somehow to let them stay more in sync Id happily create a PR to bring them into consistency but itd only last till the next change How about pointing the ReadMe to the Wiki Getting started instead of directly linking and updating the older kotlinexposedexposed package on bintray to alert users to the now split up libraries under kotlinexposed I am trying to develop a small ktor server that receives a post request with a CSV file as multipart and inserts all rows into a MySQL database Everything works fine except that the second request to the server always crashes with the following stack trace orgjetbrainsexposedexceptionsExposedSQLException commysqljdbcexceptionsjdbc MySQLNonTransientConnectionException No operations allowed after connection closed at orgjetbrainsexposedsqlstatementsStatementexecuteInexposedStatementkt at orgjetbrainsexposedsqlTransactionexecTransactionkt at orgjetbrainsexposedsqlTransactionexecTransactionkt at orgjetbrainsexposedsqlQueryiteratorQuerykt this is the part of the stack trace after the insert is called by exposed at first I created my SQL connection using URL and password but now I decided to go with javaxsqlDataSource implementation where I just implemented all getConnection overloads after some debugging and searching around in the exposed library I found the following piece of code private fun doConnectgetNewConnection Connection setupConnection Connection Unit manager Database TransactionManager ThreadLocalTransactionManagerit DEFAULTISOLATIONLEVEL DEFAULTREPETITIONATTEMPTS Database return Database getNewConnectionapply setupConnectionthis apply TransactionManagerregisterManagerthis managerthis Here getNewConnection is only called once and not passed to the transaction manager is it possible that this prevents opening a new connection to MySQL when a previous got closed Connection creation val connection Database DatabaseconnectMySqlDataSource MySqlDataSource override fun getConnection Connection return getConnectionroot override fun getConnectionusername String password String Connection return DriverManagergetConnectionjdbcmysqllocalhost mydb username password Hi I have been trying out Exposed for a while and I noticed that there is no built in support for validations either on DSL or DAO side I suppose this is by design if Exposed is a lightweight SQL library I can see the argument on not having validations in exposed The reality however is that I have had the need for validations in every project I have been involved with If exposed is not going to have support for validations what do you think would be the best approach to deal with them on application level both on DSL and DAO style One approach could be adding them to the repository DAO kotlin object Events IntIdTable val startDate datestartdate val endDate dateenddate class Eventid EntityIDInt IntEntityid companion object IntEntityClassEventEvents var startDate by EventsstartDate var endDate by EventsendDate data class EventDataClassval startDate DateTime val endDate DateTime class EventsRepository fun saveevent EventDataClass val errors validateevent if errorsisNotEmpty throw ExceptionerrorstoString Eventnew startDate eventstartDate endDate eventendDate private fun validateevent EventDataClass MutableListString val errors mutableListOfString if eventendDateisBeforeeventstartDate errorsaddEnd date is before start date return errors For a developer that comes from Ruby on Rails world this code looks a bit odd My expectation was that Event class would be the public API to create new records in DB but at least if I want to add validations it looks like it cant be the public API Also all method is not transactional so is the design idea here indeed so that in both DSL and DAO styles a repository should be implemented which is transactional Second question is also kind of related on validations Is it so that there is no support for single table inheritance In Rails what I could do is add validations but also relationships on the child models ruby class Calendar ApplicationRecord hasmany events end class Event ApplicationRecord belongsto calendar end class PrivateEvent Event belongsto user end class PublicEvent Event end calendar Calendarcreate publicevent PublicEventcreatecalendar calendar OK calendar Calendarcreate privateevent PrivateEventcreatecalendar calendar NOT OK User is missing puts privateeventerrors Prints out a validation error that user is required If there is no support in Exposed for this ideas to implement this on application level are welcome too Ive created a baseTable from which I extend all my other tables to add on a createdAt field However Ive noticed that the createdAt field is often not populated to the current time time of insertion when using defaultExpression however using clientDefault does work Is there a reason defaultExpression might not be working Allow to integrate SQL binary operators eg DIV Property klass should be initialized before get Above is the error that is thrown if we try to use the DAO class as a general POJO