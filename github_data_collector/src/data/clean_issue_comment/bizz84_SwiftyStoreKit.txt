 I want to display auto renewable product price in local currency and display it on UILabel Is it possible to achieve that Platform x iOS x macOS tvOS In app purchase type x Consumable x Nonconsumable x AutoRenewable Subscription x NonRenewing Subscription Environment x Sandbox x Production Version Related issues When compile new featureios tablet mac of Xcode on mac is error Report Issue summary When compile it shows error was below xxxxxxPodsSwiftyStoreKitSwiftyStoreKitPaymentQueueControllerswift Cannot override paymentQueue which has been marked unavailable Error function if osiOS func paymentQueue queue SKPaymentQueue shouldAddStorePayment payment SKPayment for product SKProduct Bool return shouldAddStorePaymentHandlerpayment product false What did you expect to happen Should not no error What happened instead No has only this one happen Platform iOS macOS tvOS In app purchase type Consumable Nonconsumable AutoRenewable Subscription NonRenewing Subscription Environment Sandbox Production Version Related issues Report Issue summary When user execute the SwiftyStoreKitpurchaseProduct function it takes long to time to show next dialog box For each steps it takes more than seconds What did you expect to happen When execute SwiftyStoreKitpurchaseProduct it will execute faster and each steps should be faster until user make the purchase What happened instead Very slow Platform x iOS In app purchase type x Consumable Environment x Production Version Issue summary I printed the log in the official environment and found that the user paid in the official environment and the payment was successful but the library failed to return At this time I can get the payment receipt Go to server authentication is OK What did you expect to happen I want SwiftyStoreKit to handle this situation After adding SwiftyStoreKit to my macOS app now I see the location arrow at the menu bar while I am using SwiftyStoreKit to check a receipt Do SwiftyStoreKit use location services in any way If so do I need to add some entitlement to my app so it will not be rejected by the Mac App Store review thanks Platform X iOS macOS tvOS In app purchase type Consumable X Nonconsumable AutoRenewable Subscription NonRenewing Subscription Environment X Sandbox X Production Version Report Issue summary I downloaded the example project and placed in my secret key and product identifier for a nonconsumable IAP Unfortunately it seems that I cant identify if the nonconsumable IAP was purchased I can buy the IAP and theres the dialog which also says that it was already purchased But after that and after I restored my purchases the receipt validation ends up that I dont purchased it So what I mean is that in the receipt the nonconsumable IAP is not listed Either sandbox neither production I came across that problem cause we currently facing this problem in our app I also wrote apple and they check this on their side Im just curious cause nonrenewable and renewable subscriptions work fine Is there something is miss here Something special about nonconsumable IAP I just wanted to write it here cause I use SwiftyStoreKit in our app What did you expect to happen Nonconsumable IAP should be listed in receipt What happened instead Nonconsumable IAP is not listed in receipt Platform x iOS macOS tvOS In app purchase type Consumable x Nonconsumable AutoRenewable Subscription NonRenewing Subscription Environment x Sandbox Production Version Report Issue summary On iOS purchase never call the completion closure in app purchase dialog is never shown Same code on iOS works like a charm the app tested on iOS was rejected from app store for this reason the reviewer tested on iOS ProductsInfoControllerswift for completion in querycompletionHandlers completionresults do nothing Related issue something bad happen on iOS What did you expect to happen the purchase should call the completion block and show the purchase dialog What happened instead purchase dialog not shown Platform iOS and In app purchase type Consumable Environment Sandbox Version SwiftyStoreKit installation pod SwiftyStoreKit Related issues Issue summary the closure inside SwiftyStoreKitcompleteTransactionsatomically true never gets reached What did you expect to happen I expected the closure to get entered What happened instead the closure was ever entered Report My app uses a tip jar for IAP so I only use Consumable I submitted my app to the App Store this morning and got a rejection saying they couldnt make an IAP when trying to make a Consumable purchase a tip While testing as a sandbox tester when I checked the purchase I kept getting an error Unknown error Please contact support SwiftyStoreKitpurchaseProductproduct quantity atomically true result in switch result case successlet product fetch content from your server then if productneedsFinishTransaction SwiftyStoreKitfinishTransactionproducttransaction printPurchase Success productproductId case errorlet error switch errorcode case unknown printUnknown error Please contact support failed cases Upon further inspection even though I had this code below in AppDelegate the closure never gets called func applicationapplication UIApplication didFinishLaunchingWithOptions launchOptions NSObject AnyObject Bool Doesnt enter closure SwiftyStoreKitcompleteTransactionsatomically true it never reaches this point purchases in for purchase in purchases switch purchasetransactiontransactionState case purchased restored if purchaseneedsFinishTransaction Deliver content from server then let downloads purchasetransactiondownloads SKPaymentQueuedefaultstartdownloads SwiftyStoreKitfinishTransactionpurchasetransaction Unlock content case failed purchasing deferred break do nothing return true My sandbox tester email is confirmed I signed out of the device as my real self I logged in on the device as the sandbox tester Im logged into iCloud as the sandbox tester What could be the reason for the closure not being entered in AppDelegate Heres the code from the vc that I use to make the Consumable purchase var dataSource Tip var sharedSecret appStoreConnectSecretKey let inAppProductIds commyComyAppNamefirstTip commyComyAppNamesecondTip override func viewDidLoad superviewDidLoad getInAppPurchaseAmounts func getInAppPurchaseAmounts show spinner let dispatchGroup DispatchGroup for productId in inAppProductIds dispatchGroupenter SwiftyStoreKitretrieveProductsInfo productId weak self result in if let product resultretrievedProductsfirst let priceString productlocalizedPrice printProduct productlocalizedDescription price priceString let tip TipdisplayName productdescription description productlocalizedDescription productId productId price priceString selfaddTipToDataSourcetip if let sharedSecret selfsharedSecret selfverifyPurchasewith productId sharedSecret sharedSecret dispatchGroupleave else if let invalidProductId resultinvalidProductIDsfirst printInvalid product identifier invalidProductId dispatchGroupleave else printError Stringdescribing resulterror dispatchGroupleave dispatchGroupnotifyqueue globalqos background weak self in DispatchQueuemainasync weak self in removeSpinnerAndReloadData func verifyPurchasewith productId String sharedSecret String let appleValidator AppleReceiptValidatorservice production sharedSecret sharedSecret SwiftyStoreKitverifyReceiptusing appleValidator result in switch result case successlet receipt let productId productId Verify the purchase of Consumable or NonConsumable let purchaseResult SwiftyStoreKitverifyPurchase productId productId inReceipt receipt switch purchaseResult case purchasedlet receiptItem print productId is purchased receiptItem case notPurchased printThe user has never purchased productId case errorlet error printReceipt verification failed error func collectionView collectionView UICollectionView didSelectItemAt indexPath IndexPath guard let cell collectionViewcellForItemat indexPath as TipCell else return guard let indexPath collectionViewindexPathfor cell else return let tip dataSource indexPathitem purchaseProductwith tipproductId func purchaseProductwith productId String SwiftyStoreKitretrieveProductsInfo productId result in if let product resultretrievedProductsfirst SwiftyStoreKitpurchaseProductproduct quantity atomically true result in switch result case successlet product fetch content from your server then if productneedsFinishTransaction SwiftyStoreKitfinishTransactionproducttransaction printPurchase Success productproductId case errorlet error switch errorcode case unknown printUnknown error Please contact support case clientInvalid printNot allowed to make the payment case paymentCancelled printPayment cancelled case paymentInvalid printThe purchase identifier was invalid case paymentNotAllowed printThe device is not allowed to make the payment case storeProductNotAvailable printThe product is not available in the current storefront case cloudServicePermissionDenied printAccess to cloud service information is not allowed case cloudServiceNetworkConnectionFailed printCould not connect to the network case cloudServiceRevoked printUser has revoked permission to use this cloud service default printerror as NSErrorlocalizedDescription 