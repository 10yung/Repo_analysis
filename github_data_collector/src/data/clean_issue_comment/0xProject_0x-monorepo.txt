 Description Describe your changes in detail Testing instructions Please describe how reviewers can test your changes Types of changes What types of changes does your code introduce Uncomment all the bullets that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist The following points should be used to indicate the progress of your PR Put an x in all the boxes that apply right now and come back over time and check them off as you make progress If youre unsure about any of these dont hesitate to ask Were here to help Prefix PR title with WIP if necessary Add tests to cover changes as needed Update documentation as needed Add new entries to the relevant CHANGELOGjsons Description In certain scenarios assetswappers bestQuoteInfo price could actually be way off This is most noticeable with large fills when theres a sizable bridge order at the end of the quote and a nonzero slippage buffer The reason this happens is because during optimization we collapse the DEX samples into a single bridge order flattening the prices of the samples into a single constant price which is the average price of all the samples When we have a slippage buffer this collapsed bridge order is at the average price of the worst case fill because the bridge orders are generated to accommodate it To get the real bestcase quote we need to compute the integral over the price curve We can approximate this by just computing the fill over the nested samples effectively treating the bridge order as a collection of suborders at different prices Note This only affected the quote price The order would actually fill at the correct rate Results One particularly vulnerable pair is ETHSNX because the quote is almost always either just kyber or uniswap After this change we see a improvement on this quote at k I also simulated mainnet fills on buys and sells on combinations of ETH USDC DAI and FOAM ikr Out of fills the median realized fill price was less than the best quote price the mean was So this improved calculation seems to be fairly close to reality Testing instructions Please describe how reviewers can test your changes Types of changes What types of changes does your code introduce Uncomment all the bullets that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist The following points should be used to indicate the progress of your PR Put an x in all the boxes that apply right now and come back over time and check them off as you make progress If youre unsure about any of these dont hesitate to ask Were here to help Prefix PR title with WIP if necessary Add tests to cover changes as needed Update documentation as needed Add new entries to the relevant CHANGELOGjsons Description Fixed name of the function in the contractaddresses package Testing instructions NA Types of changes Bug fix nonbreaking change which fixes an issue Checklist Prefix PR title with WIP if necessary Add tests to cover changes as needed Update documentation as needed Add new entries to the relevant CHANGELOGjsons Can you upload the source code to Etherscan It can help me to debug I tried uploading but i dont know what version of solidity Description Describe your changes in detail This PR introduces a benchmarking directory and a benchmark script to calculate the maximum size of a specific type of NFT order the type used by TokenTrove Testing instructions To run these benchmarks accurately the contracts need to be recompiled using the constantinople EIP schedules Additionally the web provider will also need to be configured to use constantinople Please describe how reviewers can test your changes Types of changes What types of changes does your code introduce Uncomment all the bullets that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist The following points should be used to indicate the progress of your PR Put an x in all the boxes that apply right now and come back over time and check them off as you make progress If youre unsure about any of these dont hesitate to ask Were here to help Prefix PR title with WIP if necessary Add tests to cover changes as needed Update documentation as needed Add new entries to the relevant CHANGELOGjsons Expected Behavior Calling devUtilsgetOrderRelevantState on a MAP order where one or more of the tokens in the order doesnt belong to the maker should return as Unfillable Functionstools that rely on order state working properly should flag this order as unfillable Current Behavior The orderstate of the order is fillable The functionstools that rely on the order state to be marked properly fail to report the order as unfillable mesh etc Steps to Reproduce for bugs Example MAP order that should fail attached Your Environment xjs xcontractwrappers Description Yarn build gets warnings from devnet and verdaccio directories about lack of json on a mac Testing instructions yarn build Types of changes What types of changes does your code introduce Uncomment all the bullets that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Added packagejson to suppress yarn warnings Checklist The following points should be used to indicate the progress of your PR Put an x in all the boxes that apply right now and come back over time and check them off as you make progress If youre unsure about any of these dont hesitate to ask Were here to help x Prefix PR title with WIP if necessary x Add new entries to the relevant CHANGELOGjsons Description The bug is explained in Im also affected and this PR is implementing my proposed fix remove spaces from function signature to guarantee the match There could be better fix for this hack but Im just ensuring that the bug dont affect my workflow anymore Types of changes Bug fix nonbreaking change which fixes an issue Description To discover the price of certain pairs we need an efficient way to perform multiple quote samples at once Initial investigation typescript await sampler queryBatchOrdersAndSampleBuys timestimes i orders timestimes i ordersmapo osignature SOURCETOADDRESS ERC BridgeSourceEth Dai SOURCETOADDRESS ERC BridgeSourceUniswap new BigNumber callAsync We query with Native orders for each asset pair Note its possible we will have more and less orders in the real world and will need to batch based on the Native orders were only querying for asset amount this queries the same orders multiple times our ABI encoder may optimize this and the results will not be as accurate as real world testing This also excludes Kyber as it is buying orders query ms query ms query ms query ms query ms query ms done query ms query ms query ms query ms query ms query ms done query ms query ms query ms query ms query ms query ms done query ms query ms query ms query ms query ms query ms done query ms query ms query ms query ms query ms query ms done query ms query ms query ms query ms query ms query ms done So in the initial investigation we can query distinct asset pairs in seconds We currently have tokens in xApi metadata and would likely only consider a few base pairs WETH DAI Currently wed be looking at asset pairs which can be served in under seconds 