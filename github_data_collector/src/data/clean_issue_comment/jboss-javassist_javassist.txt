Version GA Im using javassist in a java agent to instrument classes for example insert extra log statements in methods Whenever an javaxcryptoException class is loaded through the classpool eg ClassPoolgetDefaultgetclassname eventually the JVM on Windows will issue a verification failure Reproduction Ive attached an example java agent using javassist It simply loads classes through javassist ClassPool whenever the JVM calls the transform method without changing them This is enough to trigger problem It can be built with mvn DskipTests PbuildAnalyzer package There is a prebuilt jar inside javassistbugzip Windows Java version java version JavaTM SE Runtime Environment build b Java HotSpotTM Client VM build b mixed mode Using it with a test app called CryptoKnight java javaagentanalyze jarwithdependencies jar cp knightbcprovjdk on jarknightcommonscodec jarknight commonsio jarknightpgslookandfeel ja rknightspringsecuritycrypto RELEASEjar jar knightCryptoknightv jar Click on the apps Encrypt button the JVM will throw CircularityError I dont think its an actually circularity error but that the verification process fails with bad padding Exception in thread Thread javalangClassCircularityError javaxcryptoBad PaddingException at sunsecurityrsaRSASignatureengineVerifyUnknown Source at javasecuritySignatureDelegateengineVerifyUnknown Source at javasecuritySignatureverifyUnknown Source at sunsecurityx X CertImplverifyUnknown Source at sunsecurityx X CertImplverifyUnknown Source at javaxcryptoJarVerifiertestSignaturesJarVerifierjava at javaxcryptoJarVerifieraccess JarVerifierjava at javaxcryptoJarVerifier runJarVerifierjava at javaxcryptoJarVerifier runJarVerifierjava at javasecurityAccessControllerdoPrivilegedNative Method at javaxcryptoJarVerifierclinitJarVerifierjava at javaxcryptoJceSecurityloadPoliciesJceSecurityjava at javaxcryptoJceSecuritysetupJurisdictionPoliciesJceSecurityjava at javaxcryptoJceSecurityaccess JceSecurityjava at javaxcryptoJceSecurity runJceSecurityjava at javasecurityAccessControllerdoPrivilegedNative Method at javaxcryptoJceSecurityclinitJceSecurityjava at javaxcryptoSecretKeyFactorynextSpiSecretKeyFactoryjava at javaxcryptoSecretKeyFactoryinitSecretKeyFactoryjava at javaxcryptoSecretKeyFactorygetInstanceSecretKeyFactoryjava at EncryptorsetEncParametersEncryptorjava at TextEncryptCBCEncryptTextEncryptjava at GUIListenForButton runGUIjava Some notes It may be all Exception classes Ive only tracked it down to the javaxcrypto package because of my test environment I dont do anything to the Exception classes the process of loading them through javassist is enough to cause verification failure I can actually modify other nonException classes include classes in the javaxcrypto package without problems This is not an issue on linux But the linux environment is probably using a different JVM distro ie openjdk My current workaround is to skip all Exception classes in my transformer If a class has the keyword Exception in its classname dont even try to load it with javassist This method would be really welcome void insertBeforeAndAfterString srcBefore String sourceAfter Cause this is not possible for example java cminsertBefore cminsertAfter While it would have been valid code We have insertBefore insertAfter and insertAt Some programming languages have a defer keyword Which is added to the method stack to be executed next This is used when memory is allocated for example but the memory has to be freed after the method or a memory leak is there With the defer it does not matter if the method returns early at the end or in the middle with a exception that is thrown for example It will always execute the code of the defer line Some kind of behaviour like this would be really welcome Cause right now I have no idea how to add something with javassist that is always executed as the last thing in the method I tested this multiple times its true in my case This works java if classnamewithdotsequalsdoekesfjluisfjlui classnamewithdotsequalsdoekesfjluisfjluiwidgets classnamewithdotsequalsdoekesfjluitestsAgentIdTest and if I use the following it does not java if classnamewithdotsequalsdoekesfjluisfjluiclassgetName classnamewithdotsequalsdoekesfjluisfjluiwidgetsclassgetName classnamewithdotsequalsdoekesfjluitestsAgentIdTestclassgetName It will result in img width altScreen Shot at src the complete file is here small file class in the bottom can be ignored Can this be because the class is not ready for getName cause it is not fully loaded yet I am attempting to load a jar file from disk then change a few classes javalang etc methods then run the class with a javassist loader However I am not sure what to do about this Exception in thread main javalangSecurityException Prohibited package name javalang I have set the loaderdoDelegation false But I am not quite sure how to subclass this to avoid the exception above Is this possible Any examples would be awesome This is the test project that can be used to reproduce the bug Note that the bug is reproducible even with the latest version GA It looks like javassist cannot deal with bytecode produced by the eclipse compiler Currently CtClassmakeNestedClass does not support adding nonstatic classes When an attempt is made to add a nonstatic class a RuntimeException is thrown sorry only nested static class is supported I want to instrument tomcats CoyoteAdapterservice To let application execute instrumented code when user request Below is my transformers code Override public byte transformClassLoader loader String className Class classBeingRedefined ProtectionDomain protectionDomain byte classfileBuffer throws IllegalClassFormatException byte byteCode classfileBuffer String finalTargetClassName thistargetClassNamereplaceAll if classNameequalsfinalTargetClassName return byteCode if classNameequalsfinalTargetClassName loaderequalstargetClassLoader Systemoutprintln Instrument Agent Transforming class className loadertoString try ClassPool pool new ClassPool poolappendSystemPath poolappendClassPathhomelaceDocumentsworkspacests RELEASETomcat bin Tomcat source code CtClass cc poolgettargetClassName CtMethod m ccgetDeclaredMethodMETHODNAME Systemoutprintln Instrument Agent mgetSignature mgetMethodInfo minsertBeforeSystemoutprintln Instrumentation Agent Agent information byteCode cctoBytecode ccdetach catch Exception e eprintStackTrace return byteCode But using above code it can not output Instrumentation Agent Agent information when I request Tomcat web applications Anyone know why I thought that the PRmerge would make javassist fully compatible with Dynamic ClassFile Constants When running junit tests using powermock on the Java I get this error BAD LDC Here Javassist and Mockito is used as a dependency of PowerMock I am using the following versions Javassist GA PowerMock JDK Mockito I found two cases that failed to rename the class name case SignatureAttribute Generics descriptor could not be successfully renamed LcomsquareupwireTagMapLcomsquareupwireMessageAdapterFieldInfo case AnnotationDefaultAttribute It has not been renamed package comtestmembervalue import comsquareupwireMessage public interface TestMemberValue MessageDatatype type default MessageDatatypeMESSAGE MessageLabel labels default MessageLabelOPTIONAL MessageLabelPACKED Class clazz default TestMemberValueclass Class clazzs default TestMemberValueclass Note the map comsquareupwireTagMap comsquareupwiretestTagMap comsquareupwireMessageAdapterFieldInfo comsquareupwiretestMessageAdapterFieldInfo comsquareupwire comsquareupwiretest comtestmembervalueTestMemberValue comtesttesttestmembervalueTestMemberValue The problem was fixed by this pr