See bountysourceplugin Want to back this issue Post a bounty on it We accept bounties via Bountysource bountysourceplugin Minimal reproduction using node bash rm rf tmpmissingstacktrace mkdir cd npm install coffeescriptredux coffeescript echo JSONparse bcoffee echo requirebcoffee ajs With redux bash node r coffeescriptreduxregister a undefined SyntaxError Unexpected end of input With coffeescript bash node r coffeescriptregister a undefined SyntaxError Unexpected end of input at Objectparse native at Objectanonymous privatetmpmissingstacktracebcoffee at Objectanonymous privatetmpmissingstacktracebcoffee at Modulecompile modulejs at ObjectloadFile privatetmpmissingstacktracenodemodulescoffeescriptlibcoffeescriptregisterjs at Moduleload privatetmpmissingstacktracenodemodulescoffeescriptlibcoffeescriptregisterjs at FunctionModuleload modulejs at Modulerequire modulejs at require modulejs at Objectanonymous privatetmpmissingstacktraceajs at Modulecompile modulejs at ObjectModuleextensionsjs modulejs at Moduleload privatetmpmissingstacktracenodemodulescoffeescriptlibcoffeescriptregisterjs at FunctionModuleload modulejs at FunctionModulerunMain modulejs at startup nodejs at nodejs The stack traces for JSONparse disappear everywhere and wont come even in the following event loop ticks the moment the first coffeescript file is required using redux bountysourceplugin Want to back this issue Post a bounty on it We accept bounties via Bountysource bountysourceplugin It seems this project has been discontinued which is sad You might add a small note to the Readme so people dont have to search the docs to find out bountysourceplugin Want to back this issue Post a bounty on it We accept bounties via Bountysource bountysourceplugin This coffee for x in myList x throws Error the variable x cant be assigned with because it has not been defined bountysourceplugin Want to back this issue Post a bounty on it We accept bounties via Bountysource bountysourceplugin You can make the compiler crash by trying to compile this file coffee argv join like this bincoffee js input samplecoffee sourcemapfile samplemap This change defends against the missing expressionraw since Im inferring from the surrounding code that raw is not always present on every node This doesnt parse coffee x myList bountysourceplugin Want to back this issue Post a bounty on it We accept bounties via Bountysource bountysourceplugin This is a workinprogress Im sharing in case others are interested or have feedback This branch creates a new option targetes that tells the compiler to emit ES when possible Since many ES features are closely aligned with CoffeeScript we can actually do less and emit smaller simpler code that takes advantage of native implementations Why would you want this because youre targeting an environment with native ES support because you want to convert an existing CoffeeScript codebase to JS without all the noise introduced by missing ES features Heres an example of what it can already do cat samplecoffee coffeescript handleAllThings things myThingsmap thing thishandlething bincoffee bare js input samplecoffee targetes js Generated by CoffeeScript beta dev var handleAllThings handleAllThings function things return myThingsmapthing thishandlething For comparison without targetes we get a lot more code bincoffee bare js input samplecoffee js Generated by CoffeeScript beta dev var handleAllThings handleAllThings function var things things argumentslength slicecallarguments return myThingsmapfunction this return function thing return thishandlething this Status x default params x class x array destructuring object destructuring translate for in to for of x super must be called before accessing this in constructors x class declarations inside IIFEs need to get lifted to outer scope This makes the syntax error formatter respect the errors offset property Here is a file demonstrating the difference coffee class A class B method consoleloga b c d Before this change the error is reported at line column With this change it is reported correctly on line Ive started a discussion on the ES future of CoffeeScript here Let me quote the introduction ES is gaining a lot of spread It introduces a lot of new concepts into JS Here are nice overviews short comprehensive And people already use those features Thanks to the effort from such projects as to es transpiler and Traceur for a modern JS developer who does not use CoffeeScript there is simply no reason not to use ES nowadays Many modern JS projects are already being written in ES Moreover popular JS frameworks already demand that their users code in ES out of the box this includes Angular and EmberJS CoffeeScript is essentially locked at ES Some ES features are accessible via backticks but others directly conflict with the CoffeeScript syntax including said backticks With CoffeeScripts main contributors having explicitly refused to support ES CoffeeScript is doomed to become a thing of the past I wonder what is the position of CoffeeScriptRedux maintainers on ES support If CoffeeScriptRedux introduces full ES support it is able to take CoffeeScript over completely bountysourceplugin Want to back this issue Post a bounty on it We accept bounties via Bountysource bountysourceplugin This works in CoffeeScript but not in CoffeeScriptRedux beta coffeescript consolelog hi there This should either be a documented deviation or fixed bountysourceplugin Want to back this issue Post a bounty on it We accept bounties via Bountysource bountysourceplugin 