WIP to refactor Rezolus to make use of async runtime Goals use Tokio and refactor samplers to enable async move configuration into each sampler enable more flexible persampler configuration eBPF functionality now integrated with each sampler better traits and types for config stats samplers TODO container sampler update documentation for metrics Right now theres a lot of boilerplate involved in creating new samplers Ideally the only things that people would need to provide would be name initialization and sample methods Currently we have some primitive support for gathering containerlevel telemetry from within a container The primary usecase would be using Rezolus as a sidecar to provide additional insight into container performance Currently we only support some basic telemetry from the cpu accounting cgroups We should expand our coverage here to expose telemetry for other aspects of the containers runtime We would like to add an admin endpoint which can allow for temporary adjustments to the configuration Usecases involve temporarily disabling perf event collection so that we dont interfere with profiling using tools like vTune Other usecases involve temporarily increasing sampling resolution and enabling additional samplers to gain additional insights Add push support for telemetry publishing currently we only support pullbased collection We should extend the metrics library to allow for pluggable exposition and publishing Targets to consider for push support are InfluxDB and Kafka Perf events sampler needs more advanced scheduling We may want to limit the number of event counters to avoid multiplexing on the PMUs Extending support to percgroup as requested in requires that we do something clever to avoid performance penalties At the same time we would want to be able to enforce that things like Cycles and Instructions are sampled across the same intervals so CPI calculations remain valid Hi Im interested in using rezolus as an agent in an eventdriven pushmodel monitoring infrastructure that is based on Riemann as an metrics stream processor My requirements are as follows being able to send metrics gathered by rezolus to Riemann API either directly via Riemanns Protobuf API or indirectly through a custom HTTP gateway for each measurement event specify additional metadata eg host of origin tags and other userdefined attributes eq unit of measurement method for metadata retrieval should be extensible in the same way the samplers are right now and ideally scriptable support additional samplers eg being able to sample docker runtime metrics would be nice It seems to me that many of these requirements are out of scope of rezolus as it is now The idea is to split off collectors and sampling functionality into a library that would be not be dependent on method of telemetry publication or any other additional processing metadata retrieval What is your opinion on this Thank you Is there any intent to support gathering metrics per cgroup