Added a method to safely retrieve the Cassandra version that doesnt throw an exception when the Cassandra versions on the different nodes of the cluster differ The method cassandraVersion in CassandraConnection throws a RuntimeException when connected to a Cassandra cluster that consists of different versions Given the return type of the method Option VersionNumber None as return value would be expected in this case Actually None is never returned from this method I can make a pull request if the behavior that None is returned when the version cant be determined is the desired behavior Hi guys so this is an issue Ive been experiencing for a few weeks now For some reason node failure or something else Im not sure when I insert into CassyDb and try to fetch the results sometimes have a null entry Mostly in a specific field I would like to know why this and what fixes I can use to solve this Dont really want to make the column optional Any help is appreciated thanks I noticed the following behaviour where Scenario works fine and in Scenario newtable is not autocreated The two scenarios should be equivalent Scenario object table extends Table with connectorConnector object table extends Table with connectorConnector override def tableName newtable Scenario object table extends Table with connectorConnector override def tableName newtable object table extends Table with connectorConnector Could you please add Scala support We want to use Cassandra to cache Exchange calendars so they are available when Exchange is not The following cql defines a table for storing the results of an availability request The static lastupdate column keeps track of the last time our application wrote to the partition if any cql CREATE TABLE IF NOT EXISTS slotsbyaccountandday account text day text ewsid text starttime timestamp endtime timestamp status text lastupdate timestamp STATIC PRIMARY KEY account day ewsid After filling the table with testdata I noticed that PhantomDSL gives me None when I expected Some using the following code scala table selectlastupdate whereaccount eqs account andday eqs day one Meanwhile the following Datastax based solution does give me what I expect using the following code scala session executeQueryBuilderselectlastupdate fromtabletableName whereQueryBuildereqaccount account andQueryBuildereqday day one getTimestamplastupdate This looks like a bug I assume it is related to the way PhantomDSL handles static columns because this is the first time I have tried to use this feature of Cassandra Looking forward to Phantom xx we need to reimplementing the core query mechanism to run on Cats free and maybe freestyle frees as concrete backends with interpreters against known free libraries The current version of phantom is a joke with respect to how functional it is and several steps will be required to reach a Remove the EDSL entirely in favour of working directly with encoded case classes Unlike quill we do not plan to go fully QDSL mode and we will have an in between approach where the syntax language of CQL will still be fully replicated in Scala just like what phantom attempts to do today Replace execution backends and the complex poor mans Free Monad currently available via QueryContext with a simple implementation on top of Cats Free Research whether or not a Cats dependency with the now required Ypartialunification flag is a realistic goal that the audience would be happy with and consider whether this forces us to finally drop the Scala support we worked hard to keep alive until today Add in Support for Scala As requested by multiple users we should natively support table inheritance as many applications seem to require it as a simplification of the DSL code instead of trying to discourage it Draft proposal Table inheritance should be natively possible in the DSL with no additional work Inherited columns should have order precedence Inherited columns will be inserted before the current columns in the generated Cassandra code A table appending a partition key for instance will cause the new key to be added as the last in the sequence of partition keys This is important in Cassandra so an order should be agreed upfront One example is here Im looking to see how to integrate the javacassandradriver for opentracing with Phantom The Java API expects to wrap Cluster and takes an Initializer java Instantiate tracer Tracer tracer Instantiate Cluster Builder ClusterBuilder builder ClusterbuilderaddContactPoints withPort Instantiate Tracing Cluster Cluster cluster new TracingClusterbuilder tracer But there doesnt seem to be an accessible way to do this from Phantom the closest Ive found is extend the SessionProvider scala class OpentracingSessionProviderspace KeySpace builder ClusterBuilder extends DefaultSessionProviderspace builder with Traceable override lazy val cluster Cluster new TracingClusterbuilderClusterbuilder tracer But from there it doesnt seem practical to swap out the SessionProvider instantiation I cant map it through the ClusterBuilder as the API expects the end result So where I am right now is scala package sbuxucpsimpleusercassandra import comdatastaxdrivercoreCluster Session import comoutworkersphantomconnectors ClusterBuilder KeySpaceCQLQuery SessionAugmenterImplicits SessionProvider import comoutworkersphantomdsl import ioopentracingTracer import orgslf jLoggerFactory import scalaconcurrentblocking import scalautilcontrolNoStackTrace NonFatal import scalautilFailure Success Try class OpentracingSessionProvidertracer Tracer val space KeySpace builder ClusterBuilder autoinit Boolean true keyspaceQuery Option KeySpaceCQLQuery None errorHandler Throwable Throwable identity extends SessionProvider val logger LoggerFactorygetLoggerthisgetClass val cluster Cluster builderClusterbuilderbuild def defaultKeyspaceCreationQuerysession Session keySpace String String sCREATE KEYSPACE IF NOT EXISTS keySpace WITH replication class SimpleStrategy replicationfactor Initializes the keySpace with the given name on the specified Session protected this def initKeySpacesession Session space String Session blocking blocking val query keyspaceQuerymapqueryStringgetOrElsedefaultKeyspaceCreationQuerysession space loggerinfosAutomatically initialising keyspace space with query query sessionexecutequery session Creates a new Session for the specified keySpace protected this def createSessionkeySpace String Session Try val session blocking clusterconnect if autoinit initKeySpacesession keySpace else loggerinfosAutoinit set to false keyspace space is not being autocreated session match case Successvalue value case FailureNonFatalerr throw errorHandlererr val session Session createSessionspacename class OpentracingCassandraConnectiontracer Tracer name String clusterBuilder ClusterBuilder autoinit Boolean keyspaceFn Option KeySpaceCQLQuery None errorHandler Throwable Throwable identity outer import scalacollectionJavaConverters lazy val provider new OpentracingSessionProvider tracer KeySpacename clusterBuilder autoinit keyspaceFn errorHandler The Session associated with this keySpace lazy val session Session providersession def cassandraVersions Set VersionNumber sessiongetClustergetMetadatagetAllHostsasScala mapgetCassandraVersion toSet VersionNumber def cassandraVersion Option VersionNumber val versions cassandraVersions if versionsnonEmpty val single versionsheadOption if cassandraVersionssize single else if singleforallitem versionsforallitem single else throw new RuntimeException sIllegal single version comparison You are connected to clusters of different versions sAvailable versions are versionsmkString with NoStackTrace else throw new RuntimeException Could not extract any versions from the cluster versions were empty Trait that can be mixed into CassandraTable instances trait Connector extends comoutworkersphantomconnectorsConnector with SessionAugmenterImplicits lazy val provider OpentracingSessionProvider outerprovider lazy val keySpace String outername implicit val space KeySpace KeySpaceoutername def cassandraVersion Option VersionNumber outercassandraVersion def cassandraVersions Set VersionNumber outercassandraVersions object OpentracingContactPoints A keyspace builder based on the specified contact points all running on the default port def applytracer Tracer hosts Seq String OpentracingKeySpaceBuilder new OpentracingKeySpaceBuildertracer addContactPointshosts A keyspace builder based on the specified contact points all running on the specified port def applytracer Tracer hosts Seq String port Int OpentracingKeySpaceBuilder new OpentracingKeySpaceBuildertracer addContactPointshosts withPortport class OpentracingKeySpaceBuildertracer Tracer clusterBuilder ClusterBuilder Specify an additional builder to be applied when creating the Cluster instance This hook exposes the underlying Java API of the builder API of the Cassandra driver def withClusterBuilderbuilder ClusterBuilder OpentracingKeySpaceBuilder new OpentracingKeySpaceBuildertracer clusterBuilder andThen builder Disables the heartbeat for the current builder This is designed for local instantiations of connectors or test environments return A new cluster builder with the heartbeat interval set to disabled def noHeartbeat OpentracingKeySpaceBuilder new OpentracingKeySpaceBuildertracer clusterBuilder andThen withPoolingOptions new PoolingOptionssetHeartbeatIntervalSeconds Creates and can initialise a keyspace with the given name param name The name of the keyspace case sensititve by default param autoinit Whether or not to automatically initialise the keyspace before the session is created param query The builder to use when producing the keyspace query return def keySpace name String autoinit Boolean true query Option KeySpaceCQLQuery None errorHandler Throwable Throwable identity OpentracingCassandraConnection new OpentracingCassandraConnectiontracer name clusterBuilder autoinit query errorHandler Creates and can initialise a keyspace with the given name This will automatically initialise the keyspace by default as we consider passing a specific keyspace query indicates clear intent you want this to happen param name The name of the keyspace case sensititve by default param query The builder to use when producing the keyspace query return deprecatedSimply pass in a keySpace query the keyspace is not required def keySpace name String query KeySpaceCQLQuery OpentracingCassandraConnection new OpentracingCassandraConnectiontracer name clusterBuilder true Somequery Creates and can initialise a keyspace with the given name This will automatically initialise the keyspace by default as we consider passing a specific keyspace query indicates clear intent you want this to happen param query The builder to use when producing the keyspace query return def keySpace query KeySpaceCQLQuery OpentracingCassandraConnection new OpentracingCassandraConnectiontracer querykeyspace clusterBuilder true Somequery 