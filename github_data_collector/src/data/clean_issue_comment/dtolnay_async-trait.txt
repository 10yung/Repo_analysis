Im trying to implement trait with async fn for all async fns Simplified example rust asynctrait trait Trait async fn run self asynctrait implF Fut Trait for F where F Fn Fut Sync Fut FutureOutput Send async fn run self selfawait details summarysimplified cargo expandsummary rust trait Trait fn runs asynctrait s self PinBoxdyn FutureOutput Send asynctrait where s asynctrait Self asynctrait implF Fut Trait for F where F Fn Fut Sync Fut FutureOutput Send fn runs asynctrait s self PinBoxdyn FutureOutput Send asynctrait where s asynctrait Self asynctrait allowclippyusedunderscorebinding async fn runF Futself F where F Fn Fut Sync Fut FutureOutput Send selfawait BoxpinrunF Futself details But sadly this doesnt work error E the parameter type Fut may not live long enough srclibrs asynctrait implF Fut Trait for F help consider adding an explicit lifetime bound Fut asynctrait note so that the type impl stdfutureFuture will meet its required lifetime bounds srclibrs asynctrait error aborting due to previous error adding Fut asynctrait is impossible because it leads to impl has stricter requirements than trait errors But with byhand desugaring this implementation is possible rust implF Fut Trait for F where F Fn Fut Sync Fut FutureOutput Send fn runs asynctrait s self PinBoxdyn FutureOutput Send asynctrait where s asynctrait Self asynctrait Boxpinasync move selfawait test fn test let closure async Traitrun closure So my questions are Why the first implementation doesnt work but the second does Is it possible to remove async move from the last example Boxpinself leads to the same error the parameter type Fut may not live long enough Is it possible to write implementation like this but without so much boilerplate Can asynctrait to accept implementations like in the first example after some changes in how macro works Minimal reproduction macrorules implementcommands tyargsident tyident asynctrait pub trait AsyncCommands Sized async fn ftyargs ty mut self x tyargs selffxawait implementcommands K Send error E expected value found module self teststestrs asynctrait self value is a keyword only available in methods with self parameter implementcommands K Send in this macro invocation The combination of macros results in the instrument macro thinking the instrumented function is not in fact async and generating the wrong code see full writeup here crossposting bc someone on the tonictracingetc discord suggested it Thanks for providing this crate Hi me again I found using type in trait will cause some problems mismatched types cannot infer an appropriate lifetime for lifetime parameter a due to conflicting requirements rust extern crate asynctrait use asynctraitasynctrait use futuresexecutorblockon asynctrait pub trait Statea type Command a Send async fn addcommmut self morestr SelfCommand Self where Self Sized async fn addmorecommmut self str SelfCommand str SelfCommand Self where Self Sized let self selfaddcommstr await let self self addcommstr await self deriveDebug pub struct RealStateString asynctrait impl a Statea for RealState type Command String async fn addcommmut self morestr SelfCommand Self self self clone morestrasref self fn main let state RealStateDefaultdefault let state blockonstateaddmorestrhello world println state Error error E mismatched types srclifetimeerrorrs asynctrait one type is more general than the other note expected type stdmarkerSend found type stdmarkerSend error E cannot infer an appropriate lifetime for lifetime parameter a due to conflicting requirements srclifetimeerrorrs asynctrait note first the lifetime cannot outlive the lifetime a as defined on the trait at srclifetimeerrorrs pub trait Statea note so that the expression is assignable expected Self as StateCommand found Self as StateaCommand note but the lifetime must be valid for the lifetime asynctrait as defined on the method body at srclifetimeerrorrs asynctrait note so that the expression is assignable expected stdpinPinstdboxedBoxdyn corefuturefutureFutureOutput Self stdmarkerSend asynctrait found stdpinPinstdboxedBoxdyn corefuturefutureFutureOutput Self stdmarkerSend I tried to produce a MRE asynctrait pub trait MapIntoT Future async fn mapintoself T where Self Sized asynctrait implF T MapIntoT for F where F Sized F Future Send T FromFOutput async fn mapintoself T where Self Sized selfawaitinto error error E the parameter type T may not live long enough srcfuturers asynctrait implF T MapIntoT for F help consider adding an explicit lifetime bound T asynctrait A fix for me T static in impl block Is it a bug