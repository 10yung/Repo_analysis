This is almost similar to and the work done in but I think it should be somewhat genericized Specifically Im using prettytable for an IRC bot and IRC uses a different kind of format for colors x d d is a rough estimate of the regex involved but essentially I may print something that raw looks like x foo x which shows up as foo but in pink Notice that the two unprintable characters are fine here but there are two usually printable characters whose purpose is overriden and eaten up by the IRC client when formatting As a result if I try to use this in a table my columns will be missing two characters when it comes to padding because the display width is calculated to be characters longer than it should be Now I dont think we should put an IRC color formatting regex in there for all purposes since not everyone would be using it Perhaps it could be added as a crate feature Hi First of all thanks for providing the library I really appreciate your work Ive been wondering if there is some kind of functionality or mabye an example on how to handle cells with multiline text and unknown text length The current multilineexample only shows hardcoded newlines When having long strings in your table this starts to look ugly really fast Hi This PR allow to generate treeline for each row then user can display it into any cell and produce some kind of tree table like txt Title Title A B C Z Z Z Z Z Im open to any change that should be done to better match the current state of the project naming examples doc This PR does not contain any code changes Only cargo fmt The term crate is unmaintained Allows printing tables as markdown tables Title Title Value Value Value three Value four Title Title Value Value Value three Value four The program below produces garbled output mainrs use prettytableTable format cell row fn printtables usize let mut table Tablenew tablesettitlesrow c num tablesetformatformatconstsFORMATNOLINESEPWITHTITLE for i in ss tableaddrowrow i tableprintstd fn main rayonjoin printtable printtable Cargotoml package name prettytabletest version edition dependencies prettytablers rayon How to update the table and the terminal not scrolling Editing table in place Pull request referring to the issue Sorry for the mess that Ive made trying to improve the TableElem method removing self from getfieldname The code is already rebased This should be a kind of final code which is the results of the previous commit and pull request I thought to implement something to make pretty table smarter adding a procmacro and a macro Below an initial version of code librs extern crate procmacro use procmacroTokenStream use quotequote use synparsemacroinput ItemStruct procmacroderiveTableElem pub fn derivetableeleminput TokenStream TokenStream let parsedinput parsemacroinputinput as ItemStruct let structname parsedinputident let field parsedinputfields Get struct field name let fnamestr VecString field iter mapf fidentcloneunwraptostring collect let fname VecsynIdent fielditermapf fidentcloneunwrapcollect TokenStreamfromquote pub trait TableElem fn getfieldname self Vec static str fn getfieldself VecString impl TableElem for structname fn getfieldname self Vec static str vec fnamestr fn getfieldself VecString vec selffnameinto mainrs use macrosTableElem use prettytableformat Cell Row Table deriveTableElem struct NameStruct name String surname String fn constructtableT TableElemv VecT Table Create the table let mut table Tablenew tablesettitlesRownew vfirst unwrap getfieldname iter mapf Cellnewf collect tablesetformatformatconstsFORMATNOLINESEPWITHTITLE vintoiterforeachr tableaddrowRownew rgetfielditermapelem Cellnewelemcollect table macrorules printastable v ident constructtablevprintstd fn main let t VecNameStruct vec NameStruct name name tostring surname surname tostring NameStruct name name tostring surname surname tostring printastablet Of course the previous code can be improved but I prefer get a feedback before make a pull request