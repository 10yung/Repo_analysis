void allocbufferuvhandlet handle sizet suggestedsize uvbuft buf bufbase char mallocsuggestedsize memsetbufbase suggestedsize set buflen suggestedsize After malloc memset should be added otherwise the received data may be scrambled Actually the test will be scrambled Apparently newer versions of sphinx dont support the pngmath extension This patch selectively adds the extension for older versions Tested with Sphinx The pipe name echosock is not valid on Windows What about using defines like here in the working libuv tests Referring to this code Please also refer to this which I think might be relevant After the call to uvclose in the onexit callback the next time the following executes in corec if mode UVRUNONCE ranpending mode UVRUNDEFAULT timeout uvbackendtimeoutloop uvbackendtimeout returns INFINITE When the next loop then reaches corec uvpollex success pGetQueuedCompletionStatusExloopiocp overlappeds ARRAYSIZEoverlappeds count timeout FALSE the program unsurprisingly hangs Two possible workarounds that fix the issue are call uvstopuvdefaultloop after the call to uvclose or in the last line in mainc replace this return uvrunloop UVRUNDEFAULT with while uvrunloop UVRUNONCE return I am new to libuv If the above two options are incorrect or illadvised what is the correct fix for this Hi First thanks a lot for the book and examples really useful If I run tcpechoserver and use netcat to test connection is closed immediately root f ca f code echo n hello nc hello root f ca f code however if I run multiechoserver the connection is not closed root f ca f code echo n hello nc hello Is this expected behavior because of using child process Im getting Bind error EACCESS error on the uvpipebind on Windows IOJS Node versions bit Windows running under Git Bash uvloopt loop uvprocesst childreq uvprocessoptionst options bool MyPackageOpenPipe loop uvdefaultloop uvpipet server uvpipeinitloop server signalSIGINT removesock int q if q uvpipebind server echosock fprintfstderr Bind error s n uverrnameq Errors here return false etc It looks like you are using CreateNamedPipeW under Windows Is that valid or do you mean to use CreatedNamedPipe instead In the uvtee example uvpipeopen filepipe fd fails on windows because internally it calls uvsetpipehandle which only works on something that is actually a named pipe Should I open an issue at libuv instead Im not sure how to fix it Im similarly not certain the example is fully functional on Linux either Treating a pipe as a file isnt always valid For example echo something testtxt uvtee hellotxt testtxt Aborted core dumped I have a hack that fixes this issue Im wondering if you think I should also submit this fix upstream Thanks for the manual I had a problem getting data from a child process using a pipe Please feel free to add a paragraph based on my problem and solution Consider code public domain MIT if it matters Would be mega awesome to see a simple client for the echo server That its a crossplatform metabuild system for generating msvs xcode or make build file Explain that its used for generating production Google Chrome builds and therefore rather robust GYP makes it very easy to include libuv into other GYP projects 