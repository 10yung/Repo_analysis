Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details I just wanted to notify you that Im in the process of a semvermajor release of the istanbul libraries They are currently published to npm under the next tag but will likely be promoted to latest soon The breaking changes include dropping of nodejs is the oldest officially support version some API changes some functions are now async changes to reporting I dont have time right now to create a PR for this but if you do I can try giving pointers if you run into issues feel free to tag me in any PR version karmacoverage settings coverageReporter type html dir coverage path for source files WebJsjs coverage When running the tests the coverage is generated But This is my coverage folder structure Coverage createaccountmanagementjshtml indexhtml Account Components createaccountjshtml indexhtml The Coverage folder indexhtml does not have any sub folder java script source links to view coverage In my case createaccountjshtml cannot be reached from the outer indexhtml The outer indexhtml has only createaccountmanagementjshtml and not the inner folder javascript source files I was expecting the indexhtml to contain createaccountjshtml and createaccountmanagementjshtml links Hi I am having a strange issue when generating code coverage with karmacoverage My source files are written in typescript where as the test files are written in javascript with qunit being the test framework When I run the karma start all my tests are getting passed and the code coverage report being generated But the istanbul report and the lcovinfo which I am using sonarqube to view the code coverage are showing different reports For example in html report by istanbul even though the source file is in ts the code coverage shown in transpiled js file with all of the code is covered except the awaiter and generator functions which will be generated when we use Promises in typescript since we are using the target as es The Istanbul report is showing as lines coverage but in Sonar the coverage is showing as please note that with the below coverageReporter configuration it generates the lcovinfo report which I am using it to publish it to sonar The Sonar dashboard is displaying the ts file asis not in the transpiledjavascript code Here is the karmaconfig preprocessors srcjsts typescript srcjsscss scss typescriptPreprocessor options passed to the typescript compiler options sourceMap false optional Generates corresponding map file target ES optional Specify ECMAScript target version ES default or ES module amd optional Specify module code generation commonjs or amd noImplicitAny true optional Warn on expressions and declarations with an implied any type noResolve true optional Skip resolution and preprocessing removeComments true optional Do not emit comments to output concatenateOutput false optional Concatenate and emit output to single file By default true if module option is omited otherwise false transforming the filenames transformPath functionpath return pathreplace ts js scssPreprocessor options sourceMap true reporters progress coverage coverageReporter dir reportsunittestscoverage subdir report instrumenterOptions istanbul noCompact true type lcov watermarks statements branches functions lines check global statements lines functions branches sonarprojectproperties sonarhosturl sonarprojectKeyhello sonarprojectNamehello sonarprojectVersion sonarmoduleshola holasonarprojectBaseDirhola holasonarsourcessrc holasonarexclusionssrcjstypessrcjsresources holasonarteststests holasonarlanguagets holasonartypescriptlcovreportPathsreportsunittestslcovinfo My configuration is as follows karmaconfjs javascript const webpackConfig requirewebpackconfigjs webpackConfigentry functionreturn const BROWSER chrome processenv const browsers if BROWSER chrome browserspushChromeNoSecurity else if BROWSER firefox browserspushFirefoxHeadless moduleexports functionconfig configset base path that will be used to resolve all patterns eg files exclude basePath frameworks to use available frameworks frameworks mocha chaiaspromised chai sinon list of files patterns to load in the browser files sourcejs testindexjs list of files patterns to exclude exclude preprocess matching files before serving them to the browser available preprocessors preprocessors sourcejs webpack coverage testindexjs webpack testspecjs webpack webpack webpackConfig webpackMiddleware noInfo false test results reporter to use possible values dots progress available reporters reporters spec coverageReporter type textsummary check global statements branches functions lines watermarks statements functions branches lines instrumenterOptions istanbul noCompact true web server port port enable disable colors in the output reporters and logs colors true level of logging possible values configLOGDISABLE configLOGERROR configLOGWARN configLOGINFO configLOGDEBUG logLevel configLOGINFO enable disable watching file and executing tests whenever any file changes autoWatch true customLaunchers ChromeNoSecurity base Chrome flags disablewebsecurity headless remotedebuggingport FirefoxHeadless base Firefox flags headless start these browsers available browser launchers browsers Continuous Integration mode if true Karma captures browsers runs the tests and exits singleRun false Concurrency level how many browser should be started simultaneous concurrency Infinity And this works fine albeit without coverage Changing reporters spec to reporters spec coverage causes karma to go in to running forever and I have to kill the process after some minutes of strong CPU and memory usage karmaconfjs files pattern jsaddjs type module pattern testaddspecjs type module preprocessors jsaddjs coverage addjs let add n n export add addspecjs import add from jsaddjs describetest function itadd function expectadd toBe script typemodule import preprocessors jsaddjs karmacoverageistanbulinstrumenter coverageIstanbulInstrumenter esModules true Theres a feature Id like to have that I think ends up being in this librarys wheelhouse I want to be able to configure a single run of karmajasmine to only count coverage from the spec file that tests it aka strict coverage or no splash coverage Id also like the option to restrict it to just the same folder so each area of the app say models and controllers for example ignores splash coverage from tests for other areas I think this is potentially possible we know when each spec starts and completes and we can access the raw coverage data so we should be able to clear out all data at the beginning of each spec and then save merge at the end of the spec Ideally it would support a user defined coversfile fullSpecName so the user could control what the relevant tests are for each covered file Id be happy to help contribute to this feature but want to get a gut check on any concerns or pitfalls there might be or if theres a more appropriate place to introduce this functionality EDIT I specified a single run just to rule out approaches like launching karma once for each spec file and merging later that works but the overhead is very high for large projects I am trying to add coverage to my project I keep getting this error every time I run npm run karma screenshot at am snippet of algorithmsjs Currently used only for adding assert class to algorithm lists import css from textassetsalgorithmscss export const name corealgorithms export async function run const elements ArrayfromdocumentquerySelectorAllolalgorithm li elements filterli liinnerTexttrimstartsWithAssert forEachli liclassListaddassert if documentquerySelectorassert const style documentcreateElementstyle styletextContent css documentheadappendChildstyle karmaconfjs Karma configuration Generated on Fri Feb GMT AEDT globals module require process use strict moduleexports functionconfig const options base path that will be used to resolve all patterns eg files exclude basePath frameworks to use available frameworks frameworks jasmine requirejs detectBrowsers configuration detectBrowsers enabled configbrowserslength usePhantomJS false postDetectionbrowsers return browsers Remove IE filterbrowser browser IE list of files patterns to load in the browser files jsdepsjqueryjs pattern assets included false served true pattern testssupportfiles included false served true pattern builds included false served true pattern jsdepsmarkedjs included false served true pattern js included false served true pattern testsspecjs included false served true pattern testsdata included false served true pattern testshtml included false served true pattern testshtml included false served true pattern workerjs included false served true pattern srcjs included false testsspecSpecHelperjs teststestmainjs list of files to exclude exclude swp swp DSStore proxies aboutblankhtml basetestsaboutblankhtml assets baseassets js basejs builds basebuilds tests basetests spec basetestsspec deps basejsdeps jsdeps basejsdeps basedeps basejsdeps workerrespecworkerjs baseworkerrespecworkerjs supportfileshljstestlangjs basetestssupportfileshljstestlangjs preprocess matching files before serving them to the browser available preprocessors preprocessors source files that you wanna generate coverage for do not include tests or libraries these files will be instrumented by Istanbul srcjs coverage test results reporter to use possible values dots progress available reporters reporters mocha progress coverage coveralls web server port port configport enable disable colors in the output reporters and logs colors true level of logging possible values configLOGDISABLE configLOGERROR configLOGWARN configLOGINFO configLOGDEBUG logLevel configLOGINFO enable disable watching file and executing tests whenever any file changes autoWatch true See detectBrowsers browsers Chrome Safari Firefox Continuous Integration mode if true Karma captures browsers runs the tests and exits singleRun false Concurrency level how many browser should be started simultaneous concurrency browserNoActivityTimeout client args grep configgrep coverageReporter includeAllSources true type lcov lcov or lcovonly are required for generating lcovinfo files needed for coveralls dir coverage if processenvTRAVIS processenvCHROMEBIN requirepuppeteerexecutablePath optionsdetectBrowsersenabled false optionsautoWatch false optionssingleRun true optionsconcurrency optionsreporters mocha progress coverage coveralls optionsbrowsers ChromeHeadless configsetoptions Here is the report of the npm audit Run npm update handlebars depth to resolve vulnerability High Prototype Pollusion Package handlebars Dependency of karmacoverage dev Path karmacoverage istanbul handlebars More info 