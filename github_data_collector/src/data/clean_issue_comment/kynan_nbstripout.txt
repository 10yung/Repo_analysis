I installed nbstripout without arguments locally in the repository Then I added a dirty notebook say with git add myNbipynb Ok doing a check with git diff cached I dont see outputs or metadata OK but all the inserted lines have a M carriage return in the diff view I ran nbstripout myNbipynb and git status showed no changes Even so I reran git add myNbipynb and then git diff cached showed a lot of newlines I also have nbdime installed so I saw that the diff ipynb or sth like that section in gitconfig and deleted it The ugly JSON diffs with M disappeared and the structured nbdime diff shows no appended newlines but it may actually mask the problem I cant be sure what is at fault here stripping while adding adds newlines the diff configuration or underlying command gives spurious output coreautocrlftrue doesnt work after configuring nbstripout Id like to know if this is a false alarm or actual whitespace pollution to the repository Despite nbstripout we still have failures with updating Scenario I run a notebook without changing the actual content and then want to pull in changes from github but I cannot sirfusersirfgpu develSIRFExercises git status On branch master Your branch is behind originmaster by commits and can be fastforwarded use git pull to update your local branch Changes not staged for commit use git add file to update what will be committed use git checkout file to discard changes in working directory modified notebooksPETMAPEMipynb no changes added to commit use git add andor git commit a sirfusersirfgpu develSIRFExercises git diff sirfusersirfgpu develSIRFExercises git pull Updating e a fedddf error Your local changes to the following files would be overwritten by merge notebooksPETMAPEMipynb Please commit your changes or stash them before you merge Aborting In this scenario git stash before the git pull sometimes works although a git stash apply can either say theres nothing to change or generate conflicts I have the impression it actually gets rid of any output in the notebook which is somewhat undesirable but seems unavoidable This is somewhat related to H I love this plugin and I use it with all my repositories However I would love to be able to use it in conjunction with nbsphinx I currently copy my notebooks to the docs folder to let sphinx compile it for documentation Id love to exclude the docs folder from nbstripout in my gitattributes such that it can use the notebook output in my docs without having to run them again and taking a lot of time for datascience jobs So I ran into a need to filter metadata key containing dot which interferes with the way the key filter is specified in git config file since nbstripout uses dot as nestedness seprarator Sadly I dont control the key names either they are coming from EIN Emacs plugin and seem to be hardcoded For now I just hacked nbstripout to treat dot as part of key name but thats of course not a proper fix Thought for a bit but couldnt come up with a good backwards compatible solution for specifying keys containing dots so at least leaving this issue here I work on multiple servers for my research and use git to sync my project repository between these servers servers Sometimes this means I want to work on the same jupyter notebook on different servers The problem with this is if I make some changes on server A and want just the code changes on server B after pushing and pulling the server B output is stripped Would it be possible to design a smudge filter that reverses the stripping process ie when a merge between a stripped repository file and unstripped work directory file is performed the code changes are made but the output is preserved Im guessing the answer is this is super nontrivial But just a thought An example use case you want to append a couple cells onto a large notebook whilst on server B then transport those changes to server A without deleting the output of the completely untouched rest of the notebook By far the most requested feature is adding extra metadata fields to strip A more scalable approach would be using a configurable list of metadata fields to keep It would be nice to have an option to keep the way output is displayed between standard scrolled and collapsed since it is more part of formatting than of outputs I am enabling scrolling when I know that the output will be large but when I still want to display it Is there a way of using nbstripout that would allow me to create a branch of cleaned notebooks from a branch that contains notebooks with populated output cells eg ones with output cells populated that can be used for testing with nbval Im thinking of a private github repo workflow where there is a testingmaster branch containing executed notebooks with populated test output cells that begets a release branch containing notebooks that can be zipped and distributed to students Presumably a variant of nbstripout could also be used to add a git filter that would automatically run a notebook when commiting it to a repository to ensure that all its output cells are populated I seem to see changes for notebooks I havent touched since I installed nbstripout Interestingly when I uninstall nbstripout and install it again the changes are gone Besides general performance issue this prevents us from adopting nbstripout as a team git status On branch master Your branch is uptodate with originmaster Changes not staged for commit use git add file to update what will be committed use git checkout file to discard changes in working directory list of notebooks I havent touched after uninstall nbstripout and install it again git status On branch master Your branch is uptodate with originmaster nothing to commit working tree clean Frequently the output is useful as informal testing of results and there is very little overhead in keeping nongraphical results Images however add considerable unwanted bulk to a commit for any version control system unless those images are very expensive to reproduce or are historical for some reason Proposal provide an option to strip out only output cells with images 