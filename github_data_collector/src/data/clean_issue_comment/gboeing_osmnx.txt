Installation is now documented for usage without conda or docker containers Refactor of to use demquery Overview I split my code into a new Python package on PyPI Since learning about Virtual Rasters the code to find elevations is an order of magnitude simpler I dont do any joining of nearby rasters GDAL does all of that I discovered that interp d gives those warnings only when the grid is not the expected size for the type of interpolation x for linear interpolation x for cubic interpolation and x for quintic interpolation So I removed the option to manually choose the size of the interpolation region If interpkind is linear it creates a x grid Checks for nodata values the virtual raster can have regions with no data that are inside the files bounds if the provided files didnt create an exact rectangle My package raises an error if it sees those values in the interpolation region Im working on writing tests in the demquery package Im having issues with rasterio working on Travis CI the osmnx travisyml was quite helpful Do you have plans to deprecate Python and Python is already end of life and is in a month I made demquery compatible but havent tested Python Right now demquery is only on PyPI and I think thats why the current Travis build is failing Example Download both the files USGSNED n w IMG USGSNED n w IMG MB extracted each py import osmnx as ox west south north east G oxgraphfrombboxnorthnorth southsouth westwest easteast dempaths USGSNED n w IMGimg USGSNED n w IMGimg interpkind can be None linear cubic or quintic G addnodeelevationsfromdemG dempaths interpkindNone G addedgegradesG Similar to the closed PR Functions are modified to accept a tags argument which is a dictionary of different keyvalue pairs Similar to values of the dict can be True str or list of str Ie tags amenityTrue landuse retailcommercial highwaybusstop I didnt try to implement keyFalse to remove any items of key from the search In contrast to this leaves the amenity parameter in the POI functions so it doesnt break backwards compatibility If both amenities and tags amenity are supplied then they are combined before the Overpass request py tags tourism motel west south east north test createpoigdfnorthnorth southsouth westwest easteast tagstags printtest osmid geometry name tourism head osmid geometry name POINT Townhouse Motel POINT Econo Lodge Bishop POINT Travelodge Bishop POINT Super Bishop POINT Americas Best Value Inn tourism motel motel motel motel motel Hello This is an amazing project and Im happy to finally have a project to test out osmnx Im working with OSM data of trails and adding elevation data to trails is important Currently the only elevation provider supported is Google Maps and this has a couple drawbacks For one theyre currently restricting API usage Notice New customers will need to contact sales for access to the Elevation API This might mean they only care about largescale largebudge projects and in any case restricts small developers from using it There are a couple other elevation APIs but they all have the drawbacks of being web services I wrote code for myself to import elevations from a local DEM using rasterio Would you accept a PR for this Using local DEMs are more scalable than APIs They can be more accurate since most APIs use at most m SRTM data and there exists m data for the contiguous US and m for some cities from new LIDAR data Maybe there could also be a helper function to download predefined types of elevation DEMs like SRTM DEP for the US etc for the area covered by the current Graph Drawbacks Using rasterio would add a dependency on GDAL which is not insignificant Id propose that it not be included in requirementstxt but that a user whos interested in using this function could self install and it would be imported conditionally This PR is meant to fix issue that I myself raised I had the code implemented anyway because I needed this functionality This is my first PR to osmnx I would like to have your feedback even in case this PR does not fit the project or significant changes are needed I would like a functionality to convert a larger street network to one with less amount of nodes Created by merging nodes that are closer than a threshold Sample usage would be something like python G oxgraphfromaddressBerlin Germany distance distancetypebbox Gnumberofnodes Gnumberofedges H oxsimplifycoarsegrainG radius collapses all nodes within m radius Hnumberofnodes Hnumberofedges H is a smaller graph 