When WebSocket connection is established to Spring Boot application orgatmospherecontainerJSR Endpoint does NOT properly handle request cookies As a result AtmosphereRequest does not contain cookies at all although cookies are available in the request header It looks as if the problem is at orgatmospherecontainerJSR Endpointjava ListString cookieHeaders handshakeHeadersgetCookie Correct header name is cookie no capital letters Please see Dear atmosphere team I have been trying to implement Stomp with spring Boot base on springboot example and stomp example It thrown message WARN io exec oastomphandlerHandlerHelper No handler found for destination destination javalangIllegalArgumentException null at orgatmospherestomphandlerHandlerHelpercallHandlerHandlerHelperjava atmospherestomp jarna at orgatmospherestompinterceptorSubscribeInterceptorinspectSubscribeInterceptorjava atmospherestomp jarna This is my SpringApplication SpringBootApplication public class AtmosphereApplication Bean public ServletRegistrationBean atmosphereServlet Dispatcher servlet is mapped to home to allow the AtmosphereServlet to be mapped to chat ServletRegistrationBean registration new ServletRegistrationBean new AtmosphereServlet stomp registrationaddInitParameterorgatmospherecprpackages orgatmosphere registrationsetLoadOnStartup Need to occur before the EmbeddedAtmosphereInitializer registrationsetOrderOrderedHIGHESTPRECEDENCE return registration public static void mainString args throws Exception ConfigurableApplicationContext ap SpringApplicationrunAtmosphereApplicationclass args please help me regards Our project use atmospherejs now I could get the response code is from the onClose function RequestonCloseResponse how to get the specified close code from the onClose function such as or Because I need to recoginze whether the browser close the websocket or the server side close the websocket Thanks much js case reason Normal closure the connection successfully completed whatever purpose for which it was created break case reason The endpoint is going away either because of a server failure or because the browser is navigating away from the page that opened the connection break case reason The endpoint is terminating the connection due to a protocol error break I am attempting to add a heartbeat listener to every new AtmosphereResource created in my application and running into trouble I have a class that implements AtmosphereHandler annotated with AtmosphereHandlerService and in the onRequest method Ive added several event listeners to the resource However when the heartbeat triggers it logs the message TRACE oacprAtmosphereResourceImpl No listener with uuid This uuid matches the one logged in onRequest I inspected this with the debugger and despite having the same uuid the instance of AtmosphereResourceImpl that my onRequest method is called with is different from the one that is getting the heartbeat event and has none of the listeners I added in onRequest However my onRequest method also adds a disconnect listener and that listener does work correctly I would like very much to be told that Im just using the library wrong Im using atmosphereruntime from maven The app is a dropwizard web application Deployment Atmosphere on Tomcat server After a server disconnect Atmosphere degrades to longpolling from websocket but unable to POST messages but GET ie receives new messages works fine httpnio exec WARN orgatmosphereconfigmanagedManagedAtmosphereHandler AtmosphereRequest methodPOST contextPathHOME servletPathasync pathInfomessage requestURIHOMEasyncmessage requestURL AtmosphereResource UUID b ce ab b f fa d d destroyabletrue received an empty body The browser log shows ContentLength but the payload is definitely not zerolength type chat message hello Interestingly the Request URL is We have Tomcat and Apache linked in a reverse proxy setup The webxml is attached Any help appreciated xml version encodingUTF webapp xmlnsxsi xmlns xmlnsweb xsischemaLocation idHOME version sessionconfig sessiontimeout sessiontimeout sessionconfig displaynameHOMEdisplayname welcomefilelist welcomefileindexjspwelcomefile welcomefilelist listener listenerclassorgspringframeworkwebcontextContextLoaderListenerlistenerclass listener listener listenerclassorgspringframeworksecuritywebsessionHttpSessionEventPublisherlistenerclass listener contextparam paramnamecontextConfigLocationparamname paramvalueWEBINFapplicationContextsecurityxmlparamvalue contextparam listener listenerclassorgatmospherecprSessionSupportlistenerclass listener servlet descriptionAtmosphereServletdescription servletnameAtmosphereServletservletname servletclassorgatmospherecprAtmosphereServletservletclass initparam paramnameorgatmospherecprpackagesparamname paramvaluexxxxxxwebsocketparamvalue initparam initparam paramnameorgatmospherecprAtmosphereInterceptorparamname paramvalueorgatmosphereclientTrackMessageSizeInterceptorparamvalue initparam initparam paramnameorgatmosphereinterceptorHeartbeatInterceptorheartbeatFrequencyInSecondsparamname paramvalue paramvalue initparam initparam paramnameorgatmosphereinterceptorHeartbeatInterceptorclientHeartbeatFrequencyInSecondsparamname paramvalue paramvalue initparam initparam paramnameorgatmospherecprremoveSessionTimeoutparamname paramvaluetrueparamvalue initparam asyncsupportedtrueasyncsupported servlet servletmapping servletnameAtmosphereServletservletname urlpatternasyncurlpattern servletmapping filter filternamespringSecurityFilterChainfiltername filterclassorgspringframeworkwebfilterDelegatingFilterProxyfilterclass asyncsupportedtrueasyncsupported filter filtermapping filternamespringSecurityFilterChainfiltername urlpatternurlpattern dispatcherREQUESTdispatcher dispatcherASYNCdispatcher filtermapping servlet servletnameRestletServletservletname servletclassorgrestletextservletServerServletservletclass servlet servletmapping servletnameRestletServletservletname urlpatternapiurlpattern servletmapping contextparam paramnameorgrestletapplicationparamname paramvaluexxxxxxDataServiceApplicationparamvalue contextparam webapp Ive analysed your codebase and noticed that orgatmosphereutiluriUriComponent is not fully tested Ive written some tests for the methods in this class with the help of Diffblue Cover Hopefully these tests will help you detect any regressions caused by future code changes If you would find it useful to have additional tests written for this repository I would be more than happy to look at other classes that you consider important in a subsequent PR For audit reasons I need to know the IP address of the invoking party of our web socket services According to a post from a couple of years ago you can get the underlying request through atmResourcegetRequest and use getRemoteAddr from there However running behind Wildfly and using web sockets I always get back There was a similar issue in request behind Tomcat but that one is also years old In a rest endpoint in the same WAR I can successfully get the remote IP address Any idea Thanks Ron Atmosphere Stacktrace java ERROR pool thread orgatmospherecprAsynchronousProcessor Interceptor Atmosphere LifeCycle crashed Processing will continue with other interceptor javalangNullPointerException null at orgatmospherecprAtmosphereRequestImplgetSessionAtmosphereRequestImpljava atmosphereruntime jar at orgatmospherecprSessionTimeoutSupportrestoreTimeoutSessionTimeoutSupportjava atmosphereruntime jar at orgatmospherecprAtmosphereResourceImplcancelAtmosphereResourceImpljava atmosphereruntime jar at orgatmospherecprAtmosphereResourceImpldirtyCloseAtmosphereResourceImpljava atmosphereruntime jar at orgatmospherecprDefaultBroadcasteraddAtmosphereResourceDefaultBroadcasterjava atmosphereruntime jar at orgatmospherecprAtmosphereResourceImplsuspendAtmosphereResourceImpljava atmosphereruntime jar at orgatmosphereinterceptorAtmosphereResourceLifecycleInterceptorpostInspectAtmosphereResourceLifecycleInterceptorjava atmosphereruntime jar at orgatmospherecprAsynchronousProcessorpostInterceptorsAsynchronousProcessorjava atmosphereruntime jar at orgatmospherecprAsynchronousProcessoractionAsynchronousProcessorjava atmosphereruntime jar at orgatmospherecprAsynchronousProcessorsuspendedAsynchronousProcessorjava atmosphereruntime jar at orgatmospherecontainerServlet CometSupportserviceServlet CometSupportjava atmosphereruntime jar at orgatmospherecontainerJettyServlet AsyncSupportWithWebSocketserviceJettyServlet AsyncSupportWithWebSocketjava atmosphereruntime jar at orgatmospherecprAtmosphereFrameworkdoCometSupportAtmosphereFrameworkjava atmosphereruntime jar at orgatmospherecprAtmosphereServletdoPostAtmosphereServletjava atmosphereruntime jar at orgatmospherecprAtmosphereServletdoGetAtmosphereServletjava atmosphereruntime jar at javaxservlethttpHttpServletserviceHttpServletjava jettyserver jar at javaxservlethttpHttpServletserviceHttpServletjava jettyserver jar at orgeclipsejettyservletServletHolderhandleServletHolderjava jettyserver jar at orgeclipsejettyservletServletHandlerCachedChaindoFilterServletHandlerjava jettyserver jar Dear Team We are using Atmospehere framework in our product for Async Push Notifications using WebsocketsLongpolling In our Product we support multiple application sessions in a single browser session using the concept of path based cookies ie if we hit From same browser different tabs we will have separate application sessions but single JSESSIONID as the JSESSIONID is container managed In this case both the sessions uses different Websockets and same Jsession ID And our notificationsatmospehere broadcasters are tied with application session cookie We noticed that Atmosphere internals uses HttpSession which is tied with JSESSIONID Could you please let us know what do we store in HttpSession and what scenarios will fail if we use shared JSESSION accross multiple application sessions Extra memory allocation just to check if response contains only spaces It leads to allocation extra space in heap and more often GCAllocation failure under heavy load TrackMessageSizeInterceptorInterceptor line String s cbtoString will create extra char for payload if strimlength return responseDraft 