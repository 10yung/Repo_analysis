Changed introduced due to multiply combined properties firing twice with the same value see tests Also makes queue have single semantics regardless of sequencer state Updates orgwebjarsfontawesome from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgwebjars artifactId fontawesome details labels semverminor This was patched for transform in x series We can ensure that uniformly by eg adding internal listen method which would propagate the flag to derived properties See PropertyTest commented case for force in streamTo for starting example Followup to SeqProperties based on immutable models usually return immutable collections scala modelsubPropvectorget Vector Int but direct usage is not quite as good scala SeqProperty get scalacollectionSeq Int The choice of base Seq type was beneficial in terms of perfomance as we sometimes avoid copying the collection but proves to problematic especially in Scala where Seq aliases immutableSeq This introduces compatibility issues eg with Scalatags which only accept immutable collections Therefore after migration of our codebase for we had to introduce toSeq calls in some usages scala produceps stoSeqrender This particular issue was patched by explicit copying but its not a comprehensive solution as ReadableSeqProperty A ReadableProperty scalacollectionSeq A which introduces base Seq type to multiple API methods Proposed acceptance criteria only allow immutable sequences in SeqProperties remove ioudashpropertiesPropertyCreatormaterializeBSeq ensure public API of SeqProperty is ISeqbased especially get listen etc ensure consistency with above for subSeq roSubSeq use a thin wrapper copyonwrite to avoid copying in all cases This will also benefit the performance for past cases where an immutable collection was used as a model subsequence performance should be onpar with x Making a factory reuse the view and presenter often requires eg adding an empty parameter list to the class We often see an issue with this being refactored away or simply forgotten We should add more explicit controls over when the views and presenters are reused 