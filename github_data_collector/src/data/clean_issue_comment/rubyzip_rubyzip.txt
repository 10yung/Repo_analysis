As suggested in this pull request makes it possible to easily extend rubyzip with additional decompressors This is a funny one that has been exposed by fixing The defaults for restoretimes restorepermissions and restoreownership are separately specified in both ZipFile and ZipEntry and they are out of sync Current defaults for each option OptionClass ZipFile ZipEntry restoretimes false true restorepermissions false false restoreownership false false This isnt generally an issue as whatever is set in ZipFile is percolated through to ZipEntry except not always grimacing The following example shows how this can get confused ruby zip ZipFileopentestdataglobTestzip e zipfindentryglobTestfoodtxt e extractftesttxt e zipgetentryglobTestfoodtxt e extractgtesttxt zipclose ftesttxt has a timestamp of May gtesttxt has the current time and date for its timestamp This all occurs because the default for the above options are stored twice and kind of need to be due to there not always being a ZipFile parent for every ZipEntry but also because while ZipFilegetentry and ZipFilefindentry are ostensibly doing the same thing they are implemented very differently The quick fix for this is fairly easy and Ill work up a PR for it later The main reason I am documenting this in a detailed issue is to ask should these options be moved up to the top level alongside validateentrysizes et al Or do we leave them where they are and risk them being out of sync again in the future jdleesmiller simonoff Id appreciate your thoughts but I reckon moving them up is the right way to go this would have the happy sideeffect of simplifying various interfaces in ZipFile Happy to also work this up as a PR if you agree I find myself testing things in irb enough that this has proved useful so I decided to commit it Its purely a developer nicety so isnt stored in the gem I have a scenario where I would like to create a zip that resolves to the same hash each time similar to how the nix zip X flag works but ideally more crossplatform To that effect it would be nice to have an option to disable the storage of additional fields Currently I can hack it in by doing something like this but it would be nice to just have a flag I could set ruby require zip require digest Filewritea asdf Zipdefaultcompression ZlibNOCOMPRESSION ZipFileopenazip ZipFileCREATE do zipfile a zipfileadda a atime ZipDOSTimenew aextra ZipExtraFieldnew puts aclass end puts DigestSHA hexdigestFilereadazip Fileunlinkazip Bug found by fuzzing rubyzip When creating an ExtraField from a binary string in the merge method there is no check for the binstr length resulting in either id or len variables possibly being set to nil I created a quick fix that raises a ZipError if either of these variables are nil to prevent an unhandled NoMethodError when using them Raw crash homearielaflkisatenprivatesandboxrubyziprubyziplibzipextrafieldrb in extrafieldtypeexist undefined method for nilNilClass NoMethodError from homearielaflkisatenprivatesandboxrubyziprubyziplibzipextrafieldrb in merge from homearielaflkisatenprivatesandboxrubyziprubyziplibzipextrafieldrb in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in new from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in readcdirextrafield from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in readcdirentry from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in readcdirentry from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in block in readcentraldirectoryentries from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in times from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readcentraldirectoryentries from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readfromstream from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in block in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in new from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from ziprb in main Reproduce with this file extrafieldrb or this one extrafieldrb Bug found by fuzzing rubyzip In the nameisdirectory method the name variable is used to check if the entry is a directory This results in an unhandled NoMethodError when name is nil In this case name was set in readcdirentry where I added a quick fix by setting it to an empty string when it would be set to nil I do think some more serious refactoring might be needed to prevent bugs like this one from happening with rubyzip but for now this solves this precise crash Raw crash homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in nameisdirectory undefined method endwith for nilNilClass NoMethodError from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in setftypefromcdirentry from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in readcdirentry from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in readcdirentry from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in block in readcentraldirectoryentries from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in times from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readcentraldirectoryentries from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readfromstream from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in block in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in new from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from ziprb in main Reproduce with this file Bug found by fuzzing rubyzip In the readcentraldirectoryentries method cdiroffset can be nil resulting in the call to ioseek raising an unhandled TypeError exception It appears cdiroffset is set in readeocd or read eocd but I am not sure that it is considered a failure for it to be set to nil there so in my fix I threw a ZipError exception just before trying to use the nonexistent cdiroffset Raw crash homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in seek no implicit conversion from nil to integer TypeError from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readcentraldirectoryentries from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readfromstream from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in block in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in new from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from ziprb in main Reproduce with this file Bug found by fuzzing rubyzip ioreadZipCDIRENTRYSTATICHEADERLENGTH can resolve to nil resulting in an unhandled NoMethodError exception in the checkcdirentrystaticheaderlength method This can be simply fixed by using an empty string when this variable is nil This is a quick fix for the issue decide if this is okay or you want something more comprehensive Raw crash homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in checkcdirentrystaticheaderlength undefined method bytesize for nilNilClass NoMethodError from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in readcdirentry from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in readcdirentry from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in block in readcentraldirectoryentries from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in times from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readcentraldirectoryentries from homearielaflkisatenprivatesandboxrubyziprubyziplibzipcentraldirectoryrb in readfromstream from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in block in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in initialize from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in new from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from ziprb in main Reproduce with this file Hi Ive been testing rubyzip with a Ruby fuzzing tool kisaten and found a few bugs I wrote fixes for all the bugs and sending PRs now In this bug it appears that ExtraField can leave some members empty nil specifically mtime for UniversalTime and NTFS I dont know if this is expected behavior but I created a specific fix for this issue by checking nil value in the time function otherwise it raises a NoMethodError and crashes the execution Raw crash homearielaflkisatenprivatesandboxrubyziprubyziplibzipentryrb in undefined method dosequals for nilNilClass NoMethodError from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentrysetrb in from homearielaflkisatenprivatesandboxrubyziprubyziplibzipentrysetrb in from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in commitrequired from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in commit from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in close from homearielaflkisatenprivatesandboxrubyziprubyziplibzipfilerb in open from ziprb in main Reproduce the crash with this file 