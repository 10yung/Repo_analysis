closes Hey there I am trying to use this to serialize and deserialize a Keypair item Serialization seems to work however it fails to deserialize Heres a short example that shows this with serdejson toml and postcard a binary format rust use ed dalekKeypair use serdeDeserialize Serialize use randrngsOsRng use toml use serdejson use postcard deriveDebug Serialize Deserialize struct Demo keypair Keypair fn main printlnMake a key let demo Demo keypair Keypairgenerate mut OsRng println n nWrite to toml let demotoml tomltostring demounwrap println demotoml let demotomlrebuild ResultDemo tomlfromstr demotoml println demotomlrebuild println n nWrite to json let demojson serdejsontostring demounwrap println demojson let demojsonrebuild ResultDemo serdejsonfromstr demojson println demojsonrebuild println n nWrite to postcard let demopostcard postcardtostdvec demounwrap println demopostcard let demopostcardrebuild ResultDemo postcardfrombytes demopostcard println demopostcardrebuild Result Make a key Write to toml keypair ErrError inner ErrorInner kind Custom line Some col at Some message invalid type sequence expected An ed keypair bytes in total where the secret key is the first bytes and is in unexpanded form and the second bytes is a compressed point for a public key key keypair Write to json keypair ErrErrorinvalid type sequence expected An ed keypair bytes in total where the secret key is the first bytes and is in unexpanded form and the second bytes is a compressed point for a public key line column Write to postcard ErrDeserializeUnexpectedEnd Ill dig into this a bit more this week hopefully I tried to uprev our version of ed dalek but I ran into two issues missing cfgfeature rand in secretrs I think this is a further case of we are building with these features defaultfeatures false features alloc nightly serde u backend we lost Default trait on SecretKey I dont know if that was intentional API change but atm we are using that anyways please lmk thank you error E unresolved import randthreadrng homenxhcargoregistrysrcgithubcom ecc db ec ed dalek srced rs use randthreadrng no threadrng in the root error aborting due to previous error This seems to have been fixed in master could a fix be backported If not whats the ETA for I tried using version as recommended in the current README but that isnt on cratesio yet In ExpandedSecretKeysignprehashed here the context is required as reference to a static Is it to prevent to some extent applications from accidentally using different contexts ed dalekSignatureError does not implement stderrorError which makes it unergonomic to use with modern error libraries that rely on that impl for error types rust use anyhowResult use ed dalekSignatureError fn f Result SignatureError Ok fn main Result f doesnt work Ok console error E the trait bound ed dalekerrorsSignatureError stderrorError is not satisfied srcmainrs f doesnt work the trait stderrorError is not implemented for ed dalekerrorsSignatureError note required because of the requirements on the impl of stdconvertFromed dalekerrorsSignatureError for anyhowError note required by stdconvertFromfrom The ed crate and the signature crates provide traitbased interoperability between Ed libraries This commit integrates the ed Signature type and changes the existing sign and verify methods to use the Signer and Verifier traits from the signature crate Additionally it replaces the current error types with an opaque one from the signature crate This has the drawback of requiring the Signer and Verifier traits are in scope in order to create signatures but the benefit of interoperable support for other Ed signers and verifiers Presently there are a number of these provided through the Signatory framework along with support for HSMbacked Ed signatures in the yubihsm crate Many users want a verifystrict function which would reject signatures contain torsion components in the R portion of the signature in the signers corresponding public key or in the product of s component and the basepoint as well as those whose s component is nonreducednoncanonical This isnt strictly according to the RFC which states in Check the group equation S B R k A Its sufficient but not required to instead check S B R k A So technically by doing the full malleability checks for torsion components were not RFC compatible because the full checks themselves are not backwards compatible with the original definition of the ed primitive as well as earlier IETF standardised versions of the primitive However many modern users want this anyway and this is quite sensible particularly for protocol designers lacking algorithmic agility but who desire added safety at the cost of backwards incompatibility Note that it is my very strong opinion that if you want this you should be using a signature scheme which uses Ristretto Reproduce build the following minimal crate cargo build nodefaultfeatures results in error duplicate lang item in crate std f runtime note first defined in crate sgxtstd error duplicate lang item in crate std f runtime note first defined in crate sgxtstd error duplicate lang item in crate std panicimpl note first defined in crate sgxtstd error duplicate lang item in crate std beginpanic note first defined in crate sgxtstd error duplicate lang item in crate std oom note first defined in crate sgxtstd error aborting due to previous errors error Could not compile testnostd Problem Crates which use Ed as part of a highlevel protocol implementation or abstract signature functionality who want to enable the consumers of their crates to be able to use their choice of Rust Ed libraries wind up writing their own abstractions to do so on a cratebycrate basis Heres an example from the Noise Protocol implementation snow which does not yet use Ed signatures but I hope still illustrates the point img width altScreen Shot at PM src Instead of every crate which wants to do this having to wrangle a silly zoo of optional crypto crates dependencies a better approach would be to define a common set of traits for how to produce Ed signatures and encourage algorithm provider crates to impl those traits This makes it easy to say use ed dalek as a software signing crate while also supporting the yubihsm crate for hardwarebacked Ed signatures signature crate Ive been working with newpavlov via the RustCrypto GH org to create a crate which provides abstract digital signature functionality which I plan on using to rewrite the internals of Signatory an existing multiprovider digital signature library Where Signatory provides a set of compatible provider crates eg signatorydalek what I would really love to do as part of a minimalist rewrite is also get crypto library authors to adopt the traits directly into their libraries instead of using wrapper crates which impl the relevant traits And congratulations youre the first project Im pinging Ive just opened a PR to the signature crate which implements the initial set of signing traits Sidebar If you see anything you dont like there please let us know This is the first major nonboilerplate PR to the crate so now is a great time to fix anything you dont like about it Namely it has traits like these rust pub trait SignS Signature Send Sync fn sign self msg u ResultS Error pub trait VerifyS Signature Send Sync fn verify self msg u signature S Result Error These traits provide equivalent methods to the existing Keypairsign and PublicKeyverify methods the only difference being the Sign trait returns a Result for its sign method in which case it might be worth considering separating sign from trysign so people who dont care about things like HSM errors dont always need to call unwrap Having people import an additional trait is I will admit mildly annoying but I imagine most people are copyingpasting the relevant code so adding an additional import is not that annoying You can reexport the relevant traits similar to what youre already doing for Digest ed crate For true interop crates need to agree on at least an ed Signature type That said the ed crate is presently vaporware and these types dont yet exist Update its real and used in production in a few crates eg yubihsm One option if you are so inclined as authors of what is pretty much the definitive Rust Ed crate would be to upstream the existing Signature type into the ed crate All that said Im happy to both make changes to the signature crate as well as put in a PR to ed dalek to switch to using these traits once we publish the initial signature crate Let me know if youre interested