 When call editDistanceListcListb the expected cost should be one deletion one addition Now it returns Probably it can be modified as below scala case a b delete fatail b min insert fatail ahead b min replace fatail btail scala def maxRectangleInHistogramheights List Int Int tailrec def solvestack List Int Int remaining List Int Int maxAreaInt Int def areax Int y Int heightslength remaininglength x y stack remaining match case Nil Nil maxArea case y x rest Nil solve rest Nil maxArea max areax y case y x rest h i hs if h y solve rest h x hs maxArea max areax y case block hs solveblock stack hs maxArea solveNil heightszipWithIndex See and Just stumbled upon this very nice repo but couldnt find any info on the LICENSE on the contained code Adding some LICENSE information to the README andor some file headers eg with sbtheader would be great scala class ModularArithmeticval mod Long class Modval value Long override val toString valuetoString implicit def fromModmod Mod Long modvalue implicit def toModx Long Mod new Modxmod val factorial IndexedSeq Mod val N val f ArrayofDim Mod N f L until Nforeachi fi fi i f def modularInversen Long Mod BigIntnmodInversemodtoLong If mod is prime override this with BigIntnmodPowmod modtoLong def modDiva Long b Long Mod a modularInverseb def permutationsn Int k Int Mod modDivfactorialn factorialn k def combinationsn Int k Int Mod modDivpermutationsn k factorialk See Codeforces B scala On version def countPalindromes s String Int to slengthflatMapsslidingcountt treverse t scala On version def countPalindromes s String Int def countBetweenleft Int right Int Int if sisDefinedAtleft sisDefinedAtright sleft sright countBetweenleft right else sindicesmapi countBetweenleft i right i countBetweenleft i right i sum scala On version def countPalindromes s String Int Manachers algo non trivial java int maxFlowint cap int source int sink for int flow flow if augmentPathcap new boolean caplength source sink return flow boolean augmentPathint cap boolean vis int i int sink if i sink return true vis i true for int j j vislength j if vis j cap i j augmentPathcap vis j sink cap i j cap j i return true return false return Map of prime to count def primeFactorsn Int Map Int Int 