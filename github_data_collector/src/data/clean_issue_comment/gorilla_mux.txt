Repro Add a Host route with a var and without the port Make a query with a host that contains a port See that the route matches Actual The var is not present in the route vars even thou the expected handler is triggered Expected The var should be there Hello My project begin to growth and im asking myself about documentation generator do you know if they are existing generator of api documentation with annotation maybe or if its planned to integreate API generator by routes or by annotation Best regards Henri Describe the bug Im using a PathPrefix subrouter product and it has a handler example taken from the mux readme Im not sure if this is a bug or not is not what I expected since StrictSlash is set to false Versions Go version go version go linuxamd package version v Steps to Reproduce How can the bug be triggered See attached code Expected behavior What output or behaviour were you expecting instead One of Both requests work The first is OK the second is redirected to the first Code Snippets A minimum viable code snippet can be useful use backticks to format it go package main import fmt log nethttp time githubcomgorillamux func ProductsHandlerw httpResponseWriter r httpRequest fmtPrintlnhandler called func main r muxNewRouter s rPathPrefixproductsSubrouter sHandleFunc ProductsHandler go func logFatalhttpListenAndServe r timeSleeptimeSecond res err httpGet if err nil logFatalerr fmtPrintfStatus code s n resStatus not found res err httpGet if err nil logFatalerr fmtPrintfStatus code s n resStatus ok Describe the bug Path before Subrouter must have a trailing slash for the subrouters handlers to be invoked Even more the request path also must contain the trailing slash otherwise the handlers are never invoked Versions go version go linuxamd githubcomgorillamux v Steps to Reproduce go package main import fmt githubcomgorillamux log nethttp time func handlerw httpResponseWriter r httpRequest fmtPrintlnPATH rURLPath func main root muxNewRouter Only if both paths end with the handler is invoked const pathToMatch xxx const pathToGet xxx sr rootPathpathToMatchSubrouter srHandleFunc handler go func logFatalhttpListenAndServe root timeSleeptimeSecond if err httpGet pathToGet err nil logFatalerr The handler is invoked only if both pathToMatch and pathToGet end with a trailing slash Expected behavior Any combination of xxx and xxx works as it does without the subrouter go package main import fmt githubcomgorillamux log nethttp time func handlerw httpResponseWriter r httpRequest fmtPrintlnPATH rURLPath func main r muxNewRouter Try adding a trailing slash to any of the paths or both of them The handler is invoked in any of the four cases const pathToMatch xxx const pathToGet xxx rHandleFuncpathToMatch handler go func logFatalhttpListenAndServe r timeSleeptimeSecond if err httpGet pathToGet err nil logFatalerr In the README there is an example to serve SPA This example works fine on Linux but not on Windows This seems to be the problem get the absolute path to prevent directory traversal path err filepathAbsrURLPath This seems to work like this Linux faviconico faviconico Windows faviconico C faviconico The result on windows is a path like this public C faviconico Describe the bug A clear and concise description of what the bug is We have an application running in kubernetes with url wwwexamplecom and subpath customersomeone In this application we use the mux as follows import nethttp etc githubcomgorillamux func queryHandlerw httpResponseWriter r httpRequest wHeaderSetcontenttype textplain code err wWrite bytestatus ok if err nil logrusErrorfCant deliver response v status v err code func main router muxNewRouter routerStrictSlashtrue routerMethodshttpMethodPostPathqueryHandlerhttpHandlerFuncqueryHandler Now if a request to wwwexamplecomcustomersomeonequery is done the strictslash sees a missing slash and replies with a REDIRECT to wwwexamplecomquery thus omitting the subpath and this is not recognised by our ingress so we get a eventually I would expect the URL to go to wwwexamplecomcustomersomeonequery Versions Go version go version package version run git revparse HEAD inside the repo Go version go version go windowsamd package version d b ffe a cc fc d Steps to Reproduce How can the bug be triggered Run a pod in kubernetes or something similar with an ingress that redirects the subpath to a certain pod Inside that pod the code describe above causes an issue if a path without a slash is queried Expected behavior What output or behaviour were you expecting instead I was expecting the path to stay after the redirect Code Snippets A minimum viable code snippet can be useful use backticks to format it see original description Summary of Changes Add a line that makes first example work For me first example didnt work until I added ListenAndServe if this is not needed feel free to close the pr Describe the problem youre having A clear and concise description of what the bug is router muxNewRouter routerPathtokencreateorphan MethodsPOST Schemeshttps HeadersContentType applicationjson HandlerFuncCreateOrphanTokenHandler srv httpServer Handler router When I do a POST to everything works as expected However after I do a go mod init go build then rerun my project the POST fails with a The only way I can get it work work after the go mod init change is when I comment out the Schemes call which seems odd When I remove the gomodgosum and rebuild then it works again with the Schemes reenabled Versions mux go version go darwinamd gomod require githubcomasaskevichgovalidator v f b f f a githubcomgorillamux v githubcomshurcooLhttpfs v d bc ba indirect githubcomshurcooLvfsgen v a ea bcacd indirect githubcomsirupsenlogrus v githubcomtidwallgjson v Show me the code See above Describe the bug About Matching Routes Host The docs go r muxNewRouter Only matches if domain is wwwexamplecom rHostwwwexamplecom this Matches a dynamic subdomain rHostsubdomain az examplecom It will not work if the host is passed in without a scheme Versions Go version go version go darwinamd package version githubcomgorillamux v Steps to Reproduce Code Snippets This not work go func main r muxNewRouter rHostlocalhost rHandle httpHandlerFuncfuncw httpResponseWriter r httpRequest wWrite byteok httpListenAndServe r This work go func main r muxNewRouter rHost rHandle httpHandlerFuncfuncw httpResponseWriter r httpRequest wWrite byteok httpListenAndServe r Expected behavior Work without scheme Describe the bug A clear and concise description of what the bug is On a Windows bits platform create a web application Set a breakpoint inside an IDE like LiteIDE Install Delve as debugger then start debugging The message is gopkgmodgithubcomgorillamuxv muxv debugexe is not executable When running the executable directly from command line the message from Windows is even more explicit bits Application not allowed translated from the french message on my computer Versions Go version go version go version go windowsamd 