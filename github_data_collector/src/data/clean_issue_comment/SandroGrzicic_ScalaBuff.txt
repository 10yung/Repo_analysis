I sbtassembled the jar and this is what i get when trying to use it java jar scalabuffcompilerassembly jar protopath scalaout unknown string matching regex z expected but s found syntax proto unknown string matching regex z expected but s found syntax proto the proto file is a minimal example regardless of whether using proto or syntax and yes it throws two of the same errors for one file syntax proto message Example required int test Fix for issue Scalabuff removes chars in vaiable names and errors occur when scala is compiled If your protobuf looks like this test project is located here protobuff syntax proto package test option javapackage test option ccenablearenas true enum ContentCategory IAB IAB Then you run sbt compile You will get the following error error UsersxxxtestprotobufscalatesttargetsrcmanagedmaincompiledprotobuftestContentCategoryscala method isIab is defined twice error conflicting symbols both originated in file UsersxxxprotobufscalatesttargetsrcmanagedmaincompiledprotobuftestContentCategoryscala error def isIab Boolean false error error one error found error compilecompileIncremental Compilation failed Because the scala it generates is like so scala Generated by the Scala Plugin for the Protocol Buffer Compiler Do not edit package test import comtrueaccordscalapbDescriptors sealed trait ContentCategory extends comtrueaccordscalapbGeneratedEnum def isIab Boolean false def isIab Boolean false object ContentCategory extends comtrueaccordscalapbGeneratedEnumCompanion ContentCategory SerialVersionUID L case object IAB extends ContentCategory val id val name IAB override def isIab Boolean true SerialVersionUID L case object IAB extends ContentCategory val id val name IAB override def isIab Boolean true lazy val values SeqIAB IAB def fromValuevalue Int ContentCategory value match case IAB case IAB lazy val descriptor new DescriptorsEnumDescriptor ContentCategory this Sometimes you need to have scala java version of protobuf classes In my case its because I need to have human input output format and only Java version of protobuf objects implements MessageOrBuilder interface that allows you to have pretty printing via google TextFormat class So since javapackage option is used by java compiler as well we gonna have separate option for scala scalapackage and scalaouterclassname Test is provided as well Hello I would like to compile the project with jdk bits Is it possible Thanks in advance for your reply Not sure if its just something I messed up but it looks like a couple of files in scalabuffcompilersrctestresourcesparsed might be incorrectly named Im getting errors on sbt assembly due to FileNotFoundExceptions info ParserTest info InvalidSimple FAILED info javaioFileNotFoundException scalabuffcompilersrctestresourcesparsedInvalidSimpletxt No such file or directory Changing the file name from invalidSimpletxt to InvalidSimpletxt fixes the problem Maybe I just have something else misconfigured though Tag of in protobuf messages are not valid and produce failures at runtime this could be detected on schema compilation Hi Please add supported protobuf version to README It would be nice to add a package at the top of generated scala files that might be specified in the command line The procedures should have Unit and some of the imports seem unnecessary localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtoObsscala Procedure syntax is deprecated Convert procedure writeTo to method by adding Unit def writeTooutput comgoogleprotobufCodedOutputStream localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtoObsscala Procedure syntax is deprecated Convert procedure writeTo to method by adding Unit def writeTooutput comgoogleprotobufCodedOutputStream localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtoObsscala Procedure syntax is deprecated Convert procedure writeTo to method by adding Unit def writeTooutput comgoogleprotobufCodedOutputStream localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtoObsscala Procedure syntax is deprecated Convert procedure registerAllExtensions to method by adding Unit def registerAllExtensionsregistry comgoogleprotobufExtensionRegistryLite localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtobufPredictionscala Procedure syntax is deprecated Convert procedure writeTo to method by adding Unit def writeTooutput comgoogleprotobufCodedOutputStream localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtobufPredictionscala Procedure syntax is deprecated Convert procedure registerAllExtensions to method by adding Unit def registerAllExtensionsregistry comgoogleprotobufExtensionRegistryLite localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtoObsscala Unused import import comgoogleprotobufExtensionRegistryLitegetEmptyRegistry emptyRegistry localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtoObsscala Unused import import comgoogleprotobufExtensionRegistryLitegetEmptyRegistry emptyRegistry localdevodincorecommonbuildscalabuffgeneratedsourcesaiosarodataProtobufPredictionscala Unused import import comgoogleprotobufExtensionRegistryLitegetEmptyRegistry emptyRegistry I wonder if we could ignore warnings in these generated files or if scalabuff could fix the generated code 