 Thanks for filing an issue If this is a question or feature request just delete everything here and write out the request providing as much context as you can What OS are you using uname a or Windows version Darwin iMaclocal Darwin Kernel Version Sat Nov PST rootxnu RELEASEX x Please specify your operating system version and architecture i amd etc If youre running Windows please also provide your IE version macOS x What programming language are you using CCGoRust Go gcc version clang version go version rustc version What did you expect to see and what you saw instead If I create my own delegate using CGo and run the webview from the UI loop using webviewLooptrue the view does show correctly However when I close the view it crashes the application with a SIGSERV fatal error unexpected signal during runtime execution signal SIGSEGV segmentation violation code x addr x pc x fff ccf Your issue may already be reported Please search on the issue tracker before creating a new one If your issue has not been reported yet please describe your problem with as much details as you can Thanks you Im using this library together with the Go oauth library The final part of the authorization process redirects to a localhostport where a local webserver is waiting for the authorization code However the webview doesnt seem to be able to show the redirected url it simply freezes even though my local webserver receives the response just fine I should mention that the same issue happens with the goastilectron library so perhaps its something that occurs with many webview implementations With lorca redirection works fine but I would prefer using this library due to its speed and window control OS Windows pro bit Language Go webview design proposal and roadmap TLDR modern C as a primary language no IE JSON RPC for native function bindings prebuilt DLLs for Windows plans for webview org The goal of the webview project is to create a common HTML UI abstraction layer for the most widely used platforms Platforms Supported platforms must include but not limited to Currently supported Ubuntu LTS Currently supported macOS Currently supported Windows Support for Android or iOS is still unclear but might be possible and is highly desirable The library can be seen as a collection of three types of API application app process and main UI loop native window createresizeset titleset color browser engine open URL execute JS call native code JS For the sake of simplicity and forwardcompatibility with mobile platforms only a single native window per app process is supported For those who have more complex use cases and the need of multiple windows there are two options spawn a process per window and let them talk to each other via IPC or create an external app loop on your own then create as many native windows as you need and pass them into webview constructor Passing a native window handle into webview constructor allows infinite customizations of the window without bloating an API However in this the developer is in charge of managing such native windows The library will only provide an embedded webview widget With this in mind the following window toolkits should be supported GTK Linux and maybe other platforms Cocoa macOS and Win Windows For each window toolkit there exists at least one corresponding browser engine For GTK and Cocoa its Webkit For Win its either MSHTML aka IE or EdgeHTML since Windows or EdgeChromium Windows but needs to be installed separately as of now I suggest to drop the support of MSHTML since its not only hard to maintain but also hard to use as it does not match the expectations of a modern web developer Also I suggest to be opinionated and provide a graceful fallback for the platforms with more than one supported browser engine For Windows that would mean using EdgeChromium if available or falling back to EdgeHTML on Windows On Windows an error message should be displayed If at some point EdgeChromium becomes the default in Windows we will drop the support of EdgeHTML For Android and iOS it will be native webkit engine but its not clear yet about the implementation details languages The core repo as before will support CC and Go For other languages bindings are always welcome Bindings will remain in separate repos Go is the only exception due to its weird nature and historical reasons The primary language is C C wrapper is provided as well and its the one used in Go bindings via cgo Webview remains a singleheader headeronly library For GTKCocoa it can be just included in your CC code and compiled in a fairly simple manner GCC Clang and clexe are suppoted Go is very opinionanted in its choice of compilers for cgo Thats why on Windows its safer to build webview as a DLL and link that DLL will be stored in the repo and always available This means webview apps no longer can be distributed as a single executable on Windows They must contain these additional DLLs Fortunately there are bundlers that can unpack executable and its dependencies on the fly so if you really need this singleexe feature you can get it just not out of the box ci build tests We must continiously ensure that webview can be built on all platforms and that its functionality is still there Github actions is used for CI pipeline replacing travis and appweyor No build system is provided For Go no build system is needed we expect the package to be gogettable For C and C we really need to compile and run a single file with tests One can automate this on his own for each platform if he wants to develop the webview core For CC users I expect them to copy webviewh into their source tree and use the existing build system Required compiler and linker flags are documented in the source code If at some point we will need a proper build system we will add it But for now Id prefer to now start this cmake vs make vs meson vs talk A build system for a single file application can be bootstrapped within a minute Most of the tests are written in C C and Go tests exist too but only to ensure the compatibility Functional tests are in C Also linters and code formatters should be run during the CI On Linux and macOS a single shell script performs all the builds runs the tests etc In addition once launch webviewtestcc and maincc as shell scripts ie sh webviewtestcc this will compile and run the binaries onthefly On Windows a batch script is used instead The script uses msbuildexe to compile a DLL and to buildrun the tests webviewexe It makes sense to provide a precompiled executable that can load arbitrary JSHTMLCSS load requested DLLsso and has some FFI to call native functions In this way the whole desktop app can be written in JS plus any lowlevel landugage of preference and bundled without any build steps or need to install any unrelated tools Something like love d does should work well Its still a proposal we need to estimate the complexity and the demand on this window API create window should optionally enable debug console window or receive a native window handle to reuse This allows caller to prepare window on its own use transparency or control the app loop externally and let webview only manage browser engines inside the existing native windows destroy window resize window set window title Obviously app main loop would include an infinite run API and an API to dispatchcb a callback to be executed on the UI thread Thats all for now In future we may think of adding colortransparency support and other customizations Support for dialogs tray menus is beyond the scope for now and most likely can be implemented as separate header files and separate Go subpackages after v is released webview API navigateurl should open an URL in the webview URL can be a regular httphttps URL or a data URI where HTML code is embedded in the URI itself execjs should execute JS asynchonously in the webview initjs should add JS to be executed every time webview opens a new page Additionally a native callback should be provided to be executed whenever JS calls windowexternalinvoke bidirectional communications JSON RPC is used to build proper asynchronous bidirectional communications on top of exec init and windowexternalinvoke Proper languagespecific bindings can be built on top of that politics Lets play democracy although its not a hot trend anymore I suggest to Finish v with the minimal viable set of features but proving that its posisble to have a common webview abstraction for desktop and maybe even mobile Then create an org Everyone who makes at least PRs is added as a maintainer to the org Every months I open an issue asking all maintainers to confirm their will to remain maintainers Its absolutely voluntairly and nobody is forced to continue if the interest in this project is lost All rdparty bindings that webview maintainers consider highquality are suggested to be moved into the org For the first year since v I keep the right to singleheadedly addremove maintainers acceptdecline PRs etc Democracy needs time to grow up To me this sounds like a good plan for the project to go on as long as the community finds it useful without depending on a single grumpy opinionated developer as it is now state of things All core APIs seems to be done for all platforms linux macOS Windows Please have a look I would be glad to hear any feedback about the branch webviewx and if someone feels confident to become a maintainer at this point please let me know Im trying to make an application that uses this library to provide personal user login on startup A successful login results in a cookie being set in the browser containing the access and refresh tokens It would be very useful if it was possible to retrieve the cookies set in the webview and use them in the rest of the Go program So far I have not been able to find a way to achieve this Can it be done with the library in its current state Thanks in advance A new BindQuery function does in fact the same as Bind but without dispatching an eval of the newly generated JavaScript This allows for an interesting and clean way of querying the injection of service controllers from the view itself via script src by providing an API endpoint within the applications webserver Its an enabler for a clean and comprehensive gowebview gui application template I made If navigation worked in webview this could be also used to inject only necessary controllers within the views context What OS are you using uname a or Windows version Darwin MyMBPlocal Darwin Kernel Version Sat Oct PDT rootxnu RELEASEX x What programming language are you using CCGoRust go version console go version go darwinamd And already installed brew install gtk brew install pkgconfig What did you expect to see and what you saw instead I want to create GNULinux amd binary of my simple Hello World program on macOS My maingo go package main import githubcomzsergewebview func main Webview options name Google App name Google App URL googlecom url sizes x px width height resizable true resizable true Lets open window app with options webviewOpenname url width height resizable console cat Makefile buildlinux rm rf buildLinux mkdir p buildLinux GOOSlinux GOARCHamd CGOENABLED go build o buildLinuxapplinuxamd And see this error after run make buildlinux console pkgconfig cflags gtk webkit gtk Package webkit gtk was not found in the pkgconfig search path Perhaps you should add the directory containing webkit gtk pc to the PKGCONFIGPATH environment variable No package webkit gtk found pkgconfig exit status make buildlinux Error What I miss Please help to understand Thanks for filing an issue If this is a question or feature request just delete everything here and write out the request providing as much context as you can What OS are you using uname a or Windows version windows family Please specify your operating system version and architecture i amd etc If youre running Windows please also provide your IE version What programming language are you using CCGoRust c language gcc version gcc version tdm clang version go version rustc version error page What did you expect to see and what you saw instead show web page Your issue may already be reported Please search on the issue tracker before creating a new one If your issue has not been reported yet please describe your problem with as much details as you can Thanks you Lets say I have the following project structure myproject exampleapp Contents MacOS example src maingo githubcom zserge webview I would have assumed this structure would work with the command go build o exampleappContentsMacOSexample but it complains that there are no go files in the current directory Obviously moving your maingo up a directory and running the same command creates the executable without any issues so far at least I would have liked to have all my source inside the src directory am I wrong in thinking this design decision of webview goes against how golang would like code to be structured Was this by design Is there a way to get this structure Thanks for filing an issue If this is a question or feature request just delete everything here and write out the request providing as much context as you can When I click the Btnof the loaded HTML the active event of Btn does not seem to work immediately but has a delay What OS are you using uname a or Windows version Windows Please specify your operating system version and architecture i amd etc If youre running Windows please also provide your IE version What programming language are you using CCGoRust Go gcc version clang version go version rustc version What did you expect to see and what you saw instead Immediate response remove delay Your issue may already be reported Please search on the issue tracker before creating a new one If your issue has not been reported yet please describe your problem with as much details as you can Thanks you ObjectiveC macOS to API Differences messageh Modified objcmsgSend From id objcmsgSendid self SEL op Todo void objcmsgSendvoid 