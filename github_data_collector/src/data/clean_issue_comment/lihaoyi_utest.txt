 Even if SN M is a milestone it is quite stable and now used as a target for several projects It would thus be great to consider to release a version of utest compatible with this Scala Native version Thanks Hi Folks Thanks for the great library This change is to avoid the deprecation warning for TestPath macros method copyArrayToImmutableIndexedSeq in class LowPriorityImplicits is deprecated since Implicit conversions from Array to immutableIndexedSeq are implemented by copying Use the more efficient noncopying ArraySequnsafeWrapArray or an explicit toIndexedSeq call TestPath accepts a Seq so it probably makes sense to switch anyway Please let me know if you want any further changes This is more a feature request We had some tests that hung forever on our CI and a timeout support seems to be missing in the lib This can of course he handled inside the test case but its rather boilerplaty Does utest have some internal scheduler that could be used for implementing this This issue is about providing simple functionalities for ignored and pending test cases I would like to contribute to uTest but Im not sure if my suggestion would qualify to the skimmed down nature of uTest Im copyingpasting the overall idea here before submitting a PR but only if I get approval from the project administrator Otherwise I will create a separate project So please let me know if my suggestion qualifies This is the overall idea You mark test cases the same way as you would do in ScalaTest scala This is an ignored test case ignored this is the test code assertfalse This test case is ignored when running by Jenkins ignoredifjenkins this test has requirements which Jenkins is not going to fulfill for whatever reason assertfalse This is the barebones of how to provide the feature scala trait uTestActions def ignoredaction Unit Unit ignored def ignoredifcondition Booleanaction Unit Unit ifcondition ignored else action def pendingaction Unit Unit try action pendingPENDING new TestPendingException catch case t Throwable pendingFAILED new TestFailedExceptiont private def ignored Unit val t new TestIgnoredException val it tgetStackTraceiterator val e to map itnextlast reportIGNORED e private def pendingstate String t Throwable Unit val pos tgetStackTracezipWithIndexfindp p getMethodName pendingget val it tgetStackTraceiterator val e to pos map itnextlast reportstate e private def reportstate String e StackTraceElement Unit val class egetClassName val method egetMethodName val file egetFileName val line egetLineNumber Systemerrprintlns state classmethod at fileline class TestPendingException extends Exception class TestIgnoredException extends Exception class TestFailedExceptioncause Throwable extends Exceptioncause We should be able to collapse them using an algorithm like making it much easier to debug them without constantly scrolling through thousands of lines of duplicate stack frames I want to use this framework in Maven Scala project but it seems Maven does not detect tests however it detects test class Id like to write a custom assertion that compares two strings for equality highlighting their differences For example writing val s My relatively long string with a difference in the middle verify verifysequalsMy relatively long string With a difference in the middle to produce long string w ith a differ long string W ith a differ is not hard with uTest out of the box However Id really like the w and W to be set in red using the fansi library I can do that now by passing a fansiformatted string to the exception AND setting exceptionMsgColor AttrsEmpty However that means that all the rest of the error messages are uncoloured I propose adding a marker trait FansiErrorMarker to the utest In formatException test for that trait and if present print the message unchanged Otherwise apply the usual exception message colour currentgetMessage match case null exCls case nonNull current match case e FansiErrorMarker ufansiStrjoinexCls nonNull case e ufansiStrjoinexCls exceptionMsgColornonNull Then users can throw new AssertionErrorfansiMsg with FansiErrorMarker with their fansiformatted message in a backwards compatible way Would the maintainers welcome a pull request with these changes Here are some example stack traces in utest output X exampleHelloSpectest ms javalangIndexOutOfBoundsException scalacollectionLinearSeqOptimizedapplyLinearSeqOptimizedscala scalacollectionLinearSeqOptimizedapplyLinearSeqOptimizedscala scalacollectionimmutableListapplyListscala exampleHelloSpecanonfuntests HelloSpecscala X exampleHelloSpectest ms javalangAssertionError assertion failed assertion failed scalaPredefassertPredefscala utestassertsAssertsArrowAsserteqeqgreaterAssertsscala exampleHelloSpecanonfuntests HelloSpecscala I think most of the time the part of the trace from utest itself utestassertsAssert and the scala library scala arent useful Would the project maintainers welcome a pull request that added a feature where the user could provide a function to filter the stack trace It would probably be modelled on exceptionStackFrameHighlighter with exceptionIncludeStackTraceElementsStackTraceElementBoolean true as the default