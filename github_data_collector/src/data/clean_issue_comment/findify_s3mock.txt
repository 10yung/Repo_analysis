I upgrade all dependencies to Scala and change the alpakka test for the new akkastreamalpakkas version I use the S Mock for SpringBoot integration tests and noticed a remarkable performance difference when running the build on the local Windows machine compared to the build on a Linux machine eg Jenkins or a local VM The Windows build takes about minutes whereas the Linux build takes about minutes The test Blobstore uses the inmemory backend and Maven as the build tool It seems like starting the S Mock Blobstore is not the problem but working with the objects Please see the following logs and have a look at the timestamps and the operationsmethods Windows PutObject INFO ltdispatcher iofindifys mockroutePutObject put object localbuckettesttxt unsigned INFO tdispatcher iofindifys mockroutePutObject put object localbucketoutertesttxt unsigned INFO tdispatcher iofindifys mockroutePutObject put object localbucketouterinnertestjson unsigned DeleteObjects INFO ltdispatcher iofindifys mockrouteDeleteObjects deleted object localbuckettesttxt INFO ltdispatcher iofindifys mockrouteDeleteObjects deleted object localbucketoutertesttxt INFO ltdispatcher iofindifys mockrouteDeleteObjects deleted object localbucketouterinnertestjson Linux PutObject INFO tdispatcher iofindifys mockroutePutObject put object localbucketouterinnertestjson unsigned INFO tdispatcher iofindifys mockroutePutObject put object localbucketoutertesttxt unsigned INFO tdispatcher iofindifys mockroutePutObject put object localbuckettesttxt unsigned DeleteObjects INFO tdispatcher iofindifys mockrouteDeleteObjects deleted object localbuckettesttxt INFO tdispatcher iofindifys mockrouteDeleteObjects deleted object localbucketoutertesttxt INFO tdispatcher iofindifys mockrouteDeleteObjects deleted object localbucketouterinnertestjson The PutObject somehow only takes some milliseconds on Windows but about seconds on Linux Wherease DeleteObjects only takes some milliseconds on Linux as well Is there any idea how to speed things up on Linux Both the InMemoryProvider and FileProvider use IntMaxValue as their default maxkeys value scala val count maxkeysgetOrElseIntMaxValue This should be set to as a default so it is similar to the real S API otherwise you can run into situations when testing where the Mock API will return more items than a real API call would See documentation of AWS limit here Would like to see versioning supported Thank you My Requirement is bucket contains parentBucketfolder folder folder abctxt While running mock I get below error javalangIllegalArgumentException Bucket name should not contain at comamazonawsservicess internalBucketNameUtilsexceptionBucketNameUtilsjava at comamazonawsservicess internalBucketNameUtilsisValidV BucketNameBucketNameUtilsjava at comamazonawsservicess internalBucketNameUtilsvalidateBucketNameBucketNameUtilsjava at comamazonawsservicess AmazonS ClientcreateBucketAmazonS Clientjava at comamazonawsservicess AmazonS ClientcreateBucketAmazonS Clientjava Can you please fix it asap The library itself works with Scala But to migrate the tests i need to upgrade alpakka to which have a different api than alpakka When try to use S multipartCopy sourceBucket fileName sourceBucket destinationFileName got this error There was an internal server error akkastreamalpakkas S Exception There was an internal server error Code RequestID HostID at akkastreamalpakkas implS StreamanonfunprocessUploadCopyPartRequests S Streamscala at scalautilSuccessanonfunmap Tryscala at scalautilSuccessmapTryscala at scalaconcurrentFutureanonfunmap Futurescala at akkahttpscaladslutilFastFutureFulfilledFuturetransformFastFuturescala at scalaconcurrentFuturemapFuturescala at scalaconcurrentFuturemapFuturescala at akkahttpscaladslutilFastFutureFulfilledFuturemapFastFuturescala at akkastreamalpakkas implS StreamanonfunprocessUploadCopyPartRequests S Streamscala at akkastreamimplfusingMapanon onPushOpsscala at akkastreamimplfusingGraphInterpreterprocessPushGraphInterpreterscala at akkastreamimplfusingGraphInterpreterprocessEventGraphInterpreterscala at akkastreamimplfusingGraphInterpreterexecuteGraphInterpreterscala at akkastreamimplfusingGraphInterpreterShellrunBatchActorGraphInterpreterscala at akkastreamimplfusingGraphInterpreterShellAsyncInputexecuteActorGraphInterpreterscala at akkastreamimplfusingGraphInterpreterShellprocessEventActorGraphInterpreterscala at akkastreamimplfusingActorGraphInterpreterakkastreamimplfusingActorGraphInterpreterprocessEventActorGraphInterpreterscala at akkastreamimplfusingActorGraphInterpreteranonfunreceive applyOrElseActorGraphInterpreterscala at akkaactorActoraroundReceiveActorscala at akkaactorActoraroundReceiveActorscala at akkastreamimplfusingActorGraphInterpreteraroundReceiveActorGraphInterpreterscala at akkaactorActorCellreceiveMessageActorCellscala at akkaactorActorCellinvokeActorCellscala at akkadispatchMailboxprocessMailboxMailboxscala at akkadispatchMailboxrunMailboxscala at akkadispatchMailboxexecMailboxscala at akkadispatchforkjoinForkJoinTaskdoExecForkJoinTaskjava at akkadispatchforkjoinForkJoinPoolWorkQueuerunTaskForkJoinPooljava at akkadispatchforkjoinForkJoinPoolrunWorkerForkJoinPooljava at akkadispatchforkjoinForkJoinWorkerThreadrunForkJoinWorkerThreadjava Are there plans to upgrade to Scala When trying to perform any action using the S AsyncClient I get the following error Works fine with real S server also works fine when using S Client and s mock WARN s mockakkaactordefaultdispatcher akkaactorActorSystemImpls mock Illegal request responding with status Bad Request Request is missing required Host header should ingest into solr from s based paths FAILED second milliseconds javautilconcurrentCompletionException softwareamazonawssdkservicess modelS Exception null Service S Status Code Request ID null at softwareamazonawssdkutilsCompletableFutureUtilserrorAsCompletionExceptionCompletableFutureUtilsjava at softwareamazonawssdkcoreinternalhttppipelinestagesAsyncExecutionFailureExceptionReportingStagelambdaexecute AsyncExecutionFailureExceptionReportingStagejava at javautilconcurrentCompletableFutureuniHandleCompletableFuturejava at javautilconcurrentCompletableFutureUniHandletryFireCompletableFuturejava at javautilconcurrentCompletableFuturepostCompleteCompletableFuturejava at javautilconcurrentCompletableFuturecompleteExceptionallyCompletableFuturejava at softwareamazonawssdkutilsCompletableFutureUtilslambdaforwardExceptionTo CompletableFutureUtilsjava at javautilconcurrentCompletableFutureuniWhenCompleteCompletableFuturejava at javautilconcurrentCompletableFutureUniWhenCompletetryFireCompletableFuturejava at javautilconcurrentCompletableFuturepostCompleteCompletableFuturejava Cause softwareamazonawssdkservicess modelS Exception null Service S Status Code Request ID null at softwareamazonawssdkservicess modelS ExceptionBuilderImplbuildS Exceptionjava at softwareamazonawssdkservicess modelS ExceptionBuilderImplbuildS Exceptionjava at softwareamazonawssdkprotocolsqueryunmarshallAwsXmlErrorProtocolUnmarshallerhandleAwsXmlErrorProtocolUnmarshallerjava at softwareamazonawssdkprotocolsqueryunmarshallAwsXmlErrorProtocolUnmarshallerhandleAwsXmlErrorProtocolUnmarshallerjava at softwareamazonawssdkcoreinternalhttpasyncAsyncResponseHandlerlambdaprepare AsyncResponseHandlerjava at javautilconcurrentCompletableFutureuniComposeCompletableFuturejava at javautilconcurrentCompletableFutureUniComposetryFireCompletableFuturejava at javautilconcurrentCompletableFuturepostCompleteCompletableFuturejava at javautilconcurrentCompletableFuturecompleteCompletableFuturejava at softwareamazonawssdkcoreinternalhttpasyncAsyncResponseHandlerBaosSubscriberonCompleteAsyncResponseHandlerjava 