 Provide a general summary of your changes in the Title above Description You can now do this File ps File ps Include GetChildItem Include Related Issue This project only accepts pull requests related to open issues If suggesting a new feature or change please discuss it in an issue first If fixing a bug there should be an issue describing it with steps to reproduce Please link to the issue here Motivation and Context Why is this change required What problem does it solve Allows users to write slightly more concise code rather than writing for loops How Has This Been Tested Please describe in detail how you tested your changes Include details of your testing environment and the tests you ran to see how your change affects other areas of the code etc New Pester tests have been added to verify that it can accept pipeline input both in the form of strings and FileInfo objects I also manually tested that it was backwards compatible and could still work with the fileNamePathToInclude parameter Screenshots if appropriate Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue x New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help x My code follows the code style of this project x My change requires a change to the documentation x I have updated the documentation accordingly x I have read the CONTRIBUTING document x I have added tests to cover my changes x All new and existing tests passed Provide a general summary of the issue in the Title above Expected Behavior It would be nice to be able to do this GetChildItem somePath Include Current Behavior Currently you would have to use a more verbose syntax GetChildItem somePath ForEachObject Include Possible Solution Should just be a case of adding ValueFromPipelinetrue to the parameter and putting the functions content into a process block Im happy to implement this just creating an issue to associate it with This could probably be applied to other functions too Ive not had a thorough look yet If I find them I can either add them to this issue or log separate issues Steps to Reproduce for bugs NA Context This is just a minor improvement that makes users code more concise Your Environment NA The dot sourcing operator behaves differently between versions and The properties I define in external helper scripts dont seem to be added to the scope of the psakefileps script anymore but they used to Better to explain with an example preps ps Properties a postps ps Properties c a b psakefileps ps preps Properties b a postps Task default depends Main Task Main WriteHost aa bb cc When run using this script gives a b c When run using this script gives a b c If I use the Include function instead of the dot then the properties added are available to the psakefileps script but not to the postps one If I recall correctly it outputs a b c I only tried it once Is there a way to revert to the previous behavior in Unfortunately all of my build scripts are structured that way Build Time Report currently flattens treelike structure of tasks That obscures structure of the build for team members not that involved in the matter Moreover its not easy to tell whats the total time required for task with all its subtasks Expected Behavior For A B A C B D the output should be configurable to look like Build Time Report Name Duration excl Duration incl A B D C Current Behavior Build Time Report Name Duration A B D C Possible Solution I can try to make required changes in WriteTaskTimeSummary I just wonder what you think about the idea Description This removes the ability to specify multiple tasks which is a nonbackwards compatible change This parses the values passed in and splats it as arguments to the tasks action Related Issue Motivation and Context Existing properties and parameters makes it difficult to cleanly specify task arguments Having the ability to define parameters at the task level allows for cleaner scripts How Has This Been Tested Ran all tests included in the psake project Ran tests from Powershell command line Powershell scripts and batch command line to ensure parameterization works as intended Some more info available here Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality x Breaking change fix or feature that would cause existing functionality to change Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help x My code follows the code style of this project x My change requires a change to the documentation I have updated the documentation accordingly x I have read the CONTRIBUTING document I have added tests to cover my changes x All new and existing tests passed Regarding the unchecked items in the checklist I left out tweaking documentation until these changes have been discussed and approved as something that will be added Context I want to use a parameter passed via command line to initialize some properties which are used in multiple tasks instead of initializing them in each task Invokepsake scriptps parameters baseDir somepathhere And I want to validate that parameter first Example Properties reusedPath JoinPath baseDir smth Task Default Depends Validate TaskDB TaskServer Task Validate Assert string IsNullOrEmptybaseDir baseDir was null or empty Assert TestPath baseDir baseDir does not exist Task TaskDB x JoinPath reusedPath smth Task TaskServer x JoinPath reusedPath smth Problem Properties are initialized before any task So my validation task doesnt do any work at all For instance if I dont pass baseDir as a parameter or leave it empty I will not reach Validate task It will fail on a step of Properties initialization reusedPath JoinPath baseDir smth with really not informative error Exception Cannot bind argument to parameter Path because it is null Question Is there way to validate parameters before Properties initialization Or is there other way how to achieve the same goal Environment Module version used Operating System and PowerShell version Windows PowerShel Just wanted to make sure youd seen this given conversations about including a set of tasks Help seems to work but Im not sure how This commit updates the spec tests for the net version to look at the major version number of the msbuild tools instead of trying to inspect the output of msbuild v I also am not convinced the old tests were working correctly as they would pass even without the correct version of msbuild on my machine 