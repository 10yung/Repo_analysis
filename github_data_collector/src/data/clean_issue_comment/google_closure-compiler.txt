The following code produces no warning despite the type mismatch on the second line var c abc var number n c no warning It looks like getting a character from a string in this way produces a value of unknown type I have confirmed this by turning reportUnknownTypes on clouserlibrary from closerlibrary npm v platform macOS I am using scratch project and after compilation of scratchblocks when I run npm start this error is being thrown blocklycompressedverticaljs Uncaught TypeError googisString is not a function at ObjectscratchblocksnodemodulesimportsloaderindexjsthiswindowscratchblocksnodemodulesexportsloaderindexjsBlockly goognodemodulesscratchblocksblocklycompressedverticaljsBlocklyExtensionsregister blocklycompressedverticaljs at blocklycompressedverticaljs at ObjectscratchblocksnodemodulesimportsloaderindexjsthiswindowscratchblocksnodemodulesexportsloaderindexjsBlockly goognodemodulesscratchblocksblocklycompressedverticaljs blocklycompressedverticaljs at webpackrequire bootstrap at Objectnodemodulesscratchblocksshimblocklycompressedverticaljs blocklycompressedverticaljs at webpackrequire bootstrap at Objectnodemodulesscratchblocksshimblocklycompressedverticalgoogjs blocklycompressedverticalgoogjs at webpackrequire bootstrap at ObjectscratchblocksnodemodulesimportsloaderindexjsgoogshimblocklycompressedverticalgoogBlocklyshimblocklycompressedverticalblockscompressedscratchblocksnodemodulesexportsloaderindexjsBlocklynodemodulesscratchblocksblockscompressedverticaljs blockscompressedverticaljs at webpackrequire bootstrap I am trying to run mvn DskipTests pl externspomxmlpommainxmlpommainshadedxml and mvn errors out with the following ERROR Failed to execute goal orgapachemavenpluginsmavencompilerplugin compile defaultcompile on project closurecompiler Compilation failure Compilation failure ERROR homecentoslibphonenumbertoolsclosurecompilersrccomgooglejavascriptjscompdepsJsFileFullParserjava deprecation BasicErrorManager in comgooglejavascriptjscomp has been deprecated I am running the latest mvn mvn version Apache Maven cecedd d abb b b b a ba f Maven home optmaven Java version vendor Oracle Corporation runtime usrlibjvmjava openjdk b el x jre Default locale enCA platform encoding UTF OS name linux version el x arch amd family unix I am trying to run this on a centos EC instance on AWS The dependency for protobuf comgoogleprotobufs artifact protobufjava has a reported vulnerability as described in Updating to a version where this has been patched onwards apparently current dependency is for would be highly advisable The API is documented here How can you annotate a function that fails returns the bottom type always throws an exception For example js function panic e consoleerrorpanic e throw new Errore While its return type is naively void its really Code directly following an invocation of panice can be assumed to never run And code following a branch can safely assume that any conditions that wouldve led to panice were false Knowing this a compiler can often make extreme optimizations If it doesnt exist could you add a failure annotation Destructured properties are renamed for ECMA lang output js tjs const contenttype ct contenttype ct window consolelogct ct window contenttype sh java jar compilerjar compilationlevel ADVANCED languageout ES js tjs js var awindowconsolelogacontenttypea contenttype windowcontenttype sh java jar compilerjar compilationlevel ADVANCED languageout ECMASCRIPT js tjs js use strictconsolelogwindowbwindowawindowcontenttype I always assumed that using quoted props on destructuring behaves the same way as accessing a quoted property and Im pretty such its how its suppose to behave see ES but the properties in the output are renamed updated see below TypeScript allows to set a type on a function CC should allow that too This will allow to define a function as a type in one file and then use it in implementation This way I can create interfaces for functions import them in implementations and have type checking done by the compiler Otherwise I have manually add the parameters to the function which I dont want to do because its wasting time since I already have functions types in a separate place TypeScript in vs code does it properly as you can see on the screenshot The shaded JAR of closurecompiler includes all the classes in comgooglegson without shading renaming This can lead to confusing errors far downstream for example I came upon this issue when sbtdependencycheck raised a NoMethodError which turned out to be caused by my project using scalajs I am definitely not the first one to experience this Is there a reason why comgooglegson is bundled rather than shaded What is the preferred way to deal with such problems downstream I want an interface to extend a constructor Its always been working fine like so js The application interface extends eventsEventEmitter interface goaApplication This did behave indeed like an interface I could annotate JS code like implements goaApplication I then added the assignment function js The application interface extends eventsEventEmitter interface goaApplication function This started giving me the warning typesexternsapplicationjs WARNING JSCCONFLICTINGEXTENDEDTYPE goaApplication cannot extend this type interfaces can only extend interfaces I think you should allow to extend constructors because the two are closely related and tsicle will generate constructors and not interfaces The difference is pretty subtle anyway theres not interface concept in JS so I intuitively know what the difference is but its hard to explain it can be only explained in terms what you can and cannot do with both like write implements for interfaces this was closed So this issue is that theres no interfaces can only extend interfaces check on interfaces without function in externs but please dont add it because say NodeJS API has EventEmitter which is a constructor maybe I should actually rename it to interface like here I struggle to understand what the difference is its an implementation and and interface at the same time so why shouldt I be able to create an interface which extends it in any way you get the idea 