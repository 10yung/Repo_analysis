I think helper methods can be very powerful for Strong Migrations shoutout to fatkodima for lots of work on this and GitLab for popularizing the concept but its a fundamental change from the approach Strong Migrations has taken in the past so I wanted to discuss it here and get feedback from the community Tradeoffs Currently Strong Migrations is focused on keeping the migration experience consistent with vanilla Rails and educating users on whats not safe The advantages are Users dont need to learn new methods Users get to learn a bit about databases Helper methods change this by introducing new methods that make it less obvious about whats going on behindthescenes The advantages are Simpler code the new methods dont require users to jump through hoops to make migrations safe Less to think about many users may not care about whats going on behindthescenes Choice The good news is we can give teams a choice ruby StrongMigrationsenablehelpers This will Add the helper methods to migrations Change the messages users see about how to make migrations safe If one is overwhelmingly preferred we can consider removing the other in the future The drawbacks of a choice are Increased maintenance Increased complexity possible confusion with docs issues etc Implementation Two options that come to mind are Prefix or suffix methods ruby addforeignkeysafely safe method addforeignkey unsafe method with safety checks Override existing methods eliminates need for safetyassured ruby addforeignkey safe method addforeignkey original method no safety checks This doesnt require users to learn new methods but its more invasive as it changes the behavior of existing Rails methods Would love to hear everyones thoughts Related ruby StrongMigrationsenablecheckreversiblemigrations Real changes of this pr This pr depends on and consists of changes from previous prs so should be merged after them x Tests This depends on and partially consists of changes so that should be merged first Ideas helper methods for more complex operations x addforeignkeysafely x addnullconstraintsafely and removenullconstraintsafely backfillcolumnsafely addcolumnsafely add column change default backfill column for PG or no default just call addcolumn method changecolumnnullsafely for Postgres adds null constraint changes column attribute which can then skip table scan then drops null constraint renamecolumnsafely changecolumnsafely renametablesafely probably not needed addindexsafely addreferencesafely simple enough already others catch unsafe migrations during rollback for instance removeindex nonconcurrently runs addindex nonconcurrently include null constraints in schemarb dumpnullconstraints branch x disable specific checks StrongMigrationsdisablecheckaddindex optional checks StrongMigrationsenablecheckremoveindex x drop index concurrently enforce timestamptz reversible migrations add functionality similar to other gems generate index rails g index x set default lock timeout better if set on DB user instead see for discussion Decided against dont require safetyassured for removecolumn if ignoredcolumns detected ignoredcolumns will likely be removed after it runs in production so this would cause errors for other devs Im still on the fence about many of them If anyone would like to discuss any of the ideas above please create a new issue