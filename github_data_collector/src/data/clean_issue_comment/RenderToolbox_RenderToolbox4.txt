It is looking for usrlocalliblibIlmImf dylib but I have a different file usrlocalliblibIlmImf dylib I think I need to run some mexfile to update the binaries in RenderToolbox binary but I am not sure which one Error for recipe luminance reflectance BigBallLibrary Invalid MEXfile UsersjulianDocumentsMATLABtoolboxesRenderToolbox binarybuildReadMultichannelEXRmexmaci dlopenUsersjulianDocumentsMATLABtoolboxesRenderToolbox binarybuildReadMultichannelEXRmexmaci Library not loaded usrlocalliblibIlmImf dylib Referenced from UsersjulianDocumentsMATLABtoolboxesRenderToolbox binarybuildReadMultichannelEXRmexmaci Reason image not foundSaving error info to VolumesGDRIVE USBVirtualWorldColorConstancyStimuliCondition covScaleFactor NoReflectionOriginalsErrorsluminance reflectance BigBallLibrarymat Hi there I am trying to revive some RenderToolbox code and want to first make it run on RenderToolbox and eventually migrate it I installed Version but get an error in trying to render an example scene in this case rtbMakeLightFieldSpherem rtbMakeSimpleSphere MakeSceneFiles started at Jul Using strategy RtbAssimpStrategy strategy RtbAssimpStrategy with properties hints struct importArgs ignoreRootTransform flipUVs mappingsArgs struct remodelOnceBeforeAllFunction remodelPerConditionBeforeFunction remodelPerConditionAfterFunction converter RtbAssimpMitsubaConverter renderer RtbMitsubaRenderer MakeSceneFiles started with isParallel at Jul nConditions conditionValues empty cell array MakeSceneFiles finished at Jul s elapsed Using strategy RtbAssimpStrategy BatchRender started with isParallel at Jul Starting scene of at Jul s elapsed docker run ti rm user workdirUsersgizemDocumentsMATLABrendertoolboxrtbMakeSimpleSphere volumeUsersgizemDocumentsMATLABrendertoolboxrtbMakeSimpleSphereUsersgizemDocumentsMATLABrendertoolboxrtbMakeSimpleSphere volumeUsersgizemDocumentsMATLABtoolboxesRenderToolbox UsersgizemDocumentsMATLABtoolboxesRenderToolbox rendertoolboxmitsubaspectral mitsuba o UsersgizemDocumentsMATLABrendertoolboxrtbMakeSimpleSphererenderingsMitsubascene exr UsersgizemDocumentsMATLABrendertoolboxrtbMakeSimpleSpherescenesMitsubascene xml Invalid MEXfile UsersgizemDocumentsMATLABtoolboxesRenderToolbox binarybuildReadMultichannelEXRmexmaci dlopenUsersgizemDocumentsMATLABtoolboxesRenderToolbox binarybuildReadMultichannelEXRmexmaci Library not loaded usrlocalliblibIlmImf dylib Referenced from UsersgizemDocumentsMATLABtoolboxesRenderToolbox binarybuildReadMultichannelEXRmexmaci Reason image not found Error in rtbReadMultichannelEXR line channelInfo imageData ReadMultichannelEXRexrFile Error in rtbReadMultispectralEXR line sliceInfo imageData rtbReadMultichannelEXRexrFile Error in RtbMitsubaRendererrender line image sampling rtbReadMultispectralEXRoutFile Error in rtbBatchRenderrenderScene line strategyrendererrenderscene Error in rtbBatchRender line outFilesii renderScenestrategy nativeScenesii versionInfo hints Error in rtbMakeSimpleSphere line radianceDataFiles rtbBatchRendernativeSceneFiles My system is Mac OS MATLABR a I tried to downgrade openexr thinking it is an unsupported version issue but couldnt get that to run either I even tried converting back to RenderToolbox with no success Also I was able to run rtbMakeReadMultiChannelEXRm and generate the output sphere images so at this point I am not even sure if the error is due to OpenEXR or something else Thanks for the help Gizem I think there may be a mistake in the wiki documentation for Conditions Files It says that sceneFile is the keyword variable that specifies a different scene than the parentSceneFile stated in the exec script The keyword variable for Conditions Files should be parentScene eg imageName parentScene nightCafe myCafeScenedae nightPark myParkScenedae Best Joshua Weve occasionally run into this issue where sometimes the rendered images are flipped horizontally Ive tracked down the issue to the following If you are not using the remodeler the following line scene mappings strategyapplyBasicMappingsscene mappings names conditionValues cc in rtbMakeSceneFilesm applies a mapping transformation which flips the xaxis on the camera This transformation is first generated in loadDefaultMappings in RtbAssimpPBRTConverterm This flip produces images that are correctly oriented with respect to the original Blender scene However if we move the camera in your mexximp Remodeller the camera is reset again in the following line scene mappings strategyremodelPerConditionAfterscene mappings names conditionValues cc And the mapping transformation seen in the default mappings is lost The xaxis is flipped incorrectly in these images with respect to the original Blender scene This needs to be fixed and investigating more carefully First off we need to determine why the flip is necessary in the first place I am seeing the usage of an informal camera or cameras or placedCameras a lot these days There is no guarantee that these different usages are compatible same slots sizes units I should look through the code for examples and consider how we might formalize possibly coordinating with the camera object in ISETCISET In a number of places and rtbCamerasPlace is one example there are factors that scale by to deal with meters and millimeters There are rarely comments about this near the code We need to catch these locations and deal with units more explicitly This might all be relatively new with code from HB and me If we dont deal with the units throughout say distance is sometimes meters and sometimes millimeters we will have long term problems I spent a good amount of time the last day or so unsuccessfully trying to install RTB on a Windows machine and wanted to share and log my experience Installing Docker went smoothly The only unique thing you may need to do is enable virtualization on the BIOS settings for your machine On an ASUS motherboard it was under Advanced Settings CPU Configuration After cloning all the repositories the next step was to install Assimp and compile mexximp This turned out to be the unsolvable roadblock for me To compile mexximp we have to compile Assimp on Windows and Install a C compiler for MATLAB and link the compiled library when running mex I was able to complete step by cloning the repo running cmake and then building it in Visual Studio Step was very straightforward as long as you follow the MATLAB instructions However step seemed to be the major issue No matter how I tried to link the library and include files it could not seem to link properly to Assimp and would complain about not being able to find any of the Assimp classes I eventually gave up on this and I now run RTB on OSX and then send the docker run commands over to the Windows machine to run which I suppose is similar to what we do with cloud computing I think if we want to get this to work on Windows we may need to dockerize MexximpAssimp if that is even possible At Stanford we only want to test PBRT I should add a flag that tests only PBRT or Mitsuba since we dont even install the Mitsuba version Currently Matlab interfaces with the OpenEXR library via the inmemory mex function interface This is an efficient interface However it has become difficult to build maintain and distribute mex functions that use shared libraries like OpenEXR Two main reasons are On OS X Matlabs mex build configuration often goes out of date with respect to the OS XXCode build tools On Linux Matlab distributes and loads its own version of system libraries like libstdc which may be incompatible with the library versions that are required for shared libraries like OpenEXR see To alleviate these problems we should decouple ReadMultichannelEXR from the Matlab mex function interface We should make ReadMultichannelEXR into a standalone utility for reading and writing OpenEXR files to and from a simple structured representation like ubjson We could continue to use ReadMultichannelEXR from Matlab by reading and writing ubjson files or streams for example with jsonlab We could choose the format of the ubjson representation to match the current ReadMultichannelEXR data format We could include an mfunction wrapper with the same behaviors as the current ReadMultichannelEXR mexfunction and minimize the impact on existing ReadMultichannelEXR code As a standalone tool the ubjson version of ReadMultichannelEXR would have several advantages easier to build available to use for Matlabbased projects available to use for nonMatlabbased projects able to be distributed as a Docker image In RenderToolbox its possible to make scene adjustments using remodeler hook functions in addition to or instead of a mappings file The Flythrough example is the best example of this so far We should add more documentation for how to set up remodeler hooks and how to use them Some specific examples that would be good How to remove an existing point light How to assign spectra to surfaces The new documentation should explain What hooks are available and how to assign functions to the hooks The function signature required for hook functions Description of remodelers that work on the mexximp scene struct Description of remodelers that work on the mMitsuba or mPbrt native scene representation Examples of useful operations like the two above 