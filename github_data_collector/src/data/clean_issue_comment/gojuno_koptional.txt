weefbellington from our team at Lyft has been working on serializingdeserializing Koptional values in JSON and weve stuck for some time discussing following use case OptionalOptionalT and other levels of direct nesting This use case is weird on its own however Koptional does nothing to prevent it neither does Arrow btw so its a valid state for Koptional x Right now weve decided to serializedeserialize without enhancing JSON with additional metadata which results in following convention for JSON kotlin SomeNone None However that creates difference between how we represent SomeNone inmemory vs JSON With all that in mind Id like to raise a discussion about this and propose following changeset for Koptional x Hide Some constructor Expose a function named Some OptionalT that would return None for SomeNone cc ming dmitrynovikov nostra AlecStrong Egorand 