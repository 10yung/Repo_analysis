What Ive done is just clone and compile using WSL since I dont have a linux environment at present however the output tga file seems to be corrupted like this output Is there anything to do with WSL like compatibility Frequent bug while sorting by ycoordinate the vertices are sorted but the data coming with the vertices is not Gouraud shading forgot to sort intensities In my case I was calculating a barycentric coordinate of one vertex and assigning it to a different vertex by mistake The artifacts looked exactly the same as you presented if it is the same problem then the description could be more informative This tutorial is very good but there are often quite difficult sentences that introduce new terminology without any definition Perhaps there should be a note that some amount of geometry or other kind of background knowledge is a prerequisite I keep getting stuck trying to figure out the point of an example because the overall concept and the terminology used is not explained clearly Thank you for your work It is not clear which direction constitutes your convention or choice of axes Can you please add lines that show which direction is which axis It is not clear which dimension you are eliminating to end up with the Ybuffer Hi I used your triangle rasterisation code and found a problem when drawing two adjacent triangles Sometimes there are missing pixels between them I found that the problem is how you calculate int segmentheight t y t y the leads to the error I assume you made it to avoid division by zero but its wrong Here is how a did it auto addTriangle Vec i t Vec i t Vec i t if t y t y stdswap t t if t y t y stdswap t t if t y t y stdswap t t int totalheight t y t y if t y t y int segmentheight t y t y for int y t y y t y y int A t x t x t x y t y totalheight int B t x t x t x y t y segmentheight drawLine y A B draws a horisontal line if t y t y int segmentheight t y t y for int y t y y t y y int A t x t x t x y t y totalheight int B t x t x t x y t y segmentheight drawLine y A B Here is a quote from lesson We should note that each division has the same divisor Let s take it out of the loop I cant understand how noting that each division has the same divisor helps us for making next improvements So I am following your course here and I struggled a bit with the shading lecture This might be a compiler issue meaning the compiler stops me from doing things that I do not want My geometryh basically looks the same as here and multiplying a vector with a scalar value looks like this cpp template typename T struct Vector D inline Vector D operatorfloat scalar const return Vector Dxscalar yscalar However I found that since I am following the GSL core guidelines for c and using initializer list constructors using the instead of the compiler will either complain or result in faulty code This might be due to clang in this case but I suspect MSVC and g will result in the same compiler error error type float cannot be narrowed to int in initializer list Wc narrowing So changing that to cpp inline Vector D operatorfloat scalar const return Vector DstaticcastTxscalar staticcastTyscalar Fixes the issue These are not issues related to the course in itself but perhaps might be worth noting If its irrelevant just close and remove this issue Thanks again for awesome content Hey there I was wondering if you have any plans to add antialiasing to this course Would be pretty cool to have and its not much more complex than a lot of other topics treated in here Thanks 