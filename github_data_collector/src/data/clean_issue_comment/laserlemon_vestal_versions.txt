I think it would be great to retrieve list changes for a specific attribute along with their version date Hi guys updatedby option when updating a model is not working I use devise for authentication it saves null for userid usertype and username Hi I am using vestalversions to store and show changes to model data on our application My question is when I display changes to a foreign key it is the ID that is shown Can I customise config the model to store an associated field instead of ID in the modifications field Thanks in advance Leighton any idea who to send in the currentuser attribute value while updating a model The gem hasnt been upgraded to support Rails Weve tried the fork but it fails when attempts are made to destroy objects see Were considering moving from Vestal Versions to PaperTrail However if Vestal Versions was to be updated to support Rails we may reconsider laserlemon midas dreamr what are your intentions for Vestal Versions Do you intend to continue maintaining it Im attempting to use vestalversions with a Rails app and Ruby But after adding the gem running the migration and adding the versioned method to the models I want to be versioned I get the following error Is there a rails ruby compatible fork of vestalversions out there Extracted source around line def includedbase nil block if basenil raise MultipleIncludedBlocks if instancevariabledefinedincludedblock includedblock block else vendorbundleruby gemsactivesupport libactivesupportconcernrb in included vendorbundleruby bundlergemsvestalversionsbeccc ec libvestalversionsversiontaggingrb in moduleVersionMethods vendorbundleruby bundlergemsvestalversionsbeccc ec libvestalversionsversiontaggingrb in moduleVestalVersions Hello Was playing around with your gem btw thanks amazing work was wondering why you rely on afterupdatecreate callbacks of version creation instead of relying on the standard rails callback progation ie instanciate the version in a beforesave cb of the versioned instance and let rails save it with its parent in the same commit Do you guys see some drawbacks with the described behavior which made you code the creation feature the way you did thx Fixed missing rb extension here Hello Im implementing your gem in one project thx for wthe good work btw and was wondering why you rely on aftercreate update callback when creating a version ruby creationrb line aftercreate createinitialversion if createinitialversion afterupdate createversion if createversion afterupdate updateversion if updateversion There is a rails standard feature for callback propagation between associated models wouldnt it be more interesting to do something like that ruby creationrb line beforecreate instanciateinitialversion if createinitialversion beforeupdate instanciateversion if createversion beforeupdate instanciateversion if updateversion Im perhaps missing something here so let me know if you see any drawback to such evolution but it would reduce the number of db commit and ensure that the aftercommit include the last version instance 