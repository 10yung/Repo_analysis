I am able to build arm v and v without trouble but am unable to build for the emulator architectures with my setup I have VS Version Preview I am using the latest NDK that comes with their Microsoft Android SDK Repo Any advice would be appreciated I was previously able to build all architectures with a slightly different configuration with NDK b but want the latest if at all possible When building with NDK warning for library buildbuildarm v aboostbinv libsatomicbuildclangdarwinarm v areleaselinkstatictargetosandroidthreadingmultivisibilityhiddenlibboostatomicclangdarwinmta a the table of contents is empty no object file members in the library define global symbols cd BoostforAndroid buildandroidsh verbose boost homewytbinandroidndkr prefixhomewytbinandroidndkr boostinstall all compile success Applicationmk APPABI armeabiv a arm v a x x APPPLATFORM android APPSTL cshared Androidmk LOCALPATH call mydir include CLEARVARS LOCALMODULE territory LOCALLDLIBS landroid llog LOCALCXXFLAGS stdc Werror LOCALCPPFLAGS fexceptions LOCALCPPFLAGS frtti LOCALCXXFLAGS ILOCALPATH LOCALCXXFLAGS ILOCALPATHterritoryinclude LOCALCXXFLAGS ILOCALPATHterritorydll LOCALCXXFLAGS ILOCALPATHterritorysrc LOCALCXXFLAGS ILOCALPATHterritorysrcengine LOCALCXXFLAGS ILOCALPATHterritorysrcgoboard LOCALCXXFLAGS ILOCALPATHterritorysrcgtp LOCALCXXFLAGS ILOCALPATHterritorysrclegacy LOCALCXXFLAGS ILOCALPATHterritorysrcutils NDKBOOSTPATHhomewytbinandroidndkr boostinstall ifeq TARGETARCH x nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALCXXFLAGS INDKBOOSTPATHx includeboost nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALLDLIBS LNDKBOOSTPATHx lib else ifeq TARGETARCH x nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALCXXFLAGS INDKBOOSTPATHx includeboost nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALLDLIBS LNDKBOOSTPATHx lib else ifeq TARGETARCH arm nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALCXXFLAGS INDKBOOSTPATHarm v aincludeboost nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALLDLIBS LNDKBOOSTPATHarm v alib else ifeq TARGETARCH arm nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALCXXFLAGS INDKBOOSTPATHarmeabiv aincludeboost nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbspLOCALLDLIBS LNDKBOOSTPATHarmeabiv alib else nbsp nbsp nbsp nbsp nbsp nbsp nbsp nbsperror platform not support endif LOCALSRCFILES javabridgecpp LOCALSRCFILES wildcard LOCALPATHterritorysrccpp LOCALSRCFILES wildcard LOCALPATHterritorysrcenginecpp LOCALSRCFILES wildcard LOCALPATHterritorysrcgoboardcpp LOCALSRCFILES wildcard LOCALPATHterritorysrcgtpcpp LOCALSRCFILES wildcard LOCALPATHterritorysrclegacycpp LOCALSRCFILES wildcard LOCALPATHterritorysrcutilscpp include BUILDSHAREDLIBRARY my ndk project compile success now is all step correct Im using cmake to crosscompile a library for Android that uses boost Ive compiled and installed boost with buildandroidsh withlibrariesfilesystem prefixoptboostarm archarm v a NDK which worked fine However when my project tries to findpackageBoost it fails Scanning optboostarmarm v alibcmakeboostfilesystem libboostfilesystemvariantcmake Including optboostarmarm v alibcmakeboostfilesystem libboostfilesystemvariantclangmta staticcmake skipped libboostfilesystemclangmta a clang detected clang set BoostCOMPILER to override CMake Error at optboostarmarm v alibcmakeBoost BoostConfigcmake findpackage Found package configuration file optboostarmarm v alibcmakeboostfilesystem boostfilesystemconfigcmake but it set boostfilesystemFOUND to FALSE so package boostfilesystem is considered to be NOT FOUND Reason given by package No suitable build variant has been found The relevant check that fails is in optboostarmarm v alibcmakeboostfilesystem libboostfilesystemvariantclangmta staticcmake cmake ifBOOSTDETECTEDTOOLSET AND NOT BOOSTDETECTEDTOOLSET STREQUAL clang BOOSTSKIPPEDlibboostfilesystemclangmta a clang detected BOOSTDETECTEDTOOLSET set BoostCOMPILER to override return endif It seems like optarm v alibcmakeBoostDetectToolset cmake appends the compiler version number to BOOSTDETECTEDTOOLSET Im not sure where the clang comes from Maybe this is an issue with boost itself Maybe I just configured something wrong doesnt even list clang as a builtin tool Hi I need to compile my existing bit app to bit My main app needs to be compiled against NDKr d The app used Boost Thus I have to compile boost to bits using NDKr d as well Is this possible I tried but faced many errors ERROR DAndroidSdkandroidndkr d is not a valid NDK root For NDK r has support abi arm v a I want to build out and arm v a archive but when I run with the command it told me something not support like this androidandroidsrvandroidndkr b boostforandroidBoostforAndroidmasterbuildandroidsh NDKROOT boost archarm v a To follow build in another terminal please use tail F homeandroidandroidndkr blogsmystlog log Building boost version Detected Android NDK version b bit Old NDK versions only support ARM architecture I Want to build out the bit archive for Google Play new policy Please help Thanks to anyone who could help me Thanks buildandroidbat eandroidndkr ERROR eandroidndkr is not a valid NDK root I have been experimenting with different boost build versions and different android NDK versions to try and get boostcircularbuffer to work properly without much luck I have experimented with building my own but have also experimented with using the prebuilt releases eg In each case I am getting situations similar to this I have experimented with various different built configurations but my current setup is the following CMake Android NDK c Android Gradle Plugin version Gradle version C compiler Clang C version also tried OS Windows Note that I can import boostcircularbuffer and use various different methods but some of the boost classes themselves seem to me missing imports Any help is greatly appreciated Hi great work Im using your latest version with NDK r and Boost Im on Ubuntu and Android Studio Im trying to use BoostLocale but getting Build command failed Error while executing process homedavidAndroidSdkcmake bincmake with arguments build homedaviddevandroidAppAndroidFilterappexternalNativeBuildcmakedebugx target app Linking CXX shared library buildintermediatescmakedebugobjx libappso FAILED homedavidAndroidSdkndkbundletoolchainsllvmprebuiltlinuxx binclang targetx nonelinuxandroid gcctoolchainhomedavidAndroidSdkndkbundletoolchainsllvmprebuiltlinuxx fPIC sysroot homedavidAndroidSdkndkbundletoolchainsllvmprebuiltlinuxx sysroot g DANDROID fdatasections ffunctionsections funwindtables fstackprotectorstrong nocanonicalprefixes fnoaddrsig Wanoexecstack Wformat Werrorformatsecurity stdliblibc stdc frtti fexceptions O fnolimitdebuginfo Wlexcludelibslibgcca Wlexcludelibslibatomica Wlbuildid Wlwarnsharedtextrel Wlfatalwarnings Wlnoundefined Qunusedarguments Wlznoexecstack Wlzrelro Wlznow shared Wlsonamelibappso o buildintermediatescmakedebugobjx libappso CMakeFilesappdirsrcmaincppapprouterapproutercppo CMakeFilesappdirsrcmaincppapproutertcpcppo CMakeFilesappdirsrcmaincppappmitmMITMAsyncProxyServercppo CMakeFilesappdirsrcmaincppappmitmMITMModerateTrafficcppo CMakeFilesappdirsrcmaincppappmitmMITMsslsplitsslco CMakeFilesappdirsrcmaincppappmitmMITMstdafxcppo CMakeFilesappdirsrcmaincppappmitmAsyncProxyServerDelegatecppo CMakeFilesappdirsrcmaincppappmitmappmitmcppo CMakeFilesappdirsrcmaincppappmitmthreadjnienvcppo CMakeFilesappdirsrcmaincppappmitmjavamethodscppo CMakeFilesappdirsrcmaincppappmitmprocessidcppo CMakeFilesappdirsrcmaincppAsyncHarmonyAsyncHarmonyContextcppo CMakeFilesappdirsrcmaincppAsyncHarmonyAsyncMessageClientcppo CMakeFilesappdirsrcmaincppAsyncHarmonyAsyncMessageCommoncppo CMakeFilesappdirsrcmaincppAsyncHarmonyCloudRulescppo CMakeFilesappdirsrcmaincppAsyncHarmonyAsyncHarmonyHttpClientcppo CMakeFilesappdirsrcmaincppAsyncHarmonyCatMessageClientcppo CMakeFilesappdirsrcmaincppAsyncHarmonyUrlcppo CMakeFilesappdirsrcmaincppAsyncHarmonyOpSynccppo CMakeFilesappdirsrcmaincppAsyncHarmonyStringUtilitiescppo CMakeFilesappdirsrcmaincppAsyncHarmonyCNStoredLogcppo CMakeFilesappdirsrcmaincppAsyncHarmonyThreadKeepercppo CMakeFilesappdirsrcmaincppAsyncHarmonyLocksmithcppo CMakeFilesappdirsrcmaincppAsyncHarmonyFastStringsToFileFunnelcppo CMakeFilesappdirsrcmaincppAsyncHarmonyNHideAndSeekcppo CMakeFilesappdirsrcmaincpputilcppo CMakeFilesappdirsrcmaincpppatchtablecppo homedaviddevandroidAppAndroidFilterBoostforAndroidbuildlibsx libboostsystemclangmtx a homedaviddevandroidAppAndroidFilterBoostforAndroidbuildlibsx libboostthreadclangmtx a homedaviddevandroidAppAndroidFilterBoostforAndroidbuildlibsx libboostfilesystemclangmtx a homedaviddevandroidAppAndroidFilterBoostforAndroidiculibsx libicuuca homedaviddevandroidAppAndroidFilterBoostforAndroidiculibsx libiconvso homedaviddevandroidAppAndroidFilterBoostforAndroidbuildlibsx libboostlocaleclangmtx a homedaviddevandroidAppAndroidFilterBoostforAndroidbuildlibsx libboostiostreamsclangmtx a homedaviddevandroidAppAndroidFilterbuildopensslandroidopenssllibx libssla homedaviddevandroidAppAndroidFilterbuildopensslandroidopenssllibx libcryptoa homedavidAndroidSdkndkbundletoolchainsllvmprebuiltlinuxx sysrootusrlibx linuxandroid liblogso latomic lm libslocalesrcencodinguconvcodepageipp error undefined reference to icu UnicodeStringUnicodeString libslocalesrcencodinguconvcodepageipp error undefined reference to icu UnicodeStringUnicodeString libslocalesrcencodingicuuconvhpp error undefined reference to ucnvopen libslocalesrcencodingicuuconvhpp error undefined reference to UCNVFROMUCALLBACKSTOP libslocalesrcencodingicuuconvhpp error undefined reference to ucnvsetFromUCallBack libslocalesrcencodingicuuconvhpp error undefined reference to UCNVTOUCALLBACKSTOP libslocalesrcencodingicuuconvhpp error undefined reference to ucnvsetToUCallBack libslocalesrcencodingicuuconvhpp error undefined reference to UCNVFROMUCALLBACKSKIP libslocalesrcencodingicuuconvhpp error undefined reference to ucnvsetFromUCallBack libslocalesrcencodingicuuconvhpp error undefined reference to UCNVTOUCALLBACKSKIP libslocalesrcencodingicuuconvhpp error undefined reference to ucnvsetToUCallBack libslocalesrcencodingicuuconvhpp error undefined reference to ucnvclose libslocalesrcencodingicuuconvhpp error undefined reference to ucnvclose libslocalesrcencodingicuuconvhpp error undefined reference to ucnvgetMaxCharSize libslocalesrcencodingicuuconvhpp error undefined reference to ucnvclose libslocalesrcencodingicuicuutilhpp error undefined reference to uerrorName libslocalesrcencodingicuuconvhpp error undefined reference to icu UnicodeStringUnicodeStringchar const int UConverter UErrorCode libslocalesrcencodingicuuconvhpp error undefined reference to icu UnicodeStringUnicodeString libslocalesrcencodingicuuconvhpp error undefined reference to ucnvfromUChars libslocalesrcencodinguconvcodepageipp error undefined reference to icu UnicodeStringUnicodeString libslocalesrcencodingicuuconvhpp error undefined reference to ustrToUTF libslocalesrcencodingicuuconvhpp error undefined reference to icu UnicodeStringUnicodeStringint int int libslocalesrcencodingicuuconvhpp error undefined reference to icu UnicodeStringappendint clang error linker command failed with exit code use v to see invocation ninja build stopped subcommand failed I added these two libraries in my CMakeListstxt file addlibrary libiconv SHARED IMPORTED settargetpropertieslibiconv PROPERTIES IMPORTEDLOCATION MYICONVLIBSDIRANDROIDABIlibiconvso addlibrary libicuuc STATIC IMPORTED settargetpropertieslibicuuc PROPERTIES IMPORTEDLOCATION MYICONVLIBSDIRANDROIDABIlibicuuca I also used android sourceSets main Android Studio doesnt package precompiled external so libs into apk even if linked against via addlibrary SHARED IMPORTED in CMakeListstxt See eg Hopefully this will be remedied in near future As a workaroun in the meantime need to add them manually to jniLibssrcDirs Note This causes ALL so files in ABI eg armeabiv a subdir of this dir to get packaged into apk relative to app dir If you want to just include those necessary eh chrono system copylink them to a separate dir and reference that dir here instead jniLibssrcDirs should contain any external libs which should be compiled in armeabiv aarm v ax x mips subdirs myboostdirlibs myiconvdirlib srcmainJniLibsboost could add additional dirs with ABI subdirs to be packaged into apk like this Relative paths like this will be interpreted as relative to app dir Is there something else I need to do in order to link these libraries