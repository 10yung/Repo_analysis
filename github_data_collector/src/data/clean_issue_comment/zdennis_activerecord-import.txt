Sometimes we might have repeated instances in the array passed to the import and those might cause a fail while inserting because the same value is being inserted more than once when it shouldnt be possible This is pretty useful for upsert operations This PR adds a uniquerecordsby option which if present depending on the value it will try to filter the passed elements for import It also works for hashes I am trying to import products and save images through remote urls Import works well but I cant manage it to make it work work ActiveStorage images Is this supported in anyway This is what I have product Productnew name row name sku row sku brandid row brand productimageattachio parsedimageurl filename row sku jpg contenttype imagejpg products product importing Productimport products recursive true when I check the development logs I dont see any actions for images Hello Are there any plans on adding the ability to update hasmany associations fields together with main object update with option recursive true so existing associations would be updated and new ones created This scenario works for the main collection so probably it might be added for associations as well Example Ruby author Authorcreatename John Doe country SomeCountry author bookscreatename Book pagesnumber author country Another Country authorbooksfirstpagesnumber author booksbuildname Book pagesnumber WAY Authorimport author recursive true onduplicatekeyupdate conflicttarget authors id books id columns authors name country books name pagenumber validate false WAY Authorimport author recursive true onduplicatekeyupdate authors conflicttarget id columns name country books conflicttarget id columns name pagenumber validate false So at the end it should create new book Book with all initialized fields and update fields country in author and pagesnumber in Book I guess the main problem here is an extra query to retrieve a list of existing associations IDs to know what of them to create and what to update Such ability would be really helpful for data syncing since now it takes operations first create missing objects second update existing Postgres has the options to insert a massive volume of data using Copy I think using Copy will be a great performance boost for the Gem when used via the PG adapter Thoughts Looks like Rails is FINALLY adding support for this though not nearly as comprehensive as this gem Thoughts about starting to Deprecate the gem Add additional methods that match up to the Rails API so that its easy for people to migrate off the gem when they want to Hi I found that recursive import with hashes is not supported and this is ok but it took me a little while to realize this after getting a fairly opaque error message I think it would be an improvement if activerecordimport raised or warned on the combination of recursive true and an array of hashes or alternatively if a warning about this appeared in the hashes section of the readme Thanks The import aliases defined by this gem prevent the import method from elasticsearchmodel from being added to a projects active record models Why Because with elasticsearchmodel you cause an import method to be added to your model by using an include However note that include will not override or replace existing methods if they already exist they are simply skipped This means that since the import alias from activerecordimport is already in place when the model file does the include the elastic searchs import is never added This cannot be solved by gem load order the include mechanism happens when the model files are loaded which happens after the gems One workaround I found was to remove the import aliases in an initializer like this Avoid a conflict with the elasticsearchmodel gem by removing the import aliases created by the activerecordimport gem ActiveRecordAssociationsCollectionAssociationclasseval removemethod import ActiveRecordAssociationsCollectionProxyclasseval removemethod import class ActiveRecordBase class self removemethod import removemethod import end end Any chance the import aliases can be removeddropped officially or somehow made possible to easily opt out of this behavior Thanks for the awesome library It took me a while to find the indexpredicate option for onduplicatekeyupdate Could you add an example to the README I seems that belongsto relation isnt proceeded by import during commit my log shows that import inserts the only hasonemany relations How can it be fixed A lot of people over the years have contributed to activerecordimport This gem wouldnt be around today if it wasnt for everyones contributions Im very grateful for that and I know the community has benefited from these contributions just look at the ruby gems download numbers I realize that I am the biggest bottleneck for continuing to making keeping and extending the offering of this gem to other developers in the community Id like to change that One possible way is the addition of a core team of developers who would help distribute the effort involved with maintaining and evolving activerecordimport If youre interested in this or have any thoughts on this topic in general please dont hesitate to share your thoughts If you want to discuss anything privately feel free to email me at zachdennisgmailcom Happy coding 