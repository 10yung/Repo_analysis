Sometimes I will have to deal with a long link like this I prefer to wrap long links if possible This is allowed with reStructuredText lastIndexOf lastIndexOf ReferenceGlobalObjectsStringlastIndexOf and also with AsciiDoc via link syntax link GlobalObjectsStringlastIndexOf lastIndexOf or variable syntax js jsGlobalObjectsStringlastIndexOf Does MarkDown have some way to deal with this If I wish to include a file it is possible with reStructuredText include appphp and AsciiDoc includeappphp and Org Mode INCLUDE appphp I think it should be possible to do this with MarkDown What the spec says A link title consists of either a sequence of zero or more characters between straight doublequote characters including a character only if it is backslashescaped or a sequence of zero or more characters between straight singlequote characters including a character only if it is backslashescaped or a sequence of zero or more characters between matching parentheses including a or character only if it is backslashescaped Although link titles may span multiple lines they may not contain a blank line But if block starts like start a new line of link title The Link will be broken I see that the reference CommonMark javascript implementation first parses link reference definition lines into a paragraph then tries to parse it as a link reference definition But block starts like and as well as blank lines break Paragraphs So the link reference definitions are also broken javascript paragraph continue functionparser return parserblank finalize functionparser block var pos var hasReferenceDefs false try parsing the beginning as link reference definitions while peekblockstringcontent COPENBRACKET pos parserinlineParserparseReferenceblockstringcontent parserrefmap blockstringcontent blockstringcontentslicepos hasReferenceDefs true if hasReferenceDefs isBlankblockstringcontent blockunlink canContain function return false acceptsLines true Example link reference definition dingus link markdown foo url first line this should be a heading second line Just think that especially blank lines are common in Titles for example a commit message in commonmarkjs plain dingus add dependency version requirements dingus add dependency version requirements Dingus was rendering incorrectly with Bootstrap Added a bowerjson which requires Bootstrap jQuery and Lodash with major version equal to whats currently live Likewise the minimum patch version dingus require lodash what GitHub rendered html a datapjaxtrue titledingus add dependency version requirements dingus add dependency version requirements Dingus was rendering incorrectly with Bootstrap Added a bowerjson which requires Bootstrap jQuery and Lodash with major version equal to whats currently live Likewise the minimum patch version dingus require lodash classlinkgray hrefcommonmarkcommonmarkjscommita eb af a e a eb d ecdd c adingus add dependency version requirements a Adding backslashs seems to work but the spec doesnt statement this If I try to use backslash to escape a new line the new line preserves not be a space so does the backslash dingus link markdown foo url first line not a heading second line foo The CommonMarkspecjson document contains the examples from the specification in a machine readable format These examples are divided into matches and non matches However the only way to know this is by interpreting the HTML example which requires further analyzation Therefore I would like to ask for inclusion of an indicator that associates the example with one of the current states validinvalid by adding a boolean to the JSON as shown in the following example via the valid key json markdown Foo n nbar n nbaz n html pFoop nh barh npbazp n example startline endline section Setext headings valid false Additional comfort may be reached by adding the chapter number and a direct URL to the document fragment like json markdown Foo n nbar n nbaz n html pFoop nh barh npbazp n example startline endline chapter section Setext headings url valid false This is more for the human reader to be able to quickly look up the example in the spec It may also be interesting to evaluate whether the HTML is better or whether it would be better to use the XML AST in place of the html key Since not all implementations are going to be AST based that may be a bad idea though the AST may be added in addition via an ast key Background currently I am trying to write a CommonMark parser against CommonMarkspecjson and find it tedious to create an extra parser just to verify that the data associated with the html key represents the desired result in the specification Of course I am open for suggestions should there be an easy way that escaped my understanding Thank you EDIT I am aware that the results the tests express are often not as simple as matchnomatch but for the start of developing a tokenizer such a division would already be a lot of help Remove line tab and form feed from whitespace Rename newline to line feed the LF n character or line ending the concept Remove the whitespace grouping and be explicit everywhere whether spaces as indentation spaces spaces or tabs spaces tabs and up to one line ending is allowed Rename Punctuation to Unicode punctuation to disambiguate it more clearly from ASCII punctuation Reword line breaks in some cases they meant line endings blank lines or either hard or soft line breaks This is a substantial change and needs a thorough review Open questions Do tabs play a role in how spaces in the inline code span algorithm are stripped and merged What about whitespace in HTML tags Those are used block HTML of kind which can only be on one line and therefore does not support line endings as whitespace and inline HTML HTML understands form feed as whitespace here Character references are allowed everywhere except in fenced code indented code or code spans They represent their resolved character not syntax There s even example of having them in link definition destinations and link definition titles But the following does not resolve into a link markdown copy examplecom I interpret the spec as saying that it should resolve but then the dingus doesn t This may be a bug for the dingus implementation rather than the spec The HTML spec no longer does not reference entities Instead there are twothree types of character references named numerical hexadecimal or decimal for reference I think rewording the CM spec to use the term character references is good it would be more in line with HTML and simplify phrases such as Entity and character references or naming escapes and character references as two mechanisms similar mechanisms Decimal numeric character references references Invalid Unicode code points but nowhere is it defined what those are Hexadecimal numeric character references do not mention this limitation but I guess imply it with They too are parsed as the corresponding Unicode character The HTML spec defines several limitations on numerical character references so I m guessing some or all of that applies to CM as well However HTML defines that some invalid references map to other characters the table at the bottom of the linked section Why mention code points instead of characters Is it just surrogates The input without a newline at the end gets a newline added by the current dingus This is sensible because a normal fenced code block as a trailing newline code to the end The same should be required for fenced code blocks without a closing fence In Example markdown afoo is not strong emphasis because the opening is preceded by an alphanumeric and followed by punctuation and hence not part of a leftflanking delimiter run So the result is html pa quotfoo quotp However punctuation includes some meaningful characters such as backtick and So the opening in the following examples are not valid delimiters markdown afoo aspanfoospan is converted to html pacodefoocodep paspanfoospanp The problem is that without the exception of these meaningful punctuations there is no way to express these use cases without inserting unnecessary whitespace between and preceding alphanumeric markdown a foo a spanfoospan is converted to html pa strongcodefoocodestrongp pa strongspanfoospanstrongp Is this intended behavior or something not considered as a specification