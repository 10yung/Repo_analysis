This would likely make it possible for LLVM to optimize a division away which accounts for of the time in generaterow I dont see much use for it anyway and Now that the Error trait has deprecated description see we shouldnt bother with readErrordescription at all and it should be moved into the impl Display Since this also means we no longer need to return str we should improve the displayed error messages to include any additional information they contain A base location entry is only existing since DWARF For DWARF it has to be expanded WIP implementation for Annoyingly due to how these form descriptors work it means that all files need to have the same format I wonder if it makes sense to just write an empty string in such cases Effectively something similar happens with md hashes already Second issue is that this change required to remove a Copy bound Im playing around with various ways at the moment to make it easier to address file contents and DWARF is helping with DWLCNTMD here already It lets you address a source file by MD hash which is pretty helpful but it still requires a separate system to actually resolve the sources I came across an LLVM extension recently DWLNCTLLVMsource which LLVM added to support debugging of generated GPU programs I feel like this would be also solving my issue quite well However Im not sure how gimli thinks about LLVM extensions The reason Im asking is because I wanted to use gimlis write interface for this but currently the logic that emits these DWLNCT attributes is internal to the structs so it requires a patch to gimli to emit new ones at the moment I have a bit dos exe mz format that Id like to extract line number information from It seems to maybe be dwarf as it has all of those debuginfo debugabbrev etc sections and it was compiled with watcom which uses dwarf However I got lost in the examples and I cant figure out exactly what is needed by gimli I know the address where debuginfo starts and I know the header info and relocation table etc etc is that enough If so whats a minimal example that I can get started with Thanks PS heres what the file looks like d a b ffff MZ A b e d b d e cd b db cd b ab cd b ccd LHe c c f f c f c llo worldELF a b c c d d e P f e b e c L ca fe c c f hello f c e d e worldasmV W a f d ATCOM b c a f c a F d f c a FH e ff a f c c f f c e d helloworldasm c d e d e debug f e f e f infodebugabb e f c e revdebugline e f e e debugaranges shstrtabTIS a e N PPS object is incapable of loading this kind of file Eg DWTAGbasetype instead of DwTag You can see this when using dwarfdump ehframe on an object file This should support the following uses better support for relocated addresses eg when using function sections which have every function symbol at address reuse of the same address type for conversion when both reading and writing optional support for segmented addresses using the native address size better type checking of our address handling I wanted this when doing the relocated address support but didnt do it because of how ugly the ReaderOffset support had been However I dont think thats so bad now after the default offset was changed in Any thoughts on this fitzgen Sections expressionslocations in debuginfo and debuglocdebugloclists debugstroffsets x debugframeehframe ehframehdr lower priority debugaranges debugpubnamesdebugpubtypesdebugnames debugmacinfodebugmacro applenamesappletypesapplenamespaces Also need general improvements more mutability indexed addressesrange listslocation lists 