Reference an older NewtonsoftJson package because some clients depend on lower versions ndexResponse should be indexResponse Signedoffby oneoneonepig peihuachu gmailcom NESTElasticsearchNet version Elasticsearch version Description of the problem including expected versus actual behavior Im having an issue with NEST loading index using await clientGetIndexAsyncindexName method if the index has alias setup with certain filter format Cluster accepts the filter but NEST client fails Alias with filter json actions add index estestrepro alias estestreproalias filter bool mustnot exists field field Error Cannot deserialize the current JSON object eg namevalue into type SystemCollectionsGenericIEnumerable NestQueryContainer because the type requires a JSON array eg to deserialize correctly To fix this error either change the JSON to a JSON array eg or change the deserialized type so that it is a normal NET type eg not a primitive type like integer not a collection type like an array or ListT that can be deserialized from a JSON object JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object Path estestrepro aliases estestreproalias filterboolmustnotexists line position Cannot deserialize the current JSON object eg namevalue into type SystemCollectionsGenericIEnumerable NestQueryContainer because the type requires a JSON array eg to deserialize correctly To fix this error either change the JSON to a JSON array eg or change the deserialized type so that it is a normal NET type eg not a primitive type like integer not a collection type like an array or ListT that can be deserialized from a JSON object JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object Path estestrepro aliases estestreproalias filterboolmustnotexists line position Repro project I can get around the error by reformatting the filter as follow filter bool mustnot exists field field Should Nest support this alias filter if cluster is allowing it Hi every one I m playing around with ElasticSearch in combination with NEST in my C project My use case includes several indices with different document mapping which I query separately so far Now I wanna implement a global search function which queries against all existing indices So my question How do I accomplish that by using NEST Maybe for a better understanding this is the query I wanna realize with NEST var queryContainers new ListQueryContainer if totalFilterHasTextFilter queryContainersAddQueryContainerHelperGetQueryStringQuerytotalFilterSearchnull var accountQueryContainers new ListQueryContainer if totalFilterUserIdsIsNullOrEmpty accountQueryContainersAddnew BoolQuery Must new ListQueryContainer new BoolQuery Filter new ListQueryContainer QueryContainerHelperGetTermsQuerytotalFilterInstagrmUserIdsOfTypeobjectToListInferFieldUseriiUserId QueryContainerHelperGetTermQueryUserEntityTypeCustomerInferFieldUseriiUserEntityType var shouldAccountQuery new BoolQuery Should accountQueryContainers queryContainersAddshouldAccountQuery var mustQuery new BoolQuery Must queryContainers var searchResponse await elasticClientSearchAsyncobjects sQueryq mustQuery NESTElasticsearchNet version Elasticsearch version Description of the problem including expected versus actual behavior Hi I have the following situation I want to create an index from elasticsearch into an c classsThe problem is that one of the column from the index is different from my class property nameindex column name is synonymspath and my class property name is SynonymsPath public class DynamicRemoteSynonymTokenFilter TokenFilterBase public DynamicRemoteSynonymTokenFilter basedynamicsynonym DataMemberName synonymspath public string SynonymsPath get set var de new CreateIndexDescriptorindexName Settings b b NumberOfShards NumberOfReplicas Analysis c cAnalyzersd d Customik e eTokenizerikmaxwordFiltersremotesynonym TokenFilterstf tf Synonymlocalsynonym sf sfSynonymsPathanalysissynonymtxt UserDefinedremotesynonym new DynamicRemoteSynonymTokenFilter SynonymsPath synonymsPath RefreshInterval MapGoodsms msAutoMap var result thisClientIndicesCreatede settings indexrefreshinterval analysis analyzer ik filter remotesynonym tokenizer ikmaxword type custom filter remotesynonym type dynamicsynonym indexnumberofshards why synonymspath fields can not be serializer Can you give an advice What am I doing wrong Thank you Context Currently BulkOperationsCollectionT is implemented using a private IListT along with some locking The summary tag explains this This class is used by see crefIBulkRequestOperations which needs thread safe adding see crefICollectionTAdd as well as an equivalent of see crefListTAddRange Because operations from Elasticsearch are executed in order none of the types in SystemCollectionConcurrent cant be used for this We need to preserve insert order and exposed indexed index because see crefBulkResponseItems is ordered and lines up with see crefBulkRequestOperations allowing one to zip the two together Thats fairly concise and specific but Im a bit confused by it Its pretty trivial in the scheme of things but I cant help but notice the limitation this propriety type imposes Questions What exactly is it about IBulkRequestOperations that makes this threadsafe adding necessary Its a nice enough helper class in general but isnt it true that by the time it gets to the request itself its going to be effectively readonly I wouldnt expect someone to add to the collection after theyve called BulkAsync Heres the formatter showing that its just looping over the contents Pending that would it be possible to change IBulkRequestOperations to be an IListIBulkOperation Existing implementations should remain intact but I could use and reuse an IBulkOperation If thats not possible would it be possible to at least expose the ListTint capacity constructor so that I can avoid some unnecessary list expansion NESTElasticsearchNet version Elasticsearch version Description of the problem including expected versus actual behavior If I set a class that inherits Exception to the value of Dictionarystring object and post it to index the following InvalidCastException is thrown Message Unable to cast object of type ElasticsearchNetExceptionFormatter to type ElasticsearchNetUtf JsonIJsonFormatter SystemNullReferenceException StackTrace ElasticsearchNetExceptionFormatterResolverGetFormatterT ElasticsearchNetElasticsearchNetFormatterResolverInnerResolverGetFormatterAnonymousMethod TSystemType SystemCollectionsConcurrentConcurrentDictionaryTKey TValueGetOrAddTKey SystemFuncTKey TValue ElasticsearchNetElasticsearchNetFormatterResolverInnerResolverGetFormatterT I hope it can be sent without problems Steps to reproduce Since it occurs at the time of serializing PostData i attach the reproduction code csharp var settings new ConnectionConfiguration var dic new Dictionarystring object Exception new NullReferenceException var data PostDataSerializabledic using var ms new MemoryStream dataWritems settings Exception is thrown A number of users are asking how to mockstubunitintegration test using the client It would be good to have a story unittestingmd where we can point users and potentially look to release this as a blog post in order to reach a wider audience The current ApiGenerator project uses the old REST API JSON structure and passes the new structure through a transformation process This was implemented in as a means of ensuring the client release was not impeded but we ought to move the project to use the new format directly 