The catsscalatest project set up a Pure cross project for JVM and JS platforms on several Scala versions Dependency resolution seems to work fine throughout the matrix except for the root project The broken config is available for reference on the scalajscrosspurebroken branch sbtcatsscalatest projects info In file catsscalatest info catsscalatest info catsScalatestJS info catsScalatestJVM Running sbt test or sbt compile results in compilation failures in the root catsscalatest project that indicate missing dependencies eg info Compiling Scala sources to catsscalatesttargetscala classes error catsscalatestsrcmainscalacatsscalatestEitherMatchersscala object scalatest is not a member of package org error import orgscalatestmatchersBeMatcher MatchResult Matcher error Running sbt catsScalatestJScompile or sbt catsScalatestJVMcompile both work fine I would have expected compile or catsscalatestcompile to call the platformspecific projects compile tasks not execute one of its own FWIW I noticed that setting the Scala version using excludes the core project sbtcatsscalatest v info Setting Scala version to on projects info Switching Scala version on info catsScalatestJVM info catsScalatestJS info Excluding projects info catsscalatest info Reapplying settings info Set current project to catsscalatest in build filecatsscalatest Maybe catsscalatest should be excluded more broadly and its not for some reason We worked around the issue by switching to a Full cross project on the primary branch The broken config is preserved on the scalajscrosspurebroken branch There is no platformspecific code for this project so ideally it will switch back to Pure once we figure out whats going wrong at Depending on whether jsConfigure call is placed before or after settings the cross typedirectory configuration changes Repository with a reproduction set up here Versions sbt sbtcrossproject sbtscalajscrossproject sbtscalajs Given this buildsbt scala import sbtcrossprojectCrossPluginautoImportCrossType crossProject val good crossProjectJVMPlatform JSPlatform crossTypeCrossTypePure settingsscalaVersion jsConfigureidentity val bad crossProjectJVMPlatform JSPlatform crossTypeCrossTypePure jsConfigureidentity settingsscalaVersion Results in correct sourceDirectories for the project where jsConfigure is after settings sbt show goodJVMsourceDirectories show goodJSsourceDirectories info tmpsbtcrossprojectjsConfigureissuegoodjvmsrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodjvmsrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodjvmsrcmainjava info tmpsbtcrossprojectjsConfigureissuegoodsrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodsrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodjvmtargetscala srcmanagedmain info tmpsbtcrossprojectjsConfigureissuegoodjssrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodjssrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodjssrcmainjava info tmpsbtcrossprojectjsConfigureissuegoodsrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodsrcmainscala info tmpsbtcrossprojectjsConfigureissuegoodjstargetscala srcmanagedmain And bad sourceDirectories where jsConfigure is before settings looks like CrossTypeFull configuration sbt show badJVMsourceDirectories show badJSsourceDirectories info tmpsbtcrossprojectjsConfigureissuebadjvmsrcmainscala info tmpsbtcrossprojectjsConfigureissuebadjvmsrcmainscala info tmpsbtcrossprojectjsConfigureissuebadjvmsrcmainjava info tmpsbtcrossprojectjsConfigureissuebadsharedsrcmainscala info tmpsbtcrossprojectjsConfigureissuebadsharedsrcmainscala info tmpsbtcrossprojectjsConfigureissuebadjvmtargetscala srcmanagedmain info tmpsbtcrossprojectjsConfigureissuebadjssrcmainscala info tmpsbtcrossprojectjsConfigureissuebadjssrcmainscala info tmpsbtcrossprojectjsConfigureissuebadjssrcmainjava info tmpsbtcrossprojectjsConfigureissuebadsharedsrcmainscala info tmpsbtcrossprojectjsConfigureissuebadsharedsrcmainscala info tmpsbtcrossprojectjsConfigureissuebadjstargetscala srcmanagedmain Builds using scala are less favoured than using sbt We may want to go towards that direction Heres what I came up with scala def zioUri urigitgithubcomscalazscalazziogit f e cbc lazy val zioJVM ProjectRefzioUri coreJVM lazy val zioJS ProjectRefzioUri coreJS lazy val base crossProjectJSPlatform JVMPlatform jvmConfigure dependsOn zioJVM jsConfigure dependsOn zioJS But with a bit of support here I think it could look like scala lazy val zio CrossProjectRef urigitgithubcomscalazscalazziogit f e cbc MapJSPlatform coreJS JVMPlatform coreJVM lazy val base crossProjectJSPlatform JVMPlatform dependsOnzio The original CrossProject in SJS has quite extensive documentation notably about some common pitfalls It should be carried over maybe to READMEmd The resource directory in the shared folder is not added to project resourceDirectories This is a problem especially for CrossTypePure as all resource directories for this layout are in the hidden platform folder Ideally resource directories should be treated in the same way as source directories are buildsbt scala import sbtcrossprojectcrossProject CrossType lazy val foo crossProjectJSPlatform JVMPlatform crossTypeCrossTypePure lazy val foojvm foojvm lazy val foojs foojs SBT shell sbttmp show fooJVMsourceDirectories info privatetmpfoojvmsrcmainscala info privatetmpfoojvmsrcmainscala info privatetmpfoojvmsrcmainjava info privatetmpfoosrcmainscala info privatetmpfoosrcmainscala info privatetmpfoojvmtargetscala srcmanagedmain sbttmp show fooJVMresourceDirectories info privatetmpfoojvmsrcmainresources info privatetmpfoojvmtargetscala resourcemanagedmain See 