Hi Wonderful project for SQL at Jupyter Let me add a question with below usage case Usage senario With cell magic drop if exist tmptab creat temp tab failed as no table it might be failed as it execute as a statement i postgrespsycopg env With two cell magic using a connection it is okay With two line magic how to specify a specific connection When engine configed with threadlocal and max overflow this case can be solved But I like to use line magic in a functionnot in cell magic and parallel model for this case Thanks Taewon Would it be possible for sqlmagic to automatically run the SQL string through sqlalchemytext or do we need to replace any instance of in a regular SQL statement with For reference Hello I have a postgres database that I connected to in jupyter and when I query using LIKE like this sql SELECT topictitle FROM engagement WHERE url LIKE AND ispm No I get sqlmagicexceptionsEmptyResult at x dc b Now heres the thing I know that this query will get be several results because I queried it successfully in pgadmin But I would love to have it working it in jupyter I tried restarting the kernel and running the cells again and I tried it on a difference database and LIKE wildcards just dont work Any idea how to resolve this As it says in the title could heavily borrow from readgbq and use the same kwarg requirements for a config would greatly benefit anyone on GCP Even though it is a dependency Traitlets version returns error ImportError cannot import name observe Tests will not without spark installed runtestssh master test session starts platform linux Python pytest py pluggy rootdir homecperezrepossqlmagic inifile pytestini collected items errors ERRORS ERROR collecting teststestmagicpy teststestmagicpy in module from utils import createsparkconn testsutilspy in module findsparkinit venvlibpython sitepackagesfindsparkpy in init py j globospathjoinsparkpython lib py jzip E IndexError list index out of range Interrupted errors during collection error in seconds SystemExit Traceback most recent call last ansvenvlibpython runpypy in runmodulemodname initglobals runname altersys runname modname if altersys return runmodulecodecode initglobals runname modspec else Leave the sys module alone ansvenvlibpython runpypy in runmodulecodecode initglobals modname modspec pkgname scriptname modglobals tempmodulemoduledict runcodecode modglobals initglobals modname modspec pkgname scriptname Copy the globals of the temporary module as they may be cleared when the temporary module goes away ansvenvlibpython runpypy in runcodecode runglobals initglobals modname modspec pkgname scriptname package pkgname spec modspec execcode runglobals return runglobals repossqlmagicvenvlibpython sitepackagespytestpy in module we trigger the below else condition by the following import import pytest raise SystemExitpytestmain else SystemExit homecperezrepossqlmagicvenvlibpython sitepackagesIPythoncoreinteractiveshellpy UserWarning Unknown failure executing module pytest warnUnknown failure executing module s modname This is awesome Ive hacked together both ipythonsql and background cell execution in the notebook before This is more elegant than both Thanks for doing this Looking at the source I was confused by the tablename variables meaning I think I understand that it is actually the name of the variable that the result will be pushed to Because of the SQLRDBMS context I think a better name is uservariable What do you think Happy to PR