 Description This commit adds documentation search to the whole website using Algolias DocSearch project I tried to be as close as the Faraday design as possible fixes at least it provides an easy way to search for pages even if pages are not clearly laid out in the navigation You can test the search here Todos List any remaining work that needs to be done ie Get review from the Faraday team Additional Notes Its possible to get analytics on the search feature what is searched what get no results need to document I have access to all of that but if you maintainers want that too just provide me your email address and I will invite you to the application You will have to create an Algolia account Basic Info Faraday Version also in Ruby Version ruby p Issue description When using the default adapter in my case nethttp a new OpenSSLX Store is initialized for each connection Each initialized store then loads the default certificates setdefaultpaths is a misnomer and actually loads certificates into the store see OpenSSLs X STOREsetdefaultpaths documentation This results in a FaradayConnection object holding references to a significant MB on my system amount of memory In itself this isnt too much of a problem but Im opening this following on from a downstream issue whereby a pool of connections is causing a memory leak I wonder if a single default certificate store should be shared between all connections that dont specify certstore Steps to reproduce The problem can be observed by running the following gist with TIMES set to a notable number I tried Just as b ee fde also does but for the v x releases Congratulations on v of this amazing gem Is it possible to get a GitHub tag and release for this version Commit history is not superclear but from a quick diff with the gem on rubygems I assumed ff dc d a bbdba a a cf d b ee is the commit of v Is this correct Thanks Basic Info Even if I went multiple times to the website I first completely missed the fact that there are actually more pages than the ones here For example I was looking for the retry documentation and could not find it but in GitHub because to access it you need to do this Click on middleware Click at the bottom for Available middleware Click on the retry middleware Step is the easy one to miss because the link is not obvious I would propose to have something like this instead Or in general a way to visualize easily all the documentation links without having to scroll down etc PS I worked previously at Algolia they provide this service for documentation websites Would you like it implemented on the faraday website I can help with that Basic Info Faraday Version Ruby Version Issue description Whenever I run Ruby with rdebug and set a breakpoint the interpreter quits with SystemStackError upon loading Faraday This makes it impossible to debug any program that uses the library Steps to reproduce For Ruby and Faraday the result is the same cat testrb require faraday puts blablabla ruby rdebug testrb homevmuserrvmrubiesruby libruby x linuxcontinuationso warning callcc is obsolete use Fiber instead Debugrb Emacs support available testrb require faraday rdb b Set breakpoint at testrb rdb c Traceback most recent call last from testrb in main from homevmuserrvmrubiesruby libruby rubygemscoreextkernelrequirerb in require homevmuserrvmrubiesruby libruby rubygemscoreextkernelrequirerb in require cannot load such file faraday LoadError from testrb in main from homevmuserrvmrubiesruby libruby rubygemscoreextkernelrequirerb in require from homevmuserrvmrubiesruby libruby rubygemscoreextkernelrequirerb in rescue in require from homevmuserrvmrubiesruby libruby rubygemscoreextkernelrequirerb in require from homevmuserrvmgemsruby gemsfaraday libfaradayrb in top required from homevmuserrvmgemsruby gemsfaraday libfaradayrb in moduleFaraday from homevmuserrvmgemsruby gemsfaraday libfaradayrb in defaultadapter from homevmuserrvmrubiesruby libruby debugrb in block in classDEBUGGER levels from homevmuserrvmgemsruby gemsfaraday libfaradayrb in methodmissing from homevmuserrvmgemsruby gemsfaraday libfaradayrb in methodmissing from homevmuserrvmgemsruby gemsfaraday libfaradayrb in methodmissing from homevmuserrvmgemsruby gemsfaraday libfaradayrb in methodmissing homevmuserrvmgemsruby gemsfaraday libfaradayrb in methodmissing stack level too deep SystemStackError Ruby separates positional and keyword arguments This resulted in several deprecation warnings in FaradayRackBuilder Keyword arguments are often passed to it that are implicitly passed through as a hash as the last positional argument Ruby raises a warning for this and will error For example faradayhttpcache which is configured something like builderuse FaradayHttpCache serializer Marshal sharedcache false will raise warnings because RackBuilder doesn t handle the Ruby change This PR removes the deprecation in a backwards and forwardcompatible way It uses a new compatability method in ruby and a shim to support older rubies which is recommended on the ruby blog Hello currently theres no option to specify the log level in the default formatter I think it would be better if were able to do that what do you guys think If I implement my own formatter to solve this will I be able to log the headersbody of the request This extracts the FaradayMiddlewareRegistry module functionality into a FaradayClassRegistry class This allows us to make some better assumptions about how the class registrys internal vars are loaded TODO copyadapt MiddlewareRegistry specs for ClassRegistry test with technoweeniefaradaylive I also made a few small changes that may bite us later Deprecated loadmiddleware Its the same as lookupmiddleware except lookupmiddleware raises if it doesnt return anything When deciding between ClassRegistrylookup and load I went with lookup since load is an existing ruby method Deprecated middlewaremutex and fetchmiddleware Those shouldve been private originally Theyre not used elsewhere in Faraday but may be in use in an external lib or app Pretty low chance though registermiddleware now complains if you try to change the autoloadpath after the ClassRegistry has been setup So something like ruby module Faraday class Adapter extend MiddlewareRegistry first time set pathtoadapters as autoloadpath registermiddleware pathtoadapters foo Foo subsequent calls MUST ignore autoloadpath registermiddleware bar Bar raises a warning Cannot change autoloadpath of existing FaradayAdapterclassregistry registermiddleware pathtootheradapters baz Baz end end This is an attempt to fix by calling middlewaremutex when the classes are defined This should prevent middlewaremutex from being undefined when a FaradayConnection instance is used in a multithreaded environment Right now the proper way to build a FaradayConnection for use in a multithreaded environment should look something like this ruby conn Faradaynewurl somebaseurl do f frequest something fresponse orother fadapter somehttpclient end connapp FaradayConnectionapp is delegated to FaradayRackBuilderapp which does the following Uses the FaradayRequest middleware registry to load something Uses the FaradayResponse middleware registry to load orother Uses the FaradayAdapter middleware registry to load somehttpclient Locks the FaradayRackBuilder instance from changing the middleware chain connbuilderhandlers Instantiates all of the middleware instances Builds the app instance from the loaded recursive middleware instances At this point it should be safe to use shared connection object across multiple threads But I dont know how often its used like this so there are likely some more bugs I also have another larger solution in mind that requires some refactoring Ill publish once I have it working