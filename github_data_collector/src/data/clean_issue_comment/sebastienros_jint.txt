Using JsValue for property access aligns better with spec and later opens us for using them directly as keys in dictionary This will reduce back and forth transformation of keys to string and JsValue This should not affect normal usage as there are automatic conversions between common CLR types and JsValues Jint We try to limit the execution time of a script using TimeoutInterval When testing with a long running c Delegate Jint does not throw a SystemTimeoutException but keeps executing In the worst case you end up in an infinite loop csharp var result new JintEngineo oTimeoutIntervalTimeSpanFromMilliseconds SetValueslowFunction new Funcstring SystemThreadingThreadSleepTimeSpanFromMilliseconds or use spinwait while true SystemThreadingThreadSpinWait return tadaaa ExecuteslowFunction GetCompletionValueToObject Expected Exception But is string tadaaa Using the following JavaScript codes from the Mozilla website js const Something functionelement this is a newly created object thisname Something Good thishandleEvent functionevent consolelogthisname Something Good as this is bound to newly created object switcheventtype case click some code here break case dblclick some code here break Note that the listeners in this case are this not thishandleEvent elementaddEventListenerclick this false elementaddEventListenerdblclick this false You can properly remove the listeners elementremoveEventListenerclick this false elementremoveEventListenerdblclick this false const s new Somethingwindow To this I have created the following window object in C to handle the AddEventListenerremoveEventListener csharp namespace JintTestsForms public sealed class JsWindow private Engine engine public JsWindowEngine engine engine engine public void addEventListenerstring type object listener public void addEventListenerstring type object listener bool useCapture public void addEventListenerstring type object listener object options public void removeEventListenerstring type object listener bool useCapture For most JavaScript event listener codes Jint correctly sets the listener parameter to the function Func but for the above Jint sets the listener parameter to ExpandoObject type How do you dispatch events in this case With some other javascript engines I found that instantiating the engine was very expensive and to combat this I created an object pool of engines Would you suggest this approach for Jint as well or is creating an engine lightweight enough that it isnt needed source string function aareturn new DategetTime packed string evalfunctionpackedefunctioncreturncaeparseIntcacca StringfromCharCodec ctoString ifreplace Stringwhilecd ec k c eck functionereturn d e efunctionreturn wc whilecifk c ppreplacenew RegExp bec bgk c return p returnaafunctiongetTimeDatenewsplit I need packed string covert to source stringbut not work demo var engine new Engine var ff valueStringfunctionpackedefunctioncreturnca eparseIntcacca StringfromCharCodec ctoString ifreplace Stringwhilecd ec k c eck functionereturn d e efunctionreturn wc whilecifk c ppreplacenew RegExp bec bgk c return p returnaafunctiongetTimeDatenewsplit var kk engineExecuteffGetValuevalue return the value kk is not collect please teach me how to write tanks Objectkeystext should return edit but throws instead Objectkeys should return but throws instead In ObjectConstructorcs the following code handles the keys functionality in Object public JsValue KeysJsValue thisObject JsValue arguments var oArg argumentsAt var o oArgTryCastObjectInstance if ReferenceEqualso null ExceptionHelperThrowTypeErrorEngine var enumerableProperties oGetOwnProperties Wherex xValueEnumerable ToArray var n enumerablePropertiesLength var array EngineArrayConstructFastuint n uint index foreach var prop in enumerableProperties var p propKey arraySetIndexValueindex p updateLength false index return array And this does not handle the case when Objectkeys is invoked with a string or array as input object which is valid JS and should return an array with the characters of the string and an array with the indexes of the array respectively I have a usage scenario with lots of function calls and profiling pointed out that regex executions are the most CPU intensive I am using latest v release Was there any work over this on v I have read that the static calls on NET Regex object should have better performance and even a cache for compiled expressions which would probably have a good effect on my scenario This could be implemented on Jint For my use case we need to evaluate Javascript expressions for validation I wanted to test Jint security features to ensure that the there would be minimal impact to the application if a bad expression was run I was testing to see if it was possible to exceed the run limits and the following test case allows the s timeout to be exceeded and the memory limit of to also be exceeded Eventually the application fails with a NET OutOfMemoryException var javascript new Array join var result new Engineoptions optionsLimitRecursion optionsStrict optionsDiscardGlobal optionsTimeoutIntervalTimeSpanFromSeconds optionsMaxStatements optionsLimitMemory Executejavascript GetCompletionValue ToObject From browsing the source code it looks like the timeout and memory limits are only evaluated before each statement statement Therefore the statement can exceed these limits and the execution only stops on the next statement If it is not possible to resolve this case it is worth documenting this as a limitation of the timeout and memory limits Any source file that has using both JintRuntime and Esprima fails to compile due to ambiguous class ExceptionHelper Only happens if you place Esprima source inside jints source tree to build a single dll instead of several Hi Im trying to use the debug mode but I cant seem to find any documentation on how to operate it For example I got this little code running to log each step of my script jintEngineStep sender info DebugLoginfoCurrentStatement Line infoCurrentStatementLocationStartLine Col infoCurrentStatementLocationStartColumn identifier identifier return JintRuntimeDebuggerStepModeInto But then I wanted to know the name of the function I was currently debugging This is where a documentation would help me a lot So far Im doing it like follows but I have no idea how to get variable names etc jintEngineStep sender info string identifier var funcStatement infoCurrentStatementAsJintParserAstFunctionDeclaration if funcStatement null identifier funcStatementIdName DebugLoginfoCurrentStatement Line infoCurrentStatementLocationStartLine Col infoCurrentStatementLocationStartColumn identifier identifier return JintRuntimeDebuggerStepModeInto So is there a documentation on how to use the debug mode Or examples Thank you for your help 