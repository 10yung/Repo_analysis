 Scenario we have a StyleGroup rendering some very basic html text We have defined styles for most common tags including a custom one for a Were also using href informations through the link attributed string key to trigger events on a TTTAttributedLabel Analysis We expected to find the link attribute populated with the original href but this doesnt work out of the box If we DO NOT include a custom Style for the a tag the link attribute is set to proper href if we DO include the custom style inside the group the link is not set The root cause seems to be in the StandardXMLAttributesResolver implementation if a is present in styles attributes the applyDynamicAttributes method is called Inside the standard implementation theres nothing about href default handling its taken for granted that it will be the Style to take care of it but the style doesnt have access to the dynamic value of the href if a is missing the styleForUnknownXMLTag is called properly handling the link Workaround We were able to create a custom resolver by wrapping the standard one like this swift open class MyXMLDynamicAttributesResolver XMLDynamicAttributesResolver public func styleForUnknownXMLTag tag String to attributedString inout AttributedString attributes String String fromStyle StyleXML wrapperstyleForUnknownXMLTagtag to attributedString attributes attributes fromStyle fromStyle let wrapper XMLDynamicAttributesResolver init wrapper XMLDynamicAttributesResolver selfwrapper wrapper public func applyDynamicAttributesto attributedString inout AttributedString xmlStyle XMLDynamicStyle fromStyle StyleXML if xmlStyletag a selfstyleForUnknownXMLTaga to attributedString attributes xmlStylexmlAttributes fromStyle fromStyle wrapperapplyDynamicAttributesto attributedString xmlStyle xmlStyle fromStyle fromStyle and by setting it like this in our group swift let group StyleGroupbase myBaseStyle a heavybyAdding color Colorblack minimumLineHeight size underline thick Colorblack groupxmlAttributesResolver MyXMLDynamicAttributesResolvergroupxmlAttributesResolver Proposed solutions inside the StandardXMLAttributesResolver fallback to the default implementation for a tags make StandardXMLAttributesResolver methods and initializer open and not internalpublic thats why we had to wrap the resolver inside another class instead of subclassing it I can quickly put together a pull request if needed but Id like to know which is the intended behavior Ciao Is there any possibility to implement Interface Builder support for macOS or NSTextField EF E CA B C AC A D EB DC Xcode version A Swift version SwiftRichString version Hello Im trying to set multiple styles for an attributed string but Im facing problems when I try to set a StyleGroup through an array To replicate the problem in a controlled environment I created a new project from scratch and added the library as a pod then I try to apply the style to a text Preparation steps let redStyle Style color UIColorred let myStyleGroup StyleGroupbase nil red redStyle let myText Hello redthis is red textred Applying the myStyleGroup as a single style works perfectly labelattributedText myTextsetstyle myStyleGroup Applying the myStyleGroup as an array of styles doesnt work labelattributedText myTextsetstyles myStyleGroup I tried to debug it and seems that the tag configuration is stripped out after calling the internal mergeStyles method Ive created a repository to show the problem Hi I think there is a bug when using linkURL like in the example swift let link Style color UIColorred linkURL URLRepresentabletagAttributehref the link will still shown in some dark blue because you have to set linkTextAttributes to change that Would be nice if you could change it with a Style too Hi I always had this very simple style with a simple string and the alignment always worked Now after upgrading to the alignment does not work anymore swift let smaller Style font GlobalFontRegularFont alignment center EDIT I downgraded to now it works again Thanks 