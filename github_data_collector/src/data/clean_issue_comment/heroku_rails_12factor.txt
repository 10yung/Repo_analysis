Rails is deprecating LoggerSilence call Culprit seems to be in librailsstdoutloggingrailsrb Fixed it by updating code to include ActiveSupportLoggerSilence if definedActiveSupportLoggerSilence Im trying to change logger level to warn in production but with no success Heres what I have rb configenvironmentsproductionrb removed unrelated lines Railsapplicationconfigure do Disable serving static files from the public folder by default since Apache or NGINX already handles this configpublicfileserverenabled ENV RAILSSERVESTATICFILES present Use the lowest log level to ensure availability of diagnostic information when problems arise debug info warn error fatal and unknown configloglevel warn Prepend all log lines with the following tags configlogtags requestid Use default logging formatter so that PID and timestamp are not suppressed configlogformatter LoggerFormatternew Use a different logger for distributed setups require sysloglogger configlogger ActiveSupportTaggedLoggingnewSyslogLoggernew appname if ENV RAILSLOGTOSTDOUT present logger ActiveSupportLoggernewSTDOUT loggerformatter configlogformatter loggerlevel warn configlogger ActiveSupportTaggedLoggingnewlogger end end I also have these ENV vars LOGLEVEL WARN RAILSLOGTOSTDOUT enabled RAILSSERVESTATICFILES enabled Note that I dont have STDOUTsync true That seems unrelated Do I need to add that What am I missing Im not sure why it is more important on Heroku to sync STDOUT than any other time or if the setting is there to prevent surprising out of order messages and there is a negligible performance penalty when not in a tty I made this PR in part to ask a question about the importance of this setting I am currently replacing railsstdoutlogging with railssemanticlogger and was overriding the railsstdoutlogging logger ruby turn off file logging configrailssemanticloggeraddfileappender false configure logging to STDOUT like railsstdoutlogging ie io STDOUT and STDOUTsync true configsemanticloggeraddappenderio STDOUT level configloglevel formatter configrailssemanticloggerformat STDOUTsync true no need for railsstdoutlogging via rails factor but heroku still requires it fail remove the block which overrides the RailsStdoutLogging override unless definedRailsStdoutLogging initializeroverriderailsstdoutlogginglogger after railsstdoutlogging do Railslogger configlogger SemanticLogger Rails end So that now I have ruby per rails factor example of ussing ENV var to need for railsstdoutlogging On Heroku RAILSLOGTOSTDOUTtrue if ENV RAILSLOGTOSTDOUT present turn off file logging configrailssemanticloggeraddfileappender false configure logging to STDOUT like railsstdoutlogging ie io STDOUT and STDOUTsync true configsemanticloggeraddappenderio STDOUT level configloglevel formatter configrailssemanticloggerformat STDOUTsync true end Logs are printed twice in heroku console but not in heroku logs tail Heres the example app img width altscreen shot at am src Related to Eg I want to include severity to messages logged to Heroku ruby class LoggerMyFormatter LoggerFormatter def callseverity time progname msg severity msg n end end Railsapplicationconfigure do configlogformatter LoggerMyFormatternew end This works fine without rails factor but not with it PS with rails factor this doesnt work either and it does work without it ruby Railsapplicationconfigure do STDOUTsync true logger LoggernewSTDOUT configlogformatter LoggerMyFormatternew loggerformatter configlogformatter configlogger logger end As described here Ive run into the same issue I had recieved the following error when try to install rails factor im using rails and ruby screen shot at pm I have been switching apps to use the env file plus the dotenv gem by default Primarily this is to centralize the configuration into one place as it is in production on factor hosts This involves removing configuration files if possible and pushing the configuration values into env DATABASEURL and NEWRELICLICENSEKEY are examples which can be moved without any work Others like the configsecrettoken would require switching the initializer to use the environment I think this allows for more explicit documentation of parts of rails which could be improved for the future as described in 