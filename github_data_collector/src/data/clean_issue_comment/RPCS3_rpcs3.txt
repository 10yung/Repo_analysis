Handles Qt deprecation warnings see Handles some random warnings in cellVideoOut and RSXThread shouldnt affect anything Fixes a weird change in the VS filters that moved some random files to unwanted places closes Nowadays the game seems to be running and rendering nearly perfectly with the exception of cubemap reflections flickering It would seem like cubemaps render properly every other frame for example ignore transparency issues they are not present in the game nor on captures looks like I just chose wrong settings while saving the JPG Good frame notice reflections on the car goodframe Bad frame reflections are downgraded most noticeably on the rear windshield badframe Basing on my observations in RenderDoc it seems like reflections are rendered to a x cubemap texture and every other frame seems to have this cubemap either fully black or have only one side rendered Attached bad frame capture only have out of sides rendered while a good frame capture has them all As for the log file there seems to be nothing of use there except for the fact game spams E RSX x d cc RSX Could not gather all required slices for cubemap d generation Attaching an RSX capture dont know if it comes from a good or a bad frame and two RDC captures I bookmarked the draw call drawing the cars body in both captures as I consider it a good starting point for the analysis when you go to pick your character the wizards portrait is glitched the other are correct here is a rsx capture realms NPUB capturezip here is a renderdoc aswell Crashes on Kreeli Comet Clank section with F RSX x c c RSX class stdruntimeerror thrown Verification failed in file C projects rpcs rpcs Emu RSX Common texturecacheh This affects Vulkan and OpenGL backends When passing unmapped memory to those functions something unexpected happens The first memory transaction k unless cellFsSetIoBuffer is used todo is checked with EFAULT but the rest dont Instead they abort the operation return CELLOK and nreadnwrite is set to what succeeded to writeread until then To implement this functionality I added a new capability to vmcheckaddr and vmtryaccess Return number of bytes obey page flags requirements from start address Some other good side effects of this new functionality Simplified stack bounds check in PPU debugger fmt formatting of char no longer checks allocation of single bytes but as much as possible with one call of vmcheckaddr Fixed underflow of vmcheckaddr Testcase This also potentially fixes some page faults with some Unity games when passing page faults notifications enabled unmapped memory to those functions Ill wait for to be merged first as it simplifies this Hello Guys thanks for fixing the Vulkan API error in But now i get MEM Access violation at the exact same points in the game Partial display offset ingame very old bug but appears to be not reported I tried approx every options but it is always present even with OpenGL Image A purely speculative fix on my part I noticed OpenAL constantly ran out of buffer only when bufferingwhich resulted in audio being worse than unbuffered The calculations that are there seems sound but if unbuffered gets buffers buffered should get buffers for buffering presumablywhich ends up as because of div roundup This fixes OpenAL audio when buffering This is running on Manjaro with RADV LLVM on an RX Happens always when loading into a race either just before starting to show D graphics or after a few seconds Example of the moment when it crashes Doesnt seem to be a regression Ive always had this issue on Linux but I dont remember ever having it on Windows Attaching a log with Debug Output enabled RPCS loggz Let me know if you need anything else