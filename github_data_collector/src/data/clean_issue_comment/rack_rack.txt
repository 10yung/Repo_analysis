These should be escaped per RFC section which does not allow them in query strings Rack already handled these correctly when processing input the test changes are places where the values were checked directly without running it through an input processor Fixes Fixes warning when binary Regexp is used to match against a CGI value QUERYSTRING ASCII BIT encoding is already required for response bodies Requiring this encoding for all CGI values would break usage with puma and potentially other rack servers So it seems safest to only require ASCII BIT encoding when the value actually contains nonASCII We could further limit it to just QUERYSTRING but Im not sure we want to do that Testing with a few rack servers Unicorn always uses ASCII BIT for all CGI values Puma will use UTF for some values but uses ASCII BIT for CGI values contianing nonASCII characters Webrick doesnt support nonASCII chracters at least for PATHINFO or QUERYSTRING If we dont do this the only way to avoid the warning would be to duplicate QUERYSTRING if it is not already binary Checking encoding will slow down parsing even if it already uses ASCII BIT encoding Fixes This is a regression introduced in Rack possibly after c f a a b ca c ec d bb e was introduced Before the aforementioned commit MockResponsebody would return a UTF string as it joins all the response parts together However because the aforementioned commit uses Stringnew without specifying an encoding Ruby would create a new String with ASCII BIT encoding by default This commit adds failing test cases to prevent future regression to ensure that we return UTF String for all string body and also making sure that we return binary string if any of the response part is a binary string with ASCII BIT encoding As a side note I found out about this regression after upgrading to Rack and found out that API documentation which is generated using rspecapidocumentation no longer show JSON response body After digging through the code it turns out they check for string encoding to see if they should include the response body in the documentation or not After than I dug through the code and found c f a a b ca c ec d bb e which uses Stringnew without specifying the encoding Please let me know if theres any further work on this PR needed to get it merged or if Im wrong to assume that I should get UTF String back from MockResponsebody Thank you This is stricter than what was previously required However nonhash response headers would break most of the middleware that accesses response headers Fixes If the body responds to topath the server is allowed to serve the file at that path and ignore the body That works well for most requests but not for range requests since the correct byte range wont be served Work around this issue by using a separate body class for the partial content responses that does not respond to topath and the current body class for nonpartial content responses Fixes Hi Im updating gems used by Sinatra app on Ruby After updated Sinatra from to and rack from to and run bundle exec rspec I got results such as FailureError subject getbaseurl nil header ArgumentError wrong number of arguments given expected Shared Example Group XXX called from specsomespecrb vendorbundleruby gemsrack librackbuilderrb in initialize vendorbundleruby gemsrack librackbuilderrb in new vendorbundleruby gemsrack librackbuilderrb in block in use vendorbundleruby gemsrack librackbuilderrb in block in toapp vendorbundleruby gemsrack librackbuilderrb in each vendorbundleruby gemsrack librackbuilderrb in inject vendorbundleruby gemsrack librackbuilderrb in toapp vendorbundleruby gemssinatra libsinatrabaserb in new vendorbundleruby gemssinatra libsinatrabaserb in prototype vendorbundleruby gemssinatra libsinatrabaserb in block in call vendorbundleruby gemssinatra libsinatrabaserb in synchronize vendorbundleruby gemssinatra libsinatrabaserb in call vendorbundleruby gemsracktest librackmocksessionrb in request vendorbundleruby gemsracktest libracktestrb in processrequest vendorbundleruby gemsracktest libracktestrb in customrequest vendorbundleruby gemsracktest libracktestrb in get I think the error raises from this line Before updating these gems Ive never been get such errors Is this error related to this gem or the other gem Or is it the bug of my apps system configuration ruby p rack sinatra I have noticed that other projects which use RackHandlerWEBrick directly will pass in WEBrick options ex BindAddress as opposed to the standard Rack options ex Host This change prevents overriding any BindAddress options that were explicitly passed in See When you use RackMockRequestrequest the returning value is a RackMockResponse which is a subclass of RackResponse Given Rack removed RackResponsetoary RackLint should explicitly invoke toa to extract status headers and body from current response Without this patch youll get errors like the following shell Failures HanamiRouterroot path recognition block recognizes FailureError actual apprequestGET lint true NoMethodError undefined method toi for RackMockResponse x f d c Did you mean tos toa Userslucagemruby gemsrack libracklintrb in block in checkstatus Userslucagemruby gemsrack libracklintrb in assert Userslucagemruby gemsrack libracklintrb in checkstatus Userslucagemruby gemsrack libracklintrb in call Userslucagemruby gemsrack libracklintrb in call Userslucagemruby gemsrack librackmockrb in request specintegrationhanamirouterroutingspecrb in block levels in top required After updating to all my tests checking for the ContentLength header in responses are failing It seems like the header is not set anymore somehow Here is an example ruby configru frozenstringliteral true run lambda Hello world ruby specrb require rspec require rspecits require rack require racktest RSpecconfigure do config configinclude RackTestMethods end describe App do def app RackBuilderparsefileconfigrufirst end context when GET do subjectres get itsstatus isexpectedto be itsheaders areexpectedto includeContentLength itsbody isexpectedto eql Hello world end end ruby testrb require minitestglobalexpectationsautorun require rackmock describe App do def app RackBuilderparsefileconfigrufirst end def request RackMockRequestnewapp end it GET do response requestget responsestatusmustequal responseheader ContentLength mustequal responsebodymustequal Hello world end end Gemfile ruby frozenstringliteral true source gem rack gem rack git gem racktest gem rspec gem rspecits gem minitest gem minitestglobalexpectations Put these files in a same directory and run rspec specrb if using RSpec or bundle exec ruby testrb to use Minitest Output with Rack and RackTest rspec specrb F Failures App when GET headers is expected to include ContentLength FailureError itsheaders areexpectedto includeContentLength expected to include ContentLength Diff ContentLength specrb in block levels in top required Finished in seconds files took seconds to load examples failure Failed examples rspec specrb App when GET headers is expected to include ContentLength Output with Rack and RackTest rspec specrb Finished in seconds files took seconds to load examples failures I dont really know where the issue comes from but if I put use RackContentLength in the configru specs pass with 