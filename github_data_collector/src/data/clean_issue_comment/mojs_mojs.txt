I want to play an animation and wait until it finishes I checked the docs and tutorials and I did not find an API that returns a promise or something It seems theres no related discussion here so I would like it to ask if theres a standard way of doing this What I am doing now is wrapping it in a promise and it works fine javascript const burstPromise new Promiseresolve const burst new mojsBurst radius count children duration onComplete resolve burstplay await burstPromise To make animations accessible per default maybe we should add a reduced motion media query test before playing any animation Then via a prop you could disable this so it always plays This could be fine for smaller animations and animations with just opacity or color changes So it would be up to the developer to decide if the animation is safe Was somebody able to make this thing work with react and functional components Would be great if somebody could share some ideas After changing git to legomushroomgrock we still have some issues with other dependencies error Command failed Exit code Command git Arguments lsremote tags heads sshgitgithubcomNikkunodebrowserifygit Directory Usersdrufprojectsmojs Output ERROR Repository not found fatal Could not read from remote repository Please make sure you have the correct access rights and the repository exists info Visit for documentation about this command silly resolveWithNewModule watchify checking installable status silly fetchPackageMetaData error for browserifygithubNikkunodebrowserifylocalfix Error while executing silly saveTree karmabrowserify silly saveTree convertsourcemap silly saveTree jsstringescape silly saveTree lodash silly saveTree minimatch silly saveTree watchify So it seems karmabrowserify watchify is the culprit I am facing an issue when running mojs in my mochaenzyme test environment I have a simple component with mojs included import mojs from mojs When running my mocha tests the following error occurs C myproject nodemodules mocha nodemodules yargs yargsjs else throw err TypeError Cannot read property of null at HelpersgetPrefix C myproject nodemodules mojs build mojs I think it is not possible to get the computed style from window when running in Node test environment right dom WebKitMozMSOmatchnew RegExp pre i mojs build mojs Is there any solution for that Kind regards Steven On line of mojs you use the following regex nRgx d d e d e gim where it seems like you are trying to use e for an escape character but in javascript e matches e literally unlike in other regex dialects Hi sorry if this is a simple documentation issue but I dont get what it does or what its supposed to be doing I guess Isnt properties already used to inject the module with new stuff why another o object that is used separately And if o is just for additional properties then why does it continue to be used through the code instead of just being copied over to the class mojs is throwing an error while chaining the mojsHtml tweens with a then clause See a reproduction here To see nonbuggy behaviour set the SHOWBUG to false NOTE the error wont show up on first run but on subsequent runs So to reproduce the bug just change any value in the tween functions to force a rerender or just reset the SHOWBUG to true after setting it to false From my investigation I can see that while evaluating the then clause the whole props object is also being passed to the createDeltas function This does not happen in other tweens Shape for example For an object of the Html tween instance though the final effect this prop property being passed into createDeltas is that mojs tries to parse a colour from the el property and fails causing an exception I think the el or the prop property must be excluded from being passed into createDeltas somewhere near this place legomushroom any pointers npm ci is much faster and is meant for CI This PR is meant for evaluating the new ci command and testig the performance and compare the logs of Travis CI So far there is no option to not center the shape using negative margins It would be good to disable this disable the setting of position absolute and other things Also using a classname we always have to use important and thus it is not easy to overwrite the styles with clean CSS And the original element is not removed from the DOM The new generated one should inherit the old one and use its classes