With the Type Definition of Object it leaves it on the consumer of firebaseadmin to override the type definition to access things like customClaimsadmin many users may opt to use any here breaking type safety With that in mind would it be possible to use something like this typing in order to still allow type safety to some extent without needing the user to override the typing to consume it Error without this change Screen Shot at Example code overriding the typing Screen Shot at READ Step Are you in the right place Yes REQUIRED Step Describe your environment Firebase SDK version firebaseadmin Firebase Product Firestore REQUIRED Step Describe the problem As described in this blog and firestore documentation IN query is now supported But when I run this query js firestorecollectiontransactions whereuid uid wherenumber number wherestatus in pending success wheretype type orderByadminfirestoreFieldPathdocumentId desclimit get I get the following error js Error Value for argument opStr is invalid Acceptable values are arraycontains at ObjectvalidateEnumValue srvnodemodulesgooglecloudfirestorebuildsrcvalidatejs at validateQueryOperator srvnodemodulesgooglecloudfirestorebuildsrcreferencejs at Querywhere srvnodemodulesgooglecloudfirestorebuildsrcreferencejs at exportscreateoidv functionsrunWithhttpsonCall srvindexjs at func srvnodemodulesfirebasefunctionslibprovidershttpsjs at anonymous at processtickDomainCallback internalprocessnexttickjs Adds missing multifactor related claims to the DecodedIdToken interface Modules like Firestore and Storage used to have the following bit of code This allowed checking if the SDK was initialized with ADC and if so delegating the credential loading back to the corresponding GCP library In other cases eg custom credentials an error was thrown But in the v release this code was refactored into this But this is not quite equivalent to the logic we used to have because ApplicationDefaultCredential MetadataServiceCredential RefreshTokenCredential loaded from wellknown path CertCredential loaded from environment variable The new ComputeEngineCredential only accounts for the MetadataServiceCredential In order to cover the remaining cases we need to differentiate the credentials that were explicitly instantiated by the developer and the credentials that were implicitly loaded by the SDK This PR implements this capability and updates the rest of the code that depends on this behavior Resolves Using the new version of firebaseadmin firebasefunctions deployments using NodeJS with the Firebase CLI fail Reverting firebaseadmin to version resolves the issue Here is the command used to deploy functions firebase deploy only functions Deploying to ipregistrydashboarddev i deploying functions Running command yarn cwd functions run clean yarn run v rm rf dist Done in s Running command yarn cwd functions run lint yarn run v tslint p tsconfigjson Done in s Running command yarn cwd functions run build yarn run v yarn run lint nodemodulesbintsc tslint p tsconfigjson Done in s Running command cp r RESOURCEDIRkeyfiles RESOURCEDIRdist functions Finished running predeploy script i functions ensuring necessary APIs are enabled functions all necessary APIs are enabled i functions preparing functions directory for uploading Error Error occurred while parsing your function triggers Error Failed to initialize Google Cloud Firestore client with the available credentials Must initialize the SDK with a certificate credential or application default credentials to use Cloud Firestore API at FirebaseFirestoreErrorFirebaseError as constructor homeXfunctionsnodemodulesfirebaseadminlibutilserrorjs at new FirebaseFirestoreError homeXfunctionsnodemodulesfirebaseadminlibutilserrorjs at getFirestoreOptions homeXfunctionsnodemodulesfirebaseadminlibfirestorefirestorejs at initFirestore homeXfunctionsnodemodulesfirebaseadminlibfirestorefirestorejs at new FirestoreService homeXfunctionsnodemodulesfirebaseadminlibfirestorefirestorejs at homeXfunctionsnodemodulesfirebaseadminlibfirebaseappjs at FirebaseAppensureService homeXfunctionsnodemodulesfirebaseadminlibfirebaseappjs at FirebaseAppfirestore homeXfunctionsnodemodulesfirebaseadminlibfirebaseappjs at Objectanonymous homeXfunctionsdistcallablesaccountactivatejs at Modulecompile internalmodulescjsloaderjs The line from accountactivejs is const firestoreDatabase adminfirestore Firebase admin initialization is made as follows import FirebaseAdminHelper from helpersfirebaseadminhelper const admin FirebaseAdminHelperinitializeApp const auth adminauth const config functionsconfig const firestoreDatabase adminfirestore where FirebaseAdminHelper is defined as follows import as admin from firebaseadmin export class FirebaseAdminHelper static initializeApp adminappApp try return admininitializeApp catch error Ignore already initialized errors This case should only happen locally while deploying not on real environments return adminapp Is your feature request related to a problem Please describe I am converting APNs tokens to Firebase registration tokens FRTs onthefly in a backend push service Many converted FRTs fail with the error messaginginvalidargument with no clues of whats going on Through some fairly time consuming debugging using the Google API Explorer I was able to get some more details on what was happening but its a frustrating process Describe the solution youd like Provide the raw HTTPS response in the thrown FirebaseMessagingError The python SDK has this so I think it makes sense that the Node one would too It would be especially helpful in cases like this where the error code doesnt make much sense Describe alternatives youve considered The only real option to attain more info would be to use the REST API directly but that feels a little over the top Additional context Theres definitely a possibility that the server or app is misconfigured somehow Fixing the error is not the point here though Our indexdts file is massive and continues to grow lines as of today This makes locating specific elements and changing them difficult This PR attempts to split the file into a number of smaller components by moving the servicespecific API definitions to separate files The downside of this change is that because of the limitations in TypeScript we have to explicitly reexport each public type in the indexdts file again indexdts import as auth from auth declare namespace adminauth export import Auth authadminauthAuth export import UserRecord authadminauthUserRecord and so on This means whenever a new APItype is added we have to update files instead of one I still feel like having smaller files outweighs this drawback This issue is also likely to go away in a future version of TypeScript Regardless Id like to see what others think about this change I have verified the TypeScript integration tests and the doc generation pipeline with this PR and did not find any issues Operating System version debian Firebase SDK version and Firebase Product Firestore Nodejs version node slim Getting the following error but not all the time js commit error TypeError Cannot read property writeResults of null at appnodemodulesgooglecloudfirestorebuildsrcwritebatchjs at processImmediate internaltimersjs From previous event at WriteBatchcommit appnodemodulesgooglecloudfirestorebuildsrcwritebatchjs This only happens in node Works in node and node Replaces scrypt npm module no longer maintained and doesnt work for node for testing standard scrypt with cryptoscryptSync which has been supported since node v This PR allows callers to retrieve a list of users by unique identifier uid email phone federated provider uid as well as to delete a list of users RELEASE NOTE Added getUsers and deleteUsers APIs for retrieving and deleting user accounts in bulk