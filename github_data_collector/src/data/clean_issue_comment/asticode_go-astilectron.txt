Id been running into a problem for a while with an electron process being left running after closing the main window This process rockets up from CPU while the main process is running to after the applicatoin has closed which has a very detremental effect on the computer after it happens a few times After a bit of experimentation it seems to reliably happen after opening the debug panel and then closing the main window The core process shuts down but it seems the debug window remains orphaned Im relatively new to using astillectron with bootstrap is there a way to find the list of active windows as it shuts down Similarly it would be nice to have an event handler for when new windows are created so that if they are created from the window by JavaScript or otherwise that the Go backend can be updated with their creation Ideally an end solution would be that on close the application should clean up all active windows so that it doesnt leave zombie children behind Hello I just started learning to code with goastilectron and while designing a custom menu bar I noticed that there doesnt seem to be a native function for toggling between normal window mode and fullscreen mode I know you can start a window in fullscreen or use the native menu bar by assigning the role MenuItemRoleToggleFullScreen but thats not really an option for me Have I overlooked something Is there some way to toggle fullscreen besides these possibilities or some kind of workaround eg calling some kind of event or change the windows appearance with different functions If theres no real fullscreen mode a borderless windowed mode might suffice too I hope this is the right place to ask such an question Thank you Hello Love the project I am wondering if there is any way to start goastilectron from the javascript side specifically the electron main process so that I can integrate goastilectron into my projects that already have a javascript backend Im looking for these two things The ability to create event handlers in javascript that can communicate with windows created in goastilectron for services that dont have good go libraries yet or have already been implemented in the projects js The ability to run the project by calling electron electronjs rather than running goastilectron directly that way any standard electron bundler can be used eg electronbuilder electronforge etc Ive provided below an example of the kind of API Im thinking of Is any of this possible From what I understand astilectron seems a little allornothing in this regard but perhaps Im missing something Thanks in advance details summarybExamplebsummary The javascript javascript electronjs entry point for the application import start getWindowsSync from astilectron import exec from childprocess import ipcMain from electron setup astilectron javascript side const port start Launch goastilectron go side see below let go execgoastilectronprojectbinary port main same as mainWindow in maingo Sync blocks until window is created const main getWindowsSync ipcMainonhandle in js message consoledebugreceived message in js mainwebContentssendreply And the go code go maingo entry point for go Package main is the goastilectron bindings for this app package main import githubcomasticodeastilog githubcomasticodegoastilectron func main var app astilectronNew astilectronWindowOptions var mainWindow appnewWindowfileworking dirappindexhtml nil mainWindowcreate mainWindowOnhandle in go funcm astilectronMessage Unmarshal var s string mUnmarshal s Process message astilogDebugfreceived s in go s json packagejson name projectname scripts startdev electron electronjs dependencies astilectron version number electron version number To run the project in development mode one would simply call bash electron electronjs or bash node run startdev details Partnering pull request can be found here asticodeastilectron We can have a simple arrangement in goastilectron and astilectron to support TCP Socket in Windows and UnixSocketUnix Domain Socket in other OS Mac and Linux Unix Socket will faster and lighter than other IP sockets In electron I use like thisjs code if winisFocused winshowInactive show and not focused winflashFrametrue flicker to attract the users attention How do I implement the function in astilectron Thanks a lot Electron has globalshortcut module can be used when the window is not focused Does goastilectron supports this feature or is there any solution to use this Thanks Partnering pull request can be found here The default ElectronAstilectron installation path is located inside C Users Admin AppData Roaming AppName vendor However the Electron Cache is located inside C Users Admin AppData Roaming Electron The Electron Cache should be located inside C Users Admin AppData Roaming AppName This issue causes conflicts with other Electron applications that use the same cache path by default Reproduction can be caused using goasilectron with the default parameters and a valid AppName Hi I created a window using React and I bundled everything together using the createreactapp I then added the resulting bundle into my Resources folder and created a new window var err error url filepathJoinaPathsDataDirectory publicconfigindexhtml opts astilectronWindowOptions AutoHideMenuBar astilectronPtrBooltrue AlwaysOnTop astilectronPtrBoolfalse Transparent astilectronPtrBoolfalse Closable astilectronPtrBooltrue Minimizable astilectronPtrBooltrue Frame astilectronPtrBooltrue Movable astilectronPtrBooltrue SkipTaskbar astilectronPtrBoolfalse Resizable astilectronPtrBooltrue Show astilectronPtrBooltrue Icon astilectronPtrStrpubliclogoonyoico Initialize the window connectorConfigWindow err aNewWindowurl opts if err nil connectorConfigWindow nil return err Register callbacks must be done before the create so that the DidFinishLoad can execute connectorConfigWindowOnastilectronEventNameWindowEventDidFinishLoad connectorConfigonWindowLoaded connectorConfigWindowOnMessageconnectorConfigonConfigMessage Create the window err connectorConfigWindowCreate if err nil connectorConfigWindow nil return err The problem is that when this window loads I get an error saying that it could not load the js chunks in the index file script srcstaticjs e a chunkjsscript script srcstaticjsmain b chunkjsscript Ive checked my code against the demo and I believe that the problem is the because Electron is considering it as the root of my file system instead of a relative path as you stated here When I removed it my app worked script srcstaticjs e a chunkjsscript script srcstaticjsmain b chunkjsscript My question is is there a way to make Electron load the scripts correctly without publishing them on a local server or having to change the indexhtml to remove the 