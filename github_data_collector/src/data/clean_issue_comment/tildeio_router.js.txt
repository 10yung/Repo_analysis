Closes It seems with Babel polyfill included ObjectisFrozen vs ObjectisExtensible has different meaning img width altchrome originalfailure src This change was tested on IE Chrome v Chrome latest IE has some other non related failure See screenshots below IE img width altie src IE img width altie src Chrome v img width altchrome src I am hitting this error with Emberjs v Screenshot at This is happening on older browsers like Android with Chrome v etc My app also includes Babel polyfill Heres my targetsjs setup use strict const browsers last Chrome versions last Firefox versions last Safari versions const isCI processenvCI const isProduction processenvEMBERENV production if isCI isProduction browserspushAndroid browserspushiOS browserspushie moduleexports browsers nodemodulesrouterjsdistcjstransitiondts error TS A type predicates type must be assignable to its parameters type Type typeof Transition is not assignable to type Dictunknown Index signature is missing in type typeof Transition export declare function isTransitionobj Dictunknown undefined obj is typeof Transition Discovered during the most recent GlimmerVM upgrade in Ember Seems theres still some incorrect typing need to be fixed Perhaps I am misunderstanding the very first step of the README that shows the following example of newing up the Router class but the Typescript definition of Router is an abstract class import Router from routerjs var router new Router Upon upgrading to Ember x I found that the JavaScript console had strange messages being logged from this library like Transition Attempting URL transition to myroute undefined Preparing to transition from to myroute Transitioned into myroute The st rd and th messages all seem to stem from an incorrect check in the log function at I think if argumentslength should be replaced with if argslength Im using the new Ember routerService to build the browsers history in jsland for the purposes of showing nav backforward buttons think iOS app nav buttons One issue Im facing is when to detect that a routeDidChange was the consequence of a browser backforward event This can be known if I hook into the windowonpopstate event but unfortunately this fires after routeDidChange So Ive delved into the transition object in the hope of some clue as to whether a specific transition was browser initiated rather than a usual ember routing event It seems that transitionurlMethod may be this from my limited testing it seems that transitionurlMethod will be null when a browser backforward action triggered the transition and I can therefore use a null value as a indication that some kind of backforward was used Ive searched the codebase to see whether this is a safe assumption but it seems that none of the comments specifically identify this So my question is can I safely use transitionurlMethod to indicate in my code that a transition was not triggered by Ember and therefore is likely a browsertriggered backforward transition The READMEmd file says routergetHandler functionname return myHandlers name This doesnt seem to do anything but having dug into the library it seems to error on thisroutergetRoute not being defined Should the READMEmd say that routergetRoute needs to be set instead With that said I did change my code to set getRoute which did stop the error but my handler is still not being called Is there a working example anywhere that I could follow For the most part a Transition is immutable The exception to this is query params We should investigate a strategy where we Transitions are always immutable