Hi guys Hope you are all well I tried to find some documentation but could not find it How to migrate legacy termui integration to v bash dashboardgo undefined termuiNewList dashboardgo undefined termuiNewPar dashboardgo undefined termuiNewPar dashboardgo undefined termuiNewPar dashboardgo undefined termuiNewPar dashboardgo undefined termuiNewPar dashboardgo undefined termuiNewPar dashboardgo undefined termuiNewPar dashboardgo undefined termuiNewPar dashboardgo undefined termuiBody What is replacing termuiNewList termuiNewPar termuiBody here is the code go package main import fmt time githubcomgizaktermuiv func dashboardstopTheUI stopTheCrawler chan bool if err termuiInit err nil panicerr defer termuiClose var snapshots Snapshot logWindow termuiNewList logWindowItemFgColor termuiColorYellow logWindowBorderLabel Log logWindowHeight logWindowY totalBytesDownloaded termuiNewPar totalBytesDownloadedHeight totalBytesDownloadedTextFgColor termuiColorWhite totalBytesDownloadedBorderLabel Data downloaded totalBytesDownloadedBorderFg termuiColorCyan totalNumberOfRequests termuiNewPar totalNumberOfRequestsHeight totalNumberOfRequestsTextFgColor termuiColorWhite totalNumberOfRequestsBorderLabel URLs crawled totalNumberOfRequestsBorderFg termuiColorCyan requestsPerSecond termuiNewPar requestsPerSecondHeight requestsPerSecondTextFgColor termuiColorWhite requestsPerSecondBorderLabel URLssecond requestsPerSecondBorderFg termuiColorCyan averageResponseTime termuiNewPar averageResponseTimeHeight averageResponseTimeTextFgColor termuiColorWhite averageResponseTimeBorderLabel Average response time averageResponseTimeBorderFg termuiColorCyan numberOfWorkers termuiNewPar numberOfWorkersHeight numberOfWorkersTextFgColor termuiColorWhite numberOfWorkersBorderLabel Number of workers numberOfWorkersBorderFg termuiColorCyan averageSizeInBytes termuiNewPar averageSizeInBytesHeight averageSizeInBytesTextFgColor termuiColorWhite averageSizeInBytesBorderLabel Average response size averageSizeInBytesBorderFg termuiColorCyan numberOfErrors termuiNewPar numberOfErrorsHeight numberOfErrorsTextFgColor termuiColorWhite numberOfErrorsBorderLabel Number of xx errors numberOfErrorsBorderFg termuiColorCyan elapsedTime termuiNewPar elapsedTimeHeight elapsedTimeTextFgColor termuiColorWhite elapsedTimeBorderLabel Elapsed time elapsedTimeBorderFg termuiColorCyan draw func snapshot statsLastSnapshot ignore empty updates if snapshotTimestampIsZero return dont update if there is no new snapshot available if lensnapshots previousSnapShot snapshots lensnapshots if snapshotTimestamp previousSnapShotTimestamp return capture the latest snapshot snapshots appendsnapshots snapshot log messages logWindowItems statsLastLogMessages total number of requests totalNumberOfRequestsText fmtSprintfd snapshotTotalNumberOfRequests total number of bytes downloaded totalBytesDownloadedText formatBytessnapshotTotalSizeInBytes requests per second requestsPerSecondText fmtSprintf f snapshotRequestsPerSecond average response time averageResponseTimeText fmtSprintfs snapshotAverageResponseTime number of workers numberOfWorkersText fmtSprintfd snapshotNumberOfWorkers average request size averageSizeInBytesText formatBytessnapshotAverageSizeInBytes number of errors numberOfErrorsText fmtSprintfd snapshotNumberOfErrors time since first snapshot timeSinceStart timeNowSubsnapshots Timestamp elapsedTimeText fmtSprintfs timeSinceStart termuiRendertermuiBody termuiBodyAddRows termuiNewRow termuiNewCol logWindow termuiNewRow termuiNewCol totalBytesDownloaded termuiNewCol totalNumberOfRequests termuiNewCol requestsPerSecond termuiNewCol averageResponseTime termuiNewRow termuiNewCol numberOfWorkers termuiNewCol numberOfErrors termuiNewCol averageSizeInBytes termuiNewCol elapsedTime termuiBodyAlign termuiRendertermuiBody termuiHandlesyswndresize funce termuiEvent termuiBodyWidth termuiTermWidth termuiBodyAlign termuiClear termuiRendertermuiBody termuiHandlesyskbdq functermuiEvent stopTheCrawler true termuiStopLoop termuiHandletimer s funce termuiEvent draw stop when the crawler is done go func select case stopTheUI wait seconds before closing the ui timeSleeptimeSecond termuiStopLoop termuiLoop Cheers X Whats the reason that text displayed in termui cant be selected with the mouse for copyandpaste The curses library supports it tools like top allow the user to select text and copy it This seems to be related to which claims it only happens after a while but Ive found it happens right from the start even with a simple hello world program on both Mac and Linux Would be great if you could add some hints on why this is this would be a great thing to have for termui and downstream projects like termdash as almost all users expect this to work in a terminal UI As shown in the table demo there is a method to remove row separators uiRenderprimary table widgetsNewTable table Rows string stringheader header header stringFoundations Golang is so cool Im working on Ruby string table TextStyle uiNewStyleuiColorWhite table TextAlignment uiAlignCenter table RowSeparator false table SetRect uiRendertable The table widget seems very promising to display things as a grid for example I am attempting to make my own terminal based battleship Only not having the option to hide column separators makes it impossible to do so Not sure if this is by design or a bug When using text with tabs in it t the tabs are removed In my use case I am loading go source files into a paragraph widget and all indentation is lost If it is by design shouldnt they at least be replaced by or spaces Seems to me like any of these will be a better default behavior than removing them unless there is a particular issue that removing them solves Reproduction code go package main import ui githubcomgizaktermuiv githubcomgizaktermuiv widgets func main if err uiInit err nil panicerr defer uiClose uiThemeParagraphTextFg uiColorClear uiThemeBlockBorderFg uiColorClear uiThemeBlockTitleFg uiColorClear p widgetsNewParagraph pText tabs tare tignored ntest pSetRect uiRenderp for e range uiPollEvents if eType uiKeyboardEvent break Actual output tabsareignored test Expected output tabs are ignored test Right now when working with light terminal background there are quite a few places that need to be overridden from ColorWhite to ColorClear or some other color that is readable on white background Not only this makes development and experimentation a little lengthier I suspect it also causes developers who publish packages that rely on termui to have a default theme that is not friendly to light background users I believe that if ColorClear is used as the default color and both ColorBlack and ColorWhite are avoided in all the defaults this will be a good starting point for everybody and will provide a sensible theme that works out of the box for both dark and light background users No matter what order I put in for Rows in widgetsList the color wouldnt work for the first items The first item would display normally but in the default white color even if I put something like text fggreen Option to hide table column seperator If a bar charts values are all zero the program tries to allocate all available memory and crashes For mouse support in list widget need export TopRow for calculate SelectedRow under mouse cursor 