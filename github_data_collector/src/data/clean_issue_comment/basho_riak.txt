It seems riak limited with erlang how can I use latest erlang with develop branch Is there a plan to support latest erlang versions Does not work when trying to create a new bucket At the same time I also wonder if its worthwhile considering moving away from the unfortunate need to create a json formatted props string when specifying config at the point of creation Im sure that this has been talked about before there may even be open issues for it somewhere RPC to riak failed EXIT functionclause riakkvconsolebuckettypecreate foo file datajenkinsagentworkspaceriak relpkgoutBUILD riak gd acf abuilddefaultlibriakkvsrcriakkvconsoleerl line rpchandlecallcall fun filerpcerlline Hi we are going to upgrade our riak cluster from to p can we do it directly or some intermediate steps required Can we upgrade our cluster via adding additional nodes with p version may be some configuration changes required or rolling upgrade is preferred way UPDATE Is there a plan to upgrade bashos docker images for riak Some riaktest tests eg ensembleremovenode require a patch that survives restart using rtinterceptaddandsave This add and save uses the bashopatches folder which is required to be in the code path of the node However this is no longer in the code path in develop The mkdir command in rebarconfig has been switched to riakpatches However although switching that back to bashopatches will create the path in make devrel it will not add the path to the codepath ie if you start a node and then call codegetpath from riak remoteconsole it is not included Is this a relx issue martincox might you be able to take a look Can Riak be upgraded directly to or are intermediate steps required A race condition in AAE causes the same eleveldb iterator to be used in two different erlang processes This can result in a kernel general protection fault or a segfault which terminates the erlang beam process immediately The condition is caused by several compounding bugs One of the main ones is in the terminate clause of the riakkvvnode which updates all hashtrees on a nodes shutdown With a large amount of data in AAE store this causes the vnode to take longer than seconds and crash on its way down The race condition is triggered and has been replicated via the following Trigger an AAE exchange for Preflist P between Node and Node Stop Node when it has fired off the riakkvindexhashtreecompare call in the riakkvexchangefsm Trigger an AAE exchange for Preflist P on Node and Node Node will now have two processes using the same eleveldb iterator The race condition occurs due to riakkvexchangefsm stopping on Node shutdown which causes the riakkvindexhashtree locks to be released on Node and Node However the riakkvindexhashtreecompre call is a spawend off process which is still running due to the bug mentioned above that causes the riakkvvnode to stay up for seconds on a nodes shutdown The comparsion on Node is still active for seconds and sends to Node riakkvindexhashtreeexchangesegment calls This call utilises the eleveldb iterator stored in the riakkvindexhashtree state The new exchange between Node and Node causes an spawnd of process to update the eleveldb iterator save it to state and then update the hashtree With an exchangesegments call coming in after this we now have two processes using the same eleveldb iterator Thus causing the general protection fault or segfault Taking down a seperate node to the node that has been requested to stop The number of nodes this could potentially take down is the lowest out of the highest nval the anti entropy concurrency limit While the edge case is extremely difficult to hit we can mitigate the race condition by stopping exchanges while stoppping any node in the cluster To stop exchanges do the following riak attach riakcoreutilrpceverymemberannriakkventropymanager setmode manual riakcoreutilrpceverymemberannriakkventropymanager cancelexchanges To start the exchanges again riak attach riakcoreutilrpceverymemberannriakkventropymanager setmode automatic At the moment AAE does not handle objects that expire As such even though the data has gone the entry in the AAE hashtree remains until the hashtree is cleared and rebuilt Should you have a lot of items that expire this can cause AAE clearing to take a very long period of time Quick example I store user sessions in one backend and they expire after an hour AAE runs once monthly Assuming that AAE just completed After hour I have hours worth of data and hours worth of AAE data All good After hours I have hours worth of data and hours worth of AAE data Ok but not ideal After hours I have hours worth of data and hours worth of AAE data Ok but not ideal After hours I have hours worth of data and hours worth of AAE data Not very happy After hours I have hours worth of data and hours worth of AAE data Annoyed now After days I have hours worth of data and hours worth of AAE data Somewhat insane Now AAE gets to clear the hashtree but during the hashtree clearing process should more than hashtree tokens be used the node becomes locked until clearing completes ie incoming writes have to wait and start to time out As hashtree clearing deletes one item at a time from the hashtree the above hashtree bloat becomes a significant time waster Even assuming an average of only sessions per hour that is records to be cleared where there should only be Estimate ms to clear each item from the hashtree and we observe th percentile node put fsms taking in the region of minutes to complete in the worst cases To address the above I have two suggestions Adjust expiry to be a regular delete ie when called it deletes the entry from the AAE hashtree at the same time it deletes the data to be expired Adjust the way that hashtree clearing works so that it deletes all data in one go ala rm rf folder style rather than the current iteration over each item Hi folks The links on the downloads page are broken and point to the wrong S repository downloadsriakcom instead of downloadsbashocom All but the debian link are affected Heres the mac os link as it appears on the download page doesnt work Correct link is In order to prevent someone spoofing the inexistent downloadsriakcom s bucket and using it to propagate malware Ive created a bucket named downloadsriakcom empty but for a single file in it Please correct this issue asap and Ill then delete the bucket Thanks Thomas Blanchard relates to Compiling privatetmpriak z c fgdistdirriak depshypersrchypergberl failed privatetmpriak z c fgdistdirriak depshypersrchypergberl type gbtree is deprecated and will be removed in OTP use use gbtreestree or preferably gbtreestree ERROR compile failed while processing privatetmpriak z c fgdistdirriak depshyper rebarabort make compile Error make buildrel Error make bootstrap Error make ostype Error make package Error Need some eyes on the brew upgrade process 