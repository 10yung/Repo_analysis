I want to use cargo tree d in a CI It would be nice if cargotree exit with success exit code when there are no duplicates and exit with failure exit code when duplicates are found This implements a wishlist item from cc najamelan Before error There are multiple regex packages in your project and the specification regex is ambiguous Please rerun this command with p spec where spec is one of the following regex regex After regex v envlogger v prettyenvlogger v linky v homesanxiyngithublinky linky v homesanxiyngithublinky regex v publicsuffix v cookiestore v reqwest v linky v homesanxiyngithublinky Uses the f format specifier Adds the D DEPTHdepth DEPTH option Closes Example cargo tree D cargotree v Developercargotree cargo v envlogger v failure v petgraph v structopt v Things to consider This PR is technically a breaking change because now dependencies are truncated if they are farther down the dependency tree instead of if they were already printed ie deciding if we should truncate a dependency is breadth first Technically the dependencies are still actually printed depth first but I thought it was pretty weird to have deps printing out that were deeper than the specified limit only to have a printed later on This might lead to confusing behavior when used with the duplicate option though Right now this treats packages specified by package as the root package ie instead of erroring cargo tree D p syn error package syn v not found because syn is a transitive dependency with a depth it prints out the dependencies of syn that have a depth from syn not the real package root syn v procmacro v quote v unicodexid v Is this the desired behavior Should we print out a when truncating a dependency whose children are not being printed because they are above the depth limit and is also a duplicate Updating gitmirrorsustceducncratesioindex index Updating git repository Updating git repository Updating git repository Updating git repository Updating git repository Updating git repository error failed to select a version for ring required by package paritycrypto v which is depended on by mycrate v which is depended on by myprogram v versions that meet the requirements are the package ring links to the native library ringasm but it conflicts with a previous package which links to ringasm as well package ring v which is depended on by paritycrypto v which is depended on by ethcore v which is depended on by myprogram v failed to select a version for ring which could resolve this conflict Ive checked the options but none of them seems to help When crosscompiling its useful to know which crates are compiled for the host and which for the target The builddependencies and devdependencies sections are already useful for filtering some of this information However procmacro crates are shown as regular dependencies For example depth to only show my dependencies and their direct dependencies Similar to the nodevdependencies option it would be useful to be able to filter out build dependencies I tried running cargotree on my workspaces top level crate cargo tree i p fs error There are multiple fs packages in your project and the specification fs is ambiguous Please rerun this command with p spec where spec is one of the following fs fs cargo tree i p fs thread main panicked at no entry found for key libcore optionrs stack backtrace cargo tree i p fs fs v rustbreak v db v fileDprojectsmyprojectdb coretypes v fileDprojectsmyprojectcoretypes myproject v fileDprojectsmyproject webui v fileDprojectsmyprojectwebui myproject v fileDprojectsmyproject window v fileDprojectsmyprojectwindow myproject v fileDprojectsmyproject similartracks v fileDprojectsmyprojectsimilartracks myproject v fileDprojectsmyproject myproject v fileDprojectsmyproject window v fileDprojectsmyprojectwindow myproject v fileDprojectsmyproject But in Cargolock I have toml package name window version dependencies bidirmap registry coretypes db derivenew registry enumprimitive registry escapi git fpsloop glium registry lazystatic registry mozjpegsys registry numtraits registry palette registry serde registry serdederive registry shortmsg smartdefault registry typename package name glium version source registry dependencies backtrace registry fnv registry glgenerator registry glutin registry lazystatic registry smallvec registry package name glutin version source registry dependencies androidglue registry cgl registry cocoa registry corefoundation registry coregraphics registry dwmapisys registry gdi sys registry glgenerator registry kernel sys registry lazystatic registry libc registry objc registry osmesasys registry sharedlibrary registry shell sys registry user sys registry waylandclient registry winapi registry winit registry x dl registry package name winit version source registry dependencies androidglue registry cocoa registry corefoundation registry coregraphics registry dwmapisys registry gdi sys registry kernel sys registry lazystatic registry libc registry objc registry sharedlibrary registry shell sys registry tempfile registry user sys registry waylandclient registry waylandkbd registry waylandprotocols registry waylandwindow registry winapi registry x dl registry package name waylandkbd version source registry dependencies bitflags registry dlib registry lazystatic registry memmap registry waylandclient registry package name memmap version source registry dependencies fs registry kernel sys registry libc registry winapi registry So clearly fs is used by winit glutin glium etc Btw glium is used by the window sub crate not by the workspaces top level crate myproject So why cant cargotree detect this tree Using the feature of rustlangcargo to rename a dependency in order to use parts from two versions of same crate results in the following error when attempting to use cargo tree error failed to parse manifest at homedavidsrcbarCargotoml Caused by Dependency foo has different source paths depending on the build target Each dependency must have a single canonical source path irrespective of build target This is of course an interesting case to want to see the dependency tree and check duplicates I will share an actual Cargotoml that exhibits the problem shortly 