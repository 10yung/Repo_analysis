 Try with any for i Int until instead of for i until error error last tree to typer LiteralConstantString error symbol null error symbol definition null error tpe ClassclassOf javalangString error symbol owners error context owners anonymous class anonfunCumsum package Utils error error Enclosing template or block error error Template val local anonfun notype treetpeUtilsanonfunCumsum error scalaruntimeAbstractFunction mcDDDsp scalaSerializable parents error ValDef error private error error tpt error empty error error statements error DefDef final def applyx Doublex Double Double error method final triedcooking error apply error error parameter list error ValDef x Double error param synthetic triedcooking error x error tpt treetpeDouble error empty error error ValDef x Double error param synthetic triedcooking error x error tpt treetpeDouble error empty error error tpt treetpeDouble error Apply def applymcDDDspx Doublex Double Double treetpeDouble error AlgebraUtilanonfunCumsum thisapplymcDDDsp def applymcDDDspx Doublex Double Double treetpex Double x DoubleDouble error arguments error x x Double treetpeDouble error x x Double treetpeDouble error error error DefDef def applymcDDDspx Doublex Double Double error method specialized triedcooking error applymcDDDsp error error parameter list error ValDef x Double error param triedcooking error x error tpt treetpeDouble error empty error error ValDef x Double error param triedcooking error x error tpt treetpeDouble error empty error error tpt treetpeDouble error Apply def x Double Double in class Double treetpeDouble error x plus def x Double Double in class Double treetpex DoubleDouble error x x Double treetpeDouble error error error DefDef final def applyv Objectv Object Object error method final bridge error apply error error parameter list error ValDef v Object error param triedcooking error v error tpt treetpeObject error empty error error ValDef v Object error param triedcooking error v error tpt treetpeObject error empty error error tpt treetpeObject error Apply def boxx Double Double in object Double treetpeObject error scalaDoublebox def boxx Double Double in object Double treetpex DoubleDouble error Apply final def applyx Doublex Double Double treetpeDouble error AlgebraUtilanonfunCumsum thisapply final def applyx Doublex Double Double treetpex Double x DoubleDouble error arguments error Apply def unboxx Object Double in object Double treetpeDouble error scalaDoubleunbox def unboxx Object Double in object Double treetpex ObjectDouble error v v Object treetpeObject error error Apply def unboxx Object Double in object Double treetpeDouble error scalaDoubleunbox def unboxx Object Double in object Double treetpex ObjectDouble error v v Object treetpeObject error error error error error DefDef def init UtilsanonfunCumsum error method triedcooking error init error error ListNil error tpt treetpeUtilsanonfunCumsum error Block treetpeUnit error Apply def init scalaruntimeAbstractFunction mcDDDsp in class AbstractFunction mcDDDsp treetpescalaruntimeAbstractFunction mcDDDsp error AlgebraUtilanonfunCumsum superinit def init scalaruntimeAbstractFunction mcDDDsp in class AbstractFunction mcDDDsp treetpescalaruntimeAbstractFunction mcDDDsp error Nil error error error error error error error Expanded type of tree error error ConstantTypevalue ConstantString error error symbol value checkifrefutable does not exist in DataMomentsDataCumulantDataMomentsDataCumulantupdatethirdOrderMoments error Total time s completed Nov PM From fdietze on March Hi there im working on a project where I use ArrayBuffers in performancecritical sections In some places I was able to replace them with Arrays so they got whileoptimized by the scalaclcompilerplugin But in other cases it would make the code way more unreadable or easier to replace them with whileloops myself So Id like to see support for optimization of IndexedSeq in the scalaclcompilerplugin Thank you Felix Copied from original issue ochafiknativelibs java From fdietze on November It seems like there is no optimization for the parallelized collections in Scala This is optimized until map While this is not until parmap Whats the easiest way to get the parallelized collections optimized The CLCollections Thanks for this great compiler plugin It helped me a lot speeding up my existing project Copied from original issue ochafiknativelibs java From ochafik on September In Scala if you run the test object P extends App val t SystemcurrentTimeMillis val r to def isDivisxInt r forall x def findnIntInt if isDivisn n else find n println find printlnSystemcurrentTimeMillis t the forall is not optimized to a while loop and runs in the same time as without ScalaCL If you replace the r with its value to ie def isDivisxInt to forall x it is optimized and runs over times faster I think we should be able to get the same performance in both cases since r is immutable we know it will still be to Google Code Info Issue Author bunglegooglemailcom Created On T Z Closed On Copied from original issue ochafiknativelibs java Would this be possible Writing arr contains as an anonymous function just looks a lot more readable than p arr exists p What do you think Using such an anonymous function in a filterNot is quite handy the absence of support for diff on arrays I am now heavily using ScalaxyStreams in my current project and it is crucial to our performance However I frequently have an Array Array X and call flatten and then distinct Scalaxy seems to support flatten if the foolish optimization strategy is used which I didnt know earlier It would be great if distinct were supported as well Perhaps you could update the readmemd to list that flatten is supported too Thanks again for all of the brilliant work The following symbol seems to cause symbol ownership issues x not found anymore when rewriting the OptiongetOrElse stream def wrap T body T Option T Optionbody wrap val x Optionx getOrElse It is currently detected and mitigated skipped by StrategieshasKnownLimitationOrBug but needs to be fixed Could be related to duplicate of issue The following code snippet breaks the hell out of ScalaxyStreams symbol foo ends up not found in LambdaLift despite seemingly having the proper owner chain val msg try val foo Somefoo catch case ex Throwable None get msg It is currently mitigated by skipping any streams with a Try subtree as detected by StrategieshasKnownLimitationOrBug see but a proper fix is needed to replace this broad hack 