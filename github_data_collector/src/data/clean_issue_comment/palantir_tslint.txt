Example build failure The strictbooleanexpressions rule threw an error in homecircleciprojecttestrulesstrictbooleanexpressionsdefaulttestts TypeError Cannot read property length of undefined at checkIdentifier homecircleciprojectnodemodulestypescriptlibtypescriptjs at checkExpressionWorker homecircleciprojectnodemodulestypescriptlibtypescriptjs at checkExpression homecircleciprojectnodemodulestypescriptlibtypescriptjs at getTypeOfExpression homecircleciprojectnodemodulestypescriptlibtypescriptjs at getRegularTypeOfExpression homecircleciprojectnodemodulestypescriptlibtypescriptjs at getTypeOfNode homecircleciprojectnodemodulestypescriptlibtypescriptjs at ObjectgetTypeAtLocation homecircleciprojectnodemodulestypescriptlibtypescriptjs at checkExpression homecircleciprojectbuildsrcrulesstrictBooleanExpressionsRulejs at cb homecircleciprojectbuildsrcrulesstrictBooleanExpressionsRulejs at visitNode homecircleciprojectnodemodulestypescriptlibtypescriptjs testrulesstrictbooleanexpressionsdefaulttesttslint Failed RIght now the only mention of using to migrate packages is a comment deep in adidahiya mind if I edit that threads OP to mention it and send a PR to add it to the README Im also curious if there are other tools folks are using to migrate that we should post links to There are a bunch of otherwiseactionable issues and pull requests marked as breaking changes Lets come up with a timeline for getting to that fabled TSLint x version Straw man proposal close new rule issues lacking PRs per release the last X minor version one week waiting period in case there needs to be a X patch in case of critical bugs remove ignore breaking change label from existing issues PRs and start merging them in release tslint beta release tslint beta release tslint Thoughts cc adidahiya Updated proposal release the last x minor version prepare breaking changes to merge right after release tslint beta release tslint beta release tslint As you may have read in this blog post we plan to deprecate TSLint in and support the migration to ESLint as the standard linter for both TypeScript JavaScript This will not be an immediate deprecation on the contrary there is a lot of work to do to ensure a smooth transition to the new tooling without any regressions There are features test suites and conveniences in TSLint which we hope to retain in the migration There may be a period of time when there is overlap between the two tools and TSLint early adopters are recommended to run both linters to ensure full code check coverage to a reasonable degree such that performance doesnt suffer drastically I will be closing some feature requests in this repo which now feel out of scope because we expect them to be handled in the ESLint typescripteslint roadmap One example of a category of rules for which new feature requests are most likely to be closed rejected is formatting rules I have suggested splitting out these rules for quite some time because we use Prettier at Palantir and consider it a better tool for the job of formatting code TSLint will continue to release with important bug fixes and updates which keep it uptodate with the latest compiler language features Update June a more concrete roadmap timeline coordinated with JoshuaKGoldberg and tslintcontribmicrosoft August st Stop accepting new core rules Still accept bug fixes minor features and rule enhancements Custom rules are always an option and can be maintained outside this repo November st Stop accepting features or rule enhancements with the exception of ones that make migrating to typescripteslint easier Still accept bug fixes January st Stop accepting anything except security fixes December st Stop accepting any PRs Update August see tslinttoeslintconfig for a CLI command that migrates TSLint configuration files to ESLint configuration files 