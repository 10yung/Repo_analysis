Updates orgscalasbtsbt from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalasbt artifactId sbt details labels libraryupdate semverpatch In some of our projects we dont want to use the whole functionality of Scanamo We only need the mapping from case classes and other types to Dynamo ie exactly what DynamoFormat does Would you be open to the proposal to split the whole DynamoFormat functionality into a separate library like scanamoformat or sth like that Or are there any concerns about the separation Any other notes if somebody wants to try it Add support for Dotty compilation Closes For some reasons this is broken or at least I couldnt run it on my machine But since the library has evolved quite a lot recently the live docs have drifted and this is not a great onboarding experience x make sure the site is published whenever a tagrelease is pushed x make sure version numbers are up to date when the site is published x make sure examples are accurate according to the latest API changes base the documentation on these guidelines There are many data types in the cats library for which an instance is trivial to build See There are many data types in the standard library too datetimes and related numbers also we need to make sure these encoding preserve properties for those numbers Unit etc scala trait DynamoEncoder A def writex A DynamoValue trait DynamoDecoder A def readx DynamoValue Either DynamoReadError A trait DynamoFormat A extends DynamoEncoder A with DynamoDecoder A See It is not great that the testing framework repels potential contributors Its my fault I had to disable the automatic startstop as it was creating issues in CI and never got around to properly study the problem Partially addresses The new Key replaces UniqueKey and has two type parameters Key KT T KT identifies whether the table has a Simple or Composite key T is the type of key values In the Composite case it is actually T T KT is just a phantom type to make sure a key is correct by construction This changes ripples through the whole API notably Table is now indexed by these two types to make sure all APIs relying on keys receive correct values This is still a WIP as I want to tackle Query in here too because now we can enforce the query APIs can only be called when the table has a composite key at compile time which I think is great scala attrSomethinglike that thus Products Reserved words and variables containing special characters should be properly handled With that we can drop all the implicit string conversions lying around in the library Closes 