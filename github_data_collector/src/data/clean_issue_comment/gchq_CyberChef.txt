This pull request fixes the extraction of x formatted hex string for From Hex operation and adds x with comma option to To Hex operation It also allows the user to specify the amount of bytes in each line of the output Tests are also provided In the current version From Hex doesnt extract x formatted hex correctly when the deliminator is set to Auto For example given x x x the operation outputs nonASCII characters but the desired result is ABC With the added option x with comma in To Hex output bytes are separated with commas instead of cluttering together For instance recipeToHex x with comma inputR VucG ZGVyLCBnZWxhdGluZQpEeW hbWl ZSB aXRoIGEgbGFzZXIgYmVhbQ gives x x x e x x f x x x x x c x x x x c x x x x e x x a x x x e x x d x x x x x x x x x x x x c x x x x x x x x x d This can then be directly pasted into source code to say initialise a list Users can also format the output by using Bytes per line argument For instance recipeToHex x with comma inputR VucG ZGVyLCBnZWxhdGluZQpEeW hbWl ZSB aXRoIGEgbGFzZXIgYmVhbQ gives x x x e x x f x x x x x c x x x x c x x x x e x x a x x x e x x d x x x x x x x x x x x x c x x x x x x x x x d so that when pasted into codes the user doesnt have to manually format it into multiple lines Describe the bug The parseX certificate operation seems to mislabel the usage of a provided certificates key as digital signature when it should really be key encipherment To Reproduce Provide a PEM encoded encryption certificate as input see attached blahcomcertandpemzip Use the Parse X certificate operation Note the keyUsage field in the output which says digitalSignature Expected behaviour Use openssl to examine your certificate openssl x in testpem text This reports the X v Key Usage as Key Encipherment Similarly the output expected from the cyberchef operation should be keyEncipherment Desktop Version Compile time UTC UserAgent Mozilla Macintosh Intel Mac OS X AppleWebKit KHTML like Gecko Chrome Safari Describe the bug When clicking or selecting any text in the output page when using Safari the input text is visually duplicated with a vertical offset To Reproduce Using Safari add an operation and some input text Then select some of the output and notice the distortion in the input box This issue does not appear in Chrome on the same CyberChef version Expected behaviour No visual artefacts in the input box when selecting output Screenshots img width altimage src img width altimage src Desktop if relevant please complete the following information OS macOS Mojave Browser Safari CyberChef version This pull request adds new operations Salsa Encrypt and Decrypt and Chaha Encrypt and Decrypt along with Poly AEAD The algorithms are implemented using native Javascript so no new dependency is introduced libSalsa mjs is forked from MIT Licence The original code allowed only bit key but I added support for bit key as specified in DJBs spec libChacha mjs is implemented based on the Salsa code Both the bit and bit nonce variants are supported libPoly mjs and libChacha Poly mjs are forked from Public Domain The test vectors for Salsa were generated with PyCryptoDome For Chacha and Chacha Poly they were picked from and I would like to submit a pull request for an emulation of the WW SIGABA machine Please let me know of any comments Thank you This fixes by correcting the key size validation Tests have also been added for key sizes other than bytes Extractors added for DMPWindows Page Dump PFWindows Prefetch PFWindows Prefetch LNK Windows Shortcut and LZOPLZOP compressed data The fileSize field in the header is the number of bytes after that point rather than the number of bytes including everything up to that point So instead of fileSize we need fileSize Since the fileSize field itself is bytes long and the RIFF is bytes Describe the bug When I try to set a Blowfish key to a byte string I get Blowfish uses a key length of bytes bits To Reproduce Add a Blowfish node with a key that is not bytes long Expected behaviour It should work if the key is between and bytes long according to Wikipedia Im not sure whether this is a bug or behaviour by design but it seemed more appropriate to frame it as a bug than a feature or operation request Describe the bug As is standard the output of the Hexdump operation includes each line of hex data displayed as singlebyte characters with the unprintable characters replaced by a period The standard implementation of this is to only consider characters in the range x x e as printable but CyberChef prints a bunch of characters that have their high bit set To Reproduce Expected behaviour The character replaced by a period One of the advantages of displaying data in traditional hexdump format is that it looks the same to everyone because it can display arbitrary data while only using characters from the bit ASCII set which are the same for every common character encoding Additional context This comes down to the implementation of Utilsprintable which rather than designating a range or ranges of characters as printable it instead uses an enormous regex to define a bunch of ranges of unicode codepoints that are unprintable and strips them out This is probably the right way to go for other uses of the function but I feel thats too broad for Hexdump 