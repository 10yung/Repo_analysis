When I am using this library in our project it is working only partially due to the changes done by Chrome recently for Cross Origin Read Blocking Unlike the CORS this is applied to all requests that send any data back which can be pretty much every method I was able to get around it only after I commented out the OPTIONS header Ive seen in the past people were talking about having support for decorators instead of being stuck with just CORSURLSREGEX Id like to reopen the request to support decorators so that its very easy to limit CORS responses to specific views See Replace referer with requestgethost to match what django checks against in order to support XFORWARDEDHOST On the following line of code in CorsMiddleware the http host used for replacing referer is set as follows The problem is that if you use a reverse proxy and set settingsUSEXFORWARDEDHOST then the CsrfViewMiddleware fails on referer checking because it checks against requestgethost which will use the forwarded host name The solution would be for CorsMiddleware to also use requestgethost Will you make this change please Thanks For discussion see The checkrequestenabled signal can fire twice during processresponse but really we should only do it once Handlers could be expensive eg doing database queries and theres no reason they should be expected to cache their results Reported by markush There are some extensions in the AMP spec that we should aim to support somehow This is a continuation of the discussion at Consider a modern stack where there is a frontend application that is completely decoupled from the API server The cookies are still saved in the browser on the API server and they are sent with the request if withCredentials flag are set So far so good Maybe we should add some documentation regarding that too setting ALLOWCREDENTIALS server side should be coupled with setting withCredentials flag in the JS requests CSRF and CORS are at somewhat odds though since one is about preventing cross site requests that come from unauthorized sources whereas the other is a mechanism for accepting requests coming from authorized sources When CORS is enabled via this library there are currently no recommendations on how to deal with this however By default even if a cross site is added to the whitelist and potentially unsafe methods like POST PUT are allowed already enabled by default the API server will reject incoming POST requests due to missing CSRF token data There are a few different approaches that could be suggested Since we are explicitly allowing a crosssite request we can suggest the user to disable CSRF on those endpoints However CSRF protection should only be disabled if the request is coming from a whitelisted origin Can we just check the Origin header there AFAIK Origin header cannot be faked in a browser setting We could also suggest that the user disabled CSRF protection when the content type is JSON This has a caveat mentioned here Just an FYI Flash allows setting the ContentType for crossorigin requests as shown here You still need a CSRF token or custom header even if your endpoint requires a ContentType of applicationjson There the OP originally suggested we can leave off CSRF token when we do this but says he changed his mind afterwards Not sure what his current stance is cc homakov Could you give a recommendation here We could suggest the user to expose a csrf endpoint This endpoint will be hit by the crosssite before any POST request once when the site is loaded or everytime before a POST request Then the subsequent POST request should send this csrf token via a csrf header XCSRF This csrf endpoint should be protected against cross origin requests from other sites otherwise a malicious site can similarly retrieve the token via AJAX and send that with the POST data There might be some discussion of old vs modern browsers regarding CSRF and CORS