I had a client that needed to test multiple versions of chocolatey for validation of their software packages In the process it made sense to push this back to the team as its a pretty basic change I updated the URL such that it optionally adds a version number to the URI in accordance with the v chocolateyorg API This has the consequence of downloading the latest when the powershell script is run asis and additionally accepts a parameter of chocolateyVersion to specify the full version as specified here Would it be possible to get the timestamp of installation the packages installed by chocolatey eg when using choco list lo Want to reverse engineer all the packages installed locally however I need the timestamp to accurately reproduce the correct install script Eg see This feature has been implemented in my fork of Chocolatey here I suggest this as a feature in the new upcoming C rewrite of Chocolatey Feature description run Packages are packages that are not installed effectively turning them into scriptpackages The packages are not installed to lib folder but in every other aspects they are identical to ordinary packages When a package has the extension run this happens upon install The package is downloaded to librun tools chocolateyinstallps script is executed Package is removed from librun This is useful for scripts that do not install anything where the concept of uninstalling does not make sense and the script should therefore not appear in Chocolateys list of installed packages This also allows for running a script multiple times without uninstalling and reinstalling the package Our use case We develop and support a POS application for a chain of independent retail stores The application consists of a server part and a local installation at each stores POS computers POSPoint Of Sale In addition to supporting our own application we also have a contract for maintenance support etc of the POS computers We are in the process of setting up our own Chocolatey repository The intendended usage is Hosting setup packages for our own software which is quite frequently updated Hosting setup packages for a small selection of other software that we support and keep updated for the clients Acrobat Reader TeamViewer Microsoft Office Java runtime etc Hosting scripts that we want to be able to run at client computers We are also in the process of setting up a client server solution that gives us a permanent twoway connection between the central server and the clients using SignalR An important feature in this solution is the ability to have a command console from the server to the clients This allows for server operators to issue commands which are executed silently at client computers and the commands output is sent back to the server A bonus effect of using this in combination with Chcolatey is that we get an easy way to do software inventory By issuing Choco list lo from the central server we will get a list of all applications installed at a specific client computer or all computers or a subset of them We also have various scripts utilities that we occasionally need to run at client computers Defrag local databases Clean up temp folders Shrinkarchive log files etc Various maintenanceupgrades change computer name prepare computer for change of storeowner run SQL to patch error in database etc These might be run n times in the liftetime of a client computer System info type scripts List available diskspace List scheduled tasks Collect SMART info etc Temporary workarounds for known bugs problems in applications we support eg sometimes a customerdisplay will hang A permanent fix for this will be part of our next application release But in the meantime we have made a simple script that we can run at customers POS computer when the display hangs One time installationupgrades eg change config file of POS application to work with a new server Chocolatey NuGet Server is a near perfect fit for this A central repository where we can publish scripts and applications Client Chocolatey install that allows for downloading and automatically execution of script packages Use case vs existing Chocolatey features By having our scripts as ordinary Chocolatey packages we can see the following issues Script can only be run once To run again it has to be installed and uninstalled All scripts that have been run will appear in Chocolateys list of installed packages Some scripts might contain a large payload Our clients usually have small SSD drives No reason to fill up the disk with scripts that maybe will never be used again When a new script is published all installed scripts read scripts that have been run atleast once will be automatically rerun when we do cup all And if eg we publish a defrag script it will be quite weird behaviour to have your disk defragged when you update your applications We have considered a manual workaround for this Naming convention for packages that are not meant to be installed We settled for run as extension When someone install a run package they are supposed to immediately uninstall it If run packages show up in choco list lo they are supposed to be ignored But we realised that the workaround could be easily implemented in code Which led to this issue pull request Hey new to chocolatey and after getting an issue file against me to add a chocolatey package for I went to the the wiki to understand what that meant After just reading the wiki in particular its unclear to me what exactly I put in the package all the examples show using chocolateyInstallps to download from the web and run the installer This makes sense because most of top packages seem to be wrappers around existing applications Chrome Notepad etc But I dont have a installer or a web site with the binaries Is there a way to just put the executable in the package and call it a day If there is the wiki doesnt call this out It would be great if you had a flow chat ie if you have a traditional MSI on a web do this if you just have raw binary do this other thing etc Thanks MySqlWorkbench needs vcredist x Is there a way to make a dependency to be x I used chocolatey to install node I then went to install some packaged with npm using g global option Most packages are installed under c ProgramData chocolatey bin and are available immediately Examples of packages that are working correctly are gruntcli gulp yo When i install bower it gets installed in C ProgramData chocolatey lib nodejscommandline tools There was nothing put in c ProgramData chocolatey bin Of course it doesnt work because that directory isnt in my path While i could easily add that to my path im thinking that might be a bad idea because as node gets updated there will most likely be a new directory created under lib with the new version Is this a chocolatey issue or is this a nodenpm issue I am wondering why you arent simply using shortcuts soft or hard links instead of the generation of shim executables This seems to be a much simpler way with less complications Why did you decide against it Helpers such as InstallChocolateyEnvironmentVariable are able to perform their work in peruser or permachine all users scope The latter is generally preferred so that the installed package is correctly registered for all users but requires administrative privileges If a package wants to support both permachine when running with administrative privileges and peruser installations it currently needs to explicitly handle both cases in code eg if TestProcessAdminRights InstallChocolateyPath pathType Machine else InstallChocolateyPath pathType User If a package does not specify the scope User is assumed which is inconvenient now that permachine administrative installation is the secure and recommended approach Lets add an Auto scope parameter value which would be interpreted as Machine if user has administrative privileges and as User otherwise This should also be the default scope so that the amount of code required in typical packages is minimized There are several popular environment variables that are PATHlike in nature ie their values consist of segments separated by delimiters Examples include PSModulePath PATHEXT INCLUDE LIB CMAKEPREFIXPATH CLASSPATH I envision an InstallChocolateyEnvironmentVariableSegment helper that would take the variable name the delimiter character and the segment to add It would in essence be a generalization of InstallChocolateyPath NOTE This has been brought up in the Chocolatey google group here I hope its okay Ive put it in here as a feature request Ive got a package Im working on that has a deeply nested file structure Ive found this error when trying to install the package powershell getchilditem The specified path file name or both are too long The fully qualified file name must be less than characters and the directory name must be less than characters At C ProgramData chocolatey chocolateyinstall functions GetChocolateyBinsps char files getchilditem packageFolder include exe recurse CategoryInfo ReadError C ProgramData odules argparseString GetChildItem PathTooLongException FullyQualifiedErrorId DirIOErrorMicrosoftPowerShellCommandsGetChildItemCommand Digging a little deeper it looks like this is the line of code it doesnt like I dont really need this search for exes feature and would like to explicitly tell Chocolatey where my exe files are because the ones I really need are at a MUCH higher level than the rest of the project Feature request is to create a way of silently ignoring the error skipping the files or explicitly defining my exes As far as I know this is a limitation on windows and isnt something you can easily get around Thanks 