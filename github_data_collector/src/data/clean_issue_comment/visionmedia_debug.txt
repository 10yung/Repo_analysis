javascript debugdisable debugenablefoo assertnotdebugenabledbar assertnotdebugenabledbar throws returns true Has to be solved in two ways More stringent checks on namespaces as they shouldnt contain asterisks Remove the check for ns nslength which makes absolutely no sense Closes One possible solution to the memory leak and needless destroy method Will leave open for a while to allow people to test DO NOT SUBMIT ISSUES ASKING TO REMOVE ES IT WILL BE CLOSED IT WILL BE LOCKED We use ES for a reason Modern best practices dictate the use of tooling like Babel and babelpresetenv in order to target the browsers that make sense for your project For more information please see Please keep in mind that debug is downloaded installed transpiled and used millions of times per day If you have an error with debug its most likely your own configuration eg with Babel Webpack etc Unless you post ample evidence you have tried to fix this yourself it will most likely be determined that your issue is localized to your project not debug Coverity static analysis is complaining that enablenamespaces uses an unescaped user input as the basis for a regular expression It follows the path from the userdefined windowlocalStoragedebug value through the load function in browserjs into the enablenamespaces function in commonjs I understand that this debug input is used to control what is logged or not but it leaves the library and any dependent ones open to receiving crafted input that could cause a denial of service attack on the users browser ReDoS attack I dont believe this is an issue for a serverside DoS attack as the input on the server comes from an environment variable rather than the lessprotected browser context One solution might be to look at something like to defend against some types of problematic regexes there are other suggestions in that repos readme as well Whether to support running on deno This PR rewrites the README in relative accordance with the v roadmap Instead of multiple sections documenting different parts in a seemingly random order the new README documents the debug function directly and each of the parameters which encapsulate their own functionality If you need an extra hand with the rest of the roadmap feel free to add me as a collaborator Thanks ReactNative renders in a documentless mode but goes through the browser for their live builds Fortunately they tag the navigator as ReactNative making this easy to check for This diff adds supportscolor as an optional peer dependency Optional peer dependencies dont trigger warnings when users omit them They are supported by all package managers including npm Adding these lines will prevent package managers from incorrectly hoisting supportscolor in a way that would prevent debug from accessing it Ive written types for the project based on the latest version I assumed the formatArgs accepts Array of strings this is still experimental and I wish somebody will check my browser checking on indexdts as it is a bit hack solves DO NOT SUBMIT PULL REQUESTS REMOVING ES IT WILL BE CLOSED IT WILL NOT BE MERGED We use ES for a reason Modern best practices dictate the use of tooling like Babel and babelpresetenv in order to target the browsers that make sense for your project For more information please see DO NOT SUBMIT PULL REQUESTS REMOVING ES IT WILL BE CLOSED IT WILL NOT BE MERGED We use ES for a reason Modern best practices dictate the use of tooling like Babel and babelpresetenv in order to target the browsers that make sense for your project For more information please see This patch ensures we dont manually extract the stack or message from errors if we are running on Nodejs Instead utilinspectutilformat does this for us automatically The browser behaviour remains unaffected I added a unit test to verify the behaviour Fixes 