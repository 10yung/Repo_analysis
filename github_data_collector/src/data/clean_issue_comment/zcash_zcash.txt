The release height for this is roughly Tuesday This is a replacement of for It takes the commit from dagurval where a new test case rpcwalletzgetnewaddress is added and it adds a check for too many arguments which was the original post issue but it was missing in It uses CheckRPCThrows to test the error message of invalid argument however for too many arguments the full help message is displayed so i am just testing there is an runtime exception If this is merged and can be closed While running a debug build CONFIGUREFLAGSenabledebug on testnet recent master branch latest commit f cf a a f d e f a b ddbea Jan zcashd crashed while starting up but it was recently synced with the following assert message Press CtrlC to exit Set showmetrics to hide zcashd walletwalletcpp void CopyPreviousWitnessesNoteDataMap int int t with NoteDataMap stdmapJSOutPoint SproutNoteData int t long int Assertion ndwitnessHeight ndwitnessHeight indexHeight failed The assertion is reproducible Before this crash the zcashd had asserted with a lock ordering potential deadlock assert I no longer have the exact assertion text so it may be that this assertion left the data directory in an inconsistent state lack of clean shutdown causing zcashd to fail on startup every time I had never seen this failure before I think the lock ordering assertion is a known noncritical problem this ticket is not about that failure I started zcashd again using gdb and here are the most recent set of stack frames and then the variables involved in the assertion gdb bt GIraise sigsigentry at sysdepsunixsysvlinuxraisec x ffff b in GIabort at abortc x ffff a a in assertfailbase fmt x ffff a d d sssu ssAssertion s failed nn assertionassertionentry x f e ndwitnessHeight ndwitnessHeight indexHeight filefileentry x d walletwalletcpp linelineentry functionfunctionentry x cec void CopyPreviousWitnessesstdmapJSOutPoint SproutNoteData stdlessJSOutPoint stdallocatorstdpairJSOutPoint const SproutNoteData stdmapJSOutPoint SproutNoteData stdlessJSOutPoint stdallocatorstdpairJSOutPoint const SproutNoteData int longPRETTYFUNCTION void CopyPreviousWitnessesNoteDataMap int int t with NoteDataMap stdmapJSOutPoint SproutNoteData int t long int at assertc x ffff a in GIassertfail assertion x f e ndwitnessHeight ndwitnessHeight indexHeight file x d walletwalletcpp line function x cec void CopyPreviousWitnessesstdmapJSOutPoint SproutNoteData stdlessJSOutPoint stdallocatorstdpairJSOutPoint const SproutNoteData stdmapJSOutPoint SproutNoteData stdlessJSOutPoint stdallocatorstdpairJSOutPoint const SproutNoteData int longPRETTYFUNCTION void CopyPreviousWitnessesNoteDataMap int int t with NoteDataMap stdmapJSOutPoint SproutNoteData int t long int at assertc x ad ef in CopyPreviousWitnessesstdmapJSOutPoint SproutNoteData stdlessJSOutPoint stdallocatorstdpairJSOutPoint const SproutNoteData noteDataMapstdmap with element indexHeight nWitnessCacheSize at walletwalletcpp x aac f in CWalletIncrementNoteWitnesses this x ab ccd pindex x fff c c pblockIn x fffb e sproutTree saplingTree at walletwalletcpp x aa in CWalletChainTipAdded this x ab ccd pindex x fff c c pblock x fffb e sproutTree saplingTree at walletwalletcpp x aa c in CWalletChainTip this x ab ccd pindex x fff c c pblock x fffb e added at walletwalletcpp x c fd in boostmfimf void CValidationInterface CBlockIndex const CBlock const boostoptionalstdpairlibzcashIncrementalMerkleTree ul libzcashSHA Compress libzcashIncrementalMerkleTree ul libzcashPedersenHash operator this x a ea p x ab cff a x fff c c a x fffb e a at homelarryzcashdependsx unknownlinuxgnushareincludeboostbindmemfntemplatehpp gdb p ndwitnessHeight gdb p ndwitnessHeight gdb p indexHeight gdb I can add more stack frames if needed The testnet block height at the time was approximately I uploaded the full debuglog file since startup here I also saved a copy of the entire testnet directory gb and can provide that if needed In my view its likely that anyone can reproduce the problem using this data directory and a debug build Here are the relevant lines from the zcashconf file I started zcashd with no commandline arguments testnet addnodetestnetzcash txindex experimentalfeatures insightexplorer addressindex spentindex timestampindex migration This is a possible implementation for It is based in the following definitions please correct if my understanding is not the right one Under current blockchain conditions Unconfirmed balance are shielded or transparentz or t balances with confirmations Immature balance are z or t balances that have between and COINBASEMATURITY confirmations Just balance are confirmed and mature z or t balances this is more confirmations than COINBASEMATURITY Implementation Function getBalanceZaddr is moved to the top of getwalletinfo as we are going to use it getBalanceZaddr uses one version of GetFilteredNotes we want to use the other version that allow us to get balances inside min and max confirmations zbalance zunconfirmedbalance and zimmaturebalance are obtained by calling getBalanceZaddr with different min and max confirmations according to the definitions from above according release notes references Remove text and sections that do not apply please check depends Description Version is now available This updates AArch support references The getblockchaininfo RPC output currently has a valuePools key that gives information about the total value in the Sprout and Sapling value pools valuePools id sprout monitored true chainValue chainValueZat id sapling monitored true chainValue chainValueZat These are independently computed by the node see for when this was originally added for Sprout I propose adding a transparent value pool computed in a similar way and with a similar fallback mechanism for when the node has not been synced from scratch see This is partly motivated by the observation that several thirdparty sites are incorrectly calculating the total issuance after Blossom because they are computing it based on the block height and the preBlossom issuance rules Adds new rpc call getexperimentalfeatures and also adds experimental features to getblockchaininfo output Note This will add some duplicated code and a new place to maintain when experimental features are updated Open to suggestions to change implementation if needed Describe the issue contribdevtoolssymbolcheckpy is supposed to check a binary given as an argument for unexpected symbols and dynamically linked libraries Can you reliably reproduce the issue If so please list the steps to reproduce below Build zcashd from source Run contribdevtoolssymbolcheckpy srczcashd Expected behaviour No output Actual behaviour errors Many false positives of the form srczcashd symbol std from unsupported version GLIBCXX srczcashd symbol from unsupported version CXXABI srczcashd symbol from unsupported version GLIBC srczcashd export of symbol not allowed The version of Zcash you were using Zcash Daemon version v rc f cf a Machine specs Debian Buster uname a Linux katava amd SMP Debian deb u x GNULinux gcc version gcc Debian ld v GNU ld GNU Binutils for Debian as version GNU assembler GNU Binutils for Debian Steps I followed to reproduce Clone zcash git checkout v ENABLEPROTON qapulltesterrpctestssh protontest Result Running testscript protontestpy Initializing test directory tmptestuyKbc Proton listening on apparently nothing happens 