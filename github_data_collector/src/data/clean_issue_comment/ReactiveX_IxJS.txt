IxJS version Code to reproduce import Iterable from ix for example Transpile with typescript or using tsconfigjson generated with tsc init Expected behavior For this to transpile successfully using typescript and Actual behavior Produces two transpilation errors with typescript or nodemodulesixIxdts error TS Import declaration conflicts with local declaration of GroupedIterable import GroupedIterable from iterablegroupby nodemodulesixIxdts error TS Import declaration conflicts with local declaration of GroupedAsyncIterable import GroupedAsyncIterable from asynciterablegroupby Additional information The issue seems to be that the imported and exported names of GroupedIterable and GroupedAsyncIterable respectively are the same in Ixdts Renaming the imports with as in Ixdts and using the renamed imports to create the exported declarations of GroupedIterable and GroupedAsyncIterable resolves the errors Thank you for raising your concerns we appreciate your feedback and contributions to this repository Before you continue consider the following If you have a How do I do question it is better for you and for us that this question is placed in StackOverflow or some chat channel This way you are making it easier for others to learn from your experiences too These Issues are meant only for technical problems bugs and proposals related to the library If your issue is a bug please follow the format below IxJS version Code to reproduce ts const foo AsyncIterableXof catchWitherr AsyncIterableXofabc const bar AsyncIterableXof catchWitherr throw err Expected behavior Type of foo should be AsyncIterableXnumber string no compile error Type of bar should be AsyncIterableXnumber Actual behavior foo Compile error bar AsyncIterableany Additional information catchWith needs to have a return type is the union of the function return and the input type Thank you for raising your concerns we appreciate your feedback and contributions to this repository Before you continue consider the following If you have a How do I do question it is better for you and for us that this question is placed in StackOverflow or some chat channel This way you are making it easier for others to learn from your experiences too These Issues are meant only for technical problems bugs and proposals related to the library If your issue is a bug please follow the format below IxJS version Code to reproduce import as aix from ixasynciterable async function xx yield x yield x yield x async function main consolelogmax xx await aixtoArrayaixmaxBy xx x x maincatchconsoleerror Expected behavior The logged output is the array x Actual behavior The output is the empty array Additional information The example code produces the expected output if yield x is anything but the first yielded value with example implementation IxJS version RxJS version Nodejs version Code to reproduce debouncePipejs Expected behavior When the script is run asis node debouncePipejs from batched from from from batched from batched And thats what I expected when debouncing the Rx pipe Now if line is commented and is uncommented so that the pull pipe is debounced instead of the push pipe I expect the results would be very similar Actual behavior With line commented and uncommented node debouncePipejs from batched from from from from from from batched from from batched After running it several times I find the output is consistent Notice how from is reported but it seems like there wouldnt have been enough time for the ms debounce to expire the same goes for some of the other from Do I need to think about this differently or is there a bug andor performance problem in Ixs debounce Additional information The input signature of Rxs debounce is different from Ixs debounce Im aware theres a rewrite underway but on that branch debounce still takes a number directly Would it make sense for Ixs operator to be revised so that a user would supply eg interval Thank you for raising your concerns we appreciate your feedback and contributions to this repository Before you continue consider the following If you have a How do I do question it is better for you and for us that this question is placed in StackOverflow or some chat channel This way you are making it easier for others to learn from your experiences too These Issues are meant only for technical problems bugs and proposals related to the library If your issue is a bug please follow the format below IxJS version Code to reproduce Expected behavior Actual behavior IxJS does not compile with the updates that have been made to the standard library in Typescript especially with the changes to Iterable types in it appears Maybe especially there with strictNullTypes on because a lot of the places seem to be SomeType undefined is not assignable to SomeType Additional information IxJS version Code to reproduce ts const ee new EventEmitter try const bar await fromEventee foofinally void consolelogfinallytimeout take toArray catch e consoleloge instanceof TimeoutError Expected behavior timeout returns the source iterator and therefore finally getting logged Actual behavior timeout does not return the source iterator and therefore finally never gets logged Additional information wrapping the whole while loop into a try finally works ts const it thissource SymbolasyncIterator try while finally await returnAsyncIteratorit also the timeout function is missing from AsyncIterableXprototype Given both TypeScript and ClosureCompiler have fixed es targeting good to lock down es instead of esnext Thank you for raising your concerns we appreciate your feedback and contributions to this repository Before you continue consider the following If you have a How do I do question it is better for you and for us that this question is placed in StackOverflow or some chat channel This way you are making it easier for others to learn from your experiences too These Issues are meant only for technical problems bugs and proposals related to the library If your issue is a bug please follow the format below IxJS version Code to reproduce ts IxIterablefromHello World Expected behavior Returns an Iterablestring of each character Actual behavior ts throw new TypeErrorInput type not supported Additional information Culprit is here js function isIterablex return exportsisObjectx exportsisFunctionx Symboliterator Hello Id love to use RxJS in NetSuite which uses an ES compatible version of the Rhino JS engine behind the scenes Ive tried several of the existing builds but none seem to work The most promising one for this ES AMD compatible environment seemed to be reactivexixes umd but it fails when their loader tries to load it with I also tried using Ixdomjs typeerrorSuiteScriptModuleLoaderErrornameUNEXPECTEDERRORmessagemissing after property id SuiteScriptsIxdominternaljs stack I realize ES is a bit old but this is my ask for a build we can use in this environment an environment which I dont control ps I also noticed references to Symboliterator in the ES build which isnt part of ES so that confuses me a bit so not sure if the ES build is polyfilling that or what 