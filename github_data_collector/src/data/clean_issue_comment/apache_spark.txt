 Thanks for sending a pull request Here are some tips for you If this is your first time please read our contributor guidelines Ensure you have added or run the appropriate tests for your PR If the PR is unfinished add WIP in your PR title eg WIP SPARKXXXX Your PR title Be sure to keep the PR description updated to reflect all changes Please write your PR title to summarize what this PR proposes If possible provide a concise example to reproduce the issue for a faster review What changes were proposed in this pull request Please clarify what changes you are proposing The purpose of this section is to outline the changes and how this PR fixes the issue If possible please consider writing useful notes for better and faster reviews in your PR See the examples below If you refactor some codes with changing classes showing the class hierarchy will help reviewers If you fix some SQL features you can provide some references of other DBMSes If there is design documentation please add the link If there is a discussion in the mailing list please add the link Adds following overloaded variants to Scala oassqlfunctions percentileapproxe Column percentage Array Double accuracy Long Column percentileapproxcolumnName String percentage Array Double accuracy Long Column percentileapproxe Column percentage Double accuracy Long Column percentileapproxcolumnName String percentage Double accuracy Long Column percentileapproxe Column percentage Seq Double accuracy Long Column primarily for Python interop percentileapproxcolumnName String percentage Seq Double accuracy Long Column Adds percentileapprox to pysparksqlfunctions Adds percentileapprox function to SparkR Why are the changes needed Please clarify why the changes are needed For instance If you propose a new API clarify the use case for a new API If you fix a bug you can clarify why it is a bug Currently we support percentileapprox only in SQL expression It is inconvenient and makes this function relatively unknown Does this PR introduce any userfacing change If yes please clarify the previous behavior and the change this PR proposes provide the console output description andor an example to show the behavior difference if possible If no write No No How was this patch tested If tests were added say they were added here Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible If it was tested in a way different from regular unit tests please clarify how you tested step by step ideally copy and pasteable so that other reviewers can test and check and descendants can verify in the future If tests were not added please describe why they were not added andor why it was difficult to add New unit tests for SparkR an PySpark As for now there are no additional tests in Scala API ApproximatePercentile is well tested and Python including docstrings and R tests provide additional tests so it seems unnecessary What changes were proposed in this pull request After this commit we are able to create table or alter table with interval column types if the external catalog accepts which is varying the interval types purpose for internal usage With s original purpose it should only work from cast logic Instead of adding type checker for the interval type from commands to commands to work among catalogs It much simpler to treat interval as an invalid data type but can be identified by cast only Why are the changes needed enhance interval internal usage purpose Does this PR introduce any userfacing change If yes please clarify the previous behavior and the change this PR proposes provide the console output description andor an example to show the behavior difference if possible If no write No NO Additionally this PR restores user behavior when using interval type to createalter table schema eg for hive catalog for java Caused by orgapachesparksqlcatalystparserParseException DataType calendarinterval is not supportedline pos for master after java Caused by orgapachehadoophiveqlmetadataHiveException javalangIllegalArgumentException Error type expected at the position of interval but interval is found at orgapachehadoophiveqlmetadataHivecreateTableHivejava now with this pr we restore the type checker in spark side How was this patch tested If tests were added say they were added here Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible If it was tested in a way different from regular unit tests please clarify how you tested step by step ideally copy and pasteable so that other reviewers can test and check and descendants can verify in the future If tests were not added please describe why they were not added andor why it was difficult to add add more ut Thanks for sending a pull request Here are some tips for you If this is your first time please read our contributor guidelines Ensure you have added or run the appropriate tests for your PR If the PR is unfinished add WIP in your PR title eg WIP SPARKXXXX Your PR title Be sure to keep the PR description updated to reflect all changes Please write your PR title to summarize what this PR proposes If possible provide a concise example to reproduce the issue for a faster review What changes were proposed in this pull request Please clarify what changes you are proposing The purpose of this section is to outline the changes and how this PR fixes the issue If possible please consider writing useful notes for better and faster reviews in your PR See the examples below If you refactor some codes with changing classes showing the class hierarchy will help reviewers If you fix some SQL features you can provide some references of other DBMSes If there is design documentation please add the link If there is a discussion in the mailing list please add the link This PR adds a migration guide for SHOW TBLPROPERTIES for Apache Spark Why are the changes needed Please clarify why the changes are needed For instance If you propose a new API clarify the use case for a new API If you fix a bug you can clarify why it is a bug The behavior of SHOW TBLPROPERTIES changed when the table does not exist The migration guide reflects this user facing change Does this PR introduce any userfacing change If yes please clarify the previous behavior and the change this PR proposes provide the console output description andor an example to show the behavior difference if possible If no write No Yes This is a documentation change How was this patch tested If tests were added say they were added here Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible If it was tested in a way different from regular unit tests please clarify how you tested step by step ideally copy and pasteable so that other reviewers can test and check and descendants can verify in the future If tests were not added please describe why they were not added andor why it was difficult to add No tests were added because this is a doc change Thanks for sending a pull request Here are some tips for you If this is your first time please read our contributor guidelines Ensure you have added or run the appropriate tests for your PR If the PR is unfinished add WIP in your PR title eg WIP SPARKXXXX Your PR title Be sure to keep the PR description updated to reflect all changes Please write your PR title to summarize what this PR proposes If possible provide a concise example to reproduce the issue for a faster review What changes were proposed in this pull request Please clarify what changes you are proposing The purpose of this section is to outline the changes and how this PR fixes the issue If possible please consider writing useful notes for better and faster reviews in your PR See the examples below If you refactor some codes with changing classes showing the class hierarchy will help reviewers If you fix some SQL features you can provide some references of other DBMSes If there is design documentation please add the link If there is a discussion in the mailing list please add the link Renamed an identifier iterator to iter to avoid compile error with Scala Why are the changes needed Please clarify why the changes are needed For instance If you propose a new API clarify the use case for a new API If you fix a bug you can clarify why it is a bug As of Scala scalacollectionIterator has iterator method so if an inner class of Iterator means to refer an outer identifier named iterator it does not work as we think I listed source files that can be affected by that change by find name scala exec grep El new Iterator As far as I confirmed utilUtils is affected Does this PR introduce any userfacing change If yes please clarify the previous behavior and the change this PR proposes provide the console output description andor an example to show the behavior difference if possible If no write No No How was this patch tested If tests were added say they were added here Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible If it was tested in a way different from regular unit tests please clarify how you tested step by step ideally copy and pasteable so that other reviewers can test and check and descendants can verify in the future If tests were not added please describe why they were not added andor why it was difficult to add Existing tests What changes were proposed in this pull request In the PR I propose move out creation of AvroOption from AvroPartitionReaderFactorybuildReader and create it earlier in AvroScancreateReaderFactory Why are the changes needed To avoid building AvroOptions from a map of Avro options and Hadoop conf per each partition If an instance of AvroOptions is built only once at the driver side we could output warnings while parsing Avro options and dont worry about noisiness of the warnings Does this PR introduce any userfacing change No How was this patch tested By AvroSuite Thanks for sending a pull request Here are some tips for you If this is your first time please read our contributor guidelines Ensure you have added or run the appropriate tests for your PR If the PR is unfinished add WIP in your PR title eg WIP SPARKXXXX Your PR title Be sure to keep the PR description updated to reflect all changes Please write your PR title to summarize what this PR proposes If possible provide a concise example to reproduce the issue for a faster review What changes were proposed in this pull request Please clarify what changes you are proposing The purpose of this section is to outline the changes and how this PR fixes the issue If possible please consider writing useful notes for better and faster reviews in your PR See the examples below If you refactor some codes with changing classes showing the class hierarchy will help reviewers If you fix some SQL features you can provide some references of other DBMSes If there is design documentation please add the link If there is a discussion in the mailing list please add the link This pr intends to upgrade lz java from to Why are the changes needed Please clarify why the changes are needed For instance If you propose a new API clarify the use case for a new API If you fix a bug you can clarify why it is a bug This release includes a bug fix for older macOS You can see the link below for the changes Does this PR introduce any userfacing change If yes please clarify the previous behavior and the change this PR proposes provide the console output description andor an example to show the behavior difference if possible If no write No How was this patch tested If tests were added say they were added here Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible If it was tested in a way different from regular unit tests please clarify how you tested step by step ideally copy and pasteable so that other reviewers can test and check and descendants can verify in the future If tests were not added please describe why they were not added andor why it was difficult to add Existing tests What changes were proposed in this pull request fix structuredstreaming java example error It does not clean up old stateMay cause OMM What changes were proposed in this pull request In orgapachesparksqlexecutionSubqueryExecrelationFuture make a copy of orgapachesparkSparkContextlocalProperties and pass it to the subexecution thread in orgapachesparksqlexecutionSubqueryExecexecutionContext Why are the changes needed Local properties set via sparkContext are not available as TaskContext properties when executing jobs and threadpools have idle threads which are reused Explanation When SubqueryExec the relationFuture is evaluated via a separate thread The threads inherit the localProperties from sparkContext as they are the child threads These threads are created in the executionContext thread pools Each Thread pool has a default keepAliveSeconds of seconds for idle threads Scenarios where the thread pool has threads which are idle and reused for a subsequent new query the thread local properties will not be inherited from spark context thread properties are inherited only on thread creation hence end up having old or no properties set This will cause taskset properties to be missing when properties are transferred by child thread via sparkContextrunJobsubmitJob Does this PR introduce any userfacing change No How was this patch tested WIP What changes were proposed in this pull request In orgapachesparksqlexecutionexchangeBroadcastExchangeExecrelationFuture make a copy of orgapachesparkSparkContextlocalProperties and pass it to the broadcast execution thread in orgapachesparksqlexecutionexchangeBroadcastExchangeExecexecutionContext Why are the changes needed When executing BroadcastExchangeExec the relationFuture is evaluated via a separate thread The threads inherit the localProperties from sparkContext as they are the child threads These threads are created in the executionContext thread pools Each Thread pool has a default keepAliveSeconds of seconds for idle threads Scenarios where the thread pool has threads which are idle and reused for a subsequent new query the thread local properties will not be inherited from spark context thread properties are inherited only on thread creation hence end up having old or no properties set This will cause taskset properties to be missing when properties are transferred by child thread via sparkContextrunJobsubmitJob Does this PR introduce any userfacing change No How was this patch tested Added UT Thanks for sending a pull request Here are some tips for you If this is your first time please read our contributor guidelines Ensure you have added or run the appropriate tests for your PR If the PR is unfinished add WIP in your PR title eg WIP SPARKXXXX Your PR title Be sure to keep the PR description updated to reflect all changes Please write your PR title to summarize what this PR proposes If possible provide a concise example to reproduce the issue for a faster review What changes were proposed in this pull request Please clarify what changes you are proposing The purpose of this section is to outline the changes and how this PR fixes the issue If possible please consider writing useful notes for better and faster reviews in your PR See the examples below If you refactor some codes with changing classes showing the class hierarchy will help reviewers If you fix some SQL features you can provide some references of other DBMSes If there is design documentation please add the link If there is a discussion in the mailing list please add the link when resolving the Assignment of insert action in MERGE INTO only resolve with the source table to avoid ambiguous attribute failure if there is a samename column in the target table Why are the changes needed Please clarify why the changes are needed For instance If you propose a new API clarify the use case for a new API If you fix a bug you can clarify why it is a bug The insert action is used when NOT MATCHED so it cant access the row from the target table anyway Does this PR introduce any userfacing change If yes please clarify the previous behavior and the change this PR proposes provide the console output description andor an example to show the behavior difference if possible If no write No on How was this patch tested If tests were added say they were added here Please make sure to add some test cases that check the changes thoroughly including negative and positive cases if possible If it was tested in a way different from regular unit tests please clarify how you tested step by step ideally copy and pasteable so that other reviewers can test and check and descendants can verify in the future If tests were not added please describe why they were not added andor why it was difficult to add new tests