Below line of code should respect unix path separator as well Example if mOptsDebugFileempty mOptsDebugFileendswithllvmStringRef mOptsDebugFileendswithllvmStringRef I cant forward the entire source but it crashes when this HLSL is added cpp static Texture D texArray tex tex tex tex tex tex Read from pixel shader texArray somewhere down here When tex tex are defined as SRV slots dxc crashes internally with a read access violation New was xFFFFFFFFFFFFFFEF This is the callstack This version is an older version of DXC since it is modified however this is still present in the latest revision trunk on As inputting this into Tim Joness shader playground crashes the compiler too We leave behind the intermediate dxprecise call when precise is used on a field in the geometry shader output structure This leads to an assertcrash The workaround is to omit precise on the field assign the computation for that field to a local variable marked precise then assign the local variable to the output field before Append I have been getting linker error on mac the same code compiles fine on windows also in November i think before I was able to compile even on mac could you help me fix this Undefined symbols for architecture x IDxcBlobUtf IDxcBlobUtf ID referenced from hlslDxcCreateBlobEncodingFromBlobIDxcBlob unsigned int unsigned int bool unsigned int IMalloc IDxcBlobEncoding in libLLVMDxcSupportaFileIOHelpero hlslReadOnlyBlobStreamInitIDxcBlob in libLLVMDxcSupportaFileIOHelpero hlslInternalDxcBlobEncodingImplhlslDxcBlobUtf ImplQueryInterfacevoid const void in libLLVMDxcSupportaFileIOHelpero IDxcBlobUtf IDxcBlobUtf ID referenced from hlslDxcCreateBlobEncodingFromBlobIDxcBlob unsigned int unsigned int bool unsigned int IMalloc IDxcBlobEncoding in libLLVMDxcSupportaFileIOHelpero hlslInternalDxcBlobEncodingImplhlslDxcBlobUtf ImplQueryInterfacevoid const void in libLLVMDxcSupportaFileIOHelpero ld symbols not found for architecture x clang error linker command failed with exit code use v to see invocation The following build commands failed Ld Userssunnaikdevbuilddarwinx ReleaseReleaseliblibglcompiler dylib normal x failure Build failed I can not build the compiler using build steps from here Heres what I did installed Git VS Python CMake WDK cloned the project git clone launched utils hct hctshortcutjs launched the HLSL console shortcut executed hctbuild in the console hctbuild fails with the following error CMake Error at CProgram FilesCMakesharecmake ModulesFindPackageHandleStandardArgscmake message Could NOT find PythonInterp Found unsuitable version but required is at least found CUsersxAppDataLocalMicrosoftWindowsAppspython exe Call Stack most recent call first CProgram FilesCMakesharecmake ModulesFindPackageHandleStandardArgscmake FPHSAFAILUREMESSAGE CProgram FilesCMakesharecmake ModulesFindPythonInterpcmake FINDPACKAGEHANDLESTANDARDARGS CMakeListstxt findpackage It seems that Python is not supported but there is no build older than on pythonorg According to the following issue Python also does not work Also hctbuild writes the following message to the console window at the end of the log when an error is detected CMake is the currently supported version your installed cmake may be out of date I tried using the latest version of CMake but it fails with a different error Constructing LLVMBuild project information CMake Error at CMakeListstxt message Unexpected failure executing llvmbuild Im attaching CMake log files CMakeErrorlog CMakeOutputlog Issues The list of required software does not contain CMake utils hct hctgettaefpy does not work I had to install WDK to solve the issue with missing TAEF hctbuild fails because the required version of CMake is incompatible with modern Python builds The matrix size rules for cbufferstbuffers do not match those of fxc with fvkusedxlayout enabled The size of the last row should not be rounded to the alignment size in order to maintain DirectX consistency This nonrounding scheme passes the SPIRV validator but only in GLSL rowmajor layout Columnmajor behavior is unaltered The relevant validator check is here Compiling illum fragtxt with latest DXC seems to produce invalid SPIRV code Vulkan validation layer complains about it with the following message UNASSIGNEDCoreValidationShaderInconsistentSpirv Object VKNULLHANDLE Type SPIRV module not valid Header block is contained in the loop construct headed by but its merge block is not OpLabel The command used to compile the shader with DXC is as follows dxcexe fvkusedxpositionw O Zpr spirv nowarnings E IlluminationPS T ps Fo illum spirv illum fragtxt The compiled SPIRV is illum spirvtxt and human readable version is illum spirvhtxt We have encountered what appears to be a bug in dxc that causes information communicated from HLSLs logical hull shader to its patch constant shader to not actually get communicated except for from the first control point when converted to Vulkans logical tessellation control shader As far as I can tell when data is transmitted from the hull shader to the patch constant shader SPIRVdxc attempts to do this by writing the perthread data into a temporary array that has one entry for each thread Then a barrier is inserted and thread consumes the data from all threads to do the patchconstant shader work The problem appears to be that this temporary array is just regular registers not any kind of LDS or groupshared memory So thread doesnt actually access data written by the other threads it just consumes uninitialized data This causes the tessellation either to not show up or to flicker like mad and do crazy stuff If I modify the shader so that the patchconstant shader does not use any information from the hullshader then tessellation works as expected However for our use case we require the ability to use information computed in the hull shader NOTE We have not found a work around for this so getting it fixed soon would be pretty important to us Here is a simple HLSL shader that demonstrates the problem define BARYCENTRICINTERPOLATEINPUTARRAY INPUTPARAM BARYC BARYCx INPUTARRAY INPUTPARAM BARYCy INPUTARRAY INPUTPARAM BARYCz INPUTARRAY INPUTPARAM static const float Positions float float float static const float Colors float float float float Tessellationfactor set by CPU struct VSOUTPUT float pos POSITION float color VERTCOLOR struct HSOUTPUT float pos POSITION float color VERTCOLOR float tessfactor TESSFACTOR struct DSOUTPUT float pos SVPosition float color VERTCOLOR VSOUTPUT mainvs uint vertindex SVVertexID VSOUTPUT OUT OUTpos float Positions vertindex OUTcolor Colors vertindex return OUT struct HSPATCHOUTPUT float tessfactor SVTessFactor tessellation factor per edge float insidetessfactor SVInsideTessFactor tessellation factor of triangle interior domaintri partitioningfractionalodd outputtopologytrianglecw patchconstantfuncmainhspatch outputcontrolpoints HSOUTPUT mainhsInputPatchVSOUTPUT inputpoints uint i SVOutputControlPointID HSOUTPUT OUT OUTpos inputpoints i pos OUTcolor inputpoints i color OUTtessfactor Tessellationfactor return OUT HSPATCHOUTPUT mainhspatchconst OutputPatchHSOUTPUT patch HSPATCHOUTPUT OUT OUTtessfactor patch tessfactor OUTtessfactor patch tessfactor OUTtessfactor patch tessfactor OUTinsidetessfactor patch tessfactor patch tessfactor patch tessfactor return OUT domaintri DSOUTPUT maindsHSPATCHOUTPUT constants float BarycentricCoords SVDomainLocation const OutputPatchHSOUTPUT origtriangle DSOUTPUT OUT OUTpos BARYCENTRICINTERPOLATEorigtriangle pos BarycentricCoords OUTcolor BARYCENTRICINTERPOLATEorigtriangle color BarycentricCoords return OUT float mainps DSOUTPUT data SVTarget return float datacolor This generates SPIRV like this for the Tessellation Control stage SPIRV Version Generator Google spiregg Bound Schema OpCapability Tessellation OpExtension SPVGOOGLEhlslfunctionality OpMemoryModel Logical GLSL OpEntryPoint TessellationControl mainhs mainhs invarPOSITION invarVERTCOLOR glInvocationID outvarPOSITION outvarVERTCOLOR outvarTESSFACTOR glTessLevelOuter glTessLevelInner OpExecutionMode mainhs Triangles OpExecutionMode mainhs SpacingFractionalOdd OpExecutionMode mainhs VertexOrderCw OpExecutionMode mainhs OutputVertices OpSource HLSL OpName typeGlobals typeGlobals OpMemberName typeGlobals Tessellationfactor OpName Globals Globals OpName invarPOSITION invarPOSITION OpName invarVERTCOLOR invarVERTCOLOR OpName outvarPOSITION outvarPOSITION OpName outvarVERTCOLOR outvarVERTCOLOR OpName outvarTESSFACTOR outvarTESSFACTOR OpName mainhs mainhs OpName VSOUTPUT VSOUTPUT OpMemberName VSOUTPUT pos OpMemberName VSOUTPUT color OpName paramvarinputpoints paramvarinputpoints OpName HSOUTPUT HSOUTPUT OpMemberName HSOUTPUT pos OpMemberName HSOUTPUT color OpMemberName HSOUTPUT tessfactor OpName tempvarhullMainRetVal tempvarhullMainRetVal OpName ifmerge ifmerge OpDecorateString invarPOSITION UserSemantic POSITION OpDecorateString invarVERTCOLOR UserSemantic VERTCOLOR OpDecorate glInvocationID BuiltIn InvocationId OpDecorateString glInvocationID UserSemantic SVOutputControlPointID OpDecorateString outvarPOSITION UserSemantic POSITION OpDecorateString outvarVERTCOLOR UserSemantic VERTCOLOR OpDecorateString outvarTESSFACTOR UserSemantic TESSFACTOR OpDecorate glTessLevelOuter BuiltIn TessLevelOuter OpDecorateString glTessLevelOuter UserSemantic SVTessFactor OpDecorate glTessLevelOuter Patch OpDecorate glTessLevelInner BuiltIn TessLevelInner OpDecorateString glTessLevelInner UserSemantic SVInsideTessFactor OpDecorate glTessLevelInner Patch OpDecorate invarPOSITION Location OpDecorate invarVERTCOLOR Location OpDecorate outvarPOSITION Location OpDecorate outvarTESSFACTOR Location OpDecorate outvarVERTCOLOR Location OpDecorate Globals DescriptorSet OpDecorate Globals Binding OpMemberDecorate typeGlobals Offset OpDecorate typeGlobals Block float OpTypeFloat uint OpTypeInt uint OpConstant uint uint OpConstant uint uint OpConstant uint int OpTypeInt int OpConstant int int OpConstant int int OpConstant int uint OpConstant uint v float OpTypeVector float arrv floatuint OpTypeArray v float uint typeGlobals OpTypeStruct float ptrUniformtypeGlobals OpTypePointer Uniform typeGlobals v float OpTypeVector float arrv floatuint OpTypeArray v float uint ptrInputarrv floatuint OpTypePointer Input arrv floatuint ptrInputarrv floatuint OpTypePointer Input arrv floatuint ptrInputuint OpTypePointer Input uint ptrOutputarrv floatuint OpTypePointer Output arrv floatuint ptrOutputarrv floatuint OpTypePointer Output arrv floatuint arrfloatuint OpTypeArray float uint ptrOutputarrfloatuint OpTypePointer Output arrfloatuint uint OpConstant uint arrfloatuint OpTypeArray float uint ptrOutputarrfloatuint OpTypePointer Output arrfloatuint arrfloatuint OpTypeArray float uint ptrOutputarrfloatuint OpTypePointer Output arrfloatuint void OpTypeVoid OpTypeFunction void VSOUTPUT OpTypeStruct v float v float arrVSOUTPUTuint OpTypeArray VSOUTPUT uint ptrFunctionarrVSOUTPUTuint OpTypePointer Function arrVSOUTPUTuint HSOUTPUT OpTypeStruct v float v float float arrHSOUTPUTuint OpTypeArray HSOUTPUT uint ptrFunctionarrHSOUTPUTuint OpTypePointer Function arrHSOUTPUTuint ptrOutputv float OpTypePointer Output v float ptrOutputv float OpTypePointer Output v float ptrOutputfloat OpTypePointer Output float ptrFunctionHSOUTPUT OpTypePointer Function HSOUTPUT bool OpTypeBool ptrFunctionfloat OpTypePointer Function float ptrFunctionv float OpTypePointer Function v float ptrFunctionv float OpTypePointer Function v float ptrUniformfloat OpTypePointer Uniform float Globals OpVariable ptrUniformtypeGlobals Uniform invarPOSITION OpVariable ptrInputarrv floatuint Input invarVERTCOLOR OpVariable ptrInputarrv floatuint Input glInvocationID OpVariable ptrInputuint Input outvarPOSITION OpVariable ptrOutputarrv floatuint Output outvarVERTCOLOR OpVariable ptrOutputarrv floatuint Output outvarTESSFACTOR OpVariable ptrOutputarrfloatuint Output glTessLevelOuter OpVariable ptrOutputarrfloatuint Output glTessLevelInner OpVariable ptrOutputarrfloatuint Output float OpConstant float mainhs OpFunction void None OpLabel paramvarinputpoints OpVariable ptrFunctionarrVSOUTPUTuint Function tempvarhullMainRetVal OpVariable ptrFunctionarrHSOUTPUTuint Function OpLoad arrv floatuint invarPOSITION OpLoad arrv floatuint invarVERTCOLOR OpCompositeExtract v float OpCompositeExtract v float OpCompositeConstruct VSOUTPUT OpCompositeExtract v float OpCompositeExtract v float OpCompositeConstruct VSOUTPUT OpCompositeExtract v float OpCompositeExtract v float OpCompositeConstruct VSOUTPUT OpCompositeConstruct arrVSOUTPUTuint OpStore paramvarinputpoints OpLoad uint glInvocationID OpAccessChain ptrFunctionv float paramvarinputpoints int OpLoad v float OpAccessChain ptrFunctionv float paramvarinputpoints int OpLoad v float OpAccessChain ptrUniformfloat Globals int OpLoad float OpCompositeConstruct HSOUTPUT OpAccessChain ptrOutputv float outvarPOSITION OpStore OpAccessChain ptrOutputv float outvarVERTCOLOR OpStore OpAccessChain ptrOutputfloat outvarTESSFACTOR OpStore OpAccessChain ptrFunctionHSOUTPUT tempvarhullMainRetVal OpStore OpControlBarrier uint uint uint OpIEqual bool uint OpSelectionMerge ifmerge None OpBranchConditional ifmerge OpLabel OpAccessChain ptrFunctionfloat tempvarhullMainRetVal uint int OpLoad float OpAccessChain ptrFunctionfloat tempvarhullMainRetVal uint int OpLoad float OpAccessChain ptrFunctionfloat tempvarhullMainRetVal uint int OpLoad float OpLoad float OpLoad float OpFAdd float OpLoad float OpFAdd float OpFMul float float OpAccessChain ptrOutputfloat glTessLevelOuter uint OpStore OpAccessChain ptrOutputfloat glTessLevelOuter uint OpStore OpAccessChain ptrOutputfloat glTessLevelOuter uint OpStore OpAccessChain ptrOutputfloat glTessLevelInner uint OpStore OpBranch ifmerge ifmerge OpLabel OpReturn OpFunctionEnd To make it easier to understand the issue Ive decompiled the SPIRV into GLSL using SPIRVCross also version layoutvertices out struct VSOUTPUT vec pos vec color struct HSOUTPUT vec pos vec color float tessfactor layoutset binding std uniform typeGlobals float Tessellationfactor Globals layoutlocation in vec invarPOSITION layoutlocation in vec invarVERTCOLOR layoutlocation out vec outvarPOSITION layoutlocation out vec outvarVERTCOLOR layoutlocation out float outvarTESSFACTOR void main vec unrolled for int i i int i unrolled i invarPOSITION i vec unrolled for int i i int i unrolled i invarVERTCOLOR i VSOUTPUT paramvarinputpoints VSOUTPUT VSOUTPUT unrolled unrolled VSOUTPUT unrolled unrolled VSOUTPUT unrolled unrolled outvarPOSITION glInvocationID paramvarinputpoints glInvocationID pos outvarVERTCOLOR glInvocationID paramvarinputpoints glInvocationID color outvarTESSFACTOR glInvocationID GlobalsTessellationfactor HSOUTPUT tempvarhullMainRetVal tempvarhullMainRetVal glInvocationID HSOUTPUTparamvarinputpoints glInvocationID pos paramvarinputpoints glInvocationID color GlobalsTessellationfactor barrier if glInvocationID u glTessLevelOuter u tempvarhullMainRetVal u tessfactor glTessLevelOuter u tempvarhullMainRetVal u tessfactor glTessLevelOuter u tempvarhullMainRetVal u tessfactor glTessLevelInner u tempvarhullMainRetVal u tessfactor tempvarhullMainRetVal u tessfactor tempvarhullMainRetVal u tessfactor As you can see the tempvarhullMainRetVal variable appears to just be a regular local array and not crossthread shared memory of any kind Thank you Dxc with SPIRV is pretty awesome and we appreciate all the work that has gone into it Wed love to get this tessellation issue fixed as soon as possible Hi Im writing a shader code reflection system which provides metadata for our runtime PSO and Im trying to match all layout packing rules in dxc when compiling different Uniform and Storage buffers I encountered the following issue Run dxc T vs E main spirv struct BadStruct float one float two struct NestingStruct float afloat Commenting out this line produces a valid code BadStruct bad StructuredBufferNestingStruct mySB register t float main A return mySB bad one I get the following error fatal error generated SPIRV is invalid Structure id decorated as BufferBlock for variable in Uniform storage class must follow relaxed storage buffer layout rules member is an improperly straddling vector at offset BadStruct OpTypeStruct float v float note please file a bug report on with source code if possible Tested the code on Is this case supported and do you know what problem Im hitting Note that Im not actually writing a shader so reordering doesnt solve my problem Im writing a reflection system so if this case isnt handled in dxc well list it as a limitation for the code transpilier The purpose is to report the same layout as produced by dxc Fixes 