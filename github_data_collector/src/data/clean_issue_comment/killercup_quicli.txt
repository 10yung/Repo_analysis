I think this is caused by and but I thought it worth mentioning as I hit this upgrading from quicli to Im not sure theres anything that can be done in this crate though so feel free to close if you want Reproduction Source rust use quicliprelude fn main CliResult bailThis does not work Reproduction bash cargo new quiclibail cd quiclibail cargo install cargoedit cargo add quicli echo e use quicliprelude n nfn main CliResult n bailThis does not work n srcmainrs cargo build Result rust Compiling testquicli v Usersgibtmptestquicli error E mismatched types srcmainrs bailThis doesnt work expected struct exitfailureExitFailure found struct failureerrorError note expected type exitfailureExitFailure found type failureerrorError note this error originates in a macro outside of the current crate in Nightly builds run with Z externalmacrobacktrace for more info error aborting due to previous error For more information about this error try rustc explain E error Could not compile testquicli To learn more run the command again with verbose My crate readinput seems to line up well with the aims of quicli It helps make CLI tools quicker and easier to make It would be awesome if it could be included with quicli Any feedback on my crate would also be welcome After I finished the thumbnail tutorial I tried to test it and got this error Error No files match pattern rustmemes After seeing that I progressively commented out more code to get a minimal reproduction and I was able to find that this block of code doesnt match anything rust use quicliprelude fn main CliResult let files globsrc println files Ok devrustthumbify master cargo run Compiling thumbify v homechrispickarddevrustthumbify Finished dev unoptimized debuginfo targets in s Running targetdebugthumbify Error No files match pattern src Even though I clearly have matching files in my src directory devrustthumbify master ls src mainrs Im sorry I feel like Im quite a thorn in your side at the moment Related to As it is right now the vvv enables logging only for the main crate For some usecases the ability to log everything would make more sense Any way to achieve it Right now even RUSTLOG no longer works I love quicli here is a suggestion on how to improve it in the form of a PR Since we control the main method there is no way that the logging init can fail Given this we can use the logging functionality for outputting any errors that are returned from the main method This is what I have implemented in this PR Apart from this there are a few small improvements for example removing a warning in an edge case where all paths lead to an error and adding tests for the different forms of the main macro Let me know what you think Would it make sense for humanpanic to be part of quicli I feel itd make a lot of sense for it to be part of almost every CLI application but Im not sure if it exceeds quiclis scope I think it might be an interesting addition to consider Keen to hear thoughts on this Refs Instead of glob lets use which is more powerful This is also a good opportunity to review if this is still a good API to export It will be great if I could just set some flag and callback to get an ability to read from stdin and write to stdout