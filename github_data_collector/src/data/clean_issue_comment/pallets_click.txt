 wrong input parameter To get an overview of a programs usage it would be helpful to print help for all commands at once rather than having to run eg scriptpy command help scriptpy command help etc This feature is important because the default toplevel help doesnt indicate which commands have options so it doesnt give a good overview of the programs functionality I looked through all of the issues open and closed and the closest I could find to asking for this feature is It points to this SE answer python def recursivehelpcmd parentNone ctx clickcoreContextcmd infonamecmdname parentparent printcmdgethelpctx print commands getattrcmd commands for sub in commandsvalues recursivehelpsub ctx Used like clicommand def dumphelp recursivehelpcli It produces output like rubbishpy allhelp Usage cli OPTIONS COMMAND ARGS Options v verbose help Show this message and exit Commands allhelp empty Empty files from trash bin list Print list of items in trash bin orphans List or empty orphaned trash files restore Restore paths from trash bin to original trash Move paths to trash bin Usage cli restore OPTIONS PATHS Restore paths from trash bin to original location or to TO when given Options to PATH When given restore to this directory instead of original location help Show this message and exit Usage cli trash OPTIONS PATHS Move paths to trash bin Options help Show this message and exit It seems like a good proof of concept Ideally the output would be more like rubbishpy help v Usage rubbishpy OPTIONS COMMAND ARGS Options v verbose help Show this message and exit Commands empty Empty files from trash bin list Print list of items in trash bin orphans List or empty orphaned trash files restore Restore paths from trash bin to original trash Move paths to trash bin Command restore OPTIONS PATHS Restore paths from trash bin to original location or to TO when given Options to PATH When given restore to this directory instead of original location help Show this message and exit Command trash OPTIONS PATHS Move paths to trash bin Options help Show this message and exit Thanks for Click It makes writing Python CLI very pleasant Currently click only does startswith match at so a typo like using boun suggests bount but using bound doesnt make any suggestions Using difflibgetclosematches could get better suggestions and nearest matches Sample implementation python import click clickoptioncount clickoptionbount clickcommand def clicount bount clickechofcount count bount bount if name main cli shell python samplepy boun Usage samplepy OPTIONS Try samplepy help for help Error no such option boun Did you mean bount shell python samplepy bound Usage samplepy OPTIONS Try samplepy help for help Error no such option bound Using bound with difflibgetclosematches shell python samplepy bound Usage samplepy OPTIONS Try samplepy help for help Error no such option bound Possible options bount count Using counter with difflibgetclosematches shell python samplepy counter Usage samplepy OPTIONS Try samplepy help for help Error no such option counter Possible options count bount Fixes So with current behavior of click my command has to check whether it is being called directly or from another command in order to do the right thing return a value if called from other command raise clickClickException if called directly Doesnt make much sense IMO but ok per thats the way it is So what is a robust way to check this I cant find anything in ctx that jumps out There is no isinvoked propertymethod One difference I found between the types of invocations is that if command is called directly then ctxparentinvokedsubcommand is itself whereas if it is called via ctxinvoke this property is None But is this defined behavior or could this change in the future mixstderr is a parameter of CliRunnerinvoke This is not documented in the docstring as a param Simply reading the code which I did after trying this and seeing no output shows that this parameter is not used mixstderr works on CliRunnerinit The mixstderr parameter should be removed or changed to work and get documented I think that allowing the help message to be shown with both h and help is common enough that a basic boolean keyword argument that provides the functionality would be welcome Currently the easiest way is to pass custom contextsettings like so python CONTEXTSETTINGS dicthelpoptionnames h help clickcommandcontextsettingsCONTEXTSETTINGS def cli pass I admit that it is not much but something like the following would be nice to remove the boilerplate needed to get the functionality python clickcommandhelpshorthandTrue def cli pass Currently if an option has autocompletion function that returns a list of paths reachable from current working directory then when there is only one path left in list so TAB accepts it click automatically appends a space after the slash Say you type represents the cursor mycommandpy somepathTAB and the TAB allows for completion because there is only one option somepathtofile you get a space before the cursor mycommandpy somepathtofile Needless to say this is nonstandard and almost never what user expects or desires Is there a way to configure a click option to not append space or to patch click so there is no space inserted after the completion 