Theres no proper example in the documentation which is giving me a big headache how to properly implement this functionality Ive been trying to implement a multi threaded Telegram download client For single downloads we can simply use the downloadmedia functionality But telethon offers iterdownload function as per documenation it is used for streaming which also includes pausing and resuming functionality We can use this to download a single file with multiple connections This is what Ive scripted so far No where to find any solid examples for multi connection download async def multidownloaderfile totalsize part offset partsize f openoutputmkvstrpart wb size global chunksize limit closestIntegerpartsize chunksize printlimit printpart async for chunk in clientiterdownloadobj offset offset limit limit chunksize chunksize requestsize chunksize filesize totalsize fwritechunk fflush size lenchunk if size partsize printPart strpart completed strpartsize break fclose The thing is it always throws the invalid limit error if I change the offset for seeking If the offset is zero then everything is fine telethonerrorsrpcerrorlistLimitInvalidError An invalid limit was provided See caused by GetFileRequest Original report from Hi i have a problem when i try to sendfile as album with vids like this python vids mp mp clientsendfileme vids Client sends only first vid and ignores other I also added supportsstreaming Has anyone come across this This is still a work in progress so expect more commits to it Used at first but it wasnt clear enough so I followed their advice and checked one of the implementations that had it so this PR is based on daniils implementation at its core x Accepting secret chats x Creating secret chats x Closing secret chats x Sending text messages x Recieving text messages Uploadingdownloading media x Dealing with rekeying Saving secret chats keys to database Saving messages to database Automatic decryptionacceptingfinishing Every messages you need to recreate the auth key Auth keys are saved client sides so if you restart the script you will lose all secret chats you had and can no longer recieve messages from them There is no getmessages function in secret chats so users cant see old messages Since event building are sync we currently cant decrypt implitctly and the user has to do it themselves Examples clientoneventsSecretChattofinishTrue async def finishingevent await eventfinish clientoneventsSecretChattoacceptTrue async def acceptingevent await eventaccept clientoneventsSecretChattodecryptTrue async def decryptingevent eventsSecretChat message await eventdecrypt if message and messagemessage hi await eventreplyHello The reason we use if message is because sometimes when you decrypt a message the result isnt relevant for example or If we were able to explicity decrypt the messages this wouldnt be needed You also need to use sequentialupdatesTrue for this to work because sometimes the library is still accepting the chat and a new message comes Hi I am using Redis session backend and it seems inappropriate to me to use synchronous session backends that rely on IO operations Is there any way to create a new base Session class that uses async functions and maybe properties and subclass current Session class from it There should be some sort of delay such that if all senders were returned and a certain amount of time passed then we can disconnect them The current implementation skips the time check which means that python async for m in clientitermessageschat await mdownloadmedia may be constantly having to connect and disconnect a sender while it would be better if the connection was kept for a while Please add support for all the InlineQueryResultCached results for media objects stored on telegram servers A possible use case could look like this python async def inlinequeryeventhandlerself event InlineQuery None await eventanswer eventbuildercachedphoto Pathtestpicturepixeledjpg InlineQueryResultCachedAudio InlineQueryResultCachedDocument InlineQueryResultCachedGif InlineQueryResultCachedMpeg Gif InlineQueryResultCachedPhoto InlineQueryResultCachedSticker InlineQueryResultCachedVideo InlineQueryResultCachedVoice Checklist x The error is in the librarys code and not in my own x I have searched for this issue before posting it and there isnt a duplicate x I ran pip install U and triggered the bug in the latest version Description Megagroups and channels on test server is giving a negative digit number on Bot API but Telethon is only masking it with prepending For example a megagroup is giving as its ID on bot API but Telethon is recognising it as since the raw ID is Steps of reproduction Log in with any real account accounts will not work on a test server Create a bot with BotFather Create a megagroup channel Chat A onwards and add the bot in Send a message in Chat A Get the masked ID of Chat A via bot API entry point Log in with the same account on test server using Telethon and run code below python from telethonsync import TelegramClient client TelegramClientNone APPID APPSECRET clientsessionsetdcTESTDCID HOST PORT clientstartphonePHONENUMBER maskedid entity clientgetentitymaskedid Traceback entity clientgetentitymaskedid maskedid efbdevenvlibpython sitepackagestelethonclientuserspy in getentity functionsmessagesGetChatsRequestchatschats efbdevenvlibpython sitepackagestelethonclientuserspy in call future selfsendersendrequest orderedordered efbdevenvlibpython sitepackagestelethonnetworkmtprotosenderpy in send state RequestStaterequest selfloop efbdevenvlibpython sitepackagestelethonnetworkrequeststatepy in init selfdata bytesrequest efbdevenvlibpython sitepackagestelethontlfunctionsmessagespy in bytes b x xc xb x cstructpacki lenselfidbjoinstructpacki x for x in selfid listiterator object at x a d b x xc xb x cstructpacki lenselfidbjoinstructpacki x for x in selfid E structerror required argument is not an integer Additional contexts Part of code responsible of masking channel ID Maybe it would be wise to have some form of base class that indicates this can be converted into this input type I try to connect to the telegram client like this Code that causes the issue python lclient TelegramClientphone apiid apihash lclientconnect if not lclientisuserauthorized lclientsendcoderequestphone lclientsigninphone inputEnter the code return lclient for some reason the connection just gets stuck Not a timeout error or anything just staying on clientconnect for hours I tried to set a timeout for the execution time but all the solutions Ive found are working with linux via import signal I saw that Lonami fixed that problem when someone else posted the issue but I still get that same bug in the updated telethon package What can I do I cant found an easy way to create a new private channel and get the chatid in return can anyone say to me what to see