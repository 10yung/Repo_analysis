hi its possible to create the jobs configuring some xml or json file thanks in advance csharp public class TestRegistry Registry public TestRegistry Schedule while true var log NLogLogManagerGetLoggerLogger logInfosleeping ThreadSleep WithNameInfinite Task NonReentrant ToRunNow Schedule while true var log NLogLogManagerGetLoggerLogger logInfosleeping ThreadSleep WithNameInfinite Task Not Running NonReentrant The above registry will start both jobs even when ToRunNow is not called on the second schedule Ideally the Registry class should make Schedules public so that we can retrieve scheduels at a later time and run them manually Alternatively Oneoff jobs should also be added to AllSchedules or another AllJobs property should be made available so that each job can be registered and scheduled at a later day That should only require adding the job to the collection above this line My usecase right now it to create a task schedule so I need to define the jobs now and let the user schedule them at a later day I dont want them to run at startup For this purpose registry is essentially useless Ill be better off subscribing to the job events and manually calling addremove job Trying to schedule a job which loads an ActiveX Objects I get ActiveX control ActiveX Object cannot be instantiated because the current thread is not in a singlethreaded apartment I found a similar question on SO Any advice on this This is my log for var ejecucion DateTimeNowAddMinutes var registro new Registry registroSchedule var lineas new string DateTimeNowToStringddMMyyyy HHmmssfff FileAppendAllLines logs logtxt lineas ToRunOnceAtejecucionHour ejecucionMinute AndEvery Minutes There are some time acomulated in the future they will be hhmm and the next time hhmm for example but can be arbitrary seconds It apear to add minute and second not only minute that AndEvery Minutes says There are something that I cand configure for fix that issue Hello First of all great project Maybe I missunderstand the UnitTests but I dont see a way to do something like this scheduleToRunEvery WeeksOnDayOfWeekMondayBetweennew TimeSpan new TimeSpan Everynew TimeSpan So basically I would like to run every week on Monday and some other days of the week between AM and AM every minutes Is it possible with the current implementation In readmemd I have seen that IJobFactory is depricated How to use DI for the library There might be an issue with the leap year using this code my birthday dates are scheduled one day late Here for example the ouput says Schedule BirthdaySchedule NextRun Mon Schedule BirthdaySchedule NextRun Mon But the next Schedule should be on the of August or am i missing something Reproducible code JobManagerStart ActionSchedule mySchedule ActionSchedule mySchedule DateTime birthday new DateTime int repeatAmount mySchedule x xNonReentrantWithNameBirthdaySchedule ToRunOnceAtbirthday AndEveryrepeatAmountYearsOnbirthday DayOfYearAt mySchedule x xNonReentrantWithNameBirthdaySchedule ToRunEvery YearsOnbirthday DayOfYearAt JobManagerAddJobnew DefaultJobJobTypeEyes mySchedule JobManagerAddJobnew DefaultJobJobTypeEyes mySchedule ConsoleWriteLineshowing shedules IEnumerableSchedule jobSchedules JobManagerAllSchedules foreach Schedule schedule in jobSchedules ConsoleWriteLineSchedule scheduleName NextRun scheduleNextRun ConsoleReadKey How to cehck is job running or not I have the following code in the Startupcs class for initializing my job var registry new Registry registryScheduleSendPushesJobToRunNowAndEvery Seconds JobManagerInitializeregistry and the following code in my controller public IActionResult StopSender JobManagerStop return RedirectToActionIndex public IActionResult StartSender JobManagerStart return RedirectToActionIndex I would like to show on the view is my job started or not How I can do this I cant see the suitable method Async is the state of the art way of doing things and previous current version of FluentScheduler doesnt handle async natively and it seems it wont I propose following changes to the redesign branch to address that Schedule should accept Actions returning Task This allows native async jobs to be runcreated easily var schedule new Schedule async await ConsoleOutWriteLineAsync minutes just passed run runEvery Minutes Schedule should accept Actions with CancellationToken as an argument This allows jobs to be notified when scheduler is stopped and end work sooner if possible var schedule new Schedule async CancellationToken cancellationToken forvar i i i await ConsoleOutWriteLineAsyncIm doing something await TaskDelay if cancellationTokenIsCancellationRequested Schedule cancelled return run runEvery Minutes Wants to show humanreadable jobs schedule like it does Windows Task Scheduler 