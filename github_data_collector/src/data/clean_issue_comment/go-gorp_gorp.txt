Without this change the test will run with gorp v This PR is for correcting The conditions for using the default value specified in the tag have been modified as follows before If there is a default value specified by the tag always insert it this fix Only if the specified value is nil or Zero value if there is a default value specified by the tag it is inserted Procedure and issue This is a sample Insert go err dbmapInsert CommentName bob Text Hello Instead of bob specified at the time of Insert No Name specified as a default value by a tag is inserted into Name img width alt src Environment My operating environment is as follows OS macOS Catalina Go Ver gorp c a b DB PostgreSQL Ver on docker Memo This behavior seems to be related to the Could be considered a way to supersede Adds a Cache interface uses it in columnToFieldIndex This can be simply backed by syncMap or a more complex cache library like ristretto No new deps but still gets the same category of performance increases described in Recommended to use arrays instead of varargs as the computer may struggle with the inefficiency of value vararg function calls QuerySuffix should be empty string Fixes oracle data types The issue raises a very typical use case for fields that are not physically present in the table as a column however they are computed on reads For example if I want to have a fullname property populated in type User struct fname string sname string fullname string for a table User fname sname the query dbMapSelectOne user select fname sname concatfname sname fullname from user will successfully map the result as expected however the inserts will fail If I ignore fullname field via db inserts will work as expected but reads will raise NoFieldInTypeError Despite this is a nonfatal error it breaks the old codebase that expects no errors This change introduces a new field Tag readonly that behaves exactly as a transient field dbgoreadStructColumns maps such column to ColumnMap with Transienttrue except gorpgocolumnToFieldIndex wont skip it for mapping select results Tested locally with postgres db nelsam hinet sql parameters for mssql p p pN on func d SqlServerDialect BindVar SQL execution error occurs on using from rubenvsqlmigrate The error message is below Incorrect syntax near the keyword It would be appreciated fixing to return sql parameters for denisenkomgomssqldb func d SqlServerDialect BindVari int string return return fmtSprintfpd i Thank you for your hard work Example golang package main import databasesql fmt githubcomlibpq gopkgingorpv type Foo struct ID int dbidprimarykey Bar string dbbar func main db sqlOpenpostgres postgresql dbMap gorpDbMapDb db Dialect gorpPostgresDialect dbMapAddTableWithNameFoo fooSetKeystrue ID foo err dbMapGetFoo There is no row corresponding to id fmtPrintlnfoo err The output will be nil nil DbMapGet returns nil nil if no row is found I think it should returns nil error if gorp cannot find any record Is this a bug or is there any reason