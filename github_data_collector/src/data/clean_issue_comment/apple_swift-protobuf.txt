Hi Could you add support for swift By the way how could I disable all checks for swift in generated proto files I would like to have only latest swift version in generated proto files Thanks macOS Xcode Build version C Swift SwiftProtobuf Camel casing the field names and enum cases when their names start with an underscore followed by a number results invalid identifiers for Swift language Sample proto snippet syntax proto option swiftprefix world message TestClasschekcAnycHANge optional int while enum EnumType mytype EnumType mytype mytype optional EnumType allowedenums Snippet from generated code var While Int Invalid identifier starts with a digit get return While set While newValue enum EnumType SwiftProtobufEnum typealias RawValue Int case MyType Invalid identifier starts with a digit case EnumType MyType Invalid identifier starts with a digit case MyType Invalid identifier starts with a digit I went through the code and found that it can be fixed by updating either the splitIdentifier method or the sanitize family of methods There is also a method to check identifier validity Preventing digit from inserting first in the splitIdentifier method or appending a leading underscore if a string starts with a digit in sanitize method can fix this issue I would submit a PR for review with test cases if the more appropriate method of the above two for updating is known Im using the buffers in an iOS app and would like to be able to troubleshoot parsing errors Is there a mechanism to dump info about them Thanks Id like to use more strict types that are backed by strings for representing fields like the URL type I realize that if its not in the protobuf spec its not supported but Im curious if you guys have some solutions design patterns for this My thinking is a type for serialization that then gets converted to another type that contains the special fields but that seems like a lot of extra work mapping the fields from one object to another Any other suggestions for handling this sort of thing Thanks Currently the BinaryEncoder pulls over string data a byte at a time but it looks like we could fastpath with withContiguousStorageIfAvailable and fall back to the loop only if need be See discussion in the ticket This PR adds a new method in Visitor Protocol However this PR did not address backward compatibility issue We opened this PR a while ago we currently use this PR in our codebase func traverseV SwiftProtobufVisitorvisitor inout V throws let shouldIncludeDefault visitorshouldIncludeDefault if selftextisEmpty shouldIncludeDefault try visitorvisitSingularStringFieldvalue selftext fieldNumber if selfaction searchCancelEventActionInvalid shouldIncludeDefault try visitorvisitSingularEnumFieldvalue selfaction fieldNumber if selfresultCount shouldIncludeDefault try visitorvisitSingularUInt Fieldvalue selfresultCount fieldNumber try unknownFieldstraversevisitor visitor I think ignoreUnknownFields in JSONDecodingOptions default value should be true when its false it would conflict with backward compatibility of proto The issue was already described in the past but looks like no PR was uploaded I know it is unwanted behaviour but in real life scenarios backend teams sometimes coming to the necessity of extending existing enums by adding new cases This leads to backward incompatibility in the mobile clients using swiftprotobuf generated models and when backend encodes enum cases with case names To avoid the issue an option added to pass unknown enum cases and use first enum case as default case following the best practice in proto programming Backend teams usually define first enum case as unknown or initial or any other with the intention that it will be used as a default case or to indicate the problem Messages have protoMessageName field Similar API should be generated for enums for example public var protoEnumName Of course this should be part of the SwiftProtobfEnum protocol Developing using iOS Swift proto I am about to add an extension which can support to output fields with their default values I just want to check whether it is already implemented Based on proto doc it looks like JSON options A proto JSON implementation may provide the following options Emit fields with default values Fields with default values are omitted by default in proto JSON output An implementation may provide an option to override this behavior and output fields with their default values I wonder does swift version has option to output fileds with their default values I found python version has it MessageToJsonmessage includingdefaultvaluefieldsFalse 