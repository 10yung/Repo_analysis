Coming from Expected Behavior Click Spec List shows list Current Behavior Clicking Spec List reloads page and runs all tests again Possible Solution Update With this fix Suite that reproduces the behavior for bugs npm install angularcli ng new app Change one test in appcomponentspects to fail ng test wait for tests to compilerun Should see specs failure Click Spec List Your Environment Angular JasmineCore karmajasminehtmlreporter This is not really a bug but hoping to not be ignored I appreciate how easy it is to test things with jasmine I wrote some utilities to jasmine that really helps simplify my testing one of them being an expectPromise proxy It would be really great to add this to the library as it would help a lot of people out when testing promises I implemented this using a Proxy object I could post the source code if anyones interested This is some sample code of how I use it javascript itshould do some stuff done expectPromiseselfasyncMethod toBeresult then expectPromiseselfasyncMethod toEqualresult then expectPromiseselfasyncMethod toEqualresult thendone donefail Are you creating an issue in the correct repository When in doubt create an issue here If you have an issue with the Jasmine docs file an issue in the docs repo here This repository is for the core Jasmine framework If you are using a test runner that wraps Jasmine consider filing an issue with that library if appropriate Jasmine npm Jasmine gem Jasmine py Gulp Jasmine Browser Karma Grunt Contrib Jasmine Provide a general summary of the issue in the Title above Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior Possible Solution Not obligatory but suggest a fixreason for the bug or ideas how to implement the addition or change Suite that reproduces the behavior for bugs Provide a sample suite that reproduces the bug javascript describesample function Context How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful in the real world Your Environment Include as many relevant details about the environment you experienced the bug in Version used Environment name and version eg Chrome nodejs Operating System and version desktop or mobile Link to your project Ive been working through the process of getting Jasmine up and running with a Rails project using webpack Im no webpack expert but I quickly learned that webpack is very aggressive at isolating JS code in separate files That means spec files have to actually importrequire the files containing the code under test which then means that Jasmine really has to be compiled by webpack So I create a Jasmine pack and I ran into the dreaded jasmineRequire is not defined error I found this referenced in and without resolution I havent looked at those issues in great detail but I believe its clear that this problem originates in Jasmine not the calling libraries The beginning of the problem lies in the definition of jasmineRequire in jasminejs javascript if typeof module undefined moduleexports typeof exports undefined jasmineRequire exports else jasmineRequire jasmineGlobaljasmineRequire In old asset pipeline world this just tacks jasmineRequire onto the global object window and other files access it all higgledy piggledy from there no worries But in new webpack world this assigns jasmineRequire as the export from the file available to other files that require this file At pack compile time the global objects assigned to window dont appear to be available to other files The files jasminehtmljs and bootjs both reference jasmineRequire without requiring the jasminejs file which defines it assuming it exists in the global scope Hence the missing reference the failure to load and general worldwide unhappiness The solution as presented here is simply to have those two files require jasminejs in the case that windowjasmineRequire is not available Ive made this change locally and Jasmine loads happily Peace and prosperity return to all the land ragaskar infews slackersoft Provide a general summary of the issue in the Title above the title says what is meant if the jasmine spec receives an exception and my code handles it the spec should not fail the spec should continue to test the feature that I expect to pass in my code Expected Behavior if the test code handles an error jasmine should not fail becuase an exception is thrown by the js code Current Behavior onerror the spec fails even though the js fn handles the error Suite that reproduces the behavior for bugs srcappedispatchcomponentspects inline same content import async ComponentFixture TestBed from angularcoretesting import EDispatchComponent from edispatchcomponent describeEDispatchComponent let component EDispatchComponent let fixture ComponentFixtureEDispatchComponent beforeEachasync TestBedconfigureTestingModule declarations EDispatchComponent compileComponents beforeEach fixture TestBedcreateComponentEDispatchComponent component fixturecomponentInstance fixturedetectChanges itshould create expectcomponenttoBeTruthy itshould not fail other test if I call AfterViewInit w the dispatch invocation inside create spyOncomponentngAfterViewInitandcallThrough componentngAfterViewInit itits not supposed to fail but if the code it tested sees an exceptioon it wil fail expectcomponenttoBeTruthy itits not supposed to fail but if the code it tested sees an exceptioon it wil fail expectcomponenttoBeTruthy itits not supposed to fail but if the code it tested sees an exceptioon it wil fail expectcomponenttoBeTruthy itits not supposed to fail but if the code it tested sees an exceptioon it wil fail expectcomponenttoBeTruthy Context I perform CI on my web app to deal with nasty bugs but how can I use this framework when I have to spend time on recreating the production environment and having test fail on simulation that is given wrong weight values almost as if its telling me how I should code my work this is a a base version as most bug reports request but if you contact me to see the actual bug where the error is handled not by throwing an error but by handling the event trigger with a different event trigger contact me Jasmine should not automate what fails or passes in the realm of programming language features such as noops and error handling the developer should always decide Your Environment System Linux Ubuntu Xenial System Architecture amd node v npm Angular refer to packagejson packagelockjson and srckarmaconfjs to better replicate Developer bug filing format System Linux Ubuntu Xenial System Architecture amd node v npm refer to packagejson packagelockjson and srckarmaconfjs to better replicate description window dispatchEvent in app code causes memory leak and specs to fail in different areas of the application solution use another framework attempt scripts ErrorComponentspects command ng test run command inside directory of Angular project path to attempts file sturture Angular project file structure expect the specific spec to be found in srcappedispatch errorHandledmemoryleakzip Use setProperty to attach information to spec results that can be picked up in specialized jasmine reporters Example usecases include Tagging specs with URLs or stringtokens referencing testplan docs Recording performance information for blocks of JS Provide a general summary of your changes in the Title above Description Describe your changes in detail Motivation and Context Why is this change required What problem does it solve If it fixes an open issue please link to the issue here How Has This Been Tested unit and integration tests Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue X New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help X My code follows the code style of this project X My change requires a change to the documentation I have updated the documentation accordingly X I have read the CONTRIBUTING document X I have added tests to cover my changes X All new and existing tests passed Description Adds an asyncTick method to jasmineClock and to the internal DelayedFunctionScheduler These are just a slight variation on the existing tick methods but they allow microtasks to run There is an existing loop in DelayedFunctionScheduler for running the scheduled timeoutsintervals I just want to make that an async loop and call clearStack to run any pending microtasks Simple Unfortunately it requires transforming the code I changed the existing loop into an async loop using a state machine with a switch statement This is how babel transpiles asyncawait although I did this manually Motivation and Context Closes This makes it possible to test code that uses timeouts in combination with Promises or asyncawait How Has This Been Tested Im fairly confident that the existing tests verify the transformed loop with the switch statement Thus Ive only added a handful of tests that verify microtasks get run one for the initial queue pumping one for the subsequent queue pumping one to verify that setTimeout and asyncTick interact as expected Problems At the moment the tests use asyncawait but once the review is close to the end Ill manually convert them from asyncawait to ES I have only run this on nodejs I will have to do something different in the browser and Im not sure how to handle IE which doesnt even have Promises Types of changes Bug fix nonbreaking change which fixes an issue x New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist x My code follows the code style of this project x My change requires a change to the documentation I have updated the documentation accordingly x I have read the CONTRIBUTING document x I have added tests to cover my changes x All new and existing tests passed Currently using spyOnAllFunctions on a module that has a mix of functions and classes breaks the class constructors Example Behavior class RetryableError extends Error retry const API RetryableError makeRequest describeAPI function itworks function spyOnAllFunctionsAPI new APIRetryableErrorretry Error retry is not a function the new returns APIRetryableErrorandcallThrough new APIRetryableErrorretry Error Class constructor RetryableError cannot be invoked without new Possible Solution It seems like the best solution is to ignore constructors because once you spy on one you cant fix it with andcallThrough and in general spying on constructors is an antipattern Your Environment node x x jasmine Error occurs on this line when error is undefined The error displayed isnt too helpful Seems to be caused by an unhandled promise rejection but does not occur within any specific test Could it be to do with the use of async Provide a general summary of your changes in the Title above Description Describe your changes in detail This is a PR to add a skip functionality to jasmine I am still working on this but wanted to make a WIP PR in case anyone would like to leave feedback as I work on this mostly because this is going to be a somewhat large addition Motivation and Context Why is this change required What problem does it solve If it fixes an open issue please link to the issue here The issue covers this in depth Ill do a better write up once this PR is more fleshed out How Has This Been Tested Please describe in detail how you tested your changes Include details of your testing environment and the tests you ran to see how your change affects other areas of the code etc There will be unit tests based on the specification of the original issue Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue x New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help My code follows the code style of this project My change requires a change to the documentation I have updated the documentation accordingly I have read the CONTRIBUTING document I have added tests to cover my changes All new and existing tests passed 