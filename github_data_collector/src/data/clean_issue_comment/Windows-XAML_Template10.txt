Right now you have to do this if you want to navigate to Settings csharp public override void RegisterTypesIContainerRegistry container containerRegisterViewSettingsPage SettingsPageViewModel Even if all you are doing is this csharp public override void RegisterTypesIContainerRegistry container containerRegisterViewSettingsPage I guess I have forgotten why we dont support navigating to a page by using a hunt for the type based on the key passed to the NavigationService I cant remember the reason we would not have done this and it seems like conventionsbased should handle most use cases which would make the RegisterTypes method considerably smallersimplereasier It would also enable simple apps to just plug and play What am I missing Its already possible to retrieve the NavigationService in a Template viewmodel using the GetNavigationService extension method off the NavigationParameters passed into the OnNavigatedTo and OnNavigatedToAsync methods You can also use GetSynchronizationContext to help with threading These are not discoverable I know but they are easy Heres the syntax csharp public class MyViewModel ViewModelBase private INavigationService nav public override void OnNavigatedToINavigationParameters parameters nav parametersGetNavigationService The issue here however is the change in heart I have had with NavigationService I believe that an app should create its own NavigationService lately I have been calling mine NavigationManager in order to disambiguate the name The reason to remove it from ViewModelBase as a public property is that it encourages a generic use case instead of an appspecific one It also shows up when using binding and thats really confusing Heres what I am recommending csharp public class NavigationManager private readonly NavigationService navigationService public NavigationManagerNavigationService navigationService navigationService navigationService public class MyViewModel ViewModelBase private readonly NavigationManager nav public MyViewModelNavigationManager navigationManager nav navigationManager This is not a recommendation to remove the extension methods or the ability to access the NavigationService Just removing the public property on the viewmodel in order to encourage better patterns If you dont want better patterns then the extension methods are still there You can also subclass ViewModelBase in order to restore the property too Hi i am using these two methodsOnNavigatedToAsyncOnNavigatedFromAsync in the view model when i am navigating to NavigateService then these two method was called but when i am navigating using FrameNavigate method this will not work please help Currently has ToString which requires csharp var path PathBuilderCreateBackStackBehaviorsClear nameofMyViewToString await NavigationServiceNavigateAsyncnew Uripath UriKindRelative This works and should not be changed The desired ADDITIONAL syntax would be csharp var path PathBuilderCreateBackStackBehaviorsClear nameofMyViewToUri await NavigationServiceNavigateAsyncpath It will be difficult to remember the UriKindRelative part anyway Hello I am not able build project from Template GitHub I am not sure where is the problem source code Visual studio or Windows My windows is version insider preview fast ring Visual Studio is Microsoft Visual Studio Community Version VisualStudio Release There are Solutions in Template GitHub Template NugetSample is OK Rebuild All started Project Template NugetSample Configuration Debug ARM Template NugetSample C Users PetrM Source Repos Template Samples Template NugetSample Template NugetSample bin ARM Debug Template NugetSampleexe Rebuild All succeeded failed skipped I could not load Template CoreDefault Error occurred while restoring NuGet packages The operation failed as details for project Template CoreDefault could not be loaded Error occurred while restoring NuGet packages The operation failed as details for project Template Core could not be loaded Rebuild All succeeded failed skipped And similar situation in Template Core solution Error occurred while restoring NuGet packages The operation failed as details for project Template Core could not be loaded Rebuild All succeeded failed skipped Visual studio interface Here is link to ZIP file with Visual studio activity log Do not hesitate and ask me for details Petr Right now we do both If you invoke a background task Applications EnteringBackground event is raised and OnStart is called Is that confusing Is that okay Not sure Would like your opinions Though I do believe this is a nice convenience for most developers it undermines the use of extended splash screens that delay activate until after the splash image loads That said perhaps there a way to make this conditional somehow Anyway at the least it should be removed This could be a UWP bug but the Template version of LeavingBackground should not be raised until at least the EnteringBackground has been raised one time In old T version there was a way to create extended splash screen in app constructor SplashFactory e new ViewsSplashe There is solution to override OnLaunched method in standard UWP App Unfortunate this method is sealed in Template I did not find any description ow web Please will you point me out where is some docs describing my problem Thanks in advance 