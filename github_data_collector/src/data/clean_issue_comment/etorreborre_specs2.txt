I havent been able to isolate the cause but upgrading orgspecs specs core testit orgspecs specs mock test orgspecs specs scalacheck test orgspecs specs core testit orgspecs specs mock test orgspecs specs scalacheck test Causes my test suite to take significantly longer and thrash the CPU Travis jobs often time out Upgrading to did not resolve this This spec here Has examples nested two deep ie foo should do something in bar in Using specs this runs fine with Scala and but with it doesnt run at all its as if the specs arent there Not sure if this is a Scala issue specs issue or if its by design with Scala and I need to update my specs In Scala Option extends IterableOnce and TraversableOnce is a deprecated alias to IterableOnce This creates an inconsistency with the output of failure messages including Options since Options become unquoted in Scala but quoted in Scala versions below etorreborre Id be happy to submit a PR to fix this but Id like your input first Should Options be quoted or unquoted It will be good to have a global setup and teardown for whole test suite in addition to the existing setup and teardown for each specification This will be very similar to BeforeClass in Junit and will be useful to manage expensive resources like a Db or a testContainer The approaches that I have seen so far has been by editing buildsbt Tinkering with buildsbt doesnt work well with tools for example IntelliJ which ignores the testOptions in buildsbt Is there a betterWay to achieve the same for example from specs runner This enables tests using syntax like this scala an IO MatchResult is implicitly a Result for x IOpure yield x must would be really useful to have such feature Fixes Using JUnit Vintage allows us to run vintage JUnit tests tests written in the JUnit style on the new JUnit Platform Therefore we dont need to upgrade the tests itself yet See JUnit Vintage aids in the migration of JUnit tests by running JUnit or JUnit tests within the JUnit context Also JUnit Vintage test engine implementation that allows to run vintage JUnit tests ie tests written in the JUnit or JUnit style on the new JUnit Platform JUnit releases Why upgrade So frameworks that use specs can also upgrade to JUnit without conflicting dependencies Hello is it possible to upgrade to latest JUnit 