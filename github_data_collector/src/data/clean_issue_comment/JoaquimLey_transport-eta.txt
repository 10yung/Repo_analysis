 Resource Context With all the recent changes in the jetpack and others the current version of the dependencies is falling behind It would also be interesting to install the widely used gradle plugin to check for these For AndroidXktx Plugin Example article Context There are PendingIntent params for sentIntent and deliveryIntent that we might be useful to know which sms code was sent this was there is no need to block or queue requests since the OS might be able to handle all that SmsManagersendTextMessage The javadoc Send a text based SMS p classnotestrongNotestrong Using this method requires that your app has the link androidManifestpermissionSENDSMS permissionp p classnotestrongNotestrong Beginning with Android API level if emand only ifem an app is not selected as the default SMS app the system automatically writes messages sent using this method to the SMS Provider the default SMS app is always responsible for writing its sent messages to the SMS Provider For information about how to behave as the default SMS app see link androidproviderTelephonyp param destinationAddress the address to send the message to param scAddress is the service center address or null to use the current default SMSC param text the body of the message to send param sentIntent if not NULL this codePendingIntentcode is broadcast when the message is successfully sent or failed The result code will be codeActivityRESULTOKcode for success or one of these errorsbr codeRESULTERRORGENERICFAILUREcodebr codeRESULTERRORRADIOOFFcodebr codeRESULTERRORNULLPDUcodebr For codeRESULTERRORGENERICFAILUREcode the sentIntent may include the extra errorCode containing a radio technology specific value generally only useful for troubleshootingbr The perapplication based SMS control checks sentIntent If sentIntent is NULL the caller will be checked against all unknown applications which cause smaller number of SMS to be sent in checking period param deliveryIntent if not NULL this codePendingIntentcode is broadcast when the message is delivered to the recipient The raw pdu of the status report is in the extended data pdu throws IllegalArgumentException if destinationAddress or text are empty Context This will be a very simple settings screen mostly to demotry out the Preferences API Resource AndroidDev summit talk Context For the target audicence theres a high possiblity users with some a y issues mainly visual impared Designing all features with a y in mind is paramount Ask for a y during onboarding Easy UX enabledisable state switch Test with Google talkback Remove images if this option is enabled Another option is to add a Description text but imo just adds unecessary clutter Resources Designing for Global Accessibility part blog Android Dev Summit talk about a y Context Run lint checks and run Danger to comment some code style related issues this way its possible to get some quick feedback on PRs for simple tasks Resources Awesome article by Joe Birch This will help explain give more context on what this project is Give more technical explanation of how things are wired Context Instead of depending on the Rx library we can leverage the builtin Kotlin tech Good resourcetutorial by Chris Banes Article with UseCase Context After all checks pass on the CI the generated artifacts should be distributed to the Playstore InternalFirebase Beta channel Sources Other refs 