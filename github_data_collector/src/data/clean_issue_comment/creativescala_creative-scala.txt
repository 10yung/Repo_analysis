Bumps jquery from to details summaryCommitssummary f e dddb Core Make isAttached work with iOS c e db Event Prevent leverageNative from registering duplicate dummy handlers d ac Event Fix handling of multiple async focus events b fadc Build Test on Nodejs stop testing on Nodejs d af Build Fix unresolved jQuery reference in finalPropName caea Build Updating the stable version to pre ea Release update AUTHORStxt c ef Release update version to pre d bc Build Update Sizzle from to Additional commits viewable in compare view details details summaryMaintainer changessummary This version was pushed to npm by timmywil a new releaser for jquery since your current version details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Hi I was working through the material myself to prepare for teaching it and I found a lot of little mistakes I got until chapter heres everything I found The question is full of exception output which confuses the question The solution starts with scala mdoc which doesnt belong there I am a bit surprised by StringindexOf being introduced here without any explanation of what indexOf does It will be used as an example later in the book so it might help to clarify this The example code Imagecircle is shown twice The example code Imagecircle besiderectangle draw does not compile It should be Imagecircle besideImagerectangle draw It says Doodle contains several layout methods for combining images described in tbl tblpictureslayout That table reference is broken and so is the table shown under it doesnt render correctly This looks slightly different in the pdf view vs the html view but theres a problem in both All examples in the broken table fail to compile because of the same reason noted above belowcircle wont work it should be belowImagecircle unless you import Image first but it doesnt say anywhere to do so Another broken table this time tblpicturescolor The title of the section is part of the example code Around this time I started running into an annoyance with trying out the example code in the console when you paste multiline code into the REPL console not with paste but with the OS paste function in some cases it seems to attempt to evaluate each line as its own expression I am not entirely sure what causes this or what to do about this though I dont know if something changed in Doodle but I keep getting different pictures if I run the examples than shown in Creative Scala The difference appears to be that the example code uses Imagecircle as if the param is the radius while actually it is the diameter Note that I did clone the template from github listed in the installation instructions See attached images This happens throughout the entire book image image Figure does not show Archery target with a stand as both the description and the following exercises implies It shows a coloured in target instead So the picture is wrong The example with paste is a bit strange for using Examplescala since if you put pastable code in Examplescala then on accidental reload of sbt youll get a compiler error on starting the console as explained in Using a file that wont get compiled eg something with a filename without the scala extension would be much clearer here At some point it might be good to mention an sbt reload is needed every time Examplescala is changed if you want to use it from the console The chapter intro has the wrong styling making it so words are cut off at weird places It feels like the Madness to our methods exercise doesnt really explain what it expects the student to do the solution link kinda comes out of nowhere The exercise halve has a visible scala mdoc in the solution The exercise stacked boxes does not show stacked boxes in the image fig Instead it shows a line of boxes Also while the solution says to change beside to above the code example still says beside We could also make the fill color a function n should probably be a function OF n The concentric circles exercisse makes the problem I wrote about in really obvious To fix this case not only the circle size should be doubled but also the amount by which the circle gets increased each recursive call Literally says insert picture here but you probably already knew that Another broken table view The exercise Function literals has another scala mdoc in the solution The link to Flowersscala is broken Broken figure link in the text figpicturesopenclosedpaths Broken table link tblsequencespathelement and also broken table Annoyingly the Scala REPL doesnt show the contents of a range anymore until is not shown as but as Range until You have to convert it to see it as a list If we try to create a Range over Double we get an error No not really Not in the Scala version in your template project at least scala to by warning there was one deprecation warning since for details enable setting deprecation or replay deprecation res scalacollectionimmutableNumericRange Double NumericRange to Also you introduce the to method here without explaining it it was until until now to is finally introduced later on in The solution at the bottom has a broken image reference Theres a box at the start of chapter saying If you run the examples from the SBT console within Doodle they will just work If not you will need to start your code with the following imports to make Doodle available mdoc scala import doodlecore import doodlecoreImage import doodlesyntax import doodlejvmJava DFrame import doodlebackendStandardInterpreter That mdoc scala at the beginning shouldnt be there Figure is not stacked boxes now It is same as figure This is a good textbook thank you I modified codes in Exercise Stacking Boxes I think I have to modify figure but I cant do it Because figure is not stacked boxes now It is same as figure So I will create an issue of this I was puzzled not to find it under original scala object One val a b val b a val answer a b Trick question This code doesnt work Here a and b are defined in terms of each other which leads to a circular dependency that cant be resolved problem I think the reason because this code doesnt work is actually two folds Circular declaration itself is not forbidden with Scala It just requires a type annotation on b as val b Int a The reason it doesnt work as in it will actually return incorrect value is because val a b is referencing b before it is initialized which seems to be treated as Making answer into which is scala scala object One val a b val b Int a val answer a b console warning Reference to uninitialized value b val a b defined object One scala Oneanswer res Int expectation If we want to expose the readers to val initialization order issue it might be worth changing the exercise to scala object One val a b val b val answer a b and note that fact that without Xfatalwarnings one could end up with incorrect answer original For bonus credit add a stand so we can place the target on a range as shown in figpicturestarget problem shown is actually a target with red and white color not a stand expectation Correct the image original Create circles that are and units wide Now draw them circle problem If the passed in parameter is radius then circle would draw circle with unit width expectation Id think the following would give the circle with width scala circle Am I understanding this wrong Operators says scala res Int res Int This second way of calling a method is known an operator style Ive never heard of this name before Is this operator style term used somewhere else I am not sure if Id associate dotandparen style more with operator than the infix notation since operator precedence etc would affect infix notation more 