 As noted in a few vulnerability checks dont make sense or arent working This PR addresses the renegotiation and compression checks Also a few redundant quotes in parsetlsserverhello and runcrime were removed If anything is missing or wrong please let us know or do a PR This is until from earlier time to need to follow Anybody volunteers Instructions taken from This file contains client handshake data manually created from Wireshark Instructions how to add a client simulation Start wireshark at the client router Best is during capture to filter for the target you want to contribute to Make sure you create a bit of encrypted traffic to a target of your choice Attention privacy if you want to contribute be aware that the ClientHello contains the target hostname SNI Make sure the client traffic is specific For just Android do not use a browser Best is to use the play store app Stop recording If needed sort for ClientHello Look for the ClientHello which matches the source IP destination you had in mind Check the destination hostname in the SNI extension so that you can be sure its the right traffic Retrieve handshakebytes by marking the Record Layer Copy As a hex stream Figure out protos and tlsvers by looking at the supportedversions TLS extension x b May work only on modern clients Be careful as some do not list all TLS versions here OpenSSL lists only TLS here Adjust lowestprotocol and highestprotocol accordingly Get curves from at the supported groups TLS extension x a Omit any GREASE Retrieve alpn by looking at the alpn TLS extension x Review TLS extension x d whether any SHA signature algorithm is listed If not requiresSha is true Leave maxDhBitsminDhBits and minRsaBitsmaxRsaBits at unless you know for sure what the client can handle For ciphers mark the Cipher Suites Copy As a hex stream remove any leading GREASE ciphers aa and supply it to utilshexstream ciphersh ciphersutes are TLS ciphersuites You can identify them as they currently are like x Retrieve them from above see utilshexstream ciphersh Figure out the services by applying a good piece of logic Before submitting a PR test it yourself You can also watch it again via wireshark Just doing some parallel mass scanning One is a Debian machine one an Opensuse Tumbleweed box On the latter its hard to do any scan successfully error message are all similar testsslsh q assumehttp S sneaky connecttimeout openssltimeout parallel log json S sslnative warningsbatch citrixcom Start citrixcom Further IP addresses c rDNS testsslsh line Bad file descriptor testsslsh line Bad file descriptor testsslsh line Bad file descriptor testsslsh line Bad file descriptor testsslsh line Bad file descriptor testsslsh line Bad file descriptor testsslsh line Bad file descriptor testsslsh line Bad file descriptor Service detected HTTP I havent researched that further yet but it looks to me like theres a conflict with the file handle in parallel scans Command line was MAXPARALLEL testsslsh q assumehttp S sneaky connecttimeout openssltimeout parallel log json S sslnative file top ktxt Only from scans succeeded OpenSSL introduced the ability to specify a security level By default the security level is set to unless a compiletime option is used to set the default a different value The security level may also be set by the command line eg openssl sclient cipher SECLEVEL ALL connect At the moment testsslsh does not use the SECLEVELn directive but we may want to look into using sclientoptions to add it in some circumstances The particular reason for suggesting this is and notes that This has as effect that SHA and MD SHA are no longer supported at security level This has as effect that TLS is no longer supported at the default security level of and that you need to set the security level to to use TLS However even without and OpenSSL and will test for more weak ciphers if the security level is set to rather than Please make sure that you provide enough information so that we understand what your issue is about uname a Linux FDLDL generic Ubuntu SMP Thu Nov UTC x x x GNULinux testssl version from the banner testsslsh b devnull head tail testsslsh rc from fa bb git log head if running from git repo commit fa bb d a d a d feb a e e c f openssl version used by testsslsh testsslsh b devnull awk F openssl print binopensslLinuxx steps to reproduce testsslsh or docker command line if possible incl host testsslsh t smtp MASKED what exactly was happening output is needed In case t is given as argument if STARTTLS handshake fails there is a prompt for providing an input Output given below testsslsh t smtp MASKED testsslsh rc from fa bb This program is free software Distribution and modification under GPLv permitted USAGE wo ANY WARRANTY USE IT AT YOUR OWN RISK Please file bugs Using OpenSSL chacha kdev ciphers on FDLDL binopensslLinuxx built Jan platform linuxx Start MASKED Further IP addresses MASKED rDNS MASKED MASKED STARTTLS handshake failed STARTTLS handshake failed STARTTLS handshake failed STARTTLS handshake failed STARTTLS handshake failed STARTTLS handshake failed STARTTLS handshake failed STARTTLS handshake failed MASKED doesnt seem to be a TLSSSL enabled server The results might look ok but they could be nonsense Really proceed yes to continue what did you expect instead In case of running for bulk list of domains it would not be possible for providing yes or no to each of the prompt in case the handshake fails It would be nice to have an auto response as an argument something like autoanswerprompt yesnodefault where yes and no have their respective meanings and default stands for which ever decision is considered as a default for that prompt which will consider the same response for any prompt in case encountered during the scan for any check This will be helpful for automation If there is any other way currently in the tool which I may be ignorant about which is being used for same purpose by others request you to let me know or add it as part of help as it may be helpful for others like me Thanks which seems now a relic to me Also it could support color Relevant code prettyprintlocal actuallysupportedosslciphers will rename actuallysupportedciphers 