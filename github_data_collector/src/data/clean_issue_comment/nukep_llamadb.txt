llamadb is broken in the current rust nightly release The first change is using the Cow smart pointer constructor instead of intocow since it has been depreciated The other change is to the timeDuration module where span was depreciated The idiomatic way to time a function is to use Instantnow with the corresponding elapsed function This is a rather frustrating buglimitation for those of us who like to copy and paste multilined text into the CLI If a multiline string is pasted only the first line will be inputted rustlinenoise is used to drive the CLI input Enabling multiline mode with linenoisesetmultiline doesnt seem to have any effect on my machine bit Linux using gnometerminal I dont feel that LlamaDB is at a point where it can serve as a standalone library yet The library crate is currently a bunch of hacks that expose internals such as parser modules This issue needs to wait on so that developers have a somewhat reasonable API to work with as well as a filebased DB tempdb wont be around for long Until then the llamadb crate has been reserved on cratesio Nicetohaves for the library A sql macro that statically validates and compiles the SQL query to an extent This may be hard to do without schema information At least have it validate the syntax possibly compile into AST A C API for use by other programming languages Columns should only be able to be omitted from INSERT if the column is autoincrementing or has the DEFAULT constraint with a provided default value sql SELECT avgmilliseconds FROM track currently compiles into lisp tempgroupby sourceid scan track sourceid yield columnfield sourceid columnoffset columnfield sourceid columnoffset columnfield sourceid columnoffset columnfield sourceid columnoffset columnfield sourceid columnoffset columnfield sourceid columnoffset columnfield sourceid columnoffset columnfield sourceid columnoffset columnfield sourceid columnoffset groupbyvalues yield avg sourceid columnfield sourceid columnoffset The tempgroupby creates a redundant temporary group when simply using the tables group could suffice This could be done with a new scangroup function or similar lisp scangroup track sourceid yield avg sourceid columnfield sourceid columnoffset x Numbers x Strings x NULL Byte arrays x Subqueries x Aggregate function calls Scalar function calls x Binary comparison x Binary arithmetic x Unary x AND x OR NOT x EXISTS BETWEEN AND IN CASE IS NULL IS NOT NULL LIKE To guarantee that SQL queries actually do as theyre told a very thorough test suite needs to be added Sqllogictest may be worth looking into These are in place until their features are complete x STRING A variablelength UTF string Alias VARCHAR x Ux where x is and and is a multiple An unsigned integer x Ix where x is and and is a multiple An signed integer Alias for I INT or INTEGER x F A doubleprecision bit floating point number Alias DOUBLE x byte A variablelength byte array x byte N A fixedlength byte array UUID A universally unique identifier JSON A JSON document encoded using MessagePack BCRYPT SCRYPT PBKDF 