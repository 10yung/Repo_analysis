 testxml Description Provide a general summary of your changes in the Title above Describe your changes in detail here Motivation and Context Why is this change required What problem does it solve If it fixes an open issue please link to the issue here How Has This Been Tested Please describe in detail how you tested your changes Include details of your testing environment tests ran to see how your change affects other areas of the code etc Screenshots if appropriate Types of changes What types of changes does your code introduce Delete as appropriate Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to not work as expected Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help My code follows the code style styleguide of this project I have updated the documentation accordingly styleguide Description Change GUI for Test Script Recorder add choice list for sampler numbering in prefix or suffix Add choice list with Prefix number start Default Suffix number at the end Witout numbering Add text field to set the next number start at Add text field to set the number format String format String format syntax default d Motivation and Context I preferred the numeration of the samplers like the version of JMeter and there was no choice of selection of the suffix or prefix number Quite often I had to leave JMeter to have a samplers numbering that starts at Now you can set the next number Description Add BackendListener that sends raw results to InfluxDB Instead of summarised statistics this listener sends the raw results for each sample to InfluxDB In its current form it sends connect time ttfb latency and duration Are there other metrics that would be essential to send Added extra method to InfluxdbMetricsSender public void addMetricString measurement String tag String field long timestamp This is a draft PR to start a discussion about what more needs to be done or could be done before including Motivation and Context As can be seen from the below graphs in a low TPS situation the current InfluxDB listener has a misleading max value and you lose a lot of detail with avg etc GrafanaJMeterInfluxDBListenerslowtps In a slightly higher TPS test you can see that the time is slightly off due to the listener using SystemcurrentTimeMillis instead of the sample end or start time and also interesting details are lost due to the summary nature of the listener GrafanaJMeterInfluxDBListeners How Has This Been Tested Tested with a few simple test plans against a local InxlufDB and Grafana and also the Influx cloud Screenshots if appropriate Types of changes New feature nonbreaking change which adds functionality Checklist x My code follows the code style styleguide of this project x I have updated the documentation accordingly styleguide Description Documentation missing default append value in new StringToFile function Motivation and Context Add default append value to StringToFile documentation How Has This Been Tested The default value for append is true Screenshots if appropriate Types of changes Bug fix nonbreaking change which fixes an issue Checklist X My code follows the code style styleguide of this project X I have updated the documentation accordingly styleguide Description See Motivation and Context JMeter should not block threads on long pauses That would enable testing with big think times with little amount of threads save RAM Javas Loom Checklist x try adding Kotlin Implement multitasking Description New Feature Enhancement for auto correlation Motivation and Context It is hard to fix JMeters scripts for collaboration like session value So we created a prototype for the autocorrelation feature covering the following use case a Record the first test plan Save it b Record the second test plan keep it open in JMeter and upload the first test plan for autocorrelation c Select the parameters for correlation and save the correlated test plan We shared the prototype to our internal teams to try and we received a positive feedback from them It encouraged us to share the idea with the community and we received a positive response from community as well Mr Phillipe responded saying the community will definitely take interest in the PR Mr Alex shared an additional use case which can be supported Use case is to allow the user to export the correlation rules file from an existing correlated script The user can use the rules to correlate scripts in future These rules can be standardized and distributed across the community Although this will be implemented in future How Has This Been Tested We have tested autocorrelation feature on inhouse applications and global applications like gitlab redmine etc Business logic is tested using JUnit Test with coverage GUI has been covered via Functional tests Screenshots if appropriate Types of changes New feature nonbreaking change which adds functionality New feature nonbreaking change which adds functionality The following modules have been added in the code Comparator Correlationjava Used to compare parameters from two scripts CSS Selector Extractor Creator CreateCSSSelectorExtractorjava Used to create CSS Selector expression for a parameter in response data Create Regular Expression Extractor CorrelationExtractorjava Used to create Regular Expression for a parameter in a response data The following changes are done to the code GUI Action Correlation ActionNamesjava MenuFactoryjava JTable to Display parameters which are a candidate for correlation CorrelationTableModeljava CorrelationGuijava JFileChooser browse menu to browse for script CorrelationDialogerjava FileDialogerjava Checklist x My code follows the code style styleguide of this project I have updated the documentation accordingly styleguide TODOs Mr Phillipe had some initial comments on the enhancement proposal asking to support different extractors based on different response content type We have implemented CSSSelectorExtractor and we have plan to implement XPath Extractor and JSONPathExtractor in future We have plan to implement the use case shared by Mr Alex as mentioned in the motivation ie allow the user to export autocorrelation rules file and use that rule file to correlate scripts Description Added extra checkstyle rule and updated to is the current latest but it causes a lot more errors especially usage of and in JavaDoc Types of changes Bug fix nonbreaking change which fixes an issue 