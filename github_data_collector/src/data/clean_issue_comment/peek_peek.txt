Just wondering if Peek is still targeting compatibility with Rails The gemspec requires railties version but the commit located here introduced code that only works in Rails That commit adds a reference to the app headers in the ActiveSupport notification payload for getting the request ID Those headers were added in this commit which targeted Rails Im not knowledgable enough with Rails internals to come up with a PR to make it work in Rails e gitlab uses webpack instead of sprockets for assets this makes adding the js files to vendorassetsjavascripts which is not a good thing for tracking versions Having them available via npmjscom will help in tracking versions easily See Installing peekgit r g cbdd on Kernel MANJARO x bits gcc Desktop Xfce Gtk I get the following warnings tmppamacbuildbeastpeekgitsrcpeeksrcrecordingrecordingareavala warning GdkScreengetwidth has been deprecated since tmppamacbuildbeastpeekgitsrcpeeksrcrecordingrecordingareavala warning GdkScreengetheight has been deprecated since Compilation succeeded warnings tmppamacbuildbeastpeekgitsrcpeektestssrcrecordingrecordingareavala warning GdkScreengetwidth has been deprecated since tmppamacbuildbeastpeekgitsrcpeektestssrcrecordingrecordingareavala warning GdkScreengetheight has been deprecated since Compilation succeeded warnings Generating screenrecordertestrecordingareac srcrecordingrecordingareac tmppamacbuildbeastpeekgitsrcpeektestssrcrecordingrecordingareavala warning GdkScreengetwidth has been deprecated since tmppamacbuildbeastpeekgitsrcpeektestssrcrecordingrecordingareavala warning GdkScreengetheight has been deprecated since Compilation succeeded warnings On high resolution displays the GIF is rendered at native resolution by default which is nice but often standard definition is sufficient is rendered faster and uses less memory one quarter in case of UHD Therefore it would be nice if an option could be provided for reducing the resolution from whatever resolution is used to the standard resolution I thought maybe its useful to provide an option to crop the last hundreds of milliseconds or seconds at the end of the recording because they often just contain moving the mouse to the stop button Or when the user sees that nothing changed in the last seconds and therefore stops the recording heshe can crop this superfluous part This saves space and upload time especially at higher resolutions like UHD or when big parts of the screen are captured Could you please implement showing the file choser for saving the GIF directly after recording is finished This way rendering can run in the background and we can make the next record without having to wait for the previous rendering to finish While showing the file choser rendering can start in a parallel thread for further speed up Hi deski Following up on our discussion in This PR adds info from the peek cookie as discussed It does not save Peek results unless the peek cookie is enabled Always sets the cookie if peek is enabled In the case Peek was not enabled for a request and is toggled on PeekViews with a datadeferto are hidden and a refresh message is displayed screen shot at pm The browser is requesting peekresultsrequestid with no requestid How can I track this down Original I have installed the gem and the views I want set up routesrb and the initializer and added render peekbar right after body in applicationhtmlerb but the bar does not render If I view source I see body div classcontainer So it appears to be rendering an empty stringblank line Does anyone have any idea what could be going wrong As mobile devices and responsive design rises peek would be even better if it wouldnt break on mobile devices aka smaller screens At the moment the instruments dont wrap when the screen gets smaller if this would happen Id be more than happy sparklingheart Hi Im using modified tipsy library in my project and once enabling Peek creates a mismatch between my inhouse version and that bundled with Peek Would it be possible to contain it somehow without polluting global namespaces Cheers 