We have been using unicorn worker killer in our application however we need to kill the unicorn worker frequently due to high CPU usages and does not release It would be nice to have a feature to restart or kill unicorn based on the CPU usages for a long period This is just a quick question Ive googled this quite a bit and havent found an answer In this configuration use UnicornWorkerKillerOom memorylimitmin memorylimitmax What does the represent Is the the number of processes on the box Im running on a core machine so would I want to change that to Thanks x Cover modules with RSpec tests x Restructure monolithic UnicornWorkerKiller module x Add TravisCI config support MRI versions since Build Status Im sorry for the silly PR but I got confused by the message a bit maybe this is clearer dont hesitate to close it if you dont like it though Running Gitlab on a memoryconstrained RPI where unicornworkerkiller is used to restart workers after every X requests Problem is that requests are infrequent and memory leaks accumulate while worker is running even without any requests Would be great to have option to set a time interval for the memory check instead of only doing it every X requests Not currently sure how to check if the worker killer is working Also where can I check the logs of unicorn worker killer When visiting a page that previously would have rendered a page in my rails app I am now getting a error after adding unicornworkerkiller I get the following error in my unicorn error log Error during failsafe response uncaught throw warden homedeploybundlermyappruby gemswarden libwardenproxyrb in throw homedeploybundlermyappruby gemswarden libwardenproxyrb in authenticate homedeploybundlermyappruby gemsdevise libdevisecontrollershelpersrb in authenticateuser homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in block in makelambda homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in block in haltingandconditional homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in block in call homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in each homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in call homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in runcallbacks homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in runprocessactioncallbacks homedeploybundlermyappruby gemsactivesupport libactivesupportcallbacksrb in runcallbacks homedeploybundlermyappruby gemsactionpack libabstractcontrollercallbacksrb in processaction homedeploybundlermyappruby gemsactionpack libactioncontrollermetalrescuerb in processaction homedeploybundlermyappruby gemsactionpack libactioncontrollermetalinstrumentationrb in block in processaction homedeploybundlermyappruby gemsactivesupport libactivesupportnotificationsrb in block in instrument homedeploybundlermyappruby gemsactivesupport libactivesupportnotificationsinstrumenterrb in instrument homedeploybundlermyappruby gemsactivesupport libactivesupportnotificationsrb in instrument homedeploybundlermyappruby gemsactionpack libactioncontrollermetalinstrumentationrb in processaction homedeploybundlermyappruby gemsactionpack libactioncontrollermetalparamswrapperrb in processaction homedeploybundlermyappruby gemsactiverecord libactiverecordrailtiescontrollerruntimerb in processaction homedeploybundlermyappruby gemsactionpack libabstractcontrollerbaserb in process homedeploybundlermyappruby gemsactionview libactionviewrenderingrb in process homedeploybundlermyappruby gemsactionpack libactioncontrollermetalrb in dispatch homedeploybundlermyappruby gemsactionpack libactioncontrollermetalrackdelegationrb in dispatch homedeploybundlermyappruby gemsactionpack libactioncontrollermetalrb in block in action homedeploybundlermyappruby gemsactionpack libactiondispatchroutingroutesetrb in dispatch homedeploybundlermyappruby gemsactionpack libactiondispatchroutingroutesetrb in serve homedeploybundlermyappruby gemsactionpack libactiondispatchjourneyrouterrb in block in serve homedeploybundlermyappruby gemsactionpack libactiondispatchjourneyrouterrb in each homedeploybundlermyappruby gemsactionpack libactiondispatchjourneyrouterrb in serve homedeploybundlermyappruby gemsactionpack libactiondispatchroutingroutesetrb in call homedeploybundlermyappruby gemsactionpack libactiondispatchmiddlewareshowexceptionsrb in renderexception homedeploybundlermyappruby gemsactionpack libactiondispatchmiddlewareshowexceptionsrb in rescue in call homedeploybundlermyappruby gemsactionpack libactiondispatchmiddlewareshowexceptionsrb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsrailties librailsrackloggerrb in callapp homedeploybundlermyappruby gemsrailties librailsrackloggerrb in block in call homedeploybundlermyappruby gemsactivesupport libactivesupporttaggedloggingrb in block in tagged homedeploybundlermyappruby gemsactivesupport libactivesupporttaggedloggingrb in tagged homedeploybundlermyappruby gemsactivesupport libactivesupporttaggedloggingrb in tagged homedeploybundlermyappruby gemsrailties librailsrackloggerrb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsrequeststore librequeststoremiddlewarerb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsactionpack libactiondispatchmiddlewarerequestidrb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsrack librackmethodoverriderb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsrack librackruntimerb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsactivesupport libactivesupportcachestrategylocalcachemiddlewarerb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsrack libracksendfilerb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsactionpack libactiondispatchmiddlewaresslrb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsrailties librailsenginerb in call homedeploybundlermyappruby gemsrailties librailsapplicationrb in call homedeploybundlermyappruby gemsnewrelicrpm libnewrelicagentinstrumentationmiddlewaretracingrb in call homedeploybundlermyappruby gemsunicorn libunicornhttpserverrb in processclient homedeploybundlermyappruby gemsunicorn libunicornhttpserverrb in workerloop homedeploybundlermyappruby gemsunicorn libunicornhttpserverrb in spawnmissingworkers homedeploybundlermyappruby gemsunicorn libunicornhttpserverrb in start homedeploybundlermyappruby gemsunicorn binunicornrails in top required homedeploybundlermyappruby binunicornrails in load homedeploybundlermyappruby binunicornrails in main Anyone else getting this error Any ideas How can we check that unicorn worker process are getting killed and process can respawn themselves as per the prememory limit set in unicornworkerkiller module What is the memory maths around which we should calculate and set the threshold value of max and min memory limit I am not able to read the memory process usage below is the terminal spit and few things I tried to understand the implementation and observation at the memory level that unicornworkerkiller is doing its task Was this a typo Without install it says ERROR While executing gem GemCommandLineError Unknown command unicornworkerkiller How do I determine how much memory a unicorn worker is currently using 