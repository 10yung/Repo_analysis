What are you trying to accomplish with this PR Allow compatibility with foggoogle and recent googleapiclient gems that require a newer version of googleauth How is this accomplished Relax version dependency in gemspec What could go wrong New googleauth could break google functionality in krane which is actually functionality in kubeclient I dont see anything breaking in the changelog here but Im not familiar enough with kranes test suite to say if the kubeclient bits that use googleauth are implicitly tested anywhere So what do yall think When reading the usage of krane run in the READMEmd I noticed the template option was documented as being optional This doesnt match the current behaviour of krane run krane run No value provided for required options template After chatting with dturn it sounds like this was a typo in the READMEmd hence this PR What are you trying to accomplish with this PR Release v How is this accomplished Follow the steps in Also grab commits What could go wrong Missed something in the change lot Code that got merged was bad What are you trying to accomplish with this PR Do not use deprecated fields of k s Events api How is this accomplished This PR just removes code that was added to handle a situation where count and lastTimestamp k s fields where not available locally when running tests After investigation with Danny seems the problem happens when you have a minikube cluster with incompatible client and server which was my case bash kubectl context minikube version Client Version versionInfoMajor Minor GitVersionv dispatcher GitCommit e c e f f af cf b c f GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformdarwinamd Server Version versionInfoMajor Minor GitVersionv GitCommitc fe ef df d e c c e b GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Update Actually the real cause is that Kubernetes is affected by a bug as described here Which caused this img width altScreen Shot at PM src To fix it I deleted my local cluster with minikube delete and recreated one with dev up which gave me this bash kubectl context minikube version Client Version versionInfoMajor Minor GitVersionv dispatcher GitCommit e c e f f af cf b c f GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformdarwinamd Server Version versionInfoMajor Minor GitVersionv GitCommit a febe a abce d a a GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Which made the test pass img width altScreen Shot at PM src What could go wrong I cant think of any problem as our tests are running in buildkite and locally but it should be easier to revert if we bump into a new problem What are you trying to accomplish with this PR Makes it easier to install in apps that have other versions of googleauth How is this accomplished Relax googleauth version to be greater than or equal to the version it used to require What could go wrong Deployments fail if theres a new version of googleauth with a breaking change any version of x does not have any compatibility promises according to semver supsmall smallsup subHelm is already well established in the community and has a wealth of prebuilt packages It would be great if krane could be used with helm so that you use helm to install your software but use krane to determine the success of the rolloutsub Why upgrade Thor The update to Thor contains desirable changes Accept as an argument not a flag Allow options to be repeatable will allow us to deprecate the stdin flag in favour of allowing to be passed as an argument to f allows a closer semblance to kubectl semantics by allowing flags to be repeated in a given invocation TODO Flesh out CLI tests What are you trying to accomplish with this PR Make it safer and easier to write tests that modify the global namespace Related to How is this accomplished x Make deployglobalfixtures automatically rescope all resources correctly including CRDs x Make the test suite automatically clean up everything deployed by deployglobalfixtures after the test is finished the same time we clean up namespaces x Get rid of all usage of deployglobalfixturesnonnamespaced and the cleanup false option on globaldeploydirswithoutprofiling x Scope all CRD name fields to the test to make them truly unique Adjust a boatload of tests x Move any tests that are now concurrencysafe out of the serial test file and make sure the reasons the others cant move are well documented Note that unfortunately any test that creates CRDs still isnt concurrencysafe because it effectively changes our dynamic pruning whitelist If a CRD is removed in the middle of a namespaced deploy that deploy will fail with an apply error because the pruning whitelist will reference a nonexistent kind That said CRD tests are still improved by this PR in that the suite now cleans up after them properly with no additional effort on the test writers part and we no longer need to wait for the CRDs to fully go away between tests because they are actually unique and wont interfere with each other What could go wrong Tests could be invalidated or become flakey What are you trying to accomplish with this PR Fix the pipeline setting in space alignment is wrong in last PR but good news is our shipit CI build is able to recognize these two pipelines What are you trying to accomplish with this PR Fixes for good How is this accomplished We know that kubectl is returning utf encoded strings so if Ruby has interpreted them otherwise correct it Only do the gsub when were going to use the result What could go wrong I dont have much experience working with encodings so if this solution is weird call me out 