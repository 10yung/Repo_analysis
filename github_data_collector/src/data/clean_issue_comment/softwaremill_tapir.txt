First of all I want to apology if this is not acceptable to open a ticket for asking for help and not for a bug Also I know there is others tickets about this subject but the API have change since and reading them did not help me to understand the best way to generate the schema for my data structure So here is my datastructure simplified version scala sealed trait ExampleCriterion val kind String case class ExampleExistfieldName String extends ExampleCriterion val kind ExampleExistkind object ExampleExist val kind exist case class ExampleNotinner ExampleCriterion extends ExampleCriterion val kind ExampleNotkind object ExampleNot val kind not Here is my naive tentative scala implicit def schemasForExampleCriterion Schema ExampleCriterion SchemaoneOf ExampleCriterion String kind identity ExampleNotkind implicitly Schema ExampleNot ExampleExistkind implicitly Schema ExampleExist Wish of course result in a stackoverflow But the following answer seems to say it should work I guess I should handwrite the schema but I am a bit confuse with SRef and SObjectInfo Version Running package example import sttptapir import sttptapirclientsttp import sttpclient object Main case class Fooi Int d Double def mainargs Array String Unit printlnHello comexampleEmpty Project val e endpoint inadf inpath String inpath Int inpath Double mapIn case s i d s Fooi d case s foo s fooi food etoSttpRequesturi Foo Throws an exception at runtime javalangString cannot be cast to scalaTuple Repro project Given simple example sealed trait Entity def name String case class Personname String age Int extends Entity case class Organizationname String extends Entity Check if it is doable to create a validator for entity which will validate name and it will be also used against Person and Organization Ref As I understand OpenAPI specification permits usage of security scopes for operations But tapir openapi interpreter contains next lines scala for now all auths have empty scope val securityRequirement authNamesmap VectoremptytoListMap Why scopes was removed from operation security object Is it a bug Here example of redoc with security scopes per operation Theres not a clear way to return Something Unit as an endpoint output Constructing as Endpoint H Unit Nothing outheaderFn outemptyOutputexplicitlytapirtypelevelParamConcatconcatSingleAndSingle returns javalangIllegalStateException Outputs and output values dont match in output MultipleVectorMappedMultipleVectorHeader sttptapirEndpointOutputLambda ed bb sttptapirEndpointOutputLambda da e values ListHeadera cc b c f a ebd f a Trying to manually map like Endpoint H Unit Nothing outstatusCodeStatusCodeNoContent mapOutheader header tuple tuple throws javalangClassCastException H cannot be cast to scalaTuple This would make it easier to make composable logic for endpoints in particular so my Unit response from the central logic could be used as O in the reusable functions that add my headers cookies etc Would this be solvable with something like outnoBody or possibly have the option for a No Content to be an output that tuples Unit I have been looking for an example of using oauth tapir and http s but havent found it Even though an example using http s would be a perfect fit for me any examples of using tapir and oauth will be appreciated With endpoint output defined like this out jsonBody Seq User exampleSeqUser Someaddress descriptionResponse with embedded address exampleSeqUser None descriptionResponse without embeddings only the last example is included in the openapi yaml I would expect both to be present First thanks for putting together a strong foundation for defining APIs from the Scala Type system It has been a great help already As I have used the package more I was trying to build a schema to describe flexible filters in the body and I am running into some oddities in the Yaml OAS generation I am currently using but from the release notes I dont think it will be different in planning to upgrade soon I have boiled down the issues I am seeing to this sample test object SimpleTest extends App sealed trait Term sealed trait Literal extends Term case class Iv Long case class Dv Double case class Sv String sealed trait Reference extends Term case object IRef extends Reference case object DRef extends Reference case object SRef extends Reference sealed trait Op case object Eq extends Op case object Lt extends Op case object Gt extends Op sealed trait Compose case object And extends Compose case object Or extends Compose sealed trait Clause case class Expressionop Op l Reference r Term extends Clause case class Notnot Clause extends Clause case class Compositeop Compose over List Clause extends Clause import tapir import iocircegenericauto import iocirceDecoder Encoder import tapirjsoncirceencoderDecoderCodec private lazy val body jsonBody Clause val endpointDef endpointpost inbody outjsonBody String descriptionOK errorOutjsonBody String descriptionAn error occurred import tapirdocsopenapi import tapiropenapiOpenAPI import tapiropenapicirceyaml val oas OpenAPI endpointDef NiltoOpenAPIFILTER ENDPOINT SNAMPSHOT val schema oastoYaml printlnsSchema nschema The generated Yaml is Schema openapi info title FILTER ENDPOINT version SNAMPSHOT paths post operationId postRoot requestBody content applicationjson schema ref componentsschemasClause required true responses description OK content applicationjson schema type string default description An error occurred content applicationjson schema type string components schemas Or type object Term oneOf ref componentsschemasIRef ref componentsschemasDRef ref componentsschemasSRef Not required not type object properties not ref componentsschemasClause Expression required op l r type object properties op ref componentsschemasOp l ref componentsschemasReference r ref componentsschemasTerm Clause oneOf ref componentsschemasExpression Reference oneOf ref componentsschemasIRef ref componentsschemasDRef ref componentsschemasSRef IRef type object DRef type object Op oneOf ref componentsschemasEq ref componentsschemasLt ref componentsschemasGt Eq type object Compose oneOf ref componentsschemasAnd ref componentsschemasOr Gt type object Composite required op over type object properties op ref componentsschemasCompose over type array items ref componentsschemasClause And type object SRef type object Lt type object The things that are stumping me are The Clause schema only lists Expression as a one of its options I would expect to see Expression Composite Not The schema for Term should be oneOf with options Reference and Literal instead of repeating the Reference Options and skipping Literal altogether I would expect the case object types to be translated as a string schemas with an enum constraint instead of unqualified objects I have tried to provide some hints using the custom types descriptions in the docs but with not much success The results vary a bit but I am not able to get them to line up in particular Could you give me some guidance on how to give enough information to be able to get the schema and hopefully then validators encoders and decoders to generate the code I am expecting Or may be I am missing something in the way I am approaching the problem Thanks a lot for your help Miguel PS Please feel free to use the example in any way it may be useful for unit test docs or anything else Targeting fgrutsch and I decided to try how easy it is to introduce Scalajs support for tapir as it would be really cool to use the tapirsttpclient from Scalajs applications What we did so far was introducing sbtcrossproject and changing the following modules to build on the JSPlatform coreJS tapirCatsJS circeJsonJS playJsonJS uPickleJsonJS sttpClientJS As far as we have seen all other modules have dependencies that dont allow building for the JSPlatform which would not be useful as they are mainly the server implementations All modules that somehow depend on circeyaml can not be built for the JSPlatform as of the transitive dependency on snakeyaml This affects only openapi modules which also doesnt seem to be critical As long as there is no Scalajs server implementation it barely makes sense to have the openapi modules for Scalajs The strategy for introducing Scalajs support has been copied over from the sttp and sttpmodel repository Scala Native support was dropped intentionally to reduce the scope of this PR Things we found out playJson has to be built with CrossTypeFull as playjson doesnt excludes the Reads javautilDate from the js build and only introduces it on the jvm We currently decided to comment out the affected tests and wait on feedback on how to proceed sprayboilerplateBoilerplatePlugin doesnt play nicely with cross projects Depending on how far the implementation of Scalajs support should go we see the following open tasks Introduce tapirsttpclient tests for js as the existing tests depend on asynchttpclientbackendfs and we would need to introduce separate tests using the fetch backend including the same selenium ceremony as in sttp Either keep the playJson tests ignored or switch this project over to CrossTypeFull only testing the javautilDate for the jvm Fix core to run the tests successfully on JS Fix upickle to run the tests successfully on JS