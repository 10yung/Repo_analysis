Hi I would like to write custom asserts for javaxwsrscoreResponse Most of it is straightforward However I would like to assert the body of a response But before accessing the body a call of ResponsereadEntity is necessary Can I fluently unwrap a value and add an assertion to the resulting value Eg kotlin assertThatresponsehasBodyMyTypeisDataClassEqualToMyTypeconstructorParam Where hasBody asserts that there is a body available and it can be deserialized to the requested type and then I can add other assertions to the resulting type Of course I could write an assert like kotlin assertThatresponsehasBodyDataClassEqualToMyTypeconstructorParam However since the body of a response can be literally of any type with this approach I need to delegate a lot of asserts Cheers The kotlin version of assertk not assertkjvm is not available on mavenCentral Is it not available anymore and should one also use assertkjvm for pure Kotlin instead If I apply assertkjvm to a pure JVM module Gradle reports this Could not resolve comwillowtreeappsassertkassertkjvm Required by project coretest Cannot choose between the following variants of comwillowtreeappsassertkassertkjvm jvmapi jvmruntime metadataapi All of them match the consumer attributes Variant jvmapi capability comwillowtreeappsassertkassertkjvm Unmatched attributes Found orggradlelibraryelements jar but wasnt required Found orggradlestatus release but wasnt required Found orggradleusage javaapi but wasnt required Found orgjetbrainskotlinplatformtype jvm but wasnt required Variant jvmruntime capability comwillowtreeappsassertkassertkjvm Unmatched attributes Found orggradlelibraryelements jar but wasnt required Found orggradlestatus release but wasnt required Found orggradleusage javaruntime but wasnt required Found orgjetbrainskotlinplatformtype jvm but wasnt required Variant metadataapi capability comwillowtreeappsassertkassertkjvm Unmatched attributes Found orggradlestatus release but wasnt required Found orggradleusage kotlinapi but wasnt required Found orgjetbrainskotlinplatformtype common but wasnt required Should I apply the jvmruntime artifact in this case In assertk the failure message is made up of parts kotlin assertThatPersonSue propname PersonnameisEqualToBob expected name Bob but was Sue PersonnameSue age name name The name of the object you are asserting on this can be passed in with assertThatactual name name and its calculated automatically for some methods like prop message Bob but was Sue the actual failure expressed with expected or fail context PersonnameSue age the object you are asserting on There is currently no way to set this but its displayed automatically when you are asserting on a piece of it with methods like prop The problem is there is no way to customize whats displayed for the context If the class you are asserting on doesnt implement toString in a useful way you are out of luck Some ideas to solve this Allow passing in a custom context We can do this like you can pass in a custom name now Would have to think about the name not sure that context is the best name for this not much thought was put into the naming as its only used internally currently Allow some sort of customization of show Right now show is hardcoded to handle specific platform types falling back to toString Need to think about the api for this are we customizing all shows in the assertion or just the context one On request in OpenTest j support was added but that doesnt seem to exist in the classpath during test execution in IntelliJ javalangAssertionError javalangNoClassDefFoundError orgopentest jAssertionFailedError at mypackageMyTestshouldVerifySomethingMyTestkt at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at orgjunitrunnersmodelFrameworkMethod runReflectiveCallFrameworkMethodjava at orgjunitinternalrunnersmodelReflectiveCallablerunReflectiveCallablejava at orgjunitrunnersmodelFrameworkMethodinvokeExplosivelyFrameworkMethodjava at orgjunitinternalrunnersstatementsInvokeMethodevaluateInvokeMethodjava at orgrobolectricRobolectricTestRunnerHelperTestRunner evaluateRobolectricTestRunnerjava at orgjunitinternalrunnersstatementsRunBeforesevaluateRunBeforesjava at orgrobolectricinternalSandboxTestRunner evaluateSandboxTestRunnerjava at orgrobolectricinternalSandboxTestRunnerrunChildSandboxTestRunnerjava at orgrobolectricinternalSandboxTestRunnerrunChildSandboxTestRunnerjava at orgjunitrunnersParentRunner runParentRunnerjava at orgjunitrunnersParentRunner scheduleParentRunnerjava at orgjunitrunnersParentRunnerrunChildrenParentRunnerjava at orgjunitrunnersParentRunneraccess ParentRunnerjava at orgjunitrunnersParentRunner evaluateParentRunnerjava at orgrobolectricinternalSandboxTestRunner evaluateSandboxTestRunnerjava at orgjunitrunnersParentRunnerrunParentRunnerjava at orgjunitrunnerJUnitCorerunJUnitCorejava at comintellijjunit JUnit IdeaTestRunnerstartRunnerWithArgsJUnit IdeaTestRunnerjava at comintellijrtexecutionjunitIdeaTestRunnerRepeaterstartRunnerWithArgsIdeaTestRunnerjava at comintellijrtexecutionjunitJUnitStarterprepareStreamsAndStartJUnitStarterjava at comintellijrtexecutionjunitJUnitStartermainJUnitStarterjava Caused by javalangNoClassDefFoundError orgopentest jAssertionFailedError at assertkFailureKtfailfailurekt at assertkassertionssupportSupportKtexpectedsupportkt at assertkassertionssupportSupportKtexpecteddefaultsupportkt at assertkassertionsAnyKtisInstanceOf invokeanykt at assertkAsserttransformassertkt at assertkassertionsAnyKtisInstanceOfanykt more Caused by javalangClassNotFoundException orgopentest jAssertionFailedError at orgrobolectricinternalbytecodeSandboxClassLoadergetByteCodeSandboxClassLoaderjava at orgrobolectricinternalbytecodeSandboxClassLoadermaybeInstrumentClassSandboxClassLoaderjava at orgrobolectricinternalbytecodeSandboxClassLoaderlambdafindClass SandboxClassLoaderjava at orgrobolectricutilPerfStatsCollectormeasurePerfStatsCollectorjava at orgrobolectricinternalbytecodeSandboxClassLoaderfindClassSandboxClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava more When running the test outside of the IDE eg through Gradle the dependency is apparently there and the assertion is properly hit Im using assertkjvm This might be related to It would be nice to have a withFailMessage method to be able to customize failures kotlin fun AssertViewviewIsNotEmpty assertactualchildCountwithFailMessageexpected view to not be emptyisGreaterThan right now its containsAllvararg Any which it makes it too easy to accidentally pass in listOffoo instead of listOffoo