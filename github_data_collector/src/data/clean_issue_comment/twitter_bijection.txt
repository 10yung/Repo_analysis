Updates orgapachehbasehbase from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgapachehbase artifactId hbase details labels semverminor Updates orgapacheavroavro from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgapacheavro artifactId avro details labels semverminor The many modules especially those with scala dependencies create pains to publish new versions eg since we need all the scala library dependencies to be published first I think we should reverse the dependency graph if bijectionutil is useful it should be merged into the util repo Similarly with scrooge cc mosesn Updates comgoogleprotobufprotobufjava from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId comgoogleprotobuf artifactId protobufjava details labels semverminor This blocks chill which blocks Spark support This commit in twitterutil removed NonFatal from comtwitterutil in favor of the version from scalautilcontrol Unfortunately FuturePoolJavaFutureConverter and perhaps other places as well relies on the version from comtwitterutil which no longer exists leading to NoClassDefFoundError exceptions at runtime I am getting an error where the consumer fails to invert when the producer uses old schema and consumer uses new schema I have a producer still producing using old schema Our schemas are backwards compatible Only the consumers have been updated to use the new backwards compatible schema The consumer fails with exception Exception in thread main comtwitterbijectionInversionFailure Failed to invert B baf a at comtwitterbijectionInversionFailureanonfunpartialFailure applyOrElseInversionFailurescala at comtwitterbijectionInversionFailureanonfunpartialFailure applyOrElseInversionFailurescala at scalaruntimeAbstractPartialFunctionapplyAbstractPartialFunctionscala at scalautilFailurerecoverWithTryscala at comtwitterbijectionInversionattemptInversionscala at comtwitterbijectionavroBinaryAvroCodecinvertAvroCodecsscala at comtwitterbijectionavroBinaryAvroCodecinvertAvroCodecsscala at twitterbijectionAvroConsumermainAvroConsumerjava Caused by javaioEOFException at orgapacheavroioBinaryDecoderensureBoundsBinaryDecoderjava at orgapacheavroioBinaryDecoderreadIntBinaryDecoderjava at orgapacheavroioBinaryDecoderreadIndexBinaryDecoderjava at orgapacheavroioResolvingDecoderdoActionResolvingDecoderjava at orgapacheavroioparsingParseradvanceParserjava at orgapacheavroioResolvingDecoderreadIndexResolvingDecoderjava at orgapacheavrogenericGenericDatumReaderreadWithoutConversionGenericDatumReaderjava at orgapacheavrogenericGenericDatumReaderreadGenericDatumReaderjava at orgapacheavrogenericGenericDatumReaderreadFieldGenericDatumReaderjava at orgapacheavrogenericGenericDatumReaderreadRecordGenericDatumReaderjava at orgapacheavrogenericGenericDatumReaderreadWithoutConversionGenericDatumReaderjava at orgapacheavrogenericGenericDatumReaderreadGenericDatumReaderjava at orgapacheavrogenericGenericDatumReaderreadGenericDatumReaderjava at comtwitterbijectionavroBinaryAvroCodecanonfuninvert applyAvroCodecsscala at comtwitterbijectionavroBinaryAvroCodecanonfuninvert applyAvroCodecsscala at comtwitterbijectionInversionanonfunattempt applyInversionscala at scalautilTryapplyTryscala more I had to go back to Java in some projects I had to used AWS library and he return Future java future this is not cool im using Spring Boot with Netty and to take benefit in using this stack i needed convert Future from AWS library to CompletableFuture follow in this is a relevant PR to add in bijection library Also i created bijections to reactive types of Reactor library a reactive library for Spring Boot and if is relevant follow link about types Flow and Mono of Reactor Sorry if this a idiot issue for contribute to library sweatsmile Thanks Go between Java SQL APIs to JSR APIs javasqlDate javatimeLocalDate javasqlTime javatimeLocalTime javasqlTimestamp javatimeInstant Go between legacy Java date APIs to JSR APIs javautilDate javatimeLocalDate javautilTimeZone javatimeZoneId Go between Scalas Duration to JSR Duration scalaconcurrentDuration javatimeDuration Anything else Cats have InjectionK but their invert function returns Option F which they are unwilling to change It would nice to have InjectionK with invert defined as Try F as we have for all our existing injections While Option F maybe more theoretically correct I have found Try F to be more useful as I usually want to do something with he exception when inversion fails We would also need FunctionK as well