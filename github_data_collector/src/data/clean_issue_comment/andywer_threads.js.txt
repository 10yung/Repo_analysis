Part of a fix for andywerthreadsplugin Hi Im trying to use threadsjs in a project bootstrapped with vuecli and Vue CLI Plugin Electron Builder To start Im creating a minimal example Bootstrap the vuecli Hello World project with vue create threadtest vue add electronbuilder Configure webpack js vueconfigjs const ThreadsPlugin requirethreadsplugin moduleexports configureWebpack externals tinyworker tinyworker plugins new ThreadsPlugin Add imports for threads usage I dont need anything beyond the import to trigger the error js srcAppvue import spawn Thread Worker from threads The problem Webpack compiles the app without issue but I get a runtime error Uncaught TypeError Object is not a function at eval indexjs f at Modulenodemodulesthreadsdistesmmasterindexjs chunkvendorsjs at webpackrequire appjs at fn appjs at eval indexjs b at Modulenodemodulesthreadsdistesmindexjs chunkvendorsjs at webpackrequire appjs at fn appjs at eval cjsjsnodemodulesbabelloaderlibindexjsnodemodulescacheloaderdistcjsjsnodemodulesvueloaderlibindexjssrcAppvuevue typescript langjs at ModulenodemodulescacheloaderdistcjsjsnodemodulesbabelloaderlibindexjsnodemodulescacheloaderdistcjsjsnodemodulesvueloaderlibindexjssrcAppvuevue typescript langjs appjs Following stack trace into indexjs indexjs import selectWorkerImplementation from implementation export Pool from pool export spawn from spawn export Thread from thread Worker implementation Either web worker or a nodejs Worker class export const Worker selectWorkerImplementation error happens on this line Uncaught TypeError Object is not a function Ive tried all of the suggestions in somewhatsimilar looking but no luck Any suggestions We should manually shutdown process if SIGTERMSIGINT listeners are installed nodejs docs SIGTERM and SIGINT have default handlers on nonWindows platforms that reset the terminal mode before exiting with code signal number If one of these signals has a listener installed its default behavior will be removed Nodejs will no longer exit tinyworker docs In your core script register a listener for SIGTERM or SIGINT via processon which terminates all worker processes and then gracefully shutdowns via processexit Example Problem cluster workers dont shutdown because theadsjs has invalid SIGTERM listener js clusterjs const cluster requirecluster if clusterisMaster consolelogMaster processpid is running clusterfork clusteronexit worker code signal consolelogworker workerprocesspid died else const spawn Worker requirethreads spawnnew Workerworkerjs consolelogWorker processpid started js workerjs const expose requirethreadsworker expose hello from worker Run node version v node clusterjs Master is running Worker started kill nothing happens But we should see worker died PR fixes this problem I cant call worker and transfer function for example workerpostMessage will throw DataCloneError Add fromScript function to use script directly Hi I am trying to import a worker in electron I am using electronwebpack main thread and I get the following error Error Cannot find module bundleworkerjs Does this library support electron main thread and electron renderer thread Hello andywer thanks to develop threadsjs I want to use it for implementing web worker into my web app I want to move redux offline store initialization into web worker using threadsjs Although it can be achieved in this tutorial with comlink and rollup I want to implement it with webpack and threadsjs Unfortunately I got error like this sh Error Failed to execute postMessage on DedicatedWorkerGlobalScope function action if typeof action function return actiondispatch getState extomitted could not be cloned at ObjectpostMessageToMaster implementationbrowserjs at postJobResultMessage indexjs at eval indexjs at Generatornext anonymous at fulfilled indexjs If I dont use reduxthunk as one of redux middleware I still get same error with different message sh Error Failed to execute postMessage on DedicatedWorkerGlobalScope function dispatchaction if isPlainObjectaction throw new ErrorActions must be plain objeomitted could not be cloned at ObjectpostMessageToMaster implementationbrowserjs at postJobResultMessage indexjs at eval indexjs at Generatornext anonymous at fulfilled indexjs Here is source codes of worker js import createStore applyMiddleware from redux import persistStore from reduxpersist import composeWithDevTools from reduxdevtoolsextension import thunk from reduxthunk import expose from threadsworker import appReducer from reducers const composeEnhancer composeWithDevTools const appMiddleware applyMiddlewarethunk exposefunction initStore const store createStore appReducer processenvNODEENV production composeappMiddleware composeEnhancerappMiddleware const persistor persistStorestore return store persistor And here is source codes for main thread spawn and Worker has been imported js async componentDidMount try const initStore await spawnnew Workerpathtoworker const store persistor await initStore thissetState store persistor await initLiff catch error consolelogerror Version comes without a UMD build so you cannot just use threadsjs via a good old style script srcscript tag Do you feel we should still provide one Vote here Hi there This looks like a fantastic library However I really need to support IE and I cannot find a browser support matrix in your docs Am I missing it Thanks Kind regards Jack Allow exposing a workers functionality to other workers using MessageChannel Workers must handle a new meta message transferring a pair of message ports and listen on it send to it too not just the main thread To Do Allow communication using arbitrary MessagePort instances Allow passing a MessagePort to spawn maybe rather create a new function Add ThreadisTerminatable Export MessageChannel MessagePort