Hello I have used jwildernginxproxy and JrCsdockerletsencryptnginxproxycompanion a lot that both rely on dockergen However with Fedora and RHEL my distribution has switched to podman and docker is only useable if you switch back to vgroups v With podman there is no unix socket varrundockersock However there seems an replacement for docker events podman events see Podman Usage Transfer So I wonder if there is a way to archive the functionallity of dockergen on podman Kind regards aanno When running dockergen in a container on Github actions the variable DockerCurrentContainerID is null and thus cannot be used in the template I am not sure if this is only the case when running in the same container as the router I found and being affected by this problem I tested with runson ubuntu and an updated docker dockerce amd ubuntubionic Do you have an idea what could be the reason I find the mounted varrundockersock inside the containers fully functional while studying the code I noticed the referred line Should it not be the following all false If I understand the code correctly all is always True and the configuration option includestopped has no effect Signedoffby Charles Arehart charliecarehartorg I am having an issue with getting dockergen to restart nginxproxy on changes I am running the nginx proxy linuxservernginxlatest and dockergen containers seperately on a server running Unraid OS If I start the nginxproxy container everything works as expected However if I change some meta eg set VIRTUALHOST on a container nginxproxy fails to reload via sighup I see the following log for nginxproxy contfinishd executing container finish scripts contfinishd done s finish waiting for services s svwait fatal timed out s finish sending all processes the TERM signal s finish sending all processes the KILL signal and exiting This implementation will allow for the use of a filter to live query the containers before sending the sigup and is fully backwards compatible with the previous implementation Resolves I have been trying to add CORS headers to the nginx proxy I have a simple test that does not seem to work Any ideas I used the example in the dockergen docs and did this docker run d p name nginx v tmpnginxetcnginxconfd t nginx docker run d name nginxgen volumesfrom nginx v varrundockersocktmpdockersockro v tmptemplatesetcdockergentemplates t jwilderdockergen notifysighup nginx watch onlyexposed etcdockergentemplatesnginxtmpl etcnginxconfddefaultconf I copied the nginxtmpl from the nginx proxy into tmptemplates and edited it Since I am doing a simple test without proxying anything I assume I can add headers to the server so that when I hit the server it will return the headers and the The stanza looks like this server servername This is just an invalid value which will never trigger on a real hostname listen if enableipv listen end accesslog varlognginxaccesslog vhost addheader AccessControlAllowOrigin addheader AccessControlAllowMethods GET POST OPTIONS addheader AccessControlAllowHeaders DNTUserAgentXRequestedWithIfModifiedSinceCacheControlContentTypeRange addheader AccessControlExposeHeaders ContentLengthContentRange return If I docker exec it id binbash in the running nginx container I can see the etcnginxconfddefaultconf has the addheaders in it proxysetheader XForwardedPort proxyxforwardedport Mitigate httpoxy attack see README for details proxysetheader Proxy server servername This is just an invalid value which will never trigger on a real hostname listen accesslog varlognginxaccesslog vhost addheader AccessControlAllowOrigin addheader AccessControlAllowMethods GET POST OPTIONS addheader AccessControlAllowHeaders DNTUserAgentXRequestedWithIfModifiedSinceCacheControlContentTypeRange addheader AccessControlExposeHeaders ContentLengthContentRange return If I point chrome at and open the tools the response headers only contain HTTP Service Temporarily Unavailable Server nginx Date Fri May GMT ContentType texthtml ContentLength Connection keepalive Any ideas what I am doing wrong This has been very useful in my fork for the following usecase I wanted to use dockergen with TOR When you create a hidden service TOR create a file at a specific location with the TOR onion host that represent your service I needed to use this onion host as input for generating my nginx configuration file So my nginxtmpl needed to read a file If the destination file does not exists the permissions become because this is the default permission for temp files This is problematic if the container consuming the destination file does not run as root Instead the default permissions should be used as per umask This PR will make permission which is generally what we want And if the container consuming it is not happy with it it always can override the permissions 