In the last abstraction example when you took the abstraction too far the logic in the code is wrong compared with the original example shown earlier So if this is intentionally please disregard the comment below and just add clarification in the description of the example First mistake js function isPropUndefinedvalobjprop return isUndefined obj prop The code above is ok to check if a property of an object is undefined but here you change the logic of the previous example and check if a property of the store is undefined Original logic js if evtname undefined storeData events evtname evt Second mistake You return isUndefined result which is true if the property is undefined so the logic is wrong once again Proposal Just change the name of the function and wrap the function in another one which accepts the property to be checked against undefined This will lead to the need of invoking the function with an argument name in this case js function isPropDefinedprop return function obj return isUndefinedobj prop function trackEventevt conditionallyStoreDataevents evtname evt isPropDefinedname Now we could change the invokation of checkFn to be with only one argument js if checkFnvalue store location value Quote But a standalone implementation of reduce might look like this javascript function reducereducerFninitialValuearr var acc startIdx if argumentslength acc initialValue startIdx else if arrlength acc arr startIdx else throw new Error Must provide at least one value for let idx startIdx idx arrlength idx acc reducerFn acc arr idx idx arr return acc Question Perhaps I dont understand the context but how to call this function without passing an initialValue Thanks for your work on this book Changed variable name in explanations total to match num in code snippet Yes I promise Ive read the Contributions Guidelines please feel free to remove this line if you leave this line here Im going to assume you didnt actually read it js composecomposefn fn fn composefn composefn fn Adds popular immutable state library immer to Appendix C FP Libraries Yes I promise Ive read the Contributions Guidelines please feel free to remove this line if you leave this line here Im going to assume you didnt actually read it Some reader dont like that the img tag are not closed I would advise changing this p aligncenter img srcimagesfig png width p to this p aligncenter img srcimagesfig png width p on every images I can do a the PR if you want me to but maybe there is a reason for that that I do not understand In DrBoolean already pointed this out but since that closed issue addressed several subissues I think its ok to make a single issue for this In nowChapter you use String as an example of functors However Strings arent actually functors because the things inside them cannot be any arbitrary type In other words there is no such thing as a String of type x strings are always composed of characters and nothing else hs an Array of a can be transformed into an Array of b Arrayprototypemap a a b b a String of chars cannot be transformed into a String of other StringprototypemapLike String char char b String char b values are turned into chars implicitly Instead of strings I might suggest that the most intuitive example for JS devs of a functor apart from Arrays would be Trees hs a Tree of a can be transformed into a Tree of b Treeprototypemap Tree a a b Tree b The downside unfortunately is that trees are not a builtin firstclass data structure but must be implemented Of course that is not especially complicated though the details classbased factory prototypal map method toplevel map function will depend on your particular taste Other examples Promise acts as a functor sometimes though not all the time due to the difference between returning values vs returning promises in then event emitters RxJS observables can act as functors though these are even farther from vanilla JS builtins functional idioms like Maybe Either Tuple personally I think Tree is a better candidate than these lessuniversallyfamiliar entities Hi I bought the book and it makes a tough subject easier to understand and apply to our code base Anyway theres a broken link getify not the book Chapter which suggests popular libraries I think the link should be FunctionalJs Thanks Yes I promise Ive read the Contributions Guidelines Loved the indepth coverage and explanations of this series And its easy to understand for newcomers who are fresh to FP In Continuation Passing Style CPS of Chapter it is said that Fibonacci recursion cannot practically be refactored to pure PTC It confuses me there As I find below code though it lost some readability function fibx res pre if x return res return fibx pre pre res Is above fib a pure PTC form Any Comments are welcome and appreciated