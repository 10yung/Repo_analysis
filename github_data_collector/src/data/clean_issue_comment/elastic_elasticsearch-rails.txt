Update Ruby JRuby Rails versions I have been struggling with this for a little bit My entity model that I have is as follows Deal Retailer Categories Brands In the deal index I would like to be able to include the Retailer and the retailer categories and brands I have tried the following settings do indexes retailer type object do indexes name type text indexes categories type object do indexes name type text end end end And while this does show the hierarchy in the correct structure in the resulting Index which I can confirm in Kibana It will only populate the Retailer but never populates the category I also have a asindexedjson method which looks as follows This is the original variant def asindexedjsonoptions selfasjson include retailer only name methods end I have tried this variant def asindexedjsonoptions selfasjson include retailer only name categories methods end The end result for both of these is that Kibana recognizes the index pattern but the retailercategories always has no data Any ideas would be greatly appreciated Thank you John In production we cant search in multiple models it works fine locally Elasticsearch version v ruby searchpayload query bool must multimatch query params search tosdowncase mustnot exists field deletedat filter term user usershopid size records ElasticsearchModelsearchsearchpayload Order Product records recordsjson NoMethodError undefined method find for nilNilClass from usrlocalbundlegemselasticsearchmodel libelasticsearchmodeladaptersmultiplerb in recordsforklass I see the example for defining settings and mapping for an indexmodel in the README of ruby class Article settings index numberofshards do mappings dynamic false do indexes title analyzer english indexoptions offsets end end end However I could not find a documentation for settings and mapping This got me quite confused For example there is no easy way to tell that The dynamic value has to be a String and not a boolean The indexes method allows a block to create nested structures It is also not shown in the documentation Simple examples for mapping class method General overview of the mapping structure defines indexes but there is no documentation Would it make sense to at least expand the examples to show how the indexes method can be used I am using cancancan for authorizations in my rails app In this code the ES query returns some records that I already now I am allowed to visualize I was scratching my head because cancancan always returned false when running the can method records ElasticsearchModelsearchquery modelsrecordsrecords records recordsselectr canshow r Then I noticed that if I have a model Test and run recordsfirstclass Test it returns false I think this is the issue that is causing cancancan to always return false abilityrb can show Test I called tosconstantize in ElasticsearchModelAdapterMultipleRecordstypeforhit and fixed it Does anyone think this can be considered a bug The mongoid integration has the same sorting bug as documented in and others The records Im using elasticsearchmodel I have a field in my mapping called score separate from the elasticsearch score Im running a search query like this ruby def dosearch search query bool must term accountid sort score order desc end Ive confirmed that the results come back in the proper order from elasticsearch by visually inspecting the results like this Modelsearchmap score However when I call records on the results the scores get jumbled and I have to resort them manually in ruby I see that theres some code trying to solve this here because mongoid doesnt return results in id order It looks like you can call a mongoid scope method like ordersort desc on the object records returns to get the proper order but the toa method doesnt seem to be working for some reason Im using elasticsearch to search my records by name using this query query bool must querystring query Pa fields name filter and term privacy world Using rails when I get the result from elasticsearch Im using records method get the corresponding records in an ActiveRelation whenever Im applying order to this relation it ignores it completely although the same query generated when used in PostgreSQL it gives the correct results This is the query SELECT branches FROM branches WHERE branchesid NOT IN AND branchesid IN ORDER BY pointlocation location point asc LIMIT OFFSET Im trying to order the branches by nearest to the point given Now from what I understand from this issue theres a bug related to this its been fixed but I cant update the version Im using currently I have a simple model and a search query that is returning results sorted correctly Modelsearchsearchrecords sorted correctly How do I then use ActiveRecord select to only pull certain fields on the model records returned An Elasticsearch response records enumerator doesnt respond to the select method that a normal ActiveRecordRelation would I see that I can do Modelsearchsearchrecordsrecordsselectsomefield to select the fields correctly because the nd records is an ActiveRecordRelation but Modelsearchsearchrecordsrecords not sorted correctly Is there some other way of approaching this that I am missing or is it just not appropriate to select less than the full list of fields when returning sorted records via an ES search The following error appears when upgrading from to and disappears when reverting to rvmgemselasticsearchmodel libelasticsearchmodelproxyrb in methodmissing undefined method modelname for PROXY ContactSearchIndexElasticsearchModelProxyClassMethodsProxy NoMethodError from rvmgemselasticsearchmodel libelasticsearchmodelnamingrb in defaultindexname from rvmgemselasticsearchmodel libelasticsearchmodelnamingrb in implicit from rvmgemselasticsearchmodel libelasticsearchmodelnamingrb in indexname from rvmgemselasticsearchmodel libelasticsearchmodelindexingrb in createindex 