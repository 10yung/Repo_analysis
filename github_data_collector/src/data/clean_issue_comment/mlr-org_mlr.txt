Here I added the fregreglm learner from package fdausc and the corresponding test script Hello I am trying to add the learner fregreglm from package fdausc For the integration I followed the code for the already implemented and very similar integration of classifglm from the same package in RLearnerclassiffdauscglmR But I am having troubles when it comes to using the implementation because I get an error in the for the trainLearner function which seems to have an error In the following you can see the code for the integration Maybe I am doing a beginners mistake r librarymlr libraryfdausc libraryparallelMap makeRLearnerregrfregreglm function makeRLearnerRegr cl regrfregreglm package fdausc parset makeParamSet makeDiscreteLearnerParamid family default binomial values listbinomial gaussian Gamma inversegaussian poisson makeUntypedLearnerParamid basisx makeUntypedLearnerParamid basisb makeLogicalLearnerParamid CV default FALSE properties cfunctionals name Generalized Linear Models regression on FDA shortname fregreglm note modelC is set to quotefregreglm trainLearnerregrfregreglm functionlearner task subset weights NULL Get and transform functional data d getTaskDatatask subset subset targetextra TRUE functionalsas matrix fd getFunctionalFeaturesddata transform the data into fdauscfdata class type datafdclass fdauscfdatamdata asmatrixfd transform the data into fdauscfdata class type and save in a list dat listdf dataframedtarget x datafdclass model fdauscfregreglmdtarget x data dat Fix bug in package The changed slot looks different when called with fdausclassifglm than just classifglm modelcall quotefregreglm returnmodel predictLearnerregrfregreglm functionlearner model newdata transform the data into fdauscfdata class type fd getFunctionalFeaturesnewdata nd listx fdauscfdatamdata fd predictobject modellearnermodel newx nd type response registerS methodmakeRLearner regrfregreglm makeRLearnerregrfregreglm registerS methodtrainLearner regrfregreglm trainLearnerregrfregreglm registerS methodpredictLearner regrfregreglm predictLearnerregrfregreglm parallelExporttrainLearnerregrfregreglm predictLearnerregrfregreglm supCreated on by the reprex package v sup Prework Didnt find any duplicates on this Description After train and predict arsq adjusted r squared gave result as always Also greater than rsq value I guess the formula used for arsq is different from what I know of I tried with custom r code and got the right answer Tried to extend to arsqv in my local system with required changes and got an answer equal to rsq and not arsq I am currently using mlr version Reproducible example Learned that the formula given in the link rsq p n p L is not same as I expected it to be My understanding of ARSQ is rsq n n p L This is the inbuilt arsq I tried to change that as follows arsqv makeMeasureid arsqv minimize FALSE best worst properties cregr reqpred reqtruth name Adjusted coefficient of determination note Defined as rsq n n p L Adjusted Rsquared is only defined for normal linear regression fun functiontask model pred feats extraargs n lengthpreddatatruth p lengthmodelfeatures if n p warningAdjusted Rsquared is undefined if the number observations is equal to the number of independent variables plus one returnNAreal measureRSQpreddatatruth preddataresponse n n p L Compared both with this meas mlrperformancetestPred measures listmlrrmse mlrmae mlrrsq arsq arsqv meas Got the following results rmse mae rsq arsq arsqv Then tried arsq with custom rsq preds testPreddataresponse actual testPreddatatruth rss sumpreds actual residual sum of squares tss sumactual meanactual total sum of squares rsq rsstss rsq adjrsquared rsq n np adjrsquared Expected output preds testPreddataresponse actual testPreddatatruth rss sumpreds actual residual sum of squares tss sumactual meanactual total sum of squares rsq rsstss rsq adjrsquared rsq n np adjrsquared fixes update help page to use markdown syntax Prepare for release x Check current CRAN check results x devtoolscheckremote TRUE manual TRUE x devtoolscheckwindevel x Update crancommentsmd x Polish NEWS Submit to CRAN x usethisuseversionminor devtoolssubmitcran Approve email Wait for CRAN Accepted tada usethisusegithubrelease usethisusedevversion Tweet r librarymlr traindata dataframe A runif B factorsamplecA B replace T testdata dataframe A runif B factorsamplecA B C replace T lrn makeLearnerregrranger fixfactorsprediction TRUE traintask makeRegrTask data traindata target A model trainlrn traintask predictions predictmodel newdata testdata Gives Error Missing data in columns B although there is no missing data Same for classification Kind regards See this SO question I did a very dirty fix in the fixfactors branch that works for this example but probably not if more factor levels in newdata have missing values In fact fixfactorsprediction sets the missing level to NA rather than to a level existing in the training data We aim at releasing at new version at least every months if not earlier due to important bugfixes Release months February May August November r x dataframex c NA imputex classes listnumericimputeHist Error in sampleintx size replace prob incorrect number of probabilities the problem is that sample behaves differently when the first argument has length Many wrapper learners eg ImputeWrapper or CPO learners perform some processing on the data in the trainLearner function and then call makeChainModeltrain to create a ChainModel object which will then be packaged inside a BaseWrapperModel If the train part inside the trainLearner function fails when onlearnererror is warning or quiet then everything works correctly isFailureModel on the resulting object reports TRUE because the model is a BaseWrapperModel that contains a ChainModel learnermodel that contains a FailureModel nextmodel However if the part before makeChainModel fails then the resulting object is a BaseWrapperModel that does not contain a ChainModel but only a character ie the error message isFailureModelBaseWrapperModel then tries to get the nextmodel slot of this atomic value and fails This can be triggered by using the imputeHist function with only one data row in an imputeWrapper function the imputeHist part fails and the resulting object triggers an error when isFailureModel is called inside the resample call here r configureMlronlearnererrorwarn tsk makeClassifTaskt dataframex cx y a cNA x lrn makeImputeWrappermakeLearnerclassiflogreg classes listnumeric imputeHist resamplelrn tsk cv Resampling crossvalidation Measures mmce Warning in trainlearner task subset traini weights weights traini Could not train learner classiflogregimputed Error in function data target col breaks usemids All values missing Unable to impute with Hist Error operator is invalid for atomic vectors 