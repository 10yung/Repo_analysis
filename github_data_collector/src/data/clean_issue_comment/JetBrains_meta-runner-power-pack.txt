This step occasionally fails for us for legitimate reasons but we want the build to continue because we can add tags manually later as a workaround It would be great if there was some kind of checkbox to treat errors as warnings or something like that and continue the build The previous implementation of the metarunner didnt consider switch EnsureAssemblyInfo of gitversionexe This adds new checkbox which can enable it Hi Im completed unable to run GitReleaseNotes I receive the following Unhandled Exception SystemInvalidOperationException Number of ordinal arguments must at least at ArgsModelBindingDefinition EnsureCorrectNumberOfOrdinalArgumentsIEnumerable ordinalArgs at ArgsModelBindingDefinition BindModelTModel model IEnumerable args at ArgsModelBindingDefinition CreateAndBindIEnumerable args at GitReleaseNotesProgramMainString args in C projects gitreleasenotes src GitReleaseNotes Programcsline I believe Im passing in the proper command line args but cant get past this exception I also tried to create this on the project page but it looks like Jake has issues disabled Any help is appreciated Thanks When Export dotCover report is enabled and report type is HTML the html file dotCoverReporthtml is captured in the artifacts but the folder containing all the reports assets css images js etc is not To have a functional html report we need to capture the assets folder as well This worked for me powershell WriteOutput teamcity publishArtifacts dotCoverReportFile if dotCoverReportTypeToUpper eq HTML dotCoverReportFolder dotCoverReportFileSubstring dotCoverReportFileLastIndexOf WriteOutput teamcity publishArtifacts dotCoverReportFolder dotCoverReportFolder If xUnit Console NuGet package contains multiple xunitconsoleexe files current code will include them all in the command line causing the xUnit execution to fail For example the standard xunitrunnerconsole package contains exes for net net net net etc May want to add a parameter for specific framework version or at least check for multiple results and just grab the first one thats what I ended up doing Original code powershell get xunit runner from nuget package feed InvokeExpression nugetExe install xunitrunnerconsole source xUnitNuget xunit JoinPath workingDir xunitrunnerconsole tools xUnitExe ResolvePath if not xunit Try finding xunit under framework specific folder xunit JoinPath workingDir xunitrunnerconsole tools net xUnitExe ResolvePath Workaround with check for multiple results also include fix for space in path mentioned in powershell get xunit runner from nuget package feed InvokeExpression nugetExe install xunitrunnerconsole source xUnitNuget xunit JoinPath workingDir xunitrunnerconsole tools xUnitExe Resolve if xunitLength gt xunit xunit if not xunit Try finding xunit under framework specific folder xunit JoinPath workingDir xunitrunnerconsole tools net xUnitExe Resolve if xunitLength gt xunit xunit The current approach to using InvokeExpression to launch nuget xunit and dotCover exes will fail if there is a space in the working folder path It can be fixed by using call operator and single quoted paths in conjunction with InvokeExpression Examples below with original code commented out followed by fixed code NuGet powershell InvokeExpression nugetExe install xunitrunnerconsole source xUnitNuget InvokeExpression nugetExe install xunitrunnerconsole source xUnitNuget xUnit powershell xunitOnlyCommand xunit xunitArg xunitOnlyCommand xunit xunitArg dotCover powershell command dotCover dotCoverArgs command dotCover dotCoverArgs Retry to add tags times before failing The existing MR for GitVersion will set the FullSemVer variable as build number in Teamcity this variable is purely based on the repository and does not take into account the build counter kept by Teamcity While in some situations as described by RobSmyth in GitToolsGitVersion this information is considered important or even critical At the moment Chocolately does not seem to offer a good way to say I want version x included beta or prereleases so Ive just had to pass the pre parameter to the choco install call in these runners this will result in the next beta release being installed x as soon as GitVersion is released in production We are using the version from July in TC We specified particular credentials in the Add Build Tags build step It works of the time but on rare occasions in random builds we get this prepareinternalcredentials preparecustomcredentials echo using custom credentials preparetags addTags http HTTP Request http http URL http Method POST http ContentType applicationxml http Entity yes http BEGIN ENTITY http tagstagObfuscatedTag tagtagObfuscatedTag tagtags http END ENTITY http http HTTP Response http http Status BUILD FAILED E Obfuscated Obfuscated build tmp Expected Status but got for URI I cant figure out the cause Credentials in the build steps do not change between builds Is using in the URL a problem Should it use the most recent endpoint Is it possible that TeamCity cannot handle these REST calls if multiple calls happen at the same time