matchedData returns unwanted fields for nested objects I think it should or at least have an option to not return a nested property if it is not specified in validator Route routerrouteusersidprofilesettingsput paramidexists bodyaddress optional bodyaddressdisplayStreet optional isBoolean controllerupdate Request body address test true displayStreet true matchedData call let bodyData matchedDatareq locations body Expected result address displayStreet true Acquired result address test true displayStreet true I think it shouldnt return fields that are not specified in validator so it shouldnt return the test field after calling matchedData Peharps its a security concern since its not a good idea to let unknown properties bypass your validations Im not sure if this is a bug or if Im not understanding the onlyValidData option for matchedData correctly but I have a validation setup like checksomeObjectnestedObjectpropertyA ifvalue req reqbodysomeObjectnestedObject exists When I call matchedDatareq I get back someObject nestedObject propertyA undefined though I would expect matchedData to not include the propertyA property It s not a huge deal as there are obvious ways to work with the output that s currently being returned Hi Im trying to build a register endpoint for an API I want to check whether the username already exists On the official website I found this information concerning this exact problem Unfortunately if I run this code I get an UnhandledPromiseRejectionWarning and the API still creates the user which is not intended I just found some short code examples where return Promisereject was replaced by throw new Error but with that my programm stops executing completely and doesnt send any response through the API Im sure theres a mistake somewhere in my code but unfortunately I couldnt find examples showing the full code Could anybody please help me or send a link to a proper tutorial const express requireexpress const router expressRouter const User requiremodelsuserModel const check validationResult requireexpressvalidator const checkUsernameExists value return UserfindOne name value err user if user return Promiserejectalready in use routerpost checknameexistscustomcheckUsernameExists checkemailisEmail checkpasswordexists functionreq res next if validation failed return errors const errors validationResultreq if errorsisEmpty return resstatus json errors errorsarray convert json user to mongoose object let user new Userreqbody do something else moduleexports router I am looking for something that only allows the fields defined in the chain but return error on field that are not required Like if i require only bodyusernameexists it should only accept username field any other field may return an error Is there something i can do Assume that there is nothing in reqquery Say we have validator of the following querytestingoptional running matchedDatareq will return which is a correct behavior If we change the validator to oneOf querytestingoptional running matchedDatareq will return testing undefined which is not the case back in xx Hi How can i ignore objects with empty string null value I tried POST mai NODE bodymailexistscheckFalsytrueoptionalnormalizeEmailisEmailisLengthmin max but ifreqbodymail returns true but it should return false I would like to set other fields as matched data for retrieval later on when calling matchedData Is this possible eg partial pseudo code bodyuser ErrorCodeLIBRARYUSERINVALIDisMongoIdcustomvalue req const user mongooseloadUserByIdvalue now set userType as a matched field so that this will be returned when calling matchedDatareq setAsMatchedDatauserType usertype With the current implementation async custom validators resolved result is not taken into account As i read in the documentation The custom validator may return a promise to indicate an async validation task In case its rejected the field is considered invalid So even with a resolvefalse the validator will be considered as a success This leads to make mistakes when you implement validators with asyncawait style async isMyValidator const isAllGood await someStuff return isAlllGood Its a pain to make it works with the current implementation You have to throw an error on every test inside the validator When I send a http request with query I get an error due to character is being replaced by white space I expect url clientsgsm try validationResultreqthrow next catch err const errors errarray nextnew BadRequestErrormessage ERRVALIDATIONcode Where value of errors is location query param gsm expected value value see the whitespace in the beginning of mobile number msg tr Telefon numaras do ru girilmelidir en Enter a valid phone number bash throw new ErrorMost middleware like name is no longer bundled with Express and must be installed separately Please see Error Most middleware like json is no longer bundled with Express and must be installed separately Please see at Functionget C Users hdesorme MattTemp NodeGoogleCalendarTutorialmaster nodemodules express lib expressjs at Objectanonymous C Users hdesorme MattTemp NodeGoogleCalendarTutorialmaster testjs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at FunctionModulerunMain internalmodulescjsloaderjs at internalmainrunmainmodulejs 