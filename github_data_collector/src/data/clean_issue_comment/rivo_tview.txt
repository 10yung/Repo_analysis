This should resolve This rings the terminal bell on Unix and Windows tested version Demo ssh cviewrocketninespace p th page Related issues At the same time Im both glad and sad to see this fork Im glad because many significant improvements have been merged Im sad because this is now a fork which will diverge both in philosophy and code The rationale behind the fork is explained in It seems that the fork was motivated because the original author iswas maintaining this repository alone and didnt find the time to review all the good stuff pouring in Reviewing requires time and attention but people who submit PRs are very often willing to change their implementation when they get a response Problem is that reviewing has been only behind one person The problem is not resolved with the fork now theres a diverged project which is again behind one person The fork is not even in Github anymore Is there any chance to combine forces with tslocum and rivo Shared projects have challenges of their own but having multiple maintainers will drive the project further than one busy maintainer Personally I believe that the fork is a good discussion starter but it will not solve any problems in the long term This fixes the unbounded increase in resource usage when running the presentation demo Id like my applications to be compatible with real DEC VT terminals Applications using tcelltview like to discard colours if TERMvt eg vt When I was about to fix an application I couldnt find SetAttribute or something like that for TreeNodes So for example if I want to set the currently selected TreeNode in a TreeView for xterm or similar I simply set the color using SetColor But if I want to indicate that on DEC VT for example I need to set the underline attribute on that node and I dont have the function for that This fixes Sorry for any obvious mistakes I am a golang novice I read over the contribution guidelines and tried to match the style I dont believe this is adding significant maintenance overhead The objective is to add some throttling to the resize handling so that the screen does not flash on Windows I fiddled with the throttling a bit and ms seems like the sweet spot between too low resulting in allowing some flashing and too high too slow resize redraw makes it seem laggy Here is capture of the postfix behavior after fix Compare with the capture of beforefix behavior before fix Thanks in advance for taking the time to review My team is using tview for a console application and our QA team reported a usability bug When the window is resized on Windows the screen flashes The flashing continues for a short time after the resize is finished It isnt a huge issue but it is a little ugly I captured a gif that shows the flashing I resized a few times with some ridiculous resizes just to emphasize the effect but you can see that it still occurs with a normal resize tviewredrawflashing I believe this can be mitigated by adding some throttling to the EventResize handling here Ill open a PR with a suggested fix but Im not very experienced with golang so please go easy on me I have a Flex with TreeView DetailView The TreeViews entry titles have variable sizes unknown at the time the TreeView is added to the Flex I want to resize the TreeView to an ideal fixed width such that the entry titles are shown completely FlexResizeItem allows resizing but there is no way to get the ideal width from TreeView ie after it added all indents etc What is the best way to accomplish this 