Many times for debugging we need to the sequence of settings or reassignments of properties We get this in diagnostic mode for build in Visual studio IDE Can this be displayed in a timesequences manner for each of the properties the task and the source props that set I often need to understand the calling patterns between msbuild projects which targets between which projects with which global properties The current viewer is not adequate because it contains way more information than needed and its not a DAG making multiple references to the same project hard to see so the calling patterns are not obvious at all and a lot of scrolling and pen and paper are needed to tease the graph out It would be nice to have a separate pane showing a graph with the following definition Node project path global properties Directed Edge called targets The graph would explode in complexity with more than a few nodes but for simple examples projects it would be pretty illuminating on whats going on Some filtering capabilities would also help with the information overload The graph can be generated with some graph layouting library like graphvis Im attempting to read a binlog file from an aspnet core application After my requests reads a given file it attempts to delete it but I get sporadic lOExceptions stating the file is locked after using the BinLogReaderReadRecords method Currently the log is showing a single entry for all Exec tasks in Top most expensive tasks but thats not that helpful if there are multiple different tools being invoked in the build It would be nice to treat Exec tasks that invoke different tools as separate entities for the purpose of perf reporting Add an analyzer that looks at RARs resolved extensions and if winmd andor exe wasnt used recommend adjusting AllowedReferenceAssemblyFileExtensions See Given a WPF project such as xml Project SdkMicrosoftNETSdkWindowsDesktop PropertyGroup OutputTypeWinExeOutputType TargetFrameworknetcoreapp TargetFramework UseWPFtrueUseWPF PropertyGroup ItemGroup PackageReference IncludeNerdbankGitVersioning Version beta PrivateAssetsallPrivateAssets IncludeAssetsruntime build native contentfiles analyzers buildtransitiveIncludeAssets PackageReference ItemGroup Project Where MainWindowxamlcs includes the line cs Title ThisAssemblyAssemblyFileVersion A build error follows This is because of which is beside the point The point is in investigating the failure I use the bl switch and load the file into msbuild structured log viewer I then find the wpftmpcsproj and click the Preprocess command on it which shows me this From this screenshot youll see that nerdbankgitversioningtargets have been imported But in fact I dont believe they have since it it was imported there would not be a build failure Also the side effects of having imported it such as influence on project properties would be visible in the evaluation model which the Properties tree within the structured log viewer does not show are present Finally when I run msbuild WpfApp meucdekewpftmpcsproj pTargetAssemblyProjectNameWpfApp IntermediateOutputPathobj Debug netcoreapp AssemblyNameWpfApp ppoutxml myself and inspect the outxml file theres no trace of the nerdbankgitversioningtargets file having been imported When a property is reassigned the log shows which file and line caused it but for the first assignment of a property we just see the value it has but not who assigned it and why This would really help in debugging into why a certain property has the wrong value from the start VCRuntimeDLL d depot master packages VisualCppTools lib native redist debugnonredist x MicrosoftVC DebugCRT vcruntime ddll Property reassignment VCRuntimeDLLd depot master packages VisualCppTools lib native redist debugnonredist x MicrosoftVC DebugCRT vcruntime ddll previous value d depot master packages VisualCppTools lib native redist debugnonredist x MicrosoftVC DebugCRT vcruntime ddll at d depot master MTBuild MTBuildReferencedBits It has very nice features look into opportunities for synergy and crosspollination Hello Let me start by thanking you for this wonderful tool that helped me many times already Im not sure if this is is the right repository to ask this question so feel free to redirect me to the right place I tried to use the Project System Tools extension to analyze a build triggered by Visual Studio as advised on the homepage here My build works as expected outside of Visual Studio and does not consistently succeed when run inside VS However when I tried to compare the build from Visual Studio with one started from MSBuild Structured Log Viewer I noticed that the one from VS lacked a lot of details Notably All details regarding tasks that were executed by MSBuild were absent from the log eg Parameters OutputProperties From an empty project I created to reproduce the issue the result looks like this binlog vs structured log msbuildbinlog msbuildstructuredlog After reading the homepage of the project I was under the impression that MSBuild binlog was up to par with the StructuredLogger used by MSBuild Structured Log Viewer but my experience seems to indicate otherwise Do you know if there is a way to increase the level of detail of the log produced by the Project System Tools extension or possibly use the external StructuredLogger inside Visual Studio Thanks It will be awesome to have this tool available in scoop which is an awesome alternative to chocolatery