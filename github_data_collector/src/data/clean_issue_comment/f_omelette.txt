Enables lazy loading of tree components I still need Promises support as a leaf node but unfortunately I cant trace the code enough Will be cool if it will possible to use bashs filedir helper See example in Just generate more advance bash script I have a setupcleanup script that successfully adds and removes bash begin app completion app completion end app completion I have also setup this alias in zshrc alias landobinappjs app completion outputs bash app completion begin generated by omelettejs if type compdef devnull then appcompletion compadd app compzsh compgen CURRENT words CURRENT BUFFER compdef appcompletion app elif type complete devnull then appcompletion local cur prev nbcolon getcompwordsbyref n cur prev nbcolongrep o COMPLINE wc l COMPREPLY compgen W app compbash compgen COMPCWORD nbcolon prev COMPLINE cur ltrimcoloncompletions cur complete F appcompletion app fi app completion end My appjs contains Write your CLI template var completion omeletteapp test test This is your logic completionontest reply reply option option completionontest reply reply option option completioninit Now I expect when that when I type apptab that I will see the options but I do not What are my next steps to troubleshooting What command outputs the options that I hope to see Is it possible that my JS is outputting garbage prematurely that breaks Zshs autocompletion While educating myself on autocomplete I was poking at npm and noticed that their autocomplete scripts allow for an infinite number of flags to be referenced by the completion mechanism without regard to what position theyre in While the positioning that omelette provides is useful removing that constraint would also be immensely useful For reference here is the script that results from running npm completion bash beginnpmcompletion npm command completion script Installation npm completion bashrc or zshrc Or maybe npm completion usrlocaletcbashcompletiondnpm if type complete devnull then npmcompletion local words cword if type getcompwordsbyref devnull then getcompwordsbyref n n n w words i cword else cwordCOMPCWORD wordsCOMPWORDS fi local siIFS IFS n COMPREPLYCOMPCWORDcword COMPLINECOMPLINE COMPPOINTCOMPPOINT npm completion words devnull return IFSsi if type ltrimcoloncompletions devnull then ltrimcoloncompletions words cword fi complete o default F npmcompletion npm elif type compdef devnull then npmcompletion local siIFS compadd COMPCWORDCURRENT COMPLINEBUFFER COMPPOINT npm completion words devnull IFSsi compdef npmcompletion npm elif type compctl devnull then npmcompletion local cword line point words si read Ac words read cn cword let cword read l line read ln point siIFS IFS n replyCOMPCWORDcword COMPLINEline COMPPOINTpoint npm completion words devnull return IFSsi compctl K npmcompletion npm fi endnpmcompletion Would it be possible to allow the same kind of as many flags as you want in any position functionality Hello Great tool I have had a great pleasure to use it to create my own autocomplete stuff I have used the setupShellInitFile function to automatically setup the shell autocompletion However when I do so and run source zshrc it hangs forever I have to kill the hanging process The added line in the zshrc files is the following zshrc app completion When I turn it into the following one it does not hang and autocompletion works eval app completion I am unsure about this issue Do you have an idea The latest release on GitHub is v but npm lists v as the latest version Could you please publish v to npm Hello Ive created tool for automating directoryfile duplication and renaming etc The program is based on Yeoman Instead of binding Omellettes autocomplete functionality to a certain command program can it be bound to a certain function within a program For example I run my automation tool by running yo tcg in Terminal then the user is immediately confronted with a series of prompts It would be rad if Omelette could be used within these prompts for the autocompletion of directory names etc Is something like possible If I add autocompletion for my global cli it works great mycli tab but if the same script is called through npx which calls local binaries npx mycli tab available in Node autocompletion wont work for the same script Wondering is there a way to solve it easily Is it possible to use omelette to create a completer function for the readline module Hi I tried to switch to and the change of fetching method for word makes the parameter before undefined when an incomplete word is tabbed Ex lorem tabtab a b lorem atab a lorem a tabtab a b c lorem a atab nothing My script that goes like this js const autocomplete a a a a b b b c b a b a a b b c const completion omelettelorem completionon reply replyObjectkeysautocomplete completionon reply before try replyObjectkeysautocomplete before catch e completionon reply before line const lvl linesplit try replyObjectkeysautocomplete lvl before catch e completionon reply before line const lvl lvl linesplit try replyObjectkeysautocomplete lvl lvl before catch e completioninit 