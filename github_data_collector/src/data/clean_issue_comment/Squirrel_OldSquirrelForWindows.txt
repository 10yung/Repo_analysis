Hello I have a project that references another project Admissions requires the AdmissionsExtensions dll to work correctly I have installed shimmer for my project using nuget and followed the instructions for adding an dependency to the installer located here However when I run the Setupexe file the installer crashes with an exception Additional information Could not load file or assembly AdmissionsExtensions Version Cultureneutral PublicKeyTokennull or one of its dependencies The system cannot find the file specified Both Admissions and AdmissionsExtensions have the BuildPackagetrueBuildPackage nodes in the csproj files Admissionsnuspec xml xml version package xmlns metadata idAISid titleAIStitle versionversionversion authorsauthors requireLicenseAcceptancefalserequireLicenseAcceptance descriptiondescription tagstags dependencies dependency idAdmissionsExtensions version version dependencies metadata files file src AdmissionsExtensions bin configuration AdmissionsExtensionsdll targetlib net files package packagesconfig xml xml version encodingutf packages package idMarkdownSharp version targetFrameworknet package idMicrosoftBcl version targetFrameworknet package idMicrosoftBclAsync version targetFrameworknet package idMicrosoftBclBuild version targetFrameworknet package idMicrosoftWebXdt version targetFrameworknet package idNuGetCore version targetFrameworknet package idRxCore version targetFrameworknet package idRxInterfaces version targetFrameworknet package idRxLinq version targetFrameworknet package idRxMain version targetFrameworknet package idRxPlatformServices version targetFrameworknet package idShimmer version targetFrameworknet package idShimmerClient version targetFrameworknet package idShimmerCore version targetFrameworknet package idSquirrelClient version targetFrameworknet package idSquirrelCore version targetFrameworknet package idSystemIOAbstractions version targetFrameworknet package idAdmissionsExtensions version targetFrameworknet packages How do I get the Setupexe file to contain and install the required AdmissionsExtensionsdll Thank you Chuck I forgot to report this but all our programs are obsfucated Therefore when we call update manager there is always new releases to apply because assembly version to shimmer is reported as when its actually ie The problem can easily be solved by adding a parameter overload accepting a here is my real assembly version version Today we solve it by manually resolving the update graph ourselfs by excluding any prior versions to currentVersion Looking to use SquirrelWindows for an application that I need to provide autoupdate functionality Its a Kiosk style application and has a central server component that hosts the data bits that are fed into the Kiosk application According to the documents were supposed to call bool UpdateManagerCheckForUpdates to check for updates but Id rather have it check the web address from which the software was initially installed from much like what ClickOnce did to see if any updates exist for the application The base data services project were going to install using a forced mechanism to manage which of our clients are on a specific version Any suggestions on this Ok here are some thoughts I had while trying to integrate SquirrelWindows into my application Currently Squirrel takes the package that is created for the application and flattens all of the dependencies that come with it The problem is that we now must figure out which binaries we want exactly in the final package net net etc This is currently a bit broken as Squirrel sometimes takes the wrong binaries To work around this issue I created a nuspec files that has the following spec for the file includes files file srcbin Release dll targetlib file srcbin Release MyAppexe targetlib file srcbin Release MyAppexeconfig targetlib files The nuspec doesnt contains any dependencies under the dependencies tag so Squirrel just packs the build output So I thought why do we make the effort to figure out the right dependencies manually if we could just let the build system handle it Wouldnt it be easier if we just let the developers specify their build output Any thoughts Creating a prerelease package for example beta and installing it creates a folder called app in the installation directory Also incrementing the beta package to beta doesnt work it wont create a diff package and also cant be installed as it Squirrel tries to overwrite the existing app directory This reduces the failing tests from to Im not absolutely certain what ICreatesObservableForProperty is around in the code for now but given the summary in ReactiveUIRegisterableInterfacescs summary ICreatesObservableForProperty represents an object that knows how to create notifications for a given type of object Implement this if you are porting RxUI to a new UI toolkit or generally want to enable WhenAny for another type of object that can be observed in a unique way summary and that the tests in WhenAnyTests all pass as well as the use of WhenAny for only IReactiveNotifyPropertyChangeds ie being covered by WhenAnyShim it looks like things are safe Since cloning put everything in SquirrelWindows it was tripping up BumpVersion It was trying to run on SampleUpdatingApps AssemblyInfo which has version versus the other projects at x and failing Also threw in a quick tip into bootstrap for people without Git in their path Thought Id start on a NET retarget if its decided on This would close close del maybe close if detection isnt neededdel For the first time ever I have had a scenario where the application doesnt update It clearly downloads the update but doesnt install it properly all I get from the installer log is this INFO T UpdateManager Downloading RELEASES file from INFO T UpdateManager cleanDeadVersions for version INFO T UpdateManager cleanDeadVersions exclude folder app Which appears to indicate the installer has started and stopped for an unknown reason Im wondering what the best way to handle this is Because it is now an out of date release I cant test anything else about the update but presumably there been an exception in UpdateManagerApplyReleases My code is using var updateStatusBarItem StatusBarTrayManagerCreateNewItemUpdating application updateStatusBarItemMaximum var releases updateInfoReleasesToApply var progress new Subjectint progressSubscribep updateStatusBarItemCurrentValue p exception ignore await updateManagerDownloadReleasesreleases progress Liststring results await updateManagerApplyReleasesupdateInfo updateChecked true do nothing with results return true I was wondering if this could potentially be an issue with the diff version only so maybe I could automatically force it to use the full version if I ever do get an exception in ApplyReleases I have confirmed that the full version works on the basis of completely reinstalling which does work except for the icon never appearing but thats another post Stefan If you build squirrel locally then add it to a project through nuget and then generate the installer it will display just an empty window The log looks like this INFO T App WiX events DisplayMode Full Action Install INFO T WixUiBootstrapper DetectPackageCompleteObs got id NetFx Web state Present status INFO T WixUiBootstrapper DetectPackageCompleteObs got id UserApplicationId state Absent status INFO T WixUiBootstrapper We are doing an UI install Huzzah 