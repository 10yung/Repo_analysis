 Steps to reproduce Configure webpacker to use TypeScript default setup Create React Functional Component and add to slim template reactcomponentHelloWorld name my name prerender true Render component FYI Functional component is import as React from react interface Props name string const HelloWorld ReactFunctionComponentProps name Default name return h Hello from React and name h export default HelloWorld Expected behavior Should display component rendered server side Without prerender the component renders as expected Actual behavior Rails Error that Element Type is invalid ExecJSProgramError Error Element type is invalid expected a string for builtin components or a classfunction for composite components but got undefined You likely forgot to export your component from the file its defined in or you might have mixed up default and named imports when prerendering HelloWorld with namemy name System configuration Webpacker ReactRails RectUJS version Ruby Version Rails Version When attempting to render a React Functional component in a slim template prerendering doesnt work Without prerender set to true the component renders as expected Not sure if this might be a problem with TypeScript using a React functional component using slim instead of erb or another library issue Summary This enables us to easily override getConstructor to not use global fallback avoiding the allconsuming trycatch Other Information Heres the context Quoting Regarding Encountered error ExecJSProgramError Invariant Violation Element type is invalid I think one of the core issues is that module lookup uses trycatch While the errors are logged to the console shim that typically doesnt help as a later error such as the invariant violation will lead to a fatal error triggering a If that could be refactored to be a bit more intentional based on environment instead of just reacting based on exceptions or at the very least throwing if the caught exception isnt very specific Steps to reproduce Run rails server and start your application Make a change to a jsx tsx file and save the file Expected behavior The application compiles the javascript reloads in the browser and shows the changes Actual behavior The application appears to compile the javascript reloads in the browser and does not show the changes It appears as though React is out of sync with the rest of the application After stopping and starting the server the changes appear System configuration Webpacker version ReactRails version ReactUJS version Rails version rc Ruby version In development when making a large amount of javascript changes the application stops refreshing Its almost as if the react changes are out of sync React hangs intermittently after saving a jsx tsx file Bumps webpackdevserver from to details summaryRelease notessummary Sourced from webpackdevservers releases v a name a Bug Fixes binoptions correct check for color support optionscolor b package update spdy v assertion error a a Server correct node version checks a b Server mime type for wasm in contentBase directory fadae d add url for compatibility with webpack dd a check origin header for websocket connection b ca v Bug Fixes options add writeToDisk option to schema d f package update sockjsclient v urlparse vulnerability e Server set tlsDEFAULTECDHCURVE to auto c def v No release notes provided v Bug Fixes package yargs security vulnerability dependencies fb c utilscreateLogger ensure quiet always takes precedence optionsquiet a ca v Bug Fixes Server dont use spdy on node v ab eb v Bug Fixes trtable truncated details details summaryChangelogsummary Sourced from webpackdevservers changelog Bug Fixes binoptions correct check for color support optionscolor b package update spdy v assertion error a a Server correct node version checks a b Server mime type for wasm in contentBase directory fadae d add url for compatibility with webpack dd a check origin header for websocket connection b ca a name a Bug Fixes options add writeToDisk option to schema d f package update sockjsclient v urlparse vulnerability e Server set tlsDEFAULTECDHCURVE to auto c def a name a a name a Bug Fixes package yargs security vulnerability dependencies fb c utilscreateLogger ensure quiet always takes precedence optionsquiet a ca a name a Bug Fixes Server dont use spdy on node v ab eb trtable truncated details details summaryCommitssummary See full diff in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Specs Rails Ruby Yarn ReactRails Postgresql Ubuntu Webpacker Websocketdriver Issue Getting these ever present error messages destroying my logs with backtraces They happen after I set up a rails app with react The errors are all looking for routes for javascriptworkbox files once I start the server with rails s Started GET serviceworkerjs for at Started GET javascriptsworkboxworkboxswjs for at Started GET javascriptsworkboxworkboxexpirationprodjs for at Started GET javascriptsworkboxworkboxcoreprodjs for at Started GET javascriptsworkboxworkboxstrategiesprodjs for at ActionControllerRoutingError No route matches GET serviceworkerjs Notice the errors begin on the last line and will continue from there for each of those GET requests Followed by a stacktrace for each like this one actionpack libactiondispatchmiddlewaredebugexceptionsrb in call webconsole libwebconsolemiddlewarerb in callapp webconsole libwebconsolemiddlewarerb in block in call webconsole libwebconsolemiddlewarerb in catch webconsole libwebconsolemiddlewarerb in call actionpack libactiondispatchmiddlewareshowexceptionsrb in call railties librailsrackloggerrb in callapp railties librailsrackloggerrb in block in call activesupport libactivesupporttaggedloggingrb in block in tagged activesupport libactivesupporttaggedloggingrb in tagged activesupport libactivesupporttaggedloggingrb in tagged railties librailsrackloggerrb in call sprocketsrails libsprocketsrailsquietassetsrb in call actionpack libactiondispatchmiddlewareremoteiprb in call actionpack libactiondispatchmiddlewarerequestidrb in call rack librackmethodoverriderb in call rack librackruntimerb in call activesupport libactivesupportcachestrategylocalcachemiddlewarerb in call actionpack libactiondispatchmiddlewareexecutorrb in call actionpack libactiondispatchmiddlewarestaticrb in call rack libracksendfilerb in call webpacker libwebpackerdevserverproxyrb in performrequest rackproxy librackproxyrb in call railties librailsenginerb in call puma libpumaconfigurationrb in call puma libpumaserverrb in handlerequest puma libpumaserverrb in processclient puma libpumaserverrb in block in run puma libpumathreadpoolrb in block in spawnthread What I did I followed instructions from multiple sources Heres and another telling me to do basically the same thing I ran rails new app databasepostgresql webpackreact which runs normally Then I add the gem reactrails to my gemfile and bundle install again I next run rails generate reactinstall and everything seems fine except for a few warnings Here are some of the warnings I dont know if these are causing the issue or not warning babelpresetreact has unmet peer dependency babelcore warning babelpresetreact babelplugintransformreactdisplayname has unmet peer dependency babelcore warning babelpresetreact babelplugintransformreactjsx has unmet peer dependency babelcore warning babelpresetreact babelplugintransformreactjsxself has unmet peer dependency babelcore warning babelpresetreact babelplugintransformreactjsxsource has unmet peer dependency babelcore warning babelpresetreact babelplugintransformreactjsx babelpluginsyntaxjsx has unmet peer dependency babelcore warning webpackdevserver has unmet peer dependency webpack warning webpackdevserver webpackdevmiddleware has unmet peer dependency webpack Not sure if those warnings matter or if there is another reason that my app isnt setting up Workbox properly React itself is working The default Hello world rails app works fine It is just the constant failed GET requests to Workbox files that is causing me grieve What Ive tried to fix it Ive tried recreating new react apps using the instructions I showed above but I run into the same problem Ive also looked through stackoverflow questions for anyone else with a similar issue Expected behavior I fetched data from clientside like below when I use reactrouter but source code has nothing js useEffect fetchv thingsjson thenresponse responsejson thenjson setThingjsonthings Actual behavior Source code renders nothing System configuration webpacker reactrails reactujs ruby rails How to use reactrouter to serverside render could use clientside fetch and render If not how to use props for all router code like this js Appjs import React from react import StaticRouter BrowserRouter from reactrouterdom import HelloWorld from HelloWorld class Router extends ReactComponent renderRouter if typeof window undefined return BrowserRouterthispropschildrenBrowserRouter else return StaticRouter locationthispropspath context thispropschildren StaticRouter render return thisrenderRouter const Application props Router pathpropspath HelloWorld Router export default Application js HelloWorldjs const NoteApp props const things setThing useState useEffect fetchv thingsjson thenresponse responsejson thenjson setThingjsonthings const mapp thingsmapthing index ListItem keyindex ListContent ListHeader asathingnameListHeader ListDescription asathingguidListDescription ListContent ListItem return ReactFragment Greeting propsgreeting mapp ReactFragment export default NoteApp Steps to reproduce Create a css file and import it into a jsx file It works locally but when pushing to heroku the css isnt loaded Expected behavior Dev and prod behaves the same way Actual behavior Heroku does not load css and its super annoying System configuration dependencies babelpresetreact railsactioncable alpha railsactivestorage alpha railsujs alpha railswebpacker babelplugintransformreactremoveproptypes cssloader proptypes react reactdom reactfacebook reactstripeelements reactujs turbolinks version devDependencies webpackdevserver Using ruby and Rails I used reactrails in my main app but some of my rails engine need to use react as well Do we have any way to use reactrails inside rails engines I mean we create by my own component on use it inside my engine Btw After research a bit about it I saw this answer about this Can we do like that Is it official way in reactrail Thank you guys so much for support this issues System configuration Sprockets ReactRails version Rails version Ruby version In reactujsjs functionmodule exports webpackrequire var React webpackrequire var ReactDOM webpackrequire var ReactDOMServer webpackrequire ReactDOM comes up undefined Searching the code for symbol WEBPACKEXTERNALMODULE shows it being used but I have no idea what is supposed to define it I dont understand webpack so I may be missing something fundamental Steps to reproduce Here is an example set up of the files Procfiledev web DBCONNECTIONPOOLWEBDBCONNPOOL bundle exec puma C configpumarb worker DBCONNECTIONPOOLSIDEKIQDBCONNPOOL MALLOCARENAMAX bundle exec sidekiq C configsidekiqyml t webpacker binwebpackdevserver configwebpackeryml yaml development sourcepath appjavascript sourceentrypath packs publicrootpath public publicoutputpath packs cachepath tmpcachewebpacker checkyarnintegrity false webpackcompileoutput false devserver https false host localhost port public localhost hmr false Inline should be set to true if using HMR inline true overlay true compress true disablehostcheck true uselocalip false quiet false headers AccessControlAllowOrigin watchoptions ignored nodemodules configapplicationrb ruby configreactserverrendereroptions files ssrpackonejs ssrpacktwojs files to load for prerendering packsapplicationjs javascript import ReactRailsUJS from reactujs import Rails from railsujs Railsstart const componentRequireContext requirecontextreactssrcompsone true ReactRailsUJSuseContextcomponentRequireContext packsssrpackonejs javascript import ReactRailsUJS from reactujs const componentRequireContext requirecontextreactssrcompsone true ReactRailsUJSuseContextcomponentRequireContext packsssrpacktwojs javascript import ReactRailsUJS from reactujs const componentRequireContext requirecontextreactssrcompstwo true ReactRailsUJSuseContextcomponentRequireContext reactssrcompsoneTestComponentjs javascript import React from react export default div Test Componentdiv reactssrcompstwoTestComponentTwojs javascript import React from react export default div Test ComponentTwodiv applicationhtmlerb html DOCTYPE html html langennz head stylesheetpacktag application javascriptpacktagapplication nonce true head body reactcomponentTestComponent prerender true body html Expected behavior When using webpack dev server we should be able to specify more than one file to compile for server rendering which can prerender a component Actual behavior We get an error from the server Uncaught SyntaxError Illegal return statement at undefined System configuration Sprockets or Webpacker version ReactRails version ReactUJS version Rails version Ruby version We want to be able to have two separate server rending packs so that we are not compiling all components when some are not needed During development using the webpackdevserver adding a second file results in Uncaught SyntaxError Illegal return statement at undefined Removing the file solves the issue It also seems to work fine when not using webpackdevserver Hopefully Ive provided enough information but let me know if I can provide some more 