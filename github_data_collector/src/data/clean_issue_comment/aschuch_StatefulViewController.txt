fix issue UIView that conforms StatefulViewController protocol cannot be destroyed UIView that conforms StatefulViewController protocol does not be destroyed Here is a StatefulViewControllerDemozip to illustrate this issue PS the core code swift class StateView UIView StatefulViewController public var defaultLoadingView UIView let defaultView UIView defaultViewbackgroundColor UIColorwhite let label UILabel labeltextColor UIColorblue labeltext loading defaultViewaddSubviewlabel labelsnpmakeConstraints maker in makerheightequalTo makercenterXequalToSuperview makertopequalToSuperviewoffset return defaultView public var defaultEmptyView UIView let defaultView UIView defaultViewbackgroundColor UIColorwhite let label UILabel labeltextColor UIColorblue labeltext no content defaultViewaddSubviewlabel labelsnpmakeConstraints maker in makerheightequalTo makercenterXequalToSuperview makertopequalToSuperviewoffset return defaultView override initframe CGRect superinitframe frame loadingView defaultLoadingView emptyView defaultEmptyView setupInitialViewState required initcoder aDecoder NSCoder fatalErrorinitcoder has not been implemented FIXME StateView cannot be destroyed deinit printStateView deinit func hasContent Bool return false error SWIFTVERSION is unsupported supported versions are in target StatefulViewControlleriOS any plan to update to swift x or x Solves problem with layout if View controller uses safe layout guides I set up my placeholder view as usual inside of a UITableViewController using the views frame but the placeholder views dont take the entire views frame instead are aligned to the top with parts hiding under the navigation controller How can I resolve this please I migrated to swift If we make the following changes to the TableViewController from examples swift class AbstractTableViewController UITableViewController StatefulViewController class TableViewController AbstractTableViewController The view doesnt change its state at all when calling startLoading or any other method Why could that be Im new to SwiftiOS development and might not be aware of something Its just Im used to create reusable abstract classes to make the code more DRY in other languages would be a shame if I had to write same boilerplate code in all my controllers where I need LCE LoadingContentError states