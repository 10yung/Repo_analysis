We may well want to update to NET Core but that can come later See for details Something like PeriodDaysBetweenLocalDate LocalDate etc According to ISO at least the Wikipedia article on it there are two allowed format for calendar dates Basic YYYYMMDD Extended YYYYMMDD It seems that LocalDatePatternIso uses the extended format This seems perfectly reasonable to me as it is the most widely used as far as I can tell My question is whether it should be named ExtendedIso to make it clear you could also add BasicIso This would make it consistent with InstantPatternExtendedIso too As requested in it could be useful to expose CalendarOrdinal and then CalendarSystemForOrdinal That enum is currently internal though and wed want to be pretty certain before exposing it wed also need to remove the Size value We are using version as it is PCL and we are facing outdated time zones Is it possible to update the time zones in that PCL version The current Period supports both years months weeks days hours minutes seconds milliseconds and ticks To me this seems a bit like only having a DateTime you must have a time even though you might only want a date I often find myself requiring that only date or time is set in a Period and currently Im forced to use HasDateComponent and HasTimeComponent which are runtime instead of having something at compile time I see this as one of Noda Times biggest strengths and somehow its missing here Wouldnt it make sense to introduce two new types of periods by splitting Periods into two a DatePeriod and a TimePeriod The DatePeriod would only allow you to specify years months weeks and days and could only be added to a LocalDate whereas a TimePeriod only had hours minutes seconds milliseconds and ticks and could only be added to a LocalTime Adding a DatePeriod and a TimePeriod would result in a regular Period TimePeriod could also easily be converted to a Duration and vice versa Now that NET Core has gone GA we should get rid of all the prereleaseness Hopefully this will speed up CI as well no need to fetch and install that may take a little while though Im trying to findmake a LocalTime pattern that parses all of the extended ISO formats for time but only formats them as the full extended ISO pattern with hours minutes seconds and optional fractional seconds The pattern should be used for public APIs that allow a wide range of ISOdefined inputs while only returning a single format Im having problems finding support for it All the ISO time formats look something like this HHmmssFFFFFFFFF HHmm HH HHmmFFFFFFFFF HHFFFFFFFFF or fewer decimal zeroes or fewer decimal zeroes or fewer decimal zeroes There doesnt seem to be any default pattern supporting them all but some of it can be supported using a CompositePatternBuilder The first pattern is just LocalTimePatternExtendedIso The second and third can easily be implemented with LocalTimePatternCreateWithInvariantCulture However the fourth and fifth pattern dont seem to be supported at all Having fractional hours or minutes just results in the LocalTime having zeroes for anything below hoursminutes The last three are just variations on the above but for the special case of the late midnight aka which should simply translate to LocalTimeMidnight As long as the hours is it should be possible to use all the other patterns with pure zeroes in any combination It is possible to use LocalTimePatternCreateWithInvariantCulture here as well it just requires you to define all the patterns individually and that doesnt even support the fractional hoursminutes So the first three are easy the fourth and fifth are currently not possible and the last hour cases are cumbersome Hi all We recently started building a new mobile app using Noda Time and one of the first things were working of requires us to format a date and time into a string Now part of this string should have a format including day nonpadded and month name As such this is exactly what the standard monthday DateTime formatting pattern M does Obviously this format can only be used by itself as otherwise it would cause confusion with the month number format specifier And true I could exit Noda Time to revert to an unspecified DateTime to apply this formatting But to me this seems like a missing feature that would be a great addition to Noda Time All the best Alexander While weve got type converters for most types we dont have one for ZonedDateTime In order to create one wed need to know which provider to use which is tricky There are hacky ways round this in terms of having a static property somewhere but its far from ideal