Fixes CoAuthoredBy rstrullu We have the following bug to report This bug targets all the known versions of Zmap In some rare cases the IP generation of Zmap is flawed and the scan does not cover the full IP range or enter in an infinite loop This occurs when the number generated by the random generator or the seed specified by the user with the e paramater or in the zmapconf file is equal to some problematic value The probability is estimated to approximatively the euromillion jackpot probability but is non zero The bug can be reproduced with the following seed values and the current version of Zmap on github commit f fc infinite loop infinite loop partial scan of the scan partial scan of the scan partial scan of the scan infinite loop partial scan of the scan single IP generation single IP generation This list is not exaustive and the number of problematic values is approximatively equal to The command line for testing the bug is the following zmap p d e seedvalue grep ip wc l or equivalently for faster result ziterate b confblacklistconf e seedvalue wc l The bug is due to the fact that the multiplication in the finite field is coded as a bit unsigned multiplication followed by a modular reduction This sequence of operations is sound when the two operands are less than Some elements of the finite field used by Zmap are however greater than In particular if the primitive element generated by the RNG exceeds then during the generation of the cyclic group one of the multiplication exceeds and the multiplication in the finite field is flawed Moreover a special case occurs when the primitive element is greater than In this case the function that generates the primitive element findprimroot cast the value into bits resulting in a value that is not a primitive element To fix this bug we recommand to modify the function that generate the primitive element of the finite field However we do not recommand to change the multiplication of the finite field Actually using a big number library like mpz will deeply impact the performance of the IP generation process Moreover the multiplication on bits and the reduction can be coded as two assembly instructions on modern CPUs and it is the most efficient method for coding the generation of the cyclic group Therefore we only recommand to check that the primitive element is less or equal to It ensures that all the multiplications with this operand will have a result less than This can be done by modifying the function findprimroot in the file cyclicc static uint t findprimrootconst cyclicgroupt group aesrandt aes uint t retv do uint t candidate uint taesrandgetwordaes xFFFFFFFF groupprime if candidate candidate while checkcoprimecandidate group COPRIME candidate special case where we need to restart check from begin if candidate groupprime candidate retv isomorphismcandidate group while retv bug fix return retv R mi Strullu and Johan Mazel A notable population of upnp devices respond using a nonstandard srcport This commit removes the check for srcport targetport for the validity checks leaving the decision of validity to the packet processor Can zmap be used for scanning network layer or transport layer I got a segmentation fault when using X option I use a PPPoE connection OS Ubuntu Desktop LTS version zmap Development Build Commit f fc commandline sudo zmap p o openhosttcp txt i ppp X r The code triggering the SEGV backtrace Thread zmap received signal SIGSEGV Segmentation fault Switching to Thread x ffff da LWP memmoveavxunalignederms at sysdepsx multiarchmemmovevecunalignedermsS sysdepsx multiarchmemmovevecunalignedermsS No such file or directory gdb bt memmoveavxunalignederms at sysdepsx multiarchmemmovevecunalignedermsS x f a in handlepacket buflen bytes x ffff dd fbc at hometestzmapsrcrecvc x a in packetcb user x p x ffff d d bytes x ffff dd fbc at hometestzmapsrcrecvpcapc x ffff b a b in from usrlibx linuxgnulibpcapso x ffff b ad in from usrlibx linuxgnulibpcapso x a e in recvpackets at hometestzmapsrcrecvpcapc x e in recvrun recvreadymutex x a recvreadymutex at hometestzmapsrcrecvc x in startrecv arg x a b at hometestzmapsrczmapc x ffff dd db in startthread arg x ffff da at pthreadcreatec x ffff afd f in clone at sysdepsunixsysvlinuxx cloneS When multiple zmap processes are doing the UDP scanning on the same host each zmap process will receive unrelated UDP responses belonging to other zmap processes The bug reason is that the zmap UDP scan doesnt check whether the source port of received UDP response is same as the target port of the scanning This bug only exists when multiple zmap processes run at the same time I got this while trying to zmap and I have no idea how to fix it as I dont know a lot about VPS servers could someone help In outputmodulesmodulerediscsvc line when copying FSBINARY type fields value to the output buffer the code is hexencodestrout unsigned char fvalueptr flen This mistake typo will cause that when configured outputfields to value like saddrtimestampstrdata the final output will only contain data field value saddr and timestampstr values which have been copied to the out buffer will be overwritten by the above code mistakenly The bug could be stably reproduced by the current HEAD code Have tested the obvious bugfix method of replacing out to dataloc and that resolved the issue well I am curious if zmap can support sending packets on one host and then receiving packets on another host If it can what command Ishould use see my last comment this is the path that I took discovering this issue During a zmap scan Im writing results to redis as resdiscsv format and my redis queue is gaining a considerable amount more results than what is being reported in the zmap output For example the subnet at a second rate is showing only responses after minutes but my redis queue has a factor of x the responses in the subnet Im not sure if this is a bug with Redis or some weird threading issue but Im running a second scan along side of the redis scan outputting results to a file The second scan is gathering results at a much slower rate even though the rate limit is set to What info do you need from me to look into this