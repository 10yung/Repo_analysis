ABP package version Base framework Net Core In the NET core MultiPage MVC template there is an error in the code for the delete entity sweet alert The second argument should be the title which will be displayed in bold Upon download at present it is as follows function deleteUseruserId userName abpmessageconfirm abputilsformatStringabplocalizationlocalizeAreYouSureWantToDelete AbpTest userName function isConfirmed if isConfirmed userServicedelete id userId donefunction refreshUserList In this form it will display the actual function in plain text as the sweet alert title The second argument should be the title I also altered the first argument and added both to the localisation file to make it display as demonstrated on function deleteUserUserId UserName abpmessageconfirm abputilsformatStringabplocalizationlocalizeWillBeDeleted AbpTest UserName abplocalizationlocalizeAreYouSure AbpTest function isConfirmed if isConfirmed userServicedelete id UserId donefunction refreshUserList text nameAreYouSureAre you suretext text nameWillBeDeleted will be deletedtext Fixes Investigation To reproduce the issue add a line in aspnetboilerplatemodulezerocoretemplates AccountControllercsL L diff await notificationPublisherPublishAsync AppSimpleMessage new MessageNotificationDatamessage entityIdentifier new EntityIdentifiertypeofEntity severity NotificationSeverityInfo userIds new defaultTenantAdmin hostAdmin To get the error maybe silently caught inside SignalR add a line at SignalRRealTimeNotifiercsL diff JsonSerializerSerializeuserNotification signalRClientSendAsyncgetNotification userNotification Error log WARN HostControllersSignalRRealTimeNotifier Could not send notification to user WARN HostControllersSignalRRealTimeNotifier SystemTextJsonJsonException A possible object cycle was detected which is not supported This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of at SystemTextJsonThrowHelperThrowInvalidOperationExceptionSerializerCycleDetectedInt maxDepth at SystemTextJsonJsonSerializerWriteUtf JsonWriter writer Int originalWriterDepth Int flushThreshold JsonSerializerOptions options WriteStack state at SystemTextJsonJsonSerializerWriteCoreUtf JsonWriter writer Object value Type type JsonSerializerOptions options at SystemTextJsonJsonSerializerWriteCorePooledByteBufferWriter output Object value Type type JsonSerializerOptions options at SystemTextJsonJsonSerializerWriteCoreStringObject value Type type JsonSerializerOptions options at SystemTextJsonJsonSerializerSerialize TValue TValue value JsonSerializerOptions options at AbpCompanyNameAbpProjectNameWebHostControllersSignalRRealTimeNotifierSendNotificationsAsyncUserNotification userNotifications in C Users Aaron Desktop modulezerocoretemplate aspnetcore src AbpCompanyNameAbpProjectNameWebMvc Controllers SignalRRealTimeNotifiercsline SystemTextJsonJsonException A possible object cycle was detected which is not supported This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of at SystemTextJsonThrowHelperThrowInvalidOperationExceptionSerializerCycleDetectedInt maxDepth at SystemTextJsonJsonSerializerWriteUtf JsonWriter writer Int originalWriterDepth Int flushThreshold JsonSerializerOptions options WriteStack state at SystemTextJsonJsonSerializerWriteCoreUtf JsonWriter writer Object value Type type JsonSerializerOptions options at SystemTextJsonJsonSerializerWriteCorePooledByteBufferWriter output Object value Type type JsonSerializerOptions options at SystemTextJsonJsonSerializerWriteCoreStringObject value Type type JsonSerializerOptions options at SystemTextJsonJsonSerializerSerialize TValue TValue value JsonSerializerOptions options at AbpCompanyNameAbpProjectNameWebHostControllersSignalRRealTimeNotifierSendNotificationsAsyncUserNotification userNotifications in C Users Aaron Desktop modulezerocoretemplate aspnetcore src AbpCompanyNameAbpProjectNameWebMvc Controllers SignalRRealTimeNotifiercsline Root cause Deserialization of SystemType is bad and not supported See Solution Set EntityType of TenantNotification to null before sending via SignalR Deprecate EntityType property of serializable class TenantNotification Platform ABP ASPNET Core MVC Something is wrong with NotificationPublisher when a notification is sent including an EntityIdentifier When a notification with that parameter set is sent SignalR disconnects and reconnects and the notification is never displayed To see the notification I am forced to refresh the page If I simply remove the EntityIdentifier parameter that same notification works correctly with SignalR Sample with the error C public async Task DataClearedAsyncGuid processStatusId int tenantId int userId var notificationData new LocalizableMessageNotificationData new LocalizableString ClearDataNotificationMessage InAccessConstsLocalizationSourceName await notificationPublisher PublishAsyncAppNotificationNamesClearData notificationData new AbpDomainEntitiesEntityIdentifiertypeofProcessStatus processStatusId userIds new new UserIdentifiertenantId userId severity NotificationSeveritySuccess Sample that works correctly C public async Task DataClearedAsyncGuid processStatusId int tenantId int userId var notificationData new LocalizableMessageNotificationData new LocalizableString ClearDataNotificationMessage InAccessConstsLocalizationSourceName notificationData processStatusId processStatusId await notificationPublisher PublishAsyncAppNotificationNamesClearData notificationData userIds new new UserIdentifiertenantId userId severity NotificationSeveritySuccess I suspect this might be a JSON serialization error with the EntityIdentifier that breaks the JSON SignalR generates for the notification Is there any way to control whether a request will show or not the sweetalert popup on the angular project At first I thought that if an error method was provided no popup would show Something like this ts thisrawServiceuploadthisfilesubscribe result thisresponse result error no popup is shown consoleerrorerror Thank you above line skip to create history record for enum properties if propertyIsPrimitiveType propertyIsComplexType propertyIsEnumType i fixed it like that please correct me if i m wrong Thanks Dears Is it possible to mark classes in framework as partial class would that be easier instead of modify original class so when new version come just replace them and any modification i made will exist Thanks I am running multi tenancy with db per tenant Like permissions when I enable disable feature for a tetnant it is only getting stored in host db and not in tenant db abpfeatures table is this normal behaviour We have defined custom features for the mobile app that is syncronizing with indivvidual tenant db and therefore need the features table to be populated in each tenant db Element UI is the most popular free and opensource Vue UIKit Its supported by Alibaba And iview is a business lib need software license Users need to pay for abpzero and iview both Higher license with make abp lose lots of potential customer Element UI k stars Documentation iView has just k stars Users need to buy courselicense etc Our team is using an additional application for our setup As a result we have moved the src and e e folder to projectaspnetzerotemplate this question applies to both ABP and AN to adopt the Angular monorepo file structure The main problem this causes is when refactoring happens in the updates git sometimes misses the file path rename All things considered the change is rather minute and it would make updating the framework substantially easier if we could have the template generated with the monorepo structure High level diff Move src projectsabptemplatesrc and e e projectsabptemplatee e Move srctsconfigjson projectsabptemplatetsconfigjson Add roottsconfigjson projectsabptemplatetsconfigappjson projectsabptemplatetsconfigspecjson needs jasmine and node under types see default tsconfigspecjson Update rootangularjson path updates A further step we have taken is moving the serviceproxiests and serviceproxiesmodulets to an Angular library so that it can be shared between applications and only needs to be generated once Causes an issue with the moment import but I have a ticket with NSwag open on that Ideally we would do this with most of the components found under srcshared as well but have not gotten around to it as of yet I understand this is probably an edge case for most of your users but I think the option to start with a monorepo is a valuable one at the very least a script for applying the move would be useful Implements webhook system It allows tenants and host to subcsribe and get webhooks when it is triggered WebHookDefinition First of all you must create webhook provider You can set webhooks unique name display name description and feature dependencies tenants must provide these dependencies Subscribe To Webhook To receive webhooks tenantshost must subscribe to it Tenants must have necessary features to subsribe a webhook Checks also anytime before send a webhook Webhook subscription parameters WebHookUri Endpoint that webhook will be sent WebHooks Subscribed webhooks For example usercreated roledeleted Must be defined in provider Headers optional Additional headers that you want to receive with that subscription For example you can set auth token here It can get published webhooks after tenant subscribed to webhooks To publish webhook Get IWebHookPublisher and use its Publish methods See Forexample It creates background job to web webhooks And tries to send webhooks to subscribed tenants If it fails it tries to resend webhook IWebHooksConfigurationcs MaxRepetitionCount times Added Entities WebHookSubscriptionInfo Stores webhook subscriptions WebhookEvent Stores created webhooks data Forexample when a new user created then webhook published One WebhookInfo will be created then webhooks will send to all subscribed tenants WebhookSendAttempt Table for store webhook work items Each item stores web hook send attempt of WebHookInfo to subscribed tenants with webhook result Related x Add Documentation