 Summary Since we are no longer trying to share the INavigationService from PrismCore and INavigationService is back in PrismForms we no longer have a hard requirement for IPlatformNavigationService While this would be another pdb break from X the push would be a good time to remove the API bloat and simply put this in the INavigationService API Changes Removes IPlatformNavigationService Adds INavigationServiceGoBackAsyncINavigationParameters bool bool Adds INavigationServiceGoBackToRootINavigationParameters Adds INavigationServiceNavigateAsyncstring INavigationParameters bool bool Adds INavigationServiceNavigateAsyncUri INavigationParameters bool bool Intended Use Case Removes issues with Mocking INavigationService where people use these APIs where their NavigationService also needed to implement IPlatformNavigationService Summary In order to more fully validate tests for XamarinForms UI Tests should be added that we can run as part of the CI pipeline This will help us to catch issues more rapidly and help us prevent issues before they occur Looking for one or more community members who would like to help us out on this issue Summary Many APIs are currently lacking XML docs or have invalid markup As we begin to explore adding API documentation to the Prism Docs we need to update the existing codebase with more complete XML docs so that these docs can be generated for the docs site NOTE While updated and added XML docs should include Summaries and information for parametersreturn values it will often be better to ensure that remarks and examples are included as this will make the generated API docs more useful Additional information on proper doc tags can be found here cs summary The GetZero method summary example This sample shows how to call the see crefGetZero method code class TestClass static int Main return GetZero code example public static int GetZero return Description When opening a dialog by using IDialogService the dimmed background is only visible on the current page If eg we have a TabbedPage the tabsarea is not disabled nor greyed out Therefore the user can switch tabs Is there a possibility to prevent this behavior Steps to Reproduce Create a TabbedPage Open a dialog by using IDialogService Expected Behavior All the background is gray and the user should not be able to select the other tab Actual Behavior The currenty page is gray only and the user is able to switch tabs Basic Information Version with issue Screenshots Summary The current implementation does not respect the Android back button if the dialog is shown The complete page is closed go back instead of closing only the diolog Intended Use Case User should be able to close cancel the dialog with the back button Description Add support for Xamarin Forms Shell Hi I have TabbedPage with Children wrapped into NavigationPages When trying to switch tabs and go to next page with await NavigationServiceNavigateAsyncBlnakApp MainKnownNavigationParametersSelectedTabTab Content app goes blank It navigate to requested page but doesnt display anythig Only on ios Version XamarinForms Sample Package info Platform iOS Prism version Xamarin version if applicable XamariniOS XamarinForms Repro steps Example Project to reproduce the behaviour When creating a TabbedPage in XamarinForms on iOS that has more then tabs the TabbedPage creates a More tab with a list view to select the tabs from and up For tabs in this More list and only in this list the INavigationAware callbacks are not fired on back navigation Navigation Bar back button or INavigationServiceGoBackAsync However they are fired as expected in tabs that are not in the More list In the above example app once its open on any of the first four tabs and tapping the NavigateToDetails button upon navigating back NavigatedTo is fired and the label is updated on screen However doing the same in the last three tabs results in the NavigatedTo not being fired and the label not being updated on screen We are a company that has been using PRISM in multiple WPF projects for many years Now we want to develop a new multiplatform application for mobile tablet desktop etc Following the TODO app we have started by creating a solution for each device For example the desktop solution is created with WPF and the mobile solution with XamarinForms We can reuse most of the code by sharing the view models which are Net Standard libraries that use PRISMCore However Microsoft recently announced that XamarinForms will support WPF in addition to Linux and MacOS Before this we understood that XamarinForms was only for mobile applications However after this announcement XamarinForms will also start to be used as a framework for desktop applications That is the reason why we are thinking to work with XamarinForms as a main development framework for all our applications both for mobile and desktop devices We could have different solutions for each device but all of them would work with XamarinForms with all the advantages that it represents only one xaml to learn only one framework etc The problem is that PRISM for XamarinForms does not have the concept of region For us in tablet or desktop solutions this feature is essential to be able to create modular applications In this post Brian explained that regions didnt make sense in XamarinForms for mobile devices But now after this announcement it makes sense for larger devices like a tablet or desktop For example there is a framework called Exrin that already supports regions in XamarinForms Is there any plan to include the concept of regions in PRISM for XamarinForms We think that both the community and us will be very interested 