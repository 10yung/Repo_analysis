Currently making my way through the book in detail awesome btw and I realised that in Chapter AccountService is parameterised on Account Amount and Balance which is awesome but AccountRepository on which it depends is not I was curious if it should be In effect doesnt this mean that AccountService is coupled to the concrete models due to The lens name nameLens did not correspond to the actual value assigned which in fact deals with id so it must be either the name or the value which is not valid For the completeness this commit adds both idLens and nameLens Related issue Given the implicit context which is my own guess it seems like the code for nameLens should probably be as follows scala protected val nameLens Lens Customer String get name set o v ocopyname v Decoupled the contract from the implementation The root cause why the operation need to return Future is because repository Rather than eagerly calling Futureapply in service level why cant we introduce Future as the return type from repository and compose it accordingly in service level Lets say our repository is nonblocking we will call this already wellshaped repository in another thread which is unnecessary Due to the use of the today function in several places in the function the account creation occasionally fails when the generated timestamp differs I added a test to prove this is the case it sometimes still passes showing the randomly failing nature of the problem debasishg a question about what comes first Command or Event In the current code the service operations are mapped to a single Event which in turn is mapped to a Command Seems this would not support a functionality where a service operation logically a Command would need to generate multiple Events to different Aggregates Scenario funds transfer would update Account balances and update Customer net worth Then there is the question of whether the Interpreter is per Aggregate or can work with more than one Please advise See 