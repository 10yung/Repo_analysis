Updates orgscalatestplusscalacheck from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalatestplus artifactId scalacheck details labels testlibraryupdate Purpose This PR allows the LazyFlow to work with a single element when the future is completed after the first element arrives This previously worked in but moving to broke this for us hence we realised the behaviour had changed References The code is reverted back to what it was before where this problem seems to have been introduced Changes Dont complete promise if still switching Have a separate behaviour for the first element Background Context Created failing test reproducing the issue reverted back to the previously working version and then eliminated differences until only the important changes remained Having only one blocking actor is not enough since then only one dispatcher thread will be blocked at a time Updates orgscalasbtsbt from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalasbt artifactId sbt details labels libraryupdate semverpatch Without any of the settings changes not using it anywhere in Akka itself and without providing the mechanism to create multiple system materializers Intended to allow downstream projects to provide APIs that require an ActorSystem instead of a Materializer without requiring Akka yet This way the stack trace will be more helpful because it contains the stage that actually triggered the materialization Otherwise we will only fail during preStart in the interpreter where the stage will be failed and the error be propagated through the stream where it can be hard to figure out what happened Also improve the message itself to contain the user provided name of the sinksource This will probably fail a few tests so this is Jenkinsfodder for now was not equal to ReplicatorPruningSpecscala The edition to preserve existing behavior while upgrading to latest for perf upgrades mainly works but some bugs have been fixed eg that cause formatting changes For me this makes cleanscalafmtAll x faster Forward port of If the handshake doesnt complete the Promise in AssociationState was not completed and each new restarted stream added future callback to it OutboundHandshake stage Those references are kept in the promise and therefore old OutboundHandshake and probably entire stream couldnt be garbage collected Using own notification mechanism to have control of listener deregistration from postStop instead of using PromiseFuture Trying to create new Promise after failurerestart would be difficult due to that the same AssociationState Promise is accessed from several outbound streams all possibly restarted individually Therefore easier to cleanup from postStop cherry picked from commit b e df d c f f fb ca 