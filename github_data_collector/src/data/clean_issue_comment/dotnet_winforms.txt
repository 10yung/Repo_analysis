 Proposed Changes Fix Microsoft Reviewers Open in CodeFlow Proposed Changes Add missing IFont methods Make IFont and IPicture tests WinFormsFact to run on STA thread Make HDCHPALETTEHBITMAPHENHMETAFILEHMETAFILEHFONT ints not uints due to sign extension bugs cc weltkante JeremyKuhne Fixes Microsoft Reviewers Open in CodeFlow While updating the PaddingConverter tests in PR I noticed that it contains tests which only succeed on english or similar environments which use comma as separator Some languages use semicolon due to comma being used as decimal separator This leads to falsepositive failing tests on developer machines Failing tests are PaddingConverterConvertFromStringReturnsExpected on eg this input as well as PaddingConverterConvertToStringReturnsExpected Im only selectively running tests locally so Id assume there could be more instances of this problem in other tests Do you think tests should be running under fixed CurrentCulture maybe some sort of fixture Maybe check how corefx is solving this problem when they are testing their convertersparsers Capture the surface of public API Relates to Relates to Please read CONTRIBUTINGmd before submitting a pull request We are in TELLMODE the following section must be completed Customer Impact None capturing the shipped public API surface only Regression No Risk None end TELLMODE Microsoft Reviewers Open in CodeFlow Copy v public API surface reports as baseline Capture the surface of public API Mark new API as shipped Relates to Relates to Please read CONTRIBUTINGmd before submitting a pull request We are in TELLMODE the following section must be completed Customer Impact None capturing the shipped public API surface only Regression No Risk None end TELLMODE Microsoft Reviewers Open in CodeFlow Read NET Core Version Have you experienced this same bug with NET Framework Yes Problem description Describe the current behavior what is wrong or not working as expected Provide as much information as possible including callstack for crashesexceptions screenshots or animations WinForms ToolTip should meet WCAG requirements and satisfy the rule Content on Hover or Focus For more details please see WCAG Criterion Expected behavior ToolTip should become visible when hover over Minimal repro Create WinForms app with some control and ToolTip Add the ToolTip text for the control Run app mouse over the control ToolTip appears after a second Mouse over the ToolTip mouse should be out of the control Observe ToolTip disappears Hello developers please help localization team to answer question from translator In case translator is not sure about contextmeaninglocalizability of string we raise a question Source The store has reached its limit of resources ID File Name ErrorResourcePerStoreLimitReached buildtestsign outputs build loc en src MicrosoftAzureAppConfigurationRp Resources LocalizationStrings Query Would you please clarify the placeholder Is it a numeric value or a resource name Other affected resource ids resx ErrorSkuDowngradeNotAllowed resx ErrorSkuPerSubscriptionLimitReached Hello developers please help localization team to answer question from translator In case translator is not sure about contextmeaninglocalizability of string we raise a question Source Deletes a configuration store event grid filter ID File Name FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription buildtestsign outputs build loc en src MicrosoftAzureAppConfigurationRp Resources LocalizationStrings All the affected reosurces ids resx FriendlyConfigurationStoreEventGridFiltersDeleteOperationDescription resx FriendlyConfigurationStoreEventGridFiltersDeleteOperationName resx FriendlyConfigurationStoreEventGridFiltersReadOperationDescription resx FriendlyConfigurationStoreEventGridFiltersReadOperationName resx FriendlyConfigurationStoreEventGridFiltersResourceType resx FriendlyConfigurationStoreEventGridFiltersWriteOperationDescription resx FriendlyConfigurationStoreEventGridFiltersWriteOperationName NET Core Version current Have you experienced this same bug with NET Framework Yes Problem description Since inception there has always been a thin border or spacing margin present on TabControl objects when its appearance property is set to Normal the default This border usually measures pixel high on the bottom and pixels wide on the right It cannot be hidden or styled and is not the same as the usual BorderStyle property which some controls implement This is a tiny but longstanding appearance bug I have attached a screenshot with the border highlighted in red This was done in MSPAINT as the the border cannot actually be styled TabControlBorderBug Expected behavior The borderspacing margin should not be present The TabControl should fill in these holes with its content Suggestions Fix the underlying painting event to remove the border by filling in the empty space with the selected tab pages content Implement a BorderStyle property which can show or hide this border However it may technically not be considered a border since it only encases the control on the bottom and left Remove the spacing altogether This may cause issues with control positioning on older projects because the size of the control changes slightly Minimal repro Create a NET Core WinForms project and add a TabControl and a few TabPages to the main form Heres some code if you are using a version of Visual Studio which does not have the WinForms designer ready Some color is added for visibility BackColor ColorPink TabControl tc new TabControl tcTabPagesAddtp tcTabPagesAddtp tcTabPagesAddtp TextBox tb new TextBox tbBorderStyle BorderStyleNone tcTabPages BackColor ColorLightBlue ControlsAddtc tcSelectTab Please read CONTRIBUTINGmd before submitting a pull request Fixes Original bug Accessibility TabPage has no keyboard tooltip Proposed changes Add a virtual IsHoveredWithMouse property to change its value in inherited classes Change switchcase implementation in KeyboardToolTipStateMachinecs due to extremely inconvenient use when debugging Implement keyboard tooltips for TabPages Now a Tab and a Page have one tooltip Add a TabControl test app We are in TELLMODE the following section must be completed Customer Impact A user can get a tooltip using a keyboard Regression No Risk Minimal end TELLMODE Screenshots Remove this section if PR does not change UI Before TabPages have no keyboard tooltips A TabPage tab has an incorrect tooltip text TabControl text instead TabPageToolTipText property value A user gets only a TabControl tooltip using a Tabnavigation Before TODO After TabPages have keyboard tooltips TabPage tab has the same tooltip as a page If set a new tooltip or change ToolTipText property value it will affect both tooltips It is a simulation of that a tab tooltip and a page tooltip are one united tooltip Fixed A user can get TabControl tooltip if this TabControl has no pages TODO Test methodology How did you ensure quality CTI Manual UI testing Test environments Remove any that dont apply SDK Version alpha Microsoft Windows Version Mention language UI scaling or anything else that might be relevant Microsoft Reviewers Open in CodeFlow 