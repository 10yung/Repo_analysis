Reproduction involves just getting the latest version from cratesio with a Cargotoml and the crate itself wont compile toml dependencies gfxbackendgl More specifically I was trying to get the example to compile locally as opposed to building from the example repository itself and couldnt get it working The error Compiling gfxbackendgl v error E mismatched types homesimoncargoregistrysrcgithubcom ecc db ec gfxbackendgl srcdevicers configextentwidth as f expected u found f error E mismatched types homesimoncargoregistrysrcgithubcom ecc db ec gfxbackendgl srcdevicers configextentheight as f expected u found f error aborting due to previous errors For more information about this error try rustc explain E error could not compile gfxbackendgl It looks like the version on is months old while the version in the Github master is days old Short info header GFX version gfxhal OS Windows GPU Adapter Vulkan AdapterInfo name IntelR UHD Graphics vendor device devicetype IntegratedGpu Driver version See for additional information Updating to driver version fixes the crash I think you might want to blacklist these old drivers that can cause crashes The original report was filed against pixels which only draws a single textured quad Nothing fancy Short info header GFX version commit f b ca dc f b a a d c OS macOS High SierraMojave GPU NVIDIA GeForce GT M GBIntel UHD Graphics MB When running the colouruniform example on multiple Macbook Pros I noticed a lot of swapchain recreated events triggered by Swapchain is out of date and needs to be recreated error when presenting This happens when I am not resizing the window Also this doesnt happen for the quad example Anyone have any ideas about what might be going on Currently Warden cant be used for reftesting and benchmarking on many platforms because it assumes the support for time queries We need to make it more flexible This will open the road to enable it on Travis for CI headless In order to repro either run make reftests if you are not on Windows or specifically cd srcwarden cargo run bin reftest features gl ci if you are on Windows In DX and DX readonly storage becomes an SRV while writable storage becomes an UAV This means we dont know what exact binding to use at the level of Vulkan pipeline layout What we do in DX is having both SRV and UAV associated with a storage binding This plays well combined descriptors which also happen to have different associated things with them This task is about introducing a similarly generic model for dx The coherent memory is disabled by because its not working correctly It currently tries to resync the whole coherent buffer on every submit which isnt acceptable We need to support a case where the mapping is closed and we dont do any extra work For this to happen we need to track the epochs of coherent memory mapping and ranges being mapped Related to I recently asked in the gfx riot channel about the feasibility of precompiling shaders for each target as an alternative to depending on spirvcross Hi folks Is it possible to optout of using the spirvcross dependency in favour of precompiling the shaders for each target kvark provided some insight Basically there are many factors that affect how the native shader is generated pipeline layout specialization capabilities of the target platform and other things The best we can do if you want to run without spirvcross is prepolulate pipeline caches and ship them add a mode that just returns an error if you are creating a pipeline that is not in the given cache That path would require a few changes mostly getting the pipeline cache to a good state currently DX dont implement it Ive opened this issue so that its easier to trackdiscuss this While Im at it I thought Id add some of our motivation for working around spirvcross as we transition to gfx for nannou graphics Weve had a few people testing our conrodrendy backend on macOS run into some compilation issues that required updating their xcode toolchain to build spirvcross properly Were aiming to remove the need for any of the rd party C deps as they particularly shaderc have been the source of the vast majority of our issues at the nannou repo over the past couple years and working around them are often the biggest blockers in our creative coding workshops So far were managing to avoid shaderc and spirvreflect by precompiling the spirv and specifying layout manually I think spirvcross is that last we want to work around before we should have a theoretically smooth story for building on all platforms The javelin project looks like a very exciting longterm solution to this but I wonder if its worth spending time enabling some featuregated workaround in the meantime Im not sure Id want to ask to sacrifice time that could have been spent on javelin though Short info header GFX version master aaaf c b bbe cf e f OSUbuntu GPUJetson Nano Its great that Vulkan support works ootb I dont know the importance of this error yet I just started working with a physical Jetson Nano TIL the Jetson nano is running the CPU in bit mode aarch armv l I dont get this error with an Nvidia ti on Windows Creating this bug report to track this issue perhaps there is some small extra cleanup that needs to be done on the Nano cargo run bin compute features vulkan Finished dev unoptimized debuginfo targets in s Running homejetsonsrcgfxtargetdebugcompute Times nvdc start nvdcEventThread nvdc nvdcEventThread select failed Bad file descriptor Discovered with my app reproducible with the quad and colouruniform examples In all cases optlevel works Tested configurations all with approx identical behavior gfxbackenddx version latest master OS Windows Windows GPU Nvidia Geforce M Intel HD Graphics AMD Radeon HD Rustc Nightly optlevel I was just wondering what the feasibility of implementing a softwarerenderer target for gfxhal would be and whether or not there are any WIPs out there This would be amazingly useful for testingCIdebugging and perhaps as a reference implementation but I can imagine it might be a massive amount of work