For The naming backupDate seems strongly to indicate that this date will be used as a backup when parsing fails However this is not what happens instead failure returns Invalid Date It seems to me that this data parameter is being used as a reference where needed Eg if a time is missing it can be gotten from the reference if the year is digits and therefore unclear we reference the date passed in to see what year is most likely You can probably see where Im going here To keep from causing confusion with the API Id suggest referenceDate is clearer naming backupDate is never fully used as a backup because theres no case where all of its subvalues would be used I checked out which is where this naming comes from We love DateFns and evangelize it thanks Expands on existing comment in parse to help direct users currently using v parse to the right function in v Removes comment from parseISO as there isnt an equivalent comment in toDate Doesnt make sense to have it in one but not the other Alternatively I can update PR with a comment in both parseISO and toDate if that is preferred Fixes Also fixed formatting and typo in parseJSON documentation The result will be in the local timezone This has caused me some problems I am currently Eastern Standard Time GMT So new Date T Z is Sun Jan GMT or Sun Jan GMT This is not ambiguous The thing that is causing me problems is that the startOfISOWeek has many different answers roughly a week apart depending on the local time zone you are in In the example above the start of the ISO week will be Sun Jan local time if you are at or east of UTC and it will be Sun Jan local time if you are west of of UTC Is this the intent The midnight local time doesnt concern me all that much but the week apart issue is causing me problems This tweet JavaScript dates and times are a bit of a pain I have been using momentjs in the last few years to ease this pain Recently I switched to datefns and I am loving the simplicity yet the effectiveness of the library Totally recommended parseISO v documentation currently states The previous parse implementation was renamed to parseISO parse v documentation currently states Old parse was renamed to toDate Now parse is a new function which parses a string using a provided format I think considering the sentence is to divert people who have previously been using v parse to the correct v equivalent it only needs to exist in docs for parse If the sentence exists on parseISO it should appear on toDate also Additionally I think the sentence would benefit from a more detailed explanation of what happened to the old parse method Would this suffice The v parse implementation was split into two functions If you have a datetimestamp you should use toDate If you have a string in ISO format then you should use parseISO For strings in other formats you should use the new parse implementation which will parse the string using a provided format Hi Im using version and Im importing import ro from datefnslocale Everything works fine in development mode but when I build for production I get these errors export ro imported as i was not found in datefns at HarmonyImportSpecifierDependencygetErrors D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib dependencies HarmonyImportSpecifierDependencyjs at HarmonyImportSpecifierDependencygetErrors D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib dependencies HarmonyImportSpecifierDependencyjs at CompilationreportDependencyErrorsAndWarnings D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib Compilationjs at hooksfinishModulescallAsyncerr D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib Compilationjs at AsyncSeriesHookeval as callAsync eval at create D Work NodeJs nltechup uBid uBidApp nodemodules tapable lib HookCodeFactoryjs anonymous at AsyncSeriesHooklazyCompileHook D Work NodeJs nltechup uBid uBidApp nodemodules tapable lib Hookjs at Compilationfinish D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib Compilationjs at hooksmakecallAsyncerr D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib Compilerjs at done eval at create D Work NodeJs nltechup uBid uBidApp nodemodules tapable lib HookCodeFactoryjs anonymous at err eval at create D Work NodeJs nltechup uBid uBidApp nodemodules tapable lib HookCodeFactoryjs anonymous at addModuleChain D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib Compilationjs at processModuleDependencieserr D Work NodeJs nltechup uBid uBidApp nodemodules webpack lib Compilationjs at processtickCallback internalprocessnexttickjs I took a look inside the nodemodules and I was able to find the localero folder within the datefns For example Indian Standard Timezone IST or minutes the output becomes but as per ISO standard it should be hourOffset should be and minute offset should be but currently hourOffset is set to When using formatRelative and the Spanish locale it shows the Month L and the Milliseconds timestamp T instead of the more commonly used Long localized time p So I get el s bado pasado a la instead of el s bado pasado a la It seems to me that this is not a desired format It also only happens when the hour is Singular lastWeek el eeee pasado a la LT Plural lastWeek el eeee pasado a las p