 Hello I installed a new instance of Otoroshi and took the latest version of dependencies Otoroshi Elastic Search I experienced issues with x version and didnt find compatibility requirement for Elastic Search in the documentation so Im reporting what Ive found With Elastic Search x I tried multiple versions Ill explain below analytics seems to be broken at least partially How to reproduce For Elastic Search I used a docker version sh docker run p e discoverytypesinglenode dockerelasticcoelasticsearchelasticsearch also did tests with first x release docker run p e discoverytypesinglenode dockerelasticcoelasticsearchelasticsearch and latest x version docker run p e discoverytypesinglenode dockerelasticcoelasticsearchelasticsearch For Otoroshi I just run it using the default configuration sh java Dappdomainfoobar jar otoroshijar Note Ive configured etchosts with relevant domains Otoroshi is then configured to use Elastic Search sh curl X PATCH H OtoroshiClientIdadminapiapikeyid H OtoroshiClientSecretadminapiapikeysecret H ContentTypeapplicationjson d op add path elasticWritesConfigs value clusterUri index analytics type analytics op add path elasticReadsConfig value clusterUri index analytics type analytics To check if the analytics works fine I log in Otoroshi in a browser and navigate a little analytic events are pushed to Elastic Search and should be visible in service OTOROSHIADMINAPI Events Latest working version of Elastic Search The lastest version I could use without problems is version I see the events in Otoroshi ui and everything is created in Elastic Search both template otoroshitpl and indices analytics Problems with x version Problems starts with the next major release Failure to create the template When Otoroshi tries to write events in Elastic Search an error is logged error otoroshianalyticswriteselastic Error creating template error rootcause type mapperparsingexception reason Root mapping definition has unsupported parameters default dynamictemplates stringtemplatemappingfielddatatrue typetext matchmappingtypestring match datedetectionfalse propertiescreatedtypedate timestamptypedate envtypekeyword producttypekeyword typetypekeyword serviceIdtypekeyword idtypekeyword servicetypekeyword type mapperparsingexception reason Failed to parse mapping doc Root mapping definition has unsupported parameters default dynamictemplates stringtemplatemappingfielddatatrue typetext matchmappingtypestring match datedetectionfalse propertiescreatedtypedate timestamptypedate envtypekeyword producttypekeyword typetypekeyword serviceIdtypekeyword idtypekeyword servicetypekeyword causedby type mapperparsingexception reason Root mapping definition has unsupported parameters default dynamictemplates stringtemplatemappingfielddatatrue typetext matchmappingtypestring match datedetectionfalse propertiescreatedtypedate timestamptypedate envtypekeyword producttypekeyword typetypekeyword serviceIdtypekeyword idtypekeyword servicetypekeyword status The problem seems to be with a breaking change in templates in Elastic Search which make Otoroshi fail at creating the one it uses Otoroshi template I think the deprecation notice from Elastic Search is described in this page The issue does not seem to be blocking writes in Elastic Search as the index is created in Elastic Search sh curl yellow open analytics Jn plIJQSOWkiiJb EBz g kb kb curl count shardstotal successful skipped failed Nothing in the events report When using a x Elastic Search nothing is shown in events for example service OTOROSHIADMINAPI Events I dont see any error in Otoroshi so Im not completly sure what is the problem Errors are shown in Elastic Search logs but Im not sure its related type server timestamp T level DEBUG component oeabTransportShardBulkAction clustername dockercluster nodename f e a clusteruuid knOD aCRoKs PbcSfbF g nodeid ziDZt DTPO jof fJohw message analytics failed to execute bulk item index index analytics analytics JT aRW BQEEOoDIKFJl source na actual length kb max length kb stacktrace javalangIllegalArgumentException mapper headersOutvalue of different type currenttype date mergedtype text at orgelasticsearchindexmapperFieldMapperdoMergeFieldMapperjava elasticsearch jar at orgelasticsearchindexmapperDateFieldMapperdoMergeDateFieldMapperjava elasticsearch jar at orgelasticsearchindexmapperFieldMappermergeFieldMapperjava elasticsearch jar at orgelasticsearchindexmapperFieldMappermergeFieldMapperjava elasticsearch jar at orgelasticsearchindexmapperDocumentParsercreateDynamicUpdateDocumentParserjava elasticsearch jar at orgelasticsearchindexmapperDocumentParserparseDocumentDocumentParserjava elasticsearch jar at orgelasticsearchindexmapperDocumentMapperparseDocumentMapperjava elasticsearch jar at orgelasticsearchindexshardIndexShardprepareIndexIndexShardjava elasticsearch jar at orgelasticsearchindexshardIndexShardapplyIndexOperationIndexShardjava elasticsearch jar at orgelasticsearchindexshardIndexShardapplyIndexOperationOnPrimaryIndexShardjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionlambdaexecuteIndexRequestOnPrimary TransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionexecuteOnPrimaryWhileHandlingMappingUpdatesTransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionexecuteIndexRequestOnPrimaryTransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionexecuteBulkItemRequestTransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionperformOnPrimaryTransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionperformOnPrimaryTransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionshardOperationOnPrimaryTransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionbulkTransportShardBulkActionshardOperationOnPrimaryTransportShardBulkActionjava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionPrimaryShardReferenceperformTransportReplicationActionjava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionPrimaryShardReferenceperformTransportReplicationActionjava elasticsearch jar at orgelasticsearchactionsupportreplicationReplicationOperationexecuteReplicationOperationjava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionAsyncPrimaryActionrunWithPrimaryShardReferenceTransportReplicationActionjava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionAsyncPrimaryActionlambdadoRun TransportReplicationActionjava elasticsearch jar at orgelasticsearchactionActionListener onResponseActionListenerjava elasticsearch jar at orgelasticsearchindexshardIndexShardOperationPermitsacquireIndexShardOperationPermitsjava elasticsearch jar at orgelasticsearchindexshardIndexShardOperationPermitsacquireIndexShardOperationPermitsjava elasticsearch jar at orgelasticsearchindexshardIndexShardacquirePrimaryOperationPermitIndexShardjava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionacquirePrimaryOperationPermitTransportReplicationActionjava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionAsyncPrimaryActiondoRunTransportReplicationActionjava elasticsearch jar at orgelasticsearchcommonutilconcurrentAbstractRunnablerunAbstractRunnablejava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionPrimaryOperationTransportHandlermessageReceivedTransportReplicationActionjava elasticsearch jar at orgelasticsearchactionsupportreplicationTransportReplicationActionPrimaryOperationTransportHandlermessageReceivedTransportReplicationActionjava elasticsearch jar at orgelasticsearchxpacksecuritytransportSecurityServerTransportInterceptorProfileSecuredRequestHandler doRunSecurityServerTransportInterceptorjava xpacksecurity jar at orgelasticsearchcommonutilconcurrentAbstractRunnablerunAbstractRunnablejava elasticsearch jar at orgelasticsearchxpacksecuritytransportSecurityServerTransportInterceptorProfileSecuredRequestHandlermessageReceivedSecurityServerTransportInterceptorjava xpacksecurity jar at orgelasticsearchtransportRequestHandlerRegistryprocessMessageReceivedRequestHandlerRegistryjava elasticsearch jar at orgelasticsearchtransportTransportService doRunTransportServicejava elasticsearch jar at orgelasticsearchcommonutilconcurrentThreadContextContextPreservingAbstractRunnabledoRunThreadContextjava elasticsearch jar at orgelasticsearchcommonutilconcurrentAbstractRunnablerunAbstractRunnablejava elasticsearch jar at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava I tried to give you all the informations I could Thanks for the great work youre putting in the tool Like in GCP IAP The idea here is to provide a client that will expose a local port for TCP connections This client will wrap every tcp packet in an https connection and send it to Otoroshi Otoroshi will verify if the connection is okay user etc and then unwrap packet and forward it to the target tcp service To do that we need to write a client node js or rust based on can establish a connection with a public service can establish a connection with a private service apikey can establish a connection with a secured service auth modules write the logic to unwrap packets and send it to target service in handlerscala add special event log with identity possible strategies Websocket wrapping Classic GET POST PUT DELETE but we need to handle the loadbalancing issue client side need to check if we can enforce sticky on nginx or haproxy or whatever Stateful and distributed with db and pubsub stuff Http tunnel with CONNECT not sure play can handle it the crappy way using http streams we need to encode the logic in an external module usage by all these strategies support private app session id extraction from places other than cookies header query param config will be set in auth module config Support private apps redirection to urnietfwgoauth oob Support full OAuth lifecyle through private apps TCP forwarding over https will allow to setup a target address and port tls flag get address and or port from headers or query params flag Tasks for MVP x add TCP tunneling flag in descriptor x authorize only routes for wellknownotoroshime and wellknownotoroshitunnel x write basic client x write handler with TCP client based on Websocket tunneling x support multiple token extraction from header and query param x support private app redirection for cli Tasks for stable version Support full OAuth lifecyle through private apps x TCP forwarding flags Docs Sometimes requests like the following fails sh curl databinary itemssjson X POST H Accept applicationjson H ContentType applicationjson u clientIdclientSecret include The request is sent and hangs forever But it doesnt hang with akkahttp client The target is a play app Need to investigate at least for the exchange protocol see Service Descriptor a list of matched domains a list of targets with all nice features coming from an array of consumers ref apikey id group id an array of module configuration a lot of modules will be provided out of the box to match with current otoroshi feature set in ui each module can be added from a select box each module can be configured using a raw json editor cleanup no more env tags no more domain and subdomain Api key no more grouping if not needed meta and tags one or two secrets a consumption plan can handle routing for instance an array of module configuration can be specific to apikeys can override service descriptor config on some points transformer like script to allow or not the access and provide additional informations Public and private apps consumption will use special apikeys can handle quotas management etc Rewritten using akkahttp only Simplified datastore layer Admin api listening on a second port only on with a default service to forward All entities should support multi tenant With a selector and a page to store apikeys and urls Like private apps but fully backed by OIDC OAuth with a response header containing the current accesstoken Lot of things are outdated Also Update U F documentation Document tcp tunneling 