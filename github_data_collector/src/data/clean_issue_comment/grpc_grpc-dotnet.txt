Fixes Is your feature request related to a problem Please describe When there is cancellation during reading from stream two log messages of fail level are emitted This happens for any request that returns stream var cancellationTokenSource new CancellationTokenSource var client new MetadataServiceMetadataServiceClientchannel using var subscription clientWatchChangesnew Empty this is just for demonstration I dont think proto is necessary await foreach var change in subscriptionResponseStreamReadAllAsynccancellationTokenSourceToken ConsoleWriteLinechangeElementsCount fail GrpcNetClientInternalGrpcCall Error reading message SystemThreadingTasksTaskCanceledException The operation was canceled at SystemNetHttpCancellationHelperThrowOperationCanceledExceptionException innerException CancellationToken cancellationToken at SystemNetHttpCancellationHelperThrowIfCancellationRequestedCancellationToken cancellationToken at SystemNetHttpHttp ConnectionHttp StreamGetCancelableWaiterTaskCancellationToken cancellationToken at SystemNetHttpHttp ConnectionHttp StreamReadDataAsyncMemory buffer HttpResponseMessage responseMessage CancellationToken cancellationToken at GrpcNetClientStreamExtensionsReadMessageAsync TResponse Stream responseStream ILogger logger Func deserializer String grpcEncoding Nullable maximumMessageSize Dictionary compressionProviders Boolean singleMessage CancellationToken cancellationToken fail GrpcNetClientInternalGrpcCall Call failed with gRPC error status Status code Cancelled Message gRPC call disposed Describe the solution youd like I believe cancelling should not have fail severity I suggest debug is enough This issue floods my logs on shutdown of the service and I find it annoying Fixing this specific instance is pretty easy and I can PR it I would however like to suggest some more organized effort in graceful handling of cancellation Describe alternatives youve considered GrpcCore does not suffer from this flaw I switched for client to GrpcCore for now This form is for bug reports and feature requests ONLY For general questions and troubleshooting please asklook for answers here Documentation Troubleshooting StackOverflow with grpc tag Issues specific to GrpcCore Ccore server and client or code generation with GrpcTools should be created at What version of gRPC and what language are you using C NET CORE GrpcAspNetCore What operating system Linux Windows and version Server is in Docker ALPINE Client is in Window What runtime compiler are you using eg NET Core SDK version dotnet info NET Core SDK What did you do I create client to invoke different servers with stream requests First client call using var httpClient new HttpClienthttpClientHandler using var channel GrpcChannelForAddress new GrpcChannelOptions HttpClient httpClient var grpcClient new MyGrpcGrpcClientchannel Invoked grpcClient method Second client call using var httpClient new HttpClienthttpClientHandler using var channel GrpcChannelForAddress new GrpcChannelOptions HttpClient httpClient var grpcClient new MyGrpcGrpcClientchannel Invoked grpcClient method What did you expect to see Results from clients What did you see instead StatusStatusCodeInternal Detail the first one is invoked successfully The second one fails with an exception Error starting gRPC call The SSL connection couldnt be established If I comment the first call invocation of the second call is performed successfully If I uncomment the first call invocation of the second call fails Troubleshooting didnt help none of debug parameters showed up during debugging This form is for bug reports and feature requests ONLY For general questions and troubleshooting please asklook for answers here Documentation Troubleshooting StackOverflow with grpc tag Issues specific to GrpcCore Ccore server and client or code generation with GrpcTools should be created at Is your feature request related to a problem Please describe At the moment when running grpc on server side with net it is only possible to use SSL with having the servers private key in PEM format Describe the solution youd like On the grpc core branch they currently add support for using OpenSSL engine See here With this feature it should be possible to use the capi engine to access the Windows cert store The question is will this feature coming into grpcnet Describe alternatives youve considered A clear and concise description of any alternative solutions or features youve considered Additional context Add any other context about the feature request here Need to add copyright headers Otherwise it is complete Ready to review then merge This form is for bug reports and feature requests ONLY For general questions and troubleshooting please asklook for answers here Documentation Troubleshooting StackOverflow with grpc tag Issues specific to GrpcCore Ccore server and client or code generation with GrpcTools should be created at Is your feature request related to a problem Please describe I am working for skywalking net agent and use DiagnosticSource to trace the request path I find the client has DiagnosticSource but server side notI want to use it in server side instead deal with the conflict between grpc server and aspnet core hosting Fixes This allows options to be set via endpoint metadata I havent added any attributes for setting values but it is possible for developers to easily write an attribute to set whatever value on service options they want InterceptorAttribute in this PRs tests is an example of attributes that can be created with this Intergrating with a HttpDelegatingHandler probably wont work because trailers are not available Integration will probably have to happen via interceptor These package names are pretty long I dont think we need to put Server in every serverside package AspNetCore already indicates that it is designed to run on the server in ASPNET Core I think we can shorten them GrpcAspNetCoreServerClientFactory GrpcAspNetCoreClientFactory GrpcAspNetCoreServerReflection GrpcAspNetCoreReflection Fortunately neither of these packages uses the full namespace in any public types All the public types are in other common namespaces MicrosoftExtensionsDependencyInjection MicrosoftAspNetCoreBuilder to make their extension methods easily discoverable We could Introduce new packages with the shortened names with the logic moved to them Publish versions of the existing packages with dependencies on the new packages and type forwarding to them After the next release remove the old packages from source ie stop publishing them Test using TestServer to run gRPC functional tests Blocked waiting for release version of NET Core 