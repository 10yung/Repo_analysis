I had to store the molar gas constant in a place where I had to write the type of the variable for Rust The SI unit is joule per kelvin per mole Heat capacity is joule per kelvin and molar energy is joule per mole so neither will do directly What I finally came up with much trial and error was rust type HeatCapacityPerAmountOfSubstance QuantityISQP P N Z N N Z SIf f However this is not really user friendly Perhaps there could be a macro to help with this Ive come up on several cases where a unit I was looking for was missing for a quantity Most recently I wanted to use liters of ideal gas as an amount of substance unit There doesnt seem to be any way to add any units to a quantity definition later on as the units are all defined through the quantity macro Not sure if is technically feasible as I dont really understand the implementation but something like this would be wonderful rust quantityunitAmountOfSubstance idealgasstpliter STPl STP liter STP liters Suppose we have a length stored in u How could I convert its storage type to f So far it can be done by this unsafe way rust let u length uomsiu Lengthnewmeter let f length uomsif Lengthnewmeteru lengthgetmeter as f It extracts the stored value and thus the underlying SI unit is not checked among new and get My question is that how can we cast the storage type with type safety I had some work on Cartesian to spherical coordinate conversion with uom However it lacks support on inverse trigonometric functions and thus I have to use get as workaround Is it planned to add asin acos atan and atan functions Quantitynew method can panic if conversion into the base unit fails Eg with this code where Information quantity is backed by a u type let value kbytesparseu let info Informationnewinformationkilobytevalue I got a case during the fuzz process where kbytes string contains so code from above can be simplified to this let value u let info u a which panics because it overflows u thread main panicked at attempt to multiply with overflow One possible solution I see is too add the Quantitycheckednewv V OptionSelf similar to checked methods for primitive types which will handle the overflowing problem by returning None It would be nice to document that Quantitynew can panic also Requires Rust for support Bump requirement for v or continuing to wait on feature until v What methods can be const besides new Will const fn make zero constants easier Support references to other units in a units conversion factor via For unit aliases it would be cool if the following were possible bit prefixnone b bit bits shannon bit Sh shannon shannons And for conversions deciban prefixdeci hartley dHart deciban decibans This crate seems to use a mix of the BIPM and NIST names such as meter and liter NIST instead of metre and litre BIPM It simultaneously uses the prefix deca BIPM instead of deka NIST It think it would be better to either use a single consistent system like BIPM for everything or define aliases to support both systems The places where NIST deviates from BIPM are given on page iii of the foreword here I dont know how important this is to you but I just had a test fail in a very weird way Rerunning the build solved the issue with my PR but I figured its probably something youd want to know about