Hi guys An user had a crash this morning samsung Galaxy S Android Fatal Exception javalangNoSuchMethodError No direct method B in class B or its super classes declaration of byte appears in generated class orgjodatimeUTCDateTimeZoneinit orgjodatimeUTCDateTimeZoneinit UTCDateTimeZonejava orgjodatimeUTCDateTimeZoneclinit UTCDateTimeZonejava orgjodatimeDateTimeZoneclinit DateTimeZonejava netdanlewandroidjodaResourceZoneInfoProviderloadZoneInfoMap ResourceZoneInfoProviderjava netdanlewandroidjodaResourceZoneInfoProviderinit ResourceZoneInfoProviderjava netdanlewandroidjodaJodaTimeAndroidinit JodaTimeAndroidjava comxxxxMyApplicationsetupApplication MyApplicationjava In my proguard file I have dontwarn orgjodaconvert dontwarn orgjodatime keep class orgjodatime keep interface orgjodatime Thank you very much for your great work The program signature will die how to solve Hi currently getRelativeTimeSpanString method returns relative timespan to DateTimenow What do you think of extending it where you could get getRelativeTimeSpanString relative to some another DateTime Thank you Reproduction steps git clone repo Run sample configuration What went wrong Circular dependency between the following tasks samplecheckManifestChangesDebug sampleinstantRunMainApkResourcesDebug sampletransformClassesAndDexWithShrinkResForDebug sampletransformDexArchiveWithDexMergerForDebug samplepreColdswapDebug sampleincrementalDebugTasks sampletransformClassesAndClassesEnhancedWithInstantReloadDexForDebug sampletransformClassesWithInstantRunForDebug samplecheckManifestChangesDebug sampletransformClassesWithInstantRunForDebug sampletransformClassesWithDexBuilderForDebug samplepreColdswapDebug sampletransformClassesWithInstantRunForDebug details omitted listed previously Hi This is the stacktrace without any proguard rules Caused by javalangRuntimeException Could not read ZoneInfoMap You are probably using Proguard wrong at netdanlewandroidjodaaaJodaTimeAndroidjava Failed to retrieve identifier typeclass netdanlewandroidjodaba namejodazoneinfomap javalangNoSuchFieldException jodazoneinfomap at javalangClassgetFieldClassjava at netdanlewandroidjodacaResUtilsjava at netdanlewandroidjodadaResourceZoneInfoProviderjava at netdanlewandroidjodadinitResourceZoneInfoProviderjava at netdanlewandroidjodaaaJodaTimeAndroidjava Using these rules solve the problem but I wonder what do you recommend dontwarn orgjodaconvert dontwarn orgjodatime keep class orgjodatime keep interface orgjodatime keep class netdanlew Hi I think Im facing a timeZone bug It only happens when I first run my app Here is how I reproduce the bug I reset my android tablet to factory default At bootup it comes with an older version of my app installed as a systemapp which starts automatically I install a newer version through adb shell I start the app and display date and time which is wrong because of the timeZone UTC instead of EuropeAmsterdam I kill the app and start it up again Now it displays the right date time with the EuropeAmsterdam timeZone TimeZone is correct when I use javautils TimeZone DateTimeZonegetDefault UTC TimeZonegetDefault EuropeAmsterdam Thank your work and for helping StackOverflow question Affected file For quantityone number is hardcoded This is wrong because for example number matches quantityone in Russian language so instead of minute ago we get minute ago I used English text just for example Because references itself so it ends up getting packaged The default formats provided through JodaTime are not entirely compatible with Android A simple demonstration is to use the DateTimeFormatterfullDateTime method in your code and have the phone set to use Suomi as language which will fail because the android version of SimpleDateFormat includes c for standalone day of week which is not supported by JodaTime 