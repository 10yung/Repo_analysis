I cannot compile my code using the NEOKHZ argument for the Digispark It works only with the NEOKHZ argument It works perfect fine with the NEOKHZ argument when I try to compile it for my Arduino Uno Im running the latest Arduino IDE version on Windows and have the latest version of the NeoPixel I also wrote a forum post earlier on the Arduino forum since I thought it would be my failure but it seems something is wrong Having issues similar to this clear doesnt appear to clear the buffer but only the local state of the pixels I seems like this was fixed for the Seesaw project but not the Neopixel cpp I found this to be a problem when I have an interrupt pin setup to switch routines such as Rainbow or Chase etc It switches routines but will continue the previous routine afterwards until it has finish the remainder of the buffer Having clear in the loop doesnt work as expected This change adds initial Apollo support The majority of the functionality is contained in the new apollo cpp file but some minor modifications were made to AdafruitNeoPixelcpp in the setPin function support for Apollo fast GPIO configuration Function prototypes were added to AdafruitNeoPixelh Changes to existing code have been wrapped in a AMPARTAPOLLO definition check so existing platforms should not be affected I would note that this is a very initial implementation using the noop timing hack I would prefer to have a more robust timing implementation interrupts DMA etc We should be able to put this out there for folks to use in the short term and transparently swap out the timing implementation when a better solution is in place This code was tested using a SparkFun RedBoard Artemis Nano with the simple and strandtest example apps Would be nice to have NeoPixel support for SparkFun Artemis based boards that use the Ambiq Apollo I have Neopixel enabled in Marlin as follows Support for Adafruit Neopixel LED driver define NEOPIXELLED if ENABLEDNEOPIXELLED define NEOPIXELTYPE NEOGRBW NEOGRBW NEOGRB fourthree channel driver type defined in AdafruitNeoPixelh define NEOPIXELPIN LED driving pin on motherboard D EXP on Printrboard PC EXP on Rumba define NEOPIXELPIXELS Number of LEDs in the strip define NEOPIXELISSEQUENTIAL Sequential display for temperature change LED by LED Disable to change all LEDs at once define NEOPIXELBRIGHTNESS Initial brightness define NEOPIXELSTARTUPTEST Cycle through colors at startup endif if ENABLEDBLINKM ENABLEDRGBLED ENABLEDRGBWLED ENABLEDPCA ENABLEDNEOPIXELLED define PRINTEREVENTLEDS endif When I use only one LED in a strip everything works perfectly Color is changing when warming up and can be controlled with Gcode M BUT when I have LEDs in a row only first LED is controllable the other two have other colors If I send M R the first goes RED second goes BLUE and third goes OFF If i send M B the first goes BLUE second goes OFF and third goes GREEN If I send M U the first goes GREEN second goes RED and third goes BLUE How can I have all three with the same color and change as the first one I have imported Adafruit Neopixel in the library and connected it to SERVO on my MKS Gen L board It is connected to SERVOPIN which corresponds to SERVO in pinsh This PR implements empirically derived timing values for the DUE SAM X E board If FCPU is MHz then the empirically derived values are used If different then the calculated values are used This takes care of a problem I was seeing with a DUE RAMPSFDV Fysetc MINIPANEL rev system The neopixel portion of the display was not working due to missing pulses and pulses of nS the resolution of my logic analyzer In my application I would like to highlight just one pixel by having it blink between full brightness and halfbrightness My assumption was that if I used all even RGBW values for that pixels color I could get the pixel color to divide all colors by then save the dimmer pixel color However even when using even color values Im getting leakage into adjacent colors ie a fully bright green pixel blinks to cyan a fully red pixel blinks to yellow It appears the getPixelColor does NOT return the previously set pixel color as indicated by the method description but instead scales it by brightness This means simply fetching the color through getPixelColor and then resetting it through setPixelColor changes the pixel color depending on the brightness setting The workaround that I found worked was to set brightness to fetch the color reset brightness back to the original value then set the pixel color to color value stripsetBrightness uint t dimcolorstripgetPixelColorblinkingindex stripsetBrightnessoriginalbrightness ifmillis x stripsetPixelColorblinkingindexdimcolor Im attempting to compile Marlin Firmware on my MKS Sbase board which is based on LPC I am unable to turn on Neopixel support because AdafruitNeoPixel which doesnt have support built for LPC platform Hi For the holidays I was working on a WS LED strip meter LEDs per WS chip together with a Wemos D mini ESP as a controller The Neopixel library offers the NEOKHZ option to drive WS type strips since these dont use a KHz pulse freq like the WS x do For some reason however the NEOKHZ option is ignored when I use a board based on the ESP mcu Ive tried to run a simple script just turn on led based on serial input with an Arduino UNO and the LED strip performs as expected Using the same exact code on the Wemos got no response Im aware the Wemos has a v output voltage so I used a logic level converter to turn it into v Minimal test script Based on NeoPixel Ring simple sketch c Shae Erisson released under the GPLv license to match the rest of the AdaFruit NeoPixel library include AdafruitNeoPixelh define PIN D For the Wemos D mini define PIN For the Arduino UNO How many NeoPixels are attached to the Arduino define NUMPIXELS define brightness When we setup the NeoPixel library we tell it how many pixels and which pin to use to send signals Note that for older NeoPixel strips you might need to change the third parametersee the strandtest example for more information on possible values AdafruitNeoPixel pixels AdafruitNeoPixelNUMPIXELS PIN NEOGRB NEOKHZ void setup pinModePIN OUTPUT Serialbegin pixelsbegin This initializes the NeoPixel library pixelssetPixelColor pixelsColor pixelsshow void loop Tigger on serial input to synchronize UNO and Wemos sending the same Neopixel command if Serialavailable Serialprintln BIN pixelssetPixelColor pixelsColorbrightnessbrightnessbrightness pixelsshow Serialread Read value to reset Serialavailable delay Debounce delay I started debugging and after quite some time found the following difference in signal output img width altnormal khz src After zooming in a little bit you can clearly see a difference in the length of bit between the UNO and the Wemos Arduino UNO img width altnormal khzcloseupuno src Wemos img width altnormal khzcloseupwemos src The UNO uses the expected frequency of KHz but the Wemos is using the KHz frequency After some digging around I found the following section in esp c that is related to the timing of these signals It should change the frequencies based on a boolean named is KHz define CYCLES T H FCPU us define CYCLES T H FCPU us define CYCLES FCPU us per bit define CYCLES T H FCPU uS define CYCLES T H FCPU us define CYCLES FCPU us per bit uint t p end pix mask uint t t time time period c startTime pinMask pinMask BVpin p pixels end p numBytes pix p mask x startTime ifdef NEOKHZ ifis KHz endif time CYCLES T H time CYCLES T H period CYCLES ifdef NEOKHZ else KHz bitstream time CYCLES T H time CYCLES T H period CYCLES endif However it does not If I force the use of the KHz timing scheme by changing the KHz to match the KHz ones like this define CYCLES T H FCPU define CYCLES T H FCPU define CYCLES FCPU define CYCLES T H FCPU define CYCLES T H FCPU define CYCLES FCPU It does work and I get the following output on my logic analyser Overview img width altforced khz src Arduio UNO img width altforced khzcloseupuno src Wemos img width altforced khzcloseupwemos src Now the signals seem to match in terms of frequency Both on KHz I have the feeling it has to do with this is KHz boolean that is not being set correctly somewhere But I cannot seem to find if the problem lies in the esp c itself or in AdafruitNeoPixelcpp that calls it Does anyone know where to look for the cause Or am I missing something Arduino board Wemos D Mini ESP Arduino UNO genuine Arduino IDE version Neopixel library version The changes allows the using of Adafruit Neopixel with Infineon XMC Parts of the code modified In AdafruitNeoPixelcpp A new part elif defined XMC has been added in void AdafruitNeoPixelshowvoid In READMEmd The Infineon microcontrollers supported has been included In the examples include sbrkh has been added The file sbrkh had been included