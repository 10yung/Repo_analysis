I needed to pass an interner to the lexer to avoid calling toowned for idents but there doesnt seem to be a way to add it to the signature without making the proc macro panic As the grammar gets large compile times grow a lot A grammar similar to C but still a lot simpler takes about or minutes to compile and it gets recompiled on any change to the project I had to put it in a separate crate to avoid it Expressions with many precedence levels seem to be the main cause but even without them it takes way too long Not sure if related but doc tests also seem to take ages when using plex and a large grammar error recovery is important for practical parser is there any plan that plex will support it for example when we are failed to parse a statement we skip remaining tokens until we met a semicolon program vec program mut z statement z z pushz z statement expression z Semicolon StatementExpressionz Semicolon Statement StatementError Thanks for plex Would it be feasible to support multiple entry points that reuse the same grammar As an example I have something like statement Statement expression e TokenSemicolon ExprStatemente other variants expression Expr some variants and want to expose parser entry points for both Expr and Statement This might be possible via a single entry point that returns an enum but Im wondering if theres a cleaner way Hey i wanted to ask if its possible to add a new optional Program to the parser so you can for example in php or html open a new context I am working on a language using Plex and would like to remove parentheses from function calls From what I can tell according to this question doing this would require backtracing to allow patterns like this in the parser Identi explist e if is not defined backandchooseanotherrule Would it be possible to add this or is there better way to do this that Plex is capable of Ps Im new to using parsers so I may have no idea what Im actually talking about Sorry if this doesnt make sense Would it be possible to add support for an optional token in the parser Im trying to implement a parser that allows me to parse a language with an optional semicolon If this is already implemented it probably should be documented In some languages identifiers and keywords are caseinsensitive Some examples are Ada VHDL and SQL Also literals in other languages like C and C can be in parts caseinsensitive For these cases it would be helpful to mark regexes to match caseinsensitive In flex regexes that are caseinsensitive are prefixed with i Automated testing is great It would probably be a good idea to write some Hi Im not very familiar with Rust but very excited by your library Only my problem is I decided to keep on latest stable Rust Is it very difficult to support stable Rust at least lexer part 