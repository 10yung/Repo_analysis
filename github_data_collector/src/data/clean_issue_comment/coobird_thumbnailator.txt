 Expected behavior The error will not happen Actual behavior Got an OOM error Steps to reproduce the behavior When I resize this image the OOM error will happen This image is a jpg file without the extension name java public static final void mainString args throws IOException String file Desktop d b d b a b eeb c ae String format jpg int width height FileInputStream fileInputStream new FileInputStreamfile ByteArrayOutputStream byteArrayOutputStream new ByteArrayOutputStream ThumbnailsoffileInputStream sizewidth height outputFormatformatoutputQuality toOutputStreambyteArrayOutputStream this is the ImageDownloadControllerjava in the trace info below SystemoutprintfOutputStream length byteArrayOutputStreamsize And I got this text Exception in thread main javalangOutOfMemoryError Java heap space at javaawtimageDataBufferByteinitDataBufferBytejava at javaawtimageComponentSampleModelcreateDataBufferComponentSampleModeljava at javaawtimageRastercreateWritableRasterRasterjava at javaximageioImageTypeSpecifiercreateBufferedImageImageTypeSpecifierjava at javaximageioImageReadergetDestinationImageReaderjava at comsunimageiopluginsjpegJPEGImageReaderreadInternalJPEGImageReaderjava at comsunimageiopluginsjpegJPEGImageReaderreadJPEGImageReaderjava at comtwelvemonkeysimageiopluginsjpegJPEGImageReaderreadJPEGImageReaderjava at netcoobirdthumbnailatortasksioInputStreamImageSourcereadUnknown Source at netcoobirdthumbnailatortasksSourceSinkThumbnailTaskreadUnknown Source at netcoobirdthumbnailatorThumbnailatorcreateThumbnailUnknown Source at netcoobirdthumbnailatorThumbnailsBuildertoOutputStreamUnknown Source at comenniucloudservicessfsgatewaycontrollerImageDownloadControllermainImageDownloadControllerjava Environment Please provide vendor and version information for the Operating System JDK and Thumbnailator Please feel free to add any other information which may be pertinent OS vendor and version macos catalina JDK vendor and version java version JavaTM SE Runtime Environment build b Java HotSpotTM Bit Server VM build b mixed mode Thumbnailator version Expected behavior Please describe what you are expecting the library to perform Actual behavior Please describe the actual behavior you are experiencing including stack trace and other information which would help diagnose the issue netcoobirdthumbnailatortasksUnsupportedFormatException No suitable ImageReader found for C Users LKhore Pictures Screenshots desktopini at netcoobirdthumbnailatortasksioFileImageSourcereadUnknown Source at netcoobirdthumbnailatortasksSourceSinkThumbnailTaskreadUnknown Source at netcoobirdthumbnailatorThumbnailatorcreateThumbnailUnknown Source at netcoobirdthumbnailatorThumbnailsBuilderasFilesUnknown SourceDisconnected from the target VM address transport socket at netcoobirdthumbnailatorThumbnailsBuildertoFilesUnknown Source at netcoobirdthumbnailatorThumbnailsBuildertoFilesUnknown Source at ThumbmainThumbjava Steps to reproduce the behavior Please enter stepbystep instructions for reproducing the actual behavior Including code can be helpful in diagnosing issue but please keep the code to a minimal that will reproduce the behavior Environment Please provide vendor and version information for the Operating System JDK and Thumbnailator Please feel free to add any other information which may be pertinent OS vendor and version Windows JDK vendor and version Thumbnailator version Expected behavior Resize an image to a smaller size without greatly affecting the visual quality of it My source image is this gitlogo and when I run it through Thumbnailator using java Thumbnailsofimage size keepAspectRatiotrue outputFormatpng toFilefile I expect it to come out as a x PNG image retaining its transparent background the file is smaller and there may be some artifacting but no major aberrations Actual behavior The output image is this logo thumbnail The logo has lost its transparent background for a black one and there are horrible red vertical scanlines running through the orange part of the logo For some reason this issue only happens on this image and not the other images I have ran through Thumbnailator The only difference is that this source image is an bit png instead of a bit png Steps to reproduce the behavior Run the above sample image through the provided Thumbnailator code Environment OS vendor and version Windows version JDK vendor and version Oracle JDK LTS Thumbnailator version To respect the wish not to create pull requests but an issue here it comes If an error occurs while reading the local stream in the FileImageSource the created stream will not be closed so the src file cannot be deleted The error can be reproduced with this test Test public void brokenimageshouldbedeletableafterread throws IOException File sourceFile FilecreateTempFiletempfile thumbnailatortestjpg some broken image input InputStream is new InputStream private long size private Random r new Random int jpg new int xFF xD xFF xE private int i Override public int read ifsize return size i ifi jpglength return rnextInt return jpg i FileOutputStream os new FileOutputStreamsourceFile byte buffer new byte int bytesRead read from is to buffer whilebytesRead isreadbuffer oswritebuffer bytesRead isclose flush OutputStream to write any buffered data to file osflush osclose FileImageSource source new FileImageSourcesourceFile try sourceread catch Exception e i know its broken try to delete the broken file sourceFiledelete assertFalsesourceFileexists With a try finally block this can be solved possibly quite fast Id like to create a slow zoom to center of photo BufferedImage sequence and I think this library can do it without using external hacks but when I tried it came out all janky val scaled CanvasmaxReswidth maxResheight PositionsCENTERapply Thumbnailsoffile sizemaxReswidth maxResheight asBufferedImage for i in until maxFrames not proportional val trimmed scaledgetSubimagei i scaledwidth i scaledheight i var t ThumbnailsoftrimmedsizemaxReswidth maxResheight if orientation t trotateorientationtoDouble yieldtasBufferedImage Is there a better way to do the Canvas trim and a proportional edgetrim as the frames progress Ive got the two Thumbnailsof which smells wrong and I know the i doesnt respect the image ratio so ya But Im hopeful because I just found out about Canvas Not sure how to incorporate it into ThumbnailBuilder chain yet but still looking I have an Image in java and I want to use the Thumbnailator class to resize it But it seems that the Thumbnailator class does not accept Images and has no method for converting Images to BufferedImages which are accepted instead I thought that I probably am missing something because this seems like an odd predicament that many people would likely find I could write my own method to convert it to a BufferedImage but I first thought to ask if there is a way the Thumbnailator can do so Thank you very much Hello friends Before Compression the backgrounds color is transparent After Compression the backgrounds color is black The pictures format is png Thanks for yours answers Expected behavior Please describe what you are expecting the library to perform Actual behavior Please describe the actual behavior you are experiencing including stack trace and other information which would help diagnose the issue Steps to reproduce the behavior Please enter stepbystep instructions for reproducing the actual behavior Including code can be helpful in diagnosing issue but please keep the code to a minimal that will reproduce the behavior Environment Please provide vendor and version information for the Operating System JDK and Thumbnailator Please feel free to add any other information which may be pertinent OS vendor and version JDK vendor and version Thumbnailator version Expected behavior When setting useExifOrientation flag to true one can expect that Image orientation is handled properly no matter what Image source we use InputStream BufferedImage etc Actual behavior Image orientation from EXIF metadata is respected in other cases After checking the source code it seems that BufferedImage NOK FileImageSource OK InputStreamImageSource OK URLImageSource OK Steps to reproduce the behavior Test cases reproducing the issue For the moment we have implemented workaround in our application but we need to implement proper solution ideally by providing Pull request to this library Environment Should be reproducible on any environment implementation problem OS vendor and version Windows Linux MacOS JDK vendor and version Oracle OpenJDK Thumbnailator version Expected behavior Please describe what you are expecting the library to perform I want to generate the thumbnail of one PNG file Actual behavior Please describe the actual behavior you are experiencing including stack trace and other information which would help diagnose the issue The source png file is this The generated thumbnail is this thumbnail The color is wrong it is supposed to be red Steps to reproduce the behavior Please enter stepbystep instructions for reproducing the actual behavior Including code can be helpful in diagnosing issue but please keep the code to a minimal that will reproduce the behavior I checked the PNG file x bit palette noninterlaced I think it is due to bit palette which is not supported After I convert to PNG or PNG no issue Environment Please provide vendor and version information for the Operating System JDK and Thumbnailator Please feel free to add any other information which may be pertinent OS vendor and version MacOSUbuntu JDK vendor and version Java SDK Thumbnailator version 