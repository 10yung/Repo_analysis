 Im on linux and I also had the problem described in but after loading from the game directory I got it to work But now only a fraction of the screen is used abasabasThinkPadR Downloadshematitemaster cargo run release NewWorld Finished release optimized targets in s Running targetreleasehematite NewWorld Opening homeabasminecraftversions jar File homeabasminecraftversions jar contains files Extracted files thread main panicked at called Resultunwrap on an Err value Os code kind NotFound message No such file or directory libcoreresultrs note Run with RUSTBACKTRACE for a backtrace Idea is to support for custom advancements MC I am familiar with game engines in C however I ahve not released any game yet I would like to develop hematite if it is possible however I dont know anything about the game the world file structure If you publish some documentation for developers about how everything works here in the hematite it would be very nice everyone would be able to continue working on it Hi I wanted to try hematite just for fun but I am unable to start any world with it I installed version for Linux because the program seams to look for it The error is the following Opening homeUSERminecraftversions jar File homeUSERminecraftversions jar contains files Extracted files thread main panicked at called Resultunwrap on an Err value Error repr Os code message No such file or directory srclibcoreresultrs note Run with RUSTBACKTRACE for a backtrace I placed a copy of the world in the hematite folder but that doesnt do anything The content with RUSTBACKTRACE is Finished release optimized targets in secs Running targetreleasehematite New World Opening homeUSERminecraftversions jar File homeUSERminecraftversions jar contains files Extracted files thread main panicked at called Resultunwrap on an Err value Error repr Os code message No such file or directory srclibcoreresultrs stack backtrace x bd a stdsysimpbacktracetracingimpwriteh bce ff c at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdsysunixbacktracetracinggccsrs x bd f stdpanickingdefaulthookclosureh bacac b ed at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanickingrs x bd stdpanickingdefaulthookh da ece at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanickingrs x bd c stdpanickingrustpanicwithhookh e a a at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanickingrs x bd ac stdpanickingbeginpanichbb be e df at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanickingrs x bd e stdpanickingbeginpanicfmth cea bce ab at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanickingrs x bd rustbeginunwind at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanickingrs x bd d d corepanickingpanicfmthcfbb eeb f f at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibcorepanickingrs x bd dc coreresultunwrapfailedh a fc f f x bd d a hematitemainh bcaf c x bd dfa rustmaybecatchpanic at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibpanicunwindlibrs x bd stdrtlangstarthd ce fc at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanickingrs at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdpanicrs at buildslaverustbuildbotslavestabledistrustclinuxbuildobjsrclibstdrtrs x f ebe libcstartmain x bd a start x unknown Notes I am on ArchLinux and I use Rustup with the nightlybuild If you need more information Ill try to provide them siebencorgie I noticed a performance regression with the new glutin code while running on Linux Im getting numbers that look like this New Windows fps New Linux fps Old Linux fps Same hardware for all of them Windows x Ubuntu x with Nvidia drivers Could be an issue with glutin maybe It would be nice to have automated and repeatable benchmarks in hematite I see two ways of accomplishing this and it might be nice to have both Abstract the render loop into functions and then call these functions inside some standard bench tests This method is limited by the simplicity of the Bencher API but it can still be useful Have a benchmark mode similar to many games that records statistics while the camera goes through a predefined path This issue was automatically generated Feel free to close without ceremony if you do not agree with relicensing or if it is not possible for other reasons Respond to cmr with any questions or concerns or pop over to rustofftopic on IRC to discuss Youre receiving this because someone perhaps the project maintainer published a cratesio package with the license as MIT xor Apache and the repository field pointing here TLDR the Rust ecosystem is largely Apache Being available under that license is good for interoperation The MIT license as an addon can be nice for GPLv projects to use your code Why The MIT license requires reproducing countless copies of the same copyright header with different names in the copyright field for every MIT library in use The Apache license does not have this drawback However this is not the primary motivation for me creating these issues The Apache license also has protections from patent trolls and an explicit contribution licensing clause However the Apache license is incompatible with GPLv This is why Rust is duallicensed as MITApache the primary license being Apache MIT only for GPLv compat and doing so would be wise for this project This also makes this crate suitable for inclusion and unrestricted sharing in the Rust standard distribution and other projects using dual MITApache such as my personal ulterior motive the Robigalia project Some ask Does this really apply to binary redistributions Does MIT really require reproducing the whole thing Im not a lawyer and I cant give legal advice but some Google Android apps include open source attributions using this interpretation Others also agree with it But again the copyright notice redistribution is not the primary motivation for the duallicensing Its stronger protections to licensees and better interoperation with the wider Rust ecosystem How To do this get explicit approval from each contributor of copyrightable work as not all contributions qualify for copyright due to not being a creative work eg a typo fix and then add the following to your README License Licensed under either of Apache License Version LICENSEAPACHE LICENSEAPACHE or MIT license LICENSEMIT LICENSEMIT or at your option Contribution Unless you explicitly state otherwise any contribution intentionally submitted for inclusion in the work by you as defined in the Apache license shall be dual licensed as above without any additional terms or conditions and in your license headers if you have them use the following boilerplate based on that used in Rust Copyright hematite Developers Licensed under the Apache License Version LICENSEAPACHE or or the MIT license LICENSEMIT or at your option This file may not be copied modified or distributed except according to those terms Its commonly asked whether license headers are required Im not comfortable making an official recommendation either way but the Apache license recommends it in their appendix on how to use the license Be sure to add the relevant LICENSEMITAPACHE files You can copy these from the Rust repo for a plaintext version And dont forget to update the license metadata in your Cargotoml to license MIT OR Apache Ill be going through projects which agree to be relicensed and have approval by the necessary contributors and doing this changes so feel free to leave the heavy lifting to me Contributor checkoff To agree to relicensing comment with I license past and future contributions under the dual MITApache license allowing licensees to chose either at their option Or if youre a contributor you can check the box in this repo next to your name My scripts will pick this exact phrase up and check your checkbox but Ill come through and manually review this issue later as well x AerialX x DaemonLee Potpourri x RichardlL x ahtn x bvssvni x carlosmn x cmr x drhaynes x eddyb x fenhl x homeworkprod x indiv x kvark x leonkunert x limeburst x lucidd x mattico x meatcompute x mitsuhiko x saml x steveklabnik x stjahns x toqueteos I know in a previous issue said how the map file reading is unnecessary for the client but while it is still in testing its obviously still needed What I mean is when launched it with hematite Worldname hematite would copy and loadmanipulate your world from minecraftdirsavesWorldname automatically as it does with the jar It would also be convenient if when called with no arguments It would list your save files Currently it is not possible to start Hematite without having a copy of Minecraft around What about shipping freely licensed replacement assets that can be used I can find or make some if needed Additionally we might take some from Minetest but it doesnt look that Minecrafty 