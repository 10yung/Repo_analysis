 Thank you very much for your pull request If your PR is the addition of a new operator please make sure all these boxes are ticked with an x Add the operator to Rx It must have a spects tests file covering the canonical corner cases with marble diagram tests If possible write a asDiagram test case too for PNG diagram generation purposes The spec file should have a type definition test at the end of the spec to verify type definition for various use cases The operator must be documented in JSDoc style in the implementation file including also the PNG marble diagram image The operator should be listed in docoperatorsmd in a category of operators The operator should also be documented See Documentation Guidelines CONTRIBUTINGmd It should also be inserted in the operator decision tree file docdecisiontreewidgettreeyml You may need to update MIGRATIONmd if the operator differs from the corresponding one in RxJS v Description This PR enables the currently disabled suboptions under TypeScripts strict option Its based on the branch from the PR Ill rebase this once that PR is merged The changes in this PR are almost entirely typerelated There were only a few places in which I had to add if statements so that calls to wrapped operators were mapped to the appropriate signatures There are a lot of files but the changes are small so hopefully reviewing this will not be too painful In any case these arent changes that can be done in a piecemeal fashion These changes are not ideal as that was not my aim I was primarily concerned with getting the strict option enabled without having to add additional logic undefined or null guards etc Changes to make code more easily typechecked can be made when things are refactoredreimplemented in v Related issue if exists Thank you very much for your pull request If your PR is the addition of a new operator please make sure all these boxes are ticked with an x Add the operator to Rx It must have a spects tests file covering the canonical corner cases with marble diagram tests If possible write a asDiagram test case too for PNG diagram generation purposes The spec file should have a type definition test at the end of the spec to verify type definition for various use cases The operator must be documented in JSDoc style in the implementation file including also the PNG marble diagram image The operator should be listed in docoperatorsmd in a category of operators The operator should also be documented See Documentation Guidelines CONTRIBUTINGmd It should also be inserted in the operator decision tree file docdecisiontreewidgettreeyml You may need to update MIGRATIONmd if the operator differs from the corresponding one in RxJS v Description This PR refactors the fix in so that it can be applied to all operators or at least to those that need unsubscription to be chained The problem is outlined in the linked issue but AFAICT the problem is not specific to the finalize operator For example the buffer operators subscriber adds a subscription that depends upon unsubscription being chained correctly And windowTime adds scheduled actions IMO all operator subscriptions made within an operators call method should be made using subscribeAndChainOperator ATM this PRs branch is based on so it includes that PRs commits The last two commits are the changes introduced in this PR Related issue if exists Thank you very much for your pull request If your PR is the addition of a new operator please make sure all these boxes are ticked with an x Add the operator to Rx It must have a spects tests file covering the canonical corner cases with marble diagram tests If possible write a asDiagram test case too for PNG diagram generation purposes The spec file should have a type definition test at the end of the spec to verify type definition for various use cases The operator must be documented in JSDoc style in the implementation file including also the PNG marble diagram image The operator should be listed in docoperatorsmd in a category of operators The operator should also be documented See Documentation Guidelines CONTRIBUTINGmd It should also be inserted in the operator decision tree file docdecisiontreewidgettreeyml You may need to update MIGRATIONmd if the operator differs from the corresponding one in RxJS v Description This PR tweaks the options in the root and dtslint tsconfigjson files so that the latest builtin types are included via the lib option and so that the default target is no longer the TypeScript default of es The problem with the latter is that IDEs pick up the root tsconfig and if the target is inferred to be es errors like this are shown img width alterror src Related issue if exists None Thank you very much for your pull request If your PR is the addition of a new operator please make sure all these boxes are ticked with an x Add the operator to Rx It must have a spects tests file covering the canonical corner cases with marble diagram tests If possible write a asDiagram test case too for PNG diagram generation purposes The spec file should have a type definition test at the end of the spec to verify type definition for various use cases The operator must be documented in JSDoc style in the implementation file including also the PNG marble diagram image The operator should be listed in docoperatorsmd in a category of operators The operator should also be documented See Documentation Guidelines CONTRIBUTINGmd It should also be inserted in the operator decision tree file docdecisiontreewidgettreeyml You may need to update MIGRATIONmd if the operator differs from the corresponding one in RxJS v Description This PR makes the following changes It changes the root tsconfigjson so that the strict option is enabled and the strict suboptions that are notyetsupported are explicitly disabled It changes the code so that no errors are effected when the strictBindCallApply option is no longer disabled Related issue if exists Bug Report Current Behavior If you change rxjs compiler options to include the recommended strictBindCallApply ie get closer to work with just strict rxjs fails to compile See the error messages included in the patch below for a possible fix Reproduction Turn on strictBindCallApply Expected behavior Compiles Possible Solution rxjssrcinternalobservablefromEventts newrxjssrcinternalobservablefromEventts oldrxjssrcinternalobservablefromEventts newrxjssrcinternalobservablefromEventts return new ObservableTsubscriber function handlere T if argumentslength subscribernextArrayprototypeslicecallarguments TODO Argument of type any is not assignable to parameter of type T subscribernext Arrayprototypeslicecallarguments as any else subscribernexte rxjssrcinternaloperatorscombineLatestts newrxjssrcinternaloperatorscombineLatestts oldrxjssrcinternaloperatorscombineLatestts newrxjssrcinternaloperatorscombineLatestts observables anyobservables slice return source ObservableT sourceliftcallfrom source observables new CombineLatestOperatorproject TODO Type source ObservableT Observableunknown is not assignable to type OperatorFunctionT R return source ObservableT sourceliftcall from source observables new CombineLatestOperatorproject as any rxjssrcinternaloperatorsconcatts newrxjssrcinternaloperatorsconcatts oldrxjssrcinternaloperatorsconcatts newrxjssrcinternaloperatorsconcatts deprecated remove in v Use link concatWith export function concatT Robservables ArrayObservableInputany SchedulerLike OperatorFunctionT R return source ObservableT sourceliftcallconcatStaticsource observables as any TODO Expected arguments but got return source ObservableT sourceliftcall as any concatStaticsource observables as any rxjssrcinternaloperatorsconcatWithts newrxjssrcinternaloperatorsconcatWithts oldrxjssrcinternaloperatorsconcatWithts newrxjssrcinternaloperatorsconcatWithts param otherSources Other observable sources to subscribe to in sequence after the original source is complete export function concatWithT A extends ObservableInputany otherSources A OperatorFunctionT ObservedValuesFromArrayA T return source ObservableT sourceliftcallconcatStaticsource otherSources TODO Expected arguments but got return source ObservableT sourceliftcall as any concatStaticsource otherSources rxjssrcinternaloperatorsmergets newrxjssrcinternaloperatorsmergets oldrxjssrcinternaloperatorsmergets newrxjssrcinternaloperatorsmergets deprecated Deprecated in favor of static link merge export function mergeT Robservables ArrayObservableInputany SchedulerLike number OperatorFunctionT R return source ObservableT sourceliftcallmergeStaticsource observables TODO Expected arguments but got return source ObservableT sourceliftcall as anymergeStaticsource observables rxjssrcinternaloperatorsracets newrxjssrcinternaloperatorsracets oldrxjssrcinternaloperatorsracets newrxjssrcinternaloperatorsracets observables observables as ObservableT return sourceliftcallraceStaticsource observables as ObservableT TODO Expected arguments but got return sourceliftcall as any raceStaticsource observables as ObservableT rxjssrcinternaloperatorszipts newrxjssrcinternaloperatorszipts oldrxjssrcinternaloperatorszipts newrxjssrcinternaloperatorszipts export function zipT Robservables ArrayObservableInputany values Arrayany R OperatorFunctionT R return function zipOperatorFunctionsource ObservableT return sourceliftcallzipStaticRsource observables TODO Expected arguments but got return sourceliftcall as any zipStaticRsource observables Thank you very much for your pull request If your PR is the addition of a new operator please make sure all these boxes are ticked with an x Add the operator to Rx It must have a spects tests file covering the canonical corner cases with marble diagram tests If possible write a asDiagram test case too for PNG diagram generation purposes The spec file should have a type definition test at the end of the spec to verify type definition for various use cases The operator must be documented in JSDoc style in the implementation file including also the PNG marble diagram image The operator should be listed in docoperatorsmd in a category of operators The operator should also be documented See Documentation Guidelines CONTRIBUTINGmd It should also be inserted in the operator decision tree file docdecisiontreewidgettreeyml You may need to update MIGRATIONmd if the operator differs from the corresponding one in RxJS v Description The change in this PR is very similar to the changes that were made in when an interop subscriber is created within finalize itll be wrapped when a subscription is made to the source observable in FinallyOperatorcall The interop subscriber needs to be added to the subscription so that unsubscription chains property and the finalize callback is invoked This PR also includes a failing test that is fixed by the above change Related issue if exists Bug Report Current Behavior If a delay is running while the systems clock is changed it affects the delay of notifications In the extreme case where the systems date goes back in time by more than ms days it gets stuck in a fast loop printing the message below timessec node TimeoutOverflowWarning does not fit into a bit signed integer By overriding setInterval with let realSetInterval setInterval globalsetInterval cb timeargs if time let stack new Errorstack consolelogtime stack processexit return realSetIntervalcb timeargs I got the following stack trace Error at globalsetInterval homeubuntubackendgeneracjs at AsyncActionrequestAsyncId homeubuntubackendnodemodulesrxjsinternalschedulerAsyncActionjs at AsyncActionschedule homeubuntubackendnodemodulesrxjsinternalschedulerAsyncActionjs at AsyncActionDelaySubscriberdispatch as work homeubuntubackendnodemodulesrxjsinternaloperatorsdelayjs at AsyncActionexecute homeubuntubackendnodemodulesrxjsinternalschedulerAsyncActionjs at AsyncActionexecute homeubuntubackendnodemodulesrxjsinternalschedulerAsyncActionjs at AsyncSchedulerflush homeubuntubackendnodemodulesrxjsinternalschedulerAsyncSchedulerjs at listOnTimeout internaltimersjs at processTimers internaltimersjs Reproduction Steps Set computers date year in the future Execute the script below After Set Clock back now is logged but before You were too late set the computers date to today You were too late is not logged and the TimeoutOverflowWarning will be repeatedly logged to the console js let rx requirerxjs let op requirerxjsoperators setInterval consolelogSet clock back now rxof pipeopdelay subscribe consolelogYou were too late try again Expected behavior Delays between notifications should not be impacted by clock time of the system Environment Runtime Node Linux ARM RxJS version tested on but reviewed code between x and master which all appear to have same issue Possible Solution Related to Delay mixes logic to handle offsetting start to an absolute time and logic to delay individual notifications Does it make sense to separate the two features into separate operators Analysis When the of emits the value the notification is added to DelaySubscribers thisqueue The DelayMessage includes the absolute time the notification is scheduled to be emitted and dispatch is scheduled for execution in thisdelay The schedulers clock is then set backwards in time before Dispatch is executed Dispatch is called after thisdelay elapses It emits any notifications scheduled to be emitted before schedulernow Since schedulernow is now significantly in the past queue time is in the future so nothing is emitted Since the queue is not empty dispatch calculates the delay until the next notification to emit The delay ultimately is passed to setInterval where the delay is validated to be less than TIMEOUTMAX which is ms which is less than days Since queue was scheduled in the future and not emitted the delay was a large positive number significantly larger than TIMEOUTMAX Nodes behavior in the case of a duration overflow is to set the duration to ms Dispatch is then called ms later and the process repeats since queue since hasnt been emitted and is still far enough in the future to exceed TIMEOUTMAX Bug Report Current Behavior Given project a and b When a subscribe to a stream from b the finalize operator doesnt get called The below script outputs a finalized c Reproduction js const finalize first requirerxjsoperators const anotherModule requireb const sameModule requirec anotherModulepipe Stream from another module doesnt finalize finalize consoleloga finalized b first subscribe sameModulepipe Stream from same module finalize finalize consoleloga finalized c first subscribe Expected behavior Script should output a finalized b a finalized c Environment Runtime Node v RxJS version Thank you very much for your pull request If your PR is the addition of a new operator please make sure all these boxes are ticked with an x Add the operator to Rx It must have a spects tests file covering the canonical corner cases with marble diagram tests If possible write a asDiagram test case too for PNG diagram generation purposes The spec file should have a type definition test at the end of the spec to verify type definition for various use cases The operator must be documented in JSDoc style in the implementation file including also the PNG marble diagram image The operator should be listed in docoperatorsmd in a category of operators The operator should also be documented See Documentation Guidelines CONTRIBUTINGmd It should also be inserted in the operator decision tree file docdecisiontreewidgettreeyml You may need to update MIGRATIONmd if the operator differs from the corresponding one in RxJS v Description This PR fixes the problem reported in It adds a failing test and uses a local variable instead of reassigning to a closedover parameter thats shared between subscribers Related issue if exists 