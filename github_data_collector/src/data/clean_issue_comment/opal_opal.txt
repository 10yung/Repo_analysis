Given this testrb rb require opalparser eval p Opal works fine opal testrb Object freezing is not supported by Opal Opal raises the following error opal testrb Failed to load WithCLexer using pure Ruby lexer Object freezing is not supported by Opal privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj throw exception evalin p encode undefined method encode for nil at constructormethodmissing privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at constructormethodmissingstub privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at constructorslice privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at constructortok privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at constructoradvance privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at constructornexttoken privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at ObjectOpalyieldX privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at constructorKernelcatch privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj at Opalsend privatevarfolders tmzpj z fp y j q dw gnTopalnodejsrunner o uodj Along with the recent changes to the node stacktrace this PR should be making the development experience both of opal itself and of opal apps much better resolves Consider the following code rb require strscan stream StringScannernewcat builderrb if streamskipcat puts stream inspect end MRI ruby testrb cat Opal master f bundle exec opal testrb nil Hello theres a problem call a method of a class if this method exist outside the class the method is call here is an example def myfct puts function myfct should not be called end class Myclass def anothermeth puts dummy meth end end myvarMyclassnew myvarmyfct Kernelrequire was masked by Opalrequire via Objectrequire This patch makes sure require is passed to Kernelrequire which can then be overwritten Overwriting Kernelrequire is used by the opalzeitwerk autoloader This PR improves autoload support and makes most of the autoload specs pass left to go Behavior Compiler when finding a autoload adds file to require If specified is not found in the file system compiler issues a warning Autoload is resolved at runtime requiretree adir autoload will not require files at runtime delegating it to a autoloader Runtime constgetname constlookupnesting and constlookupancestors check for autoloads and resolve them Moduleconstmissing no longer checks autoloads because the runtime does it constautoload moved to constprototypeautoload Specs Because ruby specs for autoloadmodule use dynamic file names they wont work as Opal cant resolve those at runtime So all rubycoremodule specs are copied to opalcoremodule and adapted to use fixed file names for autoloads Copied specs are now blocked from running within ruby specs Some specs require the module code to be reevaluated on subsequent autoloads This is solved in part by providing another autoload file see opalcoremodulefixturesautoloadcallbackrb and autoloado rb but that does not work for other cases still left to do This may need a better strategy Other issues defined BlaFooBar uses constget for Bar which triggers a autoload for Bar which it should not it should use constdefined for Bar There is some code duplication left duplication intentional for now for easier experimentation Also the autoload code needs some compaction expansion intentional for now for easier experimentation Comments and suggestions how to improve further much appreciated Superseeds As the title says with enabled specs TracePoint support for the class event However in ruby when passing the class to the block the method self is available but not in Opal Ruby Opal Otherwise usage is just as in ruby 