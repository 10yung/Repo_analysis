When using sdnnbatchNorm at the line SDVariable g vgradient in SameDiffjava the gamma or betas gradient g is null Is it normal Issue Description I want to be able to build an application which uses DL J and is able to run on CPUs supporting AVX and on CPUs which do not support it I am adding both binaries to the classpath both dependencies to the POM I expect that DL J is able to automatically determine if the CPU supports AVX or not If AVX is supported I expect it to load the AVX binaries otherwise I expect it to load the generic binaries The observed behavior is that DL J during loading locates both the AVX and generic binaries and then tries to load the AVX binaries despite the CPU not supporting AVX This leads to a VM crash because an illegal opcode is found orgbytedecojavacppLoader is able to deal is problems related to unsatisfied links but not with checking if a binary is adequate for a particular CPU platform DL J is able to display a message when the generic CPU binaries are used on an AVX capable system so I would expect automatically using the AVX binaries on should also be possible Version Information Please indicate relevant versions including if relevant Deeplearning j version beta Platform information OS etc Linux DebianUbuntu Additional Information details summaryCrash logsummary pre Loading javacppcachend jnative beta linuxx avx jarorgnd jnativeblaslinuxx avx libnd jcpuso A fatal error has been detected by the Java Runtime Environment SIGILL x at pc x f e e ae pid tid x f eb b JRE version OpenJDK Runtime Environment b build u b ubuntu b Java VM OpenJDK Bit Server VM b mixed mode linuxamd compressed oops Problematic frame C libnd jcpuso x c ae nd jOpTrackergetInstance x Failed to write core dump Core dumps have been disabled To enable core dumping try ulimit c unlimited before starting Java again An error report file with more information is saved as hserrpid log If you would like to submit a bug report please visit The crash happened outside the Java Virtual Machine in native code See problematic frame for where to report the bug pre details details summaryExcept from hserrpid logsummary pre A fatal error has been detected by the Java Runtime Environment SIGILL x at pc x f e e ae pid tid x f eb b JRE version OpenJDK Runtime Environment b build u b ubuntu b Java VM OpenJDK Bit Server VM b mixed mode linuxamd compressed oops Problematic frame C libnd jcpuso x c ae nd jOpTrackergetInstance x Failed to write core dump Core dumps have been disabled To enable core dumping try ulimit c unlimited before starting Java again If you would like to submit a bug report please visit The crash happened outside the Java Virtual Machine in native code See problematic frame for where to report the bug pre details Issue Description Please describe our issue along with expected behavior Sequential model created trained and saved in Keras TF under Python would load into a Dl j model encountered behavior Exception thrown on import into Dl j Model was created trained and saved from a DL rig running Ubuntu LTS with the software versions listed above and has been reloaded and evaluated in the same environment with no issues Transferring to a Windows system with no CUDA GPU attempted to load into a Java application leveraging Dl j for a runtime deployment no bueno Was originally using Dl j beta noticed some Keras bugfixes in the changelog for beta so upgraded to beta cleaned rebuilt and still seeing the same errors Version Information Please indicate relevant versions including if relevant Deeplearning j version beta and beta Platform information OS etc Windows Java CUDA version if used NA using CPU backend NVIDIA driver version if in use NA using CPU backend Additional Information Code snippets and stack trace for exception captured here Contributing If youd like to help us fix the issue by contributing some code but would like guidance or help in doing so please mention it When I import modelh I have the two errors javalangNoClassDefFoundError orgdeeplearning jnnconfBackpropType at orgdeeplearning jnnconfMultiLayerConfigurationBuilderinitMultiLayerConfigurationjava at orgdeeplearning jnnconfNeuralNetConfigurationListBuilderinitNeuralNetConfigurationjava at orgdeeplearning jnnconfNeuralNetConfigurationListBuilderinitNeuralNetConfigurationjava at orgdeeplearning jnnconfNeuralNetConfigurationBuilderlistNeuralNetConfigurationjava at orgdeeplearning jnnmodelimportkerasKerasSequentialModelgetMultiLayerConfigurationKerasSequentialModeljava at orgdeeplearning jnnmodelimportkerasKerasSequentialModelgetMultiLayerNetworkKerasSequentialModeljava at orgdeeplearning jnnmodelimportkerasKerasSequentialModelgetMultiLayerNetworkKerasSequentialModeljava at orgdeeplearning jnnmodelimportkerasKerasModelImportimportKerasSequentialModelAndWeightsKerasModelImportjava at orgdeeplearning jnnmodelimportkerasKerasModelImportimportKerasSequentialModelAndWeightsKerasModelImportjava at combanmadataopstimeSeriesDataPredictionzkWatcherSingleSetmodelLoadHDFSzkWatcherSingleSetscala at combanmadataopstimeSeriesDataPredictionzkWatcherSingleSetcombanmadataopstimeSeriesDataPredictionzkWatcherSingleSetmodelGetzkWatcherSingleSetscala at combanmadataopstimeSeriesDataPredictionzkWatcherSingleSetanon nodeChangedzkWatcherSingleSetscala at orgapachecuratorframeworkrecipescacheNodeCache applyNodeCachejava at orgapachecuratorframeworkrecipescacheNodeCache applyNodeCachejava at orgapachecuratorframeworklistenListenerContainer runListenerContainerjava at orgapachecuratorshadedcomgooglecommonutilconcurrentDirectExecutorexecuteDirectExecutorjava at orgapachecuratorframeworklistenListenerContainerforEachListenerContainerjava at orgapachecuratorframeworkrecipescacheNodeCachesetNewDataNodeCachejava at orgapachecuratorframeworkrecipescacheNodeCacheprocessBackgroundResultNodeCachejava at orgapachecuratorframeworkrecipescacheNodeCacheaccess NodeCachejava at orgapachecuratorframeworkrecipescacheNodeCache processResultNodeCachejava at orgapachecuratorframeworkimpsCuratorFrameworkImplsendToBackgroundCallbackCuratorFrameworkImpljava at orgapachecuratorframeworkimpsCuratorFrameworkImplprocessBackgroundOperationCuratorFrameworkImpljava at orgapachecuratorframeworkimpsWatcherRemovalFacadeprocessBackgroundOperationWatcherRemovalFacadejava at orgapachecuratorframeworkimpsGetDataBuilderImpl processResultGetDataBuilderImpljava at orgapachezookeeperClientCnxnEventThreadprocessEventClientCnxnjava at orgapachezookeeperClientCnxnEventThreadrunClientCnxnjava Caused by javalangClassNotFoundException orgdeeplearning jnnconfBackpropType at javanetURLClassLoaderfindClassURLClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava at orgapacheflinkutilChildFirstClassLoaderloadClassChildFirstClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava javalangNoClassDefFoundError orgdeeplearning jnnconfNeuralNetConfigurationBuilder at orgdeeplearning jnnmodelimportkerasKerasSequentialModelgetMultiLayerConfigurationKerasSequentialModeljava at orgdeeplearning jnnmodelimportkerasKerasSequentialModelgetMultiLayerNetworkKerasSequentialModeljava at orgdeeplearning jnnmodelimportkerasKerasSequentialModelgetMultiLayerNetworkKerasSequentialModeljava at orgdeeplearning jnnmodelimportkerasKerasModelImportimportKerasSequentialModelAndWeightsKerasModelImportjava at orgdeeplearning jnnmodelimportkerasKerasModelImportimportKerasSequentialModelAndWeightsKerasModelImportjava at combanmadataopstimeSeriesDataPredictionzkWatcherSingleSetmodelLoadHDFSzkWatcherSingleSetscala at combanmadataopstimeSeriesDataPredictionzkWatcherSingleSetcombanmadataopstimeSeriesDataPredictionzkWatcherSingleSetmodelGetzkWatcherSingleSetscala at combanmadataopstimeSeriesDataPredictionzkWatcherSingleSetanon nodeChangedzkWatcherSingleSetscala at orgapachecuratorframeworkrecipescacheNodeCache applyNodeCachejava at orgapachecuratorframeworkrecipescacheNodeCache applyNodeCachejava at orgapachecuratorframeworklistenListenerContainer runListenerContainerjava at orgapachecuratorshadedcomgooglecommonutilconcurrentDirectExecutorexecuteDirectExecutorjava at orgapachecuratorframeworklistenListenerContainerforEachListenerContainerjava at orgapachecuratorframeworkrecipescacheNodeCachesetNewDataNodeCachejava at orgapachecuratorframeworkrecipescacheNodeCacheprocessBackgroundResultNodeCachejava at orgapachecuratorframeworkrecipescacheNodeCacheaccess NodeCachejava at orgapachecuratorframeworkrecipescacheNodeCache processResultNodeCachejava at orgapachecuratorframeworkimpsCuratorFrameworkImplsendToBackgroundCallbackCuratorFrameworkImpljava at orgapachecuratorframeworkimpsCuratorFrameworkImplprocessBackgroundOperationCuratorFrameworkImpljava at orgapachecuratorframeworkimpsWatcherRemovalFacadeprocessBackgroundOperationWatcherRemovalFacadejava at orgapachecuratorframeworkimpsGetDataBuilderImpl processResultGetDataBuilderImpljava at orgapachezookeeperClientCnxnEventThreadprocessEventClientCnxnjava at orgapachezookeeperClientCnxnEventThreadrunClientCnxnjava Caused by javalangClassNotFoundException orgdeeplearning jnnconfNeuralNetConfigurationBuilder at javanetURLClassLoaderfindClassURLClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava at orgapacheflinkutilChildFirstClassLoaderloadClassChildFirstClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava but I am add the dependency dependency groupIdorgdeeplearning jgroupId artifactIddeeplearning jnnartifactId versiondl jversionversion dependency pomxml nd j dependencyManagement dependencies dependency groupIdorgnd jgroupId artifactIdnd jnativeplatformartifactId versionnd jversionversion dependency dependency groupIdorgnd jgroupId artifactIdnd jcuda platformartifactId versionnd jversionversion dependency dependency groupIdorgnd jgroupId artifactIdnd jcuda platformartifactId versionnd jversionversion dependency dependency groupIdorgnd jgroupId artifactIdnd jcuda platformartifactId versionnd jversionversion dependency dependencies dependencyManagement dependency groupIdorgnd jgroupId artifactIdnd jbackendartifactId versionnd jversionversion dependency dependency groupIdorgnd jgroupId artifactIdnd japiartifactId versionnd jversionversion dependency dependency groupIdorgnd jgroupId artifactIdjacksonartifactId versionnd jversionversion dependency dependency groupIdorgnd jgroupId artifactIdnd jcommonartifactId versionnd jversionversion dependency dependency groupIdorgdeeplearning jgroupId artifactIddeeplearning jnnartifactId versiondl jversionversion dependency dependency groupIdorgbytedecogroupId artifactIdopenblasartifactId version version dependency Core DL J functionality dependency groupIdorgdeeplearning jgroupId artifactIddeeplearning jnlpartifactId versiondl jversionversion dependency dependency groupIdorgdeeplearning jgroupId artifactIddeeplearning jzooartifactId versiondl jversionversion dependency ParallelWrapper ParallelInference live here dependency groupIdorgdeeplearning jgroupId artifactIddeeplearning jparallelwrapperartifactId versiondl jversionversion dependency dependency groupIdorgdeeplearning jgroupId artifactIddeeplearning jcoreartifactId versiondl jversionversion dependency dependency groupIdorgbytedecogroupId artifactIdhdf platformartifactId version version dependency dependency groupIdorgbytedecojavacpppresetsgroupId artifactIdopenblasartifactId version version dependency dependency groupIdorgbytedecojavacpppresetsgroupId artifactIdopenblasplatformartifactId version version dependency dependency groupIdorgbytedecogroupId artifactIdjavacppartifactId version version dependency Issue Description We are observing a drop in our model performance after upgrading from Beta to beta with the exact same dataset Version Information beta Issue Description Please describe our issue along with expected behavior encountered behavior INDArray CpuBackend has significant performance differences with double on similar operations such as INDArray sum times cost ms double sum times cost ms ClusterUtilscomputeSquareDistancesFromNearestCluster call with cluster and points times cost ms euclideanDistance between double and one double cost ms KMeansClustering classifies points into clusters costs more than two days Apache Commons Math KMeansPlusPlusClusterer classifies points into clusters takes about minutes All of above test case test on same dataset many times with warm code I have tested the same dataset on a GPU ServerNVIDIA P cloud server with CUDA backend KMeansClustering costs dozens hours to classifies points into clusters Version Information Please indicate relevant versions including if relevant Deeplearning j version beta Platform information OS etc Windows bit JDK CUDA version if used None NVIDIA driver version if in use None Additional Information Where applicable please also provide Full log or exception stack trace ideally in a Gist gistgithubcom pomxml file or similar also in a Gist Contributing If youd like to help us fix the issue by contributing some code but would like guidance or help in doing so please mention it I think the cause of the problem is in orgnd jlinalgcpunativecpuopsNativeOpExecutionerexecorgnd jlinalgapiopsReduceOp It is so abstract and too complicate than just a for loop Id like to find a best clustering algorithm on JVM for millions dataset and I wrote a MiniBatchKMeans by kotlinrefer to sklearn MiniBatchKMeans base on Apache Commons Math MiniBatchKMeans is real fast ms on classfies points dimensions into clusters and the result has very small difference with KMeansPlusPlusClusterer on convex dataset but big difference on discrete data Id like to rewrite it into a popular JVM project but the INDArray performance is really a big problem Issue Description I m using BarnesHutTsne but the result does not look like as expected I tried MNist data and expected a typical clustering similar to The output of BarnesHutTsne and Tsne looks like a donut with randomly arranged points that is really untypical Version Information Im using Deeplearning j version beta Add some fluent syntax construction to implement linear solve like numpylinalgsolve in scala Analogue from Breeze a b But this operator is used in nd s Methods as inputs int t unsigned char void calculate buffer length UTF UTF UTF UTF UTF UTF Hi folks Windows Defender antivirus shows a trojan in one of the transitive dependencies from deeplearning jcoreexamples packageproject and to be more specific in opencv for MacOS By default when you compile the project all OS dependencies are downloaded from the central Maven repository so everyone has this trojan in their machines In case this is not a false alarm of Windows Defender you should consider notifying the users of this framework and address this security issue Also maybe a security check step before publication to mvn repository should take place Details dl j version used dependency groupIdorgdeeplearning jgroupId artifactIddeeplearning jcoreartifactId version beta version dependency from where it comes the trojan org bytedeco opencv opencv macosxx jar trojan name TrojanMacOSLightaidra Log from Windows Defender fileC Users user m repository org bytedeco opencv opencv macosxx jarorgbytedecoopencvmacosxx libopencvdnn dylib Based on Microsoft this trojan is used for DDoS attacks and to establish IRC communication with villain users I had to remove my personal Java projects from this framework Note I did not check any newer version but there is a high chance of this being present even on newer versions