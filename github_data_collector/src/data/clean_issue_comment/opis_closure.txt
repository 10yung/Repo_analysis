Hello I have an issue with Carbon dates that are serialized through GitHub opisclosure Serialize closures anonymous functions Laravel version Carbon version PHP version OpisClosure version The problem seems to occur after upgrading to Laravel and therefor upgraded from Carbon to Carbon I wasn t sure if this belongs to the Carbon or Opis issues So I ve posted this question on both InvalidArgumentException Unknown setter date Issue briannesbittCarbon GitHub When a closure is serialized php return serializenew SerializableClosureclosure true I get this error InvalidArgumentException Unknown setter date This boils down to nesbotcarbonsrcCarbonTraitsDatephp I ve googled this issue for some time now and I believe it has got a lot to do with the depreciation of serializeUsing As found in issue Provide an alternative to serializeUsing to Laravel users Issue briannesbittCarbon GitHub driesvints However after reading multiple threads I m not able to find a solution I really hope someone can help me steering me to the right direction Thanks If we attempt to serialize a class that contains a typed Closure property PHP we get a type error php class Foo public Closure closure foo new Foo fooclosure function echo hi serializedFoo Opis Closure serializefoo unserializedFoo Opis Closure unserializeserializedFoo unserializedFooclosure Expect hi get PHP Fatal error Uncaught TypeError Typed property Fooclosure must be an instance of Closure Opis Closure SerializableClosure used in C test vendor opis closure src SerializableClosurephp This is likely happening because were overwriting property values with SerializableClosure per this code However we cannot do that with typed properties in PHP If I stop using opisclosure my unserialize error goes away this error occurs when using opisclosure and the viewsphp module in combination with the editablefields module for Drupal If I disable viewsphp which uses the opisclosure library now through a patch we wrote recently there is no longer an error however as soon as I reenable this module that uses the opisclosure library I get an unserialize error when the serialized string from cache is passed through the unserialize function I tried using base encode and base decode before and after serializeunserialize functions but that didnt change anything The only thing that I can do to avoid this is to avoid using opisclosure and the viewsphp module that now requires this due to the createfunction being deprecated Ive got a complex stack of dependencies and modules generating a page with ajax forms when using php x I get an unserialize error in a cacheget which attempts to unserialize something that contains a closure that was serialized by opisclosure and at some point was cached and serialized and gets unserialized from the cache I find all this very complex to debug and troubleshoot going on two weeks now Im wondering why did the php team remove createfunction from php x previous versions of php didnt need all this and they worked Im going to try to do another backtrace and see if I can dig up something I should probably just find another solution that avoids using viewsphp and opisclosure but I was trying to make my life easier by not having to refactor someone elses code of a project I took over that some one else created We tried to use Opis Closure to serialize structures that may contain Throwables including systemdefined exceptionserrors In this scenario we expected that the script closurewrapped the call stack andor parameters of thrown exceptionserrors However we could only achieve this by removing the isUserDefined restrictions in SerializableClosurewrapClosures After which it does work flawlwssly Is there a requirement for that restriction Could it be better finetunedlifted so that we can serialize system throwables