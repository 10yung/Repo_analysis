Hi Im using a function to create jobs When creating them like this I have no problems at all javascript startPurgeOldJobsJob function consolelogstartPurgeOldJobsJob creates job with no data let job new Job jobsCollection JOBTYPESPURGEOLDJOBS sets repeating schedule jobrepeat schedule jobsCollectionlaterparsetexton the first day at set retry options in case of failure jobretry retries wait backoff exponential saves job cancelling other jobs generated for repetitions jobsavecancelRepeats true returns generated job return job However when I remove the cancelRepeats true options in the save I start getting this errors about UnhandledPromiseRejectionWarning like this STDERR node UnhandledPromiseRejectionWarning Unhandled promise rejection rejection id RangeError Maximum call stack size exceeded STDERR node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code Any ideas on this issue I guess this code should check for if docrepeatWait isnt a number not if the actual value isnt number right This is also shown a few lines earlier As mentioned in this in combination with gives us the possibility to measure how much of the library actually is covered by tests Fixes TypeError Class constructor Collection cannot be invoked without new There are some breaking changes between Coffeescript v and v I tried to figure them out to get jobcollection compatible with v but I know little to nothing about Coffeescript and dont use many of Javascripts advanced capabilities yet so I couldnt figure out making all the necessary changes Figured Id pose the question about having jobcollection updated to support v before it goes into its maintenance mode come January Explained how to avoid zombiejobs Im a long time user of this package But recently I run into a problem that a single repeating job is cloning itself hundreds of time This is the code checkLinkedInExpirationJob new JobJobs checkLinkedInExpiration checkLinkedInExpirationJobrepeat scheduleJobslaterparsetextat am retry retries save It correctly creates a single job to run at am Then it starts running and it creates hundreds copies of itself Each copy runs gets status completed and none of them failed I checked the logs Heres the abbreviated code of the worker checkLinkedInExpirationWorker JobsprocessJobs checkLinkedInExpiration job callback Loginfo checkLinkedInExpirationWorker starting users AppUserfindprovidersprovider linkedin for u in users linkedIn find uproviders p pprovider is linkedin find the admins of the users account exclude if the user is the admin accountAdmins AppUserfind id ne uid roles admin accountId uaccountId fetch expDate momentlinkedInaccesstokendateexpiration MMDDYYYY Hmsadd days expiresInFourteenDays momentlinkedInaccesstokendateexpiration MMDDYYYY Hmssubtract days expiresIntwoDays momentlinkedInaccesstokendateexpiration MMDDYYYY Hmssubtract days now new Date if expired if expDateisSamenow day Loginfo checkLinkedInExpirationWorker user uid LinkedIn is expired if uemails address send an email for admin in accountAdmins send an email Meteordefer Meteorcall linkedinremove err res Loginfo checkLinkedInExpirationWorker removed LinkedIn if res continue if expires in days if expiresInFourteenDaysisSamenow day send an email for admin in accountAdmins send an email jobdone callback With another job I have exactly the same issue I just clones itself about times I checked the Job collection and the cloning is kind of random Im literally out of ideas starting to think about replacing this package Any idea what could result in jobs cloning themselves First of all this is a great package and it has shorten my development by a lot as I move a lot of long running tasks in the background like sending SMS or uploading to S But if there is one part that we can improve it is with dynamically importing this package in the client In my case less than of my users actions use background jobs but it is the th biggest resource being downloaded Is there a possibility to setup the package for dynamic import as supported by Meteor since Hi Vaughn I have the following requirement hope you have an answer for this question A We do have several different services meaning different web services which we call via their API and for each service we have several jobs B On top of that we do a need concurrent number of jobs of the same service with lets say a maximum of concurrent jobs But this concurrent jobs should only be executed if its for a different user For requirement A would you use a different job queue for each service or how would organize that jobs for the same service are all lined up queued So something like jobQueueServiceA jobQueueServiceB etc For requirement B we can set the concurrency to jobs but how can we at the same time control that two jobs for the same user arent executed in parallel Would it be best to chain them up meaning when we create the jobs we do check if there is already a job for that userId and we would use the depends field to wait for the last job to finish As always thanks in advance