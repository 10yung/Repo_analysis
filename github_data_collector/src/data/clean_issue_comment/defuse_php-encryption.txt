 The current version of phpencryption is v This library is expected to remain stable and supported by its authors with security and bugfixes until at least January st Does this only refer to the version or will you abandon the phpencryption project after January st This code in Defuse Crypt Filephp does not validate in PHP Initialize a streaming HMAC state var resource hmac hmac hashinitCoreHASHFUNCTIONNAME HASHHMAC akey CoreensureTrue isresourcehmac isobjecthmac Cannot initialize a hash context Check if first argument of testsh is a file instead of its existence Add fast argument to skip test in group slow Small fixes to the bash scripts quotes syntax failsafe Add CONTRIBUTINGmd file with instructions for tests and syntax fixing On my GHz CPU this brings the tests from seconds down to seconds Require PHPCSFixer as dev dependency Modify gitignore to ignore phpcscache and generated coverage files Run the fix command on the codebase Related to we should produce two versions of the Phar and sign them both defusecryptophar is the preferred default which was built on PHP defusecryptophp phar should be built on PHP so Composer resolves randomcompat v instead of randomcompat v which makes it actually bundle the polyfill A core function to test whether a given resource file string etc has been encrypted by and therefore is decryptable by this library and version would be very useful rather than attempting a decryption and handling the associated exceptions The checks present in the beginning of FiledecryptResourceInternal seem like what I desire but Id rather handle a boolean response from something like isDecryptableCiphertext before actually attempting to decrypt a file which may or may not actually have been encrypted I noticed that hashupdate from PHP which is used in FiledecryptResourceInternal is extreme slow I have a file which is about MiB large and in total the HMAC verification process needs more than seconds I use a i K with GB of RAM Here I only measured the verification process at step which gives me about seconds total start microtimetrue Recalculate the MAC so far and compare it with the one we remembered from pass to ensure attackers didnt change the ciphertext after MAC verification hashupdatehmac read total microtimetrue start Is that normal Hello Great library thanks I spent several hours figuring out why my code is not working I was passing same path for input and output file to file encrypt or decrypt methods I think it would be useful to have an exception in this case php private static function encryptFileInternalinputFilename outputFilename KeyOrPassword secret if inputFilename outputFilename throw new Ex IOExceptionInput and outputFilename must be different php private static function decryptFileInternalinputFilename outputFilename KeyOrPassword secret if inputFilename outputFilename throw new Ex IOExceptionInput and outputFilename must be different If you are ok I will open the PR 