 I have this setting in my current project Compile jsSourceDirectories baseDirectoryvalue html It works well with sbt but with sbt fails with Compile npmInstallJSResources javalangIllegalArgumentException requirement failed Source file Usersmushtaqprojectstmtmsocketexampleserviceexampleserviceappjshtml is a directory I believe we have too many extension points in this plugin webpackNodeArgs npmExtraArgs additionalNpmConfig webpackDevServerExtraArgs webpackExtraArgs yarnExtraArgs I m wondering if that s a sign that the plugin is not at the right place Maybe we should just generate a webpack configuration file and let users call webpack npm yarn etc as they want Initially one goal of the plugin was to provide an integrated developer experience no need to bother about writing a packagejson file or even maybe a webpack configuration file just add an npmDependencies line to your buildsbt and you re done However it turns out that this automation is achieved at the expense of a required flexibility WIP Only one function of utilCommandsscala has been updated to accept extra env vars Should I update the others too If adding this new option seems ok to the maintainers then I can add a test Usage example scala webpackNodeEnvVars in fullOptJS Map NODEENV production Fixes Allow to use ES modules as well as CommonJS module WIP BundlingModeLibraryOnly does not work yet as with html script src name fastoptlibraryjsscript script src name fastoptloaderjsscript script src name fastoptjsscript the browser will not recognize the import syntax in the last script Adding the attribute typemodule is not enough if name fastoptjs contains something like import as ijquery from jquery then the following error is thrown Uncaught TypeError Failed to resolve module specifier jquery Relative references must start with either or Currently scaljsbundler uses npmDependencies in sbt to manage nodejs packages It would be great if scalajsbundler add packagejson support to manage dependencies so that npm tools like npm audit or dependabot work with packagejson FYI Dependabot is a bot to watch npm packages and open pull request if updates found like Scala Steward do so for Scala projects Adding eslint to npmDevDependencies and following just about any tutorial serverLocalFast or official docs for running eslintloader in webpack does not seem to trigger it to run npmDevDependencies in Compile Seq eslint eslintloader eslintpluginreacthooks In my webpack config module rules test sccss use styleloader cssloader sassloader test pngttfotfeotsvgwoff az use loader fileloader options name hash ext test js exclude nodemodules loader eslintloader all of my js source is located in targetscala scalajsbundlermain so it should be picked up just like all my other loaders right Im expecting to at least get the usual error that eslintrc is missing but I see no logs at all for eslint Is there something fundamentally incompatible with eslint loader and fastOptJSwebpack Ive been trying to debug an issue with the Bootstrap library It extends jquery and it expects the var jQuery to be a global but I get the error jQuery is not defined Ive been trying to follow the Global Namespace example but I think there is an issue The issue is not apparent in the example because the var name and the lib symbol name are the same eg var globalModules moment moment However in my case the library symbol is jquery and the global var that Bootstrap expects is jQuery It seems to me that the importRule is using the globalModules keyvalue opposite to the exposeRules When I make the following changes to commonwebpackconfigjs Im able to use Boostrap without the jQuery undefined error var importMap jqueryDNC jquery var exportMap jquery jQuery const importRule Force require global modules test fastfullopt js loader importsloader ObjectkeysimportMap mapfunctionmodName return modName importMap modName join const exposeRules ObjectkeysexportMapmapfunctionmodName Expose global modules return test requireresolvemodName loader exposeloader exportMap modName const allRules exposeRulesconcatimportRule moduleexports performance hints false module rules allRules If you can confirm this issue it may be helpful to change the example to use different var name and library symbol name Also there is another issue for my understanding In the importMap above I use the key jqueryDNC in the InputMap It seems that the name I use there doesnt matter Based on all the docs I thought the key for the importMap would need to be the var name used by Bootstrap ie the global var name for jquery ie typically jQuery or However that doesnt seem to be the case My program works no matter what I name that key Then I thought this might mean the importRule simply isnt needed because the exportRule creates the desired global variable name but my program breaks if I omit the importRule So it must be that the presence of the import rule has some other side effect Can you provide any further insight on what is going on here Fixes also required for LibraryAndApplication