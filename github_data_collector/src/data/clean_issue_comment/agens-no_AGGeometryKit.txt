 AGKMatrixh NSNumber defaultMember if defaultMember Converting a pointer value of type NSNumber to a primitive boolean value instead either compare the pointer to nil or call boolValue defaultMember return defaultMember copy voidresetMatrixToDefaultNSNumber defaultValue if defaultValue Converting a pointer value of type NSNumber to a primitive boolean value instead either compare the pointer to nil or call boolValue selfdefaultMember defaultValue selfmembers nil NSArray allMembers NSMutableArray allMembers NSMutableArray arrayWithCapacityselfcount for NSUInteger index index selfcount index allMembers addObjectself index Argument to NSMutableArray method addObject cannot be nil return allMembers UIImageAGKQuadh UIImage imageByCroppingToRectCGRectrect CGImageRef croppedImage CGImageCreateWithImageInRect self CGImage rect return UIImage imageWithCGImagecroppedImage scaleselfscale orientationselfimageOrientation Potential leak of an object stored into croppedImage UIImageAGKQuadm Line UIImage imageByCroppingToRectCGRectrect croppedImage is not released In your demo video you show an image with corners being dragged and morphed Is it possible to have more than one drag point to transform the view also is it possible to load a video inside instead of an image I noticed an issue with UIImage scale and imageWithPerspectiveCorrectionFromQuad If I pass an image with scale factor f iPhone Plus it crops only portion of an image As far as I traced the rects it appears to act weird here Line UIImage correctedImage self imageWithTransformtransform anchorPointCGPointZero Line UIImage resultImage correctedImage imageByCroppingToRectdestinationRect Here imageWithTransform returns an image with scale f so its size in points size in pixels and destinationRect is still in points So the result image is upper part of the source image Of course you can always transform your x image into x by drawing it to image context with scale and triple source size However in situation where youre really low on available memory this could be a hussle As of today we are just using nearest neighbor algorithm This looks really bad both when downsampling and upscaling Creating an alternative version of AGKTransformPixelMapper using some more sophisticated algorithm would be awesome Heres some code hosted on google which does bicubic interpolation 