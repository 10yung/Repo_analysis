Fixes this is caused by bad truncation cc should fix many known cases of this but theoretically the problem still exists cc needs more investigation This keeps all existing truncation code intact just doesnt use the resulting substs or goals But could change it to shortcircuit to a bool Could add some documentation to abstractliteral to explain why we discard the goal if it would get truncated but overall changes are pretty minimalcomplete Most types with projection in the name were renamed to alias but Ive kept the projectionspecific code mostly programclausesrs and splitrs mostly the same Its not entirely clear to me which parts will need to be generalized to all kinds of aliases and which parts stay specific to associated type projections Running the existing forallprojectiongat test with a maxsize of causes a panic with should have floudered which comes from this line While using a maxsize that low usually wont happen it indicates that logic somewhere is wrong Im testing rustanalyzer in Emacs with a largeish project loc excluding dependencies and running into long pauses spent in chalk This is a stack trace from a profiler attached to ralspserver showing where most of the time is spent in ms from triggering a highlight request to the language server img width src Im not sure what the problem is based on the output but happy to run other tests andor provide private access to the repo Im running on OSX and have also enabled the useClientWatching option for rustanalyzer cc matklad In jackh commented Ok so theres a couple things going on here and Ill try to explain it succinctly since Im traveling today so on mobile at least for the minute So first its maybe not obvious from the PR and maybe not even wrong but something I found when looking through CHALKDEBUG output But in applyanswersubst we cant properly check if the delayed subgoals are equal to the table goal because the delayed subgoals get unique inference variables Perhaps this would be easierquicker to check using the variant test and adding dbg statements there Second I would REALLY prefer to have these be checked before they are added to the answer But because of we have to wait until they are both canonicalized which happens in pursueanswer At that point it is too late because that doesnt know about the subgoal That was mostly the point of this FIXME we can be smarter here I think but it requires a bit of refactoring Third there are essentially two places that do this check First is in applyanswersubst and second is here They arent the same removing this causes the variant test to fail Removing the other causesmany of the conductive tests to fail and a neverending test for one that I dont remember off the top of my head Im not convinced that there couldnt be just one check in the right place So overall Im a bit skeptical Between both checks everything works But as I said I dont know if its perfectly correct and I definitely think theres room for improvement Whether that needs to be done in this PR or can be done separately idk Nonetheless I should have some time soon to at the very least cleanup this FIXME and a couple other things Like the extra applybinders function that was added but isnt used anymore If we decide to land the PR as is Ill file a followup issue with more detailed info Originally posted by jackh in This PR contains book chapters describing the chalkir crate These chapters are also meant to serve as a proposal that we can discuss at a compiler team meeting although I would expect such a meeting would focus more on the highlevel bits than the nitty gritty of the design This text does not align precisely with the state of the master branch In we opted to stop truncating the environment The problem was due to an infinite loop that arose in some rustanalyzer cases The scenario was described on Zulip recently but is also covered in and In short we would truncate a projection FooBar from the environment and replace it with an inference variable X When we get back an answer we would unify FooBar with the value inferred for X which would up being a fresh inference variable This would create a projection goal but that projection goal includes the same environment that we started with and hence that same environment would get truncated again This would result in the cycle beginning anew For now we opted to just stop truncating the environment because it isnt really needed at the moment Rust doesnt generate queries that grow the environment in indefinite ways But we may want to revisit this with another fix or depending on how we resolve normalization this may become a nonissue in the future Its possible that a new answer may not be ambiguous but an older answer was In this case pushanswer on Table does not insert a new answer but still returns true However if true is returned then its propagated up and eventually the AnswerIndex is incremented Then in the next iteration of checking for an answer the AnswerIndex is not the next index so this assertion can fail Simply changing pushanswer to panic whenever a new answer would replace an old one doesnt cause any tests to fail So if this is a valid case then a test should be added Relevant zulip Ive seen the following panic couple of times thread main panicked at truncate extracted a pending value that references internal binder TyStructId StructId homematkladcargogitcheckoutschalkaf ed b aac cd chalksolvesrcsolveslgresolventrs I have not tried to minimize it but the repro is cargo run p racli release analysisstats withdeps only replay tmpparityethereum from rustanalyzer repository where parityethereum is 