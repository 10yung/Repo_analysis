I am not sure what to look or how to debug the issue but the error message is ERROR failed to read cargo metadata EOF while parsing a value at line column It only appears in procmacro repos Travis CI log for failing job with tarpaulin Travis CI log for same job passing tests without tarpaulin Issue description While running tarpaulin on an integration test with the testthreads flag the test segfaults I did try to cut the code base and test code down to a minimal test case I suspect I only achieved minimalish but its much smaller than the original project Steps to reproduce the issue git clone gitgithubcomjeffreyhowardminimalgit cd minimal cargo tarpaulin verbose testthreads Whats the expected result The expected result is that tarpaulin finishes the test the test passes and tarpaulin produces coverage results As a side note this is exactly what happens when running tarpaulin without the testthreads command line argument Whats the actual result The test run concludes in a segmentation fault as follows INFO tarpaulin Running Tarpaulin INFO tarpaulin Building project Finished dev unoptimized debuginfo targets in s DEBUG tarpaulin Processing Targetlib INFO tarpaulin Launching test INFO tarpaulin running homeec userenvironmentminimaltargetdebugdepsminimale dd fc ea running tests test result ok passed failed ignored measured filtered out DEBUG tarpaulin Processing Targettest servertest INFO tarpaulin Launching test INFO tarpaulin running homeec userenvironmentminimaltargetdebugdepsservertest f a d running test test serverbadaddress Error Failed to get test coverage Error Failed to run tests A segfault occurred while executing tests Additional details Output from uname a Linux IP REMOVED amzn x SMP Tue Sep UTC x x x GNULinux Tarpaulin version Rustc version rustc e As I was removing as much code as possible to try to get to a minimal project showing this behavior I did try stripping out the error reporting at which point the test seemed to run fine That makes me wonder if its the thread communication in librs on lines and that might be causing the segfault Running tarpaulin in a docker container Error Failed to get test coverage Error Failed to run tests A segfault occurred while executing tests Its my own docker image FROM ekiddrustmuslbuilderlatest USER root RUN aptget update aptget install y python python pip RUN aptget clean RUN rm rf varlibaptlists USER rust RUN pip install upgrade user awscli ENV PATHhomerustlocalbinPATH COPY chownrust credentials homerustawscredentials RUN cargo install cargotarpaulin RUN mkdir p homerustcargogit homerustcargoregistry homerustsrctarget and container is run with docker run securityopt seccompunconfined it v pwdhomerustsrc myrustmusl I have a somewhat iffy test case that succeeds when run with cargo test but fails on invocation of cargo tarpaulin Boundary conditions I am running rustc eae df and cargotarpaulin version on Linux voltstgrie generic Ubuntu SMP Thu Nov UTC x x x GNULinux The pretty much minimally reproducing test case is cfgtest mod tests test fn signalreg let fg stdsyncArcnewstdsyncatomicAtomicBooldefault let si signalhookflagregistersignalhookSIGQUIT fgclone assertsiisok test if atomic is unset before signal assertfgloadstdsyncatomicOrderingRelaxed unsafe libcraisesignalhookSIGQUIT test if atomic was set after signal assertfgloadstdsyncatomicOrderingRelaxed the according project thus uses devdependencies signalhook libc the only other relevant cargotoml entry is probably edition As stated already cargo test outputs Compiling tarpsigtest v homestefanprojectstarpsigtest Finished dev unoptimized debuginfo targets in s Running targetdebugdepstarpsigtest dba f cbea running test test testssignalreg ok test result ok passed failed ignored measured filtered out Doctests tarpsigtest running tests test result ok passed failed ignored measured filtered out while cargo tarpaulin v yields INFO tarpaulin Running Tarpaulin INFO tarpaulin Building project Finished dev unoptimized debuginfo targets in s DEBUG tarpaulin Processing Targetlib INFO tarpaulin Launching test INFO tarpaulin running homestefanprojectstarpsigtesttargetdebugdepstarpsigtest db ac running test test testssignalreg FAILED failures testssignalreg stdout thread testssignalreg panicked at assertion failed fgloadstdsyncatomicOrderingRelaxed srclibrs stack backtrace backtracebacktracelibunwindtrace at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracelibunwindrs backtracebacktracetraceunsynchronized at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracemodrs stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at srclibstdpanickingrs stdpanickingdefaulthook at srclibstdpanickingrs stdpanickingrustpanicwithhook at srclibstdpanickingrs stdpanickingbeginpanic at rustceae dfe e afdc f a d ddf bsrclibstdpanickingrs tarpsigtesttestssignalreg at srclibrs tarpsigtesttestssignalregclosure at srclibrs coreopsfunctionFnOncecallonce at rustceae dfe e afdc f a d ddf bsrclibcoreopsfunctionrs allocboxedBoxF as coreopsfunctionFnOnceAcallonce at rustceae dfe e afdc f a d ddf bsrcliballocboxedrs rustmaybecatchpanic at srclibpanicunwindlibrs stdpanickingtry at rustceae dfe e afdc f a d ddf bsrclibstdpanickingrs stdpaniccatchunwind at rustceae dfe e afdc f a d ddf bsrclibstdpanicrs testruntestruntestinnerclosure at srclibtestlibrs note Some details are omitted run with RUSTBACKTRACEfull for a verbose backtrace failures testssignalreg test result FAILED passed failed ignored measured filtered out INFO tarpaulin Coverage Results Uncovered Lines TestedTotal Lines srclibrs coverage lines covered change in coverage Error Test failed during run Im not terribly familiar with the inner workings of Tarpaulin but I would speculate that the breakpoint insertions or whatever else tarpaulin actually does to the code in order to measure covered lines dont work well with Unix signal handling code or maybe screw up the atomic ordering Im trying to use tarpaulin to get coverage but its failing to parse the binary I thought it might be something about my project so I made a new lib with nothing other than the default boilerplate and its still giving me the same error Running with the v flag doesnt give me more info tmp with odzt a cargo new lib covtest Created library covtest package tmp with odzt a cd covtest tmpcovtest is v via v with odzt a ls src Cargotoml tmpcovtest is v via v with odzt a cargo tarpaulin INFO tarpaulin Running Tarpaulin INFO tarpaulin Building project Error Failed to get test coverage Error Unable to parse binary INFO tarpaulin Launching test INFO tarpaulin running homejlusbytmpcovtesttargetdebugdepscovtestd ba c fe f e tmpcovtest is v via v with odzt a cargo tarpaulin v INFO tarpaulin Running Tarpaulin INFO tarpaulin Building project Finished dev unoptimized debuginfo targets in s DEBUG tarpaulin Processing Targetlib Error Failed to get test coverage Error Unable to parse binary INFO tarpaulin Launching test INFO tarpaulin running homejlusbytmpcovtesttargetdebugdepscovtestd ba c fe f e As of tarpaulin stores a serialisation of the result TraceMap in targettarpaulin so it can report the change in coverage between runs It would be nice if this could be added to the HTML reports I admit I have zero frontend skill so if anyone fancies tackling this it would be appreciated Hello I am trying to figure out the code coverage of a unique nontest function is this possible Thanks System Linux laptop arch ARCH SMP PREEMPT Mon Oct UTC x GNULinux Rust version rustc e cargotarpaulin version It seems that Tarpaulin has the most trouble when logical lines are split across multiple lines I have a few examples of this behavior I maintain rubikorizuru and Im referring to the code at commit Its easier to see Tarpaulins output on Coveralls but Ill attach the raw output at the bottom of this post On Coveralls we can see that lines of srcconsumerrs are marked as uncovered but they are obviously covered In srcgcrs the same thing is true for line while on the other hand line is wrongly marked as covered when it should be line Here is the raw output from cargo tarpaulin v ignoretests cargo tarpaulin ignoretests v INFO tarpaulin Running Tarpaulin INFO tarpaulin Building project Compiling orizuru v homemikiexporizuru Finished dev unoptimized debuginfo targets in s DEBUG tarpaulin Processing Targettest producer INFO tarpaulin Launching test INFO tarpaulin running homemikiexporizurutargetdebugdepsproducer ef cc b running test test producercanenqueue ok test result ok passed failed ignored measured filtered out DEBUG tarpaulin Processing Targettest consumer INFO tarpaulin Launching test INFO tarpaulin running homemikiexporizurutargetdebugdepsconsumerfe e a d running tests test noheartbeat ok test register ok test oneheartbeat ok test ackedarereleased ok test decodesjob ok test canbestopped ok test unackedtounackqueue ok test rejectedtounackqueue ok test multipleheartbeat ok test result ok passed failed ignored measured filtered out DEBUG tarpaulin Processing Targettest gc INFO tarpaulin Launching test INFO tarpaulin running homemikiexporizurutargetdebugdepsgc ed d running tests test collectonerunswithnojobs ok test collectnoopwithnoconsumers ok test collectrunswithaconsumerandnojobs ok test collectonerunswithsomejobs ok test collectrunswithaconsumerandsomejobs ok test result ok passed failed ignored measured filtered out DEBUG tarpaulin Processing Targettest testutils INFO tarpaulin Launching test INFO tarpaulin running homemikiexporizurutargetdebugdepstestutils a f bdb running tests test result ok passed failed ignored measured filtered out DEBUG tarpaulin Processing Targetlib INFO tarpaulin Launching test INFO tarpaulin running homemikiexporizurutargetdebugdepsorizuru b b d running tests test messagetestscantdecodeifnotstring ok test messagetestscantdecodeifnotmsgpack ok test messagetestspayloadfieldisaccessible ok test messagetestsmessagefieldisaccessible ok test result ok passed failed ignored measured filtered out INFO tarpaulin Coverage Results Uncovered Lines srcconsumerrs srcgcrs srcmessagers TestedTotal Lines srcconsumerrs srcgcrs srcmessagers srcproducerrs coverage lines covered Hi we noticed a few inconsistencies with what lines are considered covered and which are not Some things we found macros in function bodies are not considered covered even if they get executed branch heads are sometimes not considered covered even if their bodies are inline function headers are not always considered covered unsafe blocks are not considered covered initalisation to is sometimes not considered covered refferences as function parameters to inlined functions are not considered covered precompiler directives in function bodies are not considered covered break is not considered covered some let assignments are not considered covered some match statements are not considered covered For this code rust enum E A Bi pub fn fooi i i let e if i EA else EBi match e EA EBx x cfgtest mod tests test fn itworks use cratefoo asserteqfoo asserteqfoo I get a false positive for an uncovered line match e sh cargo tarpaulin V cargotarpaulin version 