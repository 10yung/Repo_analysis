Here conn is netsocket instance so it should be called as one Otherwise request is very likely to end up with crash and PANIC This PR is for the dev branch rather than for master x This PR is compliant with the other contributing guidelines as well if not please describe why x I have thoroughly tested my contribution The code changes are reflected in the documentation at docs Summary I have experienced I C hardware timeouts due to clock stretching I have solved the issue and thought I might share some insights with the community The title would spoil any attempt to write this as a highsuspense investigation report so here are the essentials Situation ESP with the latest standard NodeMCU firmware connected by I C to a Bosch BNO IMU I am using the i c module with the i cSW interface software based bitbanging master mode only synchronous operation Its convenient for validation and testing of my I C commands and making sure I read the BNO datasheet correctly With a I C bus speed set to i cSLOW kHz the ESP and the BNO are communicating happily and reliably Expectation The I C bus is slow and ties down the CPU in synchronous mode So why not delegate the work to one of the ESP hardware I C subsystems This should be simple specify i cHW in i csetup add the appropriate i ctransfer call with a call back function to handle the results of the I C operation whenever they are available Issue It just doesnt work The call back function returns nonsenserandom data and a false ACK flag Using i ctransfer without a call back doesnt work better it just fails with a Lua error and a timeout message Thats surprising because I call i ctransfer without a timeout parameter so it should default to infinite Diagnostic The ESP hardware I C interfaces have a timeout parameter and thats a good feature for reacting to I C bus faults The ESPSDK driver sets this to a default value corresponding to I C SCL clock cycle lengths More precisely with a Mhz ESP clock and a KHz I C bus speed this value is ESP clock cycles ie S The BNO is a busy chip and can ask to slow down I C communication by using clock stretching There is no documented upper bound to this so it could cause a timeout on the ESP You can set any I C bus speed via i csetup and you dont have to stick to the predefined values of i cSLOW etc A slower I C bus speed means a higher timeout value In my case an I C bus speed of Khz does the trick and I am getting reliable I C interaction again However checking the ACK flag of the call back function is still highly recommended Workaround Leave the firmware as it is and possibly add a cautionary note in the documentation of the i c module I can do that but read further Suggestions Add a parameter to i csetup to modify the default timeout value I find it a pity to have to use a slower I C bus speed just because one I C peripheral chip may need some extra time to return results I would rather keep the higher bus speed and adapt the timeout value I have extended the i csetup function to accept a fifth optional parameter as a integer timeout multiplier I had to reduce the bus speed by three previously to get reliable operation so now a x timeout multiplier should be enough I can now call i csetup i cHW pinSDA pinSCL i cSLOW The timeout value is now CPU clock cycles and I get reliable operations Adapt i csetup to return a value By the way i csetup does not return any value contrary what the documentation states I have also adapted this function to return the I C bus speed for the i cSW interface or the timeout value for the i cHW interfaces Adapt i cread to standard I C multibyte read practice By the way also standard I C practice for a multi byte read is to have the master receiver ACKing each byte except the last The ESPSDK does this but the the glue routines from lua doubleguess this with the end result of ACKing the last byte Not really according to specifications but it still works most likely because the I C slave will stop sending data after seeing an bus STOP condition For compliances sake I have also adapted the i cread function to that effect Conclusion I hope this comments can help any others with similar issues If it is of interest to the community I can contribute my code and the updated documentation via I suppose a GitHub fork adapt and pull request Let me know what you think of it Fixes x This PR is for the dev branch rather than for master x This PR is compliant with the other contributing guidelines as well if not please describe why x I have thoroughly tested my contribution x The code changes are reflected in the documentation at docs Description of and rationale behind this PR Trying to add documentation for tlscertauth Please review and tell me if it is nonsens as I dont really know much about tls is possibly are more stable version of what we currently use x This PR is for the dev branch rather than for master x This PR is compliant with the other contributing guidelines as well if not please describe why I have thoroughly tested my contribution x The code changes are reflected in the documentation at docs These are addressing but there is a long way to go Still open PRs early and often As per and in solidarity with this file is basically a random subset of lwip and needs to go away Thats going to take some fairly deep surgery but well be better for it As far as I can tell anyway these things are just obstruction rather than abstraction over lwip See for example the damage they cause with it is neither obvious nor documented that espconngethostbyname passes the espconn structure as the callback argument and even if it were its also not obvious that this could be cast back to the lmqttuserdata structure of which it is the first member We should just be calling dnsgethostbyname ourselves and passing the appropriate lua object to the callback Am I missing something and espconn is actually useful If not I think I will propose that we attempt to excise it from our tree Actual behavior Build fails in Docker Generating esp projectld binsh optnodemcufirmwarecomponentsbasenodemcuaddrodataldsh not found optnodemcufirmwarecomponentsbasenodemcuMakefileprojbuild recipe for target optnodemcufirmwarebuildbasenodemculdpatched failed make optnodemcufirmwarebuildbasenodemculdpatched Error make Leaving directory optnodemcufirmware Makefile recipe for target all failed make all Error Directory of D Home ESP nodemcufirmware components basenodemcu DIR DIR addrodataldsh componentmk DIR include ipfmtc Kconfig DIR ld lextrac linitc lnodeauxc Makefileprojbuild uartc usermainc Files bytes Dirs bytes free Since the file is there I thought its because of the double slash in the path basenodemcuaddrodataldsh and I wrapped BASENODEMCUDIR with abspath in the Makefileprojbuild BASENODEMCUDIRabspath dir lastword MAKEFILELIST Double slash has gone but the build is still failing Generating esp projectld binsh optnodemcufirmwarecomponentsbasenodemcuaddrodataldsh not found optnodemcufirmwarecomponentsbasenodemcuMakefileprojbuild recipe for target optnodemcufirmwarebuildbasenodemculdpatched failed make optnodemcufirmwarebuildbasenodemculdpatched Error make Leaving directory optnodemcufirmware Makefile recipe for target all failed make all Error Versions Windows Enterprise x Docker desktop Git branch devesp Latest commit bfd Expected behavior Compiling with define I CMASTEROLDVERSION commented out should enable usage of new I C driver Actual behavior Code does not compile with error thrown C CC appdriveri cmasterc i cmasterc In function i cmastersetDC i cmasterc error value computed is not used Werrorunusedvalue READPERIREGRTCGPIOINDATA asm volatilenopnopnopnop cc all warnings being treated as errors Makefile recipe for target outputeagledebugobji cmastero failed make outputeagledebugobji cmastero Error make Leaving directory optnodemcufirmwareappdriver Makefile recipe for target subdirs failed make subdirs Error make Leaving directory optnodemcufirmwareapp Makefile recipe for target subdirs failed make subdirs Error make Leaving directory optnodemcufirmware Test code define I CMASTEROLDVERSION on userconfigh NodeMCU version commit c e d a e e e e ec e b HEAD dev origindev Hardware docker nodemcubuild Missing feature An easy way to generate appincludeuserh from config presets that can inherit and override each other At the very minimum lets do that Debian priority config thingy where a bash script sources all rc from some directory in alphabetical order And I say bash because in that case we should use a config dictionary not export top level environment variables Justification Look at the sed commands in nodemcucustombuild Theyre clearly a cry for help While I might help with making the sed stuff more readable Id prefer we dig deeper to the root of the problem Workarounds Im currently trying to roll my own rd party config wizard but with the current user header files approach its a mess to even confirm compatibility of firmware and wizard versions My approach would be to combine this with add a toplevel directory buildconfigdefault with some lua files that describe available options and a toplevel directory buildconfigcustom where users can put numbered subdirs with numbered config override lua files Having the subdirs should make it easier to dockermount or symlink independent config patch collections without messing up their internal numbering Since Im new to LUA in case LUA turns out too cumbersome I might use python or bash as a temporary draft just so we have a better basis to talk about Would that be a good start