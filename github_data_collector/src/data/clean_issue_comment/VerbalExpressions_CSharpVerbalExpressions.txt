 Project looks like dead and poor documented Is there alternatives Hi I admire your work and these are some suggestions Add Const as another name to Then Add another overload to AnyOf that accepts Char Array because its more friendly public VerbalExpressions AnyOfchar value bool sanitize true if value null throw new ArgumentNullExceptionvalue return AnyOfstringJoin value Range Method can be more friendly like this Rangechar start char end Rangeint start int end A Repeatstring Valuem int min int max will be useful and A RepeatVerbalExpressions expr int min int max will be more friendly than BeginCaptureEndCaptureRepeatPrevious besides RepeatPreviousint min int max Need some methods without parameters such as Letter UpperCaseLetter LowerCaseLetter Digit Boundry and other famous formulas All Repetition methods needs optional param for laziness Where Are LookAhead LookBehind AtomicVerbalExpressions Exp Add IfVerbalExpressions expr VerbalExpressions expr VerbalExpressions expr to imoement regex conditions I have changes the csproj into xproj I have also added the double dlls in nuget package so there is a net and new netstandard Make a Verbal Expression wizard that helps you visually create and test the expressions validations and captures Sorry for wasting your time and mine I didnt read the code and thought you dont have this Also misunderstood how this works I thought it was an alternative to regex now I understand that its a regex builder Is the reverse being considered Looked at the tests and saw the capture syntax which is much better than mine BeginCapture EndCapture My original comment Matching syntax for getting lists of text Saved groups MatchBy Grouping Non saving groups MatchFor Dependency And Or AllThat FirstThat LastThat AnyThat Is IsNot IsLike wildcard syntax HasFormat StringFormat syntax HasDate DateFormat DateSeperator HasTime HasDateAndTime Until inclusive Before non inclusive until After starts after the found text HasUnicode HasAscii Has calls delegate with params C TestMethod public void TestingIfWeHaveAValidURL Create an example of how to find the params in a RESTful url var verbEx new VerbalExpressions MatchFor nameparam code AnyThat afterOccurence all matches after st param found by next match this is the way to get parenthesis around a group of rules MatchFor name param name AfterOrAfter MatchBy name param name AnythingBefore AndMatchFor name param val After matchFor param name MaybeEnvironmentQuotemark MatchByname param val Until MaybeEnvironmentQuotemark ThenOrEndOfLine Create an example URL var testMe var matches verbExMatch testMe AssertIsGreaterThan matchesCount The URL has no parameters ConsoleWriteLineWe have a correct URL Like the look of this lib but was wondering how I could produce something like this age d That way I can use it in a Nancy route definition like so Get age d parameters Hello World When you have an AnythingBut followed by a Maybe assuming the value of Maybe isnt the value of AnythingBut then the Maybe should be ignored For instance the two following are semantically the same var verbEx VerbalExpressionsDefaultExpression StartOfLine Then http Maybe s Then Maybe www AnythingBut EndOfLine var verbEx VerbalExpressionsDefaultExpression StartOfLine Then http Maybe s Then Maybe www AnythingBut Maybe EndOfLine Both of the above should output httpswww because the AnythingBut is greedy and will capture whatever is in the Maybe When using the Range method with range arrays greater than it causes invalid Regex to be output An example can be seen with the following snippet taken from a Unit test and modified var verbEx VerbalExpressionsDefaultExpression object range new object verbExRangerange That expression outputs which is obviously invalid regex Not sure what is supposed to happen here Maybe throw an ArgumentException Hi all I ran the following test to check how well verbal expression performs compared to a regular expression Test public void TestingIfWeHaveAValidURL var testMe var swVerb new Stopwatch swVerbStart verbEx VerbalExpressionsDefaultExpression StartOfLine Thenhttp Maybes Then Maybewww AnythingBut EndOfLine AssertIsTrueverbExTesttestMe The URL is incorrect swVerbStop var swRegex new Stopwatch swRegexStart var regex new Regex https w w w AssertIsTrue regexIsMatch testMe swRegexStop Verb ms Regex ms ConsoleWriteLineVerb Regex swVerbElapsedMilliseconds swRegexElapsedMilliseconds I ran it a couple of times and verbal expression runs at about milliseconds while regular expression runs in about ms Same results returned in other tests I did Im considering using the verbal expression in my indexing project so this time gap is too big What do you think Thanks 