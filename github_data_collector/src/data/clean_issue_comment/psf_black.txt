Is your feature request related to a problem Please describe When using the vim plugin and the vim setup is insufficient version haspython the error message printed to messages in vim does not tell the user which plugin is the problem All the vim user sees is This script requires vim with Python support And the user is left with no idea what this script is Describe the solution youd like Change the message so it says something like The blackvim plugin requires vim with Python support Describe alternatives youve considered A clear and concise description of any alternative solutions or features youve considered None Additional context Add any other context or screenshots about the feature request here Theres different code on the second pass This is with black version b my output from uname a though its probably not useful here Darwin myhostlocal Darwin Kernel Version Sat Nov PST rootxnu RELEASEX x Does this bug also happen on master To answer this you have two options This bug doesnt happen on master strangely enough Additional context Add any other context about the problem here Heres the diff from varfolderswtxh t fx n xhxlx q t gnTblkwbstcmcslog source first pass class TypeCheckActionAction def initself optionstrings Sequence Text dest Text args kwargs selftypealias kwargspoptypealias superinitoptionstrings dest args kwargs def callself parser ArgumentParser namespace Namespace values optionstringNone def call self parser ArgumentParser namespace Namespace values optionstringNone Acts like Store but does additional type checking typeguardchecktypeselfdest values selftypealias setattrnamespace selfdest values for name param in sigparametersitems addargumentkwargs getkwargsfromparamparam if paramkind is ParameterPOSITIONALONLY argnames paramname argnames paramname elif paramkind is ParameterKEYWORDONLY argnames fparamname elif paramkind is ParameterVARPOSITIONAL argnames k kwarg fparamname argnames k kwarg fparamname addargumentkwargs nargs addargumentkwargs action append elif paramkind is ParameterVARKEYWORD argnames k kwarg fparamname argnames k kwarg fparamname addargumentkwargs nargs addargumentkwargs action append elif paramkind is ParameterPOSITIONALORKEYWORD TODO Can we make positional args an option as well parseraddargumentparamname addargumentkwargs else kwargdict action storetrue elif paramannotation is list Assume its a list of strings kwargdict type str kwargdict nargs elif basetype getattrparamannotation origin None is list Its a typing construct elif basetype getattrparamannotation origin None is list Its a typing construct kwargdict action TypeCheckAction kwargdict type paramannotationargs kwargdict typealias paramannotation kwargdict nargs elif basetype is dict first pass second pass elif paramannotation is list Assume its a list of strings kwargdict type str kwargdict nargs elif basetype getattrparamannotation origin None is list Its a typing construct Its a typing construct kwargdict action TypeCheckAction kwargdict type paramannotationargs kwargdict typealias paramannotation kwargdict nargs elif basetype is dict When black is called with either the check or diff option files are not actually reformatted In the former check case black checks whether any files would change and if so correctly uses the conditional case in the terminal output eg files WOULD BE reformatted my capitalization In the latter diff case the output says files reformatted when instead the conditional case should also be used since files are not actually reformatted PR forthcoming Describe the bug Black fails to generate grammar files when using it as a library as it has no cache directory To Reproduce Run docker build nocache with the following Dockerfile Dockerfile FROM pythonalpine RUN apk add quiet nocache gcc musldev RUN pip install q black RUN black version RUN python c import logging loggingbasicConfiglevelINFO import black using black at the CLI will generate the cache directory RUN black usrlocallibpython sitepackagesblackpy and now the error goes away RUN python c import logging loggingbasicConfiglevelINFO import black Output Sending build context to Docker daemon kB Step FROM pythonalpine c e a Step RUN apk add quiet nocache gcc musldev Running in b ebc ca Removing intermediate container b ebc ca eaf ac ee Step RUN pip install q black Running in f cf c Removing intermediate container f cf c f f d a Step RUN black version Running in a e c ba black version b Removing intermediate container a e c ba b a Step RUN python c import logging loggingbasicConfiglevelINFO import black Running in e fb de INFOblib to pgen driverGenerating grammar tables from usrlocallibpython sitepackagesblib to Grammartxt INFOblib to pgen driverWriting grammar tables to rootcacheblack b Grammar final pickle INFOblib to pgen driverWriting failed Errno No such file or directory rootcacheblack b tmpz smnh INFOblib to pgen driverGenerating grammar tables from usrlocallibpython sitepackagesblib to PatternGrammartxt INFOblib to pgen driverWriting grammar tables to rootcacheblack b PatternGrammar final pickle INFOblib to pgen driverWriting failed Errno No such file or directory rootcacheblack b tmpo z bd Removing intermediate container e fb de f b a Step RUN black usrlocallibpython sitepackagesblackpy Running in cecdca b All done file left unchanged Removing intermediate container cecdca b b b Step RUN python c import logging loggingbasicConfiglevelINFO import black Running in aed b c d INFOblib to pgen driverGenerating grammar tables from usrlocallibpython sitepackagesblib to Grammartxt INFOblib to pgen driverWriting grammar tables to rootcacheblack b Grammar final pickle INFOblib to pgen driverGenerating grammar tables from usrlocallibpython sitepackagesblib to PatternGrammartxt INFOblib to pgen driverWriting grammar tables to rootcacheblack b PatternGrammar final pickle Removing intermediate container aed b c d c a d Successfully built c a d Expected behavior I expect using black as a library to not fail to generate grammar tables This affects programs that use black only a a library like jupyterlabcodeformatter Does this bug also happen on master Yes Additional context Add any other context about the problem here This is the root cause of Describe the style change A line containing a type ignore comment caused a really weird output It has split an equality operation on the operator which looks very unnatural Even though the line would fir well into the maximal line length making the split unnecessary It is probably easiest to see in the example below Examples in the current Black style Think of some short code snippets that show how the current Black style is not great def eqself other Any bool if not isinstanceself otherclass return False return selfdevice otherdevice and type ignore selfscope otherscope and selfid otherid return selfdevice otherdevice and selfscope type ignore otherscope and selfid otherid Desired style How do you think Black should format the above snippets def eqself other Any bool if not isinstanceself otherclass return False return selfdevice otherdevice and type ignore selfscope otherscope and selfid otherid return selfdevice otherdevice and selfscope otherscope type ignore and selfid otherid If a type hint ends in a trailing space then INTERNAL ERROR Black produced code that is not equivalent to the source is thrown Minimal example class Part def initself text str None selftext text type str Note trailing space after the final str Output error cannot format tmppy INTERNAL ERROR Black produced code that is not equivalent to the source Please report a bug on This diff might be helpful tmpblkkbv kwijlog Oh no file failed to reformat cat tmpblkkbv kwijlog src dst id self str Name Attribute typecomment str str str str value Name ctx Load Load Obviously this is trivial to fix in any given case by nixing the trailing space and running black again But in an automated context it might not be so easy Is your feature request related to a problem Please describe There are a number of open issues related to handling blank lines etc but I was wondering whether Black should have an opinion about all blank lines to further ensure code consistency and remove unnecessary style nits In addition to existing issues in relation to blank lines around comments docstrings etc I wonder if Black should also be opinionated about whether blank lines should be present either preceding within or succeeding if statements loops tryexcept blocks multiline statements return statements inline functions etc Describe the solution youd like Personally for if statements loops tryexcept blocks and multiline statements I prefer having a blank line preceding and succeeding the statement if the indentation level is the same ie python try x intinput x x y amultilinestatement x x x x x x x x x x x x x x x x x x x x if x printeven else printodd for i in rangex for j in rangex if i j printi j except ValueError as e printstre Describe alternatives youve considered None This patch adds the ability for users to let gblackquiet to suppress output on Reformatted in and Already well formatted messages Describe the bug The BlackUpgrade process in vim installs b At the time of writing the latest version is b I have b installed via Homebrew To Reproduce Install the latest vim plugin from this repository Remove the black virtualenv directory at vimblack by default or customized via gblackvirtualenv Open a Python file with vim causing the plugin to reinstall Black Run BlackVersion Expected behavior I expect the latest version to be installed this process reliably installs a previous version however Environment please complete the following information Version master currently af b c f ac f d a feac OS and Python version MacOS Mojave G Python Vim version May compiled Oct Does this bug also happen on master Yes Additional context Im encountering the same problem as Ive come to believe that it is due to this version mismatch between the installed Black and the version the vim plugin expects None of the remediations suggested in work for me Describe the bug A comment inside a dict comprehension causes black to raise an internal error The problem seems reproducable via black playground Code python converterpy def convertcollection replace all variables by integers replacementdict variable findex for index variable is reserved as line terminator in enumeratecollectionvariables start Error python def convertcollection replace all variables by integers replacementdict variable findex for index variable is reserved as line terminator in enumerate collectionvariables start Log error cannot format D path to converterpy INTERNAL ERROR Black produced invalid code invalid syntax unknown line Please report a bug on kissues This invalid output might be helpful C Users XXX AppData Local Temp blk om a ylog To Reproduce Run black with the total defaults black directory on a file that contains the code above Expected behavior Produce valid code when formatting dict comprehensions with comments inside Environment please complete the following information Version black b OS and Python version Win x Python tagsv c a a b Oct MSC v bit AMD on win Does this bug also happen on master Yes 