When coreutils is compiled with the enablesinglebinary option all the individual commands are just symlinks to a larger single binary named coreutils the same way that a typical busybox binary works In this situation progress gets back the name coreutils instead of for example dd when reading proc pid exe Unfortunately this means that on systems with singlebinary coreutils all of your running commands will show up as coreutils instead of the command you actually typed Instead of hard coding interesting proc names we could have a config file etcprogressconf holding them it seems progress is not able to get the progression of a piped command for example progress c xz xz signaldesktopbinsignaldesktopbin x pkgtarxz MiB MiB progress wc xz xz signaldesktopbinsignaldesktopbin x pkgtarxz MiB MiB KiBs ps o args COMMAND xz c z I wasnt able to find what was piped to xz because the process terminated before I had time to investigate but I was running arch update through yay From a top output I suppose this was piped from a bsdtar command but I do not have its details Should progress be able to monitor process receiving their input from piped command I suppose it should be possible to follow the pipe but I dont know at all how complex this could be Support for the download utility aria would be appreciated This is a new feature progress g p pid will show the current progress of ltpid and all the processes max compiletime constant that are in ltpids process group ps o pgrp And progress m g p pid will monitor the group till ltpid exits This can be useful when monitoring shell scripts that copy data using several basic commands eg script xterm e progress m g p wait from command line xterm e progress m g p from inside the script The second line above can be added inside any script that monitors its own copy progress Note Implemented for Linux only The APPLE define branch has a stub This commit also adds zip unzip pixz pigz pbzip to the list Knowing when an archive is finally unzipped would be greatly appreciated Everything works fine when copying and moving files on local partitions Progress is updated after specified times for example with using watch progress q When copying and moving files to a NAS over the network connection the progress is not shown More specifically no process to be watched is recognised at all by progress and so nothing at all is displayed until the very end of the copymove process where a is shown Not even the time of the watch progress q call is updated during the run of cp and mv until the very end Thinking this could have to do with process priority I changed the niceness of the running watch and progress calls in different constellations but to no effect This was tested on ArchLinux and Ubuntu with file sizes of above GB so that the process should have been long enough Help in clarifying this issue is greatly appreciated Indenting all the project with sublime to make it more readable