 Add CoinBene spot exchange Hi guys im working on the implementation one the connectors to the DEX exchange and facing with a interesting problem For submit orders to our exchange we need to sign a request typesvalues by KeccakSha Sha implementation in the Exchange class in the CCXT is generate a types for values automatically but for correct hash in the side our exchange we need to use a uint instead of uint in the one of request parameters In the Exchange class for get hashes with custom types you use a ethAbisolidityKeccak but in the my market implementation i cant get access to this method from Exchange class How can I access this function or what alternatives can I use to implement this using the internal CCXT functionality without using external dependencies makes all parseBalance code the same as the js code with incremental balance structures the free keys were getting parsed as currencies Please clarify the semantics of negative and zero precision parameter of decimaltoprecision when SIGNIFICANTDIGITS precisionMode is used When precisionMode is set to SIGNIFICANTDIGITS its clear how to treat positive values of the precision parameter its the number of significant digits to keep in the result of decimaltoprecision However negative as well as zero precision does not have any mathematical or practical meaning for this precision mode Particularly I cannot understand the following results in the testdecimaltoprecisionpy assertdecimaltoprecision TRUNCATE SIGNIFICANTDIGITS assertdecimaltoprecision TRUNCATE SIGNIFICANTDIGITS PADWITHZERO assertdecimaltoprecision ROUND SIGNIFICANTDIGITS assertdecimaltoprecision ROUND SIGNIFICANTDIGITS okay I can imagine this can mean zero significant digits so the result is So is it true that the result of calling decimaltoprecisionx ROUND SIGNIFICANTDIGITS should be for any x Same for TRUNCATE rounding mode But then the following is completely hidden for understanding assertdecimaltoprecision TRUNCATE SIGNIFICANTDIGITS assertdecimaltoprecision TRUNCATE SIGNIFICANTDIGITS assertdecimaltoprecision TRUNCATE SIGNIFICANTDIGITS OS linux Programming Language version python CCXT version Exchange binance Method all several Binance supports easy switching to the futures api by initializing with ccxtbinancedefaultType future which will then internally swaps somemost endpoints to use the FAPI endpoints I think this same approach should be applied to the margin API with ccxtbinancedefaultType margin using the sapi endpoints Currently specifying defaultType margin will have ccxt use the futures API as itll end up in the else tree within all methods Work in progress do not merge implement methods createOrder cancelOrder cancelAllOrders fetchOrder fetchOpenOrders fetchClosedOrders fetchStatus implement handleErrors method add option fetchOrderOnCreate This would simplify the use of these functions in the exchanges they often reimplement these methods simply because a different rounding mode is to be used by the code logic Hi if possible please add DCoin Thanks 