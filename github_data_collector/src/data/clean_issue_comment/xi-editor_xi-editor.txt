 XiEditor Issue Template x I have searched existing issues and could not find my issue x I have studied the documentation Please ensure the issue meets these requirements If you are not sure questions are welcome on the xieditor channel on Details OS Fedora sh rustc version rustc ea rustc installed via rustup Not using frontend sh userhostxieditor cargo install path rust Installing xicore v homeuserxieditorrust Updating git repository Updating cratesio index warning Patch onig v was not used in the crate graph Patch onigsys v was not used in the crate graph Check that the patched package version and available features are compatible with the dependency requirements If the patch has a different version from what is locked in the Cargolock file run cargo update to use the new version This may also occur with an optional dependency that is not enabled Compiling xicorelib v homeuserxieditorrustcorelib error E mismatched types corelibsrcwatcherrs let inner watchertxevent Durationfrommillis expectwatcher should spawn expected struct crossbeamchannelchannelSender found a different struct crossbeamchannelchannelSender note expected type crossbeamchannelchannelSenderstdresultResultnotifyEvent notifyError found type crossbeamchannelchannelSender note Perhaps two different versions of crate crossbeamchannel are being used corelibsrcwatcherrs let inner watchertxevent Durationfrommillis expectwatcher should spawn error aborting due to previous error For more information about this error try rustc explain E error failed to compile xicore v homeuserxieditorrust intermediate artifacts can be found at homeuserxieditorrusttarget Caused by could not compile xicorelib To learn more run the command again with verbose Expected vs Actual Expected to build without failures and install to CARGOPATH Actual build failure Closes Review Checklist Here is a list of the things everyone should make sure they do before they want their PR to be merged I have responded to reviews and made changes where appropriate x I have tested the code with cargo test all rustrunallchecks I have updated comments documentation related to the changes I made x I have rebased my PR branch onto xieditormaster Summary This adds a new movement type BeginningOfLine and EndOfLine When a movement of either one of these types is performed the caret is moved to the soft beginningend of line which is defined as the firstlast offset where a nonwhitespace character appears If the caret is already on this position the caret is then moved to the hard beginningend of line Review Checklist I have responded to reviews and made changes where appropriate x I have tested the code with cargo test all rustrunallchecks x I have updated comments documentation related to the changes I made x I have rebased my PR branch onto xieditormaster So while trying to add the spellchecking plugin Ive noticed that we dont really have a way to communicate what language to choose Since availablelanguages talks about programming languagessyntaxes and not languages as in EnglishGerman and so on we cant really use that I think since syntax selection shouldnt clasg with language selection you could totally want rust as syntax and still select English has language to correct comments cmyr Itd be nice if we were to translate strings such as error messages otherwise frontends have to do that From what I can see there are two ways to go about this Gettext which would mean that wed have to depend on a C lib Its pretty advanced though and has very good support by translation tools such as Weblate which I use for Tau Fluentrs which is being used by Firefox already IIRC and is pure Rust Its in its early days though and isnt well supported in translation tools yet We could also just ignore this and leave the translating to the frontends eg in alert frontends can match the error code and send the localized message then XiEditor Issue Template x I have searched existing issues and could not find my issue x I have studied the documentation Please ensure the issue meets these requirements If you are not sure questions are welcome on the xieditor channel on Expected vs Actual Actually client can set only one extras dir In a discussion it was mentioned to use XDG specification XDGDATADIRS to place systemwide installed plugins which is a collection of directories Can protocol be updated to allow client to set multiple directories for extras XiEditor Issue Template x I have searched existing issues and could not find my issue x I have studied the documentation Details Implement movesubwordleft movesubwordleftandmodifyselection movesubwordright movesubwordrightandmodifyselection which should recognize CamelCase and snakecase sub word boundaries and move accordingly Examples Character denotes the cursorposition CamelCase movesubwordright CamelCase movesubwordright CamelCase snakecase movesubwordright snakecase movesubwordright snakecase snakecase movesubwordleft snakecase movesubwordleft snakecase Another difference between moveword and movesubword would be the selection of the separator asdfasdfasdf movewordright asdfasdfasdf movewordright asdfasdfasdf whereas asdfasdfasdf movesubwordright asdfasdfasdf movesubwordright asdfasdfasdf movesubwordright asdfasdfasdf Similar to we would like to be able to use editing functions independently of an Editor or a runloop For more detail see For an illustration of how this could be done see the editops mod in the ximodal branch Note that having this be in a submodule of editorrs isnt desirable long term A goal of this work should be to make it much easier to write simple tests of various edit operations A user of the xicore library should be able to use and modify selections without needing to use a View The main challenge here is that we need to introduce some abstraction for representing the things that are currently provided by the view such as navigation up and down by arrow keys which depends on line breaks My inclination is to introduce a trait that describes this behaviour For more details see also a version of this exists in my ximodal branch used for the rust playground see here Gluon is a statically type inferred scripting language which is embeddable in Rust This is potential a superb language to write some expansions imho