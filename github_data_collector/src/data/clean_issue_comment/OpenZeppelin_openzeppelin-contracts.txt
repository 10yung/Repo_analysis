This replaces the old readme content with the one available at but keeps the contributing and security sections along with the badges and logo Because we have a single unified site for all x versions we do what I call contentversioning the documentation content itself provides information about different versions For example the docs for AddresstoPayable indicate its only available starting from v We should add the same notes for all new features in the upcoming v release see the changelog for what these are Motivation Im subclassing ERC to build custom tokens There is some functionality that would beneficial to use such as burn and callTokensToSend but isnt made available to subclasses because their visibility is private Details My request is that functions that are private instead become internal to allow for easier extensibility I dont want to cutandpaste anymore See Briefly describe the issue youre experiencing Tell us what you were trying to do and what happened instead After deploy ERC Contract when I am trying to use transferFrom or any function its showing Gas estimation errored with the following message see below The transaction execution will likely fail Do you want to force sending gas required exceeds allowance or always failing transaction Remember this is not a place to ask for help debugging code For that we welcome you in the OpenZeppelin Community Forum Environment Tell us what version of OpenZeppelin Contracts youre using and how youre using it Truffle Remix etc Details Describe the problem you have been experiencing in more detail Include as much information as you think is relevant Keep in mind that transactions can fail for many reasons context is key here Code to reproduce bug We will be able to better help if you provide a minimal example that triggers the bug This pull request corresponds to issue This issue has yet to be discussed but as I had already written the code before opening it I chose to create the PR for reference while discussing the issue Please do read and join the discussion Fixes Changes for this PR are in the lifecycle and the access folders Added RevokerRole contract in access This is a new role that corresponds to the Revokeble contract described below Added Revokable contract in lifecycle This contract allows any account with the Revoker role to call a revoke method which permanently revokes the current contract This adds a whenNotRevoked modifier that reverts if the contract is revoked Revoking cannot be undone similarly to Pausing but permanent View I would like to start a short discussion about a possible new contract at the lifecycle namespace next to the pausable one The Pausable contract allows developers to pause a contracts functions and later if desired unpause it This means that in case of emergency or if a bug is detected someone can call the pause method on the contract and quickly disable all functions with the appropriate modifier I would like to propose we add a Revokable contract with its corresponding RevokerRole exactly same design as the Pausable feature that allows developers to permanently disable a contract if needed This means should a problem arise they can simple revoke the contract and rest asured that in not way will that contract ever be unpaused In its workings it consists of a Pausable contract without the unpause method I have already written the code for the feature described and later realized I had not opened an issue so I created the PR so we can view the changes while discussing the feature You can find the PR here A variation of this feature would be to consider the Pauser and Revoker roles as one this is a LifecicleController role or rather some better name This would mean that a signle contract can implement both Pausable and Revokable for temporary and definitve disabling of the contract but instead of having to manage two roles one for each feaure they could simply have a single role that is in charge of pausing unpausing or revoking the contract This last part is rather controversial but I think its worth a short discussion about whether the role is supposed to enable pausing or managing the whole lifecycle Motivation There is no current contract to swap we have to use Kybernetwork or related stuff for exchange of token Can you guys figure it out if we can make a contract for thisWOuld love to give my inputs Sorry this is more of the question rather than a feature request or bug report Referring to this commit The allowed method is moved to be after transfer What is the rationale behind that nventuro The allowance used to be reduced before doing the transfer Should possible further actions that depend on allowance be checked by deducting the allowance first before committing to the actions As mentioned in this is a simple implementation of the metadata URI part of ERC Im still a bit confused on how to do tests for OpenZeppelin this is my first PR to the project so I have not added tests in this PR for now Help would be appreciated Motivation Is your feature request related to a specific problem Is it just a crazy idea Tell us about it OpenZeppelin Contracts support for Solidity has been requested in the forum Details Please describe your feature request in detail Create a version of OpenZeppelin Contracts with support for Solidity Make sure that you have reviewed the OpenZeppelin Contributor Guidelines 