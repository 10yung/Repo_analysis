Ive come across two instances of a false positive ModuleInitialize warnings when using anonymous class definitions First the RSpec related one ruby module Alfa RSpecdescribe Bravo do letklass do Classnew do def initialize end end end end end And secondly a DSLbased one ruby module Alfa bravo Classnew do def initialize end end end The DSL variant is probably not very likely to be done in a realworld scenario but technically the initialize method is not defined on the module that Reek warns about The RSpec variant is something Ive come across in the real world however If the anonymous class is assigned to a constant it does not fail however which makes sense cause its no longer an anonymous class ruby module Alfa Bravo Classnew do def initialize end end end A slightly different variant of this was reported in and fixed in but it specifically requires the anonymous class definition to be within a method definition on the module Hence both of these are not reported ruby module Alfa def selfbravo Classnew do def initialize end end end end ruby module Alfa def bravo Classnew do def initialize end end end end Hello I would like to propose a new smell which I named after one of the worst web design trends of the mid s the word cloud It happens when large arrays or string or symbol literals are arranged with several elements on the same line Example from RuboCop ruby MANYCHILDNODES i dstr dsym xstr regexp array hash pair mlhs masgn orasgn andasgn undef alias args super yield or and whilepost untilpost iflipflop eflipflop matchwithlvasgn begin kwbegin return inmatch casematch inpattern matchalt matchas arraypattern arraypatternwithtail hashpattern constpattern freeze This layout makes it nearly impossible to add edit or remove an entry without rearranging the entire array lest you want to end up with line length offenses The resulting git diff is a total mess with little indication of what was actually changed You can actually see from this example that something was probably removed from the second line of the array at some point leaving it jarringly short Fixing that would require all subsequent lines to be shifted I speculate that this kind of layout is a result of an irrational fear of vertical space that RuboCop itself is probably at least partially responsible for with its MetricMethodLength and MetricClassLength rules Run on xenial distribution Stop unsetting JAVAOPTIONS This value is not set in VMbased builds Always use latest micro versons of JRuby and Build on Rubinius Given the following code ruby def method case x when a if ymethod amethod end when b if ymethod bmethod end end end reek reports a DuplicateMethodCall for ymethod Yes ymethod appears two times in this method however it is only called at most once Therefore I think that this is a false positive Hi I found an issue about Instance Variable Assumption instancevariableassumption that occurs when a class have a Struct with its own initialize method in its block instancevariableassumption Example code ruby class Foo Bar Structnewa do def initializea super p bar created end end def initialize foo foo end def foo foo foo end end When I run reek against this file Reek reports a warning of Instance Variable Assumption even though foo in Foo class is initialized correctly InstanceVariableAssumption Foo assumes too much for instance variable foo It looks like the cause is Bar which has a block containing an initialize method I confirmed that Reek did not warn if Bar does not have an initialize method Bar is defined by normal class syntax class Bar end Bar is defined after the initialize method of Foo Similar issue CSV from standard library uses a lot of methods that yield a csv file that is opened and closed at the end of the block Tempfilecreate do the same Sample code ruby CSVgenerate headers metric value writeheaders true do csv metrictypesmap do id valuetype csv id SAMPLEVALUE valuetype end end Tempfilecreatefoo hometemp do f arrayeach do element fputs element end end Im not sure if I can list all the method names but I would use open create and generate On CSV there is also the new method that receives a block but Im not sure if it can be ignored I cant think on an example where it is used as an iterator but Im not sure Currently tap is the only ignored method what you thing about it Setup Rails app where helpers smell of UtilityFunction reekyml yml directories apphelpers UtilityFunction enabled false apphelpersfoohelperrb ruby module FooHelper def smellymethodbar barpresence end end Happy Path sh reek showconfigurationpath apphelpersfoohelperrb Using reekyml as configuration file Inspecting files Possible Bug When linting through atomlinter the current working directory cwd is set to the one the file being linted exists in this case apphelpers Reek will still find the correct reekyml from its ancestors first in app and ultimately on the projects root But it wont match the directory apphelpers because its looking for apphelpers relative to the cwd instead of relative to the configuration file sh cd apphelpers reek showconfigurationpath foohelperrb Using reekyml as configuration file Inspecting files S foohelperrb warning UtilityFunction FooHelpersmellymethod doesnt depend on instance state maybe move it to another class Im on reek Is there any way to get reek to analyze thor files They seem to be ignored no matter what So that text editors highlight this file better When updating from v to v running reek from CLI and RakeTask has different outcomes img width altScreen Shot at PM src My rake configuration is ruby ReekRakeTasknew do t tconfigfile reekyml tsourcefiles FileList rb excludevendorrb end The problem is that the rake task finds the configuration file changing its name causes a file not found error but doesnt consider the directories rules like yml directories dbmigrate FeatureEnvy enabled false UncommunicativeVariableName enabled false IrresponsibleModule enabled false UtilityFunction enabled false TooManyStatements enabled false 