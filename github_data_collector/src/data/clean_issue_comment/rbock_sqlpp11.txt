Does sqlpp support a connection pool What do I need to do It is expected that CMake packages can be found multiple times without errors The target generated and defined by CMake eg in a Targetscmake file have a similar guard Hi Thank you for this library I just wanted to ask if there are any guarantees regarding thread safety More specifically if I compile sqlite with thread safety enabled can I use the same sqlppsqlite connection object for requests from multiple threads I suspect that the answer is no but want to make sure anyway Hi Seems in the wishlist to improve wiki contributions For now i will paste here Selectmd at the end JSON reading as currently unsupported feature C void readdbjson auto db mysqldbgetdblazydb stdstringstream sql sql SELECT json username FROM users auto statement sqlppcustomquerysqlppverbatimsqlstr withresulttypeofsqlppselectsqlppvalueusernameassqlppaliasa for const auto row dbstatement stdcout ID rowa stdendl Removemd at the end Removing using multiple tables as condition C testsqlppUsers usr testsqlppUsersForms usrforms testsqlppForms form dbremovefromusrformsusingusr form usrformswhere usrformsiduser usrid and usrusername username and usrformsidform formid and formname formname Examplemysql create table if not exists test playerid int unsigned not null primary key auto db getConnection accountdbTest test dbinsertintotestsettestplayerId dbinsertintotestsettestplayerId When i make insert first timethe Test table is clean it just throws an exception as im expecting But if i try to make same the second timethe table already contains data it just crashes Signal SIGSEGV Segmentation fault unknown x fd d accb gxxpersonalityv x fd d ad de UnwindRaiseException x fd d ab a cxathrow x fd d adc c sqlppmysqlanonymous namespaceexecutestatementsqlppmysqldetailconnectionhandlet stdcxx basicstringchar stdchartraitschar stdallocatorchar const x fb fac sqlppmysqlconnectioninsertimplstdcxx basicstringchar stdchartraitschar stdallocatorchar const x fb c sqlppmysqlconnectioninsertsqlppstatementtvoid sqlppinsertt sqlppintotvoid accountdbTest sqlppinsertlisttvoid sqlppassignmenttsqlppcolumntaccountdbTest accountdbTestPlayerId sqlppunsignedintegraloperand connectionh sqlppinserttresultmethodstsqlppstatementtvoid sqlppinsertt sqlppintotvoid accountdbTest sqlppinsertlisttvoid sqlppassignmenttsqlppcolumntaccountdbTest accountdbTestPlayerId sqlppunsignedintegraloperand runsqlppmysqlconnection inserth sqlppstatementtvoid sqlppinsertt sqlppintotvoid accountdbTest sqlppinsertlisttvoid sqlppassignmenttsqlppcolumntaccountdbTest accountdbTestPlayerId sqlppunsignedintegraloperand runsqlppmysqlconnection statementh sqlppmysqlconnectionrunsqlppstatementtvoid sqlppinsertt sqlppintotvoid accountdbTest sqlppinsertlisttvoid sqlppassignmenttsqlppcolumntaccountdbTest accountdbTestPlayerId sqlppunsignedintegraloperand connectionh sqlppmysqlconnectionoperatorsqlppstatementtvoid sqlppinsertt sqlppintotvoid accountdbTest sqlppinsertlisttvoid sqlppassignmenttsqlppcolumntaccountdbTest accountdbTestPlayerId sqlppunsignedintegraloperand connectionh accountapiAccountAPIchangeEmail EmailAPIcpp accountapiAccountAPIonRequest AccountAPIcpp PistacheHttpHandleronInputchar const unsigned long stdsharedptrPistacheTcpPeer const x fd e dd PistacheTcpTransporthandleIncomingstdsharedptrPistacheTcpPeer const x fd e c PistacheTcpTransportonReadyPistacheAioFdSet const x fd e c af PistacheAioSyncImplrunOnce x fd e bc b stdthreadStateimplstdthreadInvokerstdtuplePistacheAioAsyncImplWorkerrunlambda Mrun x fd e b e a unknown x fd d d f startthread x fd d clone x fd cfcb Hello When using gccs undefined behavior sanitizer with requests having an order by clause it reports a misaligned address sqlpp includesqlpp orderbyh runtime error reference binding to misaligned address x ffe f fa for type const struct statementt which requires byte alignment x ffe f fa note pointer points here fd b sqlpp includesqlpp orderbyh runtime error load of misaligned address x ffe f fa for type const struct statementt which requires byte alignment x ffe f fa note pointer points here fd b const auto t testTabBar auto stat sqlppselect columnsalloft fromt wheretdelta orderbytgammaasc gcc testcpp o test stdc coverage fsanitizeundefined lstdc I Isqlpp include test Regards Hi All It seems like the most common pattern to read and iterate through a database query is this auto rowSet dbselect for const auto row rowSet do stuff with row The query and the result set have to be declared as auto because the definitions of these objects are very complex and dependent on the columns you are selecting But I am wondering if there is any way to add helper default column typedefs when you convert DDL script into proxy classes Ultimately it would be a lot cleaner to be able to pass around retrieved rows of a certain select column profile in order to centralize row processing I hate to scrape the definition out of the debugger and create typedefs manually since if roland changes the underlying sqlpp it could break all those typedefs Kinda fragile 