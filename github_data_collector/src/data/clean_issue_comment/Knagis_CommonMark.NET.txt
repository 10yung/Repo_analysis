Hi how does CommonMarkNET compete with markdig That one is missing from your benchmark This is just noise I forgot to remove it before submitting Create NuGet packages during builds and create a symbolsource package alongside the main package Move cmarkexe to a separate NuGet package Remove the explicit nuspec files in favor of project system features Please see the notes in review and feel free to ask any questions before deciding to merge Im trying to convert the below as a table in HTML Tables Option Description data path to data files to supply the data that will be passed into templates engine engine to be used for processing templates Handlebars is the default ext extension to be used for dest files Unfortunately my HTML output is generated as below when using CommonMarkCommonMarkConverterConvert h Tablesh p Option Description data path to data files to supply the data that will be passed into templates engine engine to be used for processing templates Handlebars is the default ext extension to be used for dest files p Hi I took the code from and tried to fix your comments Would close ekblom This implements support for parsing YAML blocks and frontmatter following the Pandoc rules Delimited by three hyphens at the top Delimited by three hyphens or dots at the bottom May occur anywhere in the document but if not at the beginning must be preceded by a blank line BlockTagYamlBlock is defined and FencedCodeData is used to store the closing fence character either or and to indicate whether the closing fence has been seen in the same manner as BlockTagFencedCode YAML support may be enabled via twoflavors CommonMarkAdditionalFeaturesYamlBlocks this allows for any number of YAML blocks anywhere in the document CommonMarkAdditionalFeaturesYamlFrontMatterOnly allows for exactly one YAML block defined on the first line of the document The HTML formatters treat BlockTagYamlBlock blocks the same way as BlockTagFencedCode blocks except that instead of writing the info string a classlanguageyaml attribute will be written What is the easiest way to implement something similar to StackOverflow comments section They refer to it as miniMarkdown only italic bold and code is allowed So a white list of Markdown tags Everything else including HTML and other MD tags should be displayed as is passed through or HtmlEncoded in order to avoid XSS and to match specific business requirements Basically I need to let my users mark some of their text as bold or italic I would also also allow paragraphs and lists But everything else quotations links images headings any HTML should be preserved and displayed AS IS HTML encoded because it will be rendered within bigger HTML page Essentially Im inventing my own super strict and limited subset of Markdown lets call it MarkdownSlim I want to implement it with CommonMarkNET because I may need to extend it easily in future allow more MD tags I can not simply pass input through CommonMarkConverterConvert because it may find and convert MD tags that I dont support into HTML So they will be displayed differently from how they were entered Would this be a right approach I tried it but it will require more debugging and learning since it does not seem to be preserving all input if blockTag BlockTagList blockTag OTHERTAGSALLOWEDBYMARKDOWNSLIM baseWriteBlockblock isOpening isClosing out ignoreChildNodes else ignoreChildNodes false if blockStringContent null thisWriteAntiXssHtmlEncodeblockStringContentToString protected override void WriteInline Inline inline bool isOpening bool isClosing out bool ignoreChildNodes if inlineTag InlineTagEmphasis inlineTag OTHERTAGSALLOWEDBYMARKDOWNSLIM baseWriteInlineinline isOpening isClosing out ignoreChildNodes else ignoreChildNodes false thisWriteAntiXssHtmlEncodeinlineLiteralContent I feel like this is a very common use case and I could not find a good example and Im not sure Im even on the right track There seem to be a LOT OF INTEREST in implementing safe markdown and I think it should boil down to be able to easily implement subsets of Markdown like the one Ive described Maybe a good example on a wiki We are currently using CommonMarkNETs API to apply some preprocessing steps to markdown documents before rendering generally by scanning for certain tokens and replacing BlocksInlines as necessary Currently our code to remove a Block looks like the following csharp private static void RemoveBlockBlock block var parent blockParent var prev blockPrevious var next blockNextSibling if parent null if parentFirstChild block parentFirstChild next if parentLastChild block parentLastChild prev if prev null prevNextSibling next if next null nextPrevious prev However the Previous property is flagged as obsolete so this code may not work in the future Inline has a similar problem In order to remove an Inline from a block I must iterate through the Inline sequence from FirstSibling updating the NextSibling property as appropriate as I go It looks like the process will be similar for Block after Previous is removed It would be great to get some guidance on the expected approach here I dont want to allow the heading features of markdown for the users So the Professor is back on CommonMark which is great news Somewhat less great is his renaming of core terms in both the spec and the C implementation I understand those modifications are by popular demand I guess thats the price one has to pay when seeking community approval for their specification The following have changed so far x Header Heading x Horizontal Rule Thematic Break WTF The following are expected to change Emphasis Weak Emphasis x Bullet List Unordered List Should CommonMarkNET reflect those changes I dont mind renaming everything but wouldnt changing eg HeaderLevel to HeadingLevel break compatibility PS I noticed cmark has a separate struct for headering data Maybe this is an opportunity to do the same here while retaining an obsolete HeaderLevel property for the time being 