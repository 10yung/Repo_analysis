 Use CodeLingo to automatically fix function comments following the Code Review Comments guidelines This patch was generated by running the CodeLingo Rewrite Flow over the goerrorfmt Tenet Note the same Tenet can be used to automate PR reviews and generate contributor docs Install CodeLingo to drive Continuous Higher Standards Learn about CodeLingo None Unit DescriptionSSH PerConnection Server Aftersyslogtarget Service EnvironmentFileetcdefaultdropbear ExecStartPreectscriptssshtimeoutsh ExecStartPrebinsh c SSHTIMEOUTbincat etcatomdefaultssyscfgbaselinedb bingrep sshtimeout bincut d f ExecStartusrsbindropbear i I SSHTIMEOUT r vartmpdropbearrsahostkey p DROPBEAREXTRAARGS ExecReloadbinkill HUP MAINPID StandardInputsocket Handle hashed host names and breaking out of loops as soon as a match is found fixes Also the loops in GetHostKeyAlgorithms and Check should exit as soon as a match is found Pull request inbound Hello We just saw a pretty server issue on our production CoreOs setup Details are CoreOs nodes running in AWS EC Us East m xlarge instance types CoreOS nodes are DISTRIBRELEASE and is at DISTRIBRELEASE etcd version we have auto update disabled on CoreOs Around UTC on Jan we saw all our containers go down and the logs seemed to suggest an issue with etcd Jan ip ec internal fleetd ERROR servergo Server monitor triggered Monitor timed out before successful heartbeat Jan ip ec internal fleetd INFO servergo Establishing etcd connectivity Jan ip ec internal fleetd ERROR enginego Engine leadership acquisition failed context deadline exceeded Jan ip ec internal fleetd INFO servergo Starting server components Jan ip ec internal fleetd INFO enginego Engine leadership acquired Jan ip ec internal fleetd ERROR enginego Failed unscheduling Unitkafkabroker service from Machine ca ead f b c d c a d b context deadline exceeded Jan ip ec internal fleetd ERROR reconcilergo Failed resolving task taskType UnscheduleUnit JobName kafkabroker service MachineID ca ead f b c d c Jan ip ec internal fleetd ERROR enginego Failed unscheduling UnitnewNewAppsservice from Machine ca ead f b c d c a d b context deadline exceeded We checked the CPU and disk IO for all instances there is NO indication of any CPU spike per AWS Cloudwatch ETCD config is as below coreip sudo systemctl cat etcd usrlib systemdsystemetcdservice Unit Descriptionetcd Conflictsetcd service Service Useretcd PermissionsStartOnlytrue EnvironmentETCDDATADIRvarlibetcd EnvironmentETCDNAMEm ExecStartusrbinetcd Restartalways RestartSec s LimitNOFILE runsystemdsystemetcdserviced oemconf Service EnvironmentETCDPEERELECTIONTIMEOUT runsystemdsystemetcdserviced cloudinitconf Service EnvironmentETCDADDR EnvironmentETCDCERTFILEhomeetcdcertscertcrt EnvironmentETCDDISCOVERY EnvironmentETCDKEYFILEhomeetcdcertskeypem EnvironmentETCDPEERADDR Attached the fleet etcd logs from all nodes etcd txt etcd txt etcd txt fleet txt fleet txt fleet txt AWS status dashboard does not show any errors or issues on their end Appreciate if someone can take a look at the above and give us any pointers on what to look at and what we can do to mitigate this I opened a fleet ticket and was redirected to here Thx Maulik etcd txt etcd txt etcd txt fleet txt fleet txt fleet txt Im running CoreOS Stable on Google Compute Engine Thus fleet Sometimes after a reboot fleetcontrolled timers try to start before their associated fleetcontrolled associated services have been loaded resulting in timer failures Id expect that the fleet launcher would wait until all the parts of a timer are loaded before starting Or maybe just load everything on a rebooted node before starting anything A stripped log shows the sequence Reboot systemd Started fleet daemon fleetd INFO fleetdgo Starting fleetd version fleetd INFO managergo Writing systemd unit cdpipelineruntimer b fleetd INFO managergo Instructing systemd to reload units systemd cdpipelineruntimer Refusing to start unit to trigger not loaded systemd Failed to start Run the Classifier Data Pipeline fleetd INFO managergo Triggered systemd unit cdpipelineruntimer start job fleetd INFO reconcilego AgentReconciler completed task typeLoadUnit jobcdpipelineruntimer reasonunit scheduled here but not loaded fleetd INFO reconcilego AgentReconciler completed task typeReloadUnitFiles jobNA reasonalways reload unit files fleetd INFO reconcilego AgentReconciler completed task typeStartUnit jobcdpipelineruntimer reasonunit currently loaded but desired state is launched fleetd INFO managergo Writing systemd unit cdpipelinerunservice b fleetd INFO managergo Instructing systemd to reload units fleetd INFO reconcilego AgentReconciler completed task typeLoadUnit jobcdpipelinerunservice reasonunit scheduled here but not loaded The more complete log is in a Gist here Ive yet to find the fleet option that tells it that a pair or more of unit files need to be handled together So far systemdLinkUnitFiles has been called with the force option turned on That was one of the reasons of performance issues Lets introduce an option systemdlinkunitforce false by default Users can set the option in fleetdconf That option will be passed directly to systemdLinkUnitFiles cc hectorj f Fixes At the moment systemdUnitManagerwriteUnit calls systemdLinkUnitFiles with the force flag turned on This brings negative impact on performance So force should be set to false by default It might be also a good idea to introduce a new option in fleetdconf so that users are able to set the flag cc hectorj f See also Introduce an option UseLeaseTTL Default is false If UseLeaseTTL turned on create lease manager with the TTL value When gRPC turned on remove previous workaround of setting leaseTTL to a huge value Increase engine reconcile interval from to sec Originally written by hectorj f Taken from 