This may be trivial but I was unsure whether the argument to fun setMemorySizemaxSize Long referred to bytes KB or MB Could this be clarified in documentation Is it possible to execute some custom actions when memory cache become invalidated I am trying to integrate Jetpack Paging with Store The DataSource required us to call invalidate when we want to stop paging Currently I am using a map to cache the latest result and invalidate old one from the fetcher kotlin val dataSourceMap mutableMapKey PagedList val store StoreBuilderfromNonFlow key Key val pagedList createPagedListkey dataSourceMap key dataSourceinvalidate dataSourceMap key pagedList pagedList build Maybe it will be convenient if StoreBuilder can provide a onCacheInvalidated method kotlin val store StoreBuilderfromNonFlow key Key createPagedListkey onCacheInvalidate pagedList pagedListdataSourceinvalidate build This PR changes the assertItems util method in tests to drain the flow to ensure we dont produce unwated items Please see our contributing guidelines contributingmd primarily make sure to sign our cla as we cannot accept code externally without a signed cla Hi Im thinking if it is somehow possible to use paged content with the Store I want to load feed with the newest data and when the user reaches the end of the feed then I want to load older data and so on I know that caching of such results can be hard since items can added or removed or moved So I dont know if it is possible One solution that I figured out would be to cache only the first page and then load others but I dont know how to implement this with the Store Can you help me with that Thank you for your response It seems that even if we set refresh flag to false in StoreRequestcached we still get the latest data from the fetcher Is this the correct behavior Test code kotlin runBlocking Store with cache without persister val store StoreBuilderfromNonFlow key Int key build Cache data storefresh Stream data storestreamStoreRequestcached refresh falsecollect printlnittoString Output Datavalue originCache LoadingoriginFetcher Datavalue originFetcher The old Store had a clear API which purges all entries in memory and disk The new store currently only has suspend fun clearkey Key Should we add suspend fun clearAll Once lands we will be kotlin Next we should create kotlin multiplatform targets and explore current solutions for handling flowsuspend within nativejs Currently Store only supports reading data it does not provide any support for writing local updates back up to the server We would like to add write support to Store that considers offline updates as a first class citizen requirement In order to achieve the above we will need to deal to introduce support for things like pending operations conflict resolution updating the remote etc Some discussion has been started on this subject at 