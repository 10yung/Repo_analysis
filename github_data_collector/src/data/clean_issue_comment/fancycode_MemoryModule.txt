load function by ordinal value My dll must crash when i use CString or stdstring loading from memory by MemmoryModule event the construct of CString or stdstring can not be complete Some dlls do not use Native SectionAlignment instead use SectionAlignment from PE Issue should be solved then fancycode Hello this library is not working with some special libraries that create virtual environments If youre interested I can send a a copy of dll in private they are commercials and I paid them but I can send you Let me know if you interested Fixes for x Exceptionhandling code can be added to the loading process using Windows exceptions blocks C try proc exceptEXCEPTIONEXECUTEHANDLER Exceptionhandling code Currently ANSI version LoadLibraryA is used which could fail to load libs with nonlatin chars in name Why not support Cs DLL In the code I can see this c Execute entry point EXE only The entry point can only be executed if the EXE has been loaded to the correct base address or it could be relocated ie relocation information have not been stripped by the linker Important calling this function will not return ie once the loaded EXE finished running the process will terminate Returns a negative value if the entry point could not be executed int MemoryCallEntryPointHMEMORYMODULE Why does the program ends when calling MemoryCallEntryPoint How can I prevent the program to do so I want to call the Entry Point in a different thread and keep doing other stuff Thank you In this function under MemoryModulec static BOOL CopySectionsconst unsigned char data sizet size PIMAGENTHEADERS oldheaders PMEMORYMODULE module PIMAGESECTIONHEADER section IMAGEFIRSTSECTIONmoduleheaders for if sectionSizeOfRawData It looks like this line PIMAGESECTIONHEADER section IMAGEFIRSTSECTIONmoduleheaders should instead be this or something else PIMAGESECTIONHEADER section IMAGEFIRSTSECTIONoldheaders This function is called like this headers unsigned char allocMemorycode oldheaderOptionalHeaderSizeOfHeaders MEMCOMMIT PAGEREADWRITE userdata resultheaders PIMAGENTHEADERS const unsigned char headers dosheaderelfanew if CopySectionsconst unsigned char data size oldheader result Hence the section variable is initialized to the SECTIONHEADER in output buffer moduleheaders we just allocated Later we do an if check using if sectionSizeOfRawData The problem is the output buffer must be zero right after allocation by VirtualAlloc Even worse is there are something else performed if the output buffer is not zero which wont be executed at all So it looks like the code is not behaving in a manner consistent with its initialized value Since I am not able to fully understand what these lines are doing I can only second guess that the initializer is incorrect No matter what function I tried it always crashes without any error message It says the DLL got loaded fine and the function loaded fine too but when executed it just crashes My code for reading DLL into memory HANDLE hFile CreateFileAC Windows SysWOW ntdlldll GENERICREAD OPENEXISTING FILEATTRIBUTENORMAL if hFile NULL printfError opening file d GetLastError return DWORD dwSize GetFileSizehFile printfSize d d n dwSize GetLastError BYTE buff new BYTE dwSize if ReadFilehFile buff dwSize FALSE printfError reading file d GetLastError return Typedef for the function typedef NTSTATUSstdcall tdNtTerminateProcessHANDLE ProcessHandle NTSTATUS ExitStatus Thanks for the help 