It would be great if I get the supported files of blinkyc bin xsvf to update the firmware I would like a compiled copy of this I dont have the tools needed to compile it myself And make sure to compile it for bit Windows not bit Windows While RXing at sample rates of Msps or higher I have observed incorrect sample values that are duplicates of values samples in the future Example hex dump excerpt captured with hackrftransfer at Msps d fd f d fb d fd d f d fa fd d a ff d c d e f d d f d ff f d fa ff d d a d c f d e fd f d fb d d fd d f d fa fd d a ff d c d e f d a fd f d a fb Six samples each one byte I followed by one byte Q in the above example starting at d a are repeated at d a The samples at d a are correct The duplicated samples at d a are incorrect Ive observed duplication of or samples at a time When multiple duplication events occur they typically happen one USB buffer in firmware samples apart This appears to be caused by firmware USB operations delaying execution of sgpioisrrx This GNU Radio flowgraph can be used to detect duplication events that are samples apart Presumably there is a similar bug on TX need bin file for U W Q BV usb no longer works dfu mode does not work want to reprogram spi chip need file thanks Steps to reproduce put hackrf in dfu mode lights show it is in the desired mode run sudo dfuutil l No devices Expected behaviour listing of DFU device and access to device Actual behaviour Nothing I think the device is toast I purchased a portapack and it was working for some time All of the sudden it stopped working with the portapack installed the devices flases the rx yellow light and the portapack will not come one Cannot program the hackrf back to normal because the usb is not working It provides power but not data access Changed the cord to different cords as I read that could be the issue of the cords were brand new No suck luck Hello just yesterday i was going to try to flash new PortaPackfirmware onto my HackRF has recently decided to not talk with my laptop or PC anymore in normal and DFU mode as well heres what Ive found The hackrf still powers up fine and Portapack functions as normal dfuutil does not flash or list any devices when the hackrf is in dfu lsusb does not show anything related to the hackrf in normal and dfu mode dmesg does not change when i plug or unplug the hackrf in normal and dfu mode I have found the above results with separate micro USB cables including some that i know work with the hackrf and on two separate computers This leads me to believe its an issue with the micro usb connector anything i can do to fix it Thanks Steps to reproduce Patch hackrftransferc to include lightweight timestamps Capture at Ms some signal at Ghz Extract timestamps and analyze their behaviour Expected behaviour All timestamps should be constant at least in average Actual behaviour Time stamps are not constant and big gaps appear scattered some as big as milllisecs Version information Ubuntu Intel i GiB Raspian Buster Raspberry Pi GiB hackrfinfo version unknown libhackrf version unknown Found HackRF Index Serial number c dc bb f Board ID Number HackRF One Firmware Version API Part ID Number xa cb c x e Output hackrftransfer S r f s a l g IQraw IQlog Additional information In the begining we where capturing to an USB ME hard disk but at the end we were using RAMdisks to discard an storage issue We tried also buffering S We got some improvements but still see notable variations in the timestamps We are trying to understand this behaviour if samples are lost if the USB bus is the problem if the storage Any advice Steps to reproduce Please see the thread on qrz here Expected behaviour I expected a low noise floor on the produced FM signal but that wasnt the case Actual behaviour I would expect a low noise floor on a hackRF when producing FM signals certainly lower than a cheap chinese FM transmitter but the noise levels are uncomfortably appreciable Version information Ubuntu running GRC on a thinkpad T p with a dual core i processor hackrfinfo output hackrfinfo version unknown libhackrf version unknown Found HackRF Index Serial number dc a f Board ID Number HackRF One Firmware Version API Part ID Number xa cb c x GRC version I would like advice on how to investigate this further I have a MHz oscilloscope handy if that helps Hi all Recently we got a HackRF at my lab USC RPL and while were having a really fun time playing around with it we did have a few issues at the start getting the host software set up especially on Windows with MSVC It wasnt anything we couldnt deal with but I did see a few places where the CMake build system could be improved so I thought Id try to clean it up a bit I incorporated a few bits and pieces from other projects Ive worked on mainly LibraryUtilscmake and a much less sophisticated version of FindFFTW but also wrote a fair amount of new logic from scratch Hopefully the build system should run a bit smoother now There are a lot of small changes as you can see but Ill try to list the major things here Clean up and consolidate logic that was split across multiple build files into a single clean block at the top level Compile flags Dependencies Uninstall logic Rewrite FindFFTW based on my earlier version Its now smart enough to consider libfftw vs libfftw f as well as all the other fftw libraries as separate components and to generate good clear error messages if one of them is missing Should fix Clean up FindUSB and FindHACKRF according to CMake find module best practices Hopefully the issues where the configuration continues even though libusb was not found which should have been a fatal error should stop now Add a proper find module for libm Set up hackrf DLL export import logic to be automatically managed by CMake Hope all this stuff seems useful As you can see from the build instructions it makes the Windows build quite a bit simpler because it enables all libraries to be found correctly just by setting the prefix path to where the libraries are installed Hopefully it should improve life on other platforms too Im happy to answer any other questions or make any other changes you need just let me know Previously when transmit was triggered the HackRF would exhaust its SGPIO buffers followed by the first of its USB transfer buffers before requesting more data from the USB host If the host was using libhackrf this would exhaust another four USB transfer buffers before sending samples provided by the transmit callback Now we fill all these buffers with userprovided data as soon as possible so that when transmit is triggered the first sample output is the first user provided sample We also explicitly try to keep the amount data transmitted or received over USB equivalent to that processed by the RF subsystem even if some of this data is invalid This was already the implicit previous behaviour