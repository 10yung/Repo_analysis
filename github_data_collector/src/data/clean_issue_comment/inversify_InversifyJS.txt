 Provide a general summary of the issue in the Title above Hi I am trying to get the scope of the service so I can register it as a proxy into another module Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work There should be an option to get a scope of the injected service which will help me to bind it into another container with the same scope Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior You have to record scopes somewhere Possible Solution Not obligatory but suggest a fixreason for the bug or ideas how to implement the addition or change add getScope method or to inherit the scope of whatever it is resolving Context How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful in the real world Example ts const cont new Container injectable class A constructor injectdate private readonly date any show consolelogthisdate injectable class B constructor injectdate private readonly date any show consolelogthisdate injectable class C constructor private readonly a A private readonly b B thisashow thisbshow contbinddateproxytoDynamicValue MathrandominRequestScope contbinddatetoDynamicValuectx ctxcontainergetdateproxyinRequestScope I am forced to guess which scope I have to use here contbindAtoSelfinRequestScope contbindBtoSelfinRequestScope contbindCtoSelfinRequestScope contgetC expect to log same values contgetC expect to log same values but different ones from previous example output which is right If I change the date bindings scope into something else then I get either the same values all the time or different ones for each call TRANSIENTSINGLETON The realworld use case would be that I am trying to write an angularlike modular system that requires imports to be handled Every module has a container inside and when imported it should bind a proxy accessor which resolves a class from the imported container Eg ModuleA imports ModuleB both of them have Container inside and ModuleB has providers Lets say ServiceA When ModuleA imports ModuleB ServiceA is registered into ModuleBs container and I need it to be also accessible in ModuleA Your Environment Include as many relevant details about the environment you experienced the bug in Version used Environment name and version Node Operating System and version desktop or mobile Desktop Provide a general summary of the issue in the Title above General Note on my techstack I have an application composed of Nodejs Express Inversifyjs Typescript I have a modular structure on my expressroutes on seperate files Now when I try to inject my databaseconnector class on one of the routes classes I get the error TypeError Cannot read property mongoDBClient of undefined Expected Behavior If youre describing a bug tell us what should happen My expected behaviour should be to normally inject a class into other classes if i take into consideration that my inversifyconfig is setted properly Current Behavior If describing a bug tell us what happens instead of the expected behavior Inversify does not inject my class properly Node detects injected class as undefined Steps to Reproduce for bug Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant inversify config import reflectmetadata const dependencyContainer new Container dependencyContainerbindObjectTYPESENVIRONMENTALCONFIGtoFactory context interfacesContext context CONFIGDEVELOPMENT CONFIGPRODUCTION dependencyContainerbindAbstractRoutesTYPESABSTRACTROUTEStoAuthRoutesinTransientScope dependencyContainerbindAbstractRoutesTYPESABSTRACTROUTEStoApiRoutesinTransientScope dependencyContainerbindMongoDBClientTYPESMONGODBCLIENTtoMongoDBClientinSingletonScope dependencyContainerbindCredentialHelperTYPESHASHGENERATORtoCredentialHelperinSingletonScope dependencyContainerbindEmailCreatorTYPESEMAILCREATORtoEmailCreatorinSingletonScope dependencyContainerbindExpressTYPESEXPRESStoExpressinSingletonScope export default dependencyContainer entrypoint file import dependencyContainer from diconfiginversifyconfig import MongoDBClient from modulesdbmongodbclient import Express from modulesserverexpress import TYPES from diconfigtypes const app dependencyContainergetExpressTYPESEXPRESS async appstart expressfile injectable export default class Express private static readonly PORT any processenvPORT public app expressApplication public server HttpServer private MongoStore connectStoresession private readonly environmentalProps any constructor injectTYPESMONGODBCLIENT private mongoDBClient MongoDBClient injectTYPESENVIRONMENTALCONFIG private environmentFactory Function multiInjectTYPESABSTRACTROUTES private routeManager AbstractRoutes thisapp express thisserver new HttpServerthisapp thisenvironmentalProps thisenvironmentFactoryisProduction public start return thismongoDBClientconnect then thisinitServer thenconsolelog private async initServer thiscreateMiddleware thisassignRouteEndpoints return new Promiseresolve thisserverlistenExpressPORT resolveServer listens on Port ExpressPORT private createMiddleware thisappuseexpressstaticjoinDirthisenvironmentalPropsPATHTOSTATICFILES private assignRouteEndpoints thisrouteManagermaproute AbstractRoutes thisappuserouteROUTEPARAMS routegetRoutes abstract route class injectable export default abstract class AbstractRoutes abstract ROUTEPARAMS string public router expressRouter abstract createEndpoints void public getRoutes thiscreateEndpoints return thisrouter one of the route files Error is thrown here injectable export default class AuthRoutes extends AbstractRoutes public ROUTEPARAMS string auth constructorinjectTYPESMONGODBCLIENT public mongoDBClient MongoDBClient injectTYPESEMAILCREATOR public emailCreator EmailCreator super consolelogmongoDBClient is defined consolelogmongoDBClientconnectionManager some property is undefined public async checkLoggedInrequest any response any const sessionId requestcookiessid const uid requestsessionuseruid consolelogthismongoDBClient crashes here responsestatus sendfoo bar Context The error is thrown in my route file in the checkdLogggedIn method Normally i should be able to import the mongoDBClient class Be aware that i import the mongoDBClient also in the parent Express class How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful in the real world Your Environment Versions Node Inversifyjs Reflectmetadata Typescript Stack trace node UnhandledPromiseRejectionWarning TypeError Cannot read property mongoDBClient of undefined at homemarcoWebstormProjectshelpeducatebackendsrcmodulesserverroutesauthroutests at step homemarcoWebstormProjectshelpeducatebackendsrcmodulesserverroutesauthroutests at Objectnext homemarcoWebstormProjectshelpeducatebackendsrcmodulesserverroutesauthroutests at homemarcoWebstormProjectshelpeducatebackendsrcmodulesserverroutesauthroutests at new Promise anonymous at awaiter homemarcoWebstormProjectshelpeducatebackendsrcmodulesserverroutesauthroutests at AuthRoutescheckLoggedIn homemarcoWebstormProjectshelpeducatebackendsrcmodulesserverroutesauthroutests at Layerhandle as handlerequest homemarcoWebstormProjectshelpeducatebackendnodemodulesexpresslibrouterlayerjs at next homemarcoWebstormProjectshelpeducatebackendnodemodulesexpresslibrouterroutejs at Routedispatch homemarcoWebstormProjectshelpeducatebackendnodemodulesexpresslibrouterroutejs node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code Include stack trace Provide a general summary of the issue in the Title above I want to use contextual binding in my inversifyexpress application I have a problem using contextual injection Here is a minimal example Suppose we have the following interfaces and classes javascript export type AuthenticationParams userId string export interface NextInteractorT executeparams T void injectable export class AuthenticationInteractorT extends AuthenticationParams constructorinjectTYPESNEXTINTERACTOR private nextInteractor NextInteractorT executeparams T consolelogcontinuing as user with userId paramsuserId thisnextInteractorexecuteparams And theses are some classes implementing NextInteractor javascript export type FirstParams userId string injectable export class FirstInteractor implements NextInteractorFirstParams executeparams FirstParams consolelogprinting from first interactor paramsuserId export type SecondParams userId string otherParam string injectable export class SecondInteractor implements NextInteractorSecondParams executeparams SecondParams consolelogprinting from second interactor paramsuserId paramsotherParam And I use AuthenticationInteractor in the following file javascript controllerfirst export class FirstInput constructorinjectTYPESAUTHENTICATIONINTERACTOR private authInteractor AuthenticationInteractorFirstParams httpGet getqueryParamuserId userId string thisauthInteractorexecute userId return first url controllersecond export class SecondInput constructorinjectTYPESAUTHENTICATIONINTERACTOR private authInteractor AuthenticationInteractorSecondParams httpGet getqueryParamuserId userId string queryParamotherParam otherParam string thisauthInteractorexecute userId otherParam return second url My intention is to call AuthenticationInteractor as the first step in every controller and only then continuing to the main logic I hoped to achieve this with contextual binding as follows javascript containerbindAuthenticationInteractoranyTYPESAUTHENTICATIONINTERACTORtoAuthenticationInteractor containerbindNextInteractorFirstParamsTYPESNEXTINTERACTORtoFirstInteractorwhenAnyAncestorIsFirstInput containerbindNextInteractorSecondParamsTYPESNEXTINTERACTORtoSecondInteractorwhenAnyAncestorIsSecondInput Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work To bind nextInteractor to the correct one in each case Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior inversify returns this error Error Ambiguous match found for serviceIdentifier SymbolNEXTINTERACTOR Possible Solution Not obligatory but suggest a fixreason for the bug or ideas how to implement the addition or change Steps to Reproduce for bugs Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant clone npm i npm start Context How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful in the real world In my real project I am trying to create a single Class for All authentication logic Authentication Authorization token refresh etc Your Environment Include as many relevant details about the environment you experienced the bug in Version used inversify inversifyexpressutils Environment name and version node Operating System and version ubuntu Link to your project Stack trace Include stack trace Description LazyServiceIdentifer where added at But the PR only supported LazyServiceIdentifer in contruction injection and forgot to consider property injection Related Issue fix fix Types of changes What types of changes does your code introduce Put an x in all the boxes that apply x Updated docs Refactor code Added a tests case nonbreaking change x Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to change Checklist x My code follows the code style of this project My change requires a change to the documentation I have updated the documentation accordingly x I have read the CONTRIBUTING document x I have added tests to cover my changes x All new and existing tests passed I have updated the changelog Provide a general summary of the issue in the Title above The code for v that fixes a security vulnerability has been merged into the repo its just not deployed Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior Possible Solution Not obligatory but suggest a fixreason for the bug or ideas how to implement the addition or change Steps to Reproduce for bugs Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant Context How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful in the real world Your Environment Include as many relevant details about the environment you experienced the bug in Version used Environment name and version eg Chrome nodejs Operating System and version desktop or mobile Link to your project Stack trace Include stack trace Hi remojansen Thank you for your wonderful IoC library we are leveraging this for our enterprise solutions microservices that are based on DDD We have various modules encapsulating various aspects of domain driven design but currently having challenge in making request context available across various container objects defined using this library I do not want define every method with additional context parameter which is not elegant way I was looking something similar to TLS in multi thread environment like NET and Java where we access request specific information from current thread Do you have anything available in this framework or any suggestion would be greatly appreciated I could see solutions like CLS that are based on asynchooks but I couldnt get it working with TypeScript and more over looks like there are performance concerns on asynchooks and also being experimental I am skeptical to use it UPDATE Also I do not want any solution specific to express because our services are reactive services based on event driven architecture So our external points could be REST or events from middlewares like Kafka as well The devDependency gulprename was updated from to This version is not covered by your current version range If you don t accept this pull request your project will work just like it did before However you might be missing out on a bunch of new features fixes andor performance improvements from the dependency update Publisher contra License MIT Find out more about this release details summaryFAQ and helpsummary There is a collection of frequently asked questions If those don t help you can always ask the humans behind Greenkeeper details Your Greenkeeper bot palmtree Provide a general summary of the issue in the Title above Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work In the documentation I read that tsconfigjson should have compilerOptions target es lib es types reflectmetadata module commonjs moduleResolution node experimentalDecorators true emitDecoratorMetadata true Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior However in my project I have target es lib types node module commonjs moduleResolution node experimentalDecorators true emitDecoratorMetadata true And its still working so now Im confused Context How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful in the real world Could it be because I have just used a minimum portion of the library and I will find problems in the future May it be due to my project being deployed as AWS lambda Your Environment Include as many relevant details about the environment you experienced the bug in Version used inversify reflectmetadata Environment name and version eg Chrome nodejs nodejs v Operating System and version desktop or mobile w Thanks Im just getting into InversifyJS and Im struggling to get my head around the concept of Express controllers Usually I write my code in such a fashion that the routing chain is executed step by step and the context of the request is incrementally stored inside the request object routesindexts javascript routeruseusers usersRouter export default router routesusersindexts javascript routeruseuserId req res next let user fakedSyncGetUserByIdreqparamsuserId reqcontextuser user next routeruseuserIdposts postsRouter routergetuserId req res resstatus jsonreqcontextuser routesuserspoststs javascript routerget req res let posts fakeGetPostsByUserreqcontextuser resstatus jsonposts This way I dont have to validate the user in the controller that manages the posts How would this be achieved in a sane way using InversifyJS Another issue I couldnt find the answer to is the order routes are executed such usersme being executed before usersuserId is evaluated I am facing an issue while working with inRequestScope with Inverisyfy I am expecting that if i change the object first time when it is being created then this object should be injected everywhere in the application I am adding and updating a traceId for this in my logger class But when i am injecting logger class in my other classes then i am receiving undefined with traceId My problem statement and code is Binding containerbindILogServicetypesILogServicetoLogServiceinRequestScope Interface export default interface ILogService traceId string Implementation injectable export default class LogService implements ILogService traceId string constructor consolelogConstructor called thistraceId I am initializing my traceId in My Controller like this let loggerservice containergetILogServicetypesILogService loggerservicetraceId Dummy Trace Id But when i inject same property in my other service classes it gives traceId as undefined 