 The HTML spec defines style and script as raw text elements meaning that escapes in their bodies are not processed hence eg spanbefore content Hello cannot be escaped to spanbefore content quotHello quot try it in a browser if you dont believe me This is a potential footgun with maud the path of less resistance letting maud do the escaping means that the scripts and styles get mangled however naively using PreEscaped could theoretically introduce an XSS vulnerability because then theres no check for an errant This is related to Im afraid that the HTML syntax is so complicated that theres no way to avoid a certain amount of contextawareness here I dont know what the ideal API looks like or even if maud can do much better but at the very least the docs should point out the footgun here See This was implemented a while ago but theres no documentation for it We use maud from a nostd alloc crate This does not work yet My first step is to highlight the compatibility issue Hopefully this leads to a simple fix In the longer run the best solution may be to switch maud over to being nostd alloc itself This is the natural solution since maud is not dependent on OS specifics at all x Add test for nostd alloc compat x Implement nostd alloc compat for dependers Adopt nostd alloc within maud Would be an interesting direction to explore The main usecase would be streaming HTML to the browsers without blocking on database calls rust let name futuresfutureokpMaudp let stream htmlstream h Greetings name p How are you Signedoffby Igor Gnatenko ignatenkobraingmailcom Hi this PR targets the feature requested in Its based on your current work in the betterlints branch Its now possible to write rust struct Css static str impl Render for Css fn renderto self buffer mut String With a mutable reference htmlto buffer link relstylesheet typetextcss hrefself fn main let mut s Stringwithcapacity With the owned string in scope htmlto mut s DOCTYPE html head Cssstylecss println s All tests were rewritten to use htmltest instead of html a wrapper to test against html and htmlto with its two forms Please tell me if you see anything I should change like moving the new functions in their own file etc I wasnt sure if it was the right place to put them So Im trying to use maud for nestpijulcom So far I like it but nestpijulcom runs on exactly four threads forked in the beginning and is entirely nonblocking More specifically My async Postgres crate starts exactly one connection to the server per thread ie currently four connections independent from the number of clients or requests It allocates two buffers per thread once and never reallocates or drops them My async HTTP server allocates two buffers per connection and reuses them if you use HTTP keepalive An SSH server allocating a constant number of buffers like per connection At least one buffer per connection is not really avoidable if you dont want to mix requests between clients but the internals of a server should not need that So in this context Maud has the potential to allocate a single buffer per thread and reuse it between clients because it is never interrupted by IO In a standard synchronous server I agree with your comments on benchmarks you would need some number of buffers per client but async IO can allow you to have a constant memory use and constant number of allocations Maud should check at compiletime that any produced HTML is syntactically valid unless the PreEscaped filter is used We can lint these things x Use maudDOCTYPE instead of PreEscapedDOCTYPE html Rather than writing outputpushstr html intostring just implement the render method instead Use formatargs or list the values individually instead of format The following lints inspect the structure of the template itself Its not clear yet how they can be implemented under the current design Well probably need to do some refactoring before these can work Use foo instead of classfoo and foo instead of idfoo Use foo bar instead of classif bar foo Warn against a target without relnoopener Warn against dynamic data in CSS and JS contexts eg script var name username Warn about nonstandard elements and attributes Further suggestions welcome Well I take a look about maud so I thought could we reuse syntax for XML template support XML is a markup language much like HTML 