Currently is this a missing feature I see only addchild which likely insert children at end and setchildren which reloads all children also it has replacechildatindex but I want to insert new node without removing existing node This is a big change that allows us to run the library without a heap of course feature gated Some tradeoffs that have been made I changed Id from using a pair of u to using a single u This removes the need to reuse IDs Conceivably we could overflow u but this shouldnt happen until the death of the universe To get the current crate nostd alloc behavior you need to activate the alloc feature I guess this is a breaking change if someone was relying on defaultfeatures false in their Cargotoml The public API no longer contains any allocations like Vec or Box as a result measure functions can no longer return errors and you need to use unboxed closures If there is a need it should be easy to add back boxed closures For the heapless mode a cap had to be put on the number of elements supported The max number of nodes is and only vecs up to size are supported This can easily be controlled through the sys module One big limiting factor is that some algorithms use VecVec which for heapless mode allocates memory cells For nonheapless mode we still support an indefinite number of nodeselements I cant seem to get basic flex layout working in Javascript not sure if Im missing something I would expect the child items in the following to be assigned a height matching the full height of the parent node per alignitems stretch In fact they are assigned height javascript importstretchlayoutthenstretch const Allocator Node Display AlignItems stretch const allocator new Allocator const rootNode new Nodeallocator width height display DisplayFlex alignItems AlignItemsStretch const childNodes new Nodeallocator flexShrink flexGrow flexBasis auto new Nodeallocator flexShrink flexGrow flexBasis auto rootNodeaddChildchildNodes rootNodeaddChildchildNodes const computedLayout rootNodecomputeLayout logLayoutcomputedLayout function logLayoutcomputedLayout const x y width height childCount computedLayout consolelogxx yy widthwidth heightheight for let i ichildCount i logLayoutcomputedLayoutchildi logs the following x y width height x y width height x y width height Hello I ported rust test to JS I believe I made it correctly js import Allocator Node AlignSelf PositionType from stretchlayout const allocator new Allocator const node new Nodeallocator width height const childNode new Nodeallocator width height alignSelf AlignSelfCenter positionType PositionTypeAbsolute nodeaddChildchildNode const layout nodecomputeLayout childLayout childNodecomputeLayout consoleloglayoutwidth layoutheight layoutx layouty consolelogchildLayoutwidth childLayoutheight childLayoutx childLayouty In browser both FF Chrome console I get According to asserteqstretchlayoutnode unwraplocationy f childNode y should be px I also tried other tests but no luck either Hi Ive been wondering how to work with leaf nodes I have following code rust use stretchStretch use stretchstyleStyle Dimension use stretchgeometrySize use stretchnumberNumber fn main let mut stretch Stretchnew let leaf stretchnewleafStyledefault Boxnew OkSize width height unwrap let node stretchnewnodeStyle flexgrow Defaultdefault vec leaf unwrap let leaf stretchnewleafStyledefault Boxnew OkSize width height unwrap let node stretchnewnodeStyle flexgrow Defaultdefault vec leaf unwrap let root stretchnewnodeStyle size Size width DimensionPercent height DimensionPercent Defaultdefault vec node node unwrap stretchcomputelayoutroot Size width NumberDefined height NumberDefined unwrap printlnroot stretchlayoutrootunwrap printlnnode stretchlayoutnode unwrap printlnleaf stretchlayoutleaf unwrap printlnnode stretchlayoutnode unwrap printlnleaf stretchlayoutleaf unwrap which results in following output root Layout order size Size width height location Point x y node Layout order size Size width height location Point x y leaf Layout order size Size width height location Point x y node Layout order size Size width height location Point x y leaf Layout order size Size width height location Point x y Im scratching my head here Why the sum of widths of node and node are greater than the number passed to computelayout If I understand this correctly leaf nodes should represent a content inside a flexbox container which is represented by a normal node The leaf requests some size which is returned by the MeasureFunc passed to the leaf Why node and node grow beyond the size of the root Shouldnt they shrink to points each Should the leaf nodes shrink too Am I misunderstanding something Would the overflow property fix this if it were implemented I also dont understand the meaning of the Size argument which is passed into the MeasureFunc Its not explained in the documentation in any way In above program if I print the argument of the MeasureFunc I see its called multiple times which is understandable the layout engine probably does multiple passes but the width and height properties make no sense to me The width is always Undefined First of all this is an awesome project and I really appreciate everyone putting their effort into it While working on reactslate a React renderer for terminal in Node JS which is based on Stretch I noticed that when setting widthheight basically any Dimension property as a percentage it is converted to plain Points setting width to will result in Points being used in layout calculations Ive done some digging and found one line of code which might be causing that in getdimension function in bindingsjs Shouldnt this if let return return stretchstyleDimensionPercentnumber Im happy to do a PR to fix that but wanted a feedback before doing so Hey first of all let me thank you for this I am currently using yoga and Id like to replace it in the future so the stretch might be a great alternative Do you have any benchmarks already Ive stitched really qnd integration of stretch into my project and it seems to be a bit slower than yoga so Im wondering if this is expected or if Im doing something very wrong We should investigate if we can support ping jugglinmike who wanted to help out with this CrossPosting because is closed Any planned progress on the CAPI I dont have any Rust experience so no idea how interfacing Rust and C works IMO a CAPI should be toppriority because not everyone is doing Web stuff I am currently working on a project whose minimum support version is iOS I wonder is there any reason that the minimum deployment requirement for iOS is iOS 