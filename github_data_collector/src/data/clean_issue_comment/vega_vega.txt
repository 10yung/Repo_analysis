This feature would consist in adding an SVG mark to the set of existing marks It would allow the display of arbitrary SVG content on a visual This would be particularly useful for rich text annotations containing Different font families Different font colors Different font sizes Font icons Additional cosmetic decorations An SVG mark would have the following properties content width height x for the bottom left corner y for the bottom left corner Ideally it should be possible to customize the displayed content in relation to the visuals data using JavaScripts template literals The proper way to bind data to the SVG content has yet to be defined STOIC is happy to contribute some resources to implement this feature once it has been thoroughly discussed and specified Scatterplots among other chart types would benefit from the ability to choose a blend mode such as multiply It would work similar to blend modes in CSS A D example can be found here The JSON would like something like this mixblendmode value multiply or blendmode value multiply or blend value multiply Its useful when dealing with time series data represented as product of diffs img width altScreen Shot at pm src Please Check for duplicate issues Please file separate requests as separate issues on GitHub None found Clearly describe the goal of the feature request Why is it needed Switch data stored in fields or columns to rows in a new table or feature class This is useful when your tablematrix stores values in field names such as Field Field Field that you want to rotate so theyre arranged in rows It lets you switch the field names and the corresponding data values in the fields to rows Describe an envisioned solution What do you want the new behavior to be A quick checkbox or toggle that would transpose the underlying data directly from the viz view This way you dont have to open another db or dataviewing app to manually rotate data that includes headers If applicable share mockup images or links to examples illustrating the desired output If applicable share JSON spec designs for how the behavior would be made available in Vega Consider the sample pie chart below Animated pie chart If you click on the legends the pies will animated to disappear and appear If you mouse hover a pie it will translate Create transitions in the current version is complicated and it should be great to be able to configure a transition for an encoding property with something like this typearc encode update endAngle testisSelectedPie openingPie transistionfromfieldstartAngle tofieldendAngle durationvalue testisSelectedPie closingPie transistionfromfieldendAngle tofieldstartAngle durationvalue fieldendAngle I had a look to vegascenegraph and heres a possible implementation based on css animations which will work only when using svg renderer but shouldnt have a large impact on current structure The svg render could add a style element into marks element defining a transition to declare the keyFrames Some properties like opacity fill stroke will be supported directly For properties modifiyng a path like startAngle endAngle width height the path property should be calculated for from and to and animation applied to d property For properties defining transforms like x y angle the transform should be evaluated for from and to and animation applied to transform property Here below is a sample of generated html from my pie sample that will animate the first pie of the chart to close it the user clicked the first element in the legend to unselect it The difference with the current version of generated html is bold g classmarkarc rolemark piestylekeyFrames uniqueidgeneratedbycode fromdpathM e A L Z todpathM e L Z stylepath transformtranslate dM e A L Z stylefill rgb strokewidth opacity animationuniqueidgeneratedbycode s forwardspathpath transformtranslate dM A e L Z stylefill rgb strokewidth opacity pathpath transformtranslate dM e A e L Z stylefill rgb strokewidth opacity pathg What do you think It essentially would compute a new effective scale factor as scale dpi where scale is the old command line scale argument and dpi would be the new command line argument and then it would use the effective scale factor when calling the toCanvas function It would also store that DPI setting in the PNG via the options described here I think currently the PNGs that are exported do not contain any resolution information but Im not sure so it would probably make sense to leave it that way if the dpi argument is not specified The goal is to produce a responsive legend adjusting the number of columns based on the width of the plot The first approach produced misaligned legend entries while the second approach containing the same logic produced the desired result Misaligned legend when testing width directly in the columns property To see misalignment narrow viewport until legend goes to column columnssignalwidth In the second example the legend entries remain perfectly aligned regardless of the number of columns Aligned legend when storing the result of the same logic in a signal columnssignalncols This is a proposition for feature request Creating test for the PR sorry for the mess I dont know why I had to create another PR for that update I noticed that group have background and foreground elements I used the attr method of marks to handle css and added a cssForeground for groups to be able to style foreground part of a group I updated documentation schemas and modified SVGRenderer tests to ensure every mark is rendered correctly The new v Vega heatmap and isocontour transform requires raster grids matrices input data format as seen in these Vega example data files It would be helpful to add explanation of this data format in the documentation and examples In some applications one might want to style a Vega spec using CSS To also enable dynamic styling it would be necessary that we support setting the CSS class dynamically based on a signal Right now the only way to set a CSS class is via name or role but neither can be driven by signals cc mathiastiberghien