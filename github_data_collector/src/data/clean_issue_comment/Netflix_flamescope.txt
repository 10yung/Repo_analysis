Mixing package managers is not recommended Right now we have packagelockjson and yarnlock on the project We should keep only one and remove the other to avoid confusion and misuse Based on the READMEmd we should keep yarnlock and remove packagelockjson since thats what we recommend using Use the new StackProcessors introduced in nflxprofile to improve visualization of Nodejs FlameGraphs A new Option button was added to the interface incorporating Java Package Name and Layout img This button will open a modal with FlameGraph visualization options img Java Package Name was incorporated in FlameGraph Flavor as Group by Package Java img When using the new Nodejs flavor JS interpreted and compiled frames will be grouped together and the V JIT prefixes will be removed to make it easier to understand the program flow For example the frames below img Will become img The coloring represents how much time that frame executed as JIT optimized instead of interpreted We can also see optimization info in the FlameGraph footer img Nodejs Flavor will also group Argument Adaptor frames with their following frame We do that because Argument Adaptors are not part of the relevant execution flow but they can incur performance penality thus we also show this information on the footer img img img When using Group by Package Nodejs we group frames by Native code Kernel code nodemodules Nodejs API and app code img Depends on and We borrowed idleregexp for our internal system and it looks like the regexp hides some legitimate stacks in softirq context Current filter produces the following flamegraph If I make idleregexp match nothing I can see much more interesting stuff The trace comes from on Intel Skylake Is it possible to add a new record player or delete function on the web I can consider making a more functional platform I think this will be a good idea It would be great to be able to just drop a performance profile fileURL into the UI to analyze it Id really like filtering out some stacks in the GUI probably its possible in the perf cli somehow though Im kinda newish to perf Example usage Did whole system perf record found out process nodeexporter does its periodic work for s Ok Im interested what the rest of the system is doing so I could filter out matching regex eg if this stack or its parent stack match the regex ignoreinclude them As has been mentioned elsewhere a generic data file format would allow for converters to be written to support formats other than perf Has there been any work towards this yet Another approach seems to be what it being implemented in the source with native support of various profilers with each format having its own parsing routine I prefer this second approach but it seems the interface should be formalized a bit more Has a decision been made on which approach to take I would like to start sending some PRs to provide support for other profilers In some use cases avoiding parsing perf data for multiple times contributes the flamescope server performance its users experience flamescope already has an inmemory cache for the analyzed perf data and this PR adds filebacked one in case of inmemory cache miss In our case we render some graphs in a page by querying to flamescope which we run with three or a few more instances and the most simplest way to share processed data between them is filebacked cache To enable this feature change USEHEATMAPFILECACHE in appconfigpy to True Related issue Every time people access the flamescopes heatmap the server processes the perf output data which makes the user awaited So I am considering to cache preprocessed or firstreturned data Structure of the response is quite simple columns rows values maxvalue The most quick hack to cache it is storing in sessionStorage in local browser Better idea is to save the data as a metadata beside actual data In that case we need to decide naming convention for metadata Other idea is to store data in DB I am going to implement a cache anyway but I want to ask this before starting which is what kind of cache is easier to accept for you 