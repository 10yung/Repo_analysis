Is it possible to automatically raise the right error from ExconError module when the return status is not successful Hi Debian Jessie has version of excon and I mean to patch CVE with the help of Now whilst doing so I am using the following patch alibexconconnectionrb blibexconconnectionrb datum connection self cleanup data left behind on persistent connection after interrupt if datum persistent persistentsocketreusable reset end datum stack datum middlewares map do middleware lambda stack middlewarenewstack endreverseinjectself do middlewares middleware datum datum stack requestcalldatum unless datum pipeline persistentsocketreusable false datum responsedatum persistentsocketreusable true if datum persistent if key datum response headers keysdetect k kcasecmpConnection if oldsocket socketsdeletesocketkey oldsocketclose rescue nil end persistentsocketreusable true end Generate HTTP request verb methods atestsbasictestsrb btestsbasictestsrb response status end end testspersistent connections do connection Exconnew persistent true responsebody connectionrequestpath foo method getbody testsuccessful uninterrupted request do connectionrequestpath foo method getbody foo end begin simulate an interrupted connection which leaves data behind Timeouttimeout do connectionrequestpath foo method get end rescue TimeoutError nil end testresets connection after interrupt do response connectionrequestpath bar method get responsebody bar end end end end atestsrackupsbasicrb btestsrackupsbasicrb echo end getfoo do foo end getbar do bar end private def echo Whilst building I am getting the following build errors I am not sure how to patch these Am I missing something As I see some of them could be fixed by using the right certificates But I am unsure really Could you please help with the same Hello Id like to set some custom headers on proxy CONNECT requests to be able to some log info on the proxy server based on the header Would it be possible to add an option somewhere on the request datum to add custom headers eg something like Gos http clients ProxyConnectHeader The CONNECT request is constructed over here but Im not entirely sure how data is actually populated at request time My ruby is pretty limited but happy to help in any way I can While writing test for an excon middleware I came across this warning excon WARNING Invalid Excon connection keys idempotent instrumentorname mock retryerrors retrylimit Usersmarcocostarbenvversions librubygems gemsexcon libexconconnectionrb in validateparams Usersmarcocostarbenvversions librubygems gemsexcon libexconconnectionrb in initialize Usersmarcocostarbenvversions librubygems gemsexcon libexconrb in new Usersmarcocostarbenvversions librubygems gemsexcon libexconrb in new pry in pry This warning can be reproduced with the following snippet ruby VERBOSE true require excon Exconnew middlewares ExconMiddlewareResponseParser get This warning is issued because the list of middlewares I provided to excon is a subset of Excondefaults middlewares and Excondefaults includes idempotent instrumentorname mock retryerrors and retrylimit as default parameters Because their respective middlewares are not registered excon thinks these are extraneous parameters Heres the line responsible for this validation In the last few days Ive been chasing a memory leak that was introduced as part of the fix of The memory leak of the fix is actually discussed in the conversation about the fix and weve run into it We use Excon to keep a persistent connection to an API in a web application that runs with Puma as the server The Puma configuration allowed for a variable number of threads between a minimum and maximum this is how Puma runs by default With the new change the app uses all of the memory on the server and had to be killed Before the change the sockets for each connection were cached on the thread variables so when a Puma thread got destroyed it allowed the Excon sockets to be garbage collected With the new version the cache is stored on the connection itself When a thread is destroyed the cache does not clear the sockets that it holds for that thread which causes a leak of Excon sockets Im not sure what is the preferred fix there are a couple of solutions that I can think of The first one would be removing the cache I found it surprising and unexpected that sockets are shared between connections something also discussed in In our case to ensure thread safety we use a connection pool of Excon connections that the Puma threads can access Use ObjectSpacedefinefinalizer to cleanup the socket caches when a thread is destroyed I prefer the first option because is simpler and leads to less confusion about how an Excon connection really works The second solution seems a bit hackish to me However I may be missing a use case where the cache is necessary or useful There does not seem to be a way to apply an overall timeout to a request I have looked at connecttimeout readtimeout and writetimeout but what I really want is an overall timeout Timeouttimeout seemed one option but appears to have is own issues which I would prefer to avoid It seems time to move on from shindo to rspec since active development on shindo has waned This issue is for a discussion on the topic At the moment Im trying to get feedback on using webmockrspec in place of firing up servers wherever possible for the sake of fewer moving parts and a leaner test suite Note that we can still it seems we could still use all of the rackups etc See Then again the way it all works in the test suite is pretty simple Port being added to URL can be forced by using includedefaultport option Simplifies some of the port addition code Break out logic to determine if a default port into its own method Tests basic cases of schemeport combinations This is a big change in terms of default functionality and I suspect it will affect the gem users enough that it is worth considering what kind of version bump itd require Additionally Id like to have deprecation warnings when the omitdefaultport option is used with Excon but I am not sure which method to add the detection and warning output to Thoughts Fixes Per discussion in this should only add the port to the URL when includedefaultport is specified or the port was included in the original URL cc jclem Not sure what all we could borrow but allowing strings instead of regexes seems like it could be super handy 