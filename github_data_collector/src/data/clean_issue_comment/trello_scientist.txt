If subj is not enough we have use and try functions returning promises so async true Ill call these funcs as main and secondary There is Function consumer that uses main I am introducing parallel call so now consumer uses result of science call Consumer mutates object A after promise from main is resolved But secondary hasnt been resolved yet Secondary is resolved with object B and scientist grabs it to compare with A which at this point has been mutated already Result is false positive mismatch We currently solve it by cloning deep object A on the way from science javascript return sciencename function experiment thenfunctionresult return cloneDeepresult I thought you might be interested in making some general solution since our scenario seems quite real In your example you call inspect method on observation directly controlinspect But in your test you dont do that Instead you call utilinspect with argument of an observation and options object depth Method inspect has two arguments depth options depth is not being use in method itself but its required if you want to use utilinspect But If I want to call inspect method itself I need to call it like controlinspectnull depth even though first argument is called depth I hope its clear why it caused me minutes of time realising whats going on and why 