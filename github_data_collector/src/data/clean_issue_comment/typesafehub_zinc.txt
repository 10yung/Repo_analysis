Running as a user who is certainly not the root I have spark builds failing with error Could not create directory rootzinc compilerinterface What could cause this Angular CLI makes ng command available and it causes nailgun script to fail Simplest fix is to disable check for ng existence check whether we have an ng command do not check as it collides with ng from angular function ngexists type P ngcmd devnull ngexistsfalse I currently have a compilation job that I would like to run in memory but because Zinc uses io which in turn uses the DefaultFileSystem its impossible to do so With latest master heres what I get reload plugins info Loading global plugins from Usersgreksbt plugins info Loading project definition from Usersgrekscalazincproject printWarnings info Updating fileUsersgrekscalazincprojectproject info Resolving orgfusesourcejansijansi info Done updating warn UsersgrekscalazincprojectScriptitscala method apply in object InputTask is deprecated Use another InputTask constructor or the DefinputTask macro warn def scriptitTask InputTaskscriptitBase scriptitTestNamedir name s State scriptitParserdir name input warn warn UsersgrekscalazincprojectScriptitscala method binaryVersion in object CrossVersion is deprecated Use CrossVersionscalaApiVersion or CrossVersionsbtApiVersion warn val binaryVersion CrossVersionbinaryVersionversion warn warn UsersgrekscalazincprojectScriptitscala method libraryJar in trait ScalaProvider is deprecated see corresponding Javadoc for more information warn propertylibrary providerlibraryJargetAbsolutePath warn warn UsersgrekscalazincprojectScriptitscala method compilerJar in trait ScalaProvider is deprecated see corresponding Javadoc for more information warn propertycompiler providercompilerJargetAbsolutePath warn warn UsersgrekscalazincprojectScriptitscala method libraryJar in trait ScalaProvider is deprecated see corresponding Javadoc for more information warn propertyextra PathmakeStringproviderjarstoSet providerlibraryJar providercompilerJartoSeq warn warn UsersgrekscalazincprojectScriptitscala method compilerJar in trait ScalaProvider is deprecated see corresponding Javadoc for more information warn propertyextra PathmakeStringproviderjarstoSet providerlibraryJar providercompilerJartoSeq warn warn UsersgrekscalazincprojectScriptitscala method libraryJar in trait ScalaProvider is deprecated see corresponding Javadoc for more information warn propertyhome providerlibraryJargetParentFilegetParentFilegetAbsolutePath warn It would be great to get rid of them This is reflected by test failures info analysismerge info zinc status info zinc nailed analysiscache analysisa d classes aAscala info zinc nailed analysiscache analysisb d classes bBscala info zinc nailed analysiscache analysisc d classes cCscala error zinc nailed analysis cache analysisabc merge analysisaanalysisbanalysisc error Usersgrekscalazincsrcscriptitanalysismergetest error error Merging of Analyses that haverelationsmemberRefAndInheritanceDeps set to true is not supported error zinc nailed analysis cache a rebase c c error Usersgrekscalazincsrcscriptitanalysisrebasetest error error The direct source dependencies relation is not supported when nameHashing flag is disabled error zinc nailed analysis cache a rebase c c error Usersgrekscalazincsrcscriptitanalysisreloadtest error error The direct source dependencies relation is not supported when nameHashing flag is disabled error zinc nailed analysis cache analysisabc split aanalysisabanalysisbcanalysisc error Usersgrekscalazincsrcscriptitanalysissplittest error error Grouping of Analyses that haverelationsmemberRefAndInheritanceDeps set to true is not supported There is currently no option to prevent zinc start from putting Nailgun in the background This is a problem if I want to use something like runit to keep zinc running after reboots or zinc crashes etc An ideal solution would include this option making the zinc script use exec to start the JVM so that signals work correctly This would be a pull request but getting work to sign off on the CLA would take ages sorry SCALAHOME is pretty widely set to point at a local scala installation right Wouldnt this be preferable to defaulting to the bundled version of scala I use Zinc from Gradle to compile a Scala project Compilation fails with implicit numeric widening error but I dont see any information where is the error located I mean there is no file name line number I run gradle d compileTestScala and I get following output ERROR systemerr ERROR orggradleapiinternaltasksscalajdk ZincScalaCompiler implicit numeric widening QUIET systemout DEBUG orggradleapiinternaltasksscalajdk ZincScalaCompiler Compilation failed CompilerInterface QUIET systemout INFO orggradleapiinternaltaskscompiledaemonCompilerDaemonServer Exception executing orggradleapiintaCompiler f baf in compiler daemon orggradleapiinternaltaskscompileCompilationFailedException Compilation failed ERROR systemerr ERROR orggradleapiinternaltasksscalajdk ZincScalaCompiler one error found DEBUG orggradleapiinternaltasksexecutionExecuteAtMostOnceTaskExecuter Finished executing task compileTestScala LIFECYCLE class orggradleTaskExecutionLogger compileTestScala FAILED The project I am currently working even using the incremental compiler very often takes around minutes to compile Often in changecompile cycle I get some compilation errors in a few seconds but the incremental compiler still takes minutes to finish One argument against fail fast would be the possibility of more errors My counter argument would be whats the difference The compilation session wont be cached anyways As it only makes sense to invoke Zink locally the listening port should only be opened locally too This reduces the risk of being exploited remotely 