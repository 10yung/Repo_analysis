First step to v x drop compatibility with dryv x We will start writing Reform once the Trailblazer release along with the new website and PRO launch is out This issue is in a state of flux defining the planned API For a discussion about why I really want to abandon Reform x heres a talk that summarizes it Design keys Immutability never again will we make that mistake and provide an API that allows changing an object once its created Reduced internal complexity we probably wont need Representable for parsing anymore Coerciontyping use DryStructs that are orchestrated via a simplified twin validate ruby result Formvalidateform params Fills out the form and runs the validations The filledout form is somehow in result Fillout We used to have prepopulators to fillout a form before its validation Some people even used Formvalidate multiple times womanfacepalming The problem here was that this will also run coercion which is often not wanted and wrong eg when you serialized the already validated data and then want to display a correct me form ruby Formfilloutform data This bypasses validation and coercion ruby ruby Calling DrySchemamessages will return errors messages hints the solution here is to call DrySchemaerrors This should fix Complete Description of Issue is latest nonprerelease version on which means Gemfiles that dont explicitly request rc are still getting even though has bug fixes and improvements that users want and even though the changelog for says You can upgrade from without worries smile Expected behavior gem install reform Successfully installed reform gem installed Actual behavior gem install reform Successfully installed reform gem installed Hello Sorry if its implemented elsewhere I tried to find but didnt find thats why I wrote a test case drafted implementation so we can discuss Problem When have an API errors for collections are not indexed so not sure about what element caused the error Rails has implemented this behavior on Trying to set this configuration on my app I wasnt successful so implemented on Reform Solution Add one test for exactly the indexed errors making the default the non indexed behavior On ReformContractResultErrors if not using indexed errors keep the usual behavior else collect all the messages but organized indexing for collections on the errors hash TODO apotonick I know this class variable for configuration is stupid hahaha just wanted a fast switch for the test case would it good how as a feature Hi there Thanks for writing a great library Im using Reform to a manage a collection of nested forms from a parent form My parent form looks like ruby class GlobalVisitorSaveForm ApplicationForm property token collection companyvisitors populator companyvisitor form VisitorCreateForm validation do requiredtokenfilled end private def companyvisitorfragment as collection form collectionfind model modelcompanyid fragment companyid form form collectionappendmodelcompanyvisitorsbuildcompanyid fragment companyid end end Ive noticed that if I have many companyvisitors all of them get validated and saved during the process of saving the GlobalVisitorSaveForm even if my companyvisitors parameters do not reference any existing objects and my populator returns a new instance I am trying to find a way to configure my collection such that it only contains the relevant items based on the incoming parameters Or a way to exclude the items that are not being updated from being validatedsaved For a parent object that has many collection items it results in quite a bit of unneeded work when we know at the time of validation the subset of the collection we need to process Any advice on how to go about this Thanks As per apotonicks request in here is a PR to start the conversation about changes to Reform A couple things I noticed as I went through this failure did not actually return a boolean value It just returned whatever was in failure Since a new failure method was being added I updated failure to be more consistent with the expectation of a method Is the resultrb line is correct behavior Should it instead be a map As it is now its just going to find the first failure of the combined lists Couldnt there be multiple Hi this might be interpreted as a usability issue with the library but I dont want to create an account with gitter as it requests for too much information from my github account making it difficult to join If I may be so bold to suggest smth a mailing list would have a lower barrier of entry Complete Description of Issue Im using reform contracts in the context of trailblazer for schema validation of a REST API Ive seen that unexpected properties being sent in a JSON payload will just be cleared out instead of generating an error It has been said to me that this mimmicks the behaviour of rails strong parameters which will also remove unexpected input so I dont really have an issue with that But Id like to optin on different behaviour ie fail the validation and generate errors like Unexpected attribute for wrong input An example would be this kind of payload json user firztname John lastname Doe In this case Id like to generate an error for the firztname key as the contract only states the firstname and lastname properties Is this actually configurable Or is it completely missing I ve got some problems with dry validation translations into the ReformForm I have some contracts with the following configuration class New ReformForm configure do configmessages i n confignamespace administrationprojecttype end class New ReformForm configure do configmessages i n confignamespace administrationjobtitle end I also have some tests for those that go like this it project type must be filled do subjectname nil subjectvalid expectsubjecterrors name to includeProject type must be filled end it job title must be filled do subjectname nil subjectvalid expectsubjecterrors name to includeJob Title must be filled end My locales look like this en errors rules administrationprojecttype rules name filled Project type must be filled uniquename Project type name must be unique en errors rules administrationjobtitle rules name filled Job Title must be filled uniquename Job Title name must be unique I m testing with Rspec If I am to run the tests separately they work fine But when I run all tests then I get errors such as AdministrationJobTitleContractNew validation job title must be filled FailureError expectsubjecterrors name to includeJob Title must be filled expected Project subtype must be filled to include Job Title must be filled specconceptsadministrationjobtitlecontractnewspecrb in block levels in top required AdministrationProjectTypeContractNew validation project type must be filled FailureError expectsubjecterrors name to includeProject type must be filled expected Project subtype must be filled to include Project type must be filled specconceptsadministrationprojecttypecontractnewspecrb in block levels in top required I had my Reform form working with one nested model but I need that model to contain another nested model A tutorial hasmany steps a step hasmany images Heres my attempt class TutorialForm ReformForm collection steps populator steppopulator do property title property body validates title presence true validates body presence true collection images populator imagepopulator do property image validates image presence true end end def steppopulatorcollection index if item collection index item else collectioninsertindex Stepnew end end def imagepopulatorcollection index if item collection index item else collectioninsertindex Imagenew end end end Is this totally wrong Its not working at the moment