Added the encoding command line option for NUnit since it was missing For reference I want to zip files which names contains accentented characters The file name within the zip file will be changed Examples Build project xml xml version encodingutf Project DefaultTargetsCompressFiles xmlns Import ProjectMSBuildExtensionsPath MSBuildCommunityTasks MSBuildCommunityTasksTargets Target NameCompressFiles ItemGroup FilesToCompress IncludeFiles ItemGroup Zip FilesFilesToCompress WorkingDirectoryFiles ZipFileNameResultzip Target Project Files attached AccentErrorzip Example File names NonAccententedtxt rv zt r t k rf r g ptxt File names in the result zip NonAccententedtxt The first character of the original file name if it is non accented Example File names NonAccententedtxt rv zt r t k rf r g ptxt Note that the file name starts with an accented character File names in the result zip NonAccententedtxt NonAccententedtxt The MSBuild task to create installers with InnoSetup assumes Inno Setup The default install location for Inno Setup is Program Files x Inno Setup Retrying comes in handy when having to deal with the quirks that crop up when we try to deploy websites on IIS running w pexe processes lock the directory and prevent RemoveDir from working as intended Something like DeleteTree Directories Retries RetryDelayMilliseconds Would be nice I guess See the wireshark output for a PWD command immediately after logging in The response the welcome message is received before the expected code This results in a error whereas the actual response is correct The problem might be cause by the password command receiving multiple response and a second for the welcome message Add SignTool task to the package I have just stumbled upon this project and find it very useful I am going to use it as a NuGet package Therefore will I not change your code so it suits my purpose better Instead I hope you will consider my suggestion for more flexible build type and revision type numbering I bring up this suggestion since I want to hold a versioning where I control the majorminorbuild part And for revision will I use days for now Eg This is not possible now if I use your tools as it is meant to be used For now I have tweaked it as eg AssemblyVersionMajorMinorRevisionBuild My problem is if I had used revision as automatic then I would get the second I have four projects in my solution and therefore I will get four different revisions numbers on my assemblies This is not doable However I would like to use minutes since start date or hours since start date that would give me the needed flexibility Therefore I have this suggestion for your Versioncs file could be any of your four enumerations example is buildTypeEnum switch buildTypeEnum case BuildTypeEnumAutomatic build CalculateDaysSinceStartDate break case BuildTypeEnumIncrement build break case BuildTypeEnumReset build break case BuildTypeEnumNone default break could be any of your four enumerations needed is buildTypeEnum and revisionTypeEnum switch buildTypeEnum case BuildTypeEnumAutoDay build CalculateDaysSinceStartDate break case BuildTypeEnumAutoHour build CalculateHoursSinceStartDate break case BuildTypeEnumAutoMinute build CalculateMinutesSinceStartDate break case BuildTypeEnumAutoSecond build CalculateFractionalPartOfDay CalculateSecondsSinceStartDate break case BuildTypeEnumIncrement build break case BuildTypeEnumReset build break case BuildTypeEnumNone default break switch revisionTypeEnum case RevisionTypeEnumAutoDay build CalculateDaysSinceStartDate break case RevisionTypeEnumAutoHour build CalculateHoursSinceStartDate break case RevisionTypeEnumAutoMinute build CalculateMinutesSinceStartDate break case RevisionTypeEnumAutoSecond build CalculateFractionalPartOfDay CalculateSecondsSinceStartDate break case RevisionTypeEnumIncrement build break case RevisionTypeEnumReset build break case RevisionTypeEnumNone default break private int CalculateDaysSinceStartDate return DateTimeTodaySubtractstartDateDays private int CalculateHoursSinceStartDate break down a day into fractional seconds float factor floatUInt MaxValue return intDateTimeNowTimeOfDayTotalHours factor private int CalculateMinutesSinceStartDate break down a day into fractional seconds float factor floatUInt MaxValue return intDateTimeNowTimeOfDayTotalMinutes factor private int CalculateFractionalPartOfDay CalculateSecondsSinceStartDate break down a day into fractional seconds float factor floatUInt MaxValue return intDateTimeNowTimeOfDayTotalSeconds factor New task RegexMatchGroups to match groups defined inside pattern expression and return matched values together with group names and original source strings Current nunit console versions use as switch separator on both Windows and Linux Also the verbose switch has been replaced by traceVerbose Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend SqlExecute Task Scalar and ScalarXml execution mode resuts available directily as task output via ResultValue task output parameter