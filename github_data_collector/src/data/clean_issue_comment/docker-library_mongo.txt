 The MongoDB release signing key was expired yesterday but has been updated since Maybe we need to wait for an Ubuntu rebuild to get the latest key update before removing Last Ubuntu was day ago console docker run it rm buildpackdeps root b ef f fb export GNUPGHOMEmktemp d root b ef f fb gpg batch keyserver hapoolskskeyserversnet recvkeys C F A BC F BA C gpg keybox tmptmpDZIlj J fspubringkbx created gpg tmptmpDZIlj J fstrustdbgpg trustdb created gpg key BC F BA C public key MongoDB Release Signing Key packagingmongodbcom imported gpg Total number processed gpg imported root b ef f fb gpg fingerprint tmptmpDZIlj J fspubringkbx pub rsa SC expires C F A BC F B A C uid unknown MongoDB Release Signing Key packagingmongodbcom root b ef f fb Closes Running in the container I used docker run it mongo xenial binbash Using aptget update fails Error log W GPG error xenialmongodborg Release The following signatures were invalid KEYEXPIRED W The repository xenialmongodborg Release is not signed N Data from such a repository cant be authenticated and is therefore potentially dangerous to use N See aptsecure manpage for repository creation and user configuration details E Failed to fetch storevarlibaptlistspartialrepomongodborgaptubuntudistsxenialmongodborg multiversebinaryamd Packagesgz Hash Sum mismatch E Some index files failed to download They have been ignored or old ones used instead Running aptkey list grep A expired shows the expired key pub RA C expired uid MongoDB Release Signing Key packagingmongodbcom Added MONGOUSERNAME MONGOPASSWORD Credit goes to Basically Im trying to configure shards when running mongos js shaddShardrs db But the scripts in dockerentrypointinitdbd only run for mongod Does it make sense to run for mongos too password using environment variables This issue I would call it a bug but perhaps it is a feature request is that users would like to a la dockercomposeyml andor environment variables be able to set a database with a username and password they specify upon launch of the image Background This issue was filed and closed because the behavior of a PR was mentioned as the solution What actually does and what users expect are entirely different What PR does is set a user with elevated permissions ie root user that has superuser access to the entire MongoDB instance as mentioned in However what most users expect from these environment variables is that a database they specify is initialized with the username and password they have set It is confusing that these environment variables MONGOINITDBDATABASE MONGOINITDBROOTPASSWORD and MONGOINITDBROOTUSERNAME pertain to only setting a user with the role root on the database admin and initializing an user specified database for js and sh scripts in dockerentrypointinitdbd to be run against Proposal We should make the environment variables very explicitly named in what they do in addition to adding others for the behavior I think most users come to expect when reading the variable names Since it is the case most users would like their instance initialized with a database of their specification we should add this feature to meet that expectation We keep MONGOINITDBROOTUSERNAME and MONGOINITDBROOTPASSWORD We remove MONGOINITDBDATABASE as it is misleading We add MONGOINITDBROOTDATABASE and allow it to override the hardcoded admin database We add MONGOUSERDBADMINUSERNAME MONGOUSERDBADMINPASSWORD and MONGOUSERDBADMINDATABASE We update the documentation to state MONGOINITDBROOTUSERNAME MONGOINITDBROOTPASSWORD and MONGOINITDBROOTDATABASE will be used for the root role to Mongo MONGOUSERDBADMINUSERNAME MONGOUSERDBADMINPASSWORD and MONGOUSERDBADMINDATABASE will be used to initialize a user specified database That all of the js and sh scripts a user supplies in dockerentrypointinitdbd will be executed against MONGOUSERDBADMINDATABASE Reasons for change The variables MONGOINITDBROOTPASSWORD and MONGOINITDBROOTUSERNAME are only used for the admin database Currently all MONGOINITDBDATABASE does is have operations used against it whenever a user has dropped in js or sh scripts into dockerentrypointinitdbd This unclear unless you look at dockerentrypointsh in this repository and no where clearly stated in the documentation as such The documentation is unclear and the only way to hack in a user initialized database with a username and password on image launch is to also create a script in dockerentrypointinitdbd which then places burden on the user to maintain the root role credentials in environment variables which live separately from a custom js or sh script which they have to volume into the image References Issue PR Involved Persons mmirperez tianon vutran yosifkit lonix johnwyles Dockerfile shell FROM mongo ADD mongoinitsh dockerentrypointinitdbd shell mongodb about to fork child process waiting until server is ready for connections mongodb forked process mongodb T I CONTROL main SERVER RESTARTED mongodb T I CONTROL main Automatically disabling TLS to forceenable TLS specify sslDisabledProtocols none mongodb T I CONTROL initandlisten MongoDB starting pid port dbpathdatadb bit host fa cd mongodb T I CONTROL initandlisten db version v mongodb T I CONTROL initandlisten git version dd b d b ab a d bf c mongodb T I CONTROL initandlisten OpenSSL version OpenSSL g Mar mongodb T I CONTROL initandlisten allocator tcmalloc mongodb T I CONTROL initandlisten modules none mongodb T I CONTROL initandlisten build environment mongodb T I CONTROL initandlisten distmod ubuntu mongodb T I CONTROL initandlisten distarch x mongodb T I CONTROL initandlisten targetarch x mongodb T I CONTROL initandlisten options net bindIp port ssl mode disabled processManagement fork true pidFilePath tmpdockerentrypointtempmongodpid systemLog destination file logAppend true path proc fd mongodb T I STORAGE initandlisten mongodb T I STORAGE initandlisten WARNING Using the XFS filesystem is strongly recommended with the WiredTiger storage engine mongodb T I STORAGE initandlisten See mongodb T I STORAGE initandlisten wiredtigeropen config createcachesize Msessionmax evictionthreadsmin threadsmax configbasefalsestatisticsfastlogenabledtruearchivetruepathjournalcompressorsnappyfilemanagercloseidletime statisticslogwait verboserecoveryprogress mongodb T I STORAGE initandlisten WiredTiger message x eff bb a txnrecover Set global recovery timestamp mongodb T I RECOVERY initandlisten WiredTiger recoveryTimestamp Ts Timestamp mongodb T I CONTROL initandlisten mongodb T I CONTROL initandlisten WARNING Access control is not enabled for the database mongodb T I CONTROL initandlisten Read and write access to data and configuration is unrestricted mongodb T I CONTROL initandlisten mongodb T I STORAGE initandlisten createCollection adminsystemversion with provided UUID a c fc c ed a ed c mongodb T I COMMAND initandlisten setting featureCompatibilityVersion to mongodb T I STORAGE initandlisten createCollection localstartuplog with generated UUID bc c df c cbe cdaebc c f mongodb T I FTDC initandlisten Initializing fulltime diagnostic data capture with directory datadbdiagnosticdata mongodb T I NETWORK initandlisten waiting for connections on port mongodb T I STORAGE LogicalSessionCacheRefresh createCollection configsystemsessions with generated UUID b cba b b d e a b c a mongodb child process started successfully parent exiting mongodb T I INDEX LogicalSessionCacheRefresh build index on configsystemsessions properties v key lastUse name lsidTTLIndex ns configsystemsessions expireAfterSeconds mongodb T I INDEX LogicalSessionCacheRefresh building index using bulk method build may temporarily use up to megabytes of RAM mongodb T I INDEX LogicalSessionCacheRefresh build index done scanned total records secs mongodb T I NETWORK listener connection accepted from connection now open mongodb T I NETWORK conn received client metadata from conn application name MongoDB Shell driver name MongoDB Internal Client version os type Linux name Ubuntu architecture x version mongodb T I NETWORK conn end connection connections now open mongodb T I NETWORK listener connection accepted from connection now open mongodb T I NETWORK conn received client metadata from conn application name MongoDB Shell driver name MongoDB Internal Client version os type Linux name Ubuntu architecture x version mongodb T I STORAGE conn createCollection adminsystemusers with generated UUID ec de fad f e b mongodb Successfully added user mongodb user root mongodb roles mongodb mongodb role root mongodb db admin mongodb mongodb mongodb mongodb T E main Error saving history file FileOpenFailed Unable to open file homemongodbdbshell Unknown error Currently Dockerfile declares VOLUME for datadb dataconfigdb This is suboptimal because some workflows in inherited images become excessively complicated For example seeding a database from a dump now requires Dockerfile RUN mkdir datalocaldb COPY mongodump varmongodump RUN mongod fork dbpath datalocaldb logpath varlogmongodblog mongorestore db mydb varmongodumpmydb mongod shutdown dbpath datalocaldb RUN chown R mongodbmongodb datalocaldb CMD mongod dbpath datalocaldb instead of just Dockerfile RUN mongod fork logpath varlogmongodblog mongorestore db mydb varmongodumpmydb mongod shutdown because datadb doesnt persist between docker build and docker run invocations It is proposed to remove VOLUME directive and leave volumes configuration up to end user After a longer investigation in Mark Benvenuto found out that MongoDB is working in NanoServer My approach uses a simple COPY deployment as the MSI package cant be installed in NanoServer How should an official Dockerfile look like Hi Im running the mongo image on a NUMAenabled machine and I get following warning from logs when MongoDB is starting WARNING You are running on a NUMA machine We suggest launching mongod like this to avoid performance problems numactl interleaveall mongod other options How can I resolve this Any help is appreciated thanks 