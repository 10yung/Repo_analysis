Hi I would like to submit some updates and improvements to the PHP lexer fix case insensitivity of accordingly to the language they are case insensitive but currently are not php keywords when checked in keywords functionmethod names when checked in builtins fix heredoc the syntax with around the starting label was not recognized as is updates from the language support in binary decimal hexadecimal numbers support for binary numbers b Unicode codepoints escape syntax u add some missing keywords fn type declarations PHP including void and nullable types from PHP class anonymous classes yield from callable insteadof trait TRAIT goto NAMESPACE DIR others instanceof CLASS FUNCTION METHOD haltcompiler self even if its not really a reserved word I havent deleted them but I am in favor of the removal of the current builtinpredefined constants E and PHP and class stdClass from keywords they are not keywords and are case sensitive which is not the case of the keywords in PHP as said above Let me know if you agree and if I missed or forgot something Also is there a reason for TRUEFALSENULL to be in keywords I mean shouldnt rule rtruefalsenull b KeywordConstant be made case insensitive instead Thanks Adding a lexer for ECL ECL is the Enterprise Control Language for the open source HPCCSystem High Performance Computing Cluster from LexisNexis TypeScript allows a user to mark a property as an optional when defining an interface but appending a question mark to the property name Rouges TypeScript lexer doesnt currently support this because the lexer merely uses the states defined in the JavaScript lexer This PR prepends a rule to the statement state that will match a property name ending with a This will allow matches outside of the interface definition but as syntax checking is a nongoal of Rouge this is not considered to be a problem The TypeScript visual sample is updated to include an example This fixes Is your enhancement request related to a problem Please describe No particular problem Describe the solution youd like Id like to be able to define my own custom lexer locally to be used by my specific use case Additional context My online documentation contains code snippets in a custom homemade language Im not sure if its appropriate or worth the effort to get it reviewed by your team and to make it natively supported in Rouge Do you think if I can define a lexer I should just get it reviewed and merged Or would it make more sense to support custom local lexers Name of the lexer Typescript Code sample ts interface GreetingSettings greeting string duration number color string Screenshots Notice how Rouge correctly highlights required property name greeting but does not highlight optional property names duration and color due to the trailing Additional context This is an official example from the TypeScript docs Optional properties are very common in interface declarations dts files This is a lexer for C minus minus which is a dialect of C Its used as intermediate and handwritten language in the Glasgow Haskell Compiler More details its an acronym for Advanced Business Application Programming and therefore ABAP should be valid Is your enhancement request related to a problem Please describe Currently there is no way to specify rich lexers with options For example ERB in a configuration file with escaped content we would need to pass langerb to the escape lexer and parentconf to the erb lexer Describe the solution youd like I would propose the syntax langerb langparentconf there may be a CGI parser out there that can handle it Additional context A potential issue is that we may need to specify some keys be inherited or inherit all keys thats the default behaviour right now A good example of this is debug if debug is passed to the main lexer then all lexers involved should have debugging turned on Fixes Name of the lexer pythonrb Code sample A sample of the code that produces the bug python import datetimedatetime someobjectMethod someobjectattribute floats Additional context In rouge and Pygments is treated as an operator resulting in eg pink dots in Monokai The python formal grammar doesnt list as an operator Also other highlighters treat as unhighlighted text including sublime prism and githubs highlighter 