See Use kt val varName by value expression to declare a let value and kt valuevarName expression to override its value within a context Values are memoized pertest and accessed by invocation kt printlnvarName Fixes Found some issues in the sample code snippet while going through the docs Fixed it Using Gherkin style of tests Using plugin in Idea and running Spek with pluginv When I run Scenario B some part of code defined in Scenario A is also executed Anything written between Scenario and st step Given When Then respectively code out of scope of test steps is executed first Im not sure if this is valid behaviour or should I avoid using any code in this place For example I usually define properties used in whole scenario that are initialise in later steps It is confusing during debug if I run one specific scenario and as side effect code from different scenario is executed as well causing issues In example screenshot Running scenario B expected print message in log to be EBF But was actually ADEFB Screenshot at When right clicking on a folder in IntelliJ without Spek plugin installed JUnit plugin will display normal Run tests in folder name action However with Spek plugin installed this action will be REPLACED with Run speks in folder name Spek action only runs Spek tests and ignores JUnit tests Thus there is no way to bulkrun regular JUnit tests apart from creating run configuration manually This applies even for projects that do not use Spek at all which is especially annoying I have to create manual configuration for every tests in those projects I have a number of tests that require to be executed on a known thread one that has an OpenGL context associated to it Currently it doesnt seem possible to change Speks execution behaviour WIP most likely contains bugs Noteworthy changes The following blocks are now suspending tests its Thens etc fixtures beforeEachTest etc scope values constructor and destructor Scope values are eagerly invoked now This wont be an issue if your tests are passing on Spek Since that version accessing scope values became stricter which is in preparation for this This change is necessary to be able to make the scope values constructor and destructor suspending Big bonus with this change integration tests regarding the timeout feature runs more faster now Resolves Please release updated version of plugin that supports Intellij IDEA dont know when this happened saw it in the reporting functionality of IDEA During querying provider Run line marker class comintellijexecutionlineMarkerRunLineMarkerProvider javalangIllegalStateException Required value was null at orgspekframeworkintellijdomainScopeDescriptorCachefromClassOrObjectScopeDescriptorCachekt at orgspekframeworkintellijSpekRunLineMarkerContributorgetInfoSpekRunLineMarkerContributorkt at comintellijexecutionlineMarkerRunLineMarkerProvidergetLineMarkerInfoRunLineMarkerProviderjava at comintellijcodeInsightdaemonimplLineMarkersPassqueryProvidersLineMarkersPassjava at comintellijcodeInsightdaemonimplLineMarkersPasslambdadoCollectInformation LineMarkersPassjava at comintellijcodeInsightdaemonimplDividerdivideInsideAndOutsideInOneRootDividerjava at comintellijcodeInsightdaemonimplLineMarkersPassdoCollectInformationLineMarkersPassjava at comintellijcodeHighlightingTextEditorHighlightingPasscollectInformationTextEditorHighlightingPassjava at comintellijcodeInsightdaemonimplPassExecutorServiceScheduledPasslambdanull PassExecutorServicejava at comintellijopenapiapplicationimplApplicationImpltryRunReadActionApplicationImpljava at comintellijcodeInsightdaemonimplPassExecutorServiceScheduledPasslambdadoRun PassExecutorServicejava at comintellijopenapiprogressimplCoreProgressManagerregisterIndicatorAndRunCoreProgressManagerjava at comintellijopenapiprogressimplCoreProgressManagerexecuteProcessUnderProgressCoreProgressManagerjava at comintellijopenapiprogressimplProgressManagerImplexecuteProcessUnderProgressProgressManagerImpljava at comintellijcodeInsightdaemonimplPassExecutorServiceScheduledPassdoRunPassExecutorServicejava at comintellijcodeInsightdaemonimplPassExecutorServiceScheduledPasslambdarun PassExecutorServicejava at comintellijopenapiapplicationimplReadMostlyRWLockexecuteByImpatientReaderReadMostlyRWLockjava at comintellijopenapiapplicationimplApplicationImplexecuteByImpatientReaderApplicationImpljava at comintellijcodeInsightdaemonimplPassExecutorServiceScheduledPassrunPassExecutorServicejava at comintellijconcurrencyJobLauncherImplVoidForkJoinTask execJobLauncherImpljava at javabasejavautilconcurrentForkJoinTaskdoExecForkJoinTaskjava at javabasejavautilconcurrentForkJoinPoolWorkQueuetopLevelExecForkJoinPooljava at javabasejavautilconcurrentForkJoinPoolscanForkJoinPooljava at javabasejavautilconcurrentForkJoinPoolrunWorkerForkJoinPooljava at javabasejavautilconcurrentForkJoinWorkerThreadrunForkJoinWorkerThreadjava Sorry Im pretty inexperienced with the general contribution process So here is my pull request The pull request introduces a new Inspection detecting Spek classes without noarg constructors Constructors where all parameters have default values are considered noarg as well In general the wording may be improved a little bit since I am not really proficient in English The name of the Inspection class could be improved The wording in the message of the Inspection could be better I tested the Inspection locally and it seems to work reliably including check for Ignore or abstract classes Two quickfixes are provided one making the class abstract and one adding the Ignore annotation I observed that the pluginxml files are duplicated for the spekidepluginintellijidea and spekidepluginintellijandroidstudio modules So I added the configuration in both files Maybe it would make sense to at least extract some common parts out of it although I dont really know how to do it