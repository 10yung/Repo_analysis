Updated the Windows section to reflect the correct file to download on the SDL website as well as the latest version of mingw Mingw is currently installed its directory is in D Program Files mingww x win sehrtv rev mingw the SDLimage and ttf are installed to copy the entire SDL imagedevel mingwtargz SDL imagedevel mingwtar SDL image x w mingw folder to D Program Files mingww x win sehrtv rev mingw x w mingw But SDLgfx is different from SDLttf it does not have the x w mingw folder I do not understand how to install SDLgfx targz to Windows On an Ubuntu Eoan Ermine system the following command CGOENABLED CCi w mingw gcc GOOSwindows GOARCH go build v tags static ldflags s w fails to build Please be noted If you wish to test this specific application it expects my fork of CCUpdaterCLI with usrbini w mingw ld veandcogosdl sdlgosdl libslibSDL windows aSDLmouseotext xa undefined reference to GetDoubleClickTime Note This issue mostly exists to document the workaround which is Overwriting the gosdl libs files with the relevant MinGW static libraries not the dllpostfixed ones from works Specifically If an issue occurred with GetDoubleClickTime Get the MinGW devlibs from Overwrite libSDL windows a with bit libSDL a Overwrite libSDL mainwindows a with bit libSDL maina Any interests on this When I try to build my Go app to wasm I get many SDL failures GOOSjs GOARCHwasm go build o myappwasm sdlgo undefined sdlSurface sdlgo undefined sdlRenderer sdlgo undefined sdlMapRGB sdlgo undefined sdlRect sdlgo undefined sdlInit sdlgo undefined sdlINITEVERYTHING sdlgo undefined sdlQuit sdlgo undefined sdlCreateWindowAndRenderer sdlgo undefined sdlCreateRGBSurface sdlgo undefined sdlPollEvent sdlgo too many errors Is this expected to work Ive built many CC SDL games to WebAssembly but new to Go Hey there Im developing an application that I want to port to windows But when I crosscompile from linux the colors of most of the shapes I draw with the gfx library are flickering or are just wrong Crosscompiled on windows Video Linux Image Weird things Ive noticed grenades little rectangles flying across the map have the correct color when drawn on the map but have different colors for both the left and the right team in the infobars colorflickering of the playercircle on the map gets slower when there are less players alive and it stays at the correct color when there is only one player alive the transparent filled circle indicating that a player is blinded by a flashbang is missing completely I dont need to put the SDL gfxdll in the folder when I execute the program What I did to crosscompile Using Fedora mingw packages for sdl image and ttf are provided by the distro mingw SDL mingw SDL image and mingw SDL ttf gosdl v download sdl gfx sources mingw configure mingw make sudo mingw make install env CGOENABLED CCusrbinx w mingw gcc GOOSwindows CGOLDFLAGSlmingw lSDL Lusrx w mingw sysrootmingwlib lSDL gfx CGOCFLAGSDREENTRANT go build o csgoverviewexe x go Then I put these files into the same directory as the executable dem file demoreplay that I want to watch jpg file matching the map from the demo liberationserifregularttf from my repo libfreetype dll libjpeg dll SDL dll SDL imagedll SDL ttfdll SDL gfxdll this does not affect anything I have no idea where Im going wrong any help would be greatly appreciated PS a few demos replays for testing can be found here but any demo should work just fine fatal error unexpected signal during runtime execution signal SIGSEGV segmentation violation code x addr x pc x f a f a runtime stack runtimethrow x dacd x a usrlocalgosrcruntimepanicgo x runtimesigpanic usrlocalgosrcruntimesignalunixgo x c goroutine syscall locked to thread runtimecgocall x cc xc fbe x usrlocalgosrcruntimecgocallgo x b fp xc fbb sp xc fb pc x f b githubcomveandcogosdl sdlCfuncRenderCopy x b x f x x a ce x x cgogotypesgo x d fp xc fbe sp xc fbb pc x b bd githubcomveandcogosdl sdlRendererCopyfunc x b x f x xc xc homematiasgosrcgithubcomveandcogosdl sdlrendergo xd fp xc fc sp xc fbe pc x b githubcomveandcogosdl sdlRendererCopy x b x f x xc x xc homematiasgosrcgithubcomveandcogosdl sdlrendergo x fp xc fc sp xc fc pc x b e githubcomMatiasBarriosSDLUniverseSDLDrawStuff x b x f xac x x x homematiasgosrcgithubcomMatiasBarriosSDLUniverseSDLSDLgo xdf fp xc fcb sp xc fc pc x bd f githubcomMatiasBarriosSDLUniverseboardDraw x b homematiasgosrcgithubcomMatiasBarriosSDLUniverseboardboardgo x a fp xc fd sp xc fcb pc x c a mainmain homematiasgosrcgithubcomMatiasBarriosSDLUniversemaingo x fp xc ff sp xc fd pc x c e runtimemain usrlocalgosrcruntimeprocgo x e fp xc ffe sp xc ff pc x be runtimegoexit usrlocalgosrcruntimeasmamd s x fp xc ffe sp xc ffe pc x be exit status I am having a sudden panic while my game is running Out of nowhere the app just stops and throws this It seems to be tied to line in my maingo In that specific line I am polling for events But nothing else Any ideas It happens randomly sometimes it does not even happen at all sdlvulkango isnt included in any of the release tags so the default module Go tries to use wont work if you want to work with Vulkan This should probably be fixed for future releases Example code for drawing RED square go package main import githubcomveandcogosdl sdl imagecolor os const width height func main if err sdlInitsdlINITEVERYTHING err nil panicerr window err sdlCreateWindow color bug sdlWINDOWPOSUNDEFINED sdlWINDOWPOSUNDEFINED width height sdlWINDOWSHOWN if err nil panicerr surface err windowGetSurface if err nil panicerr fill background with black color rect sdlRectW width H height surfaceFillRect rect xff draw RED square for x width x width width x for y height y height height y surfaceSetx y colorRGBA R xff G B A xff flush our square windowUpdateSurface for for event sdlPollEvent event nil event sdlPollEvent if eventGetType sdlQUIT osExit Problem Windows draws RED square but in Linux Ubuntu KDE that code draws BLUE square Due debugging I found difference between pixel format in surface windows have RGB but linux have RGBA If we look at the code of SurfaceSet we can found branches go case PIXELFORMATARGB col surfaceColorModelConvertccolorRGBA pix i colR pix i colG pix i colB pix i colA And go case PIXELFORMATRGB PIXELFORMATRGB col surfaceColorModelConvertccolorRGBA pix i colB pix i colG pix i colR First branch executes on linux and not working correctly Second branch executes on windows and work correctly But first should have SAME logic alpha but in first case we have RGBA to RGBA conversion and it possible not correctly for SDL and we have RGBA to BRG which possible correctly On windows D eu Workspace Emissariesgo get githubcomveandcogosdl sdl go finding githubcomveandcogosdl sdl latest githubcomveandcogosdl sdl C Users martin go pkg mod githubcom veandco gosdl v sdl hintsgo could not determine kind of name for CSDLHINTANDROIDSEPARATEMOUSEANDTOUCH D eu Workspace Emissariesgo version go version go windows 