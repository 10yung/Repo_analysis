Ruby got released some time ago so it makes sense to run the tests there as well Hi there Im trying to add a feature more here to rubycritic which depends on fakefs and Im getting this exception Error RubyCriticGeneratorLintReportgeneratereporttest report file has data inside NotImplementedError NotImplementedError Usersetagwerkerrvmgemsruby rubycriticgemsfakefs libfakefsfilerb in flock homerubycriticlibrubycriticanalyserscoveragerb in block in synchronizeresultset homerubycriticlibrubycriticanalyserscoveragerb in open homerubycriticlibrubycriticanalyserscoveragerb in synchronizeresultset homerubycriticlibrubycriticanalyserscoveragerb in storeddata homerubycriticlibrubycriticanalyserscoveragerb in resultset homerubycriticlibrubycriticanalyserscoveragerb in results homerubycriticlibrubycriticanalyserscoveragerb in initialize homerubycriticlibrubycriticanalysersrunnerrb in new homerubycriticlibrubycriticanalysersrunnerrb in block in run homerubycriticlibrubycriticanalysersrunnerrb in each homerubycriticlibrubycriticanalysersrunnerrb in run homerubycritictestlibrubycriticgeneratorslintreporttestrb in createanalysedmodulescollection homerubycritictestlibrubycriticgeneratorslintreporttestrb in block levels in top required I see that flock is not implemented in fakefs If one were to try and implement it what would that look like For now Ive solved it by doing this monkeypatch in my project module FakeFS class File StringIO def flock true end end end I know it is quite hacky and it could have some side effects Any thoughts on how flock could be implemented in fakefs Thanks Greetings FileTest module looks a little too thin to handle what Pathname wants from him ruby FakeFSwithfresh do source Pathnamenewatxt FileUtilstouchsource target Pathnamenewbtxt targetmakesymlinksource p Filesymlinktarget Good p targetsymlink Fails with NoMethodError undefined method symlink for FakeFSFileTestModule end Dont get the purpose of FileTest file at all it just passes all responsibility to File module I believe this is related to which may still be an issue despite being closed but it seems that FakeFSFileSystemfind is unable to find files with curly braces in the file name and perhaps other special characters To reproduce prymain require fakefssafe true prymain FakeFS do prymain Fileopentestfilewithcurlybraces w f fputs Cant be found prymain Fileopentestfilewithnobraces w f fputs Can be found prymain end nil prymain FakeFSFileSystemfiles FakeFile nametestfilewithcurlybraces parent size FakeFile nametestfilewithnobraces parent size prymain FakeFSFileSystemfindtestfilewithnobraces FakeFile nametestfilewithnobraces parent size prymain FakeFSFileSystemfindtestfilewithcurlybraces nil Interestingly if I use a splat then the file is found prymain FakeFSFileSystemfindtestfile FakeFile nametestfilewithcurlybraces parent size FakeFile nametestfilewithnobraces parent size Im using MRI Ruby and FakeFS prymain gem list fakefs fakefs n prymain ruby v ruby p revision x darwin n prymain Ruby allows for us to pass chmod arguments in symbolic mode fakefs however will error when we try to do this For example with fakefs projectsfakefsmyteststestchmodfornonoctalnumbers master lls total rwrwr gnikonorov gnikonorov Jul chmodalotrb projectsfakefsmyteststestchmodfornonoctalnumbers master cat chmodalotrb require fileutils require fakefs filename testfiletxt FileUtilstouch filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos FileUtilschmodugowrx filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos FileUtilschmodugowr filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos FileUtilschmodugor filename currumask Filestatfilenamemodetos puts curr file umask is currumasktos FileUtilschmodugorx filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos projectsfakefsmyteststestchmodfornonoctalnumbers master ruby chmodalotrb Curr file umask is homegnikonorovgemruby gemsfakefs libfakefsfilerb in String cant be coerced into Fixnum TypeError from homegnikonorovgemruby gemsfakefs libfakefsfilerb in chmod from homegnikonorovgemruby gemsfakefs libfakefsfileutilsrb in block in chmod from homegnikonorovgemruby gemsfakefs libfakefsfileutilsrb in each from homegnikonorovgemruby gemsfakefs libfakefsfileutilsrb in chmod from chmodalotrb in main projectsfakefsmyteststestchmodfornonoctalnumbers master while without it projectsfakefsmyteststestchmodfornonoctalnumbers master lls total rwrwr gnikonorov gnikonorov Jul chmodalotrb projectsfakefsmyteststestchmodfornonoctalnumbers master cat chmodalotrb require fileutils require fakefs filename testfiletxt FileUtilstouch filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos FileUtilschmodugowrx filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos FileUtilschmodugowr filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos FileUtilschmodugor filename currumask Filestatfilenamemodetos puts curr file umask is currumasktos FileUtilschmodugorx filename currumask Filestatfilenamemodetos puts Curr file umask is currumasktos projectsfakefsmyteststestchmodfornonoctalnumbers master ruby chmodalotrb Curr file umask is Curr file umask is Curr file umask is curr file umask is Curr file umask is projectsfakefsmyteststestchmodfornonoctalnumbers master lls total rwrwr gnikonorov gnikonorov Jul chmodalotrb rxrxrx gnikonorov gnikonorov Jul testfiletxt projectsfakefsmyteststestchmodfornonoctalnumbers master I will add in support for symbolic mode and chmodding I need IOread and IOwrite to be mocked with the same methods and Fileread and Filewrite since rd party code in this case chef uses IOread and IOwrite instead of the more common Fileread and Filewrite I tried ruby module FakeFS class IO IO def selfreadargs kw FakeFSFilereadargs kw end def selfwriteargs kw FakeFSFilewriteargs kw end end def selfactivate activated true Objectclasseval do removeconstDir removeconstFile removeconstFileTest removeconstFileUtils remoteconstIO note this actually breaks things if you do it this way removeconstPathname if RUBYVERSION constsetDir FakeFSDir constsetFile FakeFSFile constsetFileUtils FakeFSFileUtils constsetFileTest FakeFSFileTest constsetIO FakeFSIO constsetPathname FakeFSPathname if RUBYVERSION FakeFSKernelhijack end true end end and that works but it would be good if that was the default It would be great to have a symmetric method to grab all the files created in memory and write them back to the real filesystem This would enable use cases like read files into memory perform IO that requires a lot of small changes write results back The CarrierWave gem invokes Fileidentical resulting in this error in my tests NoMethodError undefined method identical for FakeFSFileClass Given a directory with a file testrb ruby require fakefssafe RSpecdescribe cloning dir do describe cloning to root do it only loads the directory do FakeFSclear FakeFS do FakeFSFileSystemclonefoo expect Dir to raiseerror NoMethodError expectDir to eq bar home end end end describe cloning to new dir do it loads all the expected files do FakeFSclear FakeFS do FakeFSFileSystemclonefoo foo expectDir slice to eq foo foobar foobarbaz p Dir end end end end then running the following from that directory bash mkdir p foobar touch foobarbaz rspec testrb Both tests should pass The second test shows the expected behaviour that if a directory is cloned to a particular path all descendants of that directory are cloned appropriately However the first test shows the odd behaviour only the top level bar directory appears but the file within it baz is not cloned Also possibly related issues You can see that the Dir in the first test fails presumably as the glob does not match anything this gives a not that informative error message NoMethodError undefined method match for nilNilClass whereas in Ruby a glob which does not match anything gives In the second test you should see the whole path to the current directory on the real filesystem is cloned whereas in the first only home is this looks like it could be the same thing happening as for foo with all child directories disappearing for some reason Thanks We are using FakeFS in the fashion as described in the README FakeFS do your code end We noticed that for two independent tests the one run last would start failing because a certain directory already existed We solved that by calling FakeFSFileSystemclear The expectation was that the blocked call would behave similar to eg TimeCopfreeze where no state is maintained Preferred behaviour would be to start from a clean state Alternatively I would be helpful to call out this behaviour in the README 