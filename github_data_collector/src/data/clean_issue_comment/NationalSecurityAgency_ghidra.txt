i Intel I was unable to test with SleighDevTools I found compilers one for COFF and kind of decided that was too much development for me at this time see and another for ELF but was unable to get the pcodetest compiling due to limitations in that version of GCC it was unable to statically initialize the global array containing the unit tests for each test has my initial attempt at COFF Describe the bug There is a memory access violation BADACCESS in the dunqualifiedname function of demanglergnu as demonstrated with the string ZN AnimationOverlayHandlerImplD Ev This leads to a segmentation fault when launching the demanglergnu process To Reproduce lldb GPLDemanglerGnuososx demanglergnu ZN AnimationOverlayHandlerImplD Ev lldb target create GPLDemanglerGnuososx demanglergnu Current executable set to GPLDemanglerGnuososx demanglergnu x lldb settings set targetrunargs ZN AnimationOverlayHandlerImplD Ev lldb r Process launched UsersmarcDownloadsghidra PUBLICGPLDemanglerGnuososx demanglergnu x Process stopped thread queue comapplemainthread stop reason EXCBADACCESS code address x ffea f d frame x eab demanglergnudunqualifiedname demanglergnudunqualifiedname x eab movsx ecx byte ptr rax x eae cmp ecx x x eb jne x ec x eb mov rdi qword ptr rbp x Target demanglergnu stopped lldb bt thread queue comapplemainthread stop reason EXCBADACCESS code address x ffea f d frame x eab demanglergnudunqualifiedname frame x a f demanglergnudprefix frame x demanglergnudnestedname frame x f demanglergnudname frame x d demanglergnudencoding frame x demanglergnucplusdemanglemangledname frame x c demanglergnuddemanglecallback frame x f demanglergnuddemangle frame x f f demanglergnucplusdemanglev frame x cc demanglergnucplusdemangle frame x b demanglergnudemangleit frame x b demanglergnumain frame x fff b c d libdylddylibstart frame x fff b c d libdylddylibstart lldb register read rax rax x ffea f d Expected behavior No crash return proper error return code Environment please complete the following information OS eg macOS Java Version Ghidra Version Additional context In the long run the Ghidra default demangler could be implemented in a language which does not allow memory faults when using attacker created mangled symbols RISCV prepost patterns Tricore ELF relocations paterns The parseConversionOperator was removing the operator portion from the demangled string and using the namespace to set the name and namespace and then setting the name to operatorcastto Essentially it was flowing like this demangled NS Foooperator fullName NS Foo demangledNamespace NS demangledName Foo demangledName operatorcastto It is now demangled NS Foooperator fullNamespace NS Foo demangledNamespace NS Foo demangledName operatorcaseto I have also renamed the variables fullName and templatelessName to fullNamespace and templatelessNamespace to make it easier to understand when reviewing in the future There is also an unimportant typo fix in the commit resolves This simple patch will add the missing fields eidentosabi and eidentabiversion to the ElfHeader which may be useful for OS specific loaders and analyzers as well as displays the two fields in the Listing The got and symbol ptrs in MachO executables is broken offsetted sometimes x scrot Here we can see the addresses to not corresponds properly This is how it appears in IDA typically where the mapping is correct x scrot Similarly all the lasymbolptr table looks off x scrot In IDA x scrot After analysis in Ghidra this results in a completely broken output because all the function calls are wrong The bug is not present in all macho executables and since I dont have a mac its hard for me to provide a reproducible testcase What additional information can I provide Env Linux x Binary MachO bit Ghidra Describe the bug Element in the decompiler window sometimes not highlighted when you press middle button of mouse or other button for highlighting if you click again than maybe element will be highlighted To Reproduce Steps to reproduce the behavior Hover over the decompiler element variable for example Press middle mouse button Expected behavior You should see all highlighted elements Environment please complete the following information OS Linux Java Version Ghidra Version ae c ce b e d ebd d a Additional context I found problem commit is d f f a b c b cde fca but I think that real problem in commits that were made earlier The following code c include sysstath include fcntlh int fconst char s return opens ORDWR OCREAT OEXCL Gives the following assembly in x after converting the mode argument ba a MOV EDX o be c MOV ESI xc a c XOR EAXEAX c e f f JMP open Even after creating an arbitrary enum with the O defines from fcntlh it does not seem possible to convert the xc argument back to ORDWR OCREAT OEXCL using the Set equate menu The Multiterm filtering option does not seem to help Apply Enum also seems absent unless I select the whole MOV line but it does not have any effect Env Ghidra Linux x Describe the bug When exporting a program to XML a bytes file containing the memory blockssections is also created If the block currently being dumped is KiB in length and there is a second block directly following the current block there may be an overread into the next block The XML file reports the correct lengths of the blocks so the data from the overread appears as padding in the file between adjacent blocks The root of the problem appears to be here where there is a memory read bounded only by the chunking buffer size On a block KiB in size subsequent reads in this chunking loop will always attempt to read into the KiB buffer If there is no adjacent block only the bytes remaining in the block will be returned If there is a block adjacent however the read may extend into that next block and it will be dumped to the file if the block range is not aligned to KiB To Reproduce Have a binary file containing memory layout as described above Import the binary then run File Export Program and select XML Expected behavior Dumping of memory blocks to a file should read only the block currently being dumped Screenshots NA Attachments NA Environment please complete the following information OS Ubuntu Java Version Ghidra Version Additional context I have a need to redistribute the analysis of a binary but prefer to not distribute the binary itself I was creating a script that can reproduce the bytes file given the original binary and discovered this unusual padding between blocks 