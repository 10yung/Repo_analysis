 x I have read CONTRIBUTING and have done my best to follow them What did you do Prepend x on describe What did you expect to happen The describe closure is marked as pending and all examples within the closure is disabled What actually happened instead Compilation error missing argument for parameter flags in call Environment List the software versions youre using Quick v Nimble v Xcode Version Swift Version Swift Package Manager Project that demonstrates the issue swift class TestSpec QuickSpec override func spec xdescribe Source code regarding this issue Id like to pr Im just checking here to make sure Im not missing something obvious Disabling a describe or a context by prefixing them with x like xdescribe and xcontext would generate a compilation error complaining about a missing flags param contrary to itxit fdescribe or fcontext With this PR the following will compile swift xdescribesome description xcontextsome context description itwill not be run fail This PR adds a default value to the flags parameter in DSLswift and also corresponding tests in PendingTestsswift I have read CONTRIBUTING and have done my best to follow them What did you do I tried to generate the tvOS framework by using Carthage update platform tvOS but it did not generate arm modules Error populated is Could not find module Quick for target arm appletvos found x appletvossimulator x What did you expect to happen I want the Quick framework to be generated along with arm files What actually happened instead It generated Quick or Nimble framework on using Carthage only the simulator files Please replace this with what happened instead Environment List the software versions youre using Quick Nimble Xcode Version Swift Version XCode default Please also mention which package manager you used and its version Delete the other package managers in this list Carthage Archivezip The project should be short selfcontained and correct example iOS SDK Xcode does not call UIViewControllerviewDidAppear anymore when calling viewControllerbeginAppearanceTransition and UIViewControllerendAppearanceTransition when testing views directly This looks like a behavior change not directly related to Quick but think the docs need to be updated See Does this have tests X Does this have documentation Does this break the public API Requires major version bump Is this a new feature Requires minor version bump No behaviour was changed this PR only adds documentation Fixes x I have read CONTRIBUTING and have done my best to follow them What did you do We noticed that xcpretty was not capturing results of QuickSpec expectations for our XCUITests It was reporting tests failed in spec summary but not for individual tests Further comparison of logs with XCTest with QuickSpec showed that lines like Assertion Failure SomeSpecswift expected to were missing from output What did you expect to happen We expected this lines to be in the spec What actually happened instead No assertions in log Environment List the software versions youre using Quick Nimble Xcode Version Swift Version Please also mention which package manager you used and its version Delete the other package managers in this list Carthage Project that demonstrates the issue None Notes Fix What we actually found that recordFailure method was executed not on a current spec Following fix did help to get assertions in log extension QuickSpec open override func recordFailurewithDescription description String inFile filePath String atLine lineNumber Int expected Bool if self QuickSpeccurrent QuickSpeccurrentrecordFailurewithDescription description inFile filePath atLine lineNumber expected expected else superrecordFailurewithDescription description inFile filePath atLine lineNumber expected expected Is it something that other users seeing Should we contribute this into Quick This adds filtering support for singletestcase executions of Quick tests Although this is not super convenient in the Xcode UI clicking the X after a failure will now execute only the failing test This can also be done via commandline tests which increases the usefulness for a CI system that eg can retry specific tests When a nonQuick class is asked to selectively test eg SomeClasssomespecificfunction the default behavior of using QuickTestSuite to generate the suites will cause it to execute every test function rather than just the selected ones This change fixes this behavior by using the nonSwizzled variant of test suite selection when working against nonQuick selected tests x I have read CONTRIBUTING and have done my best to follow them What did you do Attempted to disable a Quick test I also disabled an XCTest to ensure this was a Quick bug and not just Xcode What did you expect to happen I expected that the test file would not run What actually happened instead All the disabled tests still ran on the disabled QuickSpec but none of the tests ran on the disabled XCTest I am able to use xdescribe to disable this test for the time being but ideally we should be able to disable tests in the scheme Environment List the software versions youre using Quick Nimble Xcode Version Version B Swift Version Xcode Default Please also mention which package manager you used and its version Delete the other package managers in this list Carthage x I have read CONTRIBUTING and have done my best to follow them What did you do Im integrating Quick into a codebase where I need to define the Xcode moduleframework manually As part of that Im roughly following the podspec to produce results Part of this investigation yielded an issue I couldnt get the Quick ObjectiveC files to be able to see the World class from Swift This is because internal Swift classes are not accessible even within the same module Because the generated header is part of the framework s public interface only declarations marked with the public or open modifier appear in the generated header for a framework target Methods and properties that are marked with the internal modifier and declared within a class that inherits from an ObjectiveC class are accessible to the ObjectiveC runtime Your reaction might be but clearly Quick is doing that right now and it compiles fine It took me all day but I finally narrowed down the why Quick is asking for extensiononly API which exposes an underlying bug in the compiler which causes internal Swift things to be available in the QuickSwifth file You can reproduce this issue by disabling the extensiononly flag in the Xcode project set APPLICATIONEXTENSIONAPIONLY to NO and itll stop compiling unable to find World SourcesQuickObjectiveCQuickSpecm Use of undeclared identifier World did you mean bold I recommend you take a look at how the bridging is working here so that youre not stuck scrambling to get this to work once the underlying bug is resolved You can likely use the fact that internal properties and methods are still available to get the kind of segregation youre looking for Environment List the software versions youre using Quick c f b c b f e cd d c Nimble na Xcode Version Swift Version Xcode Default Im playing around with runtime test generation and found that Im able to create tests with namespaces and punctuation character in method name In same time Quick uses QCKObjCStringUtilsc ExtendedIdentifier to remove such characters Could you share why it is important