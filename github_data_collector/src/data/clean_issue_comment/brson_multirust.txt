the update command prints out multiple lines of progressbar multirust version gives multirust bb fc output looks like this which is hard to illustrate in markdown with bash using space characters in terminals but needless to say its a lot of lines in a terminal bash multirust update nightly multirust updating existing install for nightly rustup gpg available signatures will be verified rustup downloading manifest for nightly rustup downloading toolchain for nightly I know its updating the percent at the end of the line so it must just not be removing spurious s also thank you all for making this thing Running multirust default stable verbose produces this output multirust checking metadata version multirust got metadata version multirust cmd default multirust toolchain stable multirust optionname verbose multirust optionvalue multirust unrecognized option verbose multirust default verbose stable or multirust verbose default stable doesnt work either A binary linking to SDL fails multirust run stable cargo run j verbose multirust checking metadata version multirust got metadata version Compiling libc v Running rustc Ehomemultirusttoolchainsstablecargo registry src githubcom ac ac a a libc src librs cratename libc cratetype lib g cfg feature usestd cfg feature default C metadata d d cf c C extrafilename d d cf c outdir E home rstprj bnoise target debug deps emitdepinfolink L dependencyE home rstprj bnoise target debug deps L dependencyE home rstprj bnoise target debug deps caplints allow Compiling rustcserialize v Running rustc Ehomemultirusttoolchainsstablecargo registry src githubcom ac ac a a rustcserialize src librs cratename rustcserialize cratetype lib g C metadatad e d f C extrafilenamed e d f outdir E home rstprj bnoise target debug deps emitdepinfolink L dependencyE home rstprj bnoise target debug deps L dependencyE home rstprj bnoise target debug deps caplints allow Compiling rand v Running rustc Ehomemultirusttoolchainsstablecargo registry src githubcom ac ac a a rand src librs cratename rand cratetype lib g C metadata fab fc a bc C extrafilename fab fc a bc outdir E home rstprj bnoise target debug deps emitdepinfolink L dependencyE home rstprj bnoise target debug deps L dependencyE home rstprj bnoise target debug deps extern libcE home rstprj bnoise target debug deps liblibc d d cf c rlib caplints allow Compiling lazystatic v Running rustc Ehomemultirusttoolchainsstablecargo registry src githubcom ac ac a a lazystatic src librs cratename lazystatic cratetype lib g C metadatae e dcc C extrafilenamee e dcc outdir E home rstprj bnoise target debug deps emitdepinfolink L dependencyE home rstprj bnoise target debug deps L dependencyE home rstprj bnoise target debug deps caplints allow Compiling sdl sys v Running rustc Ehomemultirusttoolchainsstablecargo registry src githubcom ac ac a a sdl sys buildrs cratename buildscriptbuild cratetype bin g cfg feature default outdir E home rstprj bnoise target debug build sdl sys d af caee cd emitdepinfolink L dependencyE home rstprj bnoise target debug deps L dependencyE home rstprj bnoise target debug deps caplints allow error could not exec the linker gcc Access is denied os error Could not compile sdl sys Caused by Process didnt exit successfully rustc Ehomemultirusttoolchainsstablecargo registry src githubcom ac ac a a sdl sys buildrs cratename buildscriptbuild cratetype bin g cfg featuredefault outdir E home rstprj bnoise target debug build sdl sys d af caee cd emitdepinfolink L dependencyE home rstprj bnoise target debug deps L dependencyE home rstprj bnoise target debug deps caplints allow exit code building a pure Rust library succeeds multirust run nightly cargo build j verbose multirust checking metadata version multirust got metadata version Compiling scratchpad v fileEhomerstprjscratchpad Running rustc src librs cratename scratchpad cratetype lib g outdir E home rstprj scratchpad target debug emitdepinfolink L dependencyE home rstprj scratchpad target debug L dependencyE home rstprj scratchpad target debug deps src librs warning unused or unknown feature warnunusedfeatures on by default src librs featuretest But running its tests does not multirust run nightly cargo test j verbose multirust checking metadata version multirust got metadata version Compiling scratchpad v fileEhomerstprjscratchpad Running rustc src librs cratename scratchpad cratetype lib g test C metadata f f c acdf C extrafilename f f c acdf outdir E home rstprj scratchpad target debug emitdepinfolink L dependencyE home rstprj scratchpad target debug L dependencyE home rstprj scratchpad target debug deps error could not exec the linker gcc Access is denied os error error Could not compile scratchpad Caused by Process didnt exit successfully rustc src librs cratename scratchpad cratetype lib g test C metadata f f c acdf C extrafilename f f c acdf outdir E home rstprj scratchpad target debug emitdepinfolink L dependencyE home rstprj scratchpad target debug L dependencyE home rstprj scratchpad target debug deps exit code gcc runs from the command line gcc version gccexe Rev Built by MSYS project Copyright C Free Software Foundation Inc Both stable and nightly seem to be affected the same way Since there may be something funky in my path echo PATH mingw binusrlocalbinusrbinbincWindowsSystem cWindowscWindowsSystem WbemcWindowsSystem WindowsPowerShellv usrbinsiteperlusrbinvendorperlusrbincoreperl multirust listtoolchains or possibly some other command should really show the version number for each installed toolchain ie beta x nightly x stable x This would be very handy indeed A more helpful error message would be great fresh install on osx no idea how to solve that I like to include profile information in my bash shell prompt about the current directoryproject eg current git branch rbenv ruby version etc I would like to be able to indicate which multirust toolchain is currently active in a succinct fashion eg nightly stable Currently the only way to determine which toolchain would be run is to parse output from multirust showoverride multirust showoverride multirust override toolchain nightly multirust override location Usersaetherknmultirusttoolchainsnightly multirust override reason directory override for Usersaetherknsrcrustgamesforredox rustc nightly b b e e cargo nightly ece e Im currently parsing it with something like bash rustversion test r Cargotoml return Detect a Rust project type p multirust devnull return local v local overrideinfomultirust showoverride local firstlineecho overrideinfo head n if firstline override toolchain then vfirstlineoverride toolchain else local secondlineecho overrideinfo head n tail n vsecondlinedefault toolchain fi if z v then echo v fi However this could be greatly simplified and would be less brittle to changes in multirusts output if multirust provided a subcommand or a flag to compute the the current toolchain name It could also avoid calling rustc and cargo to get their versions It could simplify to something like bash rustversion test r Cargotoml return Detect a Rust project type p multirust devnull return local vmultirust showtoolchain if z v then echo v fi This fails multirust listtoolchains nightly nightly stable multirust addtarget nightly x unknownlinuxmusl rustup no channel manifest at Usersmoimultirusttoolchainsnightly librustlibchannelmanifesttoml However It works to add the target on nightly multirust addtarget nightly x unknownlinuxmusl rustup downloading extra component from shell Usersyberrebymultirusttoolchainsnightlylibrustlibuninstallsh multirust default nightly multirust using existing install for nightly multirust default toolchain set to nightly rustc usrlocalbinrustc line Usersyberrebymultirusttoolchainsnightlybinrustc No such file or directory usrlocalbinrustc line exec Usersyberrebymultirusttoolchainsnightlybinrustc cannot execute No such file or directory Im pretty sure multirust default nightly should detect that the nightly toolchain is missing and reinstall it instead of happily reusing an existing install that doesnt actually exist multirust update stable multirust installing toolchain stable rustup gpg available signatures will be verified rustup downloading manifest for stable rustup command failed curl s f O rustup couldnt download checksum file Theres neither toml file nor checksums for it in dist directory for stable channel so its just confusing during multirust update stable invocation It is a bit untrivial need symlink just cargo install fails and also requires updating when nighly updates Maybe multirust should have explicit easy cargoclippy support to correctly install cargo clippy command and keep it afloat when updating nightly 