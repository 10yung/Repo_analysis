Should listen to activity lifecycle and invoke clearRemovedAdapterAndCancelRunnable when activity is destroyed I got this memory leak report from LeakCanary bytes retained androidosMessageQueue Leaking NO MessageQueuemQuitting is false GC Root Input or output parameters in native code MessageQueuemMessages androidosMessage Leaking UNKNOWN Messagecallback comairbnbepoxyEpoxyRecyclerViewremoveAdapterRunnable Leaking UNKNOWN Anonymous class implementing javalangRunnable EpoxyRecyclerViewremoveAdapterRunnable this comsprucemessengeruiDisablePoolEpoxyRecyclerView Leaking YES ViewmContext references a destroyed activity and ObjectWatcher was watching this mContext instance of comsprucemessengeruiMainActivity with mDestroyed true ViewmParent is set ViewmAttachInfo is null view detached ViewmWindowAttachCount key b ffc e ad c e b b d cd watchDurationMillis retainedDurationMillis key f e b e d a a METADATA BuildVERSIONSDKINT BuildMANUFACTURER Google LeakCanary version App process name xxxxxxxxx Analysis duration ms DisablePoolEpoxyRecyclerView is a subclass with only one method class DisablePoolEpoxyRecyclerView JvmOverloads constructor context Context attrs AttributeSet null defStyleAttr Int EpoxyRecyclerViewcontext attrs defStyleAttr override fun shouldShareViewPoolAcrossContext Boolean return false Using Epoxy Ive looked at the samples at the docs and search in the issues For all of these I dont see those mentioned What should be done if I use this library and want those Per the suggestion given in Ive implemented a View with its own internal expand and collapse logic and animation but the EpoxyRecyclerView seems to have issues with laying outmeasuring the dynamically changing height androidscreen Attached is the ModeViewl ModelViewautoLayout ModelViewSizeMATCHWIDTHWRAPHEIGHT class ListItemAccordion JvmOverloads constructor context Context attrs AttributeSet null defStyleAttr Int LinearLayoutcontext attrs defStyleAttr var isOpen Boolean false private set private val iconSize resourcesgetDimensionPixelSizeRdimensmalllistitemiconsize private val collapsedSize resourcesgetDimensionPixelSizeRdimensmalllistitemsize private val paddingSpace resourcesgetDimensionPixelSizeRdimenspace x private val colorTintList ResourcesCompatgetColorStateList resources Rcolorlistitemtext contexttheme private val iconView AppCompatImageViewcontextapply imageTintList colorTintList private val titleText TextViewcontextapply gravity GravityCENTERVERTICAL TextViewCompatsetTextAppearancethis RstyleH Regular setTextColorcolorTintList maxLines private val chevron AppCompatImageViewcontextapply imageTintList colorTintList private val infoText TextViewcontextapply visibility GONE TextViewCompatsetTextAppearancethis RstyleB Regular setPaddingRelativeresourcesgetDimensionPixelSizeRdimenspace x init orientation VERTICAL setBackgroundResourceRdrawablelistitembackground isClickable true isFocusable true isEnabled true layoutTransition LayoutTransition addViewLinearLayoutcontextapply orientation HORIZONTAL gravity GravityCENTERVERTICAL addViewiconView LayoutParamsiconSize iconSize addViewtitleText LayoutParams MATCHPARENTapply weight f leftMargin paddingSpace rightMargin paddingSpace gravity GravityCENTERVERTICAL addViewchevron LayoutParamsiconSize iconSize LayoutParamsMATCHPARENT collapsedSize addViewinfoText updateOpenState setOnClickListener isOpen isOpen updateOpenState private fun updateOpenState chevronsetImageResourceif isOpen Rdrawablechevronup else Rdrawablechevrondown infoTextvisibility if isOpen VISIBLE else GONE ModelProp fun setIconResIdDrawableRes resId Int iconViewsetImageResourceresId TextProp fun setTitletitle CharSequence titleTexttext title TextProp fun setInfoinfo CharSequence infoTexttext info Any ideas on how to fix this floating list item issue Currently I am really enjoying Epoxy I would like to make some requests Please add examples of following to wiki using Epoxy with Search View using Epoxy with contextual action mode It will be much better if you can also add a sample app to the repo demonstrating how to use epoxy with search view contextual action mode and dragging since they are common cases in apps Does epoxy have any helper classes to use with search view and contextual action mode just like EpoxyTouchHelper for dragging I am reading Wiki about EpoxyController and I find some description may be not correct Note The first time an EpoxyController builds models it will always run on the main thread even if you have specified an async handler link The running thread of models built in first time should be same as the thread running the requetModelsBuild If it is the first time we call requestModelBuild buildModelsRunnable will just run in current thread and buildModels will run in this thread as well public void requestModelBuild if isBuildingModels throw new IllegalEpoxyUsageCannot call requestModelBuild from inside buildModels if hasBuiltModelsEver requestDelayedModelBuild else buildModelsRunnablerun Epoxy not check and restrain the running thread of requestModelBuild if it will always be called in main thread the Wiki is correct but its not elihart Please help confirm that Thanks Hello Im not actually terribly familiar with Epoxy but figured Id take a crack at this since it seems like one of the last major holdouts in the community for incremental annotation processing Notes Its isolating by default but will be aggregating if KotlinModelBuilderExtension is enabled I would recommend separating the kotlin model builder to a separate processor in a separate PR as that would allow the others to remain isolating regardless The isolating processors should maybe also be separated as right now even one change to one isolating type will cause all of them to rerun Like Butter Knife this uses a workaround for reflectively digging out the Trees API and will fall back to being a DYNAMIC processor if trees arent available Updated KotlinPoet to the latest Some time back we added back support for Filer after kapt added support for generating Kotlin sources via them Note that this effectively requires Kotlin I didnt understand this comment from the original issue EpoxyControllers AutoModel is mostly isolated but it is a bit of a hack because the model types it depends on arent available until after annotation processing so it does some reflection to monitor that process Can take a look if you can point me to the right place Resolves At the moment epoxy only support for GridLayoutManager but sometime we use StaggeredLayoutManager and we would like to render some model is a full span model In this pull request I have added a class to support to set Model View is full span when we use StaggeredLayoutManager How it work kotlin Your model view ModelViewdefautLayout baseModelClass EpoxyModelStaggeredGridclass class MyModelView JvmOverloads FrameLayout Your logic Your controller myModelView idmyid setIsFullSpanModeltrue make this model is a full span model Convert Java to Kotlin I understand that immutability is good well I guess I know its good because it makes things thread safe I dont understand how changing a value in my Car ie lets say I increase passengerCount doesnt tell epoxy that my object has changed The hashcode changes Therefore wouldnt it make sense for epoxy to dispatch the changes If it doesnt use hashcode then why not I guess Im just more curious at this point at the underlying decisions in epoxy because I find it super annoying to update a model that might end up being a list within a list within a list Its just a lot of copy methods that I somehow mess up all the time Theres just copy methods within copy methods in order to just change a small value Sincerely someone still new at hashcode equals immutability etc When a Carousel is used inside an EpoxyRecyclerView with a height of wrapcontent it does not scroll sideways This problem is not present when the height of the RecyclerView is a fixed height matchparent or matchconstraint dp Heres a sample project for reproducing the issue Heres a gif for the issue GIF 