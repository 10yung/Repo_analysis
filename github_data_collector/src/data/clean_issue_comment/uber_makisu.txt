Describe the bug ADD tarballtargz is supposed to unpack the said tarball into the root Instead it just copies it into it To Reproduce The specific Dockerfile I ran into this at FROM scratch ENV LANGCUTF ENV LCALLCUTF ARG DEBIANFRONTENDnoninteractive ARG OSPACKdebiantargz ADD OSPACK RUN aptget update Here debiantargz is a minimal Debian rootfs tarball Expected behavior The tarball is unpacked so that I can run commands using its contents Instead I m getting info Step modifyfs ADD debiantargz a d c info Execute ADD debiantargz a d c took ms info Not committing step ADD debiantargz a d c info Step modifyfs RUN aptget update d f c error failed to execute build plan execute stage build stage build node do execute execute step cmd start exec sh executable file not found in PATH While using the Redis store and registry cache layers appear to be pushed but are not found on a subsequent build I dont see any errors so not sure how to debug this yet Build e info Committed gzipped layer sha dfc eb e ff b dfb ae e dc f a be cdfeaee bytes e info Pushing with cache ID e Build e error Failed to fetch intermediate layer with cache ID e find layer e layer not found in cache Describe the bug An environment variable used in ENTRYPOINT is not substituted with its value at runtime To Reproduce Assume a dockerfile FROM alpinelatest ENTRYPOINT echo MESSAGE Build it with docker works as expected docker build t makisuechodocker docker run e MESSAGEhello makisuechodocker hello Build it with makisu unexpected output makisubuild t makisuecho docker run e MESSAGEhello makisuecho MESSAGE binsh Expected behavior I expect ENTRYPOINT to change dynamically with respect to the environment variable The output above should be hello Additional context Im using makisu and docker Fixes case where homerihanbaretcalternativespager is symlinked to binmore Without this change TrimRoot fails when it tries to trim fstreesrc from linkTarget Is your feature request related to a problem Please describe Similar to we need to use COPY chown to change file ownership while creating our image In our organization we are not permitted to run makisu in a container or use chroot main reasons we are drawn to makisu so using modifyfs isnt really an option for us Describe the solution youd like Please make COPY chown work without modifyfs I heard from yiranwang there is already a TODO in the code to make this work Describe alternatives youve considered Would love to hear some Additional context Sample Dockerfile which reproduces the issue FROM alpine COPY chown srv Thanks and thanks for making Makisu Describe the bug Building the redis image succeeds with docker build fails with makisu Looks like a Dockerfile parsing error Error message e info Step modifyfs RUN set eux savedAptMarkaptmark showmanual aptget update aptget install y noinstallrecommends c acertificates wget gcc libc dev make rm rf varlibaptlists wget O redistargz ioreleasesredis targz echo e c d d be d f fb c aad a d b redistargz sha sum c mkdir p usrsrcredis tar xzf red istargz C usrsrcredis stripcomponents rm redistargz grep q c fc ee e error Command exited with e error sh Syntax error Unterminated quoted string e error failed to execute build plan execute stage build stage build node do execute execute step cmd wait exit status To Reproduce git clone cd redis makisu build t redis where the last line evaluates to docker run i rm net host v varrundockersockdockersock e DOCKERHOSTunixdockersock v HOMEredis makisucontext v tmpmakisustoragemakisustorage makis uv build logfmtconsole t redis commitexplicit modifyfstrue load makisucontext Expected behavior makisu build should succeed where docker build succeeds Makisu offers two logging formats logfmtjson and logfmtconsole Many users would be used to a docker build command line experience but neither logfmt offers the same type of humanreadable output The console format is more humanreadable than json but it could be improved Observations Unusually the timestamp for logfmtconsole is reported in nanossinceepoch in an exponential format eg e Printing the log level info error is only useful when grepping for errors but often error is not an error but when the RUN command prints to stderr When RUN commands output a trailing newline console logger prints it and still adds its own Suggestions An improvement would be to make the timestamp an RFC or ISO format or print ISO at the start and later log lines print secondsmicros since makisu start Docker omits printing info when printing standard messages and stderr is printed in red This gives a human readable output Trim trailing newlines when echoing to the terminal as console logger prints its own newline Describe the bug Used makisubuild and docker build on the same Dockerfile Used docker inspect and see that the makisu image is about double the size To Reproduce Steps to reproduce the behavior cat Dockerfile FROM openjdk jdkslim RUN aptget update aptget install y netcat curl rm rf varlibaptlists docker build t java testdockerbuild makisubuild t java testmakisubuild docker inspect java testdockerbuild grep i size Size VirtualSize docker inspect java testmakisubuild grep i size Size VirtualSize Expected behavior I expected the images to be very close in size or the makisu generated image to be smaller Environments type makisubuild makisubuild is a function makisubuild makisuversionMAKISUVERSIONv cd docker run i rm net host v varrundockersockdockersock e DOCKERHOSTunixdockersock v pwdmakisucontext v tmpmakisustoragemakisustorage gcriomakisuprojectmakisumakisuversion build commitexplicit modifyfstrue load makisucontext cd docker version Docker version build bf swvers ProductName Mac OS X ProductVersion BuildVersion G Additional context Add any other context about the problem hereenvironment configurations logs etc Being able to use Makisu in a chroot would enable the build of docker images with no access to a containerizer It would mean that we no longer need a fresh container to be created for a build to work This PR will most likely change a fair amount over time as we assess our approach Describe the bug Saw build failure like failed to execute build plan execute stage build stage phase build node do execute execute step copy dir makisustoragesandboxsandbox stagescGhhc Uxusrshare to dir usrshare copy dir contents makisustoragesandboxsandbox stagescGhhc Uxusrsharezoneinfo to usrsharezoneinfo copy dir contents makisustoragesandboxsandbox stagescGhhc UxusrsharezoneinfoAfrica to usrsharezoneinfoAfrica copy file makisustoragesandboxsandbox stagescGhhc UxusrsharezoneinfoAfricaLusaka to usrsharezoneinfoAfricaLusaka chmod usrsharezoneinfoAfricaLusaka chmod usrsharezoneinfoAfricaLusaka too many levels of symbolic links 