Fixes ping re bit When a use statement is found for a relative annotation class it is always marked as found which bypasses the ignored namespace check However if the class itself does not exist an exception is thrown even though the namespace is ignored This PR fixes that issue I used the AnnotationReaderaddGlobalIgnoredNamespaceJMS to ignore Serializer Annotations I expected this to ignore Annotations imported via use Statement as well I dont know if this is a Bug or intended Behaviour Example I didnt update the Reader interface since it would be a BC break to do so sudofalse is deprecated and doenst do antying anymore compsoer selfupdate is already ran by travis anyways dependencies and this package dont declare to be compatible with php And most probably wont do so for a while so this allows to still run tests against that version instead of producing an error when trying to install the dependencies As v isnt here yet and looking at it is unclear if it will be coming anytime soon and as we have to put up with annoying deprecated functions here I propose to fall back to the standard autoloader if nothing else worked and if theres no custom loader defined Fixes I intentionally did not add any tests as this is a PoC Please tell me if this makes any sence and then Ill make a try with tests I understand that the AnnotationRegistry is being deprecated and in version we should just rely on the Composer autoloader which is awesome However it seems that at least in version you cant just use the autoloader you still must use the registry I think its wrong to mark the registry members as deprecated when no better alternative exists today This causes a lot of confusion amongst users and makes downstream deprecation tests somewhat useless since theres no way to get them to pass today I think that version x should be changed to allow using the autoloader for folks that dont want to use the deprecated functions At the moment constant parsing doesnt read self constants and I have a use case where that would be the most practical solution I would like to pass serialization groups for a property thats defined in a trait Since not all entities will have the same serialization groups for the properties in the traits the only currently available options that I see is to either repeat the property definition in each entity or repeat the groups serialization definition for each property and each entity in yamlxml I would have created a PR instead of an issue for this but from what I see in the DocParser class the only way to get the original class name would be to parse the context string which seems like a bad idea Im hoping that someone more familiar with the codebase could do it in a cleaner way If there isnt a better way please let me know and Ill make a PR Bug Report When an entity uses a trait that itself also uses a trait with a doctrine annotation the mapper failes to recognize the imported annotation Code example below if its not clear Q A BC Break no Version How to reproduce Create the following class and traits using doctrineorm php ClassAphp use Doctrine Orm Mapping Entity Entity class ClassA use TraitA php TraitAphp trait TraitA use TraitB php TraitBphp use Doctrine ORM Mapping Column trait TraitB Columnnamecolumn typestring protected column Trying to create a mapping for this setup will throw an AnnotationException Semantical Error The annotation Column in property Search Model ClassAcolumn was never imported Did you maybe forget to add a use statement for this annotation This will fail on any Doctrine annotation that is used in TraitB but not imported in TraitA or ClassA I expect the Columnannotation imported in TraitB to stay also be valid for ClassA where it ends up in The same as but for version 