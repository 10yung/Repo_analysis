I have just come across this project and think its great I would like to help but many of the issues I dont know how to fix eg how to implement Astral Plane Characters So after reading through the code I realised that adding another colour palette wouldnt be too hard as it would only require changing fg SolidColorBrushcreatertwithcolor xf f eabuildunwrap bg SolidColorBrushcreatertwithcolor x buildunwrap sel SolidColorBrushcreatertwithcolor x ebuildunwrap So my question is Is this wanted by the people in charge of this project I would understand if it isnt and I am working on copy and paste functionality but this seemed like a fun sidefeature Trying to use ctrl c or ctrl v results in the following being logged also no copyingpasting happens unexpected cmd unexpected cmd with regards to the selected code page chcp Active code page When I use my fancy Compose key to enter or via the Win emoji panel I just get this on stdout invalid code point xd d invalid code point xde Not sure whether not supporting unmatched surrogates is a bug or a feature for a text editor I d lean towards bug But the two should be joined together anyway may be of assistance in resolving this Currently errors emitted by the error macro from core is ignored in xiwin According to the log package binaries using libraries which use macros from the log package need to have a logger which can receive the logs The silent errors then make sense as Core is used as a library by xiwin which at the present uses no logger itself The fix seems to be initializing a logger early in the program I suggest just using something simple like envlogger to receive the logs from core until a more complicated solution is needed Conveniently we could also use this logger for tracing of commands etc This is a really small contribution because I am beginning to use xiwin but I decided to change the boundaries for scrolling not allowing to scroll when the text is smaller than the window size It seems more normal to me this way Hi Ive just seen your awesome talk about datadriven UIs in Rust and got intrigued by the problem of traversing a ECSstyle tree while borrowing nodes mutably I think I have a similar problem in other domain structured editing of syntax trees Dont want to go into details about it but if you want to code stuff find or create node X and add A B and C children to it you also sortof want two mutable borrows of different indices Id like to share my solution which is different from yours implement trampolinestate machine by hand I think it is actually worse for your use case due to interactions with object safety but its still interesting The idea is that instead of passing a mut Node one uses mut Tree NodeId That way its possible to reborrow mut Node as mut tree nodeid several times and use borrowing via other indices in between Now this does have to go a number of additional contortions to actually work for dyn Widget state you need to explicitly separate widgets state and behavior and then introduce an additional trait to make that object safe but it does work out in the end and result looks like this Rust struct Counter impl Widget for Counter type Data usize fn layout ctx mut LayoutCtx insead of passing mut Self we pass an index and mut Ctx me TypedIdSelf children Id usize for id in childreniter let childlayout ctxlayoutid ctxdatamutme childlayout ctxdatamutme On to re watching Flutter rendering pipeline talk Hi Ive wired up rusttrace crate in xiwin ui Its a small mess to setupcan make a powershell script to automate it but can be handy for debugging in absence of println also ETW events can be used by tools like perfview for profiling Was wondering if you see any value in a pull request for this if not so I could avoid the trouble of signing google license agreements Heres an example trace as displayed in the command line by mftrace Listening to ETW events CTRLC to end MFTRACELOG PID TID Time UTC TraceMessage RustTrace Generic xiwinui RustTrace Generic Request methodclientstartedparams RustTrace Generic Request id methodnewviewparams F C RustTrace Generic Response methodavailablethemesparamsthemes InspiredGitHubSolarized darkSolarized lightbase eightiesdarkbase mochadarkbase oceandarkbase oceanlight F C RustTrace Generic Response id resultviewid F C RustTrace Generic Response methodavailablepluginsparamsplugins viewidviewid F C RustTrace Generic Response methodconfigchangedparamschangesautoindentfalsefontfaceInconsolataGofontsize lineending r npluginsearchpath scrollpastendfalsetabsize translatetabstospacestrueusetabstopstruewrapwidth viewidviewid F C RustTrace Generic Response methodupdateparamsupdateops lines cursor styles text n opins pristinetrueviewidviewid F C RustTrace Generic Response methodscrolltoparamscol line viewidviewid RustTrace Generic Request methodeditparamsmethodinsertparamscharsaviewidviewid F C RustTrace Generic Response methodupdateparamsupdateops lines cursor styles texta n opins pristinefalseviewidviewid F C RustTrace Generic Response methodscrolltoparamscol line viewidviewid RustTrace Generic Request methodeditparamsmethodinsertnewlineparams viewidviewid F C RustTrace Generic Response methodupdateparamsupdateops lines styles texta r ncursor styles text n opins pristinefalseviewidviewid F C RustTrace Generic Response methodscrolltoparamscol line viewidviewid RustTrace Generic Request methodeditparamsmethoddeletebackwardparams viewidviewid F C RustTrace Generic Response methodupdateparamsupdateops lines cursor styles texta n opins pristinefalseviewidviewid F C RustTrace Generic Response methodscrolltoparamscol line viewidviewid RustTrace Generic Request methodeditparamsmethoddeletebackwardparams viewidviewid F C RustTrace Generic Response methodupdateparamsupdateops lines cursor styles text n opins pristinetrueviewidviewid F C RustTrace Generic Response methodscrolltoparamscol line viewidviewid RustTrace Generic cleanup As Ive described in Im trying to figure out how to get good performance on resizing and also scrolling It turns out to be quite tricky I have a couple of approaches and Im trying to collect data on how close either is to being acceptable Please test on your hardware and respond as a comment All testers Let me know OS version graphics card monitor size DPI scaling Please test master or if that hasnt been merged yet The test procedure is git clone cd xiwinxiwinshell cargo run example perftest release Does the spinner spin smoothly Does the frame interval hold steady at ms Does it still perform well if the window is nearly fullscreen Grab the left side of the window and resize Does the window frame track the mouse Is it smooth or is there jank Does the diagonal line stay glued to the upper right corner or does it judder Dont worry too much about the spinning when resizing for some reason it can get stuck when starting a move gesture I also dont expect the frame interval to be consistent while resizing though smoother is better Windows and higher Also try the fliphwnd branch Master just uses hwnd render targets but fliphwnd uses a more sophisticated approach In steady state it uses DXGI swap chains in the FLIPSEQUENTIAL swap effect However flip presentation is not synchronized with window resize so it switches to hwnd when resizing then back to flip Do git checkout fliphwnd then the same tests as above Is there flashing or any artifact when entering and exiting sizing Is performance roughly comparable Multiple monitors multiple GPUs My main laptop is a Gigabyte Aero which has integrated HD and a GTX in an Optimus configuration The laptop display is connected to integrated graphics and the external monitor to discrete It matters which GPU is selected which is generally the make this my main display in display settings performance is always degraded when crossing between the two Based on testing I think I always want to draw with discrete graphics at least in flip mode in hwnd mode I dont seem to have the choice How is performance affected when make this my main display is selected Higher frame rate monitors are also trickier Does the frame interval hold steady at the faster rate Thanks in advance to the testers Currently the presentation strategy is hwnd render targets which are older A swapchain will provide better performance but my experiments with swapchains currently in the dxgi branch show problems especially with things like smooth window resizing Ive written up my explorations and have also created a thread on gamedevnet as Ive observed others struggling with this problem In fact artifacts and lag on window resize is an extremely common problem Im offering a bounty of for a complete solution to this problem see the blog for details Ive spent a lot of time on this so much so its gotten in the way of other progress and while Ive learned a lot feel like Im getting to the end of that Hey Raph Ive been working on xrl trying to get it ready to start working on my front end over the next couple of months but id like to see Xrl used by as many front ends as possible at least the ones written in rust I found in my early experiences with Xi writing the Update logic to be a bit tedious and error prone Xrl handles all of that logicor it will after my PR is accepted just requiring the user to pass a Update to there line cache and Xrl handles it appropriately Multiple front ends using xrl would reduce duplication of work throughout the Xi community It is already in use by littledudexitui and i plan on having my front end bytebuddhaZen running by the end of this yearcant work on it until then Ive got a busy couple of months so im looking for smaller projects in the Xi ecosystem to work on in my free time I chose to try and convert xiwin first because It is small Not much development going on at the moment Its written in rust As far as i know Xrl has never been tested on any OS other than Linux and i would prefer to get testing on both Mac Windows So with that in mind a have a few questions What do you think of using Xrl as a common library for xi front ends If not why Is xiwin in to early a stage to switch to using xrl Have you ever thought about a seperateor internal in the xi repo library to handle all of xicore front end protocol from a front ends point of view If you have could you share your thoughts on it Thank you so much for creating Xi Ive found it to be the perfect project to play with in my free time and has taught me alot