This PR should add support for creating and updating records through JSON by posting applicationjson requests The GET apicontentstypeType request provides the capability to request by offsetcount But its impossible to determine how many items exist in the database Such information would be helpful to implement pagination on the frontends json data uuid a e ee abe cb d ed id slug itemid a e ee abe cb d ed customizable timestamp milliseconds since Unix epoch updated your content data totalcount I suggest to implement a totalcount or any similar name on the response I can send a PR for that I followed the steps mentioned in github for installing ponzucms however im not able to invoke ponzu from bash I have gone through earlier issues and but not able to resolve mine Current Setup work go env GOARCHamd GOBIN GOCACHEhomeubuntucachegobuild GOEXE GOFLAGS GOHOSTARCHamd GOHOSTOSlinux GOOSlinux GOPATHhomeubuntuwork GOPROXY GORACE GOROOTusrlocalgo GOTMPDIR GOTOOLDIRusrlocalgopkgtoollinuxamd GCCGOgccgo CCclang CXXg CGOENABLED GOMOD CGOCFLAGSg O CGOCPPFLAGS CGOCXXFLAGSg O CGOFFLAGSg O CGOLDFLAGSg O PKGCONFIGpkgconfig GOGCCFLAGSfPIC m pthread fnocaretdiagnostics Qunusedarguments fmessagelength fdebugprefixmaptmpgobuild tmpgobuild gnorecordgccswitches work go version go version go linuxamd work echo PATH homeubuntugembinhomeubuntulocalbinoptcs binoptbinusrlocalsbinusrlocalbinusrsbinusrbinsbinbinusrlocalgobinhomeubuntuworkbin work ponzu bash ponzu command not found work Commands that i ran for installation of ponzucms go get u v githubcomponzucmsponzu After above operation worksrc and workpkg are populated but not workbin As i was not able to resolve this on my own after going through many blog posts im raising this issue as a last resort Thanks in advance there was an issue discussed in the ponzu slack channel where knowing the order in which content types itemHookable methods are executed may have helped a lot this helps users determine the state of the database and what is available at what time documentation would be great to mention this order note the hook invocations these are not the only hooks called other handler funcs have the other itemHookable methods those should be documented as well the documentation should live in and copied into There is a big note documentation quoting that ContentType should be multipartformdata otherwise we get a big error is there any way to accept applicationjson There are a lot of tolls that dump json and working with json is usually easier than working with encoded form I understand that is not possible to upload stuff with applicationjson and were talking about CMS but this is a great tool for creating API with Lets Encrypt integration would be wonderful if could accept JSON natively Anyway great project and the Lets Encrypt feature is a dream that came true changes Add optional flag on generate content to read write JSON template file Update documentation ponzu will not work with go tested when GOPATH is set to anything other than GOROOT All commands execute without complaint but content and addons dont show up I propose that since GOPATH is no longer required and in fact go projects can now be located anywhere in the filesystem ponzu should work with relative paths To replicate using a recent version of go cd into some arbitrary directory and create a gomod file create a maingo hello world and prove that go does not require projects to be in GOPATH Unset GOPATH and do the same thing and prove again that this works Now in this directory try to use ponzu If GOPATH is unset ponzu will create the project in GOROOT which is probably not what the user wants to happen Set GOPATH to some directory other than GOROOT and use ponzu it will force a directory structure with GOPATHsrcrepositorydomainproject Again probably not what a modern go user would expect will succeed go ahead and generate a content type and use ponzu build to build the project The content files will be created and the build will succeed Use ponzu run to start the project and open a browser to the admin page The page will show but no content will be displayed Try to add an addon the addon will be added to the correct subdirectory in the current directory Rebuild and rerun and go to the admin page again The addon will not be shown Following the core go teams lead itd be great if ponzu also removed hardcoded dependencies on GOPATH and GOROOT and used relative paths This is beyond my knowledge of Go internals but it will probably require ponzu to become gomod aware I am thinking about getting the API more solid so that many more systems can use Ponzu Google have a project that can generate a ful openapi for test and grpc API Its used for many projects and it really fills a long sort after need It would also allow pub sub style interaction with other systems for updates etc and so would make it very easy to integrate Ponzu into a Microservices system Ponzu can be what drives your front edit but also can be the opposite in that end users can edit data into Ponzu and other services would get notified Ponzu would then be quite an amazingly useful building block Also working on Ponzu would be slot more solid too since its API is generated on top of the underlying schema Also because its grpc it would make it easy to then pump any mutation across to a message queue of different varieties This is what some teams might want for decoupling and other reasons The point is that its easy to use grpc middleware to do this and because its a middleware its not lots of new code Hence why grpc is quite useful This is only a suggestion Love to hear feedback This looks great and could simplify the TLS cert management in Ponzu If anyone is interested in helping with this one Im happy to help get started Have you thought about generating the content from a provided json schema ponzu gen content f songjson And the schema in the songjson would validate against the intended output of the API For instance this schema schema type object properties data typearray items typeobject properties uuid typestring id typeinteger slug typestring timestamp typestring formatdatetime updated typestring formatdatetime title typestring artist typestring opinion typestring imgurl typestring formaturl required titleartistimgurl Would generate the backend form and content type Then when data is loaded into that content type it would output json from the api like data uuid d e b c b d f fa b b a id slug song d e b c b d f fa b b a timestamp T Z updated T Z title Song artist Thomas Thomas rating opinion Good but redundant imgurl Which validates against the above schema And there could be additional fields added to the schema that would handle things like richtext