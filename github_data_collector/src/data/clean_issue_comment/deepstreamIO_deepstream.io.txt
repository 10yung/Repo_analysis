 const DeepstreamServer new Deepstream httpServer type uws default options port host allowAllOrigins true origins Message in browser console Warning blocked The page at was not allowed to run insecure content from wslocalhost deepstream bundlejs line Server code const Deepstream require deepstreamserver v const DeepstreamServer new Deepstream httpServer type default options port host DeepstreamServersetauthentication isValidUser handshakeData authData return isValid true id authDatausername async whenReady consolelogwhenReady This event never fired onClientDisconnect username consolelog onClientDisconnect username DeepstreamServerstart consolelog DeepStream started When trying to stop a Deepstream server it does not releasefinish the node process but hangs instead The following example never exits const Deepstream requiredeepstreamserver const run async const server new DeepstreamemptyConfyml serverstart await new Promiser setTimeoutr serverstop run Node API docs first example does not work const Deepstream requiredeepstreamserver const server new Deepstream It gives the following error output node UnhandledPromiseRejectionWarning Error No config file found at getDefaultConfigPath homeblomqesbdevwebdsnodeservicenodemodulesdeepstreamserversrcconfigjsyamlloaderts at setGlobalConfigDirectory homeblomqesbdevwebdsnodeservicenodemodulesdeepstreamserversrcconfigjsyamlloaderts at ObjectexportsloadConfigWithoutInitialization homeblomqesbdevwebdsnodeservicenodemodulesdeepstreamserversrcconfigjsyamlloaderts at ObjectexportsloadConfig homeblomqesbdevwebdsnodeservicenodemodulesdeepstreamserversrcconfigjsyamlloaderts at DeepstreamloadConfig homeblomqesbdevwebdsnodeservicenodemodulesdeepstreamserversrcdeepstreamiots at new Deepstream homeblomqesbdevwebdsnodeservicenodemodulesdeepstreamserversrcdeepstreamiots at Objectanonymous homeblomqesbdevwebdsnodeservicetestbug js at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code I found a few issues with storage authentication I was able to fix them but was not able to successfully submit a pull request Attached is the source file with my changes Here are the issues storageId constant was defined after it was accessed when creating a new user the result was not properly returned in a promise when validating an existing user the partition between the hash and the salt was not properly done due to variableness in the length of the base encoded hash storagebasedauthenticationtszip Trying to add as a service sudo deepstream service add c conf l varlog Fails with the following error The Service was never installed Service already exists please uninstall first deepstream version This is meant to be a continuation of the conversation on but since so much has changed I wanted to open up a new discussion Over the last six months since I quit my day to day job we have implemented ALOT of new concepts and cleanups in deepstreamio including Adding MQTT JSON and Protobuf endpoints a allowing you to easily add any other protocol seamlessly b allow all those protocols to actually talk to each other Adding offline functionality to the JS client Adding official plugin support for over core extensions types AND the ability to create custom plugins Creating a HTTP endpoint that allows you to easily just register your own HTTP calls and websockets into the server and also use the awesome uws stack across the whole networking stack You can even cluster lots of servers on one machine now just having redis installed locally New website in gatsby and react that is automatically generated from markdown minus a couple main files New realtimesearch provider Changed license to MIT Adding monitoring into the opensource core Added new authentication types Refactored everything to actually make it easier for people to contribute I hope And so much more However all this work has not been easy and I have spent most of my professional time working on this in the second half of with alot of and financial support from companies such as backboneplm that helped me get deepstream from where it left off in to where it is today That being said Im finding it hard to maintain the large ecosystem that compromises deepstream alone and although there have been core community members that have contributed there is just ALOT of things to ensure are up and running which make it more like a drop in puddle As such Im now looking to move all noncore aspects to contributors including all connectors to third party systems cache database clustering monitoring frontend frameworks like angular react knockout vue mobile frameworks like reactnative etc Alot of these projects are only lines of code and I feel like its a great place for people to get their feet wet with opensource and very well scoped projects in node Im more than happy to add author tags into any documentation and point to a repo in your githubbitbucket account as long as it falls under a community flag Im also looking for people who are looking to build and maintain SDKs in different languages This is definitely not that easy however its a fun project that can take a few days for a simple one You can even write connectionadaptors for deepstream to allow it to understand other protocols that already exist similar to those found on ablyio a great paas alternative Writing a small frontend library is easy to maintain as a sole contributor and can be taken over easily if they step down However writing a product that is meant to rival a company backed by google like firebase and keeping it opensource is not simple My gut feeling is that I feel this sort of technology can help most small to medium size companies get from a concept to production with realtime tech in zero time if used as intended My biased view is that it is superior to other nodebased tech out there since there are barely any other node based projects that allow you deploy a scalable datasync platform with just a couple of docker images However at the same time there are a tiny amount of contributions and I had to sacrifice the majority of my paycheck in order to give it the love these last few months I havent exactly reached that point in life where I have a safety net to be able to continue to do that Anyways this is the current thought process Im going through Since this is open source I figured it makes sense for me to be transparent and to allow the community to provide feedback suggestions and hopefully a couple of people to volunteer to become core contributors to motivate me to keep this project going on the long term and avoid me from potentially burning out Thanks for the reading Deepstreamio v Linux binary As I wasnt able to set custom db name in Deepstream config I created in RethinkDB web interface fresh database deepstream and then a devices table in it but I changed primary key name to imei Then inserted sample document rdbdeepstreamtabledevicesinsert imei holder John Doe contacts johndoecom doejohncom Now I accessed local HTML file to read holder value DOCTYPE html html head script src head body script typetextjavascript const client new DeepstreamClientip clientlogin const record clientrecordgetRecord consolelogrecordgetholder script body html Unfortunately it causes immediate server crash Result CONFIGTRANSFORM Loaded content from rootdeepstreamconfpermissionsyml for fileLoadpermissionsyml INFO logger ready std outerr INFO server name k nr fy l uyke ao INFO deepstream version INFO configuration file loaded from confconfigyml INFO library directory set to rootdeepstreamlib CLUSTERJOIN k nr fy l uyke ao CLUSTERSIZE The cluster size is now INFO logger ready std outerr INFO monitoring ready Noop Monitoring INFO subscriptions ready Subscription Registry INFO cache ready Local Cache INFO permission ready Valve Permissions INFO locks ready Distributed Lock Registry INFO clusterNode ready Single Cluster Node INFO clusterRegistry ready Distributed Cluster Registry INFO clusterStates ready Distributed State Registry INFO authentication ready Open Authentication INFO Listening for http connections on INFO Listening for health checks on path healthcheck INFO httpService ready NodeJS HTTP Service INFO storage ready Rethinkdb Storage Connector INFO connectionEndpoint ready Binary WebSocket Connection Endpoint INFO connectionEndpoint ready WS Text Protocol Connection Endpoint INFO connectionEndpoint ready WS Text Connection Endpoint INFO connectionEndpoint ready HTTP connection endpoint INFO Deepstream started INCOMINGCONNECTION from undefined censoredipaddress AUTHSUCCESSFUL open rootdeepstreamlibdeepstreamstoragerethinkdbsrcconnectorts version entrydsv TypeError Cannot read property v of undefined at rethinkdbtablegetrun rootdeepstreamlibdeepstreamstoragerethinkdbsrcconnectorts at tryCatcher rootdeepstreamlibdeepstreamstoragerethinkdbnodemodulesbluebirdjsmainutiljs at PromisesuccessAdapter rootdeepstreamlibdeepstreamstoragerethinkdbnodemodulesbluebirdjsmainnodeifyjs at PromisesettlePromiseAt rootdeepstreamlibdeepstreamstoragerethinkdbnodemodulesbluebirdjsmainpromisejs at PromisesettlePromises rootdeepstreamlibdeepstreamstoragerethinkdbnodemodulesbluebirdjsmainpromisejs at AsyncdrainQueue rootdeepstreamlibdeepstreamstoragerethinkdbnodemodulesbluebirdjsmainasyncjs at AsyncdrainQueues rootdeepstreamlibdeepstreamstoragerethinkdbnodemodulesbluebirdjsmainasyncjs at ImmediateAsyncdrainQueues rootdeepstreamlibdeepstreamstoragerethinkdbnodemodulesbluebirdjsmainasyncjs at runCallback timersjs at tryOnImmediate timersjs at processImmediate timersjs I am using Deepstreamio v binary for Linux My configuration file configyml looks like this storage name rethinkdb options host localhost port database mydatabase defaultTable mytable splitChar Its default config copy pasted config from Deepstream docs of the RethinkDB connector at the end of file First I realised the docs are outdated There is path rethinkdb but I had to change it to name rethinkdb But the main problem is I cant set default DB name to mydatabase When deepestream server is launched it always creates a new database called deepstream and creates a table called mytable Is there any syntax change for the database option as same as for path name Writing UTs for a CLI command is just absurdly complex given it actually loads up large parts of the server and reads files But for things like Deepstream info Deepstream hash Deepstream Nginx And so forth it would be good to write small scripts that ensure they actually run and return parts of what we would expect 