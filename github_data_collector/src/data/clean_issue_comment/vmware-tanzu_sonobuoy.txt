What this PR does why we need it If we are to support Windows nodes we want to avoid using bash scripts so that we dont have to duplicate the logic and translate it into a powershell script Changes include remove the runmastersh script and instead rely on the Dockerfile to have the proper aggregator invocation This way regardless of the underlying OS the image knows the right command to use remove the script for running the worker in singlenode mode This only served to run Sonobuoy and then sleep for some amount of time to avoid restarting the container Instead a flag was added to the singlenode command and golang handles the sleep functionality now By default it sleeps seconds consistent with the existing logic Slight modifications to command structure so that the subcommands can use the cobra RunE method and logging can be done at the top level only This helps avoid using osExit which hinders testability Which issues this PR fixes xref Special notes for your reviewer We need to pause before merging this to make sure we recognize the compatibility issues this may cause if any The CLI will not be specifying the command in the YAML anymore so new CLI targeting an old Sonobuoy version will not specify it in the YAML so it will rely on the Dockerfile which will call the script Since it is an old image it will have the script and things should be fine assuming that script is OK The aggregator will generate the YAML for the workers so its logic should be consistent old CLI with new Sonobuoy version will just have the command specified in the YAML so things should be fine for the aggregator The new aggregator will the create the workers appropriately Am I missing a compatibility case of concern Release note NA What this PR does why we need it First draft tinkering of building Sonobuoy to run on Windows nodes Which issues this PR fixes Fixes Special notes for your reviewer Ill be just using this as a reference as I put up smaller PRs that fix misc issues I ran into This will add anew Plugins page on the Sonobuoy landing page Signedoffby jonasrosland jroslandvmwarecom What this PR does why we need it TODO Which issues this PR fixes Fixes Special notes for your reviewer Draft PR as I want this to go out for initial review as I have little idea how to fix that properly Will improve the description etc tomorrow Feel free to push additional fixes if needed Release note Prevent CPU drain when streaming logs from pods when connection to API server breaks Follow up from The systemdlogsflag flag was deprecated in favour of systemdlogsimage The deprecated flag needs to be removed What steps did you take and what happened After running even single test eg sonobuoy run e efocus Aggregator Should be able to support the Sample API Server using the current Aggregator And then leaving sonobuoy logs f running for in my case h the process starts consuming CPU of a single core What did you expect to happen sonobuoy to not trigger fans in my laptop Anything else you would like to add strace doesnt say much didnt try gdb or anything sudo strace p strace Process attached futex x c acd FUTEXWAITPRIVATE NULL futex x c acd FUTEXWAITPRIVATE NULL futex x c acd FUTEXWAITPRIVATE NULL If you have some suggestions for debugging please let me know Environment Sonobuoy version sonobuoy version kubeconfig localtestingkubeconfig Sonobuoy Version v MinimumKubeVersion MaximumKubeVersion GitSHA API Version v Kubernetes version use kubectl version Client Version versionInfoMajor Minor GitVersionv GitCommit b f acc bed d ba dd f e cf GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Server Version versionInfoMajor Minor GitVersionv GitCommit b f acc bed d ba dd f e cf GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Kubernetes installer version Cloud provider or hardware configuration VirtualBox with Vagrant OS eg from etcosrelease Kubernetes nodes corecontroller cat etcosrelease NAMEFlatcar Container Linux by Kinvolk IDflatcar IDLIKEcoreos VERSION VERSIONID BUILDID PRETTYNAMEFlatcar Container Linux by Kinvolk Rhyolite ANSICOLOR HOMEURL BUGREPORTURL FLATCARBOARDamd usr Host where sonobuoy runs cat etcosrelease NAMEArch Linux PRETTYNAMEArch Linux IDarch BUILDIDrolling ANSICOLOR HOMEURL DOCUMENTATIONURL SUPPORTURL BUGREPORTURL LOGOarchlinux Sonobuoy tarball which contains below There is a download subcommand under images The purpose of this command is to download the images for the E E plugin into a tarball However this wont work for our recent releases as a number of the images included in the E E images list are unreachable They either dont exist or require authentication These images have been kept in the list to maintain consistency with upstream however Sonobuoy cant do anything with them They also cause the download command to always fail as we cant exclude them Given that we have had no feedback from users regarding this should we remove the download command Or should we update our images list to exclude images that cant be accessed by Sonobuoy Global genflags variable got reused on this branch and caused the problem referenced here We shouldnt need the globals and may need to just clean up a bit of the code Thanks to zubron I found the tests were failing because of some issue with the sonobuoy gen logic still to be fixed but cd testsintegration sonobuoy gen p testImageyamljobjunitpassingsinglefileyaml will output the default plugins and the specified plugin This means that it is trying to run a full conformance run which causes the tests to time out Originally posted by johnSchnake in Describe the solution youd like Enable Sonobuoy to meaningfully postprocess output from go test json so that the test results are viewable with sonobuoy results tarfile Anything else you would like to add JSON is already easy to parse Go is a pretty normal default language for users in the k s world Seems like an intuitive thing to support that wouldnt take much effort Describe the solution youd like Ticket is for the evaluation and resolution if simple enough of the output flags for the sonobuoy results command For now we support a few modes sonobuoy results defaults to report mode but detailed and dump are also allowed Report and dump are pretty straightforward since they generate a human readable report or dump the raw results file respectively The detailed mode is the one in question for me When we have tests we end up outputting a stream of json objects When we have a file like for the systemd logs plugin we print the filename and the file contents We should probably just split this up into more predictable behavior mode json which will print a stream of json objects if they are files then we probably wouldnt print the raw files in that mode mode files which would print the filenamescontents and maybe mode filecontents which would be a shorthand for mode files skipprefix Anything else you would like to add Open to other ideasdiscussion on this ticket before implementing But right now the modedetailed is not very descriptive and to have to use modedetailed skipprefix to get just the file contents seems unintuitive and clunky Environment Sonobuoy version Kubernetes version use kubectl version Kubernetes installer version Cloud provider or hardware configuration OS eg from etcosrelease 