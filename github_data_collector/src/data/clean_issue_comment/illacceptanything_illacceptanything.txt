 Hacktoberfest Notice Hacktoberfest submitters while we appreciate your interest in illacceptanything this repository is a collaborative sandbox with a purposely low bar of entry Submissions to this repository will not be counted towards Hacktoberfest we encourage you to contribute to some serious projects instead James Lu jamesoverdrivenetworkscom Mon Sep PDT We need a DSStore file to show that the project have elite developers with expensive macs According to it sounds like this project may go webscale We need to avoid that Of all the scales we could go I think webscale is the least appropriate and we should cautiously select an alternative Here are some suggestions timescale limescale Richter scale fish scale Without a NoSQL backend Im not seeing a clear or easy way to make this project webscale I see the MySQL connector exposed but that doesnt offer proper sharding or performance increases when scaled At the rate this project is gathering momentum I fear we will hit the theoretical limits of the backend RedisMongoDB is the clear solution to all of these issues A quick comparison will show webscale technology is the clear way to go with built in sharding modules and double hashed memory storage Better performance can be achieved by running Redis in front of it so we can then store all values in the queue On top of that we can have varnish cache additional content for even better scalability in the end Im gonna start working on a clean transition version so we can migrate to a solution better suited for the cloud Note In addition to moving to VarnishRedisMongo the defacto webscale stack in the cloud to date well also enable sha encryption keys during memory transport to ensure all data is securely stored in ram persistently but this will need to be another issue Please post detailed instructions for once Git clearly isnt suitable for a serious large projet like this one There was a project I read about a while ago that used minecraft to toy with some existential ideas It was minecraft as you know it except with the following rules people sign up for a survival mode game no flying no invincibility there can ever only be one player at a time after a person dies the next person spawns in their place I dont actually know the outcome of that experiment but theres this powerful concept of continuity and dependency You live off the land that some God or some unknown being before you has created Its like the past million years of human existence condensed into a much shorter experiment I want to build a similar experiment in the form of open source contributions If theres no such thing as a merge conflict one commit from each unique person at a time and everyone has full creative freedom during their turn but can also build on the work of others what can we collectively build This is the evolution of a program Some rulesideas I was thinking about build a system where people can sign up and get added to the end of a queue only one maintainercommitter at a time who has write access once a commit has been made current maintainer loses rights the torch is passed on a commit will get rejected unless it performs at least some number of byte additions and allowed only some number of removals current maintainer has hours to perform a commit otherwise they lose their rights Thoughts 