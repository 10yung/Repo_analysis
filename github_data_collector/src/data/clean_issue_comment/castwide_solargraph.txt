 ruby frozenstringliteral true class A def initialize a end return Boolean def sss ERROR report return type Boolean does not match inferred type Integer b a NOTE b infer to Boolean a end end by the way can we have a feature only report the mismatch type but ignore the uptyped warning so I dont have to comment every simple code just add what I need sorbet typed true is this behaviour VSCode cant use it Failed to start Solargraph Error LoadError incompatible library version Userseosrvmgemsruby gemsnokogiri libnokogirinokogiribundle LoadError incompatible library version Userseosrvmgemsruby gemsnokogiri libnokogirinokogiribundle The PR is in relation to issue Initial profiling looks promising as seen here masterthis pr img width altScreen Shot at PM src width altScreen Shot at PM src The rbspy reports its flamegraph in svg which github doesnt support unfortunately Both of these profiles were minutes of solargraph scan on our main repo The main take away from the current master branch is the wide flat region of the chart corresponding the determine the correct requires is essentially gone in this PR While this is only one repo a deep dive into the data shows this snippet went from profile samples to a X speedup Currently this PR doesnt pass a test in speclanguageservermessagetextdocumentdefinitionspecrb It appears that it doesnt correctly resolve a require Ive been trying to track down the reason but have not been successful so far The current suite of apimapspec test pass so there seems to be an edge case that I havent covered yet Any help would be appreciated Hi First off let me say awesome job to getting this project up and running I personally have a languageserver as my own side project and I know how much of an undertaking it can be Ive know there is some consideration on replacing the parser with a more high performance implementation but do some profiling Ive identified that on very large projects the bottleneck isnt parsing speed Ive been running rbspy against our companies main rails server project using solargraph scan Solargraph identifies k files so I would definitely say this is on the higher end use cases Long story short rbspy identified this chunk of apimaprb as contributing something in the ballpark of of the runtime potentially more Here is the same chunk of code below rb unless bundleworkspacerequirepathsempty reqsdeleteif do r result false bundleworkspacerequirepathseach do l pn Pathnamenewbundleworkspacedirectoryjoinl rrb if newmaphashkeysincludepntos localpathhash r pntos result true break end end result end end My understanding of what this chunk of code is trying to do is identify requires diff Im assuming the idea is to only process things that have changed since last time catalog was run as Ive tried to come up with a new algorithm to speed this up I believe Ive identified a bug in this implementation Specifically this line rb pn Pathnamenewbundleworkspacedirectoryjoinl rrb running apimapspecrb Ive noticed that bundleworkspacedirectory is the empty string causing the tests to pass Ive noticed in the general case this wont remove any reqs Consider this example rb input reqs lib lib newmaphash somepathlib rb someotherpathlib rb bundleworkspacedirectory some bundleworkspacerequirepaths somepath someotherpath paths tested in the code snippet above testedpaths somesomepathlib rb somesomepathlib rb somesomeotherpathlib rb somesomeotherpathlib rb output reqfinal lib lib expectedreqfinal lib Is this the the correct expected behavior Ive got some ideas about speeding this up mostly using a trie but I want to make sure that Ive got the correct behavior nailed down suppose following code class BBB def initializeargs a Anew a cant be infer end A Structnewfoo do o self self is classBBB end end can we support Struct or through some comment annotation The Ruby core documentation packages have been updated to take advantage of a new feature in YARD You can update your documentation with the following command solargraph downloadcore Check Updating Core Documentation in the README for more information To make sure you have the most recent docs test the following code in your editor ruby require securerandom SecureRandom Entering a dot after SecureRandom should include uuid among the autocomplete suggestions An update to the master branch removes irb from the runtime dependencies It breaks jruby due to its ioconsole dependency As far as I can tell Solargraph doesnt use irb directly Im noting the change here in case it causes unexpected issues Currently the code allows you to specific a custom location for the cache files which I was looking to do for XDG but doesnt actually mention it anywhere in the readme It would help people take advantage of it as a cool feature I only stumbled across it while looking at where the gem actually specified the home directory for the cache file currently solargraph relies on thor ruby saddruntimedependency thor I think it is time to upgrade as some core frameworks like rails are forcing thor to a min of thor version This might cause some issues with beginners who do not know how to fix dependencies is getting pretty old now VERSIONS December KB December KB November KB November KB has anyone done any tests with the new version of thor DEPRECATED Bundlerwithcleanenv has been deprecated in favor of Bundlerwithunbundledenv If you instead want the environment before bundler was originally loaded use Bundlerwithoriginalenv called at solargraph libsolargraphdocumentorrb 