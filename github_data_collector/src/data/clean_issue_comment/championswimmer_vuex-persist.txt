 if processenvNODEENV production thisstorage new exportsMockStorage When I include the supportCircular flag despite installing flatted it produces this error JSONparsemap is not a function at Moduleparse indexjs bc at VuexPersistencerestoreState indexts e e at VuexPersistenceplugin indexts e e at eval vuexesmjs f at ArrayforEach anonymous at new Store vuexesmjs f at eval storejsc d at Modulesrcstorejs appjs at webpackrequire appjs at fn appjs Persisted JSON has been corrupted and I cant handle JSONParse Unexpected end of JSON input Although removing data from storage will solve problem in production I cant do that this version will break any and all custom async storage implementations this should be a major or at least minor version update and not just a patch version increase the data type for async storage that is not localForage has been changed form being json to being the raw object Although this change might be good it certainly is no patch version Update as it breaks stuff on what most people have on automatic update duty Heres the restoreState function that retrieves some data from Firebase based on localStorage wishlistId js restoreState async key storage const snapshot await db refwishliststoragewishlistId oncevalue const data snapshotval consolelogrestoring data return wishlist ids dataids Heres the beforeEnter route callback js beforeEnter async to params next consolelogbefore restore await storerestored consolelogafter restore sone additional logic next I would expect the messages to be logged in the following order before restore restoring after restore But the messages are logged in this order before restore after restore restoring As a result the router redirects to a route before the state is restored I have asyncStorage set to true SyntaxError missing in const declaration found in distesmindexjs line for const key of Objectkeysthis line for const propertyName of ObjectkeysmergedState I tested it on Firefox version where this error causes Vue application to crash Replacing const with let should fix this While you have the reducer property we have to list ALL parts of the state that we want to persist In my situation of a complex store with many modules I only need to stop pieces of state data from being persisted it means that I have a lot of code to write for the reducer just so I can show what is to be persisted A much better approach for me would be a reducer that signifies what I DO NOT want to persist Is this an easy addition Im wondering if i can use this package with a single module not with the entire nuxt store IDB is a more popular library than localForage with a significantly smaller footprint Would you consider adding IDB support 