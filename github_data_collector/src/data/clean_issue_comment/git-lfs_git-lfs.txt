Theres a bug with Actions right now that causes the path to be set incorrectly and as a result this causes Windows binaries to be executed in some cases instead of the binaries that come with Git Bash This shows up in our test suite as a hang during the execution of tcredentialssh Since we cant build or release software while the Actions workflows arent working lets adjust the path temporarily so that things work as expected This is an inprogress look at the next release of Git LFS v which is scheduled for Tuesday January Were publishing these changes early so that folks on gitlfsimplementers can check that things work with their various platforms Ive attached some builds below for people to use for testing gitlfsdarwin v pretargz gitlfsdarwinamd v pretargz gitlfsfreebsd v pretargz gitlfsfreebsdamd v pretargz gitlfslinux v pretargz gitlfslinuxamd v pretargz gitlfslinuxarm v pretargz gitlfslinuxppc lev pretargz gitlfslinuxs xv pretargz gitlfsv pretargz gitlfswindows v prezip gitlfswindowsamd v prezip In addition the CI system will produce artifacts for Windows Linux and macOS if you prefer to use those they should be equivalent cc gitlfscore cc gitlfsimplementers cc gitlfsreleases Describe the issue If you delete or rename a file in the repository thats lockable its a good practice to lock that file so that no one else does work on the file At the moment you cant obtain a lock for a file thats not in the working tree so if you rename or delete the file then decide to obtain the lock you cant git lfs lock file that doesnt exist results in the error CreateFile full path to file The system cannot find the file specified Browsing the LFS source code the error may be the result of toolsSetFileWriteFlag failing in which case perhaps that should only be called if the file exists Propose that git lfs lock filepath allows locking files which dont exist perhaps with an option to allow this behavior to prevent obtaining locks for junk Rejecting paths which dont pass filepathClean may also be appropriate Theres a similar problem with unlocking Once youve pushed changes and want to release the locks if the file was deleted then git lfs unlock complains with the same CreateFile error if the file isnt in the working tree In this instance propose that git lfs unlock i id does not perform the check for the local file System environment git config l with personal information redacted diffastextplaintextconvastextplain filterlfscleangitlfs clean f filterlfssmudgegitlfs smudge f filterlfsprocessgitlfs filterprocess filterlfsrequiredtrue httpsslbackendopenssl httpsslcainfoCProgram FilesGitmingw sslcertscabundlecrt coreautocrlftrue corefscachetrue coresymlinksfalse credentialhelpermanager winupdaterrecentlyseenversion windows corerepositoryformatversion corefilemodefalse corebarefalse corelogallrefupdatestrue coresymlinksfalse coreignorecasetrue Output of git lfs env git lfs env with personal information redacted gitlfs GitHub windows amd go git d git version windows LocalReferenceDirs ConcurrentTransfers TusTransfersfalse BasicTransfersOnlyfalse SkipDownloadErrorsfalse FetchRecentAlwaysfalse FetchRecentRefsDays FetchRecentCommitsDays FetchRecentRefsIncludeRemotestrue PruneOffsetDays PruneVerifyRemoteAlwaysfalse PruneRemoteNameorigin AccessDownloadnone AccessUploadnone DownloadTransfersbasiclfsstandalonefile UploadTransfersbasiclfsstandalonefile GITEXECPATHCProgram FilesGitmingw libexecgitcore git config filterlfsprocess gitlfs filterprocess git config filterlfssmudge gitlfs smudge f git config filterlfsclean gitlfs clean f Additional context None Describe the issue bk Currently only arm amd and i are being put on the releases for gitlfs This creates an issue when going to use other architectures like s x and ppc le since we have to build from source It would be great to have s x and ppc le binaries added to releases for convenience Building s x binary using the build from source directions work fine see below for confirmation I could not tell how you are producing your builds I saw multiple CICD travis and circle You be amazing if releases could get up in Package Cloud but I am not familiar with them to know if they support s x and ppc le If you need access to s x and ppc le please let me know There are multiple ways to give you access System environment rooteda e acegobin gitlfs gitlfs GitHub linux s x go Sorry no usage text found for gitlfs rooteda e acegobin gitlfs install Git LFS initialized rooteda e acegobin uname m s x Describe the bug When forcepushing a ref to a remote if the object the remote sides ref points to is not in the local copy well abort with a message like the following ref temp Error in git revlist stdin objects not remotesorigin exit status fatal bad object ae e b e aa c dda ec ff Expected behavior We dont abort in this case and simply skip using that object System environment Debian sid Git LFS master Hey there I was looking at the git lfs dedup command which sounds really useful thanks for working on that I am running macOS on an APFS volume encrypted git lfs dedup test reports This system does not support deduplication unsupported platform Running cp c in terminal reports no error so I am assuming clonefile is working correctly I could not figure out how to determine clonefile actually working on macOS I am running gitlfs GitHub darwin amd go git d Any suggestions Am I missing something Thanks a lot Hi I found the rule of filepathfiltergo has being changed git lfs checkout pathtofilelib will being treated as pathtofilelib and cause pattern not matching thus specified lfs object will be rejected Ex GITTRACE git lfs checkout pathtofilelib gitc trace exec gitlfs checkout pathtofilelib runcommandc trace runcommand gitlfs checkout pathtofilelib trace gitlfs exec git version trace gitlfs exec git c filterlfssmudge c filterlfsclean c filterlfsprocess c filterlfsrequiredfalse revparse HEAD symbolicfullname HEAD trace gitlfs exec git config l trace gitlfs filepathfilter rewrite pathtofilelib as pathtofilelib trace gitlfs filepathfilter rejecting pathtofilelib via pathtofilelib Same thing also happen to git lfs pull includepathtofilelib Describe the bug Following up with Im accessing inhouse private git which used to be MS TFS but now as git With such Windows TFSgit the git config global httpemptyAuth true setting has no effect on git lfs To Reproduce Steps to reproduce the behavior git config global httpemptyAuth true git pull AOK Change Windows password git pull again Expected behavior git pull again after changing Windows password will still work However the current situation is that after changing Windows password git pull works for normal files but lfs files will not be working Error downloading object Smudge error Error downloading smudge filter lfs failed error external filter gitlfs filterprocess failed fatal smudge filter lfs failed could not detach HEAD System environment GitBash under Windows v but I believe its true for all Window versions Details Without git config global httpemptyAuth true git pull fatal Authentication failed for After git config global httpemptyAuth true without cached usernamepassword as reported above Error downloading object Smudge error Error downloading smudge filter lfs failed error external filter gitlfs filterprocess failed fatal smudge filter lfs failed could not detach HEAD Using GITTRACE GITTRANSFERTRACE GITCURLVERBOSE git pull I can see Authorization Negotiate TlRMT and zero hit for keyword credential Full log at NB this is the case log when all git lfs files are failing even though git is showing different errors at the end After adding the manager helper git config global credentialhelper manager Ref This stores your credentials in the Windows credential store which has a Control Panel interface where you can delete or edit your stored credentials With this store your details are secured by your Windows login and can persist over multiple sessions This is what I got as I dont know whats the simplest git lfs operation that will trigger doing the lfs downloading rm DependenciesSeleniumDriverschromedriverexe GITTRACE GITTRANSFERTRACE GITCURLVERBOSE git reset hard originmaster execcmdc trace resolved executable dir CProgramsGitmingw bin gitc trace builtin git reset hard originmaster runcommandc trace runcommand gitlfs filterprocess trace gitlfs exec git version trace gitlfs exec git config l trace gitlfs Install hook prepush forcefalse path Path to git hooks prepush upgrading trace gitlfs Install hook postcheckout forcefalse path Path to git hooks postcheckout upgrading trace gitlfs Install hook postcommit forcefalse path Path to git hooks postcommit upgrading trace gitlfs Install hook postmerge forcefalse path Path to git hooks postmerge upgrading trace gitlfs Initialize filterprocess trace gitlfs exec git c filterlfssmudge c filterlfsclean c filterlfsprocess c filterlfsrequiredfalse revparse HEAD symbolicfullname HEAD trace gitlfs WARNING matching push mode not supported trace gitlfs tq running as batched queue batch size of trace gitlfs filepathfilter rejecting DependenciesSeleniumDriverschromedriverexe via trace gitlfs filepathfilter accepting DependenciesSeleniumDriverschromedriverexe runcommandc trace runcommand running exit handler for pid trace gitlfs filepathfilter rewrite git as git trace gitlfs filepathfilter rewrite git as git trace gitlfs filepathfilter rejecting tmp via trace gitlfs filepathfilter accepting tmp HEAD is now at fda a be cc Update configure button Relates to On Mojave gem install ronn Successfully installed mustache Building native extensions This could take a while ERROR Error installing ronn ERROR Failed to build gem native extension current directory privatetmpgitlfs a g lsgitlfs srcgithubcomgitlfsgitlfsgemhomegemsrdiscount ext SystemLibraryFrameworksRubyframeworkVersions usrbinruby r siteconf x c knrb extconfrb mkmfrb cant find header files for ruby at SystemLibraryFrameworksRubyframeworkVersions usrlibrubyincluderubyh extconf failed exit code Gem files will remain installed in privatetmpgitlfs a g lsgitlfs srcgithubcomgitlfsgitlfsgemhomegemsrdiscount for inspection Results logged to privatetmpgitlfs a g lsgitlfs srcgithubcomgitlfsgitlfsgemhomeextensionsuniversaldarwin rdiscount gemmakeout Please take a look and help with the upgrade Thanks Describe the bug Been having random git push errors with lfs missing objects tried repacks and various other actions in several other issues Eventually got things back happy after an explicit git lfs push all origin master from top level dir Then I got user report that it was failing Only thing different was the other user tried to run it from a subdir I can now reproduce the failure from the subdir To Reproduce Steps to reproduce the behavior No idea how to create a reproduction of it but right now on my working copy I have Main Project DirClone network mgmt a couple dirs down Secondary Project DirClone network mgmt firmware in separate repo this dir is tftpfw If I run git lfs push all origin master from that dir it works just fine I get no errors at all If I cd two levels down to tftpfwrepositorycisco I start getting missing object error Expected behavior No failure to push System environment netconfnetstattftpfwrepositorycisco git version git version netconfnetstattftpfwrepositorycisco gitlfs version gitlfs GitHub linux amd go Running on ubuntu Output of git lfs env netconfnetstattftpfwrepositorycisco git lfs env gitlfs GitHub linux amd go git version Endpoint authbasic SSHgitgitmstedunetconfnetconffw Endpoint ssh authbasic SSHgitgitmstedunetconfnetconffw LocalWorkingDirlocalnetconftftpfw LocalGitDirlocalnetconftftpfwgit LocalGitStorageDirlocalnetconftftpfwgit LocalMediaDirlocalnetconftftpfwgitlfsobjects LocalReferenceDirs TempDirlocalnetconftftpfwgitlfstmp ConcurrentTransfers TusTransfersfalse BasicTransfersOnlyfalse SkipDownloadErrorsfalse FetchRecentAlwaysfalse FetchRecentRefsDays FetchRecentCommitsDays FetchRecentRefsIncludeRemotestrue PruneOffsetDays PruneVerifyRemoteAlwaysfalse PruneRemoteNameorigin LfsStorageDirlocalnetconftftpfwgitlfs AccessDownloadbasic AccessUploadbasic DownloadTransfersbasic UploadTransfersbasic GITAUTHOREMAILnneulumadumsystemedu GITCOMMITTEREMAILnneulumadumsystemedu GITAUTHORNAMEnneul at umadumsystemedu GITCOMMITTERNAMEnneul at umadumsystemedu git config filterlfsprocess gitlfs filterprocess git config filterlfssmudge gitlfs smudge f git config filterlfsclean gitlfs clean f Additional context Running against a local gitlabce environment 