In Go Beta the file and function information logged when ReportCaller is set to true reports logrus code not the calling code POC go package main import githubcomsirupsenlogrus func init logrusSetReportCallertrue logrusInfoLogging from init func main logrusInfoLogging from main foo func foo logrusInfoLogging from foo Output INFO tmppocmaingo maininit Logging from init INFO tmppocmaingo mainmain Logging from main INFO tmppocmaingo mainfoo Logging from foo Beta Output INFO homenzb gopkgmodgithubcomsirupsenlogrusv loggergo githubcomsirupsenlogrusLoggerLog Logging from init INFO homenzb gopkgmodgithubcomsirupsenlogrusv loggergo githubcomsirupsenlogrusLoggerLog Logging from main INFO homenzb gopkgmodgithubcomsirupsenlogrusv loggergo githubcomsirupsenlogrusLoggerLog Logging from foo Instead of relying on EnableVirtualTerminalProcessing from githubcomkonsortengowindowsterminalsequences which just calls GetConsoleMode sets ENABLEVIRTUALTERMINALPROCESSING and calls SetConsoleMode with the new modified mode implement it directly inside checkIfTerminal This also avoids the duplicate call to GetConsoleMode Note I have not created an issue for this and dont really feel all that strongly one way or another about it I was experimenting with some logging options and it seemed to me that logging fields in their GoString output format was clearer when they werent quoted Without this given a type like this the Stringer and GoStringer are the same mainly for illustration type Walrus struct name string weight float func w Walrus GoString string return fmtSprintfWalrusname q weight g wname wweight func w Walrus String string return fmtSprintfWalrusname q weight g wname wweight logWithFieldwalrus WalrusFred Debugwalrus details produces Ive trimmed a bit of interior whitespace for this PR text DEBU walrus details walrusWalrusname Fred weight With GoString enabled we get DEBU walrus details walrusWalrusname Fred weight which just seems prettier A wellformed GoString should produce unambiguously encoded results so it wont need quotes Commit message text follows Allow logging fields with their GoString result When using GoString never add extra quotes regardless of the ForceQuote setting the GoString format should take care of this Note that if some field does not implement the GoString interface we fall through to the remaining logic which obeys ForceQuote as usual In case of ReportCallertrue func andor file fields are clased set by WithField or WithFields The TextFormatter duplicates the clashed func andor file fields Root cause prefixFieldClashes does not delete func andor file fields if it are renamed to filedsfunc andor fieldsfile The TextFormatterFormat merges keys and fixedKeys so func and file are duplicated in the merged slice because TextFormatterFormat does not use unique list TestJSONFieldClashWithCaller didnt detect this problem because it uses unique data model map instead of slice Solution deleting func andor file fields in prefixFieldClashes if it are renamed new unit tests logrusWarn and logrusWarnln difference I try to use logrusxx and logrusxxln the output is the same and they all wrap The current godoc says of LoggerOut Its common to set this to a file or leave it default which is osStderr However this is in the struct doc rather than the documentation for logrusNew The default when declaring a logrusLogger as a struct is of course nil and leaving it that way results in a panic whenever a log would be written This is not necessarily incorrect from the point of view that both the StandardLogger and any New Logger would come with this value set but since many Go packages including logrus in other places also use default to mean the value that will be used if the caller leaves it at the zerovalue this is at least a little more ambiguousconfusing than it needs to be I do not think it would be reasonable to make the zerovalue useful in this case as there are just way too many methods that would need to check whether Out is nil and set it even doing this in one place such as within Entrywrite seems cumbersome Instead I would suggest either discouraging the style where the caller declares a struct instance directly or otherwise altering the documentation to avoid describing osStderr as a default value except in the specific context of logrusNew and logrusStandardLogger Fix typo in doc Consider data k fmtSprintfv err instead of data k vError not to loose stack trace when using githubcompkgerrors AddSkipPackageFromStackTrace excludes package names from the caller report when SetReportCaller set to true Commonly used to skip a custom logrus wrapper package frames ex logAddSkipPackageFromStackTracemycoolappmylogger skip mycoolappmylogger wrapper Merging changes discussed in with minor changes l logrusNew lExitFunc funcint fmtPrintlnexit lLoglogrusFatalLevel test The exit function was not called lFataltest The exit function is called Designed so 