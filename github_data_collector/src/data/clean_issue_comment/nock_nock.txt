Fixes mastermatt paulmelnikow sorry but I had to make a new PR because I fucked up git when doing a rebase Would be great if you could release this ASAP so that we can fix The devDependency semanticrelease was updated from beta to View failing branch This version is covered by your current version range and after updating it in your project the build failed semanticrelease is a devDependency of this project It might not break your production code or affect downstream projects but probably breaks your build or test tools which may prevent deploying or publishing details summaryStatus Detailssummary continuousintegrationtraviscipush The Travis CI build failed Details details details summaryRelease Notes for v summary h a href h h Bug Fixesh ul liadd codechannelcode to publish success log a href liadd a flag indicate which branch is the main one a href liAdd helpful detail to codeERELEASEBRANCHEScode error message a href datahovercardtypepullrequest datahovercardurlsemanticreleasesemanticreleasepull hovercard a a href liallow multiple branches with same channel a href liallow to set codecicode option via API and config file a href licall codegetTagHeadcode only when necessary a href licall codesuccesscode plugin only once for releases added to a channel a href licorrect log when adding channel to tag a href licorrectly determine next prerelease version a href licorrectly determine release to add to a channel a href licorrectly handle skipped releases a href lidisplay erroring git commands properly a href lido not call codeaddChannelcodefor merged branches configured with the same channel a href lido not create tags in dryrun mode for released to add to a channel a href lifetch all release branches on CI a href lifix branch type regexp to handle version with multiple digits a href lifix maintenance branch regex a href lifix range regexp to handle version with multiple digits a href lihandle branch properties set to codefalsecode a href liharmonize parameters passed to codegetErrorcode a href liignore lasst release only if prerelease on the same channel as current branch a href liincrease next version on prerelease branch based on highest commit type a href lilook also for previous prerelease versions to determine the next one a href limodify fetch function to handle CircleCI specifics a href lion maintenance branch add to channel only version gt to start range a href liremove confusing logs when searching for releases to add to a channel a href liremove hack to workaround GitHub Rebase amp Merge a href liremove unnecessary codeawaitcode a href lisimplify codegettagscode algorithm a href lithrows error if the commit associated with a tag cannot be found a href liupdate plugin versions a href liupdate plugins dependencies a href liverify is branch is up to date by comparing remote and local HEAD a href listrongpacjagestrong update codesemanticreleasegithubcode and codesemanticreleasenpmcode a href listrongpackagestrong update semanticreleasecommitanalyzer to version beta a href listrongpackagestrong update semanticreleasegithub to version beta a href listrongpackagestrong update semanticreleasegithub to version beta a href listrongpackagestrong update semanticreleasenpm to version beta a href listrongpackagestrong update semanticreleasenpm to version beta a href listrongpackagestrong update codesemanticreleasegithubcode a href listrongpackagestrong update codesemanticreleasenpmcode and codesemanticreleasegithubcode a href listrongpackagestrong update aggregateerror to version a href listrongpackagestrong update execa to version a href listrongpackagestrong update marked to version a href listrongpackagestrong update micromatch to version a href listrongpackagestrong update micromatch to version a href listrongpackagestrong update peachseries to version a href listrongpackagestrong update semverdiff to version a href liremove unnecessary codebranchcode parameter from codepushcode function a href lirevert to the correct refspec in fetch function a href liupdate plugins dependencies a href listrongrepositoryUrlstrong on beta repositoryUrl needs auth for prerelease flows a href datahovercardtypepullrequest datahovercardurlsemanticreleasesemanticreleasepull hovercard a a href ul h Featuresh ul liallow codeaddChannelcode plugins to return codefalsecode in order to signify no release was done a href liallow codepublishcode plugins to return codefalsecode in order to signify no release was done a href liallow to release any version on a branch if up to date with next branch a href lirequire Nodejs gt a href lirequire Nodejs gt a href lisupport multiple branches and distribution channels a href liuse Git notes to store the channels on which a version has been released a href listrongpackagestrong update semanticreleasecommitanalyzer to version a href ul h Performance Improvementsh ul liuse codegit tag merge ltbranch gtcode to filter tags present in a branch history a href ul h BREAKING CHANGESh pRequire Nodejs gt p hr pUse Git notes to store the channels on which a version has been releasedp pThis feature change the way semanticrelease keep track of the channels on which a version has been releasedbr It now use a JSON object stored in a a href relnofollowGit notea instead of Git tags formatted as vversionchannelp pThe tags formatted as vversionchannel will now be ignoredbr strongIf you have made releases with v beta on branches other than the default one you will have to update your repositorystrongbr strongIf you have never used v beta nothing has to be done in your repostrongp pThe changes to make consist inp ul liFinding all the versions that have been released on a branch other than the default one by searching for all tags formatted vversionchannelli liFor each of those version ul liCreate a tag without the a classusermention datahovercardtypeorganization datahovercardurlorgschannelhovercard href if none doesnt already existsli liAdd a Git note to the tag without the a classusermention datahovercardtypeorganization datahovercardurlorgschannelhovercard href containing the channels on which the version was released formatted as codechannels channel channel code and using codenullcode for the default channel for examplecodechannels nullchannel channel codeli liPush the tags and notesli liUpdate the GitHub releases that refer to a tag formatted as vversionchannel to use the tag without itli liDelete the tags formatted as vversionchannelli ul li ul hr pGit CLI version or higher is now requiredp pThe codemergecode option of the codegit tagcode command has been added in Git version and is now used by semanticreleasep hr pRegexp are not supported anymore for property matching in the codereleaseRulescode optionp pRegex are replaced by a href For example codecorecode should be changed to codecorecodep hr pThe codebranchcode option has been removed in favor of codebranchescodep pThe new codebranchescode option expect either an Array or a single branch definition To migrate your configurationp ul liIf you want to publish package from multiple branches please the configuration documentationli liIf you use the default configuration and want to publish only from codemastercode nothing to changeli liIf you use the codebranchcode configuration and want to publish only from one branch replace codebranchcode by codebranchescode codebranch myreleasebranchcode gt codebranches myreleasebranchcodeli ul details details summaryCommitssummary pThe new version differs by commitsp ul lia href codefix update plugin versionscodeli lia href codeMerge remotetracking branch originbetacodeli ul pSee the a href diffap details details summaryFAQ and helpsummary There is a collection of frequently asked questions If those don t help you can always ask the humans behind Greenkeeper details Your Greenkeeper Bot palmtree What is the expected behavior Expected that the following would block requests to nock What is the actual behavior It doesnt It looks like the scope will only intercept the request once a complete interception scope request reply is in place Possible solution Perhaps update the docs to clarify this I dont really have a position on whether it should block requests to that domain or not without a full setup but I do feel that this should be documented bc the shape of the process made me think that the scope was sufficient to block requests to that domain The current implementation only supports reqsetTimeout but Nodejs allows for optionstimeout to accomplish the same This is a bigger task so Im just adding a draft PR here to show with actual code what Im referring to This is a follow up to Such mistakes in the type definitions is likely to be the symptom of not validating the type definitions against the actual project Running TypeScript on the JScode would help fix that Also enforcing best practices on the JSDoc comments will help On top of that if you like one can now generate the type definitions from ones JSDoc comments That way one can keep it more DRY at the disadvantage of some more complex type expressions not being possible to define in JSDoc alone Then one can combine the two though I believe Hi Im having a hard time getting around this Im using Moch Chai ChaiHttp and Axios One idea I had was to try to strip out the offending headers In my unit test I think the Contentlength header is getting set somewhere and Im not sure how to strip it out or get around this issue Any ideas Thanks Context Im trying to mock requests of a scraper I built that uses Puppeteer Id like to be able to mock the requests the Puppeteer browser makes to test the scraper properly Just to clarify I dont mean mocking requests inside the Puppeteer browser environment Im hoping to mock requests in the tests that launch the browser The Puppeteer API has a nice setRequestInterceptor hook that nock could take advantage of It seems to have most of the features required for a full nockcompatible API but Id appreciate if someone familiar with the nock codebase could chime in Alternatives I havent found any decent nockcompatible library out there that could help with Puppeteer Has the feature been requested before After searching the issues I dont believe so If the feature request is accepted would you be willing to submit a PR Maybe I can try but I cant commit to anything Im afraid I dont have the time Related to Previous issue I am facing same thing I am not able to get headers inside nockreplyfunctionuri requestBody consolelogthisreqheaders I tried using matchHeader but inside this too no headers are coming but during recorder nock is able to capture reqheaders I am really stuck and dont know what to do Software Versions Nock Node TypeScript Related and New Relic is overwriting httpget and httprequest like you do in But when httpget is calling httprequest like here a call to httpget will call httprequest twice when using nock in a New Relic test To prove that this is not native Node behaviour at least on Node js const http requirehttp function request consoleloghttprequest arguments httprequest request our request function is not called httpget Looks like this change in works js const req newRequestproto overriddenGetbindmodule input options callback reqend return req The devDependency tap was updated from to View failing branch This version is covered by your current version range and after updating it in your project the build failed tap is a devDependency of this project It might not break your production code or affect downstream projects but probably breaks your build or test tools which may prevent deploying or publishing details summaryStatus Detailssummary continuousintegrationtraviscipush The Travis CI build failed Details details details summaryCommitssummary pThe new version differs by commitsp ul lia href code codeli lia href codeRegenerate packagelockjson to remove duplicate bundled babel modulescodeli lia href codeRemove stdiopolyfilljscodeli lia href codeAdd nodejs to testing codeli lia href codeupdate cli doccodeli ul pSee the a href diffap details details summaryFAQ and helpsummary There is a collection of frequently asked questions If those don t help you can always ask the humans behind Greenkeeper details Your Greenkeeper Bot palmtree 