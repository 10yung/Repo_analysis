I now also have a branch with an initial proposal for decorators where these are just AST transformers Example ts metadata extern main string return file The decorator then transforms the source to the following in JavaScript js functionimports exports function main var name main file sandboxdecoratorsthin line column return file typeof global undefined global this typeof exports undefined exports this Or in C c static const uint t string main Sm a Si n static const uint t string sandboxdecoratorsthin Ss a Sn d Sb o Sx Sd e Sc o Sr a St o Sr s S t Sh i Sn static uint t main const uint t name const uint t string main const uint t file const uint t string sandboxdecoratorsthin int t line int t column return file The feature as proposed is compatible with all possible backends because it operates on the AST directly However to become actually useful ways to extend the compiler ie through imports of custom modules must be implemented first The reason why I added this so early already is that I was trying to improve the output of assert calls for debugging purposes but I ultimately realized that some sort of an actually usable stack trace ideally with source maps would be a lot better suited for this task Unfortunately browsers I have tested do not yet pull useful information from name sections I have a commit here that implements the x format but as theres no license yet I am holding back the PR for now to not complicate things even further Aside from that thinscript is the most refreshing piece of code Ive seen in a while and Id love to continue working on it Updated output files to use the WebAssembly API Added optional tracing to wasm target for debugging purposes Fixed a couple of wasm target issues and probably introduced new ones Extended wasm custom name section support Implemented additional convenience utility Implemented a few simple wasm specific compiler optimizations Tweaked source files for TypeScript syntax compatibility where applicable Changed the js targets generated iife signature from declare extern to imports exports PS Did I mention how awesome this project is What Add new native types WASM int float and float Why Currently only int and below are supported I tried to add missing native types but not able to compile Please add these type or write a how to note Hi I started to wear thin compiler in Java in order to use in a production line Maven I added the target java and javathin file this produces a file orgwasmthinThinjava I currently generates classes enums functions methods The generated code is not yet operational missing translation of thin type to java type It also lacks the managements of the externs How can I send you my changes Im not familiar with GitHub AJYT First of all thanks for a great software Could you add the license field to packagejson license field in packagejson npm Documentation The following page may help for choosing a license Choose an open source license Choose a License I hope you choose a permissive license like BSD MIT or Apache Thanks I think that and should be included in ThinScript Are there any plans to support interaction with JavaScript DOM and Web APIs with ThinScript Id be really interested in seeing the performance benefit that lowlevel WebAssembly can bring when creating large web apps Id also be interested in exposing API endpoints for other JavaScript libraries to consumeinteract with the compiled application I havent got a huge experience in this field and Im not even sure it might all be possiblefeasible but I thought it might be a good discussion point I know that the readme says youll write it at some point but the sooner the better smile Im just asking if you planned on it anytime soon looks like a really cool project plus docs are needed for creating a syntax package I need one for Atom 