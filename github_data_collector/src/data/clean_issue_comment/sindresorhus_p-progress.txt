Current implementation of forcing us to report the progress fraction has a lot of limitations Hides the done and total values data from callbacks This data might be useful in various implementations Takes away the ability to handle progress of jobs that dont know about the total value Some operations just dont know the totalSize but could still report the progress of how much data has been processed thus far Inaccurate progress reporting in PProgressall Without pprogress or callback consumers knowing the totals each job is equal no matter how much data it is processing I propose not enforcing the passing of fraction but instead keeping track of both done and total values reporting them and letting the user decide how to handle it This will give us more options and data in our progress implementations API js current progressdone total proposal progressdone total The onProgress callback would than report these values in st and nd argument If total is undefined the end is unknown and user can switch handling js progressPromiseonProgressdone total if total undefined consolelogdone bytes processed thus far else consolelogdone total done In PProgressallonProgress callback the done and total values in onProgress callback will be the total additions of both of the values of all passes progress promisses And if any of the promisses is missing the total value the resulting onProgress callback will also receive undefined as total since we can no longer tell what the total of all promisses is now Huge benefit of knowing about the total total in PProgressall callback is a more accurate calculation of the whole progress For example if you have jobs one is processing KB another is processing KB and the st ends while the nd hasnt even started you now have an accurate progress of instead of And if you do want it to report that well you just do this in each job progress report js progressdone total And now each job is equal no matter of the amount of data its processing As you see this kind of API would give us a lot more power options data and ability to handle jobs with unknown totals in our implementations while still remaining very simple