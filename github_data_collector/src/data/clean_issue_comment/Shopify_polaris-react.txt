 Feature request summary In my view the embedded Resource Picker is the most valuable component from the perspective of an embedded app developer It provides a native feeling experience and saves us rebuilding a core piece of functionality that would be otherwise tedious to rebuild if you consider how much goes into it pagination API calls variants multiple types of resources etc In addition there are other scenarios nonmodal experiences where a resource picker would be useful Such as a popover or on a page Rationale The ResourcePicker exists in the AppBridge but if I am honest of my own bugs have something to do with this weird iframe experience the latest cookie params complications have probably pushed me over the edge and into the not worth it basket The amount of issues here stemming from embedded experiences is an indicator of that Sidebar If this idea is a nonstarter Id love to hear how I might tackle jerryrigging the existing ResourcePicker to work outside of the AppBridge WHY are these changes introduced While rumbling through I found a bunch of cases where our components exported types that either werent needed outside of that component or could be made so with a bit of refactoring and pushing usage towards referencing something living on a Props interface This shrinks the amount of exports in a few components Note that this has no effect on the types we export publicly they all remain the same WHAT is this pull request doing Stop exporting a handful of types that werent used outside that the file they are defined in Perform some refactoring so that some types are no longer used outside of the file they are defined in A common example is that instead of importing and using PreferredPosition from srccomponentsPositionedOverlay instead import PositionedOverlayProps and reference PositionedOverlay preferredPosition at which point PreferredPosition no longer needs to be exported How to Tests and typechecking pass Note that srccomponentsindexts is unmodified so our public APIs are unaffected Issue summary When using a standard createreactapp template and attempting to create a production build you get a compile error with the stylescss file Expected behavior No errors when running a production build Actual behavior Running a yarn build or the npm equivalent on a standard createreactapp using the latest Polaris you get the following error console Creating an optimized production build Failed to compile nodemodulesshopifypolarisstylescss ParserError Syntax Error at line column error Command failed with exit code This appears to be due to the browserslist definition for the production build though this worked in previous versions of Polaris and under This doesnt happen in more recent createreactapp development builds because theres now a difference between the product and development build in the packagejson packagejson browserslist production not dead not opmini all development last chrome version last firefox version last safari version If you copy the array of values from production into the development key youll be able to reproduce it when simply running yarn start Steps to reproduce the problem Create a standard createreactapp yarn create reactapp testing Add the latest version of Polaris yarn add shopifypolaris Install the style script at the top of the indexjs file as specified by the Polaris install docs Run a production build yarn build Reduced test case I cant seem to create a codesandbox that reproduces it but the Appjs can be any standard Polaris app jsx import React from react import enTranslations from shopifypolarislocalesenjson import AppProvider Page Card Button from shopifypolaris function App return AppProvider i nenTranslations Page titleExample app Card sectioned Button onClick alertButton clickedExample buttonButton Card Page AppProvider export default App Specifications Are you using the React components YN Y Polaris version number Browser None needed Device MacBook Pro Operating System macOS Catalina WHY are these changes introduced Fixes You can find all context in the issue PopoverOverlay changing the containers display from block to flex when its measuring on subtree change those changes happen to take place on scroll when a library like reactvirtualized is used This then seems to cause some browsers to stop the scrolling The Popover switches its container display from block to flex and vice versa when measuring WHAT is this pull request doing We wondered why we are switching display from flex to block when measuring and couldnt come up with a good explanation So in this PR we are attempting to remove it We did a pairing session with chloerice where we also tried the custom build in web looked at user menu and some autocomplete lists and everything seemed fine However we are aware that we might be missing something crucial and were hoping that someone could chime in if they have any ideas details summarySummary of your gifssummary img src altscrolling behavior before change Does not work when scrollbar is used img src altscrolling behavior after change works when scrollbar is used details Delete the following for small trivial changes How to Local development instructions General tophatting guidelines Changelog guidelines Give as much information as needed to experiment with the component in the playground details summaryCopypaste this code in codeplaygroundPlaygroundtsxcodesummary jsx import React from react import Button Page Popover Banner from src export function Playground const counter setCounter ReactuseState return Page titlePlayground BannerScroll using the scrollbarBanner br Popover active activator Button I am sgroots button Button onClose div styleheight px width px overflow auto onScroll setCountercounter counter div styleheight px Arrayfromlength countermap i div styleheight px keyi item i div div div Popover Page details checklist Tested on mobile Tested on multiple browsers Tested for accessibility Updated the components READMEmd with documentation changes Tophatted documentation changes in the style guide For visual design changes pinged one of HYPD mirualves sarahill or ry n to update the Polaris UI kit When tophatting please check the UNRELEASED entry for consistency as per the guidelines If you dont have access to Percy please request access in the polaris Slack channel Feature request summary It would be lovely for the Filters component to be able take a prop for autoComplete and simply pass this boolean on to the TextField it renders Rationale As part of the Reactification of our admin ProductIndex we need a way to enable autoComplete within the Filters component in order to mirror Rails behaviour AutoComplete suggestions under a Filter TextField can facilitate convenience for merchants as they are likely to type the same few filters often Being able to mirror the Rails behaviour would make the Reactification of the admin interface seamless for merchants Feature requests that are not yet planned will be closed We then use the issue s upvotes to track and set priorities See the contribution guidelines for more information WHY are these changes introduced This adds a context control to our details page Allowing quick comparison from the theme provider logo present on the frame story page and context control Delete the following for small trivial changes How to You just need to checkout the details page and make sure the context control looks good from within the nav on small screens and in the top bar on larger screens checklist x Tested on mobile x Tested on multiple browsers Tested for accessibility Updated the components READMEmd with documentation changes Tophatted documentation changes in the style guide For visual design changes pinged one of HYPD mirualves sarahill or ry n to update the Polaris UI kit When tophatting please check the UNRELEASED entry for consistency as per the guidelines If you dont have access to Percy please request access in the polaris Slack channel Feature request summary When we use the DropZone component into the React and set the allowMultiplefalse so that the user can upload only image Now if the user by mistake selected the wrong image from the file upload window and wants to change the uploaded images then they are not able to open the file upload window to update or change the previously uploaded image Rationale In allowMultipletrue mode we can be able to select the image even after selecting the images previously and still able to click on drop zone div Feature request summary Write a short description of the feature here Modal supports a larger prop to stretch the modal dialog wider but offers no similar smaller prop to squish the dialog slimmer Rationale Explain the benefit of this feature This can be particularly desirable when a modal is used for form entry and the expected field inputs are relatively small this allows us to avoid a lot of wasted horizontal space Feature requests that are not yet planned will be closed We then use the issue s upvotes to track and set priorities See the contribution guidelines for more information WHY are these changes introduced We have incorrect custom properties WHAT is this pull request doing Adding utilities and tests for custom properties Delete the following for small trivial changes How to Local development instructions General tophatting guidelines Changelog guidelines Give as much information as needed to experiment with the component in the playground details summaryCopypaste this code in codeplaygroundPlaygroundtsxcodesummary jsx import React from react import Page from src export function Playground return Page titlePlayground Add the code you want to test in here Page details checklist Tested on mobile Tested on multiple browsers Tested for accessibility Updated the components READMEmd with documentation changes Tophatted documentation changes in the style guide For visual design changes pinged one of HYPD mirualves sarahill or ry n to update the Polaris UI kit When tophatting please check the UNRELEASED entry for consistency as per the guidelines If you dont have access to Percy please request access in the polaris Slack channel Feature request summary It would be really nice to have the autoFocus option on the Select component as well The same way as its working on the TextField component Rationale Increases User Experience gives users the ability to tab through forms Feature requests that are not yet planned will be closed We then use the issue s upvotes to track and set priorities See the contribution guidelines for more information 