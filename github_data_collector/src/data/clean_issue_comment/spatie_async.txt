Child process is not stop when we call method markAsTimedOut it continue work on background Added call stop method in markAsTimedOut Added possibility modify timeout I detect some problem when call command in linux terminal ps aux grep ChildRuntimephp wc l result it is number of running processes in system My setting for Pool object concurrency and timeout When we check expression we call markAsTimedOut but the child process is not stoped it continue work on background I have a project where I need to call cURL calls and I am using this library first I create an example Routepostdatatestx function Illuminate Http Request request x start microtimetrue pool Poolcreate foreach x as y pool asyncfunction use y sleepy return y thenfunction output print output catchfunction exception awaitpool timeelapsedsecs microtimetrue start print n print timeelapsedsecs And this work correctly but when I use cURL times double in datazip you can find measurements of time how long cURL need to execute but full time is much more I am expecting the longest response with maybe seconds more but whole execution it goes up to sec you can see in JSON example datazip pool Poolcreateconcurrency sleepTime foreach urls as url pool asyncfunction use url start microtimetrue curl curlinit curlsetoptarraycurl array CURLOPTURL url url CURLOPTRETURNTRANSFER true CURLOPTENCODING CURLOPTMAXREDIRS CURLOPTTIMEOUT CURLOPTHTTPVERSION CURLHTTPVERSION CURLOPTCUSTOMREQUEST POST CURLOPTPOSTFIELDS url postdata CURLOPTHTTPHEADER array CURLOPTCONNECTTIMEOUT response curlexeccurl curlclosecurl timeelapsedsecs microtimetrue start return url url url time timeelapsedsecs thenfunction output use data data key rand output In datazip you can find results Can you check and guide me on what I am doing wrong here Ive decided it would be good to make a dedicated issue explaining about what this package does and doesnt do Lots of people open keep opening the same kind of issue so I hope to explain it once and for all in this one Sometimes your async tasks dont work they throw strange errors and what not Its important to realise how tasks are run asynchronously Each task is a new PHP process created on the fly which can execute timeconsuming code This package aims to run these kinds of time consuming tasks in parallel so that instead of waiting seconds for seconds tasks to finish you could run processes at the same time finishing the task in seconds actually its a little more because process management also adds some overhead Thats rule number one this package is only useful if youre dealing with several tasks which take at least a few seconds each to process So what about strange errors you dont understand Since parallel tasks are executed in their own process theres no concept of a booted framework I often see people trying to use Laravel models in tasks while they dont realise Laravel doesnt exist in these child processes You can of course boot Laravel or whatever framework you want manually in child processes though chances are your use case isnt what this package is meant for Thats rule number two parallel tasks are run in clean PHP processes theres no concept of a framework unless you boot it manually within that task In case you need lots of frameworkspecific functionality Id suggest to first look at the existing queueing systems of your framework instead of using this package Im not sure what the exact cutoff is though at least on outputs of several megabytes now possible thanks to the changes in on RHEL the Pool seems to enter a hang state I dont understand the exact mechanism but Im guessing the output pipe is filling its buffer and then blocking for the parent process to read it which isnt happening Subsequently the child process never exits never fires SIGCHILD and thus the Pool never completes entering an infinite wait One simple solution which may not be the best is here Im happy to open a pull request if this seems like a satisfactory solution Regards JTP My hoster has multiple php executables installed The php command defaults to php which wont work as the parent app runs php because this lib spawns childs at php I think its this line of code How can I get it to work so the child progess also uses PHP 