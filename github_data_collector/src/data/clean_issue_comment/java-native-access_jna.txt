JNA comes as a dependency in a project of ours which is bundled and packaged with a JVM using jlink and jpackage so the code is enclosed as a module We are running into the following problem now The code needs to load the native dispatch library from the classpath using ithe method loadNativeDispatchLibraryFromClasspath of Nativejavao Inside this method the library is loaded using a URLClassLoader To make the this work in packaged code iE on OSX our module needs to make this code avaliable from outside the module via this line in the moduleinfojava opens comsunjnadarwin This works fine for OSX but fails for other plattforms if they contain a dash in the package name of the native dispatch library A line like this results in an compile error cause the dash is not allowed in package names opens comsunjnawin x Question now is Are there plans to move the code of JNA towards modularization Then maybe this issue could be solved using the getResourceAsStream method of the Module class Or another more hacky way would be to rename the packages so they do not contain any more dashes Any feedback regarding this issue yould be great TIA Version of JNA OS MacOS Catalina CPUVM bit Apple decided to increase their requirements for the MacOS AppStore Now their validation process complains if you have bit libs I tried to compile JNA on my MacOS Catalina but failed to compile so far Can you please help me with this I would need a bit only version that i can sign along with the App Dnounpack Djnabootlibrarypath works well enough for this But the currently packed libjnidispatchjnilib is not pure bit it seems This is what Apple says about this packages were not uploaded because they had problems varfoldersxgkf ywq n n tz v r gnT E C C B EE A A D A itmsp Error Messages ERROR ITMS Unsupported Architectures Your executable contained the following disallowed architectures i in complaiiinjenkinsstatuspkgPayloadPlaiiin Jenkins StatusappContentsappnativeslibjnidispatchjnilib New apps submitted to the Mac App Store must support bit starting January and Mac app updates and existing apps must support bit starting June altool Error Errors uploading UsersmartinschwallerCodePlaiiinProductsJenkinsStatusproductbuildPlaiiinJenkinsStatuspkg Error DomainITunesTransporterErrorDomain Code ERROR ITMS Unsupported Architectures Your executable contained the following disallowed architectures i in complaiiinjenkinsstatuspkgPayloadPlaiiin Jenkins StatusappContentsappnativeslibjnidispatchjnilib New apps submitted to the Mac App Store must support bit starting January and Mac app updates and existing apps must support bit starting June UserInfoNSLocalizedRecoverySuggestionERROR ITMS Unsupported Architectures Your executable contained the following disallowed architectures i in complaiiinjenkinsstatuspkgPayloadPlaiiin Jenkins StatusappContentsappnativeslibjnidispatchjnilib New apps submitted to the Mac App Store must support bit starting January and Mac app updates and existing apps must support bit starting June NSLocalizedDescriptionERROR ITMS Unsupported Architectures Your executable contained the following disallowed architectures i in complaiiinjenkinsstatuspkgPayloadPlaiiin Jenkins StatusappContentsappnativeslibjnidispatchjnilib New apps submitted to the Mac App Store must support bit starting January and Mac app updates and existing apps must support bit starting June NSLocalizedFailureReasonERROR ITMS Unsupported Architectures Your executable contained the following disallowed architectures i in complaiiinjenkinsstatuspkgPayloadPlaiiin Jenkins StatusappContentsappnativeslibjnidispatchjnilib New apps submitted to the Mac App Store must support bit starting January and Mac app updates and existing apps must support bit starting June The Java VM crashes on a Touchbar Macbook pro Other platforms and macs without touchbar work great When using a standard AWTSwing build of the same code there is no crash Task runJvmFirstThread FAILED XstartOnFirstThread not supported via Jogl switching to an experimental native jnabased implementation pixelFormat openGLContext contentView NSDefaultRunLoopMode native x fff d timerWithTimeIntervalinvocationrepeats timerWithFireDatetargetselectoruserInfo scheduledTimerWithTimeIntervalrepeatsblock timerWithTimeIntervalrepeatsblock allocWithZone timerWithTimeIntervaltargetselectoruserInforepeats scheduledTimerWithTimeIntervaltargetselectoruserInforepeats scheduledTimerWithTimeIntervalinvocationrepeats A fatal error has been detected by the Java Runtime Environment SIGSEGV xb at pc x fff e pid tid JRE version OpenJDK Runtime Environment build b Java VM OpenJDK Bit Server VM b mixed mode tiered compressed oops g gc bsdamd Problematic frame C libobjcAdylib xb classconformsToProtocol x No core dump will be written Core dumps have been disabled To enable core dumping try ulimit c unlimited before starting Java again An error report file with more information is saved as UsersnicolaiemigdevengineEmihserrpid log If you would like to submit a bug report please visit The crash happened outside the Java Virtual Machine in native code See problematic frame for where to report the bug JVM crashlog is on pastebin because its huge Version of JNA and related jars gluegen jna joal jog Version and vendor of the java virtual machine Oracle Corporation other VMs give this error woo Operating system System architecture Mac OS X x Steps to reproduce A Download Sample project here Its a gradle project B Import buildgradle file C Run gradle task runJvmFirstThread for JNA implementation crashes or gradle task runJvm for AWTSwing implementation does not crash The tasks are unter gradle korgerun group img width altBildschirmfoto um src X key codes are missing in the current maven release Please include them TY Ive seen and this Google group post and another Google group post sizet and ssizet are very common types especially when making system calls in Linux However I dont see any direct support for those types still in JNA There looks to be a couple of implementations buried as nested classes but they are not accessible since they arent in the public scope Why dont classes exist for these types Hello Im using the X bindings included in JNA and noticed the function XLowerWindow to be missing I checked the sources and its not there I can trivially add it myself but it would be nice if it were present in an official build I think I traced a segfault to this line The return type stored in closure can be NULL on allocation failure ffiprepclosureloc assumes that the value is valid so passing NULL will produce a seg fault This happens on locked down systems with restricted execution and write permissions The libffi closure API requires either trivially executable heap allocations or a location to mmap with both readwrite and exec permissions If it doesnt have this eg selinux with no rw exec mounts it will fail to allocate the closure structure Perhaps this could fail more gracefully Version of JNA and related jars JNA Version and vendor of the java virtual machine Oracle Corporation Java HotSpotTM Bit Server VM Operating system Ubuntu System architecture CPU type bitness of the JVM Intel x x JVM Complete description of the problem I cannot pass String objects to a JNI method for invocation even using JniEnvCURRENT and setting OPTIONALLOWOBJECTS since a String is always converted to NativeString When trying to call JNI methods JNA invokes convertArgument just before C method invocation and String is converted to NativeString before allowObjects is checked This means that it is impossible to pass the Java String jstring object to C which accepts jstring as a parameter type For example JVMFindLoadedClassJNIEnv env jobject loader jstring name Steps to reproduce public interface JVM extends comsunjnaLibrary Class JVMFindLoadedClassJNIEnv env Object classLoader String name Map options new HashMap optionsputLibraryOPTIONALLOWOBJECTS BooleanTRUE JVM libjvm Nativeloadjvm JVMclass options jvmJVMFindLoadedClassJNIEnvCURRENT classLoader className It is entirely likely that I dont know what Im doing after reading through the documentation and studying the source I do not know how to pass a String as a jstring object not a char object to native code Ive tried type converters but those didnt get me anywhere since String is always converted to NativeString as an argument Because the Function constructor is package scope as is invoke I cannot overload invoke to not convert arguments so I am unable to modify the method invocation outside of rewriting the class definition at runtime via javassist or something similar One solution I thought of while trying to figure this out is modify the convertArgument method so that the check for allowObjects occurs sooner allowing all Java objects to passed without conversion so the check for allowObjects is after JNA specific object types struct etc but before the Java object type conversion mostly string instead of where currently is which is last NOTE Loading the JVM library for Windows bit or MACOS is slightly different The above only loads it on Linux specifically Ubuntu x with an Oracle JVM from my testing this is currently true for all released Oracle JVMs on Linux but I havent tested every combination Documentation for shmopen Documentation for shmunlink Documentation for mmap Kernel CreateFileMapping exists but Kernel OpenFileMapping does not This is more confusing because Kernel MapViewOfFile mentions OpenFileMapping in its Javadocs here I believe the signature should be this java HANDLE OpenFileMappingWinBaseSECURITYATTRIBUTES lpAttributes boolean bInheritHandle String lpName derived from the specs here 