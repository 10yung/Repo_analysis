 reproduce bug Disable ContentProvider leakcanaryinternalAppWatcherInstallerMainProcess Use fun manualInstall in AppWatcher Leakcanary will not work by manualInstall in this situation bug reason In AppWactherkt Volatile var config Config if isInstalled Config else Configenabled false setnewConfig SharkLogd AppWatcher setConfig val previousConfig field field newConfig logConfigChangepreviousConfig newConfig Decompiled it to AppWatcherjava static AppWatcher var new AppWatcher INSTANCE var config var isInstalled new AppWatcherConfigfalse false false false L DefaultConstructorMarkernull new AppWatcherConfigfalse false false false L DefaultConstructorMarkernull More source codeisInstalled related source code see manualInstall val isInstalled get InternalAppWatcherisInstalled internal object InternalAppWatcher val isInstalled get applicationisInitialized We can see the fact that config is in the static block code in the class which runs before static method and its related isInstalled need to be correct So the reason is when calling AppWatchermunalInstall the static block code is excuted but application is not set to InternalAppWatcher already so isInstalled is not ready and config is not enabled Solution Add another AppWactherManualInstaller to meet manual install need When need to manual install leakcanary in runtime call manualInstall in this manual installer application is already correctly set to the InternalAppWatcher and then AppWatcher config will work correctly See Description We have an automation tests that run monkey tests on our debuggable app The app crashed with this stack trace Short Msg javalangIllegalStateException Long Msg javalangIllegalStateException Hprof file missing due to Hprof directory cleared our app path filesleakcanary hprof Build Label Androidsdkgooglephonex genericx MASTER userdebugtestkeys Build Changelist Build Time javalangIllegalStateException Hprof file missing due to Hprof directory cleared our app path filesleakcanary hprof at leakcanaryinternalHeapAnalyzerServiceonHandleIntentInForegroundHeapAnalyzerServicekt at leakcanaryinternalForegroundServiceonHandleIntentForegroundServicekt at androidappIntentServiceServiceHandlerhandleMessageIntentServicejava at androidosHandlerdispatchMessageHandlerjava at androidosLooperloopLooperjava at androidosHandlerThreadrunHandlerThreadjava Steps to Reproduce its not reproducible since monkey tests are random Expected behavior app not to crash even if there is a memory leak Version Information LeakCanary version comsquareupleakcanaryleakcanaryandroid Android OS version Android Gradle version Additional Information Any additional information configuration or data that might be necessary to reproduce the issue Description Not working in my project for resource not found in dex Steps to Reproduce open some actitivity dump the heap crash Version Information LeakCanary version Android OS version Android Gradle version gradle android build plugin leakcannery log DLeakCanary Already scheduled retained check ignoring found new object retained DLeakCanary Already scheduled retained check ignoring found new object retained DLeakCanary Checking retained object because app became invisible DLeakCanary Found retained references dumping the heap DLeakCanary Analysis in progress working on PARSINGHEAPDUMP DLeakCanary Analysis in progress working on EXTRACTINGMETADATA DLeakCanary Analysis in progress working on FINDINGRETAINEDOBJECTS DLeakCanary Analysis in progress working on FINDINGPATHSTORETAINEDOBJECTS it seems to be work but do not have R field in dex Description SharkCLI does not work on Windows Steps to Reproduce Download SharkCLI zip file and run sharkclibat Run command sharkclibat analyzeprocess packagename Exception error Exception in thread main javalangIllegalThreadStateException process has not exited at javalangProcessImplexitValueUnknown Source at sharkMainKtrunCommandMainkt at sharkMainKtdumpHeapMainkt at sharkMainKtmainMainkt Expected behavior I would like run sharkcli on Windows systems Version Information LeakCanary version Android OS version Android Gradle version Additional Information NA This is a prototype not meant to be merged as is This prototype uses Calcite and is largely inspired from I couldnt find much documentation on how to build a new custom adapter for Calcite so its a lot of poking at random The result set is rendered with Enter command help sql SELECT this mDestroyed FROM comexampleleakcanaryMainActivity this mDestroyed instance MainActivity true instance MainActivity true instance MainActivity false instance MainActivity true instance MainActivity true See Build something similar to Mat OQL in SharkCLI Calcite was recommended Protype ideas based on Requires downloading the APK and unzipping it to extract mappingtxt Should be an option off by default The command will take an obfuscated heap dump and an obfuscation file as input and output a new heap dump where class names have been deobfuscated Command name should probably be deobfuscatehprof Still need to iterate a bit on this but this idea started from the work required for Android TV where notifications cannot be used and we had to come up with alternate ways to notify the user This brings up the general idea of a new callback API to be notified of various events happening with a default implementation that is the current behavior Events WIP RetainedObjects with count of retained objects DumpingHeap used to display the toast HeapAnalysisProgress should it provide an enum value for each step one subclass per step HeapAnalyzed maybe separate success and failure Needs to provide extra information that is currently used to display notifications count of new vs existing leaks We would also have to deprecate onHeapAnalyzedListener but keep its API and keep it working correctly Well move this field to the end of Config that breaks binary compatibility which is generally not an issue for LeakCanary apps are expected to recompile on update 