TypeMirror returnType executableElementgetReturnType Now I get the returnType its comxxxxResultName so how can I get the rawType Name from this return type Please add a section in the README that briefly covers every formatting placeholder Right now the README only covers L S T and N so Z is missing for example Currently the TypeSpec class doesnt allow building empty enums but empty enums are valid Java I pushed a possible solution here Would it make sense to add an option to allow Javadocs to cause an import to be emitted even if that type isnt referenced anywhere else Id essentially like to be able to override this behavior I feel like this is never what you want and that it should behave like N Or is this too magical and I should just be using N get doesnt accept an Iterable extends TypeName which makes it annoying to build incrementally Alternatively or additionally a builder would be nice addCommentHey nFriends nI nBreak nCode Cant just split on newlines either since that would break formatting I want to generate a lambda inside a statement that itself uses multiple statements but JavaPoet does not allow nesting of statements for reasons that make sense outside of lambdas Do you think that an API for making these sorts of lambdas is worth it or should I just use add when generating this style of code Example java return CodeBlockbuilder addStatementLregisterL manager generateLambda build CodeBlock generateLambda return CodeBlockbuilder addb nindent addStatementbnameS some name unindentadd build Expected output java managerregisterb bnamesome name Current result javalangIllegalStateException statement enter followed by statement enter This is an initial proposal to provide an easier way to deal with character literals The majority of characters can currently be dealt with using L However special characters such as or amongst others would require special handling by the users In essence a user would need to define a method such as comsquareupjavapoetUtilcharacterLiteralWithoutSingleQuotes and pass characters through that method to get it printed as expected Rather than putting the burden on the user bjansen has proposed in issue to add support for singlequoted character literals via C I also think this is a good enhancement As an initial proposal this PR should not be considered as the final product Heres a list of pending tasks Documentation x Further test cases should be added to verify its robustness singleQuoteCharacterInLiteral should probably be removed since its likely covered already by other tests I just added this test to compare existing alternatives for handling special characters Convert AnnotationSpecBuilderaddMemberForValue to use C instead of L Hi I was looking for something similar to S but for character literals and could not find any easy way to do it Basically what Im trying to achive is something like this java Character someChar builderaddStatementmyArray L someChar This doesnt work when someChar needs to be escaped etc because it produces code like myArray It looks like JavaPoet has everything needed to implement that comsquareupjavapoetUtilcharacterLiteralWithoutSingleQuotes it just needs to handle C and wrap the value with single quotes If you are interested in this feature I can implement it and submit a PR Thanks for this nice library btw 