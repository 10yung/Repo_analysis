Using compiler args users can configure a placeholder element for paths like placeholder deepLinkuriPathPlaceholder placeholder with paths and then an element to substitute for the placeholder deepLinkuriPathPlaceholderValue beep Resulting in DeepLinkEntry DeepLinkEntry Fairly small change but potentially even more digestible starting at this JavaDoc rossbacher BenSchwab Hi I have been facing this issue with the following log Fatal Exception javalangRuntimeException Unable to stop activity appappIdpackagenameDeepLinkDispatchActivity javalangIllegalStateException You need to use a ThemeAppCompat theme or descendant with this activity at androidappActivityThreadcallActivityOnStopActivityThreadjava at androidappActivityThreadperformStopActivityInnerActivityThreadjava at androidappActivityThreadhandleStopActivityActivityThreadjava at androidappservertransactionTransactionExecutorperformLifecycleSequenceTransactionExecutorjava at androidappservertransactionTransactionExecutorcycleToPathTransactionExecutorjava at androidappservertransactionTransactionExecutorexecuteLifecycleStateTransactionExecutorjava at androidappservertransactionTransactionExecutorexecuteTransactionExecutorjava at androidappActivityThreadHhandleMessageActivityThreadjava at androidosHandlerdispatchMessageHandlerjava at androidosLooperloopLooperjava at androidappActivityThreadmainActivityThreadjava at javalangreflectMethodinvokeMethodjava at comandroidinternalosRuntimeInitMethodAndArgsCallerrunRuntimeInitjava at comandroidinternalosZygoteInitmainZygoteInitjava Can someone help me with this Please see the code in my manifest activity androidnamedeeplinkDeepLinkDispatchActivity androidlaunchModesingleTask androidthemeandroidstyleThemeNoDisplay intentfilter androidautoVerifytrue action androidnameandroidintentactionVIEW category androidnameandroidintentcategoryDEFAULT category androidnameandroidintentcategoryBROWSABLE data androidhoststringWEBDOMAIN androidschemehttps intentfilter intentfilter androidautoVerifytrue action androidnameandroidintentactionVIEW category androidnameandroidintentcategoryDEFAULT category androidnameandroidintentcategoryBROWSABLE data androidhoststringWWWWEBDOMAIN androidschemehttps intentfilter intentfilter androidautoVerifytrue action androidnameandroidintentactionVIEW category androidnameandroidintentcategoryDEFAULT category androidnameandroidintentcategoryBROWSABLE data androidhoststringHOUSIEHOST androidschemehttps intentfilter intentfilter androidautoVerifytrue action androidnameandroidintentactionVIEW category androidnameandroidintentcategoryDEFAULT category androidnameandroidintentcategoryBROWSABLE data androidhoststringHOUSIEHOST androidschemestringSCHEMA intentfilter intentfilter androidautoVerifytrue action androidnameandroidintentactionVIEW category androidnameandroidintentcategoryDEFAULT category androidnameandroidintentcategoryBROWSABLE data androidhoststringWEBDOMAIN androidschemestringSCHEMA intentfilter intentfilter androidautoVerifytrue action androidnameandroidintentactionVIEW category androidnameandroidintentcategoryDEFAULT category androidnameandroidintentcategoryBROWSABLE data androidhoststringWWWWEBDOMAIN androidschemestringSCHEMA intentfilter activity Is there anything special about doing startActivityForResult in DeepLinkActivity For some reason onActivityResult is never being called To provide some context the usecase Im trying to solve is Catch the deeplink Uri Start authentication flow with startActivityForResult Come back to onActivityResult and dispatch the original Uri Let say there are multiple external links that resolve to the same app link Ex wwwfoocomhome apphome wwwfoocomdashboard apphome Yes we can list them all in DeepLink annotation but in case we have some Uri pattern matching logic in the activity wed need to parse all of them It would be much easier to just rethrow the app link so it becomes a single source of truth without wwwfoocomhome even hitting the activity Is there elegant way to declare such mapping So far I can only think of custom handling in DeepLinkActivity Does DLD have guarantees to prevent registering duplicate DeepLinkResults in its appwide registry of deep links For context see rossbacher and my discussion in this comment Hi I have an issue with an url starting with param For example I cant catch it with DeepLink If I change the URL to I can catch it with DeepLink Why is that Theo If I dont check intent key DeepLinkISDEEPLINK how can I safe start a deep link url come from an external app public class TodoDetailActivity extend Activity private static final String KEYID id Override protected void onCreateBundle savedInstanceState I Cant get from url todoapptodos because the value is a String long id getIntentgetLongKEYID public static Intent actionSeeDetailContext context long id Intent intent new Intentcontext TodoDetailActivityclass intentputExtraKEYID id value type long return intent AppLinktodosid public static Intent intentForLinkContext context Bundle extras return actionSeeDetailcontext safeParseLongextrasgetStringid How can I prevent DeepLinkDelegate override the key id to a String value I have a use case in which I have a url with a special character in its path something like Now if I declare a url with something like this with DeepLink annotation the everything after is regexed into hence i am not able to separate out the pathid from it Therefore it is defeating the entire purpose of using this library as then i have to manually split the url and find out the path id I suggest that there should be a support to URL encode such urls as well so that these special charachters like in my case gets removed Im not sure if this is valid UseCase But I essentially want to be able to specify which classes a deeplink module included based on certain runtime configurationsRemoteConfigsSince the DeeplinkHandlers are picked up per module and the DeeplinkModuleLoader is generated is there a way I can have swap out DeeplinkModuleLoadersIf I can specify which classes to use to be used