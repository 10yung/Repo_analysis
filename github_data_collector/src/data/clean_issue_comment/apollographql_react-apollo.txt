Intended outcome When a subscriptions initial data is returned by the GraphQL server the useSubscription hook should Set loading to false Provide the data in data Do this of the time Actual outcome Approximately of the time in my case the initial data is returned by the GraphQL server but loading remains true and data remains undefined How to reproduce the issue Based on my investigate I believe this issue will occur in any application which uses useSubscription However due to its intermittent race condition nature it will be highly dependent on the complexity of the React application and network conditions I have posted a screen cast here demonstrating the issue here Root cause As identified in the video I believe the root cause is a race condition in packageshookssrcdataSubscriptionDatats which implicitly requires that isMounted will be set to true before updateResult is called and this is not always the case I havent investigated further but its possible this is also the root cause for Version System OS macOS Mojave Binaries Node nvmversionsnodev binnode npm nvmversionsnodev binnpm Browsers Chrome Firefox Safari npmPackages apolloreactcommon apolloreacthoc apolloreacthooks apolloboost apollocacheinmemory apolloclient apollolink apollolinkcontext apollolinkhttp apollolinkws reactapollo Thanks for filing an issue on React Apollo Please make sure that you include the following information to ensure that your issue is actionable If you dont follow the template your issue may end up being closed without anyone looking at it carefully because it is not actionable for us without the information in this template PLEASE NOTE Feature requests and nonbug related discussions are no longer managed in this repo Feature requests should be opened in Intended outcome After an error has occurred once in a query any subsequent errors triggered by refetch or by changing the variables passed into a query should be returned by useQuery and the correct networkStatus should be set Actual outcome After an error has occurred once in a query any subsequent errors triggered by refetch or by changing the variables passed into a query are not returned by useQuery and the networkStatus is either if the error was triggered by refetch if the error was triggered by changing variables A description of what actually happened including a screenshot or copypaste of any related error messages logs or other output that might be related Places to look for information include your browser console server console and network logs Please avoid nonspecific phrases like didn t work or broke How to reproduce the issue I will try and build a reproduction case soon I believe this may be part of the same issue but this isnt solely about refetch I wrote a workaround hook for the above issue but am unable to work around the set variables issue without bypassing useQuery entirely If possible please create a reproduction using and link to it here If you prefer an inbrowser way to create reproduction try Instructions for how the issue can be reproduced by a maintainer or contributor Be as specific as possible and only mention what is necessary to reproduce the bug If possible try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be Version System OS macOS Mojave Binaries Node nvmversionsnodev binnode Yarn usrlocalbinyarn npm nvmversionsnodev binnpm Browsers Chrome Thanks for filing an issue on React Apollo Please make sure that you include the following information to ensure that your issue is actionable If you dont follow the template your issue may end up being closed without anyone looking at it carefully because it is not actionable for us without the information in this template PLEASE NOTE Feature requests and nonbug related discussions are no longer managed in this repo Feature requests should be opened in Intended outcome I expect the value of loading returned from useMutation to stay true while my refetch queries are executing when passing along awaitRefetchQueries true Also I expect onCompleted to be delayed until my refetch queries are done executing My code looks as follows const createComment loading useMutation MutateCreateShopifyOrderComment MutateCreateShopifyOrderCommentVariables MUTATIONCREATESHOPIFYORDERCOMMENT variables orderId comment refetchQueries QuerySelectedCampaignInformation awaitRefetchQueries true onCompleted resetState Actual outcome A description of what actually happened including a screenshot or copypaste of any related error messages logs or other output that might be related Places to look for information include your browser console server console and network logs Please avoid nonspecific phrases like didn t work or broke When I call the mutation loading becomes false and onCompleted is called before the refetchQueries have finished executing Heres a video demonstrating the issue The issue When the circular loading indicator disappears loading returned from useMutation becomes false When On complete called is printed in the console onCompleted is called Finally when the comment appears in the UI the refetchQueries are done Here is a video showing the network tab during the issue The issue with the network tab visible The first two requests are the OPTION and POST requests for the mutation while the last two are the OPTION and POST requests for the refetch query As you can see the circular loading indicator which means loading has become false disappears from the UI long before the refetch query is finished executing How to reproduce the issue If possible please create a reproduction using and link to it here If you prefer an inbrowser way to create reproduction try Instructions for how the issue can be reproduced by a maintainer or contributor Be as specific as possible and only mention what is necessary to reproduce the bug If possible try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be Call a mutation with lengthy refetch queries and awaitRefetchQueries true Add a consolelog to onCompleted and a consolelog printing out the value of loading and notice how these are printed before the refetch queries have finished executing Version Run the following command in your project directory and paste its automatically copied to clipboard results here npx envinfolatest preset apollo clipboard System OS macOS Mojave Binaries Node usrlocalbinnode Yarn Documentsworkwebappv nodemodulesbinyarn npm usrlocalbinnpm Browsers Chrome Firefox Safari npmPackages apolloreacthooks apollo apollocacheinmemory apolloclient apollolink apollolinkbatchhttp apollolinkcontext apollolinkerror apollolinkhttp apollolinkstate apollouploadclient reactapollo Intended outcome Setting up a pollInterval on a component in one page should stop that interval when going to another page or unmounting that component and start a pollInterval on that new page mounted component for the same query Actual outcome I have a page a with ComponentA with a useQuery for QUERY It has a pollInterval I go to page b with ComponentB which also has a useQuery for the same QUERY It has also a pollInterval I then see in Network Tab that the polling frequency increases When I navigate even further between the pages the polling frequency can increase even more firing every second or faster How to reproduce the issue Version Im using reactapollo so should work System OS Linux Ubuntu LTS Bionic Beaver Binaries Node nvmversionsnodev binnode npm nvmversionsnodev binnpm Browsers Chrome Firefox npmPackages apolloboost apollocacheinmemory apolloclient apollolink apollolinkerror apollolinkhttp nextwithapollo reactapollo Intended outcome When a Query with the same variables is executed a second time against a MockedProvider NewData will return new data results This was the outcome that was happening before doing the apollo hook migration Actual outcome After the Apollo hook migration When the first time Query is executed against MockedProvider it returns the results of newData instead of the results data first defined in the mocked provider How to reproduce the issue Invitetsx import React Component from react import gql from graphqltag import Query from reactapollo export const GETINVITE gql query InviteinviteToken String inviteContext InviteContext inviteinviteToken inviteToken inviteContext inviteContext email isExpired firstName lastName uuid inviteToken interface Variables inviteToken string inviteContext string interface matchParams token string interface inviteProps context InviteContext class Invite extends ComponentRouteComponentPropsmatchParams inviteProps render JSXElement return div classNameinviteContainer QueryData Variables queryGETINVITE variables inviteToken token inviteContext context loading error data refetch networkStatus if datainviteisExpired return div datatestidexpiredInvite classNameinviteFormAnimation Lottie optionsinvalidInviteOptions TypographyTitle classNameanimationMessage level OopsLooks like this Invite expired or was already used TypographyTitle TypographyTitle classNameanimationMessage level If you think you recieved this in error Send us an email to request a new one TypographyTitle div return div UserSignUpForm firstNamedata datainvitefirstName lastNamedata datainvitelastName emaildata datainviteemail refetchrefetch submitFormthishandleSubmit subTitlethishandleFormSubtitlethispropscontext countryCodethishandleCountryCodethispropscontext datatestidsignupform Button onClick refetchCreate my accountButton div Query div export default Invite Invitetesttsx testshould display expired invite animation when user tries creates account when invite is expired async const validThenExpiredInviteMocks request query GETINVITE variables inviteToken inviteContext DESIGNERBUSINESS result data invite email jakejakecom firstName Jake isExpired false lastName null uuid ff inviteToken newData data invite email jakejakecom firstName Jake isExpired true lastName null uuid ff inviteToken const getByTestId getByText getByLabelText debug render MockedProvider mocksvalidThenExpiredInviteMocks addTypenamefalse Invite contextInviteContextDESIGNERBUSINESS matchmatchMock locationmock historymock MockedProvider await actasync await wait fireEventchangegetByLabelTextlastnameinput target value mylastname fireEventchangegetByLabelTextpasswordinput target value Som randompassword fireEventchangegetByLabelTextpasswordconfirminput target value Som randompassword fireEventchangegetByLabelTextphoneinput target value fireEventsubmitgetByTextCreate my account await actasync await wait expectgetByTestIdexpiredInvitetoHaveTextContent OopsLooks like this Invite expired or was already used The test fails because when it is trying to change the lastname input it cant find it because the expired Invite animation is displayed This tells me that newData is getting returned in the mockedProvider on the initial first Query instead of the second time the Query is executed when the create my account button is clicked I also checked to see if the component was getting rendered twice for some reason but via print statements I could see it only being rendered once on the initial render If possible please create a reproduction using and link to it here If you prefer an inbrowser way to create reproduction try Instructions for how the issue can be reproduced by a maintainer or contributor Be as specific as possible and only mention what is necessary to reproduce the bug If possible try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be Version dependencies react reactapollo reactdom reactscripts devDependencies apolloreacttesting testinglibraryjestdom testinglibraryreact Intended outcome We want to display the Loading indicator only when we dont actually have data that is on first fetch When we have cached values Loading should not display even if data is being refreshed from the network This seems like logical default behavior since most people will check loading and if its true will not display any data NOT displaying data when its already cached seems to be a corner case and NetworkStatus can be used to check if were refetching Maybe the intent is to always check if there is data which we can do but it seems less obvious than just checking loading to see whether were in a predata state Ive read the docs but they dont seem clear on the issue Actual outcome When refetching from the network to see if cache should be updated loading is true which seems to indicate we dont have access to data when we actually do How to reproduce the issue Set network policy to cacheandnetwork for a query Check loading on initial load true Fire the query again eg visit the page and check loading it will be true even though we already have cached data Version System OS macOS Mojave Binaries Node usrlocalbinnode Yarn Projectsmobile mrnodemodulesbinyarn npm usrlocalbinnpm Browsers Chrome Firefox Safari npmPackages apolloreacthooks apollo apollocacheinmemory apolloclient apollolink apollolinkcontext apollolinkerror apollolinkhttp apollolinklogger reactapollo Fixes Looked through all the files for this package and I didnt see any usage of reactdom or usage of dom elements so its unnecessary as a peer dep and could cause confusion for folks using react without reactdom I didnt check other packages so its possible the peer dep is extraneous elsewhere as well Thanks for filing a pull request on React Apollo A few automated bots may chime in on your PR They are here to help with reviewing and ensuring React Apollo is production ready after each pull request merge meteorbot will respond asking you to sign the CLA if this is your first PR It may also respond with warnings messages or fail the build if something is off Dont worry itll help you to fix what is broken bundlesize is a status check to keep the footprint of React Apollo as small as possible travisci will run tests checking style of code and generally make sure everything is working as expected Please look at the following checklist to ensure that your PR can be accepted quickly Checklist If this PR is a new feature please reference an issue where a consensus about the design was reached not necessary for small changes Make sure all of the significant new logic is covered by tests If this was a change that affects the external API used in GitHuntReact update GitHuntReact and post a link to the PR in the discussion Good morning When I define local fields for a given type and I have multiple queries that return the same entry but with different fields for different components the Apollo cache complains if the client fields aren t present on all queries for a given type Specifically the error I get says Unhandled Promise Rejection Error Network error Cant find field exampleLocalField on object the object entry as returned by a query without the local client fields etc I would expect that one could have multiple queries for the same entries same typename and id and decide which local fields to include at will Further I have set defaultOptions query errorPolicy all partialRefetch true on the client instance Happy holidays Thanks for filing an issue on React Apollo Please make sure that you include the following information to ensure that your issue is actionable If you dont follow the template your issue may end up being closed without anyone looking at it carefully because it is not actionable for us without the information in this template PLEASE NOTE Feature requests and nonbug related discussions are no longer managed in this repo Feature requests should be opened in Intended outcome onCompleted passed to mutate function should be called What you were trying to accomplish when the bug occurred and as much code as possible related to the source of the problem Actual outcome onCompleted passed to mutate function is not called onCompleted must be passed directly to useMutation second arg A description of what actually happened including a screenshot or copypaste of any related error messages logs or other output that might be related Places to look for information include your browser console server console and network logs Please avoid nonspecific phrases like didn t work or broke How to reproduce the issue If possible please create a reproduction using and link to it here If you prefer an inbrowser way to create reproduction try Instructions for how the issue can be reproduced by a maintainer or contributor Be as specific as possible and only mention what is necessary to reproduce the bug If possible try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be Version System OS macOS Mojave Binaries Node usrlocalbinnode Yarn usrlocalbinyarn npm usrlocalbinnpm Browsers Chrome Firefox Safari npmPackages apolloreacthooks apolloreactssr apollocacheinmemory apolloclient apollolink apollolinkcontext apollolinkerror apollolinkhttp Run the following command in your project directory and paste its automatically copied to clipboard results here npx envinfolatest preset apollo clipboard This PR contains the following updates Package Type Update Change typesnode devDependencies major typesnode dependencies major Renovate configuration date Schedule every weekend in timezone AmericaLosAngeles verticaltrafficlight Automerge Disabled by config Please merge this manually once you are satisfied recycle Rebasing Whenever PR is stale or if you modify the PR title to begin with rebase nobell Ignore Close this PR and you wont be reminded about these updates again rebasecheck If you want to rebaseretry this PR check this box This PR has been generated by WhiteSource Renovate View repository job log here 