When using acyclic with settings lazy val acyclicSettings Seq libraryDependencies comlihaoyi acyclic acyclicVersionvalue provided autoCompilerPlugins true scalacOptions Pacyclicforce libraryDependencies compilerPlugincomlihaoyi acyclic acyclicVersionvalue Sbt console crashes with IJ sbtproj console info Starting scala interpreter Welcome to Scala OpenJDK Bit Server VM Java Type in expressions for evaluation Or try help scala val a javautilNoSuchElementException key not found console at scalacollectionimmutableMapMap applyMapscala at acyclicpluginPluginPhaseanon anonfunrun PluginPhasescala at scalacollectionIterableOpsgroupByIterablescala at scalacollectionIterableOpsgroupByIterablescala at scalacollectionAbstractIterablegroupByIterablescala at acyclicpluginPluginPhaseanon anonfunrun PluginPhasescala at scalacollectionimmutableListmapListscala at scalacollectionimmutableListmapListscala at acyclicpluginPluginPhaseanon runPluginPhasescala at scalatoolsnscGlobalRuncompileUnitsInternalGlobalscala at scalatoolsnscGlobalRuncompileUnitsGlobalscala at scalatoolsnscinterpreterIMainReadEvalPrintcompileIMainscala at scalatoolsnscinterpreterIMainRequestanonfuncompile IMainscala at scalaruntimejava JFunction mcZspapplyJFunction mcZspscala at scalatoolsnscinterpreterIMainanonfunwithoutWarnings IMainscala at scalatoolsnscinterpretershellReplReporterImplwithoutPrintingResultsReporterscala at scalatoolsnscinterpreterIMainwithoutWarningsIMainscala at scalatoolsnscinterpreterIMainRequestcompileIMainscala at scalatoolsnscinterpreterIMaincompileIMainscala at scalatoolsnscinterpreterIMaininterpretIMainscala at scalatoolsnscinterpreterIMaininterpretIMainscala at scalatoolsnscinterpretershellILoopinterpretStartingWithILoopscala at scalatoolsnscinterpretershellILoopcommandILoopscala at scalatoolsnscinterpretershellILoopprocessLineILoopscala at scalatoolsnscinterpretershellILooploopILoopscala at scalatoolsnscinterpretershellILooprunILoopscala at xsbtConsoleInterfacerunConsoleInterfacescala at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at sbtinternalincAnalyzingCompilercallAnalyzingCompilerscala at sbtinternalincAnalyzingCompilerconsoleAnalyzingCompilerscala at sbtConsoleconsole Consolescala at sbtConsoleanonfunapply Consolescala at scalaruntimejava JFunction mcVspapplyJFunction mcVspjava at sbtutilInterfaceUtilanon getInterfaceUtilscala at sbtTrapExitApprunTrapExitscala at javalangThreadrunThreadjava That entry seems to have slain the compiler Shall I replay your session I can rerun each line except the last one yn sbt version This would help to identify and break the big most impactful cycles first One could also add options to filter the results by a minimum cycle length Hi I noticed that even if the force flag is set cycles between packages are not checked until an explicit package object is provided This is quite cumbersome since it required manually adding such package object whenever a new package is created This PR adds forcePkg flag which fixes that behavior Ascala package skip package a import acyclicskipped trait A val b B Bscala package skip package a import acyclicskipped trait B val a A buildsbt organization in ThisBuild skip version in ThisBuild SNAPSHOT scalaVersion in ThisBuild val acyclicVersion val acyclicDep comlihaoyi acyclic acyclicVersion Provided lazy val acyclicCompilerPlugin addCompilerPlugincomlihaoyi acyclic acyclicVersion autoCompilerPlugins in ThisBuild true lazy val acyclic project in file settingssettings lazy val settings Seq libraryDependencies Seq acyclicDep acyclicCompilerPlugin scalacOptions in ThisBuild Seq Pacyclicforce Run cyclic dependencies check on all files If you change package skip package a to package skipa in both files then it compiles fine I wanted this when retrofitting a project with acyclic after it was written so it can be done a bit more piece by piece WDYT We use Ywarnunusedimport and Xfatalwarnings and get Unused import import acyclicfile on any file I add it to I don t know of any way to silence an unused import warning eg using SuppressWarnings but I d happily do that if possible We re trying to modularize a largish code base and it would be great if acyclic could help us see where there are branches we could move into their own subprojects Periodically after saving a single file and attempting to run tests in IDEA I get the following exception from Acyclic Exception goes away if I do a complete rebuild Exception is not thrown when compiling with SBT Errorscalac Error key not found foobarscala javautilNoSuchElementException key not found foobarscala at scalacollectionMapLikeclassdefaultMapLikescala at scalacollectionAbstractMapdefaultMapscala at scalacollectionMapLikeclassapplyMapLikescala at scalacollectionAbstractMapapplyMapscala at acyclicpluginPluginPhaseanon anonfun anonfunapply applyPluginPhasescala at acyclicpluginPluginPhaseanon anonfun anonfunapply applyPluginPhasescala at scalacollectionTraversableLikeanonfungroupBy applyTraversableLikescala at scalacollectionTraversableLikeanonfungroupBy applyTraversableLikescala at scalacollectionmutableResizableArrayclassforeachResizableArrayscala at scalacollectionmutableArrayBufferforeachArrayBufferscala at scalacollectionTraversableLikeclassgroupByTraversableLikescala at scalacollectionAbstractTraversablegroupByTraversablescala at acyclicpluginPluginPhaseanon anonfun applyPluginPhasescala at acyclicpluginPluginPhaseanon anonfun applyPluginPhasescala at scalacollectionimmutableStreamanonfunmap applyStreamscala at scalacollectionimmutableStreamanonfunmap applyStreamscala at scalacollectionimmutableStreamConstailStreamscala at scalacollectionimmutableStreamConstailStreamscala at scalacollectionimmutableStreamanonfunmap applyStreamscala at scalacollectionimmutableStreamanonfunmap applyStreamscala at scalacollectionimmutableStreamConstailStreamscala at scalacollectionimmutableStreamConstailStreamscala at scalacollectionimmutableStreamforeachStreamscala at scalacollectionTraversableOnceclasstoMapTraversableOncescala at scalacollectionAbstractTraversabletoMapTraversablescala at acyclicpluginPluginPhaseanon runPluginPhasescala at scalatoolsnscGlobalRuncompileUnitsInternalGlobalscala at scalatoolsnscGlobalRuncompileUnitsGlobalscala at scalatoolsnscGlobalRuncompileSourcesGlobalscala at scalatoolsnscGlobalRuncompileGlobalscala at xsbtCachedCompiler runCompilerInterfacescala at xsbtCachedCompiler runCompilerInterfacescala at xsbtCompilerInterfacerunCompilerInterfacescala at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at sbtcompilerAnalyzingCompilercallAnalyzingCompilerscala at sbtcompilerAnalyzingCompilercompileAnalyzingCompilerscala at sbtcompilerAnalyzingCompilercompileAnalyzingCompilerscala at orgjetbrainsjpsincrementalscalalocalIdeaIncrementalCompilercompileIdeaIncrementalCompilerscala at orgjetbrainsjpsincrementalscalalocalLocalServercompileLocalServerscala at orgjetbrainsjpsincrementalscalaremoteMainmakeMainscala at orgjetbrainsjpsincrementalscalaremoteMainnailMainMainscala at orgjetbrainsjpsincrementalscalaremoteMainnailMainMainscala at sunreflectGeneratedMethodAccessor invokeUnknown Source at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at commartiansoftwarenailgunNGSessionrunNGSessionjava Thanks for creating the plugin Starting a fresh project and want to have clean code Im testing out the plugin to make sure Ive configured it correctly It doesnt seem to detect package cycles in test code See for a sample project Running sbt testcompile doesnt cause a compilation error If classes A and B are moved to the source directory running sbt compile makes the compile fail as expected Am I missing a configuration option or does the plugin not support test code 