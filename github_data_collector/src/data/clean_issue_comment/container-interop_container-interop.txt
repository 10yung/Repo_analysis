It looks like theres no way to upgrade from containerinteropcontainerinterop to psrcontainer for a DI container without a major breaking change Please see this issue The latest crazy thing I attempted was to formally replace the containerinterop legacy package via composerjson with a set of stubs using classalias but unfortunately it turns out classalias literally only works for classes not for interfaces so no luck It looks like the only backwards compatible approach is to depend on containerinteropcontainerinterop and keep implementing Interop Container ContainerInterface and thus implement Psr Container ContainerInterface implicitly you cant explicitly implement it since thatll trigger a PHP error about implementing the same interface twice So if I understand this correctly there is no way to upgrade to the final version of the PSR without a major BC break It seems my only choices are Major vesion bump and no compatibility with anything that still depends on containerinterop or Keep depending on the legacy package which emits a deprecation warning every time somebody installs my package Theres an option but its pretty horrible I can copypaste the legacy package into my own package and use Composer to replace the legacy package I still cant implement the final interfaces directly so itll look weird but itll work Am I correct that this is the only way to get rid of the deprecation notice and retain BC Awkward Reduce file size when composer install with preferdist flag I just released an implementation of containerinterop with my understanding of this container standard Comments are welcome Continuing the discussion from Nowhere in the inline or otherwise docs have I managed to find whether methods implementing ContainerInterfaceget return singletons ie always the same instance only initializing it on the first call Or does this standard intentionally omit this I think this information should be included in the docs I just realized that containerinterop the organization itself has no logo Any suggestions for what it could look like Something like power plugs battery or similar would be nice IMO Note yes Im opening an issue and running away not good at anything that requires interaction with pixels So as I mentioned in it is crucial for me for the ContainerInterface to describe how values can be bound to the container in order to later on have the possibility for a PSR ServiceProviderInterface which would allow for truly agnostic interoperable packages Current behavior There is currently two schools of containers Those where you decide when setting a value if itll be a singleton Those where you decide when retrieving a value if itll be a singleton Here are the signatures currently found in the wild in the most downloaded containers on Packagist Container Bind an instance Bind a singleton leaguecontainer addstring alias mixed concrete bool shared sharestring alias mixed concrete illuminatecontainer bindstring alias mixed concrete bool shared singletonstring alias mixed concrete joomladi setstring alias mixed concrete bool shared bool protected sharestring alias mixed concrete bool protected pimplepimple offsetSetstring alias mixed concrete concrete wrapped in factorymixed concrete offsetSetstring alias mixed concrete phpdiphpdi setstring alias mixed concrete set and retrieve with makestring alias array parameters auradi setstring alias Closure concrete setstring alias mixed concrete As we can observe by far the most common pattern is to have two separate methods As we already have a get it would make sense to me for the setter to be set and it is also the most common name For binding singletons share seems to be the most used at the moment The type of concrete As seen in the table most of the time concrete is not callable but mixed this is to allow people to bind values to the containers like this php containersetfoo somevalue containersetbar some array Binding these kind of values will just bind them However binding callables php containersetfoobar function return new Foobar Will result in the callable being executed on retrieval ie if you do getfoobar you wont get a closure but an instance of Foobar I think this is a flexible system and thats the behavior I have most observed in the containers I tested The case of serializable containers and readonly containers Some containers are meant to be serializable like Symfonys Others are just read only in general For this purpose I suggest to make this a separate interface entirely that could be facultatively implemented by the containers like for the delegate lookup Proposed interface With all this in mind this is the interface I propose php interface WritableContainer extends ContainerInterface Set a value on the container If the value is a callable it will be called on retrieval The value bound will be fetched at every retrieval if it is a callable it will be called every time as well param string alias param mixed concrete return mixed public function setstring alias mixed concrete Set a value on the container The value will always be the same upon retrieval If it is a callable it will only be called once param string alias param mixed concrete return mixed public function sharestring alias mixed concrete Name could probably be something way better input welcome Note this is probably imperfect in a lot of ways Im fully aware of that its just to get the discussion going somewhere So throw your input at me lets get the discussion started Not all containers are the same and as discussed in the other issue the main reason the original ContainerInterface didnt standardize on setting values is because all the containers did it differently This is to me exactly the reason why this should be in PSR so that we can take all this mess of various behaviors and unify to something the user can rely on This does not mean all containers should act the same any containers can then have extra features protected instances etc this does not go against that Its just to ensure that we at least have a baseline of what can be expected from a PSR container While a unified interface for containers is already a great step forward towards package interoperability I feel this PSR is missing a standardized service provider interface Currently if you want to write a framework agnostic package you need to write service providers for a lot of various containers and frameworks I feel like if this PSR were to provide a ServiceProviderInterface similar to Silexs php interface ServiceProviderInterface public function registerContainerInterface container This would allow package maintainers to write one service providers for all PSR compatible frameworks and microframeworks Has this been given any thought or was discarded for a reason Im not thinking of I know the point is to keep the PSR as minimal as possible but I feel strongly that without this it would only be a half step forward Not to disregard the incredible amount of work that went into all of this Im very grateful to already have an interface for containers just trying to think about the bigger picture and how this PSR could ease things Id like to propose providing a minimal baseline reference implementation of ContainerInterface as part of the documentation and especially for the purposes of providing a reference implementation of the delegate lookup feature From the description alone understanding how the delegate lookup feature works is very difficult for example every time you say the container I get confused as to whether that refers to one container or the other Which is the parent and which is the child This would be much easier to assert with a practical example implementation The baseline reference container implementation might look like this php class Container implements ContainerInterface var callable private definitions array var mixed private values array public function registername callable definition thisdefinitions name definition public function getname if arraykeyexistsname thisvalues thisvalues name calluserfuncthisdefinitions name this return thisvalues name public function setname value thisvalues name value public function hasname return arraykeyexistsname thisdefinitions arraykeyexistsname thisvalues Now based on that can we provide a reference implementation of the delegate lookup feature Since this is not a feature that can be described with an interface but has to be described in words its quite difficult to absorb As for ContainerInterface itself its probably a lot easier to understand but the reference implementation wouldnt hurt it might serve minimally as a quick introduction for somebody to comprehend what a container is and how it works without getting distracted by all the convenience and utility features we add to our individual implementations Can we standardize on the factory facet implemented by many containers Looking at all of the following method signatures they are practically identical makename array parameters in PHPDI makename array args array in Auryn createclassname map array in Unbox buildconcrete array parameters in Laravel Basically every container offers this functionality with basically the same interface and behavior so this should lend itself to standardization pretty naturally Can we standardize on a facetinterface that defines invokation of callables For example in a couple of projects I define a very similar interface and matching exception type along the lines of these php This interface defines the call signature of a component capable of invoking a callable given a set of named parameters By implementing this interface you can create a custom invoker to provide integration with eg a dependency injection container interface InvokerInterface param callable func the Closure to be invoked param array params map where parameter name value return mixed return value from the invoked function throws InvocationException on missing parameter public function invokecallable func array params This Exception is thrown if there is a problem invoking a callable see Invokerinvoke class InvocationException extends FunctionException The invoke function takes a set of parameter namevalue overrides and must resolve the rest by whatever means are implemented by the underlying container The invoker should fill optional arguments with default values when available and should throw an InvocationException The purpose of this interface is to provide a means of switching the behavior from a default builtin argument filler to a real DI container Currently each of these projects need a similar integration adapters for each individual DI container A standardized interface would allow these projects to interop with any container that supports this interface Because its an interface implementors can choose to implement this as a facet of the container itself or as a dedicated separate component Thoughts 