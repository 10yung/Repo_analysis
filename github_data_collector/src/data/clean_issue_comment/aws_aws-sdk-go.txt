Please fill out the sections below to help us address your issue Version of AWS SDK for Go v v Version of Go go version go darwinamd What issue did you see Production issue running at k s docker Batch download multi files the memory of the progress is very high up to G cause OOM Test case running at mac Write a unit test to download a M file memory will increate to M Run the test pprof result Top info Steps to reproduce func Monitor ip elogDebugfStart pprof s ip if err httpListenAndServeip nil err nil elogErrorfstart pprof failed on s n ip panicerr func TestS Downloadt testingT go Monitor timeSleep timeSecond ctx contextBackground econfigSetConfigFileconfigyaml econfigLoadConfig accessKey econfigGetStringAccessKey secretKey econfigGetStringSecretKey bucket econfigGetStringBucket region useast creds credentialsNewStaticCredentialsaccessKey secretKey config awsConfig Region awsStringregion Credentials creds sess sessionMustsessionNewSessionconfig dl s managerNewDownloadersess key testsnappy w awsWriteAtBuffer inputObject s GetObjectInput Bucket awsStringbucket Key awsStringkey elogDebugxfctx Start get from s n err dlDownloadWithContextctx w inputObject if err nil elogWarnxkctx Download from s failed key key error err return elogDebugxfctx Download done key s size d key n timeSleep timeSecond I saw there are some memory issue cause OOM is big issue whats the plan to fix this or any suggestion to use s managerdownloader and s manageruploader For changes to files under the model folder and manual edits to autogenerated code eg services apigo please create an Issue instead of a PR for those type of changes If there is an existing bug or feature this PR is answers please reference it here Is this related to a problem It would be nice to be able to create a S EncryptionClients and DecryptionClients with an S client in much the same way that s manager does so that users who create S clients with special config values like assumer roles can use the client more easily Feature description Create a new constructor for the EncryptionClient called NewEncryptorWithClient or something similar that would conform to the following definition func NewEncryptorWithClientsvc s S builder ContentCipherBuilder options funcEncryptionClient EncryptionClient that uses the s S in place of calling s New Further create a new constructor for the DecryptionClient called NewDecryptorWithClient or something similar that would conform to the following definition func NewDecryptorWithClientsvc s S builder ContentCipherBuilder options funcDecryptionClient DecryptionClient that uses the s S in place of calling s New and uses the ContentCipherBuilder in place of calling kmsNew Describe alternatives youve considered Ive considered creating the clients manually but thats more work than it should be considering how prevalent these operations should be Please fill out the sections below to help us address your issue Version of AWS SDK for Go Version of Go go version What issue did you see I tried to filter errors coming from Invoke for RequestTooLargeException but I actually got the error RequestEntityTooLarge exception Error invoking lambda function RequestEntityTooLargeException Request must be smaller than bytes for the InvokeFunction operation status code request id f b ec c ebccb dd My error handling code looked like logPrintlnError invoking lambda function logPrintlnerr awsErr ok errawserrError if ok awsErrCode lambdaErrCodeRequestTooLargeException logFatalRequest too large never gets called because the error codes do not match The SDK defines lambdaErrCodeRequestTooLargeException but not lambdaErrCodeRequestEntityTooLargeException So am I looking in the wrong place for the error code constant Whats the difference between RequestTooLargeException and RequestEntityTooLargeException The descriptions seem to describe the same thing Workaround was just to use a string instead of referencing a constant from the package CreatedDate field in GetSecretValueOutput struct is actually Last Updated field Please change the documentation to reflect that In servicesecretsmanagerapigo The date and time that this version of the secret was last updated CreatedDate timeTime typetimestamp Version of AWS SDK for Go v Version of Go go version What issue did you see Excessive memory consumption when concurrently uploading to s using the s upload manager The program runs out of memory and crashes when uploading from an AWS EC linux instance with GB RAM The program does not crash or leak memory when running with Go Profiling Go on instance The top nodes dont contain any memory usage related to awssdkgo Profiling Go on instance Program crashes as it runs out of memory and unable to see profiling output however running the program locally GB RAM I can see all the memory is consumed by the s upload processes unlike the above pprof top Showing nodes accounting for kB of kB total Dropped nodes cum kB Showing top nodes out of flat flat sum cum cum kB kB githubcomawsawssdkgoservices s managernewPartPoolfunc kB kB githubcomawsawssdkgoservices s managermultiuploaderupload kB kB githubcomawsawssdkgoservices s managerUploaderUploadWithContext kB kB githubcomawsawssdkgoservices s manageruploaderupload kB e kB githubcomawsawssdkgoservices s manageruploadernextReader kB githubcomawsawssdkgoservices s managerpartPoolGet kB githubcomawsawssdkgoservices s managerUploaderUpload Steps to reproduce Run the code below using Go from an AWS EC instance I did this with uploads each around MB in size go package main import io log mathrand nethttp neturl os sync time nethttppprof githubcomawsawssdkgoaws githubcomawsawssdkgoawssession githubcomawsawssdkgoservices s manager githubcompkgprofile func s s uploader uploadToS path string res ioReader error err suUpload s managerUploadInput Bucket awsStringosGetenvS STORAGEBUCKET Key awsStringpath Body res if err nil return err return nil func s s uploader syncOnesource string error u err urlParsesource if err nil return err var res httpResponse res err httpGetsource if err nil return err defer resBodyClose logPrintfuploading s source if err suploadToS uPath resBody err nil return err return nil func s s uploader syncurls string concurrency int error work makechan string var wg syncWaitGroup for i i concurrency i wgAdd go func defer wgDone for url range work if err ssyncOneurl err nil timeSleeptimeMillisecondtimeDurationrandIntn timeSecond logPrintfRetrying url s url for url range urls work url closework wgWait return nil type s uploader struct u s managerUploader func main go func logPrintlnhttpListenAndServelocalhost nil defer profileStartprofileMemProfileStop conf awsConfigRegion awsStringosGetenvAWSREGION s sessionNew conf uploader s managerNewUploaders funcu s managerUploader uPartSize MB per part var ul s uploader ulu uploader const concurrency if err ulsyncosArgs concurrency err nil logPrintf syncing failed s err return Version of AWS SDK for Go v Version of Go go version go version go darwinamd What issue did you see Profiling the app shows that the app was spending much resources while handling TLS handshakes Over a third of CPUMemory was being used for TLS negotiation which after setting the MaxIdleConnsPerHost seemed to be better However even when IdleConnTimeout is set the connections still seem to be discarded after around seconds of inactivity and a new TLS negotiation is initiated Steps to reproduce Connect to Kinesis go sess sessionMustsessionNewSession awsConfig Region awsStringawsRegion CredentialsChainVerboseErrors awsBoolverboseErrors stsConfig awsConfig Credentials creds Region awsStringawsRegion CredentialsChainVerboseErrors awsBoolverboseErrors HTTPClient httpClient Transport httpTransport Proxy httpProxyFromEnvironment DialContext netDialer Timeout timeSecond KeepAlive timeSecond DialContext MaxIdleConns IdleConnTimeout timeSecond MaxIdleConnsPerHost TLSHandshakeTimeout timeSecond ExpectContinueTimeout timeSecond client kinesisNewsess stsConfig clientPutRecord Execute the script to send some data nethttptransportgo addTLS is invoked for every request that is seconds apart to start a new TLS session Expected One would expect that the TLS session would only be initiated once and be reused from idle sessions Please fill out the sections below to help us address your issue Version of AWS SDK for Go V Version of Go go version What issue did you see Seeing JSON decoding error caused by closed network connection when reading from DynamoDB while the response status is SerializationError failed decoding JSON RPC response status code request id caused by read tcp use of closed network connection Error message from Two things confused us related to this issue Why connection error is wrapped in an unmarshal error Why status code returned when theres a network issue Please advise thanks Steps to reproduce Unfortunately we dont have specific instructions to reproduce this This issue happens sporadically when reading data from DyanmoDB Now you have no way to specify a dynamodbAttributeValue as a parameter to expressionBuildOperand method If you do so it will be treated as any other struct and instead of just passing a value it will Marshal its inner struct all the BOOL true NULL true fields that are needed for inner implementation That is a problem when you for example have a struct that was already been Marshalled go package main import fmt githubcomawsawssdkgoservicedynamodb githubcomawsawssdkgoservicedynamodbdynamodbattribute githubcomawsawssdkgoservicedynamodbexpression type T struct ID uint dynamodbavid Code string dynamodbavcode Total float dynamodbavamount func main t T ID Code code Total it can have dozens of fields it is now Marshalled into proper structs av err dynamodbattributeMarshalMapt if err nil panicerr updateExpr buildUpdateExpressionFromav builder expressionNewBuilder WithUpdateupdateExpr expr err builderBuild if err nil panicerr fmtPrintfq expr it will have a mess now fixed in this PR func buildUpdateExpressionFromav map string dynamodbAttributeValue expressionUpdateBuilder var expr expressionUpdateBuilder for attr value range av expr exprSetexpressionNameattr expressionValuevalue here is a problem now return expr Please fill out the sections below to help us address your issue Version of AWS SDK for Go Release v ab e da c ee cc bcd feecee Version of Go go version What issue did you see According to there is now a standard unfortunately many API clients do indeed use AWSREGION Suggest only using AWSREGION if AWSDEFAULTREGION is not blank Essentially Id like to reopen In this decade AWSDEFAULTREGION is only valid approach to specify the region All tools uses 