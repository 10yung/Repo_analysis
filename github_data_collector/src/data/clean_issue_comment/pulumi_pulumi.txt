When using net and there are secrets used for values in the resources These values are not encrypted in the state when the values is passed to a resource output This can be seen when using a self managed backend like S example program which recreates the issue is here and example of the plain text secret in the resource output of the state is here We should strongly consider emitting TypedDicts for all dictionaries we use for inputs and outputs This would provide some chance of decent tooling experiences for complex inputoutput shapes which are prevalent in Kubernetes We should do the same in tfgen as well though the issue is incrementally less critical there There were a few type issues discovered as a part of enabling mypy in and Follow up on the encoding of Unknown and None WRT Output Label T in Output as covariant If I try enabling this mypy complains about covariant parameters in apply This needs some further investigation Even though the code is actually working pylint by default shows an error when I code resourceid A way to avoid the pylint error is to use getattrresource id but it is verbose and inelegant Is there a way to fix this linting error Today we have multiple code generators one for tfgen one for our Kubernetes provider and several providers that have had to be hand written in every language because they do not fit either of the above Logically these are all the same and are tightly constrained by the need to represent the Pulumi resource model in the target language We plan to introduce a common intermediate schema that can be shared across all of these domains such that we can use one shared set of code generators for all resource providers This will be used to replace existing code generators to make it easier to build future providers and as the foundation for significantly improved resource provider documentation Components of this work include Define core schema model Add code generation for TypeScript Add code generation for Python Add code generation for NET Add code generation for Go Replace tfgen with usage of this shared code generator Replace Kubernetes code generation with usage of this shared code generator Replace Resource documentation with languageagnostic docs derived from this schematization Expand schema model to support component resources and description of packages like awsx and eks Ive encountered several cases in the k s provider where it would be useful to check only the preview step without running an update I couldnt find an easy way to do this in test framework so it would be nice to add this as an optional mode for ProgramTest We support awskms azurekeyvault gcpkms and hashivault secrets providers today We should ensure all of these have robust test coverage We support local disk S Azure Blob and GCS backends We should ensure we have robust test coverage for all of these as part of GAing these backends While waiting for Amazon to create an EKS cluster the Pulumi Python language executor seems to take a full CPU presumably busywaiting ps aurx head USER PID CPU MEM VSZ RSS TT STAT STARTED TIME COMMAND jforcier s R PM Usersjforcierpyenvversionspulumiekscpubinpython Usersjforciergobinpulumilanguagepythonexec monitor engine project pulumiekscpu stack jforcierekscpu pwd Usersjforcierscratchpulumiekscpu dryrun false parallel Since EKS clusters take about ten minutes to create on the AWS side this is quite a long time for one core to be busy Pulumi is not creating any other resources during this time and there are no further dependent resources it is waiting to create It also does not have the same behavior on deletion deleting EKS clusters is similarly slow on the AWS side but Pulumi doesnt exhibit the same CPU usage Heres the simple program I used to reproduce this python import pulumi from pulumiaws import ec eks iam ASSUMEROLEPOLICY Version Statement Effect Allow Principal Service eksamazonawscom Action stsAssumeRole MASTEREGRESSRULES cidrblocks fromport protocol toport config pulumiConfig vpcid configrequirevpcid subnets configrequireobjectsubnets masterrole iamRolepulumiekscpumasterrole assumerolepolicyASSUMEROLEPOLICY iamRolePolicyAttachmentpulumiekscpumasterroleclusterpolicy rolemasterrole policyarnarnawsiamawspolicyAmazonEKSClusterPolicy iamRolePolicyAttachmentpulumiekscpumasterroleservicepolicy rolemasterrole policyarnarnawsiamawspolicyAmazonEKSServicePolicy securitygroup ec SecurityGrouppulumiekscpusg egressMASTEREGRESSRULES vpcidvpcid vpcconfig endpointPrivateAccess False endpointPublicAccess True securitygroupids securitygroup subnetids subnets ekscluster eksClusterpulumiekscpu namepulumiekscpu rolearnmasterrolearn version vpcconfigvpcconfig enabledclusterlogtypes Youll need to add the VPC IDlist of subnet IDs in the stack configuration config awsregion useast pulumiekscpuvpcid yourvpcid pulumiekscpusubnets somesubnetid maybeanothersubnetid Please let me know if this issue would be better filed on the primary Pulumi repo I filed it here simply because EKS clusters are the only resource Ive observed this with Related to We will be improving the UI experience to support configuration The CLI now allows you to enabledisable Policy Packs so the CLI will also need to be able to support configuring them