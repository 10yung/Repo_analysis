Hello I found out while updating my nuget packages that emojis and smileys customization was not possible anymore This PR is an attempt to bring this feature back while keeping the new performance optimizations in place Please note that Im not much used to caring about allocations so its possible I introduced useless ones Feel free to point them to me so I can fix them To summarize the changes I introduced a new immutable EmojiMapping class wrapping the creation of the compact prefix trees EmojiMapping can be constructed from custom dictionaries it uses the default emojis and smileys otherwise EmojiMapping exposes two static public methods returning the default emojis and smileys dictionaries so that they can be used as a base to create a custom EmojiMapping instance EmojiParser takes an EmojiMapping instance and uses it directly to parse emojis and smileys The compact prefix trees creation is mostly the same as before I only added new safety checks since the input can be provided externally I also added some unit tests ensuring the basic usecases work as expected As far as I understand setting ImplicitParagraph to false should prevent markdig from wrapping rendered HTML in a p However the following test does not behave as expected csharp var pipeline new MarkdownPipelineBuilderBuild var writer new StringWriter var renderer new MarkdigRenderersHtmlRendererwriter rendererImplicitParagraph false pipelineSetuprenderer var foo MarkdownToHtmltest pipeline foo is ptestp n and not test Furthermore this parameter and the couple more similar are only interesting at render time and as such they should be directly settable the user should not be forced to go through lines of setup to set a basic option such as when rendering a snippet This also makes them basically undiscoverable I havent looked at this in a long while but I notice that definition lists require multiple spaces after the colon to work In the following markdown the first block works the second block does not md First Term This is the definition of the first term Second Term This is one definition of the second term Continues previous term First Term This is the definition of the first term This is the definition of the first term Second Term This is one definition of the second term This is another definition of the second term Babelmark seems inconclusive on this with a whole bunch of parsers including Markdig in that test failing to render either block and quite a few including PanDoc parsing both blocks All parsers seem to recognize the Definition List though because all parsers are generating the headers properly its the sub items that are falling through Is there a reason that Markdig requires the extra spaces The parsers that do render the list properly dont require the extra spaces Hello It seems that when I create a container with more than one class only the first class is rendered The following Markdown markdown aclass anotherclass I would expect the following html div classaclass anotherclassdiv Instead I am getting only the first class rendered I have created a Net Fiddle to demo I guess this is an issue with HtmlRendererWriteAttributes Thanks Is there an extension to render a summary of markdown text by truncating the content after a set number of words For example suppose Im building a site where people write articles in markdown But on the home page I want to display the first words of each article Id like to avoid rendering the whole thing and then parse the HTML to find the first words while properly closing any open tags Itd be nice if theres a way I could do it as MarkDig is parsing or rendering the markdoown If no such thing exists I could try to implement this myself but would appreciate some hints as to how Id go about it Is there any extension available for supporting basic bibliography like If not any idea to help starting the developmenrt of a such extension md onclickalert amp click amp will be rendered to html pimg srconclickalert click altimage p Escaping is done after but all chars are preserved before the protocal sep Hi all Im developing a library where standardized extensions can be written The idea is to enable easy development of block and inline elements which themselves have an internal syntax I have built a layer on top of Markdig In developing this library which I will make available once Im satisfied and licensing issues are fixed I stumbled upon some things that Id like to mentiondiscuss These are immutable AST easy AST creation Renderers with DI injected dependencies AST Transformers JSCSS embedding Details Immutable AST While having a mutable AST is nice for performance an immutable one is beneficial in preventing mistakes and gaining largersclae performance multithreading async reusability of AST parts Easy AST creation This one is nice for testing and nice for AST renderers Some of my extensions dont render html but render markdown instead This way normalized markdown rendering still works and target html can reuse styling of the overall document stylesheet In order to implement AST renderers its nice to provide a direct AST instead of a markdown string which is then parsed Its faster less errorprone and also typed Some rendererstransformers for certain extensions I created need data from outside sources ie database Current implementations simply get these dependencies injected This works but adding extensions to the pipeline involves creating the extension instances Passing a FuncTExtension to AddIfNotAlreadyTExtension would help here When having an immutable AST we can build AST transformers They take an AST and produce a new AST where items from the input AST are reused in the output AST This is fast and memory efficient In my library I have a way for extensions to provide javascript and css For example I have an extension which produces a BPMN graph using the excellens bpmnjs lib For this to work I inject jscss in the rendered html document While its not hard to do so and maybe outofplace in the library like Markdig it may be worth tinkering about I want to express my gratitude for publishing Markdig This post is meant to take the existing solution and ponder about ways to move it forward This improves performance in cases like where the AbbreviationParsers PostMatch was running over the entire LiteralInline every time a new character was appended to it Now it only checks the ending Today options pushed from a user to parsers but also directly parser instance which are less directly exposed to users can be modified during the process of request The work on making the markdown pipeline threadsafe immutable was only valid for the list part of the extensions but is not really valid for some classes that are shared and can be modified during the process of a pipeline We need to figure out what we want to do with that Likely we will have to make all these classes immutable which will require painful constructorsetc See for example comment on PR 