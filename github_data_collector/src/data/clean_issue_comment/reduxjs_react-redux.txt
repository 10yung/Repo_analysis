TLDR With the introduction of reduxjstoolkit reduxjsreduxtoolkit we can now use it in place of redux thus making both peer dependencies optional As suggested by markerikson in One other small downside is that ReactRedux says it wants Redux as a peer and logs a warning if only RSK is installed Currently this warning may very well give the false impression that reduxjstoolkit must be installed alongside redux for it to work properly Ideally an UNMET PEER DEPENDENCY warning should by displayed iff neither redux nor reduxjstoolkit is installed but neither npm nor yarn has a way to specify such a requirement AFAIK That leaves us no choice but to mark both as optional similar to the reactdomvsreactnative situation if we are to avoid being misleading In the future leaving redux as is might pose a bigger problem still with npm v which will install peer dependencies automatically as outlined in the npm CLI Roadmap among other places Proper peerDependencies Support Part of the installer rewrite involves taking a fresh look at how peerDependencies are handled and quite often not handled to maximize the cases where the CLI does the right thing Since npm v peerDependencies were not installed by default putting the onus on users to resolve them Well be bringing back this functionality in version Do you want to request a feature or report a bug Yes What is the current behavior I got on most likely from a DDG search or somebody linking it in SO or something Documentation lists createProvider which we were using but was removed since version or so however label on top shows version so it was very confusing that API documentation is outdated and there are no references to createProvider in documentation source If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it doesnt have dependencies other than React Paste the link to a CodeSandbox or RN Snack example below Open up See version at top say Try to use createProvider its gone optional Look all over source code for it to see if it was removed and why documentation lists it and if removal was intended or accident or what optional Make this bug report What is the expected behavior redirects to most recent documentation or gives or updated to reflect recent changes or show correct version Which versions of React ReactDOMReact Native Redux and React Redux are you using Which browser and OS are affected by this issue Did this work in previous versions of React Redux Firefox Related to Potential solutions Link to guide in the list of guides in the side navigation pane Duplicate the content of the style guide to both documentation sites Migrate the reactredux specific guide only Do you want to request a feature or report a bug Bug possibly If this is a usage question please do not post it here post it on Stack Overflow instead If this is not a feature or a bug or the phrase How do I applies then its probably a usage question What is the current behavior A components useSelector value is not updated when an action is fired from a utility function that changes that state The action that is fired is clearly visible and successful in the Redux state timeline See discussion and code sample below unable so far to get a sandox demo running sorry If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it doesnt have dependencies other than React Paste the link to a CodeSandbox or RN Snack example below What is the expected behavior Since useSelector is subscribing to changes to its values its value should be updated upon the change Which versions of React ReactDOMReact Native Redux and React Redux are you using Which browser and OS are affected by this issue Did this work in previous versions of React Redux This is a new use case for me so cannot compare to previous versions Redux React ReactRedux FYI already posted on SO Discussion I have several components that use a Modal to upload files and then submit them for processing by our backend The user may upload one or more files and they are stored in Redux and then listed on the main page The submission to the backend is done by a utility function which issues the API calls and checks status to ensure that the backend processing was correctly submitted Each file submitted to the backend is identified by a groupId The upload and subsequent submission is kicked off when the user clicks the CONTINUE button on the FileDrop component This was all working just fine until the requirement came along to exclude any duplicate files by fileName for now If a duplicate file is detected by querying the list of files in the Redux store the user is offered the opportunity to cancel the request or replace the existing file and thats where the trouble is Heres a skeleton of the code showing the relevant pieces Cancelling a request works just fine but Im unable to correctly update the Redux store when replacing a file The flow through the code is as follows User requests a file upload and component ModalFileDropPage is invoked The FileDrop component is invoked the modal is displayed the user selects a file and clicks the CONTINUE button The handleModalUpload function is invoked which submits the uploaded file to the backend It is passed the function removeGroupIdFromRedux as a parameter If the file is a duplicate and the user requests that it replace the previous file we delete the file from the backend and then request the associated Redux item be removed via the link to the removeGroupIdFromRedux function The current request for the uploaded file is handled in the normal fashion returning to continueToNextPage with the mediaInfo or possibly an error The main component that requests the file upload and submits it for processing import React from react const ModalFileDropPage props const logos useSelectorstate statefileslogos const removeGroupIdFromRedux async id await dispatchstoreLogos logosfilter groupId groupId id const continueToNextPage async currentPage setMediaRoleIdmediaRoles const mediaInfo await handleModalUpload if mediaInforesponse update redux if no errors await dispatchstoreLogos logos SUCCESS store uploaded file info in Redux else ERROR clear file data and cancel FileDrop modal return FileDrop Button onClickevent continueToNextPage eventCONTINUEButton FileDrop from the separate file containing handleModalUpload utility function const handleModalUpload async file file name being processed allFiles function to provide all files data from Redux removeGroupFromRedux function to delete original file from Redux setUploading Uploading state function setUploadingtrue try Test for duplicate fileName and prompt user to either cancel the upload replace the original file with the new copy of the file const replace swalcancel or replace buttons true uses SweetAlert catch err if replace throw new DuplicateFileNameDuplicate file name this works just fine else const success await deleteMediaAssetoldFilegroupId Delete file from backend if success throw new ReplaceDeleteErrorUnable to delete existing file for replacement Excerpt from the reducers import filesActions from actionsactionTypes import filesInitialState from componentsFilesinitialState export default function reducerstate filesInitialState action switch actiontype case filesActionsSTORELOGOS return state logos actionpayload case filesActionsSTORELOGOSPAGE return state logosPage actionpayload case filesActionsSTORELOGOSURL const logos logosPageCurrentGroup state const logoIndex logosfindIndexitem itemgroupId logosPageCurrentGroup const logo logos logoIndex logourl actionpayload logos logoIndex logo return state logos default return state When the user opts to replace the existing file the removeGroupIdFromRedux function is successfully called and the log shows that the action was successfully performed and there is now one less item in Redux in the image below there was only one file for testing so the result from this call is an empty logos array The next thing that happens is that the SUCCESS code in continueToNextPage is executed and it sets the logos array to two items the original one and the newlyadded one The previous update to the Redux store is not recognized Thanks In v we added a hard dependency on either reactdom or reactnative because we need to pull in unstablebatchedUpdates For those users who happen to not be using RD or RN we added an alternate renderers entry point that drops the batching This entry point was described in the v release notes at but we do not have it formally documented We should add some kind of a usage guide page for using RR with other renderers This came up in fix Hi folks My idea is to change forceRender into useSelector hook let instead set a state and return that state This should transform redux state changes into react useState changes that should batched and eventually paused form react concurrent mode Do you want to request a feature or report a bug Originally commented to respond salazarm s question Its a hypothetical bug What is the current behavior checkForUpdates read equalityFn from the stale closure so even if equalityFn is changed after the first render the change doesnt affect If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it doesnt have dependencies other than React Paste the link to a CodeSandbox or RN Snack example below This example is tried to be realistic possible The equalityFn is null at the first render and later changed to shallowEqual In the result checkUpdates triggers unnecessary rerenders What is the expected behavior Use equalityFn from the latest render Which versions of React ReactDOMReact Native Redux and React Redux are you using Which browser and OS are affected by this issue Did this work in previous versions of React Redux reactredux Hey in recent issue we found test case which violates principle of topdown state update behaviour when state change propagates through mapStateToProps This PR is adding reproducible testcase to highlight this issue I believe this is important due to statement in this part of codebase if lastThrownError Its possible that we caught an error due to a bad mapState function but the parent rerendered without this component and were about to unmount This shouldnt happen as long as we do topdown subscriptions correctly but if we ever do those wrong this throw will surface the error in our tests In that case throw the error from here so it doesnt get lost throw lastThrownError I would be grateful if you will help me to find how to fix this test case in reactredux or at least merge this test to make sure that issue will be fixed eventually When a dispatch is triggered from a lifecycle method as a sideeffect of a rerender from a previous dispatch we wind up calling mapStateToProps on components that are never going to be rendered and are about to be unmounted fixed a very similar issue when multiple dispatches are triggered simultaneously Minimal repro is here Do you want to request a feature or report a bug A bug What is the current behavior When the wrapped component dispatches any action in cDU or uLE as a reaction to external prop change an unnecessary rerender is made If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem Your bug will get fixed much faster if we can run your code and it doesnt have dependencies other than React Paste the link to a CodeSandbox or RN Snack example below Open console click Activate What is the expected behavior Child rerenders only once after clicking the button Which versions of React ReactDOMReact Native Redux and React Redux are you using Which browser and OS are affected by this issue Did this work in previous versions of React Redux See codesandbox above The probable reason of the bug is that lastWrapperPropscurrent is outdated at the moment of dispatch This leads to ownProps reference being reset to an older value One possible workaround is to introduce a separate recentWrapperProps ref and set in immediately inside render const recentWrapperProps useRef recentWrapperPropscurrent wrapperProps 