Currently Octant is invoked from the command line To extend the reach of the project Octant will be converted to an application This Epic will track the process of this conversion If metrics server is installed while Octant is viewing workloads it will error during the content generation proceeds until metrics are created for pods Error message looks like this T ERROR apicontentmanagergo generate content clientid fde caf ea d e ebbc e c err generate content collect workload cards load workloads get metrics for pod example c sb get pod metrics get pod metrics podmetricsmetricsk sio defaultexample c sb not found contentpath workloadsnamespacedefault githubcomvmwaretanzuoctantinternalapiContentManagerrunUpdatefunc UsersbryanDevelopmentprojectsoctantinternalapicontentmanagergo githubcomvmwaretanzuoctantinternalapijobrunfunc UsersbryanDevelopmentprojectsoctantinternalapipollergo When viewing a CRD show all versions and the custom resources if they exist Update URL to custom resources to include the version Show custom resource version in titles Signedoffby bryanl bryanlilesgmailcom CRDs with multiple versions have ambiguous paths Create a way to differentiate those paths Following the instructions in yields an error from the go run buildgo ciquick command npm ERR errno npm ERR angularcli postinstall node binpostinstallscriptjs npm ERR Exit status npm ERR npm ERR Failed at the angularcli postinstall script npm ERR This is probably not a problem with npm There is likely additional logging output above npm ERR A complete log of this run can be found in npm ERR rootnpmlogs T Zdebuglog webdeps exit status exit status A quick look at the logs reveals this verbose linkBins ng binng verbose linkBins rootoctantwebnodemodulesbin verbose linkBins false info lifecycle angularcli install angularcli info lifecycle angularcli postinstall angularcli verbose lifecycle angularcli postinstall unsafeperm in lifecycle false verbose lifecycle angularcli postinstall PATH usrlocallibnodemodulesnpmnodemodulesnpmlifecyclenodegypbinrootoctantwebnodemodulesangularclinode modulesbinrootoctantwebnodemodulesbinrootgobinusrlibgo binusrlocalsbinusrlocalbinusrsbinusrbinsbinbinusrgamesusrlocalgamessnapbin bin verbose lifecycle angularcli postinstall CWD rootoctantwebnodemodulesangularcli silly lifecycle angularcli postinstall Args c node binpostinstallscriptjs silly lifecycle angularcli postinstall Returned code signal null info lifecycle angularcli postinstall Failed to exec postinstall script verbose teardown shutting down workers info teardown Done in s verbose stack Error angularcli postinstall node binpostinstallscriptjs verbose stack Exit status verbose stack at EventEmitteranonymous usrlocallibnodemodulesnpmnodemodulesnpmlifecycleindexjs verbose stack at EventEmitteremit eventsjs verbose stack at ChildProcessanonymous usrlocallibnodemodulesnpmnodemodulesnpmlifecyclelibspawnjs verbose stack at ChildProcessemit eventsjs verbose stack at maybeClose internalchildprocessjs verbose stack at ProcessChildProcesshandleonexit internalchildprocessjs verbose pkgid angularcli verbose cwd rootoctantweb verbose Linux generic verbose argv usrlocalbinnode usrlocalbinnpm ci verbose node v verbose npm v error code ELIFECYCLE error errno error angularcli postinstall node binpostinstallscriptjs error Exit status error Failed at the angularcli postinstall script error This is probably not a problem with npm There is likely additional logging output above verbose exit true This is on ubunut running node and npm I was able to work around this by following these steps suggested by GarySmith cd web npm install npm run build cd go generate web go run buildgo build Also the has build instructions that include using a make from the top level dir I dont believe a makefile exists at this level The resource viewer explicitly bails when an object has more than one owner reference Im not sure why it someone would do this but we should handle the case gracefully Example yaml apiVersion v kind Service metadata creationTimestamp T Z name v packagesoperatorscoreoscom namespace olm ownerReferences apiVersion operatorscoreoscomv alpha blockOwnerDeletion false controller false kind ClusterServiceVersion name packageserver uid e bdc f ef afe dbe apiVersion operatorscoreoscomv alpha blockOwnerDeletion false controller false kind ClusterServiceVersion name packageserver uid e bdc f ef afe dbe resourceVersion selfLink apiv namespacesolmservicesv packagesoperatorscoreoscom uid a f c e ae adba ddee c a ae spec clusterIP ports port protocol TCP targetPort selector app packageserver sessionAffinity None type ClusterIP status loadBalancer In this case there are multiple owner references to the same object Most likely this is a bug in the controller but it should still not make Octant upset My plugin is generating the following error message in the console the first time that the user navigates to the plugin in the UI when the Get function in the dashboard client is executed grpc server failed to encode response rpc error code Internal desc grpc error while marshaling proto Marshal called with nil and after the first time navigating there every invocation of the function works flawlessly To reproduce the error modify the sample plugin in the octant source code so that its handleNavigation and initRoutes functions in maingo are replaced with func handleNavigationrequest serviceNavigationRequest navigationNavigation error return navigationNavigation Title Sample Plugin Path requestGeneratePath IconName cloud nil func initRoutesrouter serviceRouter routerHandleFunc funcrequest serviceRequest componentContentResponse error contentResponse componentNewContentResponsecomponentTitleFromStringExample ctx requestContext client requestDashboardClient key storeKeyAPIVersion appsv Kind Deployment Namespace argo Name argoui err clientGetctx key if err nil contentResponseAddcomponentNewTextFailed else contentResponseAddcomponentNewTextSuccess return contentResponse nil Install argo with the two commands listed at This is needed since the Get is trying to fetch the argo deployment Compile octant install the plugin and Launch octant When you navigate to the Sample plugin you will see the error in the console Success is displayed in the UI indicating that things are fine Navigate around and notice that the console error does not appear again The metadata card should be a tab currently we just have delete for nodes we should have proper action representations for nodes Preamble Thank you so much for this wonderful project it saved my life today when navigating a sea of CRDs Heres the first issue i found im sure more to come Happy to contribute a fix but time is limited for me as im commited to other things for my day job what was expected Assuming arbitrarily long CRDs would be viewablecopyable from the octant sidebar what was observed CRDs w longer then characters are not viewable in octants sidebar making exploring a complex cluster w lots of CRDs a little tricky Deets In the UI If you have long CRDs like bgpconfigurationscrdprojectcalicoorg T Z bgppeerscrdprojectcalicoorg T Z blockaffinitiescrdprojectcalicoorg T Z clusterinformationscrdprojectcalicoorg T Z clustersclusterxk sio T Z felixconfigurationscrdprojectcalicoorg T Z globalnetworkpoliciescrdprojectcalicoorg T Z globalnetworksetscrdprojectcalicoorg T Z hostendpointscrdprojectcalicoorg T Z ipamblockscrdprojectcalicoorg T Z ipamconfigscrdprojectcalicoorg T Z ipamhandlescrdprojectcalicoorg T Z kubeadmconfigsbootstrapclusterxk sio T Z kubeadmconfigtemplatesbootstrapclusterxk sio T Z machinedeploymentsclusterxk sio T Z machinesclusterxk sio T Z networkpoliciescrdprojectcalicoorg T Z vsphereclustersinfrastructureclusterxk sio T Z vspheremachinesinfrastructureclusterxk sio T Z vspheremachinetemplatesinfrastructureclusterxk sio T Z Then you cant see them in the side bar It looks like characters is the limit for the sidebar Can we make it resizable Examples of CRDs that work ok ippoolscrdprojectcalicoorg chars T Z machinesetsclusterxk sio chars T Z 