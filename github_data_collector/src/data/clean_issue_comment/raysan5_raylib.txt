There are multiple users asking for raylib integration with other engineslibrariestools Here it is a list of desirable examples some are already available as external repos x raylib sokolapp rayfork raylib spritesheetatlas x raylib Tiled raylibtiledimportwithtmx x raylib Nuklear raylibnuklear dguiwithraylib x raylib imgui libtbagray x raylib Spine spineraylib x raylib Unity usingraylibdllinunity raylib Assimp x raylib physicsmaths ProfJski Examples x raylib enet NetDynamics raylib ECS x raygui tigr rayguitigr Please feel free to reply this issue with other integrations interesting to be listed here Please before submitting a new issue verify and check X I tested it on latest raylib version from master branch X I checked there is no similar issue already reported X My code has no errors or misuse of raylib Issue description Raylib uses internally GLFW that does not handle keyboard layouts It assumes all keyboards are USQWERTY Environment Computer with AZERTY keyboard Code Example cpp if IsPressedKEYA I need to press Q for this condition to be true Trail Finding a way to convert the keycodes before passing it to GLFW raylib implements RLMALLOC RLCALLOC and RLFREE but some of the external libraries implement their own memory allocators definitions others none at all Below table shows allocators used in every librarymodule used by raylib all of them should be custom allocators to have full control over raylib programs memory allocation if it was required for example on embedded devices library custom alloc custom free others state glfw calloc free realloc glad realloc free miniaudio MAMALLOC MAFREE MAREALLOC stbimage STBIMALLOC STBIFREE STBIREALLOC STBIREALLOCSIZED stbimagewrite STBIWMALLOC STBIWFREE STBIWREALLOC STBIWREALLOCSIZED stbimageresize STBIRMALLOC STBIRFREE stbvorbis malloc free drflac DRFLACMALLOC DRFLACFREE DRFLACREALLOC drmp DRMP MALLOC DRMP FREE DRMP REALLOC drwav DRWAVMALLOC DRWAVFREE DRWAVREALLOC jarmod malloc free jarxm malloc free parshapes PARMALLOC PARFREE PARCALLOC cgltf malloc free dirent malloc free rgif RGIFMALLOC RGIFFREE tinyobjloaderc TINYOBJMALLOC TINYOBJFREE TINYOBJREALLOC TINYOBJCALLOC raylib module custom alloc custom free others state core RLMALLOC RLFREE rlgl RLMALLOC RLFREE RLCALLOC realloc text RLMALLOC RLFREE calloc realloc textures RLMALLOC RLFREE realloc physac PHYSACMALLOC PHYSACFREE rnet malloc free calloc rmem malloc free Note that all libraries custom allocators should ultimatelly fallback to raylib allocators RLMALLOC RLFREE RLCALLOC There is some problem for macOS high DPI support so the scissors mode and camera mode will only work after doing an affine transformation to the coordinate But I just find out that if i manually pack the executable file in an mac application bundle with a simple plist this problem will be solved Dont know why but it just works And then comes the real problem I cant find reach the resources file packed in the app bundle under the MyAppappres through a pure c method The only way i know is to use swift or ObjectiveC such as CFBundleCopyResourceURL But i really want to do this job in pure c Now i just put all my resources under UsersSharedMyApp it works well but looks ugly Are there any c api which can get the absolute path for resource directory under the app directory Could anybody familliar with macOS help me PS I dont know which module tag to use so i just put it under core maybe build is better When running some eamples texturesparticlesblending core dcamera I exeperienced that none of input keys did not work I tried keys kbdEsckbd kbdLeftkbd and kbdRightkbd Environment Kubuntu INFO Initializing raylib dev tested also on test branch INFO Display device initialized successfully INFO Viewport offsets INFO GLAD OpenGL extensions loaded successfully INFO OpenGL Core profile supported INFO GPU Vendor NVIDIA Corporation INFO GPU Renderer GeForce GTX PCIeSSE INFO GPU Version NVIDIA INFO GPU GLSL NVIDIA via Cg compiler Current logging system needs several improvements TraceLog messages should be properly categorized and unified they need to be standardized in some way DEVICE INITCLOSE INFO Window Graphics Audio Network DATA LOADING CPUGPU Image Texture Font Mesh Shader Sound Music Internal Processes Shader compilation VBO overflow Current system is designed in a way that messages are ALWAYS stored inside the binary It would be interesting to review this design probably using macros Hi I am doing a D engine using Gtk and raylib to render To integrate raylib create gtkraylibc and gtkraylibh clone corec now called raylibcorec remove GLFW and everything related to nonDesktop platforms since it is not necessary within GTK GLAD inside rlglh place a conditional macro for when I am using epoxyh which is what I am using in GTk and is the one recommended for GtkGLArea gtkraylibc handles the render as GLFW does and allows you to use gtkraylibembednew which in turn uses gtkglarea Captura de pantalla I still dont have support for any kind of input but I hope to complete it and make the web examples work When this is complete I will share gtkraylib Currently calculating the screen position of things inside of a render texture is difficult however if we either had to pass in the rectangle of the window or render texture or we had to pass in just the width and height it would solve this problem c Vector GetWorldToTextureVector position Camera camera int screenWidth int screenHeight Calculate projection matrix from perspective instead of frustum Matrix matProj MatrixIdentity if cameratype CAMERAPERSPECTIVE Calculate projection matrix from perspective matProj MatrixPerspectivecamerafovy DEG RAD doublescreenWidth doublescreenHeight else if cameratype CAMERAORTHOGRAPHIC float aspect floatscreenWidth floatscreenHeight double top camerafovy double right top aspect Calculate projection matrix from orthographic matProj MatrixOrthoright right top top Calculate view matrix from camera look at and transpose it Matrix matView MatrixLookAtcameraposition cameratarget cameraup Convert world position vector to quaternion Quaternion worldPos positionx positiony positionz f Transform world position to view worldPos QuaternionTransformworldPos matView Transform result to projection clip space position worldPos QuaternionTransformworldPos matProj Calculate normalized device coordinates inverted y Vector ndcPos worldPosx worldPosw worldPosy worldPosw worldPosz worldPosw Calculate d screen position vector Vector screenPosition ndcPosx f f floatscreenWidth ndcPosy f f floatscreenHeight return screenPosition this is my current solution Currently if you have some shader typically shaders that do something technical like drawing normals to a texture calculating lighting in screen space you need to use a shader other than what is assigned to the material of that object in order to do this you need to store the current shader into a temporary value set the new shader for every d object you want to draw this why then revert them after you draw this becomes even more difficult and slow if your models have multiple materials in this cases you must backup every shader into an array then assign the shader to each model and then go through the array again to reassign it or make a second model To solve this we need some sort of override that can be set similar to beginShaderMode it could be combined into the same function or we could make a beginShaderMode d or a beginShaderModeOverride it would overide all shaders being used on d draw calls how it is now C cpp BeginTextureModerenderTextures i DrawTextTop LIME ClearBackgroundrandomColor BeginMode D topWindowOffsetx topWindowOffsety topWindowOffsetx topWindowOffsety topWindowZoom CAMERAORTHOGRAPHIC DrawGrid for stdvectorModeliterator j modelsbegin j modelsend j Shader temp jmaterials shader jmaterials shader orthoGraphic DrawModelWiresj SKYBLUE jmaterials shader temp EndMode D EndTextureMode how it should be cpp BeginTextureModerenderTextures i DrawTextTop LIME ClearBackgroundrandomColor BeginMode D topWindowOffsetx topWindowOffsety topWindowOffsetx topWindowOffsety topWindowZoom CAMERAORTHOGRAPHIC DrawGrid beginShaderMode DorthoGraphic for stdvectorModeliterator j modelsbegin j modelsend j DrawModelWiresj SKYBLUE endShaderMode d EndMode D EndTextureMode now this is a simple case but this currently does not support multiple materials i can not think of an efficient way to do the same thing with multiple materials Please before submitting a new issue verify and check check I tested it on latest raylib version from master branch check I checked there is no similar issue already reported check My code has no errors or misuse of raylib Issue description I get different but still wrong behaviour depending on whether I build from source or use the release Raylib Cameratarget appears to have no effect whatsoever Zoom and rotation work Offset appears to only have half the effect it should I believe I switched to building from master and havent gone back to doublecheck this Taking code verbatim from the example at and compiling on my machine the square can be moved off the left or right sides of the screen and the camera does not follow at all Latest raylib built from master Cameratarget appears to have half the effect it is supposed to Zoom and rotation do work Offset works but also appears to have only half the effect it should Taking code verbatim from the example at and compiling on my machine the square can be moved off the left or right sides of the screen with the camera following at a slowed rate If the code is modified to double the cameratargetx and cameratargety values the square stays in a fixed position onscreen but is no longer centred If offsetx and offsety are doubled as well the square is now centered Environment MacBook Pro Retina inch Mid OS X Catalina C Intel Iris Pro MB graphics According to this machine uses OpenGL I dont know if theres a better way to verify that for sure Issue Screenshot img width altScreen Shot at PM src Note that the square has moved off the centre of the screen and the camera has not followed Code Example Code is verbatim from Modified example code that doubles offset and target values to stay centered is at 