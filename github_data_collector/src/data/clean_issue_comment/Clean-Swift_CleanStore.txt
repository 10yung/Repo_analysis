I noticed that the models in Orderswift explicitly implement the function to conform to Equatable This means that each time a model is updated this method must be updated too which makes it easy to make a mistake by forgetting to do so This could be avoided by making all properties inside the models conform to Equatable too Also lhsdatetimeIntervalSincerhsdate comparison wasnt working correctly because for each case when rhs is later than lhs it would always return true This also revealed an error in the Unit Tests when OrdersWorkerupdateOrder method wasnt returning the correct order with the updated date in it Therefore I have Removed all instances of explicitly implemented method Declared necessary Model structs as conforming to Equatable Made updateOrder method inside OrdersWorkerTests test suite return the Order object passed to it inside the completionHandler instead of the static mock object from OrdersWorkerTeststestOrders I would like to ask whats the best practise if any in case we have a scene thats fetching something from the network and after that we want to store these data locally core data In addition if multiple scenes required to have the same networkcore data can we have a universal reusable workers I read about multiple stores in the TDD approach as well as multiple workers under the same interacor but I am a bit confused regarding what approach should follow here CI is reporting the master branch code is failing It would be great to have this in a code only version without story boards Why is Configurator disappeared and wrapped in a setup instead And output in Interactor became presenter Its very confusing now what happened Each scenes has respective storyboard New RouterLogic natively routes one storyboard to another using storyboardinstantiateInitialViewController img width altcapturfiles src More details of routing implementation found here In an effort to make view models almost as dumb as enums how about using tuples over structs Benefits I see Disallow func init and other logic Get equatable for free Access members by index Can you think of any issues or implications of this performance memory etc Further discussions For the shipment method picker in create order scene the view controller currently requests and receives from the interactor However this violates the unidirectional flow am I understanding this correctly that it should be this View controller send the request to the interactor Interactor requests shipment methods from worker storage Worker sends it back to the interactor Interactor sends it back to the presenter Presenter formats localizes etc then sends it back to view controller A lot of this architecture seems very unswifty and seems designed for older languages For example no good swift developer would use the clunky Router class instead of a simple extension of the view controller heyplz this code give me in objective c