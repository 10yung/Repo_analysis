Support static linking in cocoapods I am running stub request test in XCTest and my case is as following func testExample func matchPathrequest URLRequest Bool let path requesturlpath return path nil setup a breakpoint on this line and you can see it runs twice var responseBodyJson String String responseBodyJson appId stubmatchPath jsonresponseBodyJson status headers nil let urlPath String let url URL URLstring urlPath let request URLRequest URLRequesturl url let response AutoreleasingUnsafeMutablePointerURLResponse nil do let dataVal try NSURLConnectionsendSynchronousRequestrequest returning response printresponse do if let jsonResult try JSONSerializationjsonObjectwith dataVal options as NSDictionary printSynchronous jsonResult catch let error as NSError printerrorlocalizedDescription catch let error as NSError printerrorlocalizedDescription I have successfully installed via Cocoapods imported the module in my XCTest class and added methods When I try and run my tests I see the below error I have tried to import the project manually with no luck have the framework in my linked frameworks for the test target Any ideas Thanks kylef For pod files that do not use useframeworks testing with Mockingjay returns a build error MockingjayMockingjaySwifth file not found So it will be better for you to add something like this in your MockingjayURLConfigurationm to check if include MockingjaySwifth or not this will make life easier for developers who use your pod to unit test their frameworks I tried to make a ullRequest on it but its not possible for me like I dont have the rights if hasincludeMockingjaySwifth import MockingjaySwifth else import MockingjaySwifthMockingjaySwifth endif All is in the title Is there a way to stub a redirect response using the status code with Mockingjay Causing a call to Following the announcement in just warn users about this and where to go to become a maintainer kylef Ive got a question about the future of the project Do you think support for MockingJay and URITemplateswift will be continuing There are multiple open pull requests which fix support for things like Xcode Swift Carthage etc which have been ignored for months If you dont have plans to continue support for both projects can you put a request out for someone to take over support These are great projects and I would like to continue using them But if they are no longer going to be supported Ill look for an alternative or possibly fork these and create something new based on these It looks to be similar to which was marked as fixed I have a SessionManager initialized as a singleton and then used in the service under test I first stub everything with Mockingjay and then call one of the services methods this in turn makes a request using Alamofire SessionManager And the real request goes through Now if I dont use the singleton SessionManager and create it inside the test then pass it to the service under test then Mockingjay stubbing works Interestingly enough in the original scenario the SessionManager singleton is actually only called so initialized for the first time in the service under test I dont use the real AppDelegate in unit tests meaning I might still be wrong on this though that the stub is called before the SessionManager is even created and still this fails to work Xcode Swift Alamofire Mockingjay EDIT OK this is more clear now Its not about just SessionManager but about the manager using nondefault configuration static let sessionManager AlamofireSessionManager let configuration URLSessionConfigurationbackgroundwithIdentifier XXX configurationtimeoutIntervalForRequest return AlamofireSessionManagerconfiguration configuration When not using background configuration stubbing works It seems current version of matcher doesnt match uri path partly Example func testPartlyPathMatches let request URLRequesturl URLstring XCTAssertTrueuriauthloginrequest This test will fail It seems I always need to specify everything after the host in the uri matcher This is a bit inconvenient Because eg I as mobile app developer dont want to care how the backend has structured the login endpoint in my tests or which endpoint version it is Im only interested in stubbing the login request Or did I miss something