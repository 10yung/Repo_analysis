Im deploying a selfhosted browserless An NFS volume is mounted on varnfs that is mounted to both browserless and the client pods The client connects to browserless using the following js await fsensureDirvarnfssessions const userDataDir varnfssessionssessionId await fsensureDiruserDataDir const browser await puppeteerconnect browserWSEndpoint browserWSEndpointuserdatadiruserDataDir disablewebsecurity ignoreHTTPSErrors true headless true After executing a few actions with the browser I check the content of the userdatadir content and its empty Am I missing something Thanks I really really like the live debugger it helps a LOT writing the code thanks for the great project But lately Ive found it very inconvenience automating websites which require login when pressing CtrlEnter to reevalue the code a new Chrome instance is launched and the code is run within the new instance so I need to automate the login process in the code and relogin every time start over from the login page all the way to the final page Im caring about which greatly reduced the productivity Is there any way to tell the live debugger to keep using the existing Chrome instance PS Ive tried PREBOOTCHROME and KEEPALIVE env vars but they seem to work only with external puppeteerconnect sessions not with the live debugger Hi I noticed that a common performance optimization with puppeteer is to avoid having the browser download images and stylesheets In most cases if you just need the rendered HTML you dont the browser to actually download the images since all you want is the HTML output In the content endpoint a rejectRequestPattern is provided which appears to reject requests based on the URL of the request While this can work if we provide patterns to reject all images jpg jpeg png gif etc This may not catch everything A proposal for the endpoint would be to reject by resourceType which might look something like this js let rejectResourceTypes image stylesheet font pageonrequest request if rejectResourceTypesincludesrequestresourceType requestabort else requestcontinue If this seems like a reasonable thing to add to the endpoint I can open up a PR for this Thanks First stab at implementing Fix for joelgriffith Thanks for the quick fix in but I think there is something more to this Seems as if the large content is causing the page load for and to break Ive increased the content of the page to make it more extreme const URL requireurl moduleexports async browser page const data url content htmlheadbodynisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattis nisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisnisl suscipit adipiscing bibendum est ultricies integer quis auctor elit sed vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada proin libero nunc consequat interdum varius sit amet mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut consequat semper viverra nam libero justo laoreet sit amet cursus sit amet dictum sit amet justo donec enim diam vulputate ut pharetra sit amet aliquam id diam maecenas ultricies mi eget mauris pharetra et ultrices neque ornare aenean euismod elementum nisi quis eleifend quam adipiscing vitae proin sagittis nisl rhoncus mattisbodyhtml await pagesetRequestInterceptiontrue pageonrequest request requestrespond body datacontent await pagegotodataurl return Here is the HAR file that shows the first load as being successful For that one I removed the query string parameters Then when I typed in the editor it added script back When I clicked DEBUG the failing call in the HAR happened localhostharzip DebugUIBreaksWithLargeContent Im aware of and The docs says browserless routinely checks on the health of the image as its running Sometimes its helpful to have it restart automatically when CPU or Memory usage are above for a period of time by default minutes heavycheckmark this is useful for keeping each instancecontainer of browserlesschrome up and running heavycheckmark selfhealing existing container but negativesquaredcrossmark usage in deployment workflow rollback But a health check endpoint would provide much more when using for example with the Dockers healthcheck feature A health check endpoint healthcheck could be used to make sure Chrome is ready to receive requests Maybe those checks about RAM and CPU usage Maybe that isAvailable we can see at pressure can provide something I dont actually know what that checks That endpoint could return useful information in json and HTTP when the status is OK Usage in Docker Swarm Docker Swarm will monitor that endpoint and restart if necessary when configured to do so But the default browserlesschrome service already do that from what I understand Using EXITONHEALTHFAILURE That way we can use that endpoint to make sure Docker Swarm can monitor the health of all replicas when deploying And in case of an unsuccessful start after an upgradechange Docker Swarm can rollback automatically Im sure other container orchestrators like Kubernetes rely on health checks like that to provide features like that too The screencast API is super cool Because both function and screencast enable the user to run arbitrary code the user is forced to make a tradeoff either use screencast and get a recording of the script to see what happened but forgo the ability to return parseable data ie JSON HTML etc or use function to get parseable data but forgo the ability to receive a recording We can see similar tradeoffs for screenshot pdf and download The bigger theme behind this GH issue and the one Id love to pick your brain on is if unifying these interfaces is something worth considering Heres what Im thinking screencast and pdf screenshot download support writing the rendered output video PDF image arbitrary file to a scoped download workspace subdirectory instead of returning it directly When operating in this mode HTTP response control is returned to the user just like with function The mechanics for this are all up in the air but my gut says it should work similarly to how the scoped downloads interface works today using a trackingId param eg as a query param in the request URI or as a context property in the body hr What do you think