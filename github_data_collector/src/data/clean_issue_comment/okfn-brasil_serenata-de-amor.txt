What is the problem Maybe we can get better accuracy in the meal outlier classifier as far as I can remember the only one in which the value of the reimbursement is relevant by adjusting the prices overtime to the inflation How can this be addressed Theres a package that can easily do that using IPCA at this point probably in the fit or transform stages of the classifier sorry scikitlearn I never remember the differente between these two Probably something like that would do the adjustment df ajustedvalue dfapplylambda row ipcaadjustrow expensedate row totalvalue axis and then we compare the results to see if there is a better accuracy as my hypothesis suggests Who could help with this issue Anyone interested in doing some exploratory work with data and maybe contributing to What is the problem The problem was that digitized receipts were not machinereadable and we could not afford to properly run OCR in all images we had although weve tried However a couple of months ago the Chamber of Deputies started to offer eletronic receipts Since we know their URL thanks giovanisleite for and they are structured HTML documens that is to say machinereadable we can now try a classifier that idenfies alcoholic beverages in the reimbursements what is not allowed We just need to take extra care to check whether the full amount of the eletronic receipt was actually reimbursed even without remark sometimes the Chamber of Deputies cuts off alcholic beverages from the reimbusements How can this be addressed I think the classifier should get the contents of available eletronic receipt parse them test them agains a dictionary of possible names for alcoholic beverages brunopazzims drafted one in the early days of Serenata Surely we might go first to a exploratory notebook at githubcomokfnbrasilnotebooks to test whether results are worth it Who could help with this issue Anyone What is the problem The companies dataset seems somewhat old from How can this be addressed The idea is to get information from parse it and use it as the source of information The processed data can be used to update the companiesxz to a newer dataset This can be set as the first step before Rosie starts the analysis meaning that at every run the company dataset is uptodate Who could help with this issue Anyone can help with it Labels data collection What is the problem Sometimes the Chamber of Deputies fills reimbursement information incorrectly as it can be seen on issue How can this be addressed It can be addressed by crosschecking the CNPJ provided by the reimbursement request with the information from the companiesxz dataset The end goal would be to have it as a classifier for Rosie to post incorrect information on Twitter so people can help check it and if applicable request an update via Chamber of Deputies website Who could help with this issue Anyone can help with it Im interested on working on this issue but any help is welcome Labels analysis What is the problem According to the Quota for the Exercise of Parliamentary Activity parliamentarians have some monthly limits with defined spending ceilings For example IX combust veis e lubrificantes at o limite inacumul vel de R seis mil reais mensais Only six thousand reais can be spent on fuels and lubricants per month of parliamentary activity In addition there are still total spending limits set by states of the federation UF Valor da cota R AC AL AM Proposal An endpoint in jarbas that shows the subquota limits per monthyear of each deputy The idea is to create a new tweet for Rosie like Oa deputadoasenadora fulanao de tal gastou mais que o limite mensal na subcota XXX no m sano MMYYYY Voc pode no ajduar a verifica link pro Jarbas Update ipdb from to details summaryChangelogsummary Avoid emitting termtitle bytes steinnes Fix help nativeapi Drop support for Python x bmw Stop deprecation warnings from being raised when IPython gt is used Support for IPython lt has been dropped bmw details details summaryLinkssummary PyPI Changelog Repo details Update Django from to details summaryChangelogsummary October Django fixes several bugs in Bugfixes Fixed migrations crash on SQLite when altering a model containing partial indexes ticket Fixed a regression in Django that caused a crash when filtering with a Subquery annotation of a queryset containing classdjangocontribpostgresfieldsJSONField or classdjangocontribpostgresfieldsHStoreField ticket September Django fixes several bugs in Bugfixes Relaxed the system check added in Django for models to reallow use of the same dbtable by multiple models when database routers are installed ticket Fixed crash of KeyTransform for classdjangocontribpostgresfieldsJSONField and classdjangocontribpostgresfieldsHStoreField when using on expressions with params ticket Fixed a regression in Django where attrModelAdminlistfilter ltdjangocontribadminModelAdminlistfilter gt choices to foreign objects don t respect a model s Metaordering ticket August Django fixes security issues and several bugs in CVE Denialofservice possibility in djangoutilstextTruncator If djangoutilstextTruncator s chars and words methods were passed the htmlTrue argument they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression The chars and words methods are used to implement the tfiltertruncatecharshtml and tfiltertruncatewordshtml template filters which were thus vulnerable The regular expressions used by Truncator have been simplified in order to avoid potential backtracking issues As a consequence trailing punctuation may now at times be included in the truncated output CVE Denialofservice possibility in striptags Due to the behavior of the underlying HTMLParser funcdjangoutilshtmlstriptags would be extremely slow to evaluate certain inputs containing large sequences of nested incomplete HTML entities The striptags method is used to implement the corresponding tfilterstriptags template filter which was thus also vulnerable striptags now avoids recursive calls to HTMLParser when progress removing tags but necessarily incomplete HTML entities stops being made Remember that absolutely NO guarantee is provided about the results of striptags being HTML safe So NEVER mark safe the result of a striptags call without escaping it first for example with funcdjangoutilshtmlescape CVE SQL injection possibility in key and index lookups for JSONFieldHStoreField lookupKey and index lookups ltjsonfieldkey gt for classdjangocontribpostgresfieldsJSONField and lookupkey lookups lthstorefieldkey gt for classdjangocontribpostgresfieldsHStoreField were subject to SQL injection using a suitably crafted dictionary with dictionary expansion as the kwargs passed to QuerySetfilter CVE Potential memory exhaustion in djangoutilsencodinguritoiri If passed certain inputs funcdjangoutilsencodinguritoiri could lead to significant memory usage due to excessive recursion when repercentencoding invalid UTF octet sequences uritoiri now avoids recursion when repercentencoding invalid UTF octet sequences Bugfixes Fixed a regression in Django when ordering a QuerySetunion intersection or difference by a field type present more than once results in the wrong ordering being used ticket Fixed a migration crash on PostgreSQL when adding a check constraint with a contains lookup on classdjangocontribpostgresfieldsDateRangeField or classdjangocontribpostgresfieldsDateTimeRangeField if the right hand side of an expression is the same type ticket Fixed a regression in Django where autoreloader crashes if a file path contains nulls characters x ticket Fixed a regression in Django where autoreloader crashes if a translation directory cannot be resolved ticket July Django fixes a security issue and several bugs in Also the latest string translations from Transifex are incorporated CVE Incorrect HTTP detection with reverseproxy connecting via HTTPS When deployed behind a reverseproxy connecting to Django via HTTPS attrdjangohttpHttpRequestscheme would incorrectly detect client requests made via HTTP as using HTTPS This entails incorrect results for methdjangohttpHttpRequestissecure and methdjangohttpHttpRequestbuildabsoluteuri and that HTTP requests would not be redirected to HTTPS in accordance with settingSECURESSLREDIRECT HttpRequestscheme now respects settingSECUREPROXYSSLHEADER if it is configured and the appropriate header is set on the request for both HTTP and HTTPS requests If you deploy Django behind a reverseproxy that forwards HTTP requests and that connects to Django via HTTPS be sure to verify that your application correctly handles code paths relying on scheme issecure buildabsoluteuri and SECURESSLREDIRECT Bugfixes Fixed a regression in Django where classdjangodbmodelsAvg classdjangodbmodelsStdDev and classdjangodbmodelsVariance crash with filter argument ticket Fixed a regression in Django where autoreloader crashes with AttributeError eg when using ipdb ticket June Django fixes security issues and several bugs in CVE AdminURLFieldWidget XSS The clickable quotCurrent URL quot link generated by AdminURLFieldWidget displayed the provided value without validating it as a safe URL Thus an unvalidated value stored in the database or a value provided as a URL query parameter payload could result in an clickable JavaScript link AdminURLFieldWidget now validates the provided value using classdjangocorevalidatorsURLValidator before displaying the clickable link You may customize the validator by passing a validatorclass kwarg to AdminURLFieldWidgetinit eg when using attrdjangocontribadminModelAdminformfieldoverrides Patched bundled jQuery for CVE Prototype pollution jQuery before mishandles jQueryextendtrue because of Objectprototype pollution If an unsanitized source object contained an enumerable proto property it could extend the native Objectprototype The bundled version of jQuery used by the Django admin has been patched to allow for the select library s use of jQueryextend Bugfixes Fixed a regression in Django that stopped ShowHide toggles working on dynamically added admin inlines ticket Fixed a regression in Django where deprecation message crashes if Metaordering contains an expression ticket Fixed a regression in Django where classdjangocontribpostgressearchSearchVector generates SQL with a redundant Coalesce call ticket Fixed a regression in Django where autoreloader doesn t detect changes in managepy file when using StatReloader ticket Fixed crash of classdjangocontribpostgresaggregatesArrayAgg and classdjangocontribpostgresaggregatesStringAgg with ordering argument when used in a Subquery ticket Fixed a regression in Django that caused a crash of autoreloader when an exception with custom signature is raised ticket Fixed a regression in Django where autoreloader unnecessarily reloads translation files multiple times when using StatReloader ticket May Django fixes several bugs in Bugfixes Fixed a regression in Django that caused the incorrect quoting of database user password when using djadmindbshell on Oracle ticket Added compatibility for psycopg ticket Fixed a regression in Django that caused a crash when loading the template for the technical debug page ticket Fixed crash of ordering argument in classdjangocontribpostgresaggregatesArrayAgg and classdjangocontribpostgresaggregatesStringAgg when it contains an expression with params ticket Fixed a regression in Django that caused a single instance fastdelete to not set the primary key to None ticket Prevented djadminmakemigrations from generating infinite migrations for check constraints and partial indexes when condition contains a classpythonrange object ticket Reverted an optimization in Django ticket that caused the inconsistent behavior of count and exists on a reverse manytomany relationship with a custom manager ticket Fixed a regression in Django where classdjangocorepaginatorPaginator crashes if objectlist is a queryset ordered or aggregated over a nested JSONField key transform ticket Fixed a regression in Django where IntegerField validation of database limits crashes if limitvalue attribute in a custom validator is callable ticket Fixed a regression in Django where classdjangocontribpostgressearchSearchVector generates SQL that is not indexable ticket Fixed a regression in Django that caused an exception to be raised when a custom error handler could not be imported ticket Relaxed the system check added in Django for the admin app s dependencies to reallow use of classdjangocontribsessionsmiddlewareSessionMiddleware subclasses rather than requiring moddjangocontribsessions to be in settingINSTALLEDAPPS ticket Increased the default timeout when using Watchman to seconds to prevent falling back to StatReloader on larger projects and made it customizable via the DJANGOWATCHMANTIMEOUT environment variable ticket Fixed a regression in Django that caused a crash when migrating permissions for proxy models if the target permissions already existed For example when a permission had been created manually or a model had been migrated from concrete to proxy ticket Fixed a regression in Django that caused a crash of djadminrunserver when URLConf modules raised exceptions ticket Fixed a regression in Django where changes were not reliably detected by autoreloader when using StatReloader ticket Fixed a migration crash on Oracle and PostgreSQL when adding a check constraint with a contains startswith or endswith lookup or their caseinsensitive variant ticket Fixed a migration crash on Oracle and SQLite when adding a check constraint with condition contains OR operator ticket April Welcome to Django These release notes cover the refnew features ltwhatsnew gt as well as some refbackwards incompatible changes ltbackwardsincompatible gt you ll want to be aware of when upgrading from Django or earlier We ve refbegun the deprecation process for some features ltdeprecatedfeatures gt See the dochowtoupgradeversion guide if you re updating an existing project Django is designated as a termlongterm support release It will receive security updates for at least three years after its release Support for the previous LTS Django will end in April Python compatibility Django supports Python and We highly recommend and only officially support the latest release of each series whatsnew What s new in Django Constraints The new classdjangodbmodelsCheckConstraint and classdjangodbmodelsUniqueConstraint classes enable adding custom database constraints Constraints are added to models using the attrMetaconstraints ltdjangodbmodelsOptionsconstraints gt option Minor features moddjangocontribadmin Added a CSS class to the column headers of classdjangocontribadminTabularInline moddjangocontribauth The HttpRequest is now passed as the first positional argument to methRemoteUserBackendconfigureuser if it accepts it moddjangocontribgis Added Oracle support for the classdjangocontribgisdbmodelsfunctionsEnvelope function Added SpatiaLite support for the lookupcoveredby and lookupcovers lookups moddjangocontribpostgres The new ordering argument for classdjangocontribpostgresaggregatesArrayAgg and classdjangocontribpostgresaggregatesStringAgg determines the ordering of the aggregated elements The new classdjangocontribpostgresindexesBTreeIndex classdjangocontribpostgresindexesHashIndex and classdjangocontribpostgresindexesSpGistIndex classes allow creating BTree hash and SPGiST indexes in the database classdjangocontribpostgresindexesBrinIndex now has the autosummarize parameter The new searchtype parameter of classdjangocontribpostgressearchSearchQuery allows searching for a phrase or raw expression moddjangocontribstaticfiles Added path matching to the optioncollectstatic ignore option so that patterns like vendorjs can be used Database backends Added result streaming for methQuerySetiterator on SQLite Generic Views The new methViewsetup ltdjangoviewsgenericbaseViewsetup gt hook initializes view attributes before calling methdjangoviewsgenericbaseViewdispatch It allows mixins to setup instance attributes for reuse in child classes Internationalization Added support and translations for the Armenian language Management Commands The new optionforcecolor option forces colorization of the command output djadmininspectdb now creates models for foreign tables on PostgreSQL optioninspectdb includeviews now creates models for materialized views on Oracle and PostgreSQL The new optioninspectdb includepartitions option allows creating models for partition tables on PostgreSQL In older versions models are created child tables instead the parent djadmininspectdb now introspects classdjangodbmodelsDurationField for Oracle and PostgreSQL and classdjangodbmodelsAutoField for SQLite On Oracle djadmindbshell is wrapped with rlwrap if available rlwrap provides a command history and editing of keyboard input The new optionmakemigrations noheader option avoids writing header comments in generated migration files This option is also available for djadminsquashmigrations djadminrunserver can now use Watchman lt to improve the performance of watching a large number of files for changes Migrations The new optionmigrate plan option prints the list of migration operations that will be performed NoneType can now be serialized in migrations You can now refregister custom serializers ltcustommigrationserializers gt for migrations Models Added support for PostgreSQL operator classes attrIndexopclasses Added support for partial indexes attrIndexcondition Added the classdjangodbmodelsfunctionsNullIf and classdjangodbmodelsfunctionsReverse database functions as well as many refmath database functions ltmathfunctions gt Setting the new ignoreconflicts parameter of methQuerySetbulkcreate to True tells the database to ignore failure to insert rows that fail uniqueness constraints or other checks The new classdjangodbmodelsfunctionsExtractIsoYear function extracts ISO weeknumbering years from classdjangodbmodelsDateField and classdjangodbmodelsDateTimeField and the new lookupisoyear lookup allows querying by an ISO weeknumbering year The new methQuerySetbulkupdate method allows efficiently updating specific fields on multiple model instances Django no longer always starts a transaction when a single query is being performed such as Modelsave QuerySetupdate and Modeldelete This improves the performance of autocommit by reducing the number of database round trips Added SQLite support for the classdjangodbmodelsStdDev and classdjangodbmodelsVariance functions The handling of DISTINCT aggregation is added to the classdjangodbmodelsAggregate class Adding attrallowdistinct True ltdjangodbmodelsAggregateallowdistinct gt as a class attribute on Aggregate subclasses allows a distinct keyword argument to be specified on initialization to ensure that the aggregate function is only called for each distinct value of expressions The methRelatedManageradd methRelatedManagercreate methRelatedManagerremove methRelatedManagerset getorcreate and updateorcreate methods are now allowed on manytomany relationships with intermediate models The new throughdefaults argument is used to specify values for new intermediate model instances Requests and Responses Added attrHttpRequestheaders to allow simple access to a request s headers Serialization You can now deserialize data using natural keys containing refforward references ltnaturalkeysandforwardreferences gt by passing handleforwardreferencesTrue to serializersdeserialize Additionally djadminloaddata handles forward references automatically Tests The new methSimpleTestCaseassertURLEqual assertion checks for a given URL ignoring the ordering of the query string methSimpleTestCaseassertRedirects uses the new assertion The test classdjangotestClient now supports automatic JSON serialization of list and tuple data when contenttype applicationjson The new settingORACLEMANAGEDFILES ltTESTORACLEMANAGEDFILES gt test database setting allows using Oracle Managed Files OMF tablespaces Deferrable database constraints are now checked at the end of each classdjangotestTestCase test on SQLite just like on other backends that support deferrable constraints These checks aren t implemented for older versions of SQLite because they would require expensive table introspection there classdjangotestrunnerDiscoverRunner now skips the setup of databases not refreferenced by tests lttestingmultidb gt URLs The new attrResolverMatchroute attribute stores the route of the matching URL pattern Validators classMaxValueValidator classMinValueValidator classMinLengthValidator and classMaxLengthValidator now accept a callable limitvalue backwardsincompatible Backwards incompatible changes in Database backend API This section describes changes that may be needed in thirdparty database backends Thirdparty database backends must implement support for table check constraints or set DatabaseFeaturessupportstablecheckconstraints to False Third party database backends must implement support for ignoring constraints or uniqueness errors while inserting or set DatabaseFeaturessupportsignoreconflicts to False Third party database backends must implement introspection for DurationField or set DatabaseFeaturescanintrospectdurationfield to False DatabaseFeaturesusessavepoints now defaults to True Third party database backends must implement support for partial indexes or set DatabaseFeaturessupportspartialindexes to False DatabaseIntrospectiontablenameconverter and columnnameconverter are removed Third party database backends may need to instead implement DatabaseIntrospectionidentifierconverter In that case the constraint names that DatabaseIntrospectiongetconstraints returns must be normalized by identifierconverter SQL generation for indexes is moved from classdjangodbmodelsIndex to SchemaEditor and these SchemaEditor methods are added createprimarykeysql and deleteprimarykeysql deleteindexsql to pair with createindexsql deleteuniquesql to pair with createuniquesql deletefksql to pair with createfksql createchecksql and deletechecksql The third argument of DatabaseWrapperinit allowthreadsharing is removed Admin actions are no longer collected from base ModelAdmin classes For example in older versions of Django from djangocontrib import admin class BaseAdminadminModelAdmin actions a class SubAdminBaseAdmin actions b SubAdmin would have actions a and b Now actions follows standard Python inheritance To get the same result as before class SubAdminBaseAdmin actions BaseAdminactions b moddjangocontribgis Support for GDAL and is dropped TransactionTestCase serialized data loading Initial data migrations are now loaded in classdjangotestTransactionTestCase at the end of the test after the database flush In older versions this data was loaded at the beginning of the test but this prevents the optiontest keepdb option from working properly the database was empty at the end of the whole test suite This change shouldn t have an impact on your tests unless you ve customized classdjangotestTransactionTestCase s internals sqlparse is required dependency To simplify a few parts of Django s database handling sqlparse lt is now a required dependency It s automatically installed along with Django cachedproperty aliases In usage like from djangoutilsfunctional import cachedproperty class A cachedproperty def baseself return alias base alias is not cached Where the problem can be detected Python and later such usage now raises TypeError Cannot assign the same cachedproperty to two different names base and alias Use this instead import operator class A alias propertyoperatorattrgetter base Permissions for proxy models refPermissions for proxy models ltproxymodelspermissionstopic gt are now created using the content type of the proxy model rather than the content type of the concrete model A migration will update existing permissions when you run djadminmigrate In the admin the change is transparent for proxy models having the same applabel as their concrete model However in older versions users with permissions for a proxy model with a different applabel than its concrete model couldn t access the model in the admin That s now fixed but you might want to audit the permissions assignments for such proxy models addviewchangedelete myproxy prior to upgrading to ensure the new access is appropriate Finally proxy model permission strings must be updated to use their own applabel For example for appMyProxyModel inheriting from otherappConcreteModel update userhasperm otherappaddmyproxymodel to userhasperm appaddmyproxymodel Merging of form Media assets Form Media assets are now merged using a topological sort algorithm as the old pairwise merging algorithm is insufficient for some cases CSS and JavaScript files which don t include their dependencies may now be sorted incorrectly where the old algorithm produced results correctly by coincidence Audit all Media classes for any missing dependencies For example widgets depending on djangojQuery must specify js adminjsjqueryinitjs when refdeclaring form media assets ltassetsasastaticdefinition gt Miscellaneous To improve readability the UUIDField form field now displays values with dashes eg e e b d a instead of e e b d a On SQLite PositiveIntegerField and PositiveSmallIntegerField now include a check constraint to prevent negative values in the database If you have existing invalid data and run a migration that recreates a table you ll see CHECK constraint failed For consistency with WSGI servers the test client now sets the ContentLength header to a string rather than an integer The return value of funcdjangoutilstextslugify is no longer marked as HTML safe The default truncation character used by the tfilterurlizetrunc tfiltertruncatechars tfiltertruncatecharshtml tfiltertruncatewords and tfiltertruncatewordshtml template filters is now the real ellipsis character instead of dots You may have to adapt some test output comparisons Support for bytestring paths in the template filesystem loader is removed funcdjangoutilshttpurlsafebase encode now returns a string instead of a bytestring and funcdjangoutilshttpurlsafebase decode may no longer be passed a bytestring Support for cxOracle lt is removed The minimum supported version of mysqlclient is increased from to The minimum supported version of SQLite is increased from to In an attempt to provide more semantic query data NullBooleanSelect now renders ltoption gt values of unknown true and false instead of and For backwards compatibility the old values are still accepted as data attrGroupname ltdjangocontribauthmodelsGroupname gt maxlength is increased from to characters Tests that violate deferrable database constraints now error when run on SQLite just like on other backends that support such constraints To catch usage mistakes the test classdjangotestClient and funcdjangoutilshttpurlencode now raise TypeError if None is passed as a value to encode because None can t be encoded in GET and POST data Either pass an empty string or omit the value The djadminpinggoogle management command now defaults to https instead of http for the sitemap s URL If your site uses http use the new optionpinggoogle sitemapuseshttp option If you use the funcdjangocontribsitemapspinggoogle function set the new sitemapuseshttps argument to False djadminrunserver no longer supports pyinotify replaced by Watchman The classdjangodbmodelsAvg classdjangodbmodelsStdDev and classdjangodbmodelsVariance aggregate functions now return a Decimal instead of a float when the input is Decimal Tests will fail on SQLite if apps without migrations have relations to apps with migrations This has been a documented restriction since migrations were added in Django but it fails more reliably now You ll see tests failing with errors like no such table ltapplabel gt ltmodel gt This was observed with several thirdparty apps that had models in tests without migrations You must add migrations for such models deprecatedfeatures Features deprecated in Model Metaordering will no longer affect GROUP BY queries A model s Metaordering affecting GROUP BY queries such as annotatevalues is a common source of confusion Such queries now issue a deprecation warning with the advice to add an orderby to retain the current query Metaordering will be ignored in such queries starting in Django Miscellaneous djangoutilstimezoneFixedOffset is deprecated in favor of classdatetimetimezone The undocumented QuerySetPaginator alias of djangocorepaginatorPaginator is deprecated The FloatRangeField model and form fields in djangocontribpostgres are deprecated in favor of a new name DecimalRangeField to match the underlying numrange data type used in the database The FILECHARSET setting is deprecated Starting with Django files read from disk must be UTF encoded djangocontribstaticfilesstorageCachedStaticFilesStorage is deprecated due to the intractable problems that it has Use classManifestStaticFilesStorage or a thirdparty cloud storage instead methRemoteUserBackendconfigureuser is now passed request as the first positional argument if it accepts it Support for overrides that don t accept it will be removed in Django The SimpleTestCaseallowdatabasequeries TransactionTestCasemultidb and TestCasemultidb attributes are deprecated in favor of attrSimpleTestCasedatabases attrTransactionTestCasedatabases and attrTestCasedatabases These new attributes allow databases dependencies to be declared in order to prevent unexpected queries against nondefault databases to leak state between tests The previous behavior of allowdatabasequeriesTrue and multidbTrue can be achieved by setting databases all October Django fixes a regression in Bugfixes Fixed a crash when filtering with a Subquery annotation of a queryset containing classdjangocontribpostgresfieldsJSONField or classdjangocontribpostgresfieldsHStoreField ticket September Django fixes a regression in Bugfixes Fixed crash of KeyTransform for classdjangocontribpostgresfieldsJSONField and classdjangocontribpostgresfieldsHStoreField when using on expressions with params ticket August Django fixes security issues in CVE Denialofservice possibility in djangoutilstextTruncator If djangoutilstextTruncator s chars and words methods were passed the htmlTrue argument they were extremely slow to evaluate certain inputs due to a catastrophic backtracking vulnerability in a regular expression The chars and words methods are used to implement the tfiltertruncatecharshtml and tfiltertruncatewordshtml template filters which were thus vulnerable The regular expressions used by Truncator have been simplified in order to avoid potential backtracking issues As a consequence trailing punctuation may now at times be included in the truncated output CVE Denialofservice possibility in striptags Due to the behavior of the underlying HTMLParser funcdjangoutilshtmlstriptags would be extremely slow to evaluate certain inputs containing large sequences of nested incomplete HTML entities The striptags method is used to implement the corresponding tfilterstriptags template filter which was thus also vulnerable striptags now avoids recursive calls to HTMLParser when progress removing tags but necessarily incomplete HTML entities stops being made Remember that absolutely NO guarantee is provided about the results of striptags being HTML safe So NEVER mark safe the result of a striptags call without escaping it first for example with funcdjangoutilshtmlescape CVE SQL injection possibility in key and index lookups for JSONFieldHStoreField lookupKey and index lookups ltjsonfieldkey gt for classdjangocontribpostgresfieldsJSONField and lookupkey lookups lthstorefieldkey gt for classdjangocontribpostgresfieldsHStoreField were subject to SQL injection using a suitably crafted dictionary with dictionary expansion as the kwargs passed to QuerySetfilter CVE Potential memory exhaustion in djangoutilsencodinguritoiri If passed certain inputs funcdjangoutilsencodinguritoiri could lead to significant memory usage due to excessive recursion when repercentencoding invalid UTF octet sequences uritoiri now avoids recursion when repercentencoding invalid UTF octet sequences July Django fixes a security issue in CVE Incorrect HTTP detection with reverseproxy connecting via HTTPS When deployed behind a reverseproxy connecting to Django via HTTPS attrdjangohttpHttpRequestscheme would incorrectly detect client requests made via HTTP as using HTTPS This entails incorrect results for methdjangohttpHttpRequestissecure and methdjangohttpHttpRequestbuildabsoluteuri and that HTTP requests would not be redirected to HTTPS in accordance with settingSECURESSLREDIRECT HttpRequestscheme now respects settingSECUREPROXYSSLHEADER if it is configured and the appropriate header is set on the request for both HTTP and HTTPS requests If you deploy Django behind a reverseproxy that forwards HTTP requests and that connects to Django via HTTPS be sure to verify that your application correctly handles code paths relying on scheme issecure buildabsoluteuri and SECURESSLREDIRECT June Django fixes security issues in CVE AdminURLFieldWidget XSS The clickable quotCurrent URL quot link generated by AdminURLFieldWidget displayed the provided value without validating it as a safe URL Thus an unvalidated value stored in the database or a value provided as a URL query parameter payload could result in an clickable JavaScript link AdminURLFieldWidget now validates the provided value using classdjangocorevalidatorsURLValidator before displaying the clickable link You may customize the validator by passing a validatorclass kwarg to AdminURLFieldWidgetinit eg when using attrdjangocontribadminModelAdminformfieldoverrides Patched bundled jQuery for CVE Prototype pollution jQuery before mishandles jQueryextendtrue because of Objectprototype pollution If an unsanitized source object contained an enumerable proto property it could extend the native Objectprototype The bundled version of jQuery used by the Django admin has been patched to allow for the select library s use of jQueryextend April Django fixes a bug in Bugfixes Prevented admin inlines for a ManyToManyField s implicit through model from being editable if the user only has the view permission ticket details details summaryLinkssummary PyPI Changelog Homepage details Update celery from to details summaryChangelogsummary releasedate PM UTC releaseby Omer Katz Added Python support Contributed by Omer Katz Mads Jensen and Asif Saif Uddin Avoid caching queues which are declared with a TTL Queues that are declared with a TTL are now also be excluded from the inmemory cache in case they expire between publishes on the same channel Contributed by Matt YuleBennett Added an index to the Message table for the SQLAlchemy transport The index allows to effectively sorting the table by the message s timestamp note We do not provide migrations for this model yet You will need to add the index manually if you are already using the SQLAlchemy transport The syntax may vary between databases Please refer to your database s documentation for instructions Contributed by Mikhail Shcherbinin Added a timeout that limits the amount of time we retry to reconnect to a transport Contributed by githubusertothegump classceleryasynchronoushubHub is now reentrant This allows calling funccelerybincelerymain to revive a worker in the same process after rescuing from shutdown classSystemExit Contributed by Alan Justino da Silva Queues now accept string exchange names as arguments as documented Tests were added to avoid further regressions Contributed by Antonio Gutierrez Specifying names for broadcast queues now work as expected Previously named broadcast queues did not create multiple queues per worker They incorrectly declared the named queue which resulted in one queue per fanout exchange thus missing the entire point of a fanout exchange The behavior is now matched to unnamed broadcast queues Contributed by Kuan HsuanTso When initializing the Redis transport in conjunction with gevent restore all unacknowledged messages to queue Contributed by Gal Cohen Allow classkombusimpleSimpleQueue to pass queuearguments to Queue object This allows classkombusimpleSimpleQueue to connect to RabbitMQ queues with custom arguments like xqueuemode lazy Contributed by C Blue Neeh Add support for rediss scheme for secure Redis connections The rediss scheme defaults to the least secure form as there is no suitable default location for cacerts The recommendation would still be to follow the documentation and specify brokerusessl if coming from celery Contributed by Daniel Blair Added the Azure Storage Queues transport The transport is implemented on top of Azure Storage Queues This offers a simple but scalable and lowcost PaaS transport for Celery users in Azure The transport is intended to be used in conjunction with the Azure Block Blob Storage backend Contributed by Clemens Wolff githubuserankurokok Denis Kisselev Evandro de Paula Martin Peck and githubusermichaelperel Added the Azure Service Bus transport The transport is implemented on top of Azure Service Bus and offers PaaS support for more demanding Celery workloads in Azure The transport is intended to be used in conjunction with the Azure CosmosDB backend Contributed by Clemens Wolff githubuserankurokok Denis Kisselev Evandro de Paula Martin Peck and githubusermichaelperel Drop remaining mentions of Jython support completely Contributed by Asif Saif Uddin and Mads Jensen When publishing messages to the Pidbox retry if an error occurs Contributed by Asif Saif Uddin Fix infinite loop in methodkombuasynchronoushubHubcreateloop Previous attempt to fix the problem PR kombu did not consider an edge case It is now fixed Contributed by Vsevolod Strukchinsky Worker shutdown no longer duplicates messages when using the SQS broker Contributed by Mintu Kumar Sah When using the SQS broker prefer boto s default region before our hardcoded default Contributed by Victor Villas Fixed closing of shared redis sockets which previously caused Celery to hang Contributed by Alexey Popravka the Pyro transport modkombutransportpyro now works with recent Pyro versions Also added a Pyro Kombu Broker that this transport needs for its queues Contributed by Irmen de Jong Handle nonbase encoded SQS messages Fix contributed by Tim Li Asif Saif Uddin and Omer Katz Move the handling of Sentinel failures to the redis library itself Previously Redis Sentinel worked only if the first node s sentinel service in the URI was up A server outage would have caused downtime Contributed by Brian Price When using Celery and the pickle serializer with binary data as part of the payload UnicodeDecodeError would be raised as the content was not utf We now replace on errors Contributed by Jian Dai Allow setting methodboto sqscreatequeue Attributes via transportoptions Contributed by Hunter Fernandes Fixed infinite loop when entitychannel is replaced by revive on connection drop Contributed by Tzach Yarimi Added optional support for Brotli compression Contributed by Omer Katz When using the SQS broker FIFO queues with names that ended with the f letter were incorrectly parsed This is now fixed Contributed by Alex Vishnya and Ilya Konstantinov Added optional support for LZMA compression Contributed by Omer Katz Added optional support for ZStandard compression Contributed by Omer Katz Require pyamqp as the minimum version Contributed by Asif Saif Uddin The value of DISABLETRACEBACKS environment variable is now respected on debug info and warning logger level Contributed by Ludovic Rivallain As documented in kombu and eventleteventlet there is a mismatch between the monkeypatched eventlet queue and the interface Kombu is expecting This causes Celery to crash when the brokerpoollimit configuration option is set eventleteventlet suggests that the mutex can be a noop This is now the case Contributed by Josh Morrow Codebase improvements and fixes by Omer Katz Mads Jensen Asif Saif Uddin Lars Rinn Documentation improvements by Jon Dufresne Fay Cheng Asif Saif Uddin Kyle Verhoog Noah Hall githubuserbrabiega version post post releasedate PM IST releaseby Omer Katz note The previous release contained code from master It is now deleted from PyPi Please use this release instead No changes since previous release version releasedate PM IST releaseby Omer Katz Support both Redis client version x and version x Contributed by Ash BerlinTaylor and Jeppe FihlPearson version details details summaryLinkssummary PyPI Changelog Homepage Docs details Update djangocorsmiddleware from to details summaryChangelogsummary details details summaryLinkssummary PyPI Changelog Repo details Update djangodebugtoolbar from to details summaryChangelogsummary Updated StaticFilesPanel to be compatible with Django The ProfilingPanel is now enabled but inactive by default Fixed toggling of table rows in the profiling panel UI The ProfilingPanel no longer skips remaining panels or middlewares Improved the installation documentation Fixed a possible crash in the template panel Added support for psycopg Composed objects Changed the Jinja tests to use Django s own Jinja template backend Added instrumentation to queries using server side cursors Too many small improvements and cleanups to list them all Backwards incompatible changes Removed support for Python Removed support for Django s deprecated MIDDLEWARECLASSES setting Restructured Panel to execute more like the newstyle Django MIDDLEWARE The Panelinit method is now passed getresponse as the first positional argument The Panelprocessrequest method must now always return a response Usually this is the response returned by getresponse but the panel may also return a different response as is the case in the RedirectsPanel Third party panels must adjust to this new architecture Panelprocessresponse and Panelprocessview have been removed as a result of this change The deprecated API debugtoolbarpanelsDebugPanel has been removed Third party panels should use debugtoolbarpanelsPanel instead The following deprecated settings have been removed HIDDENSTACKTRACEMODULES HIDEDJANGOSQL INTERCEPTREDIRECTS RESULTSSTORESIZE ROOTTAGATTRS TAG details details summaryLinkssummary PyPI Changelog Repo details Update djangoextensions from to details summaryChangelogsummary Changes Improvement travis add Python Improvement setuppy update classifiers Changes Improvement RandomCharField Support uniquetogether Improvement exportemails add settings for overriding queryset fields orderby and the fullname function Changes Fix admin widgets fix import of static template tag part Changes Fix autoslugfield find unique method overrideable Fix notes do not replace dot in template dirs Fix admin widgets fix import of static template tag Improvement printuserforsession use session backend Improvement sqlcreate postgis support Improvement graphmodels permit combination of includes and excludes Improvement Adds missing GIS engine to DEFAULTMYSQLENGINES Improvement sqldiff use lowercase field names in MySQL Improvement sqldiff mysql code could duplicate AUTOINCREMENT and UNSIGNED statements Changes Fix tests support for newer versions of pytest Fix tests disable test with drf dependency for older python versions Changes Fix removing wrongly released texttags template Fix graphmodels support for Python lt Improvement ForeignKeySearchInput wrap media files in static Improvement UniqField added tests Improvement dumpscript fix ormitemlocator to use dateutil Improvement graphmodels added argument to change arrowshape Changes Fix showurls fix for traceback on multi language sites Improvement resetdb fix typo s in help test Changes New HexValidator validate hex strings Improvement resetdb move settings to djangosettingssettings which makes it easier to override Improvement AutoSlugField extend support for custom slugify function Fix runprofileserver fix autoreloader for newer Django versions Changes New test many many more tests thanks everybody New docs many documentation updates New graphmodel add simple theming support and django theme Improvement ModificationDateTimeField make modificationfield name modifiable Improvement graphmodel option to not showrelations labels in the graph Improvement resetdb allow to override list of backends for database engines Improvement resetdb add psqlextra backend Improvement runserverplus idle support Improvement generatesecretkey removed getrandomstring in favour of getrandomsecretkey Improvement updatepermissions add createonly and updateonly flags Improvement updatepermissions update changed names of permission to match correct permission name Improvement syncdata add database option Improvement runscript allow to override RUNSCRIPTSCRIPTDIR Fix createcommand fix mknod error on macos Fix runserverplus fix in resolving ssl certificate path Fix sqldiff fix hstorefield Deprecate truncateletters use Django s truncatechars Deprecate passwd use Django s changepassword Deprecate Keyczar encrypted fields Keyczar is abandonned deprecated details details summaryLinkssummary PyPI Changelog Repo details Update djangorestframework from to The bot wasnt able to find a changelog for this release Got an idea details summaryLinkssummary PyPI Changelog Homepage details Update freezegun from to details summaryChangelogsummary Refactor classes to functions Ignore Selenium Move to pytest Conditionally patch timeclock details details summaryLinkssummary PyPI Changelog Repo details Update newrelic from to details summaryChangelogsummary This release of the Python agent includes bug fixes The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Bug Fixes Fix a crash when using a future based interfaces on Tornado s http client Tornado s http client returns a future when fetch is called Prior to this release the agent caused a coroutine object to be returned rather than a future causing a potential crash when application code assumed a future would be returned A future will now be returned from http client fetch as expected Fix a crash when running a coroutine created in another transaction When running a coroutine outside of the transaction which created it the agent may have crashed if a separate transaction was active This release of the Python agent includes a bug fix for tornado and support for recording deployment markers in the EU region as well as specifying a deploy timestamp The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Features Added timestamp and EU region support for recording deployment markers When using the newrelicadmin recorddeploy script an optional timestamp can be provided to specify when the deployment marker should be created Furthermore support for accounts in the EU region have been added in this release Bug Fixes Fixed a crash in tornado versions gt Tornado internals changed in a way that may have caused the agent s builtin instrumentation to fail The instrumentation has been updated to alleviate this issue This release of the Python agent includes bug fixes for feedparser and djangopiston The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Bug Fixes Fixed a crash when using feedparser When running with the feedparser library the agent would crash on attempting to parse an RSS feed This issue has now been corrected Fixed a crash when using djangopiston When running with the djangopiston library the agent would crash on attempting to service a request This issue has now been corrected This release of the Python agent includes a bug fix for the mako library instrumentation The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Bug Fixes Fixed a crash when using the Mako template library When running with the Mako template library the agent would crash on attempting to render a template This issue has now been corrected This release of the Python agent introduces Event loop diagnostics feature Tornado instrumentation for versions or higher Improved context manager API functionality and interfaces This release also drops support for Python The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Event loop diagnostics Introducing event loop diagnostics for asyncio The Python agent can now surface information about transactions that block the event loop The agent will be able to generate information about transactions that have waited a significant amount of time to acquire control of the event loop Event loop diagnostic information will be available in both APM and via NRQL query Event loop metrics will appear in the transaction Breakdown table Time spent waiting on other transactions will be shown in the transaction Trace details page as shown here eventLoopTime and eventLoopWait attributes will be available via NRQL query An example query might be SELECT count as count averageeventLoopTime as loopTime averageeventLoopWait as loopWait FROM Transaction facet name In New Relic Insights this might show a result like this Diagnostics will be available by default through our existing aiohttp sanic and Tornado instrumentation Diagnostic information will also be available for coroutines that use our backgroundtask and webtransaction decorator APIs Tornado Instrumentation Instrumentation for Tornado framework version x is supported without any feature flags Support for versions earlier than Tornado x has been dropped The Tornado web server framework and http client are instrumented and information will show up in both APM and insights Important Using the tornadogencoroutine with instrumentation is not supported Any usage of tornadogencoroutine should be replaced with an asyncio coroutine Before class MainHandlertornadowebRequestHandler tornadogencoroutine def getself yield gensleep After class MainHandlertornadowebRequestHandler asynciocoroutine def getself yield from gensleep Improved APIs for time trace context managers Context managers such as FunctionTrace ExternalTrace DatastoreTrace may now be used from within asyncio coroutines Additionally the transaction argument is no longer used for any context manager API In order to transition to the new API the transaction argument must be removed Before transaction newrelicagentcurrenttransaction with newrelicagentFunctionTracetransaction quotmytrace quot pass After with newrelicagentFunctionTrace quotmytrace quot pass Updated WebTransaction context manager The WebTransaction context manager is no longer WSGI dependent The context manager takes generic HTTP arguments which you can use to build web transactions that appear in the APM product For more information see our API documentation This release of the Python agent includes bug fixes deprecations and improved naming behavior for gRPC The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Feature Enhancements Improved gRPC support The external and transaction pages now show the gRPC method being called in addition to the host and port Ability to disable sending dbstatement as part of traces When dbstatement is added to either attributesexclude or transactionsegmentsattributesexclude the value will now no longer be sent to New Relic as part of transaction traces or spans Deprecations TransactionContext API is now deprecated The TransactionContext API will be removed in a future release Tornado instrumentation feature flag deprecation The existing introductory support for Tornado and feature flags will be removed from a future release Versions x and newer will be the only versions of Tornado supported in future releases See this discussion on the New Relic forums for more details Bug Fixes Fixed a crash when using uvicorn workers with gunicorn When running ASGI applications with gunicorn the agent would attempt to instrument the application as a WSGI application resulting in a crash The agent will no longer attempt to instrument gunicorn applications that are coroutines Remove logging of license keys The agent logged license keys when data failed to send to New Relic The agent will no longer log license keys to the agent logs under any circumstance Fix operation of distributed tracing and cross application tracing when httplib connections are reused When making multiple requests via a single connection with httplib httplib or urllib the proper headers will be added to each outgoing request As a result cross application tracing and distributed tracing will now operate as expected when reusing connection objects This release of the Python agent includes bug fixes and adds new API methods to retrieve the current trace ID and current span ID The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Features Added a new API to retrieve the current trace ID Retrieving the current trace ID can now be accomplished with a call to newrelicagentcurrenttraceid This method will return the id of the current trace or None if no transaction is in progress Added a new API to retrieve the current span ID Retrieving the current span ID can now be accomplished with a call to newrelicagentcurrentspanid This method will return the id of the current span or None if no span is in progress Bug Fixes Exclusive time incorrectly displayed when using concurrent asyncio The New Relic UI may have shown times equaling greater than percent of the total time when executing concurrent tasks in asyncio The exclusive times reported by the agent will now be correctly displayed in APM and insights This release of the Python agent adds improvements to the gRPC instrumentation package and includes bug fixes The agent can be installed using easyinstallpipdistribute via the Python Package Index or can be downloaded directly from the New Relic download site Features Improved gRPC support Support for measuring inbound gRPC requests has now been added Inbound gRPC requests will now show as web transactions in APM Additionally distributed tracing is now supported as part of the gRPC instrumentation package Bug Fixes Update pika instrumentation to support the x releases When using the agent with pika versions x The purpose of this PR is to clean some invalid calls from the repository Some of the modules imports were duplicated or not being used Because of that I only remove the invalid modules imports The modules removal should not interfere in the actual operation The API documentation indicates that to list all embursments you have to execute the following get command Listing reimbursements GET apichamberofdeputiesreimbursement Lists all reimbursements althoug when we execute this command line the API retrives only the seven first rows It is necessary to also indicate parameters limit and offset in order to fetch through the database as I did in my code as indicated bellow R code libraryjsonlite reembolso fromJSON LIsts congressperson names from the st position reembolsoresultscongresspersonname Thank you for contributing with us What is the purpose of this Pull Request It allows instagram accounts to be stored and presented for each congressman Thats another layer for checking expenses tracking if there are photos to support or debunk them What was done to achieve this purpose pretty straightforward added a column in the database and renders this info in the grid How to test if it really works add an instagram account for a congressman who has expenses to be reviewed The link for the account must be presented in jarbas under the social column Who can help reviewing it Who are the best people to help reviews it TODO Prepare a bulk insert with instagram accounts What is the problem In some publications made by Rosies Twitter it is noted that the value identified as suspect is within the standard deviation established by the classifier As can be verified in the following suspicion Suspicions Tweet Jarbas Documebt In this case the value is only BRL How can this be addressed I think it is necessary to adjust the classifier rules or improve the training set 