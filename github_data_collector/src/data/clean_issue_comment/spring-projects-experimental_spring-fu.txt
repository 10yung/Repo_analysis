Since everyone has a definition of productionreadiness id like to throw in my cents on how my team would prefer to evaluate when we can switch If we could get a list of spring features that are supported plan to be supported will not be supported maybe via checkboxes and strikethroughs then itd be easy for people to evaluate whether they are ready to use something like this Personally I was looking for things like metrics configurations Scheduled annotation parity repository support Even combing through the issues its not entirely clear whats covered In kofuvalidation samples the notNull constraint has no effect since the validated field is already of nonnullable type String Eg POST ContentType applicationjson login null firstname lastname Response POST HTTP Bad Request ContentType applicationjson ContentLength timestamp T path apiuser status error Bad Request message Failed to read HTTP message requestId b c f Response code Bad Request Time ms Content length bytes If I make the login property to be of type String then validation constraints will be activated properly and for the same request itll response with validation messages POST HTTP Bad Request ContentType applicationjson ContentLength details args login null defaultMessage login must not be null key objectnotNull args firstname defaultMessage firstname must not be blank key charSequencenotBlank args lastname defaultMessage lastname must not be blank key charSequencenotBlank Response code Bad Request Time ms Content length bytes Thats happening because the request fails during deserialization never reaches the validation logic This leads to this error when moduleinfojava requires springboot and springfukofu that includes module springfuautoconfigureadapter javalangmoduleResolutionException Modules springboot and springfuautoconfigureadapter export package orgspringframeworkbootcontextproperties Solution is to change this package in project springfuautoconfigureadapter AbstractDsl initialize is marked as internal This prevents external sub classes to work properly If the constraint is relaxed it would allow external projects to provide their own applicative DSLs or side projects to add featured DSLs enabling fast community driven enrichment The format is close to how WebFluxServerDsl is setup Ive tested startup of each servlet type Im confused about contextregisterBeanTomcatServletWebServerFactoryCustomizerclass servletWebServerFactoryConfigurationtomcatServletWebServerFactoryCustomizerserverProperties and whether or not its required Ive left it in for good measure to be used by standalone applications or even by server if just for example email generation is needed and not view resolution using freemarker templates servlet and reactive freemarker configurations can be added later on when needed could be placed under webMvc and webFlux blocks accordingly add defaultProperties to configurationProperties function because without some property bound from apppropertiesyml or environment binderget would fail with javautilNoSuchElementException No value bound Starting from kofureactiveminimal example and adding devtools to buildgradlekts val developmentOnly by configurationscreating configurations runtimeClasspath extendsFromdevelopmentOnly dependencies developmentOnlyorgspringframeworkbootspringbootdevtools With this main app code restarts work fine SpringBootApplication class App Bean fun route router GET okbodyfromObjecthello n fun mainargs ArrayString SpringApplicationrunAppclassjava args Changing to use springfu val app applicationWebApplicationTypeREACTIVE webFlux router GET okbodyfromObjecthello n fun main apprun stops restarts from happening I could not find a springfu devtools example so Im not sure if anything else needs to be configured in addition to the above