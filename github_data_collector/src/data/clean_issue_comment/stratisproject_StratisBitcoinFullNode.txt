This PR removes stale entries from the seeds for all networks and updates the Stratis seeder domains to stratisnetworkcom for all networks also When calling endpoints to interact with smart contracts when the transaction cannot be broadcast the API is returning a Bad Request response This is misleading as the same response is returned for example if headers are not set correctly or the request body is not valid When wanting to handle both situations this becomes is an issue Using a different status code for transactions which are not broadcast possibly would be more appropriate Im working on pushing dotnet core to the limit in terms of performance and memory allocation and Imopening issues on NBitcoin when I find something interesting that can be improved let me link here of these issues that may interest you the nd one gives really a boost over memory allocation thats a problem that fullnode is experiencing a lot memory usage and fragmentation I have a scenario where I am passing structs and struct arrays to a smart contract At the moment in my contract Im deserializing from a byte array inside the method In my service I am initializing my struct type and then serializing it so that it can be passed in a call to the contract Ideally I wouldnt want to have to handle serialization instead smart contracts could support struct and array parameters which are deserialized in the call Related to Lots of breaking changes Byte array return values in smart contracts are not being serialized into the receipt csharp public class ExampleContract SmartContract public byte CallMe new byte This is what the receipt of a call to the method looks like json transactionHash a bea f fab df e f d f e d db e face fcddc blockHash b c ecb da f e bd b d e ee efbac c a c afbd postState aa de fea eda d e a cc d e ee d fd e d gasUsed from CUtNvY Jxpn V RD tgphsUKpQdo q i to CKYmR MpUm opnkKZpPyrTKrV xCgtk Dq newContractAddress null success true returnValue SystemByte bloom error null logs Id expect the return value to show the byte array value serialized as a hex string Myself and at least Masternode operators have ran into this issue over the last two months The issue is over a period of time both mainchain and sidechain show a decrease number of inout connections In my case the connections is in and out until I restart my Masternode I observed this behavior after restarting my MN due to Windows Update connection was in out for mainchain and in out for sidechain node log size KB node log size KB node log size KB node log size KB node log size KB connection was in out for mainchain and in out for sidechain node log size KB If I recall correctly this issue was introduced with the SBFN I check the logs frequently for my Node Map and remember faintly this issue arising after I ran Ians script to start the MN Lots of breaking changes 