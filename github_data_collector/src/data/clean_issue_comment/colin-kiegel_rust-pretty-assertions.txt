This is a quick proofofconcept to allow customized labeling for the comparison output currently only for asserteq but easily extended Im happy to flesh it out if there is interest Fixes Alternative to left and right are semantically neutral labels In many cases it would be easier to understand what is actually failing if the labels could be changed to a something with more meaning eg expect and actual An example proposed use and output asserteq expect actual thread main panicked at assertion failed expect actual Diff expect actual ref I cannot compare larger XML files with asserteq because it hangs and runs into a memory leak Just a test case to reproduce the problem I have not looked into the cause Its not a purely cosmetic idea and in the first column of text makes it very easy to get diff syntax highlighting when you copy and paste test output into GitHub comments I find myself replacing the angle braces manually to get this effect Diff left right neutral diff Diff left right neutral Hi and thanks for the helpful library I was annoyed a few times now by the panic message only showing left right instead of my actual arguments to the asserteq call and had to add a custom message describing the arguments This change also helps in remembering which side was the expected or the actual value which happens to me Slightly ugly things in this MR The following message is duplicated times assertion failed Some existing tests now also verify this new feature I think it would be slightly prettier to make these tests also pass x and y as arguments so they dont check two things at once and make a new test verify this new feature ANSI colours arent available a when the compiler output is piped eg into an editor or IDE b in some terminals without the support Much like the Rust compilers warnings are still useful when colour is disabled it would be nice if this crates output was just as useful without colour output Option Some Foo lorem Hello World lorem Hello Wrold ipsum dolor Ok hey hey ho PRO unambiguous CON minor differences hard to spot especially in long lines Option Do it like Pythons unit test framework Some Foo lorem Hello World lorem Hello Wrold ipsum dolor Ok hey hey ho PRO unambiguous PRO extra hint to spot minor differences CON soft linewraps will turn this into a mess for long lines Option use some special chars Some Foo lorem Hello W r old lorem Hello World ipsum dolor Ok hey hey ho PRO extra hint to spot minor differences even for long lines CON ambiguous because you could think and are part of the strings CON hard to read if lines contain a lot of special characters Open Questions can we detect ANSIcolour support automatically note if yes we have to be carfeul about unit tests in situations without ANSIcolour support This should be an exception to still make the tests pass Im trying to use prettyassertions for snapshot testing I compare the snapshotted multilinestring with the new value using the PrettyString trick from When the actual result got indented compared to the snapshot the diff output became very confused img width altsnap src The reason is that two unrelated lines Foos and Bars lorems got matched up in the first linebased comparison pass which should instead realize theres a new line Some followed by a few modified lines followed by a new line test fn testmultilinediff asserteqPrettyStringrFoo lorem Hello World ipsum Bar lorem Hello World PrettyStringrSome Foo lorem Hello World ipsum Bar lorem Hello World While the current output is miles ahead of the default asserteq for finding the errors in multiline strings it would be amazing if multiline strings could actually be displayed as multiline Another extension to this would be to use raw string literals when the string contains embedded characters Current output screen shot at pm A quick sketch of what multiline and raw string literals could look like screen shot at pm Im not sure if there are cases where this would be suboptimal hopefully its possible to use a simple heuristic for detecting when to enable output like this that can be used in all cases I just copied formatchangesetrs verbatim into a repo cf to get your fancy diff output without the assertpanic part Maybe itd make sense to create at differenceformatters crate that contains well some formatters for text diffs using difference