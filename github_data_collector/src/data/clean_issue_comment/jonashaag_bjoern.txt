Closes Fix for Wanted to use bjoern in the work but could not find full official documentation of the project with clear examples anywhere Whether the project has a page with normal documentation on readthedocsorg or somewhere else Im running Bjoern embedded in Python in this way python loggerinfoBjoern bound to UNIX socket s sockname try osunlinksockname except OSError loggererrorCould not remove previous UNIX socket s sockname pass bjoernrunapiapp unixformatsockname try osunlinksockname except OSError pass By default supervisord sends SIGTERM to processes to quit them as stated in this issue Sending this signal if I wouldnt remove the pending sockets they prevent bjoern from starting next time because the old socket is assumed to be in use I saw there is code for unlinking sockets in bjoern but it is appearantly bypassed when receiving SIGTERM Is there any way to make shutdown of bjoern more safe OS Debian Python Id like to run bjoern in production but my organization requires TLS behind load balancersproxies I attempted to wrap a socket I created before calling bjoernserverrun but it looks like the wrap call is actually supposed be called after socketaccept is called Were deploying in containers so Id like to avoid the heavyweight solution of deploying a webserver like nginx just to get TLS termination on the backend It would be great if bjoernserverrun could also accept an sslSSLContext as an argument and use it to automatically wrap the socket when accepting connections This way you can pass a port and get back a randomly assigned port Right now you have to use bjoerndefaultinstance getsockname Used a construct from here to differentiate between Debug and Production builds When running pip install bjoern on Windows cl Command line error D invalid numeric argument Wextra error command C Program Files x Microsoft Visual Studio BuildTools VC Tools MSVC bin HostX x clexe failed with exit status Apparently the compile flag Wextra is meant for GCC and we are trying to use that on cl the Microsoft compiler too Having wheels on PyPi could make installation a lot faster and may also solve the library headers are required for installationproblem By the way nice work The fork example ignores child processes exit codes Whatever happens to the children the parent process will exit gracefully This does not allow to run it with supervisord or similar means which automatically restart crashed processes Additionally the fork example will allow a situation when on a multiCPU machine half of child processes crashed for some reason the other half is still alive and the server is thus underperforming not utilizing all CPU cores I personally reworked the end of the file like this python try Wait for the first worker to exit They should never exit Once first is dead kill the others and exit with error code pid xx oswait workerpidsremovepid finally for pid in workerpids oskillpid signalSIGINT exit 