Typescript test npm script testts started to fail with these errors nodemodulestypesnodeglobalsdts error TS Cannot find name ReadonlySet nodemodulestypesnodeglobalsdts error TS Cannot find name MapConstructor nodemodulestypesnodeglobalsdts error TS Promise only refers to a type but is being used as a value here nodemodulestypesnodeglobalsdts error TS Cannot find name SetConstructor nodemodulestypesnodeglobalsdts error TS Cannot find name WeakMapConstructor nodemodulestypesnodeglobalsdts error TS Cannot find name WeakSetConstructor nodemodulestypesnodeperfhooksdts error TS Cannot find name Map nodemodulestypesnodestreamdts error TS Cannot find name Iterable nodemodulestypesnodeurldts error TS Cannot find name Iterable nodemodulestypesnodeurldts error TS Cannot find name Iterable nodemodulestypesnodeurldts error TS Property iterator does not exist on type SymbolConstructor It is currently removed from travis test but needs to be fixed reenabled UPDATED What version of Ajv are you using Does the issue happen if you use the latest version Version Ajv options object loadSchema loadExternalSchema javascript function loadExternalSchema uri return jQueryajaxuri thenfunction res return res JSON Schema json allOf ref When trying to create Ajv instance loadSchema function is being called times for adaptive cards schema I cannot afford to make ajax calls for the same refferenced schema How can I avoid that Allow trailing dot Check for octet count rather than string length Trailing dots in hostnames are valid and also highly desirable in some contexts eg DNS zone files Also currently the validator is checking for string length of hostname rather than the octet count This is an edge case as few hostnames reach the limit but technically incorrect The fix is fairly straightforward and included here I have included tests for the length check but the check for a domain that is too long is failing as it appears that the validate function that is constructed for the tests bypasses the defined function hostname in libcompileformatsjs and instead simply uses native regex test function I couldnt troubleshoot this as it is all obfuscated in the generator in libdotjsvalidatejs I have left the failing test in here as it appears to be an issue with AJV testing itself rather than the implementation Thank you for submitting a pull request to Ajv Before continuing please read the guidelines If the pull request contains code please make sure there is an issue that we agreed to resolve if it is a documentation improvement there is no need for an issue Please answer the questions below What issue does this pull request resolve None sorry I didnt realise this was a requirement of submitting a pull request What changes did you make I updated the format hostname regex to allow for trailing dots in hostnames I also updated the hostname function Both in libcompileformatsjs Is there anything that requires more attention while reviewing The failing test that I mentioned The validation test it generated for me was functiondata dataPath parentData parentDataProperty rootData use strict var vErrors null var errors if typeof data number if errors if typeof data string if formatshostnametestdata validateerrors keyword format dataPath dataPath schemaPath format params format hostname message should match format hostname return false validateerrors vErrors return errors which as you can see only validates the regex using if formatshostnametestdata maybe I just put my test cases in the wrong place or maybe this is something more fundamental I would have thought it should somehow call the hostname function in libcompileformatsjs instead This PR adds the keywords option to the Ajv options to add custom keywords without having to call addKeyword What issue does this pull request resolve What changes did you make Add the keywords option to the Ajv options to add custom keywords without having to call addKeyword Is there anything that requires more attention while reviewing No Add the keywords option to the Ajv options to add custom keywords without having to call addKeyword What version of Ajv you are you using What problem do you want to solve Add keywords object directly to the Ajv constructor like formats js new Ajv keywords constant validate function schema data return true What do you think is the correct solution to problem Copy the implementation of the formats option to add keywords Will you be able to implement it yes Frequently Asked Questions Please provide all info and reduce your schema and data to the smallest possible size This template is for bug or error reports For other issues please see What version of Ajv are you using Does the issue happen if you use the latest version Ajv options object NA This issue is with tests I clone the repo I install node LTS I run npm install and git submodule update init I run npm test I get the following error logs detailssummarynpmlogs T Zdebuglogsummary info it worked if it ends with ok verbose cli verbose cli Usersbh nvmversionsnodev binnode verbose cli Usersbh nvmversionsnodev binnpm verbose cli run verbose cli testall verbose cli info using npm info using nodev verbose runscript pretestall testall posttestall info lifecycle ajv pretestall ajv info lifecycle ajv testall ajv verbose lifecycle ajv testall unsafeperm in lifecycle true verbose lifecycle ajv testall PATH all the path stuff verbose lifecycle ajv testall CWD Usersbh projectsJSON Schemaajv silly lifecycle ajv testall Args silly lifecycle c silly lifecycle npm run testts npm run testcov ifnodeversion npm run testbrowser silly lifecycle silly lifecycle ajv testall Returned code signal null info lifecycle ajv testall Failed to exec testall script verbose stack Error ajv testall npm run testts npm run testcov ifnodeversion npm run testbrowser verbose stack Exit status verbose stack at EventEmitteranonymous Usersbh nvmversionsnodev libnodemodulesnpmnodemodulesnpmlifecycleindexjs verbose stack at EventEmitteremit eventsjs verbose stack at ChildProcessanonymous Usersbh nvmversionsnodev libnodemodulesnpmnodemodulesnpmlifecyclelibspawnjs verbose stack at ChildProcessemit eventsjs verbose stack at maybeClose internalchildprocessjs verbose stack at ProcessChildProcesshandleonexit internalchildprocessjs verbose pkgid ajv verbose cwd Usersbh projectsJSON Schemaajv verbose Darwin verbose argv Usersbh nvmversionsnodev binnode Usersbh nvmversionsnodev binnpm run testall verbose node v verbose npm v error code ELIFECYCLE error errno error ajv testall npm run testts npm run testcov ifnodeversion npm run testbrowser error Exit status error Failed at the ajv testall script error This is probably not a problem with npm There is likely additional logging output above verbose exit true Usersbh npmlogs T Zdebuglog END details detailssummarynpmlogs T Zdebuglogsummary info it worked if it ends with ok verbose cli verbose cli Usersbh nvmversionsnodev binnode verbose cli Usersbh nvmversionsnodev binnpm verbose cli run verbose cli testts verbose cli info using npm info using nodev verbose runscript pretestts testts posttestts info lifecycle ajv pretestts ajv info lifecycle ajv testts ajv verbose lifecycle ajv testts unsafeperm in lifecycle true verbose lifecycle ajv testts PATH all the path stuff verbose lifecycle ajv testts CWD Usersbh projectsJSON Schemaajv silly lifecycle ajv testts Args silly lifecycle c silly lifecycle tsc target ES noImplicitAny noEmit spectypescriptindexts silly lifecycle silly lifecycle ajv testts Returned code signal null info lifecycle ajv testts Failed to exec testts script verbose stack Error ajv testts tsc target ES noImplicitAny noEmit spectypescriptindexts verbose stack Exit status verbose stack at EventEmitteranonymous Usersbh nvmversionsnodev libnodemodulesnpmnodemodulesnpmlifecycleindexjs verbose stack at EventEmitteremit eventsjs verbose stack at ChildProcessanonymous Usersbh nvmversionsnodev libnodemodulesnpmnodemodulesnpmlifecyclelibspawnjs verbose stack at ChildProcessemit eventsjs verbose stack at maybeClose internalchildprocessjs verbose stack at ProcessChildProcesshandleonexit internalchildprocessjs verbose pkgid ajv verbose cwd Usersbh projectsJSON Schemaajv verbose Darwin verbose argv Usersbh nvmversionsnodev binnode Usersbh nvmversionsnodev binnpm run testts verbose node v verbose npm v error code ELIFECYCLE error errno error ajv testts tsc target ES noImplicitAny noEmit spectypescriptindexts error Exit status error Failed at the ajv testts script error This is probably not a problem with npm There is likely additional logging output above verbose exit true details I cursuary google suggested it could be a typescript issue I tried to rerun the tests having installed typescript No joy Please come find me on slack to discuss Otherwise Ill likely find a reply weeks later Frequently Asked Questions Please provide all info and reduce your schema and data to the smallest possible size This template is for change proposals For other issues please see What problem do you want to solve What do you think is the correct solution to problem Option changing type validation Check if these values are coercible to strings with this option coercion should fail too Will you be able to implement it Maybe ajv v In Typescript it is impossible to use comment option because it is not defined in ajvdts const ajv new Ajv comment someFunction Typescript compiler error Argument of type comment value any path any schema any void is not assignable to parameter of type Options Object literal may only specify known properties and comment does not exist in type Options Frequently Asked Questions Please provide all info and reduce your schema and data to the smallest possible size This template is for change proposals For other issues please see What problem do you want to solve Optimise oneOf validation in case discriminator keyword is present by only validating the matching branch currently all branches are validated Apply defaults inside of oneOf in the presence of discriminator keyword currently defaults inside oneOf are ignored The second can be addressed separately The solution requirements requires an option discriminator to enable discriminator keyword discriminator without oneOf should throw exception at schema compilation in strictKeywords mode log warning and be ignored otherwise validate that each oneOf branch can only be valid for one discriminator value TBC possibly depending on strictKeywords or another option ie that from validation result point of view discriminator remains noop apply defaults from the chosen oneOf branch tests that the current behaviour is not affected ie all oneOf branches are validated in case discrimintator keyword is absent or present without an optionwith option false and that the defaults in oneOf are ignored all the new behaviours Will you be able to implement it Yes with the right incentive PR is welcome This is more of a question than a proposal What problem do you want to solve I want to validate objects containing a bigint What do you think is the correct solution to problem Bigint instance could pass the validation against integer type This may sound weird as regular integer would also pass this validation and in this way the type isnt really validated But the JSON specifications do not impose a limit on the range of integers The other solution would be to extend the types to include BigInt Thanks for your answer 