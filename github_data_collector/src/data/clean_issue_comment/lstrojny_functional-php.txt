Bet this would be helpful when you have just an array of booleans The minimum and maximum functions can return null if the collection is empty This commit adds to their return annotation that a null return is a possibility Im not sure if this relates to but psalm does report handling the possibility of a null return with DocblockTypeContradiction For example maximum will produce a DocblockTypeContradiction A batch of Psalmrelated improvements Add psalm annotations Fix all issues found by psalm x Increase type specificity x Add psalmpure x Add psalmassert Add proper support for more complex cases like compose Type specificity x Average x ButLast x Capture x CompareObjectHashOn x CompareOn x Compose x Concat x ConstFunction x Contains x Converge Curry CurryN x Difference x DropFirst x DropLast x Each x Equal x ErrorToException x Every x ExceptionsInvalidArgumentException x ExceptionsMatchException x False x Falsy x Filter x First x FirstIndexOf x FlatMap x Flatten x Flip x Functional x GreaterThan x GreaterThanOrEqual x Group x Head x Id x Identical x IfElse x IndexesOf x Intersperse x Invoke x InvokeFirst x InvokeIf x InvokeLast x Invoker x Last x LastIndexOf x LessThan x LessThanOrEqual x LexicographicCompare x Map x Match x Maximum x Memoize x Minimum x None x Noop x Not x OmitKeys x PartialAny x PartialLeft x PartialMethod x PartialRight x Partition x Pick x Pluck x Poll x Product x Ratio x ReduceLeft x ReduceRight x Reindex x Reject x Repeat x Retry x Select x SelectKeys x SequenceConstant x SequenceExponential x SequenceLinear x SequencesExponentialSequence x SequencesLinearSequence x Some x Sort x Sum x SuppressError x Tail x TailRecursion x TakeLeft x TakeRight x Tap x True x Truthy x Unique With Zip ZipAll Issues invoker invoke partialmethod no way to annotate method names properly Recursive types are not implemented problem for compose curry etc In order to support pipe function Im contributing my proposal to get this long before reaching This is a proposal to implement createassoc function as is commented in let me know if there is anything I can do to adjust it to this project standards chunkevery By passing a size step and whether to discardIncompleteChunk you have full control over the chunks created php chunkevery chunkevery true Inspired by Elixir Im happy to introduce the amazing set of functions path pathor prop propor props Example php php use function Functional map use function Functional pathor use function Functional prop use function Functional propor use function Functional props use function Functional each include vendorautoloadphp users firstname John lastname Doe birth languages js php os Ubuntu firstname Valerich birth object firstname John lastname Appleseed birth languages swift os macOS firstname Taylor lastname Otwell birth languages php currentYear int dateY developers map users function item use currentYear return fullname implode props firstname lastname item phpexperience pathor languages php item os proporFedora os item age currentYear propbirth item each developers function developer printf s d yo enjoys PHP for d years n props fullname age phpexperience developer Result John Doe yo enjoys PHP for years Valerich yo enjoys PHP for years John Appleseed yo enjoys PHP for years Taylor Otwell yo enjoys PHP for years Problem Given an array of items return a map from keys to values where the key is specified by a callback and the value is the item from the array Dev notes Ideally we can use a composition of group and map however error messages from InvalidArgumentExceptionassertValidArrayKey will leak out internal implementation details and will not provide an accurate message strikeThis is a feature request Something like this php createmap cat bear aardvark functionelement index collection return strlenelement returns cat bear aardvark Im not sure what that function would be called I admit that it should have a better name than createmap strike Couldnt properly explain what I want in the original post see a comment below 