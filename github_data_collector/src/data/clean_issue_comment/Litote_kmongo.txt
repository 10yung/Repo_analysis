I am interacting my kotlin program with a collection that has an id field of type UUIDsubtype instead of type LUUIDsubtype which is represented as javautilUUID in the Kotlin program The problem is that when I retrieve the object back from the db I get a orgbsontypesBinary Object It makes sense but I want it to be a javautilUUID object in the program Is it possible to overwrite the existing object mapper to support such transformation I have these two helper functions to transform fromto UUID and Binary object fun toStandardBinaryUUIDuuid UUID Binary fun fromStandardBinaryUUIDbinary Binary UUID Thanks Hi Ive created a User model with a list of accounts ListAccount Account is a sealed class with subclasses InternalAccount and GoogleAccount The classes are marked with annotation BsonDiscriminator InternalAccount and GoogleAccount have specific values for BsonDiscriminator I start the application save a user with different accounts and close the application When I restart the application and do a find on the user collection the application crashes The Mongo Java driver cant determine how to cast the list of accounts because after restarting the application it has never seen InternalAccount or GoogleAccount classes and so it has not registered them in the KMongoPojoCodecProvider which uses automatictrue If I create a KMongoClient and do the following just after mongoClientmongoClientOptionscodecRegistrygetInternalAccountclassjava mongoClientmongoClientOptionscodecRegistrygetGoogleAccountclassjava Then the application works because now both classes are registered with the codec provider The best would probably to have a BsonSubTypes annotation on Account sealed class with an array of classes as parameter and use reflection to register the classes with the codec provider when Account class is registered Let me know what you think about it I could work on this and create a pull request Best JB This might be completely out of left field but is there any way to use KMongo to connect to MongoDB via stitch API There is a JavaScript stitch API and a Java API for Android but nothing for pure Kotlin or Java desktop apps The reason behind wanting this is that stitch allows rules for which data to serve in a collection based on specific user data like a ownerid for example It might be possible with a Kotlin wrapped over the stitch JavaScript API but I thought I might ask if its in the plan for KMongo first I am getting comfasterxmljacksondatabindJsonMappingException Cannot deserialize Class MainKtmainPointTest of type localanonymous as a Bean when using a Mongo Point class with the Jackson client Here is some code to reproduce the error import comfasterxmljacksondatabindJsonMappingException import commongodbclientmodelgeojsonPoint import commongodbclientmodelgeojsonPosition import orglitotekmongoKMongo import orglitotekmongogetCollection fun main data class PointTestval location Point val client KMongocreateClient get commongodbMongoClient new instance val database clientgetDatabasetest normal java driver usage val col databasegetCollectionPointTest KMongo extension method colinsertOnePointTestPointPosition try colfindtoList catch e JsonMappingException eprintStackTrace Its really great that youve extracted KmongoId so that it could be used in common modules I tried to adapt it for Kotlin multiplatform but it cant be done because multiplatform is only supported on Gradle Please consider migrating to gradle and adding support for multiplatform I was wondering if there are any plans to add Gson as an object mapper The Jackson option is great but its kind of annoying to integrate KMongo with a codebase that already heavily relies on Gson duplication of effort for serialization two serde libs et cetera