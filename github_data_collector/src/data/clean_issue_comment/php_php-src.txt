Hello This is a continuation of with some enhancements phpopterror returns instead of to distinguish between requested help and errors set showerror argument to true so cli and cgi print error to sdterr This PR is the second part of Currently type errors can be of many forms see for example code Internal functions with standard ZPP s expects parameter to be int array given Internal functions with custom ZPP When only one parameter is given it must be an array Array expected as options when using translate or scale Expects string null long or boolelan value for PostgreSQL s s Userland functions Argument passed to foo must be of the type string array given I think it would make sense to settle on a single format in the worst case on a minimum number of similar formats In the sense of this my patch changes the error message structure of internal functions with custom ZPP to the one used by userland functions but I am open to any discussion about what kind of format to use However I think we could and should go further in which case these questions arise Should we formulate type error messages of internal and userland functions the same way If so which format to use Would this change need an RFC I guess so Remove leftover references to withopenssldir which is not used as the openssl path is now determined by pkgconfig Also remove the check of PHPOPENSSL inside SETUPOPENSSL Its the responsibility of the caller to determine whether they want to enable openssl or not This should also make IMAP with SSL work which uses a different option Basing myself from the results of which indicate that the I capital i length modifier is unused moreover its not a C length modifier While basic support for MSVCRT debugging has been added long ago the leak checking is not usable for the test suite due to frequently occuring false positives One issue is that in case of unclean shutdown loads of bogus leaks are reported Another issue is that we are no longer calling xmlCleanupParser on RSHUTDOWN of extlibxml and therefore a few bogus leaks are reported whenever extlibxml is unloaded Yet another issue are bogus leaks related to zendhandlerstable which is lazily allocated in persistent memory and as such never needs to be freed We therefore only dump memory leaks on clean shutdown and also ignore memory leaks for the mentioned cases We introduce ZENDIGNORELEAKSBEGIN and ZENDIGNORELEAKSEND to keep those ignores better readable and also because these might be useful for other leak checkers as well I suppose we maybe could also get rid of our custom format conversion implementation formatconverter in snprintfc which would give us support for a and A modifier by relying on the system one This PR introduces a new Stringable interface that ppl can declare when implementing toString This goal is to allow using the stringStringable union type in PHP to accept both strings and objects that implement toString and declare this interface This is critically missing currently on codes that deal with stringable objects they cant be made typesafe On purpose there is no corresponding isstringable function because that would require defining what happens when eg an int is passed to this function and there are no simple answers to this concern On purpose also for BC classes that implement toString arent required to declare the interface Such classes wouldnt pass the above union type but thats expected as thats the semantics of the language By being simple and without any magic capabilities on its own this interface is trivially polyfilled on PHP Once a polyfill becomes widely available I would personally add one to symfonypolyfillphp immediately after this PR is accepted I expect code style checkers to be able to enforce declaring the interface when toString is used For projects that dont use cs checkers thats fine theyll notice quickly that they missed adding the interface because their users will ask for it when theyll want to pass the stringStringable union type Here is the stub declaration of the interface php interface Stringable public function toString string Because it adds the string return type this interface has the potential to force a BC break on any existing libraries that want to adopt it In order to ease forward and backward compatibility the PR also adds the return type to existing toString methods when its not explicit declared already Returning a string is already enforced by the engine so this doesnt change any semantics This way code moving to PHP wont be forced to add the return type explicitly which would break BC on their side and code in PHP can adopt a polyfill interface immediately one that doesnt declare the return type for the same BC reasons Providing an easy forwardpath is the second goal of this PR For reference here are some annotations in Symfony added by contributions from realworld use cases and that currently cannot be expressed precisely enough using any union types in PHP I dont know how controversial this change is and if it would need an RFC but I see this as a reasonable change as DES is insecure and has been for a long time Ive also added some sanity tests for the other algorithms MD SHA and SHA and move the relevant tests from the string folder to the crypt folder Just seeing which tests need fixing with CI help Edit apparently none There are a bunch of expected array warnings a better way is too probably ask for a HashTable param instead of a zval