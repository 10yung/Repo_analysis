We encountered an issue recently where a proto definition mismatch breaking change resulted in the gRPC server failing to decode the request payload This happens before any method handler can be invoked which also means that the middleware cannot be invoked As a result the server produced no metrics traces or logs for the failure making diagnosing the issue more difficult as the requests didnt appear to be making it out of the client based on what information we could observe without those things In reality the server was returning a codesInternal error without any of the middleware being able to observe that OpenCensus implement their observability handling via a StatsHandler instead which does get invoked even in cases where the server is unable to decode the request and other issues While it probably doesnt make sense for all server side interception capabilities to be implemented this way eg auth rate limiting validation for observability metrics tracing logging this needs to be able to record these failures as well Given this library is gogrpcmiddlewares that may not be deemed in scope of the library but Im looking for confirmation about whether this would be the case or not Based on that whether I need to look at alternative implementations which do use StatsHandler or roll my own or if contribution of StatsHandler approaches for these would be accepted and how that support should be integrated Id like to use reflection googlegolangorggrpcreflection with gRPC auth of the middlewares As the reflection service is defined in the library its not possible to override the auth function Could you help me the best way to utilize both I wanted to exclude grpcreflectionv alphaServerReflectionServerReflectionInfo from my authentication logic but it was not possible because the auth func doesnt take method name While trying to build package for debian I get following error Instead of holding implementations for each logging tracing metrics providers establish interfaces Be clear about it in docs Store implementations in nested go modules Separate project To agree Hello When we added the grpcretryStreamClientInterceptor and grpcretryUnaryClientInterceptor grpcDialOption to a grpcDialContext we saw our service throw error like code Unauthenticated desc request missing Authorize credentials suggesting that header information was being stripped by the middleware I recently switched to go modules and go and have run into problems with grpczap all of a sudden I run go mod init followed by go get u or go build same result either way and I get the error undefined grpczapReplaceGrpcLoggerV Im new to go modules so it might just be user error but I cant for the life of me figure out what Im doing wrong here or if its an issue with gogrpcmiddleware itself Edit Im thinking it might be related to this It appears to be working if I specify go get u githubcomgrpcecosystemgogrpcmiddlewaremaster so this is probably just inexperience on my part Sorry Inspired from adrienf PR I want to add Zerolog logging into that project For benchmarks you can visit logbench site As seen Zerolog is much faster than Logrus and Zap Greetings I come from the Thanos project where we mostly use the gokit logging library and we wanted some sweet gRPC logging for our users Im not a Go expert so I mostly copypasted the tests from the Zap implementation and wrote the gokit logging system The tests suite is green and it works pretty swell with Thanos leveldebug ts T Z callerclientinterceptorsgo systemgrpc spankindclient grpcservicethanosStore grpcmethodInfo msgfinished client unary call errornull grpccodeOK grpctimems leveldebug ts T Z callerstoresetgo componentstoreset msgupdating healthy stores externalLabelOccurrencesInStoresmap string int levelinfo ts T Z callerstoresetgo componentstoreset msgadding new store to query storeset address levelinfo ts T Z callerpayloadinterceptorsgo systemgrpc spankindclient grpcservicethanosStore grpcmethodInfo grpcrequestcontent levelinfo ts T Z callerpayloadinterceptorsgo systemgrpc spankindclient grpcservicethanosStore grpcmethodInfo grpcresponsecontent maxTime storeType SIDECAR leveldebug ts T Z callerclientinterceptorsgo systemgrpc spankindclient grpcservicethanosStore grpcmethodInfo msgfinished client unary call errornull grpccodeOK grpctimems Let me know if you have any feedback The client adds some info such as to request id into request context how can I extract the value and log it Is there a full example In some caseservice working in masterslave modeclient request must processed by the master In order to realize this client side interceptors or server side interceptors may needed client side interceptors must send the request directly to the master serverserver side interceptors must redirect the client request to the master server Is this a ubiquitous scene Do we intended to provide 