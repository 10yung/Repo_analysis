Get latest from each repo remove duplicates no longer need to sort after that For now put first repos first in versionsproperties In the future get the timestamp of the latest candidates from the repo to sort by release date By default itd only upgrade keeping the existing stability level We still need to figure out how to handle concurrent dev and alpha versions like used in Splitties where the plugin cant currently detect the updates A solution might be to request a dedicated API in Gradle assuming that it can give fast results Another one would be to do it ourselves fetching and caching perartifact timestamp and use that when multiple repositories return different versions like for Splitties Kotlin others and all libraries distributing snapshots I removed the gradleversionsplugins and a bunch of obsolete stuff so that we can start integrating the experimental I mean the new updater with the rest of the plugin Right now if you run refreshVersions without an internet connection itll succeed and remove all the available versions comments which makes you think theres a bug Provided dependencies constants Add remaining SquareCashApp dependencies Moshi SqlDelight LeakCanary other artifacts x Add Android object inside Google object for Material and other comgoogleandroid libraries Add remaining Google dependencies AR Core Play Services Play Core Firebase WearOS Add Coil Add Beepiz dependencies BleGattCoroutines Add more Jake Wharton dependencies like kotlinxserialization Retrofit converter Add missing kotlinx dependencies serialization immutable collections etc Plugin features x Move it from Splitties to this project Explore and decide how to handle BoM versions maybe another version placeholder flagging BoM allowance might do Explore autoadding dependency from Gradle settings via gradle instance or buildSrc for the easiest configuration possible Test improvements Check all constants are correctly formatted maven coordinates with a supported version placeholder only for now Add a test to verify all constantss artifacts can be found in mavenCentral google jcenter or gradlePluginPortal jitpackio is not supported because of builds reproducibility concerns write it somewhere for future contributors Example in SDK Search x Serialize the repositories from buildSrc and Settings to use them to get versions x Automatically use the most stable version if a placeholder isnt resolved x Update or remove the Gradle extension so theres no longer ignored configuration x Add empty line after each version property x Make mavenmetadataxml files download parallel coroutines DispatchersIO x Make parsing of the files parallel coroutines DispatchersDefault Show userfriendly error messages when unable to find available versions of an artifact from the given repositories Detect and warn about authentication protected repos linking to an issue for supporting it Detect usage of RepositoryContentDescriptor and warn it is ignored for now linking to an issue for supporting it Support update of the plugin itself Support advertising Gradle update link to migration guide and write the commands to update the wrapper API here Distinguish between and to compare versions using a recursive window moving to the end This should help with random words and versions combinations like releases of kotlinxcoroutines for Kotlin Support cancellation for inflight network requests if possible Ease adding dependencies Report hardcoded dynamic versions Keep user comments added above a property and dont remove these properties only add an unused comment We want to configure plugins versions using the versionsproperties file properties versionsproperties plugincomgithubbenmanesversions plugindefayardbuildSrcVersions pluginorgjetbrainskotlinjvm plugincomgradlebuildscan It would be super nice if Gradle supported a convention like this out of the box In the meantime what can we do Having a PluginSettings seems the way to go in the future settingsgradlekts With Gradle plugins iddefayardrefreshVersionspluginsversion Before Gradle buildscript dependencies iddefayardrefreshVersionspluginsversion applyplugin defayardrefreshVersionsplugins But there might be a chicken and egg problem Gradle execute the Settings file in this order pluginManagement buildscript plugins the script body A possible solution gradlerootProject buildscript dependencies classpathdefayardrefreshVersionstpVersion To help users migrate to versions defined in versionsproperties from hardcoded versions in gradle scripts or buildSrc we should by default report separately these and hardcoded version ranges allowing to disable these two reports separately These reports would simply appear in versionsproperties as comments with commented version properties to use in the case of hardcoded versions The report header would include instructions to replace hardcoded versions with the version placeholder In the case of version ranges there would be a warning as to why its dangerous to use version ranges and instructions too Further improvement could automatically find fully hardcoded versions in buildgradlekts files and replace them with the version placeholder and suggest using Replace in Path IDE feature kbdcmdkbdkbdctrlkbd kbdshiftkbd kbdFkbd with file and string literal filter otherwise A possibility is also to search and replace automatically in buildSrc files named like dependencies libs libraries or versions and and offer to replace it all by version placeholders and versionsproperties values