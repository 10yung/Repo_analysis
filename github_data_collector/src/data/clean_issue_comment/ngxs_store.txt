 PR Checklist Please check if your PR fulfills the following requirements X The commit message follows our guidelines X Tests for the changes have been added for bug fixes features X Docs have been added updated for bug fixes features PR Type What kind of change does this PR introduce Please check the one that applies to this PR using x Bugfix X Feature Code style update formatting local variables Refactoring no functional changes no api changes Build related changes CI related changes Documentation content changes Other Please describe What is the current behavior Please describe the current behavior that you are modifying or link to a relevant issue There is no perstate serialization Issue Number NA What is the new behavior Perstate serialization offers full control on how states are serializedeserialize Does this PR introduce a breaking change Yes X No If this PR contains a breaking change please describe the impact and migration path for existing applications below Other information This PR is different from the first one as it leverages the serializedeserialize functions from the plugin options Relevant Package Can you pinpoint one or more ngxs packages the are relevant for this feature request edit This feature request is for ngxsstore Description I have a service which has Store injected like this export interface FooStateModel fooData key number any StateFooStateModel name fooState export class FooState export class FooSelector static getFooByIdid number return createSelector FooState state FooStateModel return statefooData id Injectable export class FooService constructorprivate store Store getFooid number return thisstoreselectFooSelectorgetFooByIdid Describe the problem you are trying to solve Get rid of injected Store and use Select only to get an observable of data from state using dynamic selector Describe the solution youd like Injectable export class FooService Select getFooid number return FooSelectorgetFooByIdid Describe alternatives youve considered NA PLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION ISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION Im submitting a Check one of the following options with x precode Regression a behavior that used to work and stopped working in a new release Bug report Please search GitHub for a similar issue or PR before submitting Performance issue x Feature request Documentation issue or request Support request Other Please describe codepre What is the motivation use case for changing the behavior Describe the motivation or the concrete use case Currently the only ActionOption is cancelUncompleted It would be convenient to have the opposite behavior ie cancelling the new action when the previous is not completed CancelUncompleted works like mergeMap This feature is the equivalent to exhaustMap Current behavior Describe how the issue manifests precode ActionLogin cancelUncompleted true loginctx StateContextAuthStateModel auth Login return thisuserServerServiceloginauthpipe multiple logins on server taptoken ctxsetState username authname token codepre Expected behavior Describe what the desired behavior would be precode ActionLogin cancelNewWhenUncompleted true loginctx StateContextAuthStateModel auth Login return thisuserServerServiceloginauthpipe taptoken ctxsetState username authname token codepre Description Affected Package Can you pinpoint one or more ngxs packages as the source of the bug edit The issue is caused by package ngxsstorageplugin Is this a regression Did this behavior use to work in the previous version Idk Description Production build of angular fails with a storage migration Minimal Reproduction Please create and share minimal reproduction Exception or Error precodeERROR in srcappstorestoremodulets Error during template compile of Function expressions are not supported in decorators Consider changing the function expression into an exported function codepre Environment precode Libs angularcore version ngxsstore version Check whether this is still an issue in the most recent Angular version Browser Chrome desktop version XX Chrome Android version XX Chrome iOS version XX Firefox version XX Safari desktop version XX Safari iOS version XX IE version XX Edge version XX For Tooling issues Node version v run node version Platform Mac Mac Linux Windows Others Anything else relevant Operating system version IDE package manager HTTP server codepre PR Checklist Please check if your PR fulfills the following requirements X The commit message follows our guidelines X Tests for the changes have been added for bug fixes features X Docs have been added updated for bug fixes features PR Type What kind of change does this PR introduce Please check the one that applies to this PR using x Bugfix X Feature Code style update formatting local variables Refactoring no functional changes no api changes Build related changes CI related changes Documentation content changes Other Please describe What is the current behavior There is no perstate serialization Issue Number NA What is the new behavior Perstate serialization offers full control on how states are serializedeserialize Does this PR introduce a breaking change Yes X No If this PR contains a breaking change please describe the impact and migration path for existing applications below Other information Affected Package The issue is caused by package ngxsstore Description If you have a lazy selector and call it with different params Every time you change the param the memorized value of the previous call is removed Thats a huge performance impact if you have a preselector that does some complex stuff Here is an example I have a selector getSpecialAnimalComplex that uses another select getSpecialAnimalFn to fetch the requested animal So the getSpecialAnimalFn is a memorized selector And everything works fine until you call that memorized function with different parameters In the above example I call it first with dog then again with dog then with cat and finally again with dog The result is that the memorized value of the first dog is working for the second call But after I query the selector with cat the value for dog is gone and the selector needs recalculating that value In my realworld application this is a big performance gap Can we change that to a behavior that doesnt memorize just the latest value Relevant Package This feature request is for ngxsstore Description It should be able to prepopulate the global state of all state classes with object This should be possible either synchronous or asynchronous eg I would like to read the data via a http request or in case of an electron app from the local file system Describe alternatives youve considered As a workaround I use my own implementation of AsyncStorageEngine ngxslabsasyncstorageplugin I only implemented the getItem Method But it feels not right eg on every state change the storage engine methods are called Also I have to patch the serialize Method because certain state data contains objects which are not serializeable Description Im on and it seems that things are still initialized before APPINITIALIZER Not sure if Im missing something or if I dont completely understand what this issues resolution should be This is my use case I need to initialize Ngxs through a library module that either is imported or not in the apps monorepo structure And I couldn t find a way to initialize it properly the apps that import it should pass further if production is true or not since a library shouldnt care about the apps environment directly But it seems that the initialization still takes place before APPINITIALIZER resolves This is my stackblitz The console will show prev state next state APPINITIALIZER APPINITIALIZER Resolved NGXS Logger shouldnt log anymore but it does payload prev state next state Angular is running in the development mode Call enableProdMode to enable the production mode but it should have production true I pass that hardcoded since I dont have environments in the stackblitz and developmentMode should be false Also the logger shouldn t log PS Because of hmr you need to reload the rightside browser window every time you make a change at first I was tempted to think that the problem was resolved because of HMR I wouldnt get the console logs all the time but pressing reload shows every time that ngxs initializes before APPINITIALIZER resolves Describe the solution youd like ts class DashboardComponent constructorprivate loggerPlugin NgxsLoggerPlugin public ngOnInit thisloggerPluginoptions disable true Relevant Package Can you pinpoint one or more ngxs packages the are relevant for this feature request edit This feature request is for ngxsstorageplugin Description The plugin currently uses a global deserializer which calls JSONparse and returns a generic JavaScript object When the state model is a class instead of being an interface or a type the current implementation does not provide a way to convert the generic object into an concrete instance Describe the solution youd like A new options value serialization should provide the ability to define a collection of keydeserializer so we can inject our own implementation NgxsStoragePluginModuleforRoot serialization key zoo onAfterDeserializer state return concrete instance of the model 