We can work without the workaround with recursive types VNodeChildren To prevent a major release we should mark VNodeChildren as deprecated and do a minor relase instead Right now when I want to append a Class based Maquette component I have to do this let dateInput new DateInput projectorinitializedateInputrenderMaquettebinddateInput It would be nice if projectorinitialize would be able to do the binding for me so I would only have to pass in a Class projectorinitializenew DateInput This would also require a change in MaquetteQuery on the initialize method Hey dear friends Do you know about this I think it would be a nice addition if your eventhandling would accept objects like in vanilla js js var app state title Example handleEvent functionevt render function return hbutton onclick this No bind is required when you use vanilla htmlButtonaddEventListenerclick app Thanks for your feedback in advance You can write your whole application without doing anything with the render cycle This is part of our philosophy of keeping things pure and simple But you do need the render cycle if You integrate componentswidgets that are not written using maquette Do advanced animations Interact with the DOM API Measure nodes Every time a new screen is rendered the following phases take place Render render functions are called Diff and patch The real DOM is updated Measure The phase for callbacks that need to take measurement of the layouted DOM getBoundingClientRect WrapUp Phase in which the DOM may be modified again It is important to have a separate measure and wrapUp phase because if multiple components were to measure and change the DOM in the same phase unneeded reflows take place which would hurt performance Every time a render takes place a new RenderRun object is created All callbacks that are called during a render get a reference to the RenderRun object as a parameter The RenderRun has the following interface ts Interface RenderRun duringMeasurecallback void void duringWrapUpcallback void void The RenderRun can then be used as follows ts hdiv enterAnimation growToAutoHeight let growToAutoHeight element Element run RenderRun let autoHeight runduringMeasure autoHeight elementgetBoundingClientRectheight runduringWrapUp elementstyleheight px let grow elementanimate height px height autoHeightpx growonfinish elementstyleheight The following phases execute when a render takes place render functions are executed Diffing and patching of the real DOM For each DOM node that is processed the following happens afterFirstRender callback is called if the DOM node is new afterRender callback is called enterAnimation is called if the DOM node is new and its parent already existed updateAnimation is called if DOM node is updated The DOM node is attached to the parent DOM node if DOM node is new exitAnimation from previous render is called if DOM node is removed and its parent remains Callbacks on RenderRunduringMeasure are executed duringMeasure callbacks may be used to measure the DOM getBoundingClientRect but may not change the DOM Callbacks on RenderRunduringWrapUp are executed duringWrapUp callbacks may change the DOM but should not measure the DOM When all code uses the RenderRun object appropriately all updates to the UI should never cause more than reflows Migration path from afterCreate and afterUpdate AfterCreate can be replaced with afterFirstRender Note that during afterFirstRender the DOM Node is not attached to its parent If the afterCreate code needed this afterFirstRender can register code to run during measure or wrapUp AfterUpdate can be replaced with afterRender Note that afterRender also runs when the DOM node is first created and at that time it will not have a parent Node This is one of our ideas for maquette See We received feedback from students working with maquette for the first time that code examples would be very valuable There is useful example code in Context We have been prototype using Maquette with dgrid considering using it for the next major version We have found a few things that we see as challenges for us in adopting it kfranqueiro maier and edhager have been working on the prototyping Problem Description In certain cases the application is aware that certain DOM Events of which it has listeners for do not equate to any mutations of the DOM but currently Maquette will always schedule a render on any listener provided via the VDOM Also we are unsure if the intent of Maquette to potentially manage these events While the code documents the projector option of eventHandlerInterceptor the actual code will always overwrites this option with one that always schedules a render We suspect this is a defect pdfernhout brought this up in but we have had some further experience with this Impact We noticed in our prototypes a significant amount of jank when the list was scrolled Part of that jank we us actually some coding issues in our implementation and we were able to get the performance to improve to a great degree but we highly suspect that in certain situations under certain environments a schedule render for every scroll event would make the performance unacceptable Discussion We suspect the eventHandlerInterceptor is potentially a defect On the wider topic though which was discussed in The application knows that only an aggregate scroll movement of X actual would cause the DOM to need to be updated and that often takes x the DOM events to equal something the application actually cares about so for of those events we have recalculated the whole of the VDOM which results in a noop for actual DOM mutations The feeling I get from the discussion in was lets discuss real problems versus potential ones which to me makes a lot of sense I think we have come up with a use case though that can cause real problems Implementing a custom eventHandlerInterceptor could resolve this issue or as suggested in the other ticket a custom Projector In both those cases though it would mean we would have to become the experts at VDOM versus and something we are reticent to do We hope given a compelling use case we can find a way to improve Maquette to be able to manage DOM events bubbled up to the application more efficiently IE has a native classList implementation for HTMLElements but not for SVGElements The polyfills should detect and correct this We do not want to inadvertently cause the performance to drop when making modifications to maquette Therefore we need a representative benchmark that we can run to see the performance impact of each change 