The code in optionspy is as follow here ospathdirnameospathdirnamesysargv searchpaths ospathjoinhere etc supervisordconf ospathjoinhere supervisordconf supervisordconf etcsupervisordconf etcsupervisordconf etcsupervisorsupervisordconf Im not sure how events are working in Supervisor but here are my thoughts even if there is the trigger of that event here it is not dispatched since events are buffered and there is no call to ProcessGrouptransition as done here I want two feature support First is simple regex support about the name like supervisorctl stop server Second is I want stop all will do stop works in order by stopped like prog prog priority is stop all will do work like stop prog makesure prog is stopped stop prog makesure prog is stopped restart all will do the same thing like above stopped and then start all If supervisor is already support above feature please point me that thanks Hi all Im very surprised after many search to have the feeling supervisor have no way to manage supplementary groups in config file When i configure user the user is correctly used for my process primary gid too but not all supplementary groups My solution is to add runuser before the command and delete the user config But its a bit sad to have to do this imho Have i missed something thx anyway for this wonderfull project I want supervisor to try restarting my services a few times before giving up From the documentation it seems the right configuration for that is this autorestart true startretries But when I run supervisor with this configuration and the commands fails and exists with exitcode supervisor always tries to restart it never giving up ps keeps showing the process as running but always with a different PID Same goes for supervisorctl i it always shows the process as running but always with different pid and zero uptime usrapp supervisorctl i projectionsmain RUNNING pid uptime Am I doing something wrong or is this a bug supervisord v Configuration unixhttpserver file runsupervisordsock supervisorctl serverurl unixrunsupervisordsock supervisord logfile devstdout logfilemaxbytes loglevel info nodaemon true user root rpcinterfacesupervisor supervisorrpcinterfacefactory supervisorrpcinterfacemakemainrpcinterface programprojectionsmain command binconsole appsubscriptionconnect vvv autorestart true startsecs startretries stdoutlogfile devstdout stdoutlogfilemaxbytes stderrlogfile devstderr stderrlogfilemaxbytes my exceptions i am open inethttpserver for web interface but i recieve an exception like this ERRO Server Error type exceptionsUnicodeDecodeError ascii codec cant decode byte x in position ordinal not in range file usrlibpython sitepackagessupervisorhttppy line my enviment We have a case when the executed command want to known total number of processes in order to partition processed data so we intended to run it like supervisor programpartitionedprocessor processnameprogramnamesprocessnum d commandusrlocalbinphp data process threadsnumprocsd threadprocessnumd autostarttrue autorestarttrue userwwwdata numprocs stdoutlogfiledevfd stdoutlogfilemaxbytes stderrlogfiledevfd stderrlogfilemaxbytes And we want to use numprocs from config directly rather configuring both of them with env variable i think it would be better to configure numprocs with env and the command will use numproces and processnum to be consistent currently we get Error Format string usrlocalbinphp data process threadsnumprocsd threadprocessnumd for programpartitionedprocessor contains names numprocs which cannot be expanded Available name s Presently each services section needs to include its own stdoutlogfilemaxbytes and stdoutlogfilebackups for log rotation But it cannot split log by time automatically I think its necessary because we can simply get the days log when error happens Some programs output help on and a user recently emailed expecting supervisorctl to do this We currently print help only on h It would be harmless to add as a second alias for help so we should probably just add it It would be useful to allow group entries to be defined around groups as well as programs This would allow for easier management and control of processes groupmybiggroup groupssubgroup subgroup groupsubgroup programsprogramaprogramb groupsubgroup programsprogramcprogramd groupanothergroup programsprogramz Currently turning off all groups would require explicitly stopping the subgroups and with a series of supervisorctl stop subgroup supervisorctl stop subgroup sudo service supervisorctl stop here wouldnt work because we might want to leave anothergroup running With the above configuration this could be resolved with supervisorctl stop mybiggroup There might be situations where there are not but several groups of programs and to manage all a lot of commands would be required which increases the chance for human error and the cost to maintain scripts 