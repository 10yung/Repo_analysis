Ive been trying to work on a solution where a collection of repos all conform to the same PHPCS config without having to make sure that they each update their phpcsxml individually whenever there is a change It would be grand if I could run phpcs configurl In my CI Would also be useful for people wanting to do two runs on the one repo for example phpcs configpath phpcsphp compatxml phpcs configpath phpcsphp compatxml Would mean you could have two or more complex config files in the one location without trying to pass them all in as CLI args Example php if PHPEOL a if DateTimeATOM a Both imo should be considered as yoda conditions and sniff DisallowYodaConditionsSniff should catch them I dont wantneed the PHPCBF hint and x in reports Is there a way to disable this Currently I have two options to solve this Removing all PHPCBF parts with RegEx from the report Disable one line in one file of PHPCS Both works but a regular option like a new CLI parameter would be the much better way Code php php arraymap static fn array value array arrayfiltervalue The TFN token is missing parenthesisopener and parenthesiscloser As discussed in issue this changes the sniff to ignore while constructs without body This partially undoes the unit tests added for issue but there are still some remaining covering that issue Fixes The following code if true a a return no error This because ignoreTokens contains TCLOSECURLYBRACKET It seems to be to avoid having duplicate error message with objvar foobar But TCLOSECURLYBRACKET should not be ignored when its the end of a function a control structure or a class In the FunctionCallSignatureSniff there is the following code if requiredSpacesAfterOpen tokens openBracket code TWHITESPACE error Space after opening parenthesis of function call prohibited else if requiredSpacesAfterOpen if spaceAfterOpen requiredSpacesAfterOpen error Expected s spaces after opening bracket s found end if if spaceBeforeClose requiredSpacesBeforeClose error Expected s spaces before closing bracket s found Depends on the requiredSpacesAfterOpen value the message does not have the same format And we talked sometimes about opening parenthesis sometimes about opening bracket I think using the same wording could be a small improvement Which one do you prefer for example with laravel I need to exclude some typehint in overwriting funcion but not want to exclude standard for the whole file If it have feature please suggest me to use I got error on overwriting method inside of the class which is extended from framework In normal it can be solve by the way as below rule rule refSquizCommentingFunctionCommentTypeHintMissing excludepatternappExceptionsHandlerphpexcludepattern rule But Question I need to exclude some specific errors like below without excluding SquizCommentingFunctionComment standard with the whole file error I got ERROR Type hint Request missing for request SquizCommentingFunctionCommentTypeHintMissing Here is function in child class extended parent class from laravel framework Render param Request request Request param Exception e Exception return Response throws ExceptionInvalidArgumentException Exception public function renderrequest Exception e Response response thisgenerateExceptionResponserequest e thissendToTge request response if thisconfig addcorsheaders if classexistsCorsServiceclass throw new InvalidArgumentException var CorsService cors cors thiscontainermakeCorsServiceclass corsaddActualRequestHeadersresponse request return response Parent Class from Laravel Framework Render an exception into an HTTP response param Illuminate Http Request request param Exception e return Symfony Component HttpFoundation Response throws Exception public function renderrequest Exception e if methodexistse render response erenderrequest return RoutertoResponserequest response elseif e instanceof Responsable return etoResponserequest e thisprepareExceptione if e instanceof HttpResponseException return egetResponse elseif e instanceof AuthenticationException return thisunauthenticatedrequest e elseif e instanceof ValidationException return thisconvertValidationExceptionToResponsee request return requestexpectsJson thisprepareJsonResponserequest e thisprepareResponserequest e A number of sniffs contain a public error property to toggle whether the sniff should throw an error or a warning This property has been superseded by the ability to specify typeerrortype for each sniff in a custom ruleset since PHPCS Id like to suggest removing these public error properties from any sniffs which have them and to remove the code within the process method of those sniffs handling the toggle A quick scan yields the following sniffs for which this applies GenericControlStructuresInlineControlStructure GenericFormattingMultipleStatementAlignment GenericPHPForbiddenFunctions GenericPHPNoSilencedErrors GenericStringsUnnecessaryStringConcat SquizCSSForbiddenStyles sniff will be removed anyway in SquizPHPDiscouragedFunctions SquizPHPForbiddenFunctions inherited The Customizable Sniff Properties wiki page would also need to be updated for this change Id suggest adding a Removed in column where relevant to the properties table containing the version nr in which a property was removed A while control structure without body is perfectly valid PHP but gets flagged by the GenericControlStructuresInlineControlStructures sniff i while i i i is now See As far as I can see the sniff is intended to find inline control structures with a body but without braces and fix those An inline control structure without a body should be outside the scope of this sniff Ive got a fix ready for this but found that a number of existing unit test would start failing line and gsherwood With that in mind Id like second opinion on how the sniff should handle while structures without body As an alternative to the fix Ive got prepared I could create a fix which would maintain the existing behaviour but would give while structures without a body a different error code Opinions 