Were about to start a big push towards version v of Exercism This is going to be a really exciting step forward for Exercism with inbrowser coding new Concept Exercises with automated feedback improved mentoring and much more This to be a big community effort with the work spread out among hundreds of volunteers across Exercism One key thing is going to be each track having enough maintainers who have the time to manage that community effort We are therefore putting out a call for new maintainers to bolster our numbers Were hoping that our existing maintainers will be able to act as mentors to the newer maintainers we add and take on a parental role in the tracks If you are an existing maintainer could you please reply to this letting us know that you think youll have time hrsweek to help with this over the next months If you wont have that time but still want to be a maintainer and just help where you can instead please tell us that too If you have come to the end of the road as a maintainer then we totally understand that and appreciate all your effort so just let us know For anyone new whos interested in becoming a maintainer thanks for your interest Being an Exercism maintainer is also a great opportunity to work with some other smart people learn more about your language of choice and gain useful skills and experience that are useful for growing your career in the technical leadership direction Please write a comment below introducing yourself along with your Exercism handle and telling us why youre interested in becoming a maintainer and any relevant experience We will then evaluate every application and contact you using your exercism email address once we have finished the evaluation process Thank you See also This is very much a WIP mostly aimed at but before going any further down a potential rabbit hole I though Id ask for honest feedback So feel free to hurt my feelings smile Essentially this is an attempt to leverage Deserialize to simplify dealing with the canonical data for the tests file see structsCanonicalData as well as potentially centralizing the logic in one place Right now the fields are private with public getter methods but Im thinking that it might make more sense to make them publicly visible as this is for internal use and I dont think any invariants need to be maintained but I might be wrong Ive tried tinkering with the syn crate but going through a String version of the functions seems the easiest path at this time as they can relatively easily be turned into synItems and eventually a synFile The structsLabeledTestgeneratetestfunction attempts some input unpacking through bindings that are then passed on to the relevant processing function but this is very limited JSON objects keys being strings this is fine when trying to unpack inputs but is severely limiting if one needs to build a HashMap or BTreeMap etc with a different type for the keys The same issue holds when trying to distinguish between chars and Strings On that note I think that trying to generate the processing functions first might be the way to go as their signature can then guide the conversion but the reverse might also be a good idea Anyway as I said any feedback would be most welcome at this stage We ve recently started a project to find the best way to design our tracks in order to optimize the learning experience of students As a first step we ll be examining the ways in which languages are unique and the ways in which they are similar For this we d really like to use the knowledge of everyone involved in the Exercism community students mentors maintainers to answer the following questions How was your experience learning Rust What was helpful while learning Rust What did you struggle with How did you tackle problems In what ways did Rust differ from other languages you knew at the time What was hard to learn What did you have to unlearn What syntax did you have to remap What concepts carried over nicely Could you spare minutes to help us by answering these questions It would greatly help us improve the experience students have learning Rust Note this issue is not meant as a discussion just as a place for people to post their own personal experiences Want to keep your thoughts private but still help Feel free to email me at erikexercismio Thank you In the template code it says Notes The empty slice is equal to the number But this test assumes that the empty slice should yield an empty slice and not zero as noted here With the ongoing changes to the Rust track we need a way to notify students and mentors that the track is being reworked This could be an email exercism dashboard icon etc It would be good to include a link to the latest merged changes so they can read the documentation for the change as well As you may have noticed the Track Anatomy Project has arrived for Rust This somewhat belated issue covers what that means for this track and what maintainers can expect to see throughout the process Background Rationale Our research has shown that having a suboptimal track structure causes frustration for students and a significantly worse experience for mentors The primary cause of this is that historically Exercism exercises were not implemented with any particular purpose in mind Both exercise choice and sequencing were mostly incidental In the past couple of years weve come to understand that the principal purpose of Exercism is to optimize for achieving fluency Reworking the tracks with this focus improves the experience for both students and mentors The project We have spun up a project to tackle these problems Weve named the project the Track Anatomy Project and you can read more about the background in the introductory blog post The goals of the Track Anatomy Project are to design the optimal path for progression throughout the track We want to make sure that the key topics are covered explicitly in a suitable order to ensure that progression is consistent across language tracks where appropriate to optimize the track for fluency in the data structures language features standard library and conventionsidioms of the language Fluency means that the goal is for the student to be able to express themselves comfortably in the basics of the language and that their code should not be jarring to experienced users of the language It does not aim to teach people to get better at programming though that is sometimes a sideeffect The tool To reach these goals weve developed a tool to help maintainers work through the restructuring step by step The working title of the tool is The Track Anatomy Tool The task of restructuring a track is significant To make this restructuring achievable weve split the process into several phases where each stage addresses one specific aspect of the restructuring Together the phases work from coarsegrained to finegrained and from the beginning of the track to the most advanced exercises The end result will be a restructured track with a list of improvements that need to be made as well as a set of guidelines for the track to make it easier to make decisions about suggested improvements in the future The methodology is the same for all tracks The outcome is different for each language We have tested the tool on the Ruby and C tracks and in both cases it resulted in dramatic improvement for both students and mentors What this means for Rust We have invited the first pool of maintainers to work with the Track Anatomy Tool and apply it to their language This track is one of those chosen and TheDarkula has volunteered to do the work Many small PRs The restructuring process results in a lot of small PRs We encourage this project to be run like a series of refactorings small and regular changes where we address the simplest problems first without striving for perfection After each change is merged we monitor the results and tweak based on our findings Then we make the next small change We focus on the core progression first either leaving the side exercises alone or taking pragmatic actions to redivide them The side exercises will be addressed in more depth later on The process gradually builds up a big picture that will not be discernible in any single pull request This big picture is never clear at the start of the restructuring it gradually develops as the maintainers work through each phase of the process This means that unlike most earlier work on Exercism language tracks individual pull requests will be more difficult to discuss as oneoffs as they tie into a large complex and often unclear picture We understand that this can be a bit disconcerting for maintainers who are not deeply involved in every step of the Track Anatomy Project for this track but ask for your trust in the process Mildly confusing for students The changes will lead to some confusion for active students due to changes in the order or the state coreside of exercises We have decided that the advantages of the small changes outweigh the confusion they may cause How can you help and contribute Most changes in the upcoming weeks are first and foremost pragmatic choices based on what the tool is asking None of the changes are final and none of them pretend to be the perfect solution to all that matters in the track To help this process along we ask that you give the person working through the tool room to experiment In PRs help find technical and mechanical problems and clerical errors rather than questioning the underlying reason for the change Keep an eye on issues with the label Track Anatomy issuesqis Aopenis Aissuelabel AProjectTrackAnatomy You can contribute by implementing new exercises or researching how such an exercise can be solved in Rust Since the main focus of the tool is on the core exercises it would also be valuable to help address issues in the side exercises that happen as a side effect of restructuring Most importantly you can help by mentoring improving mentor notes and providing feedback on your mentoring experience as a result of the implemented changes Let us know if mentoring got easier or harder more fun or less and share your observations about the result of a change either in issues here or in the Slack track channel Final thoughts We are fully aware that the tool is a black box and the inner workings can seem mysterious Were not being secretive its just a matter of a mental bandwidth and resources and b things are changing so rapidly that documenting them is very hard Our primary focus is to facilitate the folks who are working through the process on the track and we ask for your patience in the process Were confident this will lead to the best outcome for the Rust track If you have any questions please ask them here Would it be practical to add a script to Travis that would check if the README of the exercise was updated and if the build fails because of the update to post an appropriate message in the PR conversation For instance if the contributor edits a section that was generated from the problemspecifications and did not modify the original README file the message would appear that informs the contributor that this is the wrong way to change the README and asks them to consider making a PR for the problemspecifications Something similar if the contributor modifies the hints section without updating the hints file itself That way a quicker feedback would be provided for the contributors in case Travis build fails and the maintainers for various reasons havent provided a quick explanation Currently many operations in this utility operate at the file level directly appending strings and bytes Well get better results with higherlevel abstractions never directly appending to Configtoml for example but using a tomlparsing crate instead Likewise writing the tests file will be much easier using a template system like handlebars Note that this mention of handlebars isnt a requirement to use that particular crate just an example of a plausible templating engine It is not necessary to implement this before or but those issues will probably be easier to fix after the fix for this has been implemented The test file is easiest for a human to read and understand if it contains the following sections in sequence test module doccomment imports processXcase implementations tests The exercise update command should ensure that the test output file conforms to that sequencing From the exercise tools point of view requires parsing the test file to determine which tests exist and what bytes they contain anyway Given that information it should not be difficult to insert new processXcase implementations at the end of the appropriate section Test update detection should operate according to these rules if the generated name for a particular test is testdescriptionfromthecanonicaldata and there already exists a test named testdescriptionfromthecanonicaldata then check if the text of the test is equal to the newly generated test text if the text of the test is equal to the generated test text then nothing has changed so we leave the old test in place and do not write the new test if the text of the test is not equal to the generated test text then something has changed We cant expect an automatic tool to know which to keep so we should keep the existing test change the name by appending a suffix and insert the generated test The format I expect is testdescriptionfromthecanonicaldataN where N is the lowest integer which does not generate a name collision if the generated name for a particular test is testdescriptionfromthecanonicaldata and there already exists a test named descriptioninotherwords an automatic tool cant be expected to notice that the test exists already so simply retain the existing test and also insert the generated test The tool user or the PR reviewer are the ones who should catch those cases given the rules above we need neither NEW nor UPDATED Therefore those comments should no longer be emitted