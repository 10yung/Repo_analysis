 fab version Fabric Paramiko Invoke def decoratorf wrapsf def wrapperctx args kwargs return fctx args kwargs return wrapper task decorator def testctx a printa fab test a get the right result however when the task decoreated by decorator task decorator def testctx a printa fab test a No idea what a is get the wrong result Havent dug into this but IIRC some of our backgroundthreadprocess stuff for forwarding ports and auth agents might fit very neatly with the upcoming runasynchronousTrue from Invoke including the part where that comes with a context manager feature Just added a callback argument which is passed on to the built in callback argument in Paramikos SFTP class I was working on a script that transfers some pretty heavy files and so I wanted to show the transfer progress which this callback is extremely useful for add helper method to Groups classes that let user to pass a function to run on connections in the group grouprun is very simple usage and normally we have several commands tight together and in case we want to run them async the approach in docs is not let us do it Closes There is a small typo in fabricconfigpy Should read additionally rather than additionall This builds upon But since I wasnt sure if youd want to have this class as wel Ive moved it to a separate pr fixes Why Id like to do tranfers to multiple hosts at the same time What does this PR Do It moves the Parallelization for the group classes to a function python def operationself operation args kwargs pass This operation function is then in charge of executing the operation on all connections All the methods can now be added to the Group class since all those implementations do essentially the same thing Example from the threadworker function python def threadworkercxn operation queue args kwargs func getattrcxn operation result funcargs kwargs TODO namedtuple or attrs object queueputcxn result Example from the SerialGroup func getattrcxn operation results cxn funcargs kwargs Ill be making a separate PR for a GroupTransfer class so that you can choose whether or not to use that Id like to be able to use file transfers in Groups currently this is not possible because the Transfer class requires a Connection Ill write up a PR As mentioned in ptyTrue implies that stdout and stderr are merged However if using sudo I would strongly classify it as a bug to not remove the sudo prompt import fabric import getpass with fabricConnectionhostlocalhost as c cconfigsudopassword getpassgetpass r csudocat etcpasswd ptyTrue printstdout printrstdout results in stdout sudo password etcpasswd file I would expect sudo to remove the sudo prompt eg something like this assert rstdoutstartswithsudoprompt rstdout rstdout lensudoprompt return r 