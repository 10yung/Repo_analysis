When I try to build the simple angular app with guess js Its giving me the error My extendwebpackconfigjs is like below const GuessPlugin requireguesswebpack const parseRoutes requireguessparser moduleexports plugins new GuessPlugin GA ga code is not here because for security reason routeProvider return parseRoutes runtime delegate false The build error is like that cn sMacBookProguessangular cn npm run build guessangular build Userscn Documentssubhojitpracticeguessjsguessangular ng build emitting GuessPluginError No access refresh token or API key is set at OAuth ClientgetRequestMetadataAsync Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleauthlibrarybuildsrcauthoauth clientjs at OAuth ClientrequestAsync Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleauthlibrarybuildsrcauthoauth clientjs at OAuth Clientrequest Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleauthlibrarybuildsrcauthoauth clientjs at createAPIRequestAsync Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleapiscommonbuildsrcapirequestjs at ObjectcreateAPIRequest Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleapiscommonbuildsrcapirequestjs at ResourceReportsbatchGet Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleapisbuildsrcapisanalyticsreportingv js at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at new Promise anonymous at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Objectnext Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at new Promise anonymous at r Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at s Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs node UnhandledPromiseRejectionWarning Error No access refresh token or API key is set at OAuth ClientgetRequestMetadataAsync Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleauthlibrarybuildsrcauthoauth clientjs at OAuth ClientrequestAsync Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleauthlibrarybuildsrcauthoauth clientjs at OAuth Clientrequest Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleauthlibrarybuildsrcauthoauth clientjs at createAPIRequestAsync Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleapiscommonbuildsrcapirequestjs at ObjectcreateAPIRequest Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleapiscommonbuildsrcapirequestjs at ResourceReportsbatchGet Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesgoogleapisbuildsrcapisanalyticsreportingv js at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at new Promise anonymous at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Objectnext Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at new Promise anonymous at r Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at s Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs at Userscn Documentssubhojitpracticeguessjsguessangularnodemodulesguessgadistguessgaindexjs node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code Please help me to resolve this issue Theres a lot of place for improvement of the documentation Update the Angular guide to use ngxbuildplus Improve the API documentation explaining the configuration properties Include a guide showing how to use Guessjs with JWT instead of OAuth Include Gatsby guide The content of the documentation is in the GitHub page repo The GuessPlugin should cache the access token so it doesnt ask the user for authorization on each run Prior implementation The initial chunk clustering implementation accepts a minimum number of chunks that need to be produced by the build process and goes through a graph clustering based on Tarjans algorithm for finding strongly connected components This algorithm has a number of problems It treats chunks belonging to nested routes and chunks without a common ancestor the same way It terminates when the number of chunks in the application is at most the minimum number of chunks specified in the configuration Configuring the minimum number of chunks the application should consist is not a good heuristic for concatenating JavaScript files together The algorithm does not consider the chunk size but only the probability two chunks to be visited in the same session Suggested implementation Combine only chunks of nested routes where the probability of two chunks to be used together is high threshold should be discussed In such case if we have the following routes in the application abc b c d ef e Well recommend developers to load everything lazily ie even load lazily a ab and abc In such case the probability a ab and abc to be visited in the same session is because we have only one route with root a for e and ef the probability is n In this case well cluster the chunks from a ab and abc into a single file Depending on the value of n we may also combine e and ef When the user is at any page eg abc well prefetch the other bundles based on the Markov chain which weve built in the prefetch plugin Note this algorithm does not solve the problem which occurs when combining large chunks together