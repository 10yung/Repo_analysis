Solves my immediate issue but there are other bugs remaining related to broken symlinks I was not able to proceed any further due to lack of understanding because unfortunately the code does not document its data structures eg symlinkPaths or what invariants in general it expects to hold Describe the bug Symlinks are always watched ignoring matching pattern and followSymlinks option Versions please complete the following information Chokidar version Node version v OS version MacOS To Reproduce Create a file named testaaa Create a file named testbbb Create a symlink to testbbb named testccc javascript const chokidar requirechokidar const watcher chokidarwatchaaa const log consolelogbindconsole watcher onadd path logFile path has been added onchange path logFile path has been changed onunlink path logFile path has been removed Expected behavior Only testaaa should be watched but testccc is watched as well Additional context Project Related code When project includes symlinks they are no matter how watched and caused issue on code compiling Describe the bug When using option usePollingtrue and copying big files to watched directory with rsync a an add event is not triggered for last file in a list Versions please complete the following information Chokidar version Node version OS version Kubuntu CentOS To Reproduce Here is a repo to reproduce Expected behavior Trigger add event for last file copied by rsync Describe the bug When I enable the awaitWriteFinish as well as alwaysStat and having followSymlinks disabled then when a symlink to a regular file is created the Stats parameter passed to the event callback reports that the file is a regular file and not a symlink This only happens for symlinks created after the ready event Versions please complete the following information Chokidar version Node version OS version Linux x To Reproduce The following is a minimal example to reproduce this const chokidar requirechokidar const fs requirefs fsrmdirSynctest recursive true remove the temp dir from previous runs fsmkdirSynctest recursive true create the temp dir chokidarwatchtest awaitWriteFinish true followSymlinks false alwaysStat true onall ev path st if path testsymlinktxt st consolelogev stisSymbolicLink stisFile onready fswriteFileSynctesttesttxt test n fssymlinkSynctesttxt testsymlinktxt Expected behavior I expected that the above script will print true false but instead it prints false true If I set awaitWriteFinish to true then it works as expected Describe the bug When running in Node x or x and created with persistent false chokidar does not fire the ready event if the watched directory contains a symlink The ready event is fired correctly when running in Node x Versions please complete the following information Chokidar version Node version OS version macOS Mojave To Reproduce Simple script indexjs that should print out a directorys contents and then print out READY usrbinenv node const chokidar requirechokidar const watchedDirPath processargv tmp const chokidarInstance chokidarwatchwatchedDirPath persistent false cwd watchedDirPath chokidarInstanceonadd filePath consolelogfilePath chokidarInstanceonready consolelogREADY chokidarInstanceonerror consoleerror Lets create a directory d containing a text file and a directory d containing a symlink mkdir d d cd d echo hello hellotxt cd cd d ln s d hellotxt cd ls l d d d total rwrr chuan staff Dec hellotxt d total lrwxrxrx chuan staff Dec hellotxt d hellotxt The script works as expected on d indexjs PWDd hellotxt READY The ready event is NOT fired on d indexjs PWDd hellotxt However if we change persistent false to persistent true in the script then the ready event is fired for both directories indexjs PWDd hellotxt READY C indexjs PWDd hellotxt READY C We have been able to repro this issue in both Node and However in Node x the ready event DOES fire correctly for d even with persistent false Additional context As a workaround we currently set persistent true when watching but then call chokidarInstanceclose in the ready event handler to prevent blocking the Node process from exiting When watching a directory with followSymlinks off if the directory contains links for which the target does not exist chokidar blows up with UnhandledPromiseRejectionWarning Error ENOENT no such file or directory stat path of symlink This is due to calling fsrealpath on the link which fails since the link target does not exist here Note the nodejs documentation for fsrealpath Asynchronously computes the canonical pathname by resolving and symbolic links it does not specify what happens when the link target does not exist but as reality shows it throws ENOENT Perhaps using the fsreadlink function would be more appropriate there Option awaitWriteFinish does not work on Windows using NTFS file system When I start the copy an add event is fired and when its finished theres one change event On alpine linux it waits until the copy is finished and fires one add event I guess this is the expected behaviour I tried with the latest Node v and Chokidar v When watching a directory on network share ending with no files are found Shares ending in are commonly used to hide shares from being listed when browsing on Windows but they work normally otherwise Versions Chokidar version Node version electron ie node OS version Windows To Reproduce const networkDirectory SOMEPLACEsharenamemorepath chokidar watchnetworkDirectory usePolling true interval awaitWriteFinish stabilityThreshold pollInterval disableGlobbing true Works fine in chokidar Ive added dirent support to readdirp v The initial implementation of the approach resides in branch We need to make it default when alwaysStat false This should speed up things by a huge amount recursive true option has been around since or so It uses effective lowlevel inferface although shitty otherwise thered be no chokidar We will need a new watcher class for that something like class RecursiveWatchHandler cc XhmikosR 