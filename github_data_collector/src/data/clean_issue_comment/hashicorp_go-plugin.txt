I know the advantage of this repo such as dynamic process isolation but how about the benchmark any test data I Implemented a plugin for a service This service runs as multiple replicas How can I ship my plugin into this multiple replicas They run containers It is simpler to use strconvAtois than strconvParseInts What is the change When the Cmd struct already has stdin already configured use that instead of osStdin when starting a plugin Why I wanted to pass data to my plugins to assist with initialization passing onetime configuration data that isnt part of the interface used to communicate with the plugin I was having trouble getting this sent properly via osStdin honestly This seems like an improvement because it doesnt require remembering the original osStdin and swapping it back and makes it easier for the host to pass a different stdin to a plugin or mock it out for a test To support protobuf v protobuf lib version upgraded to grpc lib version upgraded to There are some auto cleanup by go mod as the result Im using go bash go test ok githubcomhashicorpgoplugin s githubcomhashicorpgopluginexamplesbasic no test files githubcomhashicorpgopluginexamplesbasiccommons no test files githubcomhashicorpgopluginexamplesbasicplugin no test files githubcomhashicorpgopluginexamplesbidirectional no test files githubcomhashicorpgopluginexamplesbidirectionalplugingogrpc no test files githubcomhashicorpgopluginexamplesbidirectionalproto no test files githubcomhashicorpgopluginexamplesbidirectionalshared no test files githubcomhashicorpgopluginexamplesgrpc no test files githubcomhashicorpgopluginexamplesgrpcplugingogrpc no test files githubcomhashicorpgopluginexamplesgrpcplugingonetrpc no test files githubcomhashicorpgopluginexamplesgrpcproto no test files githubcomhashicorpgopluginexamplesgrpcshared no test files githubcomhashicorpgopluginexamplesnegotiated no test files githubcomhashicorpgopluginexamplesnegotiatedplugingo no test files githubcomhashicorpgoplugininternalplugin no test files githubcomhashicorpgoplugintestgrpc no test files Is it possible to create a netrpc only implementation both host and plugin without bloated by gRPC dependencies WIll the binaries always have all modules listed gosum file OS linux The plugins is abnormally closed such as SIGKILL the unix socket file will be left behind and causing a leak in some case why not plugin support Abstract sockets to resolve this case Abstract sockets Socket permissions have no meaning for abstract sockets the process umask has no effect when binding an abstract socket and changing the ownership and permissions of the object via fchown and fchmod has no effect on the accessibility of the socket Abstract sockets automatically disappear when all open references to the socket are closed The abstract socket namespace is a nonportable Linux extension Nomad uses goplugin to spin up various plugins and auxiliary processes and saw surprising to us behavior when host process dies in Nomad uses goplugin to spin up longrunning plugins with lifecycle independent from host to ease inplace upgrades and reconfiguration and use the reattachment patterns ReattachConfig supported by this However we observe the following problems after host process is restarted The plugin gets a SIGPIPE signal upon the next logStdoutStderr write operation When the host eg goplugin client process dies StdoutStderr pipe closes and any write from plugin fails with ioErrClosedPipe error and the plugin receive SIGPIPE typically killing it note that if plugin explicitly ignores SIGPIPE hclog may panics on log write failure in On successful reattachment by a restarted host process stdoutstderr syncing is lost and any plugin log lines to StdoutStderr are lost Nomad works around this by having a dedicated log file for the plugin and not writing to the plugin Stderr in Ideally goplugin can makes handling host process restarting and reattaching better One possibility might be using fifo files such that plugin can always write to it with some buffer but this may require clever use of nonblocking flags to ensure plugin can proceed when fifo buffer is full With AutoMTLStrue brokered connections dialed from the plugin back to the host fail with transport authentication handshake failed x certificate is valid for localhost not unused Additionally brokering with AutoMTLS requires the use of brokerAcceptAndServe since the autogenerated TLS configuration is not exported and therefore cannot be used to set up a gRPC server to use with the listener returned from brokerAccept