Dexcount does not seems to work with bundle variant of Android App Bundle to make app bundle we build with bundle task then assemble ie instead of assembleRelease it would be bundleRelease for android app bundle assemble is no longer required or used I suppose we need to hook the dexcount plugin to bundle task too Build process was changed from gradle android plugin If you use some features from Java and minSdk then it run desugar before transforming classes to dex Gradle Gradle Android plugin beta library buildgradle android compileSdkVersion buildToolsVersion defaultConfig minSdkVersion targetSdkVersion compileOptions sourceCompatibility JavaVersionVERSION targetCompatibility JavaVersionVERSION Stacktrace Dexcount name dexcountgradleplugin Dexcount version Dexcount input homedmitryIdeaProjectsTestLibrarylibrarybuildoutputsaarlibraryreleaseaar Error counting dex methods Please contact the developer at comgetkeepsafedexcountDexCountException dx exited with exit code stderrUncaught translation error comandroiddxcfcodeSimException invalid opcode ba invokedynamic requires minsdkversion error aborting at comgetkeepsafedexcountDexFileCompanionextractDexFromAarDexFilekt at comgetkeepsafedexcountDexFileCompanionextractDexDataDexFilekt at comgetkeepsafedexcountDexMethodCountTaskBasegeneratePackageTreeTaskskt at comgetkeepsafedexcountDexMethodCountTaskBasecountMethodsTaskskt at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at orggradleinternalreflectJavaMethodinvokeJavaMethodjava at orggradleapiinternalprojecttaskfactoryDefaultTaskClassInfoStoreStandardTaskActiondoExecuteDefaultTaskClassInfoStorejava at orggradleapiinternalprojecttaskfactoryDefaultTaskClassInfoStoreStandardTaskActionexecuteDefaultTaskClassInfoStorejava at orggradleapiinternalprojecttaskfactoryDefaultTaskClassInfoStoreStandardTaskActionexecuteDefaultTaskClassInfoStorejava at orggradleapiinternalAbstractTaskTaskActionWrapperexecuteAbstractTaskjava at orggradleapiinternalAbstractTaskTaskActionWrapperexecuteAbstractTaskjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuter runExecuteActionsTaskExecuterjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorrunDefaultBuildOperationExecutorjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuterexecuteActionExecuteActionsTaskExecuterjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuterexecuteActionsExecuteActionsTaskExecuterjava at orggradleapiinternaltasksexecutionExecuteActionsTaskExecuterexecuteExecuteActionsTaskExecuterjava at orggradleapiinternaltasksexecutionSkipUpToDateTaskExecuterexecuteSkipUpToDateTaskExecuterjava at orggradleapiinternaltasksexecutionResolveTaskOutputCachingStateExecuterexecuteResolveTaskOutputCachingStateExecuterjava at orggradleapiinternaltasksexecutionValidatingTaskExecuterexecuteValidatingTaskExecuterjava at orggradleapiinternaltasksexecutionSkipEmptySourceFilesTaskExecuterexecuteSkipEmptySourceFilesTaskExecuterjava at orggradleapiinternaltasksexecutionResolveTaskArtifactStateTaskExecuterexecuteResolveTaskArtifactStateTaskExecuterjava at orggradleapiinternaltasksexecutionSkipTaskWithNoActionsExecuterexecuteSkipTaskWithNoActionsExecuterjava at orggradleapiinternaltasksexecutionSkipOnlyIfTaskExecuterexecuteSkipOnlyIfTaskExecuterjava at orggradleapiinternaltasksexecutionExecuteAtMostOnceTaskExecuterexecuteExecuteAtMostOnceTaskExecuterjava at orggradleapiinternaltasksexecutionCatchExceptionTaskExecuterexecuteCatchExceptionTaskExecuterjava at orggradleexecutiontaskgraphDefaultTaskGraphExecuterEventFiringTaskWorker runDefaultTaskGraphExecuterjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorRunnableBuildOperationWorkerexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorexecuteDefaultBuildOperationExecutorjava at orggradleinternalprogressDefaultBuildOperationExecutorrunDefaultBuildOperationExecutorjava at orggradleexecutiontaskgraphDefaultTaskGraphExecuterEventFiringTaskWorkerexecuteDefaultTaskGraphExecuterjava at orggradleexecutiontaskgraphDefaultTaskGraphExecuterEventFiringTaskWorkerexecuteDefaultTaskGraphExecuterjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorkerprocessTaskDefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorkeraccess DefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorker executeDefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorker executeDefaultTaskPlanExecutorjava at orggradleexecutiontaskgraphDefaultTaskExecutionPlanexecuteDefaultTaskExecutionPlanjava at orggradleexecutiontaskgraphDefaultTaskExecutionPlanexecuteWithTaskDefaultTaskExecutionPlanjava at orggradleexecutiontaskgraphDefaultTaskPlanExecutorTaskExecutorWorkerrunDefaultTaskPlanExecutorjava at orggradleinternalconcurrentExecutorPolicyCatchAndRecordFailuresonExecuteExecutorPolicyjava at orggradleinternalconcurrentManagedExecutorImpl runManagedExecutorImpljava at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at orggradleinternalconcurrentThreadFactoryImplManagedThreadRunnablerunThreadFactoryImpljava at javalangThreadrunThreadjava What to do I guess this is the general case of Instant Apps Should we a break out counts by APK b break out counts by individual dex files c not count them at all because the dex limit is not so meaningful given multiple APKs I have split for native libs in my app groovy splits abi enable true reset include armeabi x x universalApk false When Im trying to assemble specific task dex count is not executed ie bash gradlew assembleArmeabiRelease However it is working fine when I call bash gradlew assembleRelease but now it also going to assemble other apks which would be great to avoid doing If you enable ABI splits in your gradle build file you get duplicate output per ABI from this plugin This is unnecessary as each split has the exact same method and field counts We should figure out if there is a way to determine if ABI splitting is enabled and handle it accordingly Heres some sample bad output appcountArmeabiv aDebugDexMethods Total methods in apparmeabiv adebugapk used Total fields in apparmeabiv adebugapk used Methods remaining in apparmeabiv adebugapk Fields remaining in apparmeabiv adebugapk appcountArmeabiDebugDexMethods Total methods in apparmeabidebugapk used Total fields in apparmeabidebugapk used Methods remaining in apparmeabidebugapk Fields remaining in apparmeabidebugapk appcountX DebugDexMethods Total methods in appx debugapk used Total fields in appx debugapk used Methods remaining in appx debugapk Fields remaining in appx debugapk Its a little related to Im using dexcount with sample project to count my library methods and fileds but in sample project Im using Android support library which is not used in my own library If I would be able to exclude whole androidsupport package from counting process that would give me better feeling how big my library is This could be done via Gradle configuration and it would be partial solution for 