Updates for Also added the OrderByDescending function I ve had time to check some of the APIs now and this is my feedback Sorry if I have missed something that already exists I just tested this yesterday so please forgive any mistakes Before saying anything else I would just like to say that I think this whole initiative is awesome So happy to see these ideas coming to dotnet Great job Quick background on me is that I work in the finance industry dealing heavily with time series data of all kinds Currently we use a mix of dotnet python R and MATLAB My favored dotnet language for data analysis is F which will be reflected below Fsharp Interface Is there an F tailored interface I didn t see one and while it s possible to use all features the differences between F and C really stand out for some operations Example grid approximation of posterior distribution F let l ps Arraymap fun p BinomialPMFLnp n k let p ps Arraymap fun p ContinuousUniformPDFLn p let l Col PrimitiveDataFrameColumn Likelihood l let p Col PrimitiveDataFrameColumn Prior p let bdf DataFramel Col p Col The unstandardized likelihood bdf UnstdPostLn bdf Likelihood bdf Prior What I really want to do is the equivalent of pandas assign operation I want to create a new column based on existing columns in a nontrivial way The only alternative I found was to clone and then apply elementwise bdf UnstdPost bdf UnstdPostLn Clone Here type information is lost so I have to cast Then I have to work with nullable which is a pain F has good support for a lot of nullable operators but no support for when you want to apply functions like exp bdf UnstdPost PrimitiveDataFrameColumnApplyElementwisefun x Nullable i Nullableexp xValue Normalizing constant let evidence bdf UnstdPost Sum float bdf StdPostLn bdf UnstdPost log evidence Final standardized posterior approximation Same issues as before bdf StdPost PrimitiveDataFrameColumnApplyElementwisefun x i Nullableexp xValue I don t think this code is that nice from an F perspective I would hope that some of these quirks can be done away with either by tailoring an interface for F or by making some other adjustments discussed below Extend the concept of an index In other dataframe solutions the concept of an index column takes a central role Usually this is an integer or a datetime This then enables easy joins and with new timeseries and other operations One example for timeseries data is resampling That is given data on a millisecond basis I may want to resample that data to seconds and perform a custom aggregation in doing so see pandas resample In the NET implementation there is an index but it s always integer based and you can t supply it when creating a series data frame column This makes it harder than would have to be to quickly put together a dataframe from disparate data sources Requiring the length of all columns to be the same is not good enough for production use and inhibits productivity See pandas or deedle index series Missing values treatment On the dataframe there is a DropNulls operation but not when working on individual columns From my previous code example what I could have been OK with would have been to drop all nulls from the column and then call Apply with my custom function not having to deal with Nullable This would have given me a new column where I have my index info datetime together with my new values Then I would assign that to a new column in my dataframe For the indices where I am missing values the dataframe would just know that Currently that s not possible and it makes anything nontrivial a hassle Time series operations The dataframe comes from the world of time series analysis in different forms I think the design and implementation should recognize and honour that Otherwise I don t see the point as that s where practically all applications lie This means outofthebox support for standard calculations such as moving averages Much of this can of course be done in a thirdparty library but at least the necessary concepts have to exist As I see it this is primarily what s called window functionality In deedle and pandas it s possible to perform windowed calculations Either a moving window of a fixed size or an expanding window that adds a new row for each iteration This is really useful for smoothing data and the expanding functionality is very powerful for making sure that all computations are done in a chronologically consistent way no benefit of hindsight See pandas or deedle windowing Summary Great initiative Please improve F experience introduce concept of an index usually datetimebased and put time series analysis in centerstage The MultiValueDictionary should have extension method to convert a collection to MultivalueDictionary I have a very basic question which in my opinion didnt get covered in the annoucement Why should one use DataFrame I dont understand in what cases should I move from DataTable or Classes I currently only see a use case for but why would I only use DataFrame instead of existing stuff And even with Spark I would question why did DataFrame get introduced at all Why not DataTable Or a class eg DataT T T T T T as an example for four columns I believe everything that was demonstrated in the annoucement can be achieved with a simple class and LINQ queries to make it more dynamically one could use ExpandoObject If possible could you provide me some sort of guidline that IMHO should cover those questions atleast In what cases would one use DataFrame what are the advantages and disadvantages How does it compare to existing tools When to use DataFrame with or without Spark How does DataFrame andor Spark interact with an SQL Server When should you use standard SQL queries and when to use Spark SQL or load data into DataFrame and call Filter eg does Spark translate Spark SQL to standard SQL query or does it basically get everything selct from foo on SQL Server and than exectue its query inmemory without the SQL Server Without Spark should you read everything select from foo and fill the DataFrame with every row and afterwards call Filter on the DataFrame to get the subset or filter on SQL Server If the filter should happen on SQL Server isnt the Filter method on DataFrame useless in the combination with SQL Server How does DataFrame work with an ORM eg EntityFramework How would this new DataSource be introduced into exsting controls eg bind DataFrame with DataGrid What is the roadmap Only found one for Spark Is DataFrame andor Spark equally good for small as little as and big data as big as you can dream If DataFrame is in anyway more efficient in memoryperformance of querying your data in memory will it at some point in the future supersede a simple List and LINQ queries Or will LINQ queries run DataFrame operations in the Background eg fooListWherex xFoo HelloWorld will instead of foreach the enumerate transform the fooList to a DataFrame than execute the query on this and than build and return a new list I added static factory methods only for the constructor overloads where type inference is possible I experimented with adding overloads for all constructors but for the overloads where values are not provided it didnt feel helpful It seemed weird to do DataFrameColumnCreatefoo and get back StringDataFrameColumn Also seemed like a bad idea because it would preclude adding any other special DataFrameColumn types in the future I also thought it would be inconsistent to allow DataFrameColumnCreateintFoo but not have any counterpart for String Please let me know if you disagree if so I can add the other overloads back in Hello The Sample method in DataFrame code here does not check if an index was already generated by rand Most of the time I get duplicate rows because of it Im trying out the MicrosoftDataAnalysis and was looking for a method that applies a Func but returns the result as an array of values maybe not efficient or a column just like in Pandas Heres what Im currently doing csharp public static PrimitiveDataFrameColumnTResult ApplyT TResultthis PrimitiveDataFrameColumnT column FuncT TResult func where T unmanaged where TResult unmanaged var resultColumn new PrimitiveDataFrameColumnTResultstringEmpty foreach var row in column resultColumnAppendfuncrowValue return resultColumn Example usage csharp var birthdayColumn df Birthday as PrimitiveDataFrameColumnDateTime var currentYear DateTimeNowYear df Age birthdayColumnApplyd currentYear dYear dfPrettyPrint Thank you I attempted to install the latest SystemIOFileSystemWatcherPolling nuget preview preview into my net Core library and was getting a Rollback due to Signing issues Is this package going to rebuilt for later net core versions or is it no longer maintained with no planned future Error NU Package SystemIOFileSystemWatcherPolling preview from source The signature should be timestamped to enable longterm signature validity after the certificate has expired Error NU Package SystemIOFileSystemWatcherPolling preview from source The author primary signature found a chain building issue A certificate chain processed but terminated in a root certificate which is not trusted by the trust provider If I switch to the previous version I then get Severity Code Description Project File Line Suppression State Suppression State Error NU Package SystemIOFileSystemWatcherPolling preview is not compatible with netstandard NETStandardVersionv Package SystemIOFileSystemWatcherPolling preview supports netcoreapp NETCoreAppVersionv At the moment the generic binary operations APIs check value and call the overload that takes in a DataFrameColumn when appropriate things need to be done The ReverseBinaryOperations need to support the same pattern The binary operations APIs that take a DataFrameColumn should become protected We are using UnsafeAs to cast a Memorybyte to a MemoryT and on NET Framework this doesnt work Later when we use this memory object it throws SystemInvalidCastException Unable to cast object of type SystemByte to type SystemInt Stack Trace ReadOnlyMemory getSpan BufferTestsTestArrowStringColumnGetReadOnlyBuffers line We need to figure out a better way to implement this method