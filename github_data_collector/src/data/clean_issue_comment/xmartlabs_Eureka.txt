The Eureka bundle contained chevron images used in NavigationAccessoryView These chevrons can be replaced by the chevron SF Symbols in iOS and up For lower iOS versions they are fairly simple to draw in code using a few lines in CoreGraphics which Ive done also This should remove the blocker to adding Swift Package Manager support so Ive added a Packageswift file too The reimplemented chevrons look as follows the left simulator uses the manually drawn ones the right simulator uses SFSymbols img width altSimulator screenshot showing chevrons src form SectionEmployees MultipleSelectorRowString tag Employees title options George John Tom value onPresent from to in toonDismissCallback in selfdosomething The callback never occurs What is the intended workflow for a callback When tableView is not added to window Fixes Can I solve it by thread or other ways Using uitableview directly is not so slow Thanks func generateForm formremoveAll form Section editSection SectionRulelocalized for rule in rules rules count will be very slow insertRulerule atIndex editSectioncount form editSection func insertRule rule Rule atIndex index NSInteger editSectioninsertLabelRow title rulerowDescription nil rulerowDescription value rulerowDescription nil rulerowDescription disabled ConditionbooleanLiteral selfeditable cellSetup cell row in cellaccessoryType disclosureIndicator cellselectionStyle default cellUpdate cell row in rowtitle rulerowDescription nil rulerowDescription rowvalue rulerowDescription nil rulerowDescription onCellSelection unowned self cell row in selfshowRuleConfigurationrule at index I often need to let the user input a date range and I usually do this with rows A PickerInlineRow that allows the user to choose preset date ranges such as last week or last month The PickerInlineRow also has a custom option and when this option is selected two hidden DateInlineRows will appear allowing the user to select a custom range Code section PickerInlineRowStringtagRange row in rowtitle Range rowoptions last Days last Days last Days last Days last Days allTime custom rowvalue last Days section DateInlineRowtagStartDate row in rowtitle From rowvalue DateaddingTimeInterval rowhidden function tagRange rowBytag tagRange as RowOfStringvalue custom section DateInlineRowtagEndDate row in rowtitle To rowvalue Date rowhidden function tagRange rowBytag tagRange as RowOfStringvalue custom Now instead of writing all this every time I would like to use a custom row something like section DateRangeRowtagDateRange Note that this custom row isnt associated with one Cell but is instead composed of subrows so I cant implement it the way README describes I believe this is a feature that Eureka doesnt yet supports hence the feature request Essentially this is kind of like an extension of the idea of SplitRow but with some key differences instead of limited to subrows a row could be composed of many subrows instead of having the subrows laid out all in one cell the subrows are laid out just like how they normally are Trying to use Eureka on iPad application with new Mac Catalyst produces all of the iOS deprecated warnings img width altScreen Shot at PM src Id like to make a multivalue section with rows that allow the user to enter three values similar to the Component Picker in the Rows example but also have a header and footer It would look something like this Form Is there a better solution than just building custom cells Hi I m currently working on project that utilises the Eureka library On the FormViewController I am presenting another VC modally in which the user is required to select an item before returning back to the FormViewController During the process of returning to the FormVC a swift warning is logged TableView Warning once only UITableView was told to layout its visible cells and other contents without being in the view hierarchy the table view or one of its superviews has not been added to a window This may cause bugs by forcing views inside the table view to load and perform layout without accurate information eg table view bounds trait collection layout margins safe area insets etc and will also cause unnecessary performance overhead due to extra layout passes Make a symbolic breakpoint at UITableViewAlertForLayoutOutsideViewHierarchy to catch this in the debugger and see what caused this to occur so you can avoid this action altogether if possible or defer it until the table view has been added to a window After inserting the symbolic breakpoint I ve figured out that the warning is being logged after tableViewreloadRows is called within the reload method of the BaseRow class in Eureka I went to examine the example app to see if I could reproduce the warning and I could Steps to reproduce Select Rows from the base table view Select any modal selection from the next table view I used SectionedPushRow Navigate back to the Rows tableView from your modally presented view The warning will be printed To view the debug stack add a symbolic breakpoint for UITableViewAlertForLayoutOutsideViewHierarchy This has only begun happening since iOS There is a bug in iOS that causes UITableViewscrollToRow to not respect safe area insets Therefore it does scroll to the wrong position A demo and description of the issue can be found here This PR fixes the issue by using scrollRectToVisible instead and adding the safeAreaInset manually I discovered an issue with adjusting the form ScrollView contentInset and contentOffset when the user edits text in a TextAreaRow This becomes a problem as soon as the form is presented as an page sheet on iOS It looks like the scrolling does not consider the additional top space added by the new page sheet presentation style This only happens when the view is displayed with the page sheet style space at the top Also the behavior is not consistent as you can see in this clip The same code on iOS without the page sheet presentation style Also not consistent but does not scroll badly so the first line is invisible I guess this is the code that needs some update to fix this I tried to figure it out myself but could not find a solution yet Environment Eureka Xcode 