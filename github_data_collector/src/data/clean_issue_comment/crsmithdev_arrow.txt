humanize is getting kind of long and could do with refactoring Wed also like to explore allowing other inputs such as date and timedelta objects Pull Request Checklist Added tests for changed code x All tests pass when run locally run tox or make test to find out Updated documentation for changed code x Code is uptodate with the master branch Description of Changes Added type annotations to all non test codes Used python stub file format to annotate for compatibility with Python mypy p arrow strict and mypy p arrow strict both returns Success no issues found in source files mypy Did not test with pyre and pytype because they both can not handle python code Python is reaching EOL in Me and jadchaar have chatted about this before but havent come to a decision yet Wed hoped that the DST upgrades would be done before the EOL so Python users would at least have access to those improvements However due to being busy weve not had time to work on that An important factor in this decision will be how long travisci supports dateutil discussion hugovk do you have any thoughts or stats on Python usage Pull Request Checklist Thank you for taking the time to improve Arrow Before submitting your pull request please check all appropriate boxes Check boxes by placing an x in the brackets x x Added tests for changed code x All tests pass when run locally run tox or make test to find out x Updated documentation for changed code x Code is uptodate with the master branch If you have any questions about your code changes or any of the points above please submit your questions along with the pull request and we will try our best to help Description of Changes Added kwarg exact to span spanrange and interval to address issue When exact is set to True span returns a span of time starting exactly at the object it is called on spanrange and intervals timespan start exactly the time specified by start and the final timespan is truncated as not to extend beyond end Closes Replace with description of code changes If your PR has an associated issue insert the issue number eg or directly link to the GitHub issue eg Closes I dont think any number would work in my implementation but I can increase it to any finite number you want say or punctuation marks I think one is fine more than two is probably overkill Edit Maybe allow or due to the use of although Im not sure how often people use those after dates I could see people using a date like this He said The date is So maybe increasing the constraint is actually a good idea and I can increase it infinitely following the date just not preceding it Originally posted by andrewchouman in I tend to agree but the only thing that concerns me is that this worked pre I chose for example shell venv python Python v ef ec ed Mar Clang clang on darwin Type help copyright credits or license for more information import arrow arrowversion arrowgetThis date has too many punctuation marks following it DDMMYYYY Arrow T arrowgetThis date has too many punctuation marks following it DDMMYYYY Arrow T arrowgetThis date has too many punctuation marks following it DDMMYYYY Arrow T This is definitely an improvement but for full pre behavior while still containing improvements we probably need to add support for any number of punctuation marks Curious why would finite numbers work but not infinite eg with the quantifier in regex Originally posted by jadchaar in Pull Request Checklist Thank you for taking the time to improve Arrow Before submitting your pull request please check all appropriate boxes Check boxes by placing an x in the brackets x x Added tests for changed code x All tests pass when run locally run tox or make test to find out x Updated documentation for changed code x Code is uptodate with the master branch If you have any questions about your code changes or any of the points above please submit your questions along with the pull request and we will try our best to help Description of Changes Replace with description of code changes If your PR has an associated issue insert the issue number eg or directly link to the GitHub issue eg For example doing the following will automatically close issue when this PR is merged Closes Support for parsing integer timestamps with milliseconds and microseconds was added in but we need to add similar support to the formatter t arrowget T t Arrow T ttoIsrael Arrow T Note the same tz offset but different hours Same bug another appearence ut ut arrowgetuttoIsraeltimestamp False ut arrowgetuttoIsraeltimestamp Hi the shift method is nice and seems to work with localized time with some kind of natural semantic However it leads to some results related to differences between time points t arrownowshiftweeks The day before the next DST fall transition t Arrow T t t shiftdays t Arrow T t t datetimetimedelta So far so good A DST transition occurs between t and t Im living in Paris and shifting by one day keeps the same time with UTC offset adjusted to The difference is one day expressed as a timedelta Now convert the dates into UTC t t toUTC t Arrow T t t toUTC t Arrow T t t and t t True t t datetimetimedelta t t t t False t t t t False The problem is that while the time points are the same in local time or UTC which is expected their difference is no longer the same And a few expected invariants are no longer true As a conclusion Differences between time points shall always imply a conversion to UTC even if they are in the same time zone At least we would have t t t t t t t t This should be clearly explained in the documentation The documentation should explain that a difference between time points lead to a naive delta even if arrow enforces time zone aware time points Time zone aware time delta could be introduced with a clean semantic to be defined Best regards Antoine I would like to use arrows humanize for the bold part of this Task has completed in seconds With subtasks that is milliseconds per subtask Currently this seems hard for two reasons First from the start time that I stored I need to compute the delta to now myself divide the delta by subtract it from now and then output that That seems unncessarily complicated Second everything below one second is a moment or something like that Or have I missed anything