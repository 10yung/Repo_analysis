For performance reasons Im considering inverting the initialization logic to be optin rather than optout so that we dont try to create indexes each time the app starts unless being asked for by the developer As part of this change well probably want to add some do the OpenIddict collections exist checks to inform users how they can manually initialize the OpenIddict collections or configure the OpenIddict MongoDB stores to do it automatically The following classes will need to be adapted from x for that one we should remove the dependency on TestServer and make it a proper unit tests class Device code support was added in alpha before we started porting the integration tests Now that it is almost complete new tests will need to be added for that feature In OpenIddict x x authorization and logout requests were serialized to BSON and stored in the distributed cache In x this logic was changed and these requests are now stored as signed and encrypted JWTs in the distributed cache Well need to port and adapt the integration tests guaranteeing this feature works as intended Things like OpenIddictApplicationConsentType or DisplayName could be assigned a max length of chars These modes are currently supported by OpenIddicts ASPNET Core x and x host Passthrough mode enabled globally per endpoint using eg optionsUseAspNetCore EnableAuthorizationEndpointPassthrough in this case OpenIddict extracts the OIDC payload validates it and allows the rest of the ASPNET Core pipeline to be invoked Passthrough mode enabled dynamically using OpenIddicts contextSkipRequest API it works like the previous mode but passthrough is configured dynamically per request by calling contextSkipRequest from an OpenIddict event handler This is commonly used to transparently handle authorization requests that can processed immediately eg when promptnone is specified and the user is already logged in without preventing other requests from reaching the MVC authorization controller typically when you need to render a consent form Nonpassthrough mode in this case requests are exclusively handled using OpenIddicts events model This is the expected operating mode for things like discovery introspection or revocation requests but we shouldnt prevent them from being handled manually later in the pipeline Well need to determine how ASPNET Core s plans may affect corresponding scenarios Tratcher could endpoint routing be used with these modes Im not too concerned by the routing aspect which seems flexible enough but the endpoint part seems way more limiting in our case as theres no way for an endpoint to declare its not going to handle a request 