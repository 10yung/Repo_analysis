For example text selection with shiftarrow keys seems to be implemented and works for me in at least XTerm when in inline mode in addition to just the full screen mode However it doesnt seem to in Konsole when not in the full screen mode Konsole has its own keybindings for shiftarrow keys but disabling what it allowed me to shiftleft and shiftright didnt help In the full screen mode the shift utilizing bindings work and for example in Nano as well Is there some kind of an inherent limitation to the inline mode from which this issue arises If not then please fix Ive looked for it but there doesnt seem to be a way to do this easily currently That is having the up and down keys behave like a lot of text editors moving the cursor in an imaginary vertical line across the prompt only straying from that when shorter rows are encountered and at the beginningend of the document Right now it seems that they go to the same index on the previousnext internal line and not the visual row My own hacky implementation is in this file And even then I encountered problems where rarely but seemingly randomly the cursor would go in the slightly wrong column Thats why for example pressing left and right also manually invoke updatestoredpos in addition to the textfbufferoncursorpositionchanged event And since I wasnt sure about the source of the problem I also reimplemented the textfdocumentcursorpositioncol and textfdocumentcursorpositionrow functions So its a very messy solution and Im not sure if its working perfectly even still It would be so much better if Python Prompt Toolkit could just offer the option to do it itself and properly on system with systemd testsuite fails with s testwithstyle s s def testwithstyle s f Capture s style stylefromdict s TokenHello ff s TokenWorld ff italic s s tokens s TokenHello Hello s TokenWorld world s s printtokenstokens stylestyle filef s assert b x b mHello in fdata s E AssertionError assert x b mHello in x b m x b h x b mHello x b mworld x b m s E where x b m x b h x b mHello x b mworld x b m testprinttokensCapture instance at x f f a aa data s s teststestprinttokenspy AssertionError s failed passed in seconds Im trying to add a metadict to a prompttoolkitcompletionNestedCompleter but Im not sure how the options argument can be used Would be great if it would be implemented in the example bckpkolbckpkolHP python Python default Oct GCC on linux Type help copyright credits or license for more information bckpkolbckpkolHP pip list Package Version abslpy alabaster appdirs astor av Babel bleach btrfsutil CacheControl cffi chardet colorama cycler distlib distro docopt docutils filemagic filetype future gast googlepasta grpcio h py html lib idna imagesize importlibmetadata iotop Jinja joblib KerasApplications KerasPreprocessing keyutils kiwisolver lensfun lhafile lockfile Markdown MarkupSafe matplotlib MediaInfo meld moreitertools msgpack npyscreen numpy opteinsum orderedset packaging pacmanmirrors pefile pep pexpect Pillow pip ply pony progress prompttoolkit protobuf ptyprocess pycairo pycparser pycryptodome pyexiv Pygments PyGObject pymediainfo pyparsing PyQt PyQt sip PySimpleGUI PySolFC pythondateutil pytoml pytz PyYAML random requests retrying scikitlearn scipy setuptools six sklearn snowballstemmer sounddevice Sphinx sphinxrtdtheme sphinxcontribapplehelp sphinxcontribdevhelp sphinxcontribhtmlhelp sphinxcontribjsmath sphinxcontribqthelp sphinxcontribserializinghtml team tensorboard tensorflow rc tensorflowestimator tensorflowservingapi tensorflowservingapigpu termcolor typing udiskie urllib wcwidth webencodings Werkzeug wheel wrapt yattag youtubedl zipp from prompttoolkitshortcuts import yesnodialog printboolyesnodialog Place that to a file and it will return True Inspired by the discussion in Instead of using a threaded approach for removewhendone processing we check for removals as part of the rendering process instead jonathanslenders this feels like a hack at this point not sure if wed want the getprogressbarsetprogressbargetcountersetcounter to be extending the AppSession or whether using this separate ProgressBarSession is preferred If we continue down this contexvar path then maybe AppSession should be made more generic to where anything can be set in a session So wed introduce something like getcontextvarkey and setcontextvarkey value Just thinking out loud here Might need to rebuild the docs I get this exception when I have asynchronous logging on the terminal while in interactive mode as soon as I hit enter with a command The following code can reproduce the problem python usrbinenv python import threading import time msg bThis is the message It will be repeated def UDPreceive while True printmsg timesleep listenUDP threadingThreadtargetUDPreceive listenUDPstart which gives bThis is the message It will be repeated bThis is the message It will be repeated In sdcs just type something and hit enter Exception in default exception handler Traceback most recent call last File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkiteventloopposixpy line in runtask t File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkiteventloopcontextpy line in newfunc return funca kw File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkitpatchstdoutpy line in writeandflushinloop runinterminalwriteandflush inexecutorFalse File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkitapplicationruninterminalpy line in runinterminal return runcoroutineinterminalasyncfunc renderclidonerenderclidone File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkitapplicationruninterminalpy line in runcoroutineinterminal assert appisrunning AssertionError During handling of the above exception another exception occurred Traceback most recent call last File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkiteventloopbasepy line in callexceptionhandler selfexceptionhandlercontext File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkitapplicationapplicationpy line in handleexception runcoroutineinterminalprintexception File usrlocalCellaripython libexecvendorlibpython sitepackagesprompttoolkitapplicationruninterminalpy line in runcoroutineinterminal assert appisrunning AssertionError bThis is the message It will be repeated bThis is the message It will be repeated testpytxt So a progress bar has two sets of keybindings in use The standard keybindings for cl and cc assigned to ProgressControl created by createkeybindings and whatever keybindings the user provides which are passed to the Application This means for example that I cannot overwrite the cc keybinding Why are there two sets of key bindings and what would be the correct way to overwrite the bindings