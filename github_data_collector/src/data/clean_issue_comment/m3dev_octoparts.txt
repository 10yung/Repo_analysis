Might be neat to try implementing the client as a Fetch datasource to take advantage of clientside batching caching and deduping Currently based on M proper should be due out soon x Flyway Play support causes test failures x Fix migration failures x Kenshoo Metrics support may need to do our own Currently pending x Swagger support currently completely broken I noticed this project depends on some dead zipkin assets If interested I could help guide on how to get onto the maintained codebase This would include broader features than before ex alternatives to scribe and json encoding of spans Let me know I get this intermittently and only in the vagrant machine which is naturally slower Ive experienced this before in other projects and it is due to Scalatests remarkably low default timeout of ms for a Future Ive never found a great solution to this problem other than increasing the scale factor when running tests but am open to suggestions info RichFutureWithTiming info should not start measuring too early FAILED info A timeout occurred waiting for a future to complete Queried times sleeping milliseconds between each query RichFutureWithTimingSpecscala info orgscalatestconcurrentFuturesFutureConceptanon info at orgscalatestconcurrentFuturesFutureConceptclasstryTryAgain Futuresscala info at orgscalatestconcurrentFuturesFutureConceptclassfutureValueFuturesscala info at orgscalatestconcurrentScalaFuturesanon futureValueScalaFuturesscala info at orgscalatestconcurrentFuturesclasswhenReadyFuturesscala info at comm octopartsfutureRichFutureWithTimingSpecwhenReadyRichFutureWithTimingSpecscala info at comm octopartsfutureRichFutureWithTimingSpecanonfun applymcVspRichFutureWithTimingSpecscala info at comm octopartsfutureRichFutureWithTimingSpecanonfun applyRichFutureWithTimingSpecscala info at comm octopartsfutureRichFutureWithTimingSpecanonfun applyRichFutureWithTimingSpecscala snip Currently the main documentation site doesnt have a section talking about how to customise authentication It should be addressed by adding such a section Might make sense to do this after the upgrade to since that mechanism is going to change completely Problem When backend API developers want to do some integration tests for their application working with other frontend services they need to set up ALL of them Having more easy way for such testing can reduces yakshaving task to set up other systems and also reduces integration errors Solution Make Octoparts to use arbitrary HTTPS proxy which is specified in every PartsRequests Extend PartsRequest to have some information about HTTPS proxy ex some Id for Octoparts proxy definition or hostnameport Front end systems should set this information by using HTTP Header which refers proxy information ex XOctopartsProxyId Octoparts will use specified HTTPS Proxy to call other service providers Developer can can change its service host by proxys settings shared proxy for each envirionment set or his local proxy Never enabled on production environment Large setups of Octoparts with many parts and many settings with widely used API endpoints can lead to erroneous or harmful changes the length of time and impact of which is hard to ascertain without an auditing trail Example Local contents is set on an endpoint temporarily to fix an issue and is accidentally left turned on Its useful to know when was this set and by whom to know the impact and to get a story of what might have happened Might be a good candidate for the use of this Adding alert mail groups will avoid copypaste of alert mail per part Octoparts px px ex It would be nice if Octopart parameters could be registered with default argument values Use case Accept header that defaults to applicationjson would be handy 