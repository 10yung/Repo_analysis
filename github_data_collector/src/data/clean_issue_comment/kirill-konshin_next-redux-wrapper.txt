Im currently on next and nextreduxwrapper I have the wrap on the appjs import React from react import App from nextapp import ApolloProvider from reactapollo import apolloClient from apollo import Provider from reactredux import withRedux from nextreduxwrapper import makeStore from store class MyApp extends App static async getInitialProps Component ctx const pageProps ComponentgetInitialProps await ComponentgetInitialPropsctx return pageProps return const Component pageProps store thisprops return ApolloProvider clientapolloClient Provider storestore Component pageProps Provider ApolloProvider export default withReduxmakeStore debug true MyApp But when I connect my pages to Redux I get this error img width altScreen Shot at PM src How can I get around this I have a question regarding the implementation of redux in getInitialProps in appjs In order to make the new next api work getStaticProps getServerProps one must get rid of getInitialProps in appjs Otherwise Warning You have optedout of Automatic Static Optimization due to getInitialProps in pagesapp Is there any way using the store provider outside the appjs and at the same time using the store within the components of static pages or am I too optimistic As I understand the store must be provided on each SSide call Which makes static pages basically impossible It would be helpful to have some documentation of what the library is and why the library should be used near the top of the readme ie a sort of justification for the librarys existence Also perhaps an explanation of when not to use the library There is some information like this scattered throughout the readme but you have to read the whole thing to find it For example I found these snippets really helpful but theyre all the way at the bottom of the doc The main purpose of this library is to make sure actions are consistently dispatched on all pages on client and on server from getInitialProps function If you need a static website you dont need this lib at all because you can always dispatch at client side on componentDidMount just like you normally would with bare React Redux and let server only serve initialstatic markup Hi everyone I am wondering if there is a reason why nextreduxwrapper declares its own NextJSPageContext and NextJSAppContext instead of merging the context props store and isServer into the NextPageContext interface Background I am having problems setting up my app component with TypeScript because the App class from nextapp can only be extended when getInitialProps takes an AppContext as its parameter Augmenting NextPageContext would be a nice solution in my opinion Also store and isServer would be available on every NextPages getInitialProps context without any extra configuration If this approach is welcome I would be happy to create a PR In this case I would augment NextPageContext and deprecate NextJSPageContext and NextJSAppContext NPM hoistnonreactstatics