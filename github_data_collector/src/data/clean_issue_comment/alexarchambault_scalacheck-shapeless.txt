None Updates orgscalacheckscalacheck from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalacheck artifactId scalacheck details details summaryApplied Migrationssummary githubtypelevelscalacheckv sha fc dde d fdf a d b a d d details labels semverpatch scalafixmigrations Updates orgscalacheckscalacheck from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention scalasteward in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalacheck artifactId scalacheck details details summaryApplied Migrationssummary githubtypelevelscalacheckv sha fc dde d fdf a d b a d d details labels semverpatch scalafixmigrations Updates comtypesafesbtmimaplugin from to Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention scalasteward in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId comtypesafe artifactId sbtmimaplugin details labels semverminor I have a case class with a lot of members that yields well to generating an Arbitrary instance using scalacheckshapeless but some individual field values Id like to discard as invalid For that purpose I wanted to generate the instance using this library call filter on it and make the result of that implicit I couldnt find anything in the documentation explaining how to generate an instance without making it implicit After some trial and error I came up with scala implicit val arbitraryFoo Arbitrary Foo val baseArbitrary implicitly Strict MkArbitrary Foo valuearbitraryarbitrary baseArbitraryfiltervalidationCheck Is there a better way Im missing If yes it should be added to the documentation If not this seems useful and can be implemented see semiauto generic derivation in Circe as an example Im using and I was pretty sure it had been working fine but today I got a ClassCastException when shrinking a case class that contained a field which was a Refined type My guess is it has something to do with it being a value class Here is the exception Caused by javalangClassCastException javalangInteger cannot be cast to eutimepitrefinedapiRefined at comgeneiousnucleusservicejobapigeneratorsJobStatusGeneratorsanonmacro fromJobStatusGeneratorsscala at comgeneiousnucleusservicejobapigeneratorsJobStatusGeneratorsanonmacro fromJobStatusGeneratorsscala at orgscalacheckderiveMkShrinkanonfungenericProduct MkShrinkscala at scalacollectionimmutableStreammapStreamscala at orgscalacheckderiveMkShrinkanonfunlazyxmap MkShrinkscala at orgscalacheckShrinkanon shrinkShrinkscala at orgscalacheckderiveMkHListShrinkanonfunhcons MkShrinkscala at orgscalacheckShrinkanon shrinkShrinkscala at orgscalacheckderiveMkHListShrinkanonfunhcons MkShrinkscala at scalacollectionimmutableStreamappendStreamscala at scalacollectionimmutableStreamConsWrapperhashcoloncoloncolonStreamscala at orgscalacheckderiveMkHListShrinkanonfunhcons MkShrinkscala at orgscalacheckShrinkanon shrinkShrinkscala at orgscalacheckderiveMkHListShrinkanonfunhcons MkShrinkscala at scalacollectionimmutableStreamappendStreamscala at scalacollectionimmutableStreamConsWrapperhashcoloncoloncolonStreamscala at orgscalacheckderiveMkHListShrinkanonfunhcons MkShrinkscala at orgscalacheckShrinkanon shrinkShrinkscala at orgscalacheckderiveMkHListShrinkanonfunhcons MkShrinkscala at scalacollectionimmutableStreamappendStreamscala at scalacollectionimmutableStreamConsWrapperhashcoloncoloncolonStreamscala at orgscalacheckderiveMkHListShrinkanonfunhcons MkShrinkscala at orgscalacheckShrinkanon shrinkShrinkscala at orgscalacheckderiveMkShrinkanonfunlazyxmap MkShrinkscala at orgscalacheckShrinkanon shrinkShrinkscala at orgscalacheckShrinkshrinkShrinkscala at orgscalacheckPropanonfunforAll Propscala at orgscalacheckPropshrinker Propscala at orgscalacheckPropanonfunforAllShrink Propscala at orgscalacheckPropanonfunapply Propscala at orgscalacheckPropFromFunapplyPropscala at orgscalacheckPropresult Propscala at orgscalacheckPropanonfunforAllShrink Propscala at orgscalacheckPropanonfunapply Propscala at orgscalacheckPropFromFunapplyPropscala at orgscalacheckTestworkerFun Testscala at orgscalacheckTestanonfuncheck Testscala at orgscalacheckTestanonfuncheck adaptedTestscala at orgscalacheckPlatformrunWorkersPlatformscala at orgscalacheckTestcheckTestscala at orgscalatestenablersUnitCheckerAssertingCheckerAssertingImplcheckCheckerAssertingscala more Here is the relevant code scala sealed trait JobStatus def kind String def dateTime OffsetDateTime def messages immutableSeq String def progress Percentage final case class RunningdateTime OffsetDateTime messages immutableSeq String progress Percentage extends JobStatus transient override val kind String RunningKind scala object CommonRefinedTypes type Percentage Int Refined IntervalClosed W T W T object Percentage extends RefinedTypeOpsNumeric Percentage Int scala object CommonRefinedTypeGenerators implicit val arbPercentage Arbitrary Percentage numericintervalClosedArbitrary implicit val shrinkPercentage Shrink Percentage shrinkFromPercentage private def shrinkFrom A Refined B B Shrink ops RefinedTypeOps A B Shrink A Shrink a shrinkavalueflatMap shrunk opsfromshrunkfold Streamempty Stream scala import comgeneiousnucleusserviceutilgeneratorsCommonRefinedTypeGenerators trait JobStatusGenerators implicit val arbRunningJobStatus Arbitrary Running MkArbitrary Running arbitrary implicit val shrinkRunningJobStatus Shrink Running MkShrink Running shrink I wonder if theres a way to set seed for all the random values Maybe not a ScalaCheckShapeless bug per se but after switching from Scala with Xlint enabled I began getting unused value warnings for implicit Arbitrary instances for Shapeless tagged types in scope To illustrate scala buildsbt name sample version scalaVersion scalacOptions Xfatalwarnings Xlint Nil libraryDependencies comchuusai shapeless comgithubalexarchambault scalacheckshapeless Test Nil scala srctestscalaUnusedscala import orgscalacheckArbitrary import orgscalacheckScalacheckShapeless import orgscalacheck import shapelesstag import shapelesstag object Unused sealed trait Foo case class Bears String i Int Foo val gen Gen Bear implicit val arbFoo Arbitrary Int Foo Arbitraryarbitrary Int maptag Foo apply Int arbitrary Bear That works fine with but assigning to scalaVersion and recompiling results in sbtsample cleantestcompile success Total time s completed Jan PM sbtsample set scalaVersion sbtsample cleantestcompile error tmpsamplesrctestscalaUnusedscala local val arbFoo in value gen is never used error implicit val arbFoo Arbitrary Int Foo Arbitraryarbitrary Int maptag Foo apply Int error Setting Xlintunused gets this compiling with Can support for arbitrary tagged types be added to ScalaCheckShapeless I looked on your profile for a public email or means of contacting you but I could find none I just wanted to let you know that this is the first Shapeless project that Ive been able to understand just by reading its source You have done a very good job in designing your codebase I hope you continue to develop this project 