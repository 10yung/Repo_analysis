What kind of change is this Feature Summary of changes Fixes Supports writetimeout option Write timeout is supported by HTTPI but not by Savon Other information While not having the setting is limiting it can also cause issues in adapters For example when setting timeouts per operation in HTTP any timeouts not supplied will be set to seconds which can lead to unexpected surprises for users To skip noise in I am opening a separate issue concerning update of information on As stated by pcai The maintainers no longer have control of the savonrb domain name or website content so we are unable to update this inaccurate statement The savonrbcom domain WHOIS details contain following info Updated Date T Z Registrar Registration Expiration Date T Z So seemingly the domain records were updated months ago and it will expire in March Direct contact information is protected by WHOIS privacy guarding but theres helpful link to contact form Registrant Email Could somebody from savonrb team give it a shot and attempt establishment of communication via that avenue cc sos nt rubiii Please dont delete this template or well close your issue Before creating an issue please ensure you are using the latest version of savon Bug report Please ask questions on StackOverflow Questions or support requests will be closed Current behavior Savon exposes a global option unwrap which should be passed through to Gyoku In SavonOptions Tell Gyoku to unwrap Array of Hashes Accepts a boolean default to false def unwrapunwrap options unwrap unwrap end However this is not being passed through to Gyoku in the soap header module Savon class Header def initializeglobals locals gyokuoptions keyconverter globals convertrequestkeysto so the option is being ignored Fixing it is trivial module Savon class Header def initializeglobals locals gyokuoptions keyconverter globals convertrequestkeysto unwrap globals unwrap Steps to reproduce current behavior SavonClientnew soapheader languages language rubylanguage java unwrap true Expected behavior Expected header is languageslanguagerubylanguagelanguagejavalanguagelanguages Actual header is languageslanguagerubylanguagelanguageslanguageslanguagejavalanguagelanguages System information ruby version savon version Happy to make a pull request but as its a quick fix Im hoping this isnt necessary Types were not properly qualified What kind of change is this Bugfix Did you add tests for your changes Yes Ive now added a breaking test which ensures the message is properly encoded Summary of changes This fixes a bug raised in This means more recent versions of Savon do not work properly in certain specific circumstances when elements are embedded in types Other information The test is based on a realworld wsdl file in which messages are being incorrectly qualified Please dont delete this template or well close your issue Before creating an issue please ensure you are using the latest version of savon Bug report Please ask questions on StackOverflow Questions or support requests will be closed Current behavior Attributes within a nested type are no longer qualified xml xml version encodingUTF soapEnvelope xmlnsxsd xmlnsxsi xmlnstnsxxx xmlnssoap xmlnsxxxtnsBusinessSchemeCodeDSchemeCodeSchemeBranch NO BRANCH SchemeBranchBusinessType BusinessTypeNumInstalments NumInstalmentstnsBusinesstnsCreateNewBusinessWithPolicysoapBodysoapEnvelope Steps to reproduce current behavior Create any document with types with attributes and set elementFormDefaultqualified in WSDL The attributes in the nested type will not be qualified Expected behavior Create any nested document with attributes and elementFormDefaultqualified and see that attributes are qualified xml xml version encodingUTF soapEnvelope xmlnsxsd xmlnsxsi xmlnstnsxxx xmlnssoap xmlnsxxxtnsBusinesstnsSchemeCodeDtnsSchemeCodetnsSchemeBranch NO BRANCH tnsSchemeBranchtnsBusinessType tnsBusinessTypetnsNumInstalments tnsNumInstalmentstnsBusinesstnsCreateNewBusinessWithPolicysoapBodysoapEnvelope See also this example of a properly formatted document System information Mac OS Mojave ruby version savon version The bug was introduced in this PR ruby From gems gemssavon libsavonqualifiedmessagerb line SavonQualifiedMessagetohash def tohashhash path require pry bindingpry return unless hash return hashmap value tohashvalue path if hashkindofArray return hashtos unless hashkindof Hash hashinject do newhash key value if key order addnamespacestovaluesvalue path newhashmergekey value else translatedkey Gyokuxmltagkey keyconverter keyconvertertos newpath path translatedkey if usednamespaces newpath newhashmerge usednamespaces newpath translatedkey tohashvalue types newpath types newpath newpath else newhashmergetranslatedkey value end end end end There is no apparent test coverage of this area of the code I looked at adding a breaking test to specsavonbuilderspecrb however not sure how to create nested types for the test The following test passes without the fix ruby it uses the global elementformdefault option if its available do globals elementformdefault qualified locals message username luke password secret nestedattributes attr value attr value expectbuildertosto includetnsnestedAttributestnsattr valuetnsattr tnsattr value tnsattr tnsnestedAttributes end I will submit a PR to fix this shortly What kind of change is this Bug fix for Puma not starting in tests Did you add tests for your changes No but this should fix existing test failures Summary of changes There appears to be an existing bug here Options global endpoint and namespace sets the SOAP endpoint to use to allow requests without a WSDL document FailureError server IntegrationServerrun LoadError load error pumajavaiobuffer javalangreflectInaccessibleObjectException Unable to make field protected byte javaioByteArrayOutputStreambuf accessible module javabase does not opens javaio to module jruby specintegrationsupportserverrb in root specintegrationsupportserverrb in block in initialize specintegrationsupportserverrb in run specsavonoptionsspecrb in root Other information What kind of change is this Add Ruby to the TravisCI config so that the build runs the tests against the latest version of Ruby and update README accordingly Did you add tests for your changes No need to add tests Summary of changes Simple addition of Ruby to the travisyml file and corresponding README changes What kind of change is this This PR removes the nolongerused Travis setting sudo false See more at the Travis blog Did you add tests for your changes No Fixes We use Savon in production and Id like to know whether the project is still actively maintained I ask because many recent GitHub issues were closed unanswered and although the website states that Savon v is currently under development the last commit is from Dec The last release is even older January This is no offense I know that maintaining open source isnt easy I just want to make sure that we dont use an abandoned gem in production Would be great to get some insights