Im only set SQLALCHEMYBINDS for ALL of my tables and leave the SQLALCHEMYDATABASEURI as default sqlitememory I use MySQL so all uri in BINDS are like mysqlpymysqlhostpostdatabase Then I found out I cant set poolsize in SQLALCHEMYENGINEOPTIONS or I will get an error TypeError Invalid arguments poolsize sent to createengine using configuration SQLiteDialectpysqliteStaticPoolEngine Please check that the keyword arguments are appropriate for this combination of components I check out the source code in flasksqlalchemyinitapplydriverhacks I found that this is because the SQLALCHEMYDATABASEURI is leave to None then the sauri from geturi is sqlitememory then the default poolclass will be set to StaticPool This pool only hold one connection so I cant give it poolsize parameter So if I want to set the poolsize I should also set poolclass to sqlalchemypoolQueuePool It used to bother me for a few days Maybe the documentation should be more detailed From current docs I know the default poolsize is but actually the poolsize of mysql driver is so I think I can change it by passing the poolsize field to options The SQLALCHEMYDATABASEURI is not required but the docs dont mention what will happen if i leave it to default And I dont know the default poolclass has been set to StaticPool which is not what I expected FlaskSQLAlchemy SQLAlchemy Addresses the quickstart examples do what they say this tries to clarify that createall creating the SQLite database is coincidental and that in general its a utility for creating tables in a database that already exists There are many examples of people struggling to work around this limitation in flasksqlalchemy including various issues and PRs like This PR documents a simple solution to bidirectional compatibility Resolves Switches flasksqlalchemy to Azure pipelines Enables Mac and Windows CI builds Switches coverage to be similar to other pallets projects Current documentation claims that To create the initial database just import the db object from an interactive Python shell and run the SQLAlchemycreateall method to create the tables and database from yourapplication import db dbcreateall Boom and there is your database But the createall function does not seem to create the database only the tables I would like to be able to specify different SQLALCHEMYENGINEOPTIONS for every bind in the SQLALCHEMYBINDS dict It would be nice if SQLALCHEMYDATABASEURI SQLALCHEMYENGINEOPTIONS would form a configuration pair and SQLALCHEMYBINDS SQLALCHEMYBINDSENGINEOPTIONS This would greatly help to set databasespecific options when using multiple different types of databases eg MySQL SQLite MSSQL Dont know if Im alone on this one but it seems to be theres not really a documentation for this one apart from few haphazard and unsure snippets on some issues I personally do not want to move away from flasksqlalchemy in infras where multiple bindings are needed Does anyone else feel documenting this would be helpful EDIT Im currently using a structure like this to provide different MetaDatas but Im not versed enough to take account what implications this solution may have in the long run python from flasksqlalchemymodel import Model DefaultMeta from sqlalchemyextdeclarative import declarativebase from srcapp import DB as db ReplicaBase dbmakedeclarativebase declarativebaseclsModel nameModel metaclassDefaultMeta class AsMasterdbModel abstract True bindkey master class AsReplicaReplicaBase abstract True bindkey replica flasksqlalchemy support multiple connections through binds but the documentation how to use raw connections is missing The issue shows you could get the bind connection engine just using dbgetengineapp ohmybindexecute The is missing the documentation about this nice feature The createengine method requires the engineopts parameter thus causing pre code to throw TypeError exception The engineopts parameter should be optional Unable to only reflect a single table that I want to use with flasksqlalchemy there should be an option like dbreflectbinddb only table to only reflect a table from specific db