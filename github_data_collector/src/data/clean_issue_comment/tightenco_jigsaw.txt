In this situation my event listener needs to access getModifiedTime method from each page to assign lastmod value in my generated sitemap As far as I know in this case we can only iterate pages that are living inside a collection Is there a way to retrieve all pages including index page or any other pages located inside root source directory Heres my current solution almost the same as Sitemap for all collections php foreach jigsawgetCollections as collection collectcollectioneachfunction page use baseUrl sitemap sitemapaddItemrtrimbaseUrl pagegetPath pagegetModifiedTime SitemapDAILY Sitemap only for the pages located inside the root source directory php collectjigsawgetOutputPathsrejectfunction path exclude collection collection path always set to collection namename return countexplode trimpath Stristhisexclusions path eachfunction path use baseUrl jigsaw sitemap get the source path sourcePath emptytrimpath jigsawgetSourcePath path indexbladephp jigsawgetSourcePath path bladephp im on Windows sourcePath strreplace sourcePath use php filemtime sitemapaddItemrtrimbaseUrl path filemtimesourcePath SitemapDAILY Please tell me if there any better way to do this Currently it looks like Jigsaw only offers runtime highlighting Syntax highlighting using highlightjs Other projects offer build time highlighting For example Hugo uses the Go Chroma library for highlighting Can Jigsaw do something like this Im not sure this is the best way to go about it but Im proposing to add the ability to create new commands under the jigsaw name In a similar vein to my other PR however this customizes the CLI interface instead of just actions triggered on events My usecase again is easier deployments php bootstrapphp containergetJigsawclassregisterCommandRunDeploymentCommandclass In my project I extended the BuildCommand renamed it to deploy then after it completes the build process I run my deploy php use TightenCo Jigsaw Console BuildCommand class RunDeploymentCommand extends BuildCommand private jigsaw public function constructcontainer parentconstructcontainer thisjigsaw containergetJigsawclass protected function configure parentconfigure Override default name description thissetNamedeploy setDescriptionBuild Deploy your site to neocities protected function fire parentfire env thisinputgetArgumentenv thisjigsawdeployToNeocities assumes the macro trait in PR is merged thisconsoleinfoSite deployed to env sh vendorbinjigsaw deploy production Adding the macro trait to the Jigsaw class makes it much easier to extend and customize certain aspects of Jigsaw For example Im using my Neocities Package which allows me to upload deploy the compiled files using the afterBuild event Using the macro I can abstract away the implementation and provide an installable plugin which can easily be used php Jigsawmixinnew NeocitiesJigsawDeployment eventsafterBuildfunction Jigsaw jigsaw if jigsawgetEnvironment production jigsawdeployToNeocities This PR aims to alter how configurations are merged so that the process feels a bit more intuitive and requires less duplication of config settings between environments The docs lay out how configurations can be merged and this works fine for toplevel keyvalue pairs I ran into an issue however when I wanted to add a filter to a collection so that only posts w a published metadata value were included in my production build Doing so was easy and just involved the following php configproductionphp php return collections posts filter function item return itempublished However this resulted in the rest of the collections settings from my base configphp being discarded This is because the current implementation simply does a collectmerge which seems to only consider the toplevel keyvalue pairs The code Im submitting alters the way that configs are merged to use arrayreplacerecursive which should crawl through the entire config arrays including nested arrays and Collections and only replace the keyvalue pairs that are different keeping any that have not been altered Example php configphp return baseUrl production false siteName Blog Starter Template siteAuthor Author Name collections collections posts author Author Name sort date path blogfilename configproductionphp return baseUrl production true collections posts filter function item return itempublished merged config current behavior Note how collectionsposts does not contain author sort or path baseUrl production true siteName Blog Starter Template siteAuthor Author Name collections collections posts filter function item return itempublished merged config new behavior Note how collectionsposts contains author sort path and filter baseUrl production true siteName Blog Starter Template siteAuthor Author Name collections collections posts author Author Name sort date path blogfilename filter function item return itempublished Current issues needing advice the configphp used for testing includes a function defn that triggers an error if that config is loaded more than once As such each individual test in the project passes but the overall suite fails bc I neededwanted to use that config for testing and so its loaded in different tests which triggers the Fatal error cannot redeclare I would like advice from project maintainers as to whether that function is important to the tests ie its presense is testing something or just something incidental that could be refactored so that that loading configphp in different tests doesnt cause PHP to kvetch if users are depending on the current behavior to discard values in subarrays this could introduce a breaking change I was aiming for minimal API changes but I dont love some of the changes I made to achieve that For example making mergeConfigs a static method seems to make sense but then doing new staticconvertStringCollectionsToArray in that method in order to reuse the convertStringCollectionsToArray instance method seems hacky and gross I would also love some advice or suggestions on how to clean that up without making too big of a mess Because of these issues Ive marked this PR as a WIP Other than these though its fully functional Thanks so much for the great project I hope that youll find this change useful Hi It would be great to be able to access relativePath or the file object in the collection custom closure So we could do something like php docs path functionpage return pagegetCollectionpagegetRelativePathpagegetFilename docs path collectionrelativePathfilename If accepted I could do the following merge request in the file CollectionDataLoaderphp php private function getMetaDatafile collection data filename filegetFilenameWithoutExtension baseUrl databaseUrl extension filegetFullExtension collectionName collectionname collection collectionName source filegetPath modifiedTime filegetLastModifiedTime relativePath filegetRelativePath return compactfile filename baseUrl extension collection collectionName source modifiedTime relativePath This pull request updates the illuminatecontainer illuminatesupport and illuminateview dependencies from to That change in turn updates some other underlying dependencies like illuminateevent and nesbotcarbon but this doesnt appear to have any effect One test was using the old helper functions so I updated those from arrayget to Arrget All tests that were passing before this change are still passing MarkdownExtraTestcorrectlyparsesinglelinehtmlmarkupinmarkdownfile and SnapshotTestallbuiltfilescontainexpectedcontent were both already failing As someone new to Jigsaw it was a little weird to me that I had to first run build before I could run server Most static site generators Ive ran across run build as part of server This merge request calls build by default when doing serve passing in the environment Ive also included a nobuild option in serve We are looking to build a composer library which will consist of blade components that we can reuse among different jigsaw projects My questions are Is this something doable in the current version of jigsaw If yes what would be the correct way of doing this Any suggestions towards the right direction would be really appreciated Thanks I wanted to be able to use Jigsaw to generate documentation within an existing project that already uses Laravel libraries But obviously I wouldnt want any current files to be overriden I also didnt want to have a separate set of composer files and vendor directory since my project already contained most of Jigsaws needed dependencies But jigsaw init doesnt provide an option to install to a subdirectory and if I manually created the subdirectory cded into it and did jigsaw init in there Id be duplicating libraries I think it would be really useful to be able to use it alongside an existing project in this fashion