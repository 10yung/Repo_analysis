 make C libmodules genericbuild MhomeuserDownloadsnetmapmaster CONFIGNETMAPm ODRIVERSe e NETMAPDRIVERSUFFIXnetmap modulesinstall make Entering directory usrsrclinuxheaders generic INSTALL homeuserDownloadsnetmapmasternetmapko At mainc SSL error system libraryfopenNo such file or directory bssfilec SSL error D BIO routinesBIOnewfileno such file bssfilec signfile certssigningkeypem No such file or directory DEPMOD generic make Leaving directory usrsrclinuxheaders generic make C e e install INSTALLMODPATH CFLAGSEXTRAfnopie IhomeuserDownloadsnetmapmaster IhomeuserDownloadsnetmapmasterLINUX IhomeuserDownloadsnetmapmasterLINUXsys IhomeuserDownloadsnetmapmasterLINUXsysdev DCONFIGNETMAP Wnounusedbutsetvariable g DCONFIGNETMAPNULL DCONFIGNETMAPPTNETMAP DCONFIGNETMAPGENERIC DCONFIGNETMAPMONITOR DCONFIGNETMAPPIPE DCONFIGNETMAPVALE DNETMAPDRIVERSUFFIXnetmap NETMAPDRIVERSUFFIXnetmap KSRClibmodules genericbuild make Entering directory homeuserDownloadsnetmapmastere e src make Entering directory usrsrclinuxheaders generic Building modules stage MODPOST modules make Leaving directory usrsrclinuxheaders generic gzip e enetmap No such file or directory Makefile recipe for target manfile failed make manfile Error make Leaving directory homeuserDownloadsnetmapmastere e src netmapmak recipe for target installe e failed make installe e Error Im trying to run a userspace IPv stack on top of netmap ICMPv requires the stack to listen to various multicast groups for neighbor discovery It looks like just bringing up the interface in netmap mode is insufficient to receive these packets Promiscuous mode seems overkill How do I make netmap subscribe to various multicast groups Remove peer in vethnetmapkringsdeletevna because without that subsequent call of vethnetmapkringscreatevnapeer do not create rings Hi Got on starting pktgen with veth Linux version bash BUG unable to handle kernel NULL pointer dereference at PGD b P D b PUD cd d PMD Oops SMP NOPTI CPU PID Comm fwd Tainted G OE Hardware name MSI MS AG MS BIOS V RIP netmapdoregif x ab x netmap Code eb b b e f c c c ff f b c b f f c d b b b c f RSP ffffba fabaf EFLAGS RAX RBX ffffa a fef RCX ffffa a fef RDX RSI RDI RBP ffffa a e cd R R R R R R R R ffffa a fef FS fa e cf GSffffa a eb knlGS CS DS ES CR CR CR cd CR e Call Trace netmapioctl xc x a netmap waitonbit x x outoflinewaitonbit x e xb kmalloc x e x netmapioctllegacy x c x e netmap netmapioctl xfa x a netmap taskworkadd x e x linuxnetmapioctl xb x netmap memcgroupcommitcharge x x lrucacheadd x b x handlemmfault xf f x e dofilpopen xa x dovfsioctl xa x ksysioctl x x x sysioctl x x dosyscall x b x a entrySYSCALL afterhwframe x xa RIP x fa df d b Code b b b d c c c ff ff ff ff c e f f b f d f ff ff c b d b d f d RSP b ffd fa eb EFLAGS ORIGRAX RAX ffffffffffffffda RBX RCX fa df d b RDX c RSI c c RDI RBP c c R R R ffd fa e R R c R fa e e c R R Modules linked in vethOE netmapOE fuse ip trpfilter ip tREJECT nfrejectipv xtconntrack ipset nfnetlink ebtablenat ebtablebroute bridge stp llc ip tablenat nfnatipv ip tablemangle ip tablesecurity ip tableraw iptablenat nfnatipv nfnat nfconntrack nfdefragipv nfdefragipv libcrc c iptablemangle iptablesecurity iptableraw ebtablefilter ebtables ip tablefilter ip tables sunrpc ufs edacmceamd kvmamd ccp sndhdacodecrealtek kvm sndhdacodechdmi sndhdacodecgeneric sndhdaintel sndhdacodec sndhdacore sndhwdep irqbypass sndseq crct difpclmul crc pclmul pcspkr sp tco sndseqdevice sndpcm mxmwmi ghashclmulniintel sndtimer i cpiix snd k temp fam hpower pcccpufreq soundcore wmi binfmtmisc acpicpufreq radeon i calgobit drmkmshelper ttm drm ixgbe crc cintel atageneric serioraw pataacpi too r cp mdio mii ptp pataatiixp ppscore dca CR end trace f fadbd RIP netmapdoregif x ab x netmap Code eb b b e f c c c ff f b c b f f c d b b b c f RSP ffffba fabaf EFLAGS RAX RBX ffffa a fef RCX ffffa a fef RDX RSI RDI RBP ffffa a e cd R R R R R R R R ffffa a fef FS fa e cf GSffffa a eb knlGS CS DS ES CR CR CR cd CR e I would like to get virtio building I am building against Im on a build of netmap from April The virtio patch has not changed since then so currently there is no reason to expect latest master to fix this as far as I can tell It seems more likely that isnt supported this is a problem for me because because is longterm support it will be difficult to move to another kernel version For that reason I would like to be sure what the problem is first I get this error WARNING There were problems building the external driver virtionetc Please note that this is not related to the netmap patches that were not applied Disabling virtionetc I have attached configlog maybe that will help confirm the issue If you could give me some ideas thatd be great I may have to take the performance hit and stay with emulated drivers configlog Update I tried master and it did not correct the issue I am using real tek NIC r I cloned this repo and tried to build it configure make got the following warning WARNING r c sources not found Disabling driver Wonder how to fix it Thanks Hi there I want to use it for faster NAT perfomance and of course reduce the CPU load We are using VLANs Can i setup VLANs via ip link set eth vf mac e ba aabb and after creating new virtual eth interface do ip link add link eth name vlan type vlan id ip link add link eth name vlan type vlan id ip a add dev vlan ip a add dev vlan YYYY and then use simple rule iptables t nat A POSTROUTING s o vlan j SNAT tosource YYYY Will it add performance Thank you Hello Ive been having an issue with Netmap in genericqdisc mode on Linux where it will spontaneously stop making space available on the output rings The input rings continue receiving packets Whats peculiar about this bug is that I have separate processes using different rings on the same interface All encountered this issue within the same second They work fine until throughput reaches some threshold and then the output rings seem to stop advancing Before the issue starts nmringspace reports somewhere between and available slots Once the issue starts the available space quickly drops to and never recovers All processes see this behavior at the same time The processes have the CAPNETADMIN capability set with setcap There is nothing from netmap in the syslog when this occurs Im not entirely sure what specifically triggers this behavior Ive so far only seen it when running an application that makes use of netmap Ive tried creating a synthetic test to reproduce it but havent had luck yet but my application does so fairly consistently Do you have any ideas on what might cause this behavior or how I could diagnose it Thanks ixgbe igb disabled Dear maintainers we are building a highthroughput application build on top of blockmon to monitor realtime traffic from a large network For this purpose we have servers with different hardware configurations and after many hours of testing we came to the conclusion that the network card is correlated to the performance in terms of packet loss of both our application and the reference pktgen The obvious point here is the chipset of these cards we suspect it to be responsible for the differences in performance We tested the following ixgbedriven Intel NICs Intel X AT copper released Q PCIe controller X Intel X T copper released Q PCIe controller X Intel X SR fiber released Q PCIe controller we have tested both an Intel and HPE version of this The thing that brought us on track are onboard NICs in our servers which performed much better than the PCIe cards After suspecting the bus at first see eg we acquired an external X AT and were able to attain perfect performance with that one setup below This lead us to the conclusion above with the chipset being the main culprit Another thing to keep in mind is that all of these cards are dual port cards even the design of the internal NICs Some more information about our setup in case it is of relevance queues RSS ring size to ethtool G if rx local loopback and serverspanning meaning different servers sending and receiving setups at least CPU cores tested on different servers at least GB RAM tested on different servers KVM and bare metal Linux on CentOS and RHEL superficial tests done on Debian indicating same results ixgbe tested with pktgen with randomized source addresses and ports z together with the drivers hash filter this leads to even distribution over all rings netmap commit f fdf fceaab acfc a a f ca a for the sake of deployment scripts and reproducibility this is a fixed commit flow control disabled due to the way our application works this way we achieve maximum line speed Mpps with byte per packet If we enable flow control we maintain optimal packet loss at the cost of transmission speed We are wondering now if these results indicate an issue with ixgbe interfacing with certain chipsets or if we simply hit a hardware limitation also why the magic number of rings seems to yield optimal results Do you have any insights into this If you think this issue is not relevant for the netmap project feel free to close this issue and consider it as an information for others running into similar problems 