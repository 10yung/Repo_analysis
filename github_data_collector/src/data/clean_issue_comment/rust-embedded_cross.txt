Also increase timeout for the build step While unsucessfully trying to pass through some environment variables for a crate to find libs to link to within the cross container I built a simple snippet to verify env vars were correctly being read within the container Some sort of caching is going on in which if the rust code built successfully modifications to Crosstoml or the environment provided to cross are ignored In the example snippets below TESTVAR could be changed to TESTFOO in Crosstoml or the value of TESTVAR changed in the command and performing a compile would claim it was successfuloutput Finished release optimized targets in s but the previous build artifact remains instead Ive removed the old binary and run the command again It is the same old binarymodification date is exactly the same does not reflect the current time Deleting releasefingerprint remedies the issue Alternatively modifying the rust source code will also invalidate the cache raising an error if the example change on Crosstoml was performed Correcting Crosstoml from a failed compile works fine without needing to modify the rust code again Crosstoml TOML buildenv passthrough TESTVAR srcmainrs Rust fn main const envvar static str envTESTVAR printlnEnvironment Variable is envvar Command TESTVARHello World cross build targetx unknownlinuxgnu release System Manjaro Linux x cross cargo c ec d Hi Whats the best way of using cross with sccache I tried to first cross install sccache target x unknownlinuxmusl from a mac but cross ended up running cargo directly on macos instead of inside a linuxmusl docker container so the install failed I managed to install it with another docker image bash CARGOHOMEHOMEcargox unknownlinuxmusl docker run e PKGCONFIGALLOWCROSS rm e CARGOHOMEcargo e CARGOTARGETDIRtarget v HOMEcargox unknownlinuxmuslcargo v cargobin v PWDtargettargetZ i t messenserustmuslcrossx musl sh c cargo install sccache target x unknownlinuxmusl but trying to use it still failed uname a Darwin localhost Darwin Kernel Version Sun Dec PST rootxnu RELEASEX x file targetx unknownlinuxmuslreleasesccache targetx unknownlinuxmuslreleasesccache ELF bit LSB executable x version SYSV statically linked BuildID sha af ace ab bb fb fdc d b ed with debuginfo not stripped cat Crosstoml buildenv passthrough RUSTBACKTRACE RUSTLOG RUSTCWRAPPER TRAVIS CARGOHOME RUSTCWRAPPERtargetx unknownlinuxmuslreleasesccache CARGOHOMEHOMEcargox unknownlinuxmusl cross build target x unknownlinuxmusl error failed to run rustc to learn about targetspecific information Caused by process didnt exit successfully projecttargetx unknownlinuxmuslreleasesccache rustc cratename printfilenames cratetype bin cratetype rlib cratetype dylib cratetype cdylib cratetype staticlib cratetype procmacro printsysroot printcfg exit code stderr error Connection to server timed out Does cross need any extra steps to use the RUSTCWRAPPER environment variable Could you please release a new version of cross that includes This issue is blocking CI on a number of projects A build of my quite small app with no changes using cross takes seconds Using cargo build it only takes second It would be nice if a nop cross build were as fast as that so that I can have subsequent steps in my build process depend on it Currently it makes editing files further down in the build DAG very annoying because you always have to wait seconds for cross even if you didnt change anything it consumes The ARMv softfloat targets were new in rustc Sources Hi thanks for Cross its a great tool Im trying to use cross from a Mac to build a binary for Raspberry Pi armunknownlinuxmusleabihf Plain rust code works great but Im having trouble linking to a C library pigpio The error is note usrlocalbinlibgccarmlinuxmusleabihf armlinuxmusleabihfbinld cannot find lpigpio Heres what Ive done so far Built a Docker image that contains my library Ive verified that it exists roote c d usrlocallib file libpigpioso libpigpioso ELF bit LSB shared object ARM EABI version SYSV dynamically linked stripped Specified library search path by adding to buildrs printlnrcargorustclinksearchusrlocallib Ive verified that note armlinuxmusleabihfgcc Wlasneeded lots of output contains both L usrlocallib and lpigpio Im running cross via cross build target armunknownlinuxmusleabihf and in my Crosstoml have targetarmunknownlinuxmusleabihf image lynaghkarmunknownlinuxmusleabihf pigpio Within my rust program itself Im declaring the C externs rust linkname pigpio kind dylib extern C fn gpioInitialise i As far as I understand this should all work Ive done it plenty of times when compiling rust natively Hopefully I just have a typo somewhere Anyway thanks again for the great tool Aside from this linking issue its working wonderfully fatal runtime error failed to initiate panic error qemu uncaught target signal Aborted core dumped error process didnt exit successfully qemuarm targetarmv unknownlinuxmusleabihfdebugdepssheldon be signal SIGABRT process abort signal Difficult but apparently it can be done See the discussion here and the linked repo 