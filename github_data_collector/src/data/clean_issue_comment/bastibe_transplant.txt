wondering whether it would be hard to support octave given that oct py does not seem to be developed anymore last release was years ago Hi I am trying to use the transplant module in a remote linux machine Matlab is already installed there How can I give the directory to the installed matlab in the remote machine I get the floowing error after importing the module Best eng transplantMatlab Traceback most recent call last File stdin line in module File anaconda libpython sitepackagestransplanttransplantmasterpy line in init selfprocess Popenprocessarguments stdinDEVNULL stdoutPIPE File anaconda libpython subprocesspy line in init restoresignals startnewsession File anaconda libpython subprocesspy line in executechild raise childexceptiontypeerrnonum errmsg FileNotFoundError Errno No such file or directory matlab Hello I am trying to use transplant to open a python app that uses matlab runtime a i have editted the search paths for libzmq to include the locations where libzmq is installed on my computer These are my edits searchdirs osgetenvLDLIBRARYPATH or split osgetenvDYLDLIBRARYPATH or split osgetenvDYLDFALLBACKPATH or split osgetenvHOME lib usrlocallib usrlib optlocallib anacondalib I thought to edit the file after reading this post I do not have access to dlopen I am also quite new to python When running my app I get the error Error loading libzmq Undefined function or variable notfound Thanks for your attention Matlab sometimes need to be run with a modified environment This PR adds support for modifying environment variables for the spawned matlab process eg mat transplantMatlabexecutableoptmatlabR abinmatlab envdictLDPRELOADusrlib libstdcso Dear Bastian First thank you for providing pysoundfile the libsoundfile interface is a blessing The docs appear to be out of synch with the pip distribution The current documentation notes frames as supporting additional parameters eg start stop that are not in the distribution but are in the git repository Best regards Marie added class name check changed length to numel in as it is faster and more reliable in MATLAB bbe ab ff cc b cda ab f This fails when a class method name is identical to a function on the MATLAB search path For example calling the method myclassplot nargout will return the number of arguments of the MATLAB builtin plot function Thats why I added a bit more checking matlab try funType whichmsgname funType strsplitfunType if numelfunType strcmpfunType method argTemp msgargs className funType if isemptyargTemp isaargTemp className the function name corresponds to the class of the first argument resultsize nargoutmsgname end end if isemptyresultsize resultsize nargoutfun end catch resultsize end As per calling a chain of functions on large matrices or other objects makes transferring large amount of data multiple times between python and matlab eg python A mlabmyfun B mlabmyfun A C mlabmyfun B If A B and C are large matrices the above command might be limited by the data transfer It would be nice to specify per function call to keep the result in the proxy in matlab and send only a pointer to python as you are already doing it for objects For example python A mlabmyfuninproxyTrue B mlabmyfun AinproxyTrue C mlabmyfun BinproxyTrue When I run the following command the STDOUT from Matlab is not transferred python S a mlabdispS Strangely I get the output later after running a few more commands 