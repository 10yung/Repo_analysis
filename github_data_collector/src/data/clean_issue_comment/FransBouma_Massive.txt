The primarykey type must be int The data has been inserted into the database but there is still an error IDictionarystring objecttoInsert thisPrimaryKeyField ConvertToInt cmdExecuteScalar The readme makes an introduction or lightly touches on the getting started with massive However it begins with Code Please Lets say we have a table named Products You create a class like this csharp public class ProductsDynamicModel you dont have to specify the connection Massive will use the first one it finds in your config public Productsbasenorthwind productsproductid You could also just instantiate it inline as needed csharp var tbl new DynamicModelnorthwind tableNameProducts primaryKeyFieldProductID Or ignore the object hierarchy altogether csharp MassiveDBCurrentQuery But only towards the end at the bottom does it ever mention Factory Constructor One thing that can be useful is to use Massive to just run a quick query You can do that now by using Open which is a static builder on DynamicModel csharp var db MassiveDynamicModelOpenmyConnectionStringName You can execute whatever you like at that point As if it were an Oh yeah We forgot to mention My suggestion is to incorporate this sooner or closer to the top as part of the intro Possibly if they are not the same thing which why wouldnt they be idk its separated and placed towards the bottom for who knows what reason provide useexamples to clarify its design or best case scenario To me this var db is the norm and what i normally look for when messing around with database But then again thats why im here and why this tool is so useful Its because it caters to those who perform inline sql on a per use basis Why not give us that little bone at the start of the introductions rather than towards the end of that major tldr Since were all trying to find ways to streamline productivity it would be a disappoint for me to have missed that part hidden even way after insert and update I couldve potentially been stuck rewriting lines and lines of code it werent abundantly clear that hey maybe i can use something im already familiar with I tracked the problem down to the fact that the code doesnt reach the else block in MassiveSharedPerformInsert which retrieves the identity value This is because the primaryKeyFieldSequence value is an empty string The source of that value is defaultSeqencyName in MassiveSqlite Setting that value to any nonempty string results in the primary key property being set on the inserted object as expected From my perspective this is a workaround and probably even a hack but I dont know what primaryKeyFieldSequence is supposed to do despite code comments that explain it I also dont know if this functionality is covered by unit tests Ill check when I further investigate the table Schemaproperty issue I recently posted I just wanted to post this issue and workaround right away The function is not recognized by SQL Server Compact Name of function CONCATData type if known I have updated the code which I submitted as PR so that it supports stored procedure and function calls in Oracle Only my own copy As of now I havent updated the PR and I havent made a new PR csharp var db new DynamicModelScottConnectionStringOracle ODPNET dynamic procResult dbExecuteProcedurefindMin new x y outParams new z dynamic fnResult dbExecuteFunctionfindMax new x y returnParams new returnValue dynamic squareResult dbExecuteProceduresquareNum ioParams new x These work The return value procResultz fnResultreturnValue squareResultx is an int in all cases I was never aiming to support things like cursor results in Oracle Im not sure that would ever really have a place in Massive I am and was aiming to add handy lightweight support for calls to ExecuteNonQuery for CommandTypeStoredProcedure with support for parameter names and directions As I expected and hoped this basically just involved installing Oracle XE getting it working getting the Massive Oracle tests working and then some minor changes to MassiveSPcs which was always meant to be DB agnostic code and porting the equally minor parameter name and direction support from SQL Server file to the Oracle file as well The new code also supports csharp var db new DynamicModelScottConnectionStringOracle ODPNET dynamic intResult dbExecuteSqlBlockbegin a end outParams new a dynamic dateResult dbExecuteSqlBlockbegin d SYSDATE end outParams new d DateTimeMinValue These work The return types for intResulta and dateResultd are correct int and DateTime respectively As in the original PR all typing is done implicitly as Massive already does it In the case of output parameters this requires an otherwise unnecessary placeholder value of the desired type The version of Single at line of MassiveSharedcs with signature public virtual dynamic Singlestring where params object args does not support a columns argument This would actually be very useful to have I think so because I needed it in the project Im working on and added it for myself and used it a lot and I think so because All supports columns and the other explicit version of Single supports columns and all the rather cryptic variants of Single which are dynamically supported by TryInvokeMember support columns Its easy to add an optional columns param with default value to this method which is what I did and this would link against existing code but I think from your contribution guidelines it should be added as another new method The method TryInvokeMember is currently handling way too much and the interface of the method is very limiting so adding additional elements to the method like arguments for a where clause leads to problems which are hard to solve If each method which is currently handled by the method is moved to its own method like we have now as eg Single its more manageable and each method can then also receive the right arguments properly See Hi Looking at these two lines it looks like the code assumes identities will be Int s So this would fail if instead its an Int for example Hi Ive been trying to port Massive to net core still some work to be done since there are a lot of base classes missing Would be good to see a port of that in this repo Very helpful MicroORM so far but it seems that there is no support for output bind variables at all for oracle the simplest example BEGIN END wont do a thing it seems that all bind variables are set as input Is there even a possible way for an elegant implementation for output bind variables for oracle 