Could you create a new release of your library with java compatibility Thx a lot Baptiste Do you plan to release a version for Scala x for dicesorensen metric your example of night natch you are showing a value of however according to the algorith the expected answer for the same two strings is could you please elaborate on how you got links for reference The current implementation is too slow it is a recursive algorithm without memoization which means a lot of states are repeatedly computed Try this dynamic programming version that guarantees Omn performance scala def distx String y String Int val d ArrayofDim Int xlength ylength for i to xlength di i for j to ylength d j j for j to ylength i to xlength if xi yj dij di j else dij mindi j dij di j dxlengthylength No real changes just sbt update and change spec dependency no longer supports orgspecs mutableSpecificationWithJUnit changed to orgspecs mutableSpecification Changed version to not sure what the versioning policy is The Scaladoc link in the README is returning a Fixes Apart from including the missing characters z Z and in their respective classes and filters this change should yield equal results as the upstream version I didnt want to change the functionality drastically not to break existing code but this trait is actually reinventing the character classes already available on Scalas Char class These include isLower isUpper toLower isLetterisDigit etc I would suggest deprecating this trait and use the following existing alternatives compatible with the StringTransform type filterisLetter instead of filterAlpha filterNotisLetter instead of filterNotAlpha filterisDigit instead of filterNumeric filterNotisDigit instead of filterNotNumeric filterisLetterOrDigit instead of filterAlphaNumeric filterNotisLetterOrDigit instead of filterNotAlphaNumeric filterisLower instead of filterLowerCase filterNotisLower instead of filterNotLowerCase filterisUpper instead of filterUpperCase filterNotisUpper instead of filterNotUpperCase maptoLower instead of ignoreAlphaCase They are not equivalent but they are part of the standard library and I would argue that they are much more accurate than the existing filters The character ranges in comrockymaddenstringmetrictransform scala private val Ascii NumericRange x x F private val ExtendedAscii NumericRange x x F private val Latin NumericRange x x F private val LowerCase NumericRange x x A private val Numbers NumericRange x x private val UpperCase NumericRange x x A do not include all the intended characters because the apply method of Scalas NumericRange is exclusive ie it does not include the upper bound of the defined range Consequently LowerCase does not include z UpperCase does not include Z Numbers does not include etc Thus when using withTransform with any of the predefined filters in this object these characters will be discarded from comparison 