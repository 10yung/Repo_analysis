If I call pqueue clear at the beginning of my function to avoid uncontrolled increase of the tasks the pqueue seems to ignore this command The queue is still complete full after call await queueclear How to reliable delete clear the queue Hello Thank you for the great work with this library We tried upgrading from version to and are getting the following TypeScript compiler errors nodemodulespqueuedistindexdts error TS Property doesIntervalAllowAnother implicitly has type any because its get accessor lacks a return type annotation private get doesIntervalAllowAnother nodemodulespqueuedistindexdts error TS Property doesConcurrentAllowAnother implicitly has type any because its get accessor lacks a return type annotation private get doesConcurrentAllowAnother We are using TypeScript and have noImplicitAny true set The type definitions for version declared them as private variables typescript private readonly doesIntervalAllowAnother private readonly doesConcurrentAllowAnother The type definitions for version now declare them as private getters typescript private get doesIntervalAllowAnother private get doesConcurrentAllowAnother Maybe thats why TypeScript treats them differently Thank you for you help These libraries are awesome and make building consistent asynchronous code much easier But is there a mechanism in this library or one of the other plibraries to have a queuelike data structure like this that implements some type of backpressure so that if a queue gets to a certain size the function calling the add method will pause until the queue size has reduced When using it in our angular app Angular build for production optimization will fail An unhandled exception occurred Unexpected token keyword default I think it has something to do with terser which was used by angular cli I am currently using pqueue in combination with Puppeteer What I want to achieve is to add the current function to the queue if an exception gets thrown I am running with concurrency set to I have the following snippets getAccounts is simply a method for parsing a json file nodejs async init let accounts await thisgetAccounts accountsmapasync await queueadd thistest await queueonIdle consolelogDone nodejs async test const browser await puppeteerlaunchheadless false try const page await browsernewPage await pagegotothisurl if MathfloorMathrandom throw new ErrorSimulate error await browserclose catch error await browserclose await queueadd thistest consolelogerror When it goes into the catch the queue just stops I am not sure if my implementation is right But it also does not execute consolelogDone As far as I can tell there is no way to get a promise that resolves for all items that are currently in the queue to finish even if new ones are added later A hacky workaround is const p qadd which does get you this but at the expense of adding an item to the queue Hi im finding when running the queue for extended periods there appear to be handles held memory not reducing over time ie ts import PQueue from pqueue class Cow beef number constructori number thisbeef i async function testqueue any for let j j j const promises consolelogStart j for let i i i promisespush queueaddasync const arr for let i i i arrpushnew Cowi await Promiseallpromises async const queue new PQueue concurrency await testqueue consolelogCompleted while true When executing this locally with node the memory used before populating the queue is mb but after executing this sits at around mb with the cause of this simple object I would have expected the function completion to mark the items in the functions closure as safe for GC In my bigger use case there are objects being delete from a queue elsewhere but theyre stuck in memory when dumping the memory Am I using the queue incorrectly Should I be calling a clear of some kind bound to a completion event See So say I queue up async functions then want to cancel maybe the fifth one How would I go about doing that Looked through the code and couldnt find a remove or delete Looks like there is a dequeue but that seems to work similar to the Array pop method Fixes 