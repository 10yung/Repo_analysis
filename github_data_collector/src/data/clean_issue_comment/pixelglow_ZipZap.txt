How to set the firstExtraField This line pointing to a static int sign Should this be signature I hope to increase the compression encryption zip Hi When archiving ZipZap an empty archive is created This can be remedied by setting the Build Setting Skip Install to No for Release builds Please consider this change Kind regards Remco Poelstra Xcode has appletvsimulator installed and idBD F C D C B A C F A CE matches xcodebuild error Unable to find a destination matching the provided destination specifier platformtvOS Simulator idBD F C D C B A C F A CE Ineligible destinations for the ZipZap tvOS Framework scheme platformtvOS iddvtdeviceDVTiOSDevicePlaceholderappletvosplaceholder nameGeneric tvOS Device platformtvOS Simulator iddvtdeviceDVTiOSDeviceSimulatorPlaceholderappletvsimulatorplaceholder nameGeneric tvOS Simulator Device This PR aims to eliminate the Zipperdown security vulnerability Relevant Github issue Files inside of an archive may contain path traversal characters in their filename When unarchiving these SSZipArchive follows sequences which can lead to a file being written to an unexpected destination This could potentially lead to RCE under the worst of circumstances such as overwriting a javascript file that the app is going to execute This addition sanitizes dotdotslash characters from the destination path of files being unarchived mimicking the default behavior of the Archive Utility found on macOS as well as most other popular desktop archiving clients Consider an archive containing the following file UserstestDesktophellotxt When unarchived using the current release of ZipZap the directory traversal characters are followed causing unarchived files to break out of the current directory resulting in UserstestDesktophellotxt being created Compare this to the default behavior of macOSs Archive Utility which does not follow directory traversal characters The same archive results in extraction restricted to the current directory currentpathUserstestDesktophellotxt From a security standpoint discarding directory traversal characters when unarchiving should be the default behavior of this SDK Hello A security issue has been discovered in another popular Archiving SDK ZipArchive which can lead to arbitrary file overwrite The archive can potentially contain path traversal file names which can lead to files being written outside of their intended destination This could potentially lead to RCE under the worst of circumstances such as overwriting a javascript file that the app is going to execute See ZipArchive is floating the idea of a secure unarchiving method that strips out filenames containing path traversal symbols Your thoughts Open ZipArchive is OK but when I create data from ZZEntry I just get nil Please help PS The zip file created by ZipZap is OK however the other zip files created by other software will be error Code like this bool UnzipFileAtPathchar srcFile char destPath NSFileManager fileManager NSFileManager defaultManager NSString zipFilePath NSString stringWithUTF StringsrcFile NSString destDirPath NSString stringWithUTF StringdestPath if destDirPath hasSuffix destDirPath NSString stringWithFormat destDirPath NSLog ZipZap Begin Unzip File zipFilePath NSError error NSData rawZipData fileManager contentsAtPathzipFilePath NSLog ZipZap Raw Zip Data Length li rawZipDatalength ZZArchive zipArchive ZZArchive archiveWithDatarawZipData error error if error NSLog ZipZap Error happened while open zip file Error zipFilePath error localizedDescription return NO else NSLog ZipZap Zip Entries lui zipArchiveentriescount for ZZArchiveEntry entry in zipArchiveentries NSString entryFilePath destDirPath stringByAppendingStringentryfileName ifentryfileMode SIFDIR fileManager createDirectoryAtPathentryFilePath withIntermediateDirectoriesYES attributesnil errornil else NSError createDataError NSData newData entry newDataWithError createDataError ifcreateDataError newData nil newDatalength NSLog ZipZap Create Data from ZZEntry Error lui createDataErrorcode return NO else NSUInteger length newData length NSLog ZipZap File Length lu entryfileName length NSError writeDataError BOOL ret fileManager createFileAtPathentryFilePath contentsnewData attributesnil ifret NSLog ZipZap Write Data Error Error li entryfileName writeDataError code NSLog ZipZap Unzip File OK return YES I see that you start support from iOS however I run it on iOS and works fine Is there any drawback If i use it on iOS 