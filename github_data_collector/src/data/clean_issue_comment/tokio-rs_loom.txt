Data race is undetected in code below curiously with additional release operations the issue is reported as expected rust use loomsyncArc use loomsyncatomicAtomicUsize use loomsyncatomicOrdering use loomthread fn main loommodel let a ArcnewAtomicUsizenew let b aclone let thread threadspawnmove unsafe aunsyncload bstore Release bstore Relaxed bstore Release threadjoinunwrap Fixes This branch adds support for mock RwLocks This PR is the same as PR but updated to build against the current master All credit is due to pop Conceptually Path is a stack that gets pushed and popped a lot of times during the test run Elements of this stack contain small Vecs and VecDeques which are allocateddeallocated a lot of times We can reduce the number of these allocations by storing thread states and writes in a SliceVec a container that can store slices of different lengths in a single chunk of memory with random access pushing and popping After these SliceVecs quickly grow to appropriate size there are no more allocations Performance impact Using tokioexecutor loom tests at revision as a benchmark execution time compared to loom master fell s s Main changes To deal with the lifetime requirements Execution is now recreated for each iteration only Path is created once in the beginning Every bumpallocated object now has a lifetime which can be annoying CausalCell state is moved to the object Store Apart from that the changes are mostly mechanical The remaining big source of periodic allocations is but it doesnt seem worth the effort to move it inside the objectStore Again using tokio executor loom tests as a benchmark LOOMMAXPREEMPTIONS RUSTFLAGScfg loom cargo test release lib in the tokiotokioexecutor dir execution time went down from s to s compared to master Instead of logging a large header what do you think about creating a separate tracing span representing each iteration with the iteration number as a field That way everything recorded during that iteration will be annotated with the iteration number This isnt necessarily a blocker for merging this PR so it might be worth doing in a followup branch Originally posted by hawkw in Followup from I think ideally it would be fantastic if we had a span structure like this for all events loom records testnamemyloomtestexecutioniter threadid something happened note that recording the test name may be difficult without asking the user to provide it or providing a test macro Fixes Oh snap when did this move to the Tokio org Well all the same I added support for RwLock I dont know if this is done but the tests which I got from the RwLock docs pass so Im happy I would love some feedback The isreadlocked and iswritelocked functions cause Already Locked panics so I am not using them at the moment Let me know if you want more info on that cc pickfire Im interested in providing choice to the modelchecker Im doing this so I can simulate a lossy channel each message can either be delivered or lost From what I understand of this library it may be possible to do this using the existing primitives However I dont know what the idiomatic approach would be Does anyone have guidance on how to do this Thanks josevalim kindly pointed me to another paper on stateless model checking Optimal dynamic partial order reduction We probably should investigate to see how it fits