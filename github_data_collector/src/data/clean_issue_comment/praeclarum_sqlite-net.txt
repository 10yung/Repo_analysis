 No such table exception But it queries the wrong table name It sometimes fails to find a table when I want to log another crash I did not spell it wrongly It seems to be random and happens for a few users every day which makes the app crash Only on iOS When It happens when I try to log a crash in the Maincs file before the app terminates In the iOS project in Maincs in ApplicationMain I am trying to reach the table DeviceSetting from inside the catch block in order to log another crash try UIApplicationMainargs null AppDelegate catch Exception e LogUtilsLogExceptionForReporte Unhandled exception Making the app crash EnumsLogLevelError throw I dont know which crash it is given that logging it fails I cannot reproduce it locally But we are logging crashes for million users I get many different spellings it seems random how it chooses to misspell it Exception SQLiteException no such table DevieSettingg Exception SQLiteException no such table DeviceSettigg Exception SQLiteException no such table DviceSetting Exception SQLiteException no such table DevaeSSeting Exception SQLiteException no such table eeiceSetting It has not always been there I am not sure but I think it started appearing after we targeted iOS Exception Exception SQLiteException no such table DevieSettingg Exception SQLiteException no such table DevieSettingg at SQLiteSQLiteCommandExecuteDeferredQueryd T MoveNext x d cc x in eaa ee e f c ad e f ba fedaf b d f c b f at SystemCollectionsGenericList T AddEnumerable SystemCollectionsGenericIEnumerable T enumerable x b c x a in e f a e a e ba f f d f ba fedaf b d f c b f at SystemCollectionsGenericList T ctor SystemCollectionsGenericIEnumerable T collection x ec x in e f a e a e ba f f d f ba fedaf b d f c b f at SystemLinqEnumerableToList TSource SystemCollectionsGenericIEnumerable T source x ca e x in baba df c fe cfc f f ba fedaf b d f c b f at SQLiteSQLiteCommandExecuteQuery T x bd c x b in eaa ee e f c ad e f ba fedaf b d f c b f at SQLiteTableQuery T ToList x f x f in eaa ee e f c ad e f ba fedaf b d f c b f at SQLiteTableQuery T FirstOrDefault x f x in eaa ee e f c ad e f ba fedaf b d f c b f at SQLiteTableQuery T FirstOrDefault SystemLinqExpressionsExpression TDelegate predExpr x x f in eaa ee e f c ad e f ba fedaf b d f c b f at MyProjectSQLiteDataManagersSQLiteDeviceSettingManagerGetLoginSettingsById SystemString id x f x in feda d c a e f ba fedaf b d f c b f at MyProjectSQLiteDataManagersSQLiteDeviceSettingManagerGetDeviceLog MyProjectEnumsLogLevel logLevel x f e c x b in feda d c a e f ba fedaf b d f c b f at MyProjectSQLiteDataManagersSQLiteDeviceSettingManagerAddToDeviceLog SystemString log MyProjectEnumsLogLevel logLevel x f dbc x in feda d c a e f ba fedaf b d f c b f at MyProjectUtilsLogUtilsLogMessageForReport SystemString message MyProjectEnumsLogLevel logLevel x ae x f in feda d c a e f ba fedaf b d f c b f at MyProjectiOSPinCodeViewControllerOnSuccessfullyLoggedInb x ab x d in db c c b f c bd f ba fedaf b d f c b f at SystemRuntimeCompilerServicesAsyncMethodBuilderCorecThrowAsyncb SystemObject state x c c x b in e f a e a e ba f f d f ba fedaf b d f c b f at FoundationNSAsyncSynchronizationContextDispatcherApply x b a x f in e e c b c bc cc eeae fa f ba fedaf b d f c b f at wrapper managedtonative UIKitUIApplicationUIApplicationMainintstring intptrintptr at UIKitUIApplicationMain SystemString args SystemIntPtr principal SystemIntPtr delegate x cfc x f in e e c b c bc cc eeae fa f ba fedaf b d f c b f at UIKitUIApplicationMain SystemString args SystemString principalClassName SystemString delegateClassName x c x in e e c b c bc cc eeae fa f ba fedaf b d f c b f at MyProjectiOSApplicationMain SystemString args x e x in db c c b f c bd f ba fedaf b d f c b f Project Setup sqlitenetpcl library version Visual Studio Enterprise for Mac Version build Installation UUID c dc b f a c f e GTK Raleigh theme XamarinMac d f b Package version Mono Framework MDK Runtime Mono c f ca bit Package version NuGet Version NET Core SDK SDK usrlocalsharedotnetsdk Sdks SDK Versions MSBuild SDKs LibraryFrameworksMonoframeworkVersions libmonomsbuildCurrentbinSdks NET Core Runtime Runtime usrlocalsharedotnetdotnet Runtime Versions XamarinProfiler Version Location ApplicationsXamarin ProfilerappContentsMacOSXamarin Profiler Updater Version XamarinAndroid Version Visual Studio Enterprise Commit xamarinandroidd c Android SDK UsersjanettholstLibraryDeveloperXamarinandroidsdkmacosx Supported Android versions None installed SDK Tools Version SDK Platform Tools Version SDK Build Tools Version Build Information Mono monomono d b e JavaInterop xamarinjavainteropd f LibZipSharp grendelloLibZipSharpd f a LibZip nihatlibziprel b cf fd ProGuard xamarinproguardmaster d SQLite xamarinsqlite a d XamarinAndroid Tools xamarinxamarinandroidtoolsd cb Microsoft Mobile OpenJDK Java SDK UsersjanettholstLibraryDeveloperXamarinjdkmicrosoftdistopenjdk Android Designer EPL code available here Android SDK Manager Version Hash c b Branch remotesorigind Build date UTC Android Device Manager Version Hash d b af Branch remotesorigind Build date UTC Xamarin Designer Version Hash a bfd Branch remotesorigind Build date UTC Apple Developer Tools Xcode Build C XamarinMac Version Visual Studio Enterprise Hash e c b d Branch xcode Build date XamariniOS Version Visual Studio Enterprise Hash e c b d Branch xcode Build date Xamarin Inspector Version Hash db Branch release Build date Mon Jul GMT Client compatibility Build Information Release ID Git revision ee ad ec ae a a ee c ac a b Build date Build branch release Xamarin extensions bd ef e f c cfc a fd fadcb Operating System Mac OS X Darwin Darwin Kernel Version Thu Oct PDT rootxnu RELEASEX x I need to know the amount of free space in the db file and found I can run select from dbstat and get info out of the virtual table is there some way to do this using sqllitenet I tried to create a mock instance of the dbstat record and run using the Query method but I get an error that the dbstat table does not exist Is there another way to read the of free space in the file I use the sqlitenet in wpf platform when I compile the project the esqlite dll will be copy to the x folder and x folder in output directory but when I running the esqlite dll will be delete sometimes I dont know why this happens and it doesnt have to happen I use the net framework is Nuget reference is PackageReference The sqlitenet version is Hey I spent good minutes on it so it will be nice to show better exception If we place in InsertAsyncobject obj collection we will get argument exception Method takes object than can we check its implemented iterface and show suitable message in exception Regards tldr By moving away from PropertyInfoSetValue to dynamic stronglytyped delegates we can speed up large query retrieval by Simple Syntax vs Fast Speed SQLitenet is very easy to use and has great facility for mapping from SQLite tables into object properties However for very large queries response times can be a bit on the slow side Method var orders connQueryOrderDetailselect from OrderDetail If OrderDetail is million records or so then performance is very poor Retrieved records in ms Why does it take seconds to query from a local database This should be FAST Traditionally this can be overcome by doing some lowlevel work and stepping through a SQLite query on your own Method var stmt SQLite Prepare connHandle select from OrderDetail var orders new ListOrderDetail while SQLite Stepstmt SQLite ResultRow var id SQLite ColumnIntstmt var orderId SQLite ColumnIntstmt var productId SQLite ColumnIntstmt var quantity SQLite ColumnIntstmt var name SQLite ColumnStringstmt var orderDetail new OrderDetail Id id OrderId orderId ProductId productId Quantity quantity Name name ordersAddorderDetail uuuugh Its much more cumbersome syntax but the performance boost is undeniable Retrieved records in ms Thats more like it It runs in a tenth of the time Both are using SQLitenet with the same query on the same database so why is Method so slow InLoop Reflection as the Root of Evil The core of the problem lies in the fact that the inside of SQLitenets ExecuteDeferredQuery loop makes a call to PropertyInfoSetValue This is a rather heavyweight call that uses Reflection every time its called to make sure that the generic object being passed into it is compatible with the type held by that particular PropertyInfo So how do we fix this Is there a way to have the syntactic sugar of Method with the speed of Method The good news is yes there are two alternatives that people have used to approach this problem FastMember The fastest method is to emit dynamic IL and link into that at runtime This is the method used by the excellent FastMember library However there are NET platforms such as XamariniOS and Unity IL CPP that dont support such shenanigans so Id rather not go down that road StronglyTyped Delegates The second method isnt quite as fast as dynamic IL but its still reasonably fast It involves doing all of the typechecking reflection outside of the query loop and creating stronglytyped delegates to set property values Jon Skeet wrote a blog post that explains this technique as well as a Stack Overflow answer that summarizes nicely This is the same technique used to add this same speedboost to Googles Protobuf library Im not doing everything quite the same way as he is to be honest I had a hard time following all of it but I think the version I created is hopefully easy enough to read and similarly zippy at runtime Note that we avoid quite a bit of confusion by simply skipping the Enum case and falling back to the original method of simply calling ColumnSet on every row For enumerated types then my pull request will simply fall back on the old and slow method of calling PropertyInfoSetValue on every row Yes its slow but at least its not going to be any slower than it was before this change and maybe someone else can help figure out the blackmagic voodoo to make stronglytyped delegates for enums function Measuring Performance So what does this all boil down to Well lets check the performance Prior to my pull request Method Retrieved records in ms Method Retrieved records in ms After FastColumnSet Method Retrieved records in ms Method Retrieved records in ms Still not nearly as good as the handcreated mappings but seconds down to seconds is still an impressive boost Theres a lot of junk I needed to put in there to make Nullable types work properly ugh If I skip Nullable checks and defer nullable types back to the legacy method then it makes things a tad bit simpler but I dont think the speed increase is that significant it shaves off maybe ms or so Feedback What do you all think Is this clean enough generalpurpose enough to make it into the main trunk Im certainly open to input on how to make this all cleaner it was a bear getting this all to work properly but Im very very thankful for a comprehensive unit test suite in SQLitenet Kudos for that Hello Not even sure if this is an issue but since I couldnt find any documentation anywhere I figured this was the best place to ask I received the following exception which I assume was due to an attempt by thread to readwrite while another thread was readwriting Is SQLiteNET not threadsafe Do I need to synchronize access myself csharp Fatal error SystemAccessViolationException Attempted to read or write protected memory This is often an indication that other memory is corrupt at SQLitePCLSQLite Provideresqlite NativeMethodssqlite preparev IntPtr undefined IntPtr undefined Int undefined IntPtr ByRef IntPtr ByRef at SQLitePCLSQLite Provideresqlite NativeMethodssqlite preparev IntPtr undefined IntPtr undefined Int undefined IntPtr ByRef IntPtr ByRef at SQLitePCLSQLite Provideresqlite SQLitePCLISQLite Providersqlite preparev IntPtr undefined SystemString undefined IntPtr ByRef SystemString ByRef at SQLitePCLrawsqlite preparev SQLitePCLsqlite undefined SystemString undefined SQLitePCLsqlite stmt ByRef SystemString ByRef at SQLitePCLrawsqlite preparev SQLitePCLsqlite undefined SystemString undefined SQLitePCLsqlite stmt ByRef at SQLiteSQLite Prepare SQLitePCLsqlite undefined SystemString undefined at SQLiteSQLiteCommandPrepare at SQLiteSQLiteCommandExecuteScalar SystemInt SystemPrivateCoreLib Version Cultureneutral PublicKeyToken cec d bea e at SQLiteTableQuery SystemCanon SystemPrivateCoreLib Version Cultureneutral PublicKeyToken cec d bea e Count at SQLiteTableQuery SystemCanon SystemPrivateCoreLib Version Cultureneutral PublicKeyToken cec d bea e CountSystemLinqExpressionsExpression undefined at SQLiteAsyncTableQuery cDisplayClass SystemCanon SystemPrivateCoreLib Version Cultureneutral PublicKeyToken cec d bea e b SQLiteSQLiteConnectionWithLock undefined at SQLiteAsyncTableQuery cDisplayClass SystemCanon SystemPrivateCoreLib Version Cultureneutral PublicKeyToken cec d bea e SystemInt SystemPrivateCoreLib Version Cultureneutral PublicKeyToken cec d bea e b at SystemThreadingTasksTask SystemInt SystemPrivateCoreLib Version Cultureneutral PublicKeyToken cec d bea e InnerInvoke at SystemThreadingTasksTaskccctorb SystemObject undefined at SystemThreadingExecutionContextRunFromThreadPoolDispatchLoopSystemThreadingThread undefined SystemThreadingExecutionContext undefined SystemThreadingContextCallback undefined SystemObject undefined at SystemThreadingTasksTaskExecuteWithThreadLocalSystemThreadingTasksTask ByRef SystemThreadingThread undefined at SystemThreadingTasksTaskExecuteEntryUnsafeSystemThreadingThread undefined at SystemThreadingTasksTaskExecuteFromThreadPoolSystemThreadingThread undefined at SystemThreadingThreadPoolWorkQueueDispatch at SystemThreadingThreadPoolWaitCallbackPerformWaitCallback I keep hitting a wall implementing tables because I am using types that arent specifically defined in your mapper For instance we are using an Option type for nullable items If I add that to a data model public Optionstring OptionalString get set that will fail because its not handled The same goes for NodaTimes date objects and simple to mapped objects These things are easily serialised and stored if theres a mechanism for defining these types Without it I have to do a heap of boilerplate adding extra fields to convert to correct objects private Optionstring optional Ignore public Optionstring Optional get optional set optional value optionalString valueValueOrDefault public string optionalString get optionalValueOrDefault set optional valueSomeWhens stringIsNullOrEmptys Is it possible to make this happen Am I missing something Fix comment of SQLiteConnectionTrace It would be cool if we have Source Link support to get firstclass debugging experience The bug was reported in a similar way under ToListAsync ToArrayAsync and CountAsync throw an exception when under Android called However the exception is thrown in debug and release It makes no difference whether breakpoints are set or not With iOS the calls work without problems JavaUtilConcurrentModificationException Examples var query await databaseTableTWherex xId idToListAsync var query await databaseTableTWherex iIdsContainsxdToListAsync Tested XamarinForms and sqlitepcl XamarinForms and sqlitepcl XamarinForms and sqlitepcl XamarinForms and sqlitepcl Last working framework XamarinForms Enviroment Win Visual Studio Android min version Api Android target version Api 