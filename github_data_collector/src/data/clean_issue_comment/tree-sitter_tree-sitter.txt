Thanks for creating TreeSitter its really useful for our project Would it be possible to create a CHANGELOG or add a release note what has changed in a new version Looks like supertypes defined in the JS DSL are missing from the grammar creation docs and grammarschemajson as well Creating a separate ticket from the inspiration since that was a question and these are bugdoc fixes treesitterbashs grammarjson has many nodes like type FIELD name body content type SYMBOL name statement Nothing in to grammarschemajson allows for type FIELD Should I add extend the definition of rule to include JSON fieldrule required name type content properties name type string type type string pattern FIELD content ref definitionsrule Not sure if Im simply not understanding how to use prec or if theres a bug but Heres the relevant part of my grammar listitem seq choice valuestr keyword newline valuestr prec keyword S Given this lol asd LOL lolasd It correctly resolves it as valuestr keyword valuestr But if I remove the it thinks all three are valuestr I feel like it should pick keyword first if possible I was working on trying some rules and I found treesitter didnt stop and keep allocating memory Here is the source code The branch is infinitememoryallocation Could you try shell treesitter generate treesitter parse examplefile and check the memory usage of treesitter Is that a bug or the problem of my grammar definition I tried getcolumn but it didnt work as I expected So I just put lexergetcolumnlexer at the beginning of scan function to check the behavior c bool treesitterchamexternalscannerscan void payload TSLexer lexer const bool validsymbols lexergetcolumnlexer But then for every input it never stops and gives any result neither My treesittercli version is Is anybody interested in joining forces in writing TCL grammar Im trying to implement a quite complicated grammar using treesitter Im getting compiler warnings like this nodegyp rebuild CCtarget Releaseobjtargettreesittercoccinellebindingsrcparsero srcparserc warning implicit conversion from int to uint t aka unsigned char changes value from to Wconstantconversion count reusable true REDUCEsymmetavariables productionid srctreesitterparserh note expanded from macro REDUCE VAARGS Everything is then built without errors but the grammar obviously is not working I think it is due to definitions like this one there are more uses of uint t in that files It would be good if treesitter would support more productions and if the number of productions is more than maximum supported it would be good to have a compile error Im attaching the grammar Im using now grammarzip Are there any options for syntax highlighting code on GitHub with treesitter Perhaps a Chrome plugin that does client side rendering This would be a game changer Also are you aware of any plansprogress on proper VSCode integration not a thirdparty plugin Alas most folks use VSCode instead of Atom today The only link I can find is buried under ContributingPublished Packages