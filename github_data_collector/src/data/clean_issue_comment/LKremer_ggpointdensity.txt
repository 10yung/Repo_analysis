Hi thanks for the work on this very useful package This might be a dumb thought but I was wondering if it would be possible to incorporate jittered points probably through geomjitter as an option Im not sure if it would be better to calculate the density before or after jittering too Thanks again Great work on this package One challenge I often face is that Ill want to export a plot as an SVG for the final version but each point is rendered as an individual object which makes the files unwieldy One solution to this problem is to render the the entire plot as vector graphics except for the point later which is rendered as a raster This is implemented in the ggrasr package Would you consider adding a raster option to statpointdensity The ideal use scenario would be to call statpointdensitygeom pointrastr but Im not sure how to get that to get the pointrastr geom to export Another solution would be to create a another geom geompointdensityrastr which would serve this purpose Heres my hacky solution for now using VPetukhov s code from here DrawGeomPointRast functiondata panelparams coord narm FALSE rasterwidthNULL rasterheightNULL rasterdpi if isnullrasterwidth rasterwidth parfin if isnullrasterheight rasterheight parfin prevdevid devcur p ggplot GeomPointdrawpaneldata panelparams coord devid CairoCairotyperaster widthrasterwidthrasterdpi heightrasterheightrasterdpi dpirasterdpi unitspx bgtransparent gridpushViewportgridviewportwidth height gridgridpointsxpx ypy pch ppch size psize name pname gp pgp vp pvp draw T gridpopViewport cap gridgridcap devoffdevid devsetprevdevid gridrasterGrobcap x y width height defaultunits native just cleftbottom GeomPointRast ggplot ggproto GeomPointRast ggplot GeomPoint drawpanel DrawGeomPointRast diamonds ggplotaesxcarat y depth statpointdensitygeom GeomPointRast scalecolorviridisc geompointdensity using methodkde d due to large number of points k This adds the ndensity stat for use in faceted plots as suggested in See below for an example diamonds ggplotaesxcarat y depth statpointdensityaescol statndensity scalecolorviridisc facetwrapcut geompointdensity using methodkde d due to large number of points k When plotting millions of points counting the number of neighbors of each point is extremely slow The current algorithm calculates the pairwise distance for all points This could be optimized for instance with this approach Other ideas are welcome Would it make sense to create a computed statistic to show the normalizedrelative number of neighbors per group to the max nearest neighbors r ie datarneighbors datanneighbors maxdatanneighbors 