Test ninja t inputs i d ninja The bread and butter of nonmainstream tools these days is having a couple of comparison pages that compare and contrast their own product with the main known ones These typically go a couple links away from the home screen and function as landing pages for anyone trying to understand the new software in terms of the old And the author typically explain where their own product shines and where it cannot yet PRs accepted etc compete I came here to say that and to try to find what build system Chromium uses or used to use in concert with the then newly popular linker gold Hi There is one problem when using ninja on the desktop when compiling large projects in low memory conditions with active swapping the desktop may completely freeze Fedora Workstation guys discuss ways to improve desktop interactivity in lowmemory situations A typical case that causes a state of low memory poor interactivity and even complete freezing is a compilation of large projects It seems that there is already an option to increase interactivity l N do not start new jobs if the load average is greater than N I suggest also using options based on the use of PSI in addition to the l option PSI is a new metrics that appeared in Linux About PSI PSI metrics allow accurate estimation of io and memory pressure My suggestion is to add new CLI options psimem N do not start new jobs if PSI memory pressure someavg is greater than N psiio N do not start new jobs if PSI io pressure someavg is greater than N I would like to run a ninja with the options psimem and psiio so that with lowmemory conditions the minimum responsiveness of the desktop is maintained This should not be difficult to implement the necessary numbers can be taken from the files procpressurememory and procpressureio Im running a CI where patches sometimes have their timestamps in the future Mesonninja fails to compile patches where the times are in the future The workaround is to just update the time on all the files find exec touch Not really sure if this is a meson issue a ninja issue or even a python issue based on other bug reports Sorry if this is a duplicate My searching didnt find a bug report that had a final resolutionworkaround Example mainc c includestdioh int mainint argc char argv printfHello there n return mesonbuild meson projecttutorial c executabledemo mainc touch a m t mesonbuild meson builddir The Meson build system Version Source dir homejplsekDocumentsninjatimehello Build dir homejplsekDocumentsninjatimehellobuilddir Build type native build Project name tutorial Project version undefined C compiler for the host machine cc gcc cc Ubuntu ubuntu Build machine cpu family x Build machine cpu x Build targets in project Found ninja at usrbinninja ninja C builddir ninja Entering directory builddir Regenerating build files The Meson build system Version Source dir homejplsekDocumentsninjatimehello Build dir homejplsekDocumentsninjatimehellobuilddir Build type native build Project name tutorial Project version undefined C compiler for the host machine cc gcc cc Ubuntu ubuntu Build machine cpu family x Build machine cpu x Build targets in project Found ninja at usrbinninja Regenerating build files The Meson build system Version Source dir homejplsekDocumentsninjatimehello Build dir homejplsekDocumentsninjatimehellobuilddir Build type native build Project name tutorial Project version undefined C compiler for the host machine cc gcc cc Ubuntu ubuntu Build machine cpu family x Build machine cpu x Build targets in project Found ninja at usrbinninja ninja error manifest buildninja still dirty after tries Expectation To either compile anyways similar to using a Makefile or to fail on its first try and provide an error message related to the time being an issue ctest knows how to get diagnostic information from a bunch of different unit test frameworks but apparently not the custom one ninja is using This change should ensure we have full test output Hello I finally upgraded to Mac OS Catalina and due to the changes in Gatekeeper the version of ninja on the Github releases page is now blocked from running v There doesnt appear to be a way to verify command line apps individually on Catalina you can only disable it entirely I may have misunderstood the instructions on the webpage I found I installed via brew instead and that version runs fine I am mostly reporting this issue for anyone else who has a problem with this as I couldnt find mention of it already On macOS the linker doesnt assemble debug info for an executable you need to call dsymutil for that separately ninja rule generatedebug command dsymutil in build testdSYM generatedebug test That builds the testdSYM directory fine However ninja t clean fails bash ninja t clean Cleaning ninja error removetestdSYM Directory not empty files Is there a way to insert a r flag for the clean target Or should the default clean target just work on directories Currently in processing has two options in and innewline This means that some common separators eg separator windows copy r n for some older library tools or comma for some older linker tools cannot use in directly and have to rely on other tools to effectively replicate in with a new separator As a suggestion if there was a variable inseparator default space that was used to separate in tokens this could then be used to support all options relatively easily including the current innewline variant