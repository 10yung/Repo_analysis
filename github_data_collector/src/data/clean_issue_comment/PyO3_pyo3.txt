I am developing from Linux Mint using cargo nightly da b d and running into the following issue I copied the simple example code from to an example repository However as soon as I enable the new function with new I get the following linking error on linux On windows it compiles without a problem I also tested upgrading from to the alpha version while changing the syntax properly The error is the same The error can be reproduced using the following github actions workflow In summary cargo test and cargo bench do not work on linux but cargo build release does All three of the above commands work on windows It is not used in Python core should not be used in user code and will be removed in Python METHNOARGS functions should have type PyCFunction instead of PyNoArgsFunction and take NULL as the second argument The AsPyRef trait was stripped down considerably methods with withmut intopy intomutpy are gone The changelog should mention how to rewrite code using them or if removal was an oversight they should be reinstated Could there be an os independent wrapper around things like PySetPythonHome Its not the most rustic of ffi interfaces and the sizes change between windows and linux After creating a new exception using rust createexceptionmymodule MyException ExceptionClass It is natural that I would want to make it available as an import within my python module python from mymodule import MyException However in order to do this I had to do some deep Kung Foo action rust pymodule fn mymodulepy Python m PyModule maddMyException pygettypeMyException It would be nice to have an easier API for this rust pymodule fn mymodulepy Python m PyModule maddexceptionMyException I had an idea how to support extracting for pyclasses automatically for T Clone It also has really nice error messages if the user attempts to extract a nonclone pyclass see the ui test Closes It is much cleaner to be able to choose a local venv in runtime rather than rely on packages being globally installed I am trying to orchestrate python modules being executed using user input data then forwarding results etc The test testdatetimecheck fails from time to time with an error like testdatetimecheck stdout thread testdatetimecheck panicked at called Resultunwrap on an Err value PyErr type Py x d PhantomData src libcore resultrs note run with RUSTBACKTRACE environment variable to display a backtrace It could be that this occurs only on Windows with Python and pganssle Do you have any idea what could cause this Bug Reports Hi guys Im working on a Python module to be used in a Blender addon Im getting a weird panic with MacOS Catalina The weird thing about it is that if I run Blender from the command line it loads fine but if I run it from the icondock something in pyo deriveutilsmakemodule fails Python version is bundled with Blender and I have confirmed that its the same version running on both situations I dont know much about MacOS but there shouldnt be any difference on how its run right Could enviroment variables make pyo fail Heres the backtrace panguso is my module Thread Crashed Dispatch queue comapplemainthread libsystemkerneldylib x fff a a fa pthreadkill libsystempthreaddylib x fff a bbc pthreadkill libsystemcdylib x fff a ab abort libsystemcdylib x fff a a b abort panguso x e stdsysunixabortinternalh f b bc panguso x e c stdsyscommonutilaborth dd fd c d cf panguso x e c rustpanic panguso x e bed stdpanickingrustpanicwithhookh a e cd e panguso x e rustbeginunwind panguso x e c corepanickingpanicfmth df bc c c panguso x e coreresultunwrapfailedh f ff ebd be panguso x e a a pangupanguhf a c c ff panguso x e d pyo deriveutilsmakemoduleh a aa d orgblenderfoundationblender x ec d PyImportLoadDynamicModuleWithSpec orgblenderfoundationblender x ec d impcreatedynamic orgblenderfoundationblender x eb cfcd PyMethodDefRawFastCallDict orgblenderfoundationblender x eb ca PyCFunctionCall Environment Your operating system and version MacOS Catalina Your python version bundled with Blender How did you install python eg apt or pyenv Did you use a virtualenv No its bundled with Blender Your rust version rustc version nightly Are you using the latest pyo version Have you tried using latest master replace version xy with git PyAny T where T Clone conversion should be implementd for all T PyClass Clone though I dont know its possible rust pyclass deriveClone struct Attr inner u implsource pyo FromPyObjectsource for Attr fn extractob source pyo typesPyAny pyo PyResultAttr let cls Attr pyo PyTryFromtryfromob Okclsclone 