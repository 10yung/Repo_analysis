This defers putting a slice back into the pool ingester push path to prevent panicking Error calls which reference the underlying labels This defers returning an allocated slice to its pool until after use Previously we saw panics on Error calls which held references to the underlying timeseries label set Thanks for sending a pull request Before submitting Read our CONTRIBUTINGmd guide Rebase your PR if it gets out of sync with master What this PR does This PR implements the Prometheus API alerts and rules endpoints in ruler It adds a GRPC service to the ruler to allow for an implementation that works when rules are sharded across multiple rulers Which issues this PR fixes Fixes Checklist Tests updated x Documentation added x CHANGELOGmd flagParse was called twice previously first to get configfile value to parse the config file and second to parse remaining command line parameters overwriting values from config file Unfortunately that confuses command line parameters that accept multiple values eg memberlistjoin or experimentaltsdbblockrangesperiod in In this PR we get configfile via a separate FlagSet which doesnt report any error or usage to avoid calling flagParse on default FlagSet twice This should not be visible to end user in any way This PR adds export of aggegate metrics from TSDB bucket store used by Querier component This PR uses same approach as and before that It builds on and moves code related to aggegating and sending metrics into pkgutilmetricshelpergo file Checklist x Tests updated x CHANGELOGmd updated the order of entries should be CHANGE FEATURE ENHANCEMENT BUGFIX I found this surprising make clean docker rmi quayiocortexprojectcortex quayiocortexprojecttestexporter quayiocortexprojectbuildimage devnull true rm rf cmdcortexuptodate cmdtestexporteruptodate buildimageuptodate cmdcortexcortex cmdtestexportertestexporter cache go clean go downloading githubcomlibpq v go downloading githubcomMastermindssquirrel v f cf go downloading githubcomgoopenapierrors v go downloading githubcomhashicorpgomsgpack v Perhaps related to Added links to the google groups and meetings notes Signedoffby vineeth vineethpothulapatioutlookcom gouthamve An optimization was made to TSDBs postingsseries lookup to reduce query latency in cases where a regex is used for a label matcher This change and the corresponding issue should be ported to the ingester chunk lookup code since the optimization was made to TSDB code and not PromQL cc gouthamve When the experimental blocks storage is used the ingester module initialization initIngester may take several time to replay the WAL Until the module initialization is not completed the HTTP server loop is not started so readiness probe requests GET ready will hang Once the module initialization is completed all GET ready requests are processed but for most of them the deadline has already been reached and they fail as soon as its checked apparently the first place hitting it is in the lifecycler CheckReady Example of errors levelerror ts T Z callerlifecyclergo msgerror talking to the KV store ringingester errGet context canceled This is not a real issue but the error log may deceive the user What this PR does Currently theres an hardcoded s as blocks sync interval TSDB storage Its quite a lot I believe we dont even need such an highfrequency sync interval at least not as default so Im proposing to allow to configure it and set an higher default Thanos default is m Ive set m which should be more than enough for the Cortex use case Ive also received an error from the linter because the rununtilRepeat error wasnt checked so I took the change to refactor it moved to UserStore since it belongs to it renamed cortexqueriersyncseconds to cortexquerierblockssyncseconds and customized the buckets default values are too low for this operation in a mediumlarge cluster Which issues this PR fixes NA Checklist Tests updated x Documentation added CHANGELOGmd updated the order of entries should be CHANGE FEATURE ENHANCEMENT BUGFIX When using TSDB we get peruser created and removed series from TSDB metrics This affects cortexingestermemoryseriescreatedtotal and cortexingestermemoryseriesremovedtotal This PR also renames shipperMetrics to tsdbMetrics and registers the same registry to TSDB and TSDB shipper component Registration of prometheus registry now happens only after TSDB initialization is finished in order to fix a panic where metrics were collected while TSDB was still initialized This PR builds on PR so Files changed also shows changes from there Ill rebase once if is merged Update now rebased