Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details details summaryMaintainer changessummary This version was pushed to npm by knappi a new releaser for handlebars since your current version details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details when i run an upgrade to upgrade the packages from my metalsmith project i got at least this warnings is there any maintaining of metalsmith or should i move on to a newerother static generator gatsby eg warning metalsmith graymatter coffeescript CoffeeScript on NPM has moved to coffeescript no hyphen warning metalsmithassets recursivereaddir minimatch Please update to minimatch or higher to avoid a RegExp DoS issue thank you Update package dependencies Remove indexjs to generate site obsolete and do so with metalsmith CLI and metalsmithjson Update src to use Markdown not HTML source and update links to link to the generated html files Make the links relative so you can preview file pages in the browser Hi Ajedi Zearin This PR swaps chalk for Turbocolor Turbocolor will give you a small perf boost as it loads x faster and applies styles x faster than chalk for the same API pre Load Time chalk ms turbocolor ms All Colors chalk opssec turbocolor opssec Chained Colors chalk opssec turbocolor opssec Nested Colors chalk opssec turbocolor opssec pre Cheers Summary I have refactored Metalsmith to use asyncawait I m looking for feedback What do you think Motivations ES class I find these classes much easier to read write and understand Notes Although it was temping to convert methods like clean to use getters and setters I did not alter their current API No arguments returns the value and passing arguments sets the value ES constlet I love the certainty that const provides I love the predictable scope that let provides I never liked how var lends itself to occasionally surprising and hardtodebug behavior or clever code that intentionally leverages such behavior which is a barrier to understanding the code quickly asyncawait I find async and await code easier to read write and understand It reads top to bottom clearly marks which operations are asynchronous and make normal use of try catch Notes generators I think generators are cool and simple to understand in principle but sometimes difficult to understand in practice Switching to asyncawait also removes the need for unyield and thunkify dependencies which both made it harder for me to understand how Metalsmith worked although they are also cool and allowed unbelievable performance gains in Metalsmith Notes promises I similarly feel that Promises are simple to understand in principle but often difficult to understand in practice Nesting and callbacks force me to constantly read back and forth through scopes to understand what s going on instead of top to bottom like plain boring synchronous code The fact that asyncawait is built on Promises while allowing such a radically simpler code structure is pretty fantastic I haven t converted all the syntax ie I m still using require and moduleexports instead of import and export Last Remarks No changes to Metalsmith s API All existing tests pass Except one I couldn t get the no new required test to pass However you can definitely omit new when calling Metalsmith and all the other tests do so Performance seems to be about the same But I am not an expert at performance analysis benchmarksmetrics or any of that other mathy stuff If you are good at that stuff I d love to get performance data that s more detailed than what the test suite shows If this is a good candidate for Metalsmith v let me know Im unable to understand the output of even specialized log plugins like metalsmithlogger I seem to end up with multiple object Object files in which I cant seem to resolve How does one figure out what data is being passed internally GraphQL does this part really well Encountering this error node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code It is coming from AM node UnhandledPromiseRejectionWarning Unhandled promise rejection rejection id Error ENOENT no such file or directory scandir optbuildrepoappcompanycontent due to this code moduleexports Metalsmithdirname sourcepathresolvedirname appcompanycontent source directory the source path appcompanycontent ofcourse doesnt exist But the promise rejection should be gracefully handled and not let the node process crash as the warning seem to indicate which would start to happen in the upcoming node versions PS However it is not clear if Metalsmith core can take care of this kind of promise rejections or if user should do something about it Issue Hi there It would be great to allow dealing with metalsmith plugins in a more functional way by allowing plugins to return a modified files object andor global metadata object rather than modifying it in place This would allow this type of concise syntax with arrow functions and the lodash pickBy function for the example draft plugin for instance var pickBy requirelodashpickBy function plugin return functionfiles return pickByfiles file filedraft I think this could be made a sufficiently backward compatible modification although I imagine not all plugins return null currently if the plugin return null then assume the files array and metadata object are globally mutated if the plugin returns an Object of the form files Array metadata Object then assume that both the files array and metadata object are passed in a functional style if the plugin returns another Oject then assume the files Object is passed in a functional style if the plugin is async then do the same thing with the result passed to the callback Of course its already possible to add a bit of boilerplate to plugins to do the same thing like so var pickBy requirelodashpickBy function plugin return functionfiles var newFiles pickByfiles file filedraft ObjectkeysfilesforEachkey if newFiles key files key newFiles key else delete files key But it would be great if the API encouraged a more modern approach Let me know what you think Jun