I create a custom load strategy module Draper module QueryMethods module LoadStrategy class ActiveRecordWithKlass def allowedmethod allowed ActiveRecordRelationVALUEMETHODS klass reflectonassociation allowedinclude method end end end end end It tries to decorate nil class in libdraperquerymethodsrb because markdown scopereflectonassociation is returning nil It should return the value as is Rails Draper Steps to reproduce in a view helper under apphelpers add a constant like MYCONSTANT const restart the rails server Buggy behavior apphelperstesthelperrb warning already initialized constant TestHelperMYCONSTANT apphelperstesthelperrb warning previous definition of MYCONSTANT was here This seems to be due to draper loading all the helpers so it can use the h method and then zeitwerk autoloading everything again or the other way Im not sure When we add gem draper to our Gemfile in our Rails x project it breaks our ActionControllerAPI requests by causing an empty string to be returned I believe this is due to our use of the responders gem as well We see the debugger hit the following rbenvversions librubygems gemsresponders libactioncontrollerresponderrb def toformat if get haserrors responseoverridden displayerrors elsif hasviewrendering responseoverridden defaultrender else apibehavior end rbenvversions librubygems gemsresponders libactioncontrollerresponderrb def hasviewrendering controllerclassinclude ActionViewRendering end So hasviewrendering returns true due to the injection of ActionViewRendering into the class hierarchy by Draper in the DraperCompatabilityApiOnly module This causes the defaultrender to be called and not the apibehavior which is what we need and see when we dont have the Draper gem in the Gemfile The ApiOnly module is run automatically upon gem load to temporarily add viewcontext support to ActionControllerAPI In the comments it explicitly calls this a hack and temporary solution If so there should be a way for developers to opt out of this functionality It seems like a very bad practice to modify class hierarchies just by adding a gem Is it possible to add a setting to opt out of this behavior or better make it optin PS Other than this love the gem If you arent using delegateall in your decorator draper breaks calling to compare an ActiveRecord model to a Decorator decorating an instance of the same class as the model Why does this matter why would you ever do it Not sure but rspec is trying to do it when reporting a spec failure Reproduction ruby table must exist class Widget ApplicationRecord end class WidgetDecorator DraperDecorator end widget Widgetcreate otherwidget Widgetcreate widgetdecorator WidgetDecoratornewotherwidget widget widgetdecorator Will raise NoMethodError Exception undefined method id for WidgetDecorator x fbadcf Why does it happen widget is from DraperDecoratorEquality The first thing it does is call super The super method is ActiveRecordCore That method first calls super and gets false from BasicObject Then it checks to see if widgetdecoratorinstanceofwidgetclass Because draper overrides instanceof on decorators it says that widgetdecorator is an instance of Widget Then ActiveRecord will try to compare widgetdecoratorid to widgetid and get the NoMethodException because WidgetDecorator does not delegateall or specifically delegate id so widgetdecorator has no id Why does it matter why would you do this Im not totally sure but in my actual rspec suite a failing spec triggered something in rspec to try to compare a Widget to a WidgetDecorator raising and interrupting rspec before it even got to give me details of failing test spec Im not totally sure whats going on but heres an actual exception backtrace This one involves LazyHelpers because thats in my actual app but LazyHelpers is NOT necessary to reproduce the problem detailssummarystack tracesummary pre from Usersjrochkindgemruby gemsrspeccore exerspec in top required from Usersjrochkindgemruby gemsrspeccore librspeccorerunnerrb in invoke from Usersjrochkindgemruby gemsrspeccore librspeccorerunnerrb in run from Usersjrochkindgemruby gemsrspeccore librspeccorerunnerrb in run from Usersjrochkindgemruby gemsrspeccore librspeccorerunnerrb in runspecs from Usersjrochkindgemruby gemsrspeccore librspeccorereporterrb in report from Usersjrochkindgemruby gemsrspeccore librspeccorereporterrb in finish from Usersjrochkindgemruby gemsrspeccore librspeccorereporterrb in closeafter from Usersjrochkindgemruby gemsrspeccore librspeccorereporterrb in block in finish from Usersjrochkindgemruby gemsrspeccore librspeccorereporterrb in notify from Usersjrochkindgemruby gemsrspeccore librspeccorereporterrb in each from Usersjrochkindgemruby gemsrspeccore librspeccorereporterrb in block in notify from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersbasetextformatterrb in dumpfailures from Usersjrochkindgemruby gemsrspeccore librspeccorenotificationsrb in fullyformattedfailedexamples from Usersjrochkindgemruby gemsrspeccore librspeccorenotificationsrb in eachwithindex from Usersjrochkindgemruby gemsrspeccore librspeccorenotificationsrb in each from Usersjrochkindgemruby gemsrspeccore librspeccorenotificationsrb in block in fullyformattedfailedexamples from Usersjrochkindgemruby gemsrspeccore librspeccorenotificationsrb in fullyformatted from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in fullyformatted from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in fullyformattedlines from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in formattedmessageandbacktrace from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in colorizedformattedbacktrace from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in formattedbacktrace from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in formattedcause from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in finalexception from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in finalexception from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in include from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in from Usersjrochkindgemruby gemsrspeccore librspeccoreformattersexceptionpresenterrb in from Usersjrochkindgemruby gemsdraper libdraperdecoratorrb in from Usersjrochkindgemruby gemsdraper libdraperdecoratableequalityrb in test from Usersjrochkindgemruby gemsdraper libdraperdecoratableequalityrb in from Usersjrochkindgemruby gemsactiverecord libactiverecordcorerb in from Usersjrochkindgemruby gemsdraper libdraperlazyhelpersrb in methodmissing Usersjrochkindgemruby gemsdraper libdraperlazyhelpersrb in rescue in methodmissing undefined method id for DownloadDropdownDisplay x fab a f NoMethodError pre details How to fix it I have no idea its the result of a strange interaction of several odd metaprogramming functions in both Draper and ActiveRecord Pretty unclear how to cleanly fix it In general overriding instanceof to say that the decorator is an ActiveRecord when if it doesnt use delegateall it doesnt really have the APItype of an ActiveRecord is a very dangerous thing to do But its probably there for a reason Or perhaps you should only get the instanceof override if you have delegateall that would fix this issue not sure if it would break something else Workaround If you arent using delegateall you probably still want to delegate id just to avoid messing things up in this case or any other case that might use where the operands include a Decorator and an ActiveRecord Thats what I did tested it resolves the issue The draper README examples of not using delegateall and selectively delegating methods do not show delegating id but you probably always should to avoid this issue My decorators sometimes need to access the currentuser helper from devise If I mock a current user using DeviseTestControllerHelpers signin like so ruby before do signin createuser end That works no problem My decorators that access currentuser get back that specified user when run under the spec all is good But my app has public facing pages that have no signed in user currentuser is nil If I run a spec that has not done a DeviseTestControllerHelpers signin with a user because I am trying to test the scenario where there is no loggedin user currentuser is nil and that spec tries to exersize a decorator which asks for currentuser I get the dreaded DeviseMissingWarden Devise could not find the WardenProxy instance on your request environment Make sure that your application is loading Devise and Warden as expected and that the WardenManager middleware is present in your middleware stack If you are seeing this on one of your tests ensure that your tests are either executing the Rails middleware stack or that your tests are using the DeviseTestControllerHelpers module to inject the requestenv warden object for you Very simple reproduction Devise Draper Rails ruby appdecoratorstestdecoratorrb class TestDecorator DraperDecorator def hascurrentuser hcurrentuserpresent end end specdecoratorstestdecoratorspecrb require railshelper describe TestDecorator do letdecorator TestDecoratornewObjectnew it can answer hascurrentuser do expectdecoratorhascurrentuserto be false end end That will raise the DeviseMissingWarden Is there a way to set up my decorator specs so hcurrentuser works even when I am not mocking a logged in user I want no logged in user Ideally it would be something I could set up globally that would Just Work and then specs which do want a logged in user would use DeviseTestControllerHelperssignin as ordinary If I need to do completely different mutually exclusive set up for a mocked logged in user vs no mocked logged in user currentuser should be nil that would be unfortunate But would still at least get my tests possible again I suggest including support for decorating ActiveStorage attachment Since ActiveStorage does not derive from ActiveRecord this is not automatic I currently do it by putting DrapersetupormActiveStorageAttached in a initializer Thanks Description This branch continues the work started in My plan is to fix the conflicts and extract out revert any unrelated changes Testing Run the test suite ToDos tests References Initial pull request I can define a virtual attribute in an ActiveRecord model class like ruby def virtualattr end def virtualattrval end It allows me to make calls like modelupdatevirtualattr Hi When I try to do the same for a decorated model class it fails in internal assignattribute method I think the reason is that it tries to do sendvirtualattr for the model object and does not find such a method there What is the recommended way to create virtual attributes in decorator classes so that I could do decoratedmodelupdatevirtualattr Hi Description I have the same issue as author of the issue Our app has two set of decorators top level decorators and Admin decorators Right now I have to explicitly specify with option for every decoratesassociation call inside my admin decorators This PR helps to simplify the process All associations will be decorated using decorators from the same namespace as current decorator Bonus It is now possible to decorate object with namespaced decorator using objectdecoratenamespace Admin method instead of using AdminObjectDecoratornewobject approach which is harder to automate I dont like my current implementation too much All that passing of namespace option from DecoratedAssociationinitialize deep into Decoratabledecoratorclasslooks too complicated It would be easier to build namespaced decorator class name inside DecoratedAssociationinitialize and set it as value of with option if not present This approach would look a lot cleaner but from architectural point of view it seems wrong because it is not DecoratedAssociations responsibility to build decorator class names Testing You can use any rails project that has hasmanybelongsto relation to test this feature Lets assume that you have User model that hasmany comments Sounds a bit too familiar eh ruby appdecoratorsadminuserdecoratorrb class AdminUserDecorator DraperDecorator decoratesassociation comments end appdecoratorsadmincommentdecoratorrb class AdminCommentDecorator DraperDecorator decoratesassociation user end comment Commentfirstdecoratenamespace Admin decoratedcommentclass AdminCommentDecorator decorateduser decoratedcommentuser decorateduserclass AdminUserDecorator decoratedcomment decoratedusercommentsfirst decoratedcommentclass AdminCommentDecorator ToDos Check if we need to document this feature in README I think that theres not enough tests for this feature Does anyone have any advice on what else to cover with unit tests References Issue Is there a way to wrap all attributes of a model with a decorator Similar to the way forms are wrapped with errors on the invalid form field is there a conditional way to wrap each attribute being decorated with a error For example in my model I have a dataresults of jsonb which contains a json list of which attributes have errors as well as their descriptions of what the error messages are If the there is an error present I want to wrap that attribute on the show page with the error if it is present in the dataresults I thought that a helper would be good for this possibility but Im not sure if draper should be doing this instead 