 DefaultMessageStore DefaultMessageStore boolean isInDisk checkInDiskByCommitOffsetoffsetPy maxOffsetPy Image should be SLAVE not SLVAE when broker receives a put message request after putting the message onto disk it directly calls AbstractSendMessageProcessordoResponse in SendMessageProcessorhandlePutMessageResult rather than return a normal response and send response in NettyRemotingAbstractprocessRequestCommand why The issue tracker is ONLY used for bug reportfeature request need to follow RIP process Keep in mind please check whether there is an existing same report before your raise a new one Alternately especially if your communication is not a bug report you can send mail to our mailing lists We welcome any friendly suggestions bug fixes collaboration and other improvements Please ensure that your bug report is clear and that it is complete Otherwise we may be unable to understand it or to reproduce it either of which would prevent us from fixing the bug We strongly recommend the reportbug report or feature request could include some hints as the following BUG REPORT Please describe the issue you observed ReqResp timeout execute N time What did you do The steps to reproduce producer start requestxcallback ttl timeout callback on exception execute time What did you expect to see What did you see instead Please tell us about your environment Other information eg detailed explanation logs related issues suggestions how to fix etc FEATURE REQUEST Please describe the feature you are requesting Provide any additional detail on your proposed use case for this feature DefaultMQProducerImplstart thistimerscheduleAtFixedRatenew TimerTask Override public void run try RequestFutureTablescanExpiredRequest catch Throwable e logerrorscan RequestFutureTable exception e remove this code change to DefaultMQProducerImpl static private static final Timer timer new TimerRequestHouseKeepingService true timerscheduleAtFixedRatenew TimerTask Override public void run try RequestFutureTablescanExpiredRequest catch Throwable e logerrorscan RequestFutureTable exception e Indicate the importance of this issue to you blocker musthave shouldhave nicetohave Are you currently using any workarounds to address this issue If there are some subtasks using for each subtask and create a corresponding issue to map to the sub task subtask issuenumber examplesubissue linkhere subtask description here subtask issuenumber examplesubissue linkhere subtask description here When acl is enabled I defined only one topic can be subscribed as follow globalWhiteRemoteAddresses accounts accessKey accessId secretKey accessKey whiteRemoteAddress admin false defaultTopicPerm DENY defaultGroupPerm SUB topicPerms TopicASUB groupPerms Then I defined two consumers named ConsumerA that subscribed TopicA and ConsumerB that subscribed TopicB Obviously ConsumerB dont have access to subscribe TopicB if I started ConsumerA before ConsumerB will subscribe TopicA Consumer consumerA new ConsumerA will subscribe TopicB Consumer consumerB new ConsumerB consumerAstart consumerBstart Though there would be an AclException in the remotinglog that shows no default permission for topicB consumerA could start successfully However if I started ConsumerB before ConsumerA will subscribe TopicA Consumer consumerA new ConsumerA will subscribe TopicB Consumer consumerB new ConsumerB consumerB starts first consumerBstart consumerAstart There also would be an AclExcpetion in the remotinglog that shows no default permission for topicB consumerA can not be started either Even though I can see the linux connect was established by command netstat consumer was offline and can not consume any message Is this a bug plainaclyml TopicA ConsumerA ConsumerB TopicA TopicB ConsumerB TopicB ConsumerA ConsumerB ConsumerA ConsumerB ConsumerA ConsumerB ConsumerA netstat ConsumerA mqadmin consumeProgress OffLine rocketmqconsole bug Now the jvm Namesrv running on uses CMS while the jvm Broker running on uses G Maybe we could switch from CMS to G reasons are as follows Option UseConcMarkSweepGC was deprecated in version and will likely be removed in a future release As mentioned Namesrv cannot run on JDK the reason is some options about CMS has been removed But G was introduced in Java and becomes default GC in the higher version JDKsafter version JDK The G can collect both the young and the old generation Undeniably the G doesn t perform well with small heaps However the heap memory size Namesrv uses is G it may not be small Also full GCs can be triggered when humongous objects objects over of the size of a region can t be allocated due to a lack of spaceno continuous regions available However G heap Memory for Namesrv as an example the G can still perform well According to best tuning practices heap memory is divided into about regions we can set one region M Use jmap tool to get heap dump file of Namesrv in the test environment m sasync brokers namesrv use visualvm tool to analysis the file the biggest objects are as follows Class NameRetained Heap sunmiscLauncherExtClassLoader javautilVector javalangObject javautilconcurrentConcurrentHashMap javautilconcurrentConcurrentHashMapNode class ionettybufferByteBufUtilHexUtil ionettybufferPoolThreadCache ionettybufferPoolThreadCache ionettybufferPoolThreadCache ionettybufferPoolThreadCache In summary there is no performance penalty for switching from CMS to G code like this public IndexFile getAndCreateLastIndexFile IndexFile indexFile null IndexFile prevIndexFile null long lastUpdateEndPhyOffset long lastUpdateIndexTimestamp thisreadWriteLockreadLocklock if thisindexFileListisEmpty IndexFile tmp thisindexFileListgetthisindexFileListsize if tmpisWriteFull indexFile tmp else lastUpdateEndPhyOffset tmpgetEndPhyOffset lastUpdateIndexTimestamp tmpgetEndTimestamp prevIndexFile tmp thisreadWriteLockreadLockunlock if indexFile null try String fileName thisstorePath Fileseparator UtilAlltimeMillisToHumanStringSystemcurrentTimeMillis indexFile new IndexFilefileName thishashSlotNum thisindexNum lastUpdateEndPhyOffset lastUpdateIndexTimestamp thisreadWriteLockwriteLocklock thisindexFileListaddindexFile catch Exception e logerrorgetLastIndexFile exception e finally thisreadWriteLockwriteLockunlock if indexFile null final IndexFile flushThisFile prevIndexFile Thread flushThread new Threadnew Runnable Override public void run IndexServicethisflushflushThisFile FlushIndexFileThread flushThreadsetDaemontrue flushThreadstart return indexFile version release brokera for masterconfig storePathRootDirdatarocketmqstore storePathCommitLogdatarocketmqstorecommitlog storePathConsumeQueuedatarocketmqstoreconsumequeue storePathConsumeQueuedatarocketmqstoreconsumequeue storePathIndexdatarocketmqstoreindex storeCheckpointdatarocketmqstorecheckpoint broker start detail message INFO main dLegerGroup INFO main dLegerPeers INFO main dLegerSelfId INFO main load datarocketmqstoreconfigconsumerOffsetjson OK INFO main load datarocketmqstoreconfigconsumerFilterjson OK INFO main Try to start service threadAllocateMappedFileService startedfalse lastThreadnull INFO main Try to shutdown service threadAllocateMappedFileService startedtrue lastThreadThread AllocateMappedFileService main INFO main shutdown thread AllocateMappedFileService interrupt true INFO main join thread AllocateMappedFileService elapsed timems INFO main Try to shutdown service threadPullRequestHoldService startedfalse lastThreadnull The code in MappedFileclass like this public boolean appendMessagefinal byte data int currentPos thiswrotePositionget if currentPos datalength thisfileSize try thisfileChannelpositioncurrentPos thisfileChannelwriteByteBufferwrapdata catch Throwable e logerrorError occurred when append message to mappedFile e thiswrotePositionaddAndGetdatalength return true return false 