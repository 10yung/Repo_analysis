Heres a codesandbox You can see there are two objects that should flash on and off screen one is a scene created manually by new THREEScene and the other is native r f jsx visible primitive objectsceneState visible mesh position boxBufferGeometry attachgeometry args meshStandardMaterial attachmaterial mesh You can see that after the first flash only the box reappears The scene does not I suspect this may be a Threejs issue not even sure if bug but wanted to file for visibility in case anyone else hits it Where this is affecting me is during hot reloading I lose my mounted handcreated scene during hot reloading The scene comes loading an external d model which is turned into a Scene at runtime Did you manage to implement it in your projects Just bumped up to and Im not sure if this is new or existing but doing something like group positionundefined causes this error img width altScreen Shot at PM src That may seem silly bit I had something like this jsx const MyMeshGroup position return group positionposition group const Scene return MyMeshGroup The error is cannot read property constructor of undefined because its trying to read the target prop position The error required pausing on uncaught exceptions and combing through the react tree to figure out where it was actually caused Im not sure if this should be an error case my first thought is setting prop to undefined should be a noop But then I wonder what it would mean to unset a prop like position Seems the latest v v has an issue in the TypeScript definitions Im importing Canvas as follows ts import Canvas CanvasContext from reactthreefiber However since the update this gives me a TS error TypeScript error in nodemodulesreactthreefiber has no exported member Canvas TS Importing a specific renderer directly such as reactthreefibersvg or reactthreefiberweb gives an error that no declaration files could be found Could not find a declaration file for module reactthreefiberweb nodemodulesreactthreefiberwebjs implicitly has an any type Otherwise Im very excited testing the update Amazing work seems mobile version needs expogl and unimodules installation is very hard any examples hi I want to use reactthreefiber to draw something like this elementsmapelement mesh materialelementMaterial shapeBufferGeometry mesh when count of elements update there will generate all new element again and cant dispose old geometry I try to use useEffect to solve this problem but not work like this const map useEffect return function refcurrentgeometrydispose Hi I wanted to create a simple store for my app with createContext Unexpectedly I found out that I cant access my context within the Canvas element javascript const StateContext createContextnull const store testData return StateContextProvider valuestore Controls Canvas ThreeElement Another DElement Canvas StateContextProvider When I want to access my context within the components which are wrapped in Canvas with useContextStateContext I do not get any data I tried to write the context provider as a child of the Canvas element which suddenly let me gain access to my context inside the elements I do not want to wrap my App with two single context providers one on the top level and one inside Canvas as I want to wrap my whole App into just one context provider Is there any possibility to access the context in the elements wrapped in the canvas without making a separate provider And what is causing the current behaviour What do you think about CodeSandbox CI The code using reactthreefiber is pretty visual so a possibility to play with PR changes and see what happens would help the process And well deploying reproductionexample projects is pretty boring I specifically noticed this issue when using reactspring to animate a property of a reactthreefiber component If the useThree hook is used anywhere in the tree scrolling will cause the size value to recalculate in order to update the bottom and top values If a spring going to a chained value an array of values is used that spring chain will occur again every time the size is recalculated Here is an example of what I am referring to switching on concurrent mode in the reconciler this will enable time slicing and faster rendering overall react will be able to schedule and defer updates if it detects that a fps framerate is threatened somehow optional import components this is more interesting for typescript users jsx import Mesh from reactthreefibercomponents Mesh extrashelpers Things that usually need some boilerplate could be abstracted and collected For instance controls levelofdetail etc jsx import OrbitControls from reactthreefiberextras OrbitControls enableDamping useCenter jsx import useCenter from reactthreefiberextras function useCenterref const center setCenter useState const ref useRef useEffect const box new Box setFromObjectrefcurrent const sphere new Sphere boxgetBoundingSpheresphere setCenter spherecenterx spherecentery spherecenterz return ref center something to help with simple animations other than reactspringthree new object currently primitive can project an object into the scene that is already there if you have a class prototype outside of the THREE namespace you must use extent before you can use it in jsx what about jsx new objectXyz args props const temp new Xyz applyPropstemp props 