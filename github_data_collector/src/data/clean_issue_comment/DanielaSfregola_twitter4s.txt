add logger warnings This is not an error handling def filterStatusesfollow Seq Long Seqempty errorHandler PartialFunction Throwable Unit ErrorHandlerignore object ErrorHandler def ignore PartialFunction Throwable Unit case scalautilcontrolNonFatale make it at least object ErrorHandler val log Logger def ignore PartialFunction Throwable Unit case scalautilcontrolNonFatale logwarnError e An early proposal Hi first of all thanks for building this library Its awesome With that said I have a number of problems with the streaming API Im trying to build a service that is supposed to consume tweets and the design of the API makes it really hard to handle any issues Twitter describes a pretty large collection of errors and reasons for shutting down a stream The user of the API has no reasonable way to react to that Lets say we use the method filterStatuses It returns a Future TwitterStream that returns Success as soon as the connection is established All events are processed within a partial function Lets say the stream receives a DisconnectMessage the application can only respond to that by using side effects What is more type of the error received impacts the retry operation that should be performed Some errors require immediate retry others should be handled with backoff strategy I found about all of this after seeing that my stream has been running for days but has not been receiving any new messages Therefore I would like to propose one of two solutions Changing the result of streaming functions to something like Future TwitterStreamHandle Future StreamResult This would allow the end user to manually close the stream as it is right now as well react to errors that occur in a functional manner I would also supply an example with proper retry strategies that would keep the stream working Better yet I believe that the retry behaviour should be integrated into the library itself The backoffinstant retry based on error messages will require a bit of work to get right I dont see a need for the end user to implement this on his own In that case we could just add a simple flag parameter autoHandleStreamErrors that would enable the retry mechanism in case of any issues Please let me know what you think about this Im happy to implement either of these solutions Just a quick note to keep track of ideas This has been inspired by Should this library handle cursor The nextcursor pattern is quite popular in the Twitter API PROS I assume people do this quite often so it would be useful to have it in the library CONS You could really hit your rate limits by querying lots of pages that you really do not need do our users want this feature The Twitter API offers applications the ability to issue authenticated requests on behalf of the application itself as opposed to on behalf of a specific user these requests are authenticated using bearer tokens and often have much higher API quota limits eg on the search tweets endpoint you get rather than requests per minute window twitter s is an excellent library although unfortunately it currently only supports userauth so far as I can see would it be possible to add appauth for increased API quota See also the PR adding applicationonly authentication to Twitter J Hi I encountered the following error comdanielasfregolatwitter sexceptionsTwitterException Internal Server Error Rate Information expected but not found Please report it at Headers names were cachecontrol contentdisposition date expires lastmodified pragma server setcookie setcookie setcookie status stricttransportsecurity xaccesslevel xconnectionhash xcontenttypeoptions xframeoptions xresponsetime xtransaction xtwitterresponsetags xxssprotection We should support the creation of direct messages with attachments and media see We need to support this endpoint Ive only found out from here that apparently Twitter retired some of the streaming api More info can be found here Id say lets use this issue to track what needs to be changedremoved Here is a migration guide 