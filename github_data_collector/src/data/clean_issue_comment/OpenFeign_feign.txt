How to configure the client to connect directly to the server without using a load balancer We recently upgraded from open feign to and noticed a difference in behavior of QueryMap when dealing with null values Given the following client java public interface DemoClient RequestMappingpath test method RequestMethodGET String testQueryMap Map queryMap And the following invocation java Map queryMap new HashMap queryMapputkey null demoClienttestqueryMap The client results in the following request GET While the client results in the following request GET Is this change in behavior intendedcorrect Logging in Feign today is managed entirely behind our Logger abstraction This wrapper is a simplistic form of logging facade similar to Commons Logging and SLF J We should consider adopting a logging facade and replace the Logger with a more distinct LogConfiguration or other such abstraction This change will allow users to control with logging subsystem they want to use without the need to configure Feign separately This will allow us to use the logger facade instances throughout the library increasing our ability to log additional internal details while removing our current requirement to implement logger implementation specific Logger instances Here is an example of what the resulting changes to FeignBuilder could look like java Feignbuilder logLogConfigurationBuilder withRequest withResponse withHeaders build build In addition configuring what information is logged during Feign operations will become more explicit leading to increased understanding and ease of use The potential draw backs here are that whatever facade we choose will require users to include that dependency in their project and we will need to include documentation on how to manage conflicts with Commons Logging for users whose projects intersectconflict This information is readily available however and shouldnt be considered a major blocker to this approach The alternative is to adopt something similar to what Spring has done which is to maintain the Logger abstraction and place ourselves in the middle coopting the detection of the logging framework and adapt accordingly More information can be found here While this does provide the most flexibility it does mean that we will be explicitly choosing Commons Logging over SLF J as SLF J is more opinionated and expresses that users will need to configure SLF J and the appropriate bridges Also it does require that we the Feign maintainers also maintain our own minifacade For this reason alone I feel that the above suggestion of using SLF J and adding it as a dependency it worthwhile In my project I use the request interceptor to sign the request I thought that there would be a corresponding response interceptor to verify the signature but I didnt find it Is there a better way I see a feignreactivewrappers module but the reactive execution support via Reactive Streams written in the mediumterm plan So can feignreactivewrappers use webflux Support for webclient and nonblocking first of all I paste my code groovy import feignokhttpOkHttpClient import groovyutilloggingSlf j import okhttp Interceptor import okhttp Request import okhttp Response import okhttp loggingHttpLoggingInterceptor import orgjetbrainsannotationsNotNull import orgspringframeworkcontextannotationBean Slf j class CustomFeignConfig Bean OkHttpClient feignClientConfig HttpLoggingInterceptor interceptor new HttpLoggingInterceptornew HttpLoggingInterceptorLogger Override void logString s loginfos interceptorlevelHttpLoggingInterceptorLevelBODY HeadersInterceptor header new HeadersInterceptor okhttp OkHttpClient client new okhttp OkHttpClientBuilderaddInterceptorheaderaddInterceptorinterceptorbuild return new OkHttpClientclient class HeadersInterceptor implements Interceptor Override Response interceptNotNull Chain chain throws IOException Request request chainrequest Request newRequest requestnewBuilderremoveHeadercookieaddHeaderUserAgenttestbuild return chainproceednewRequest As the code say I use okhttps interceptor to add header UserAgent In the http define interface file I use feignResponse for return type I log the response in my code the code is loginfoheaderresponserequestheaders I found log text is empty By read the feignokhttp code the package feignokhttp the file OkHttpClient I saw this java Override public feignResponse executefeignRequest input feignRequestOptions options throws IOException okhttp OkHttpClient requestScoped if delegateconnectTimeoutMillis optionsconnectTimeoutMillis delegatereadTimeoutMillis optionsreadTimeoutMillis requestScoped delegatenewBuilder connectTimeoutoptionsconnectTimeoutMillis TimeUnitMILLISECONDS readTimeoutoptionsreadTimeoutMillis TimeUnitMILLISECONDS followRedirectsoptionsisFollowRedirects build else requestScoped delegate Request request toOkHttpRequestinput Response response requestScopednewCallrequestexecute return toFeignResponseresponse inputtoBuilderrequestinputbuild Why in return toFeignResponseresponse inputtoBuilderrequestinputbuild use feigns request because in okhttp client it can change request Maybe add okhttp clients request is better It says like this in the documentation Request Headers Expansion Headers and HeaderMap templates follow the same rules as Request Parameter Expansion with the following alterations Unresolved expressions are omitted If the result is an empty header value the entire header is removed The problem is I need to send empty POST message to a rdparty api and that one returns a error which means they require a ContentLength to be set I tried many possibilities to force the ContentLength to be sent to the client but every time is ignored Tried Setting Headers Setting Body Writing a request interceptor and setting the header in that one Is there a way that I could send that header I use Spring cloud GreenwichM and springcloudopenfeign M interface define blew java RequestLinePOST kunlunkiosknewrestgjecheckIn HeadersContentType applicationjson Accept applicationjsonAuthorization Bearer token CheckInResponse checkInParamtoken String token CheckInRequest checkInRequest RequestOptions options error blow java javalangIllegalStateException Method has too many Body parameters public abstract comveryqyhotelclientoperamodelCheckInResponse comveryqyhotelclientoperaOperaInterfacecheckInjavalangStringcomveryqyhotelclientoperamodelCheckInRequestfeignRequestOptions at feignUtilcheckStateUtiljava at feignContractBaseContractparseAndValidateMetadataContractjava at feignContractBaseContractparseAndValidatateMetadataContractjava at feignReflectiveFeignParseHandlersByNameapplyReflectiveFeignjava at feignReflectiveFeignnewInstanceReflectiveFeignjava at feignFeignBuildertargetFeignjava at feignFeignBuildertargetFeignjava at comveryqyhotelclientoperaOperaClientinitOperaClientjava at comveryqyHotelInterfaceManagergetInterfaceByIdHotelInterfaceManagerjava at comveryqyClientTestinitClientTestjava at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at orgjunitrunnersmodelFrameworkMethod runReflectiveCallFrameworkMethodjava at orgjunitinternalrunnersmodelReflectiveCallablerunReflectiveCallablejava at orgjunitrunnersmodelFrameworkMethodinvokeExplosivelyFrameworkMethodjava at orgjunitinternalrunnersstatementsRunBeforesevaluateRunBeforesjava at orgjunitrunnersParentRunnerrunLeafParentRunnerjava at orgjunitrunnersBlockJUnit ClassRunnerrunChildBlockJUnit ClassRunnerjava at orgjunitrunnersBlockJUnit ClassRunnerrunChildBlockJUnit ClassRunnerjava at orgjunitrunnersParentRunner runParentRunnerjava at orgjunitrunnersParentRunner scheduleParentRunnerjava at orgjunitrunnersParentRunnerrunChildrenParentRunnerjava at orgjunitrunnersParentRunneraccess ParentRunnerjava at orgjunitrunnersParentRunner evaluateParentRunnerjava at orgjunitrunnersParentRunnerrunParentRunnerjava at orgjunitrunnerJUnitCorerunJUnitCorejava at comintellijjunit JUnit IdeaTestRunnerstartRunnerWithArgsJUnit IdeaTestRunnerjava at comintellijrtexecutionjunitIdeaTestRunnerRepeaterstartRunnerWithArgsIdeaTestRunnerjava at comintellijrtexecutionjunitJUnitStarterprepareStreamsAndStartJUnitStarterjava at comintellijrtexecutionjunitJUnitStartermainJUnitStarterjava Will be great if Retrofit will generate interfaces implementation at compile time Something like Micronaut does Micronaut uses Ahead of Time AOT compilation to precompute your applications requirements at compile time The result of this is significantly lower memory requirements faster startup time and reflection free framework infrastructure This will also make possible to better integration with GraalVM Another great example is Micronaut Dataicronaut Data is a database access toolkit that uses Ahead of Time AoT compilation to precompute queries for repository interfaces that are then executed by a thin lightweight runtime layer Trying to use openFeign as our rest client Followed the various guides online to set up Tried using slf j plugin too No matter what I try AppContext wont load and I see the following error Caused by javalangIllegalStateException Logback configuration error detected ERROR in chqoslogbackcorejoranactionAppenderRefAction Could not find an appender named loggingAppenderISUNDEFINED Did you define it below instead of above in the configuration file applicationyaml logginglevelcommoneysupermarketenergyrequoteconsumertokenTokenServiceClient DEBUG feign client config TokenServiceClient connectTimeout readTimeout loggerLevel basic service public TokenService thisclient Feignbuilder decodernew GsonDecoder loggernew Slf jLoggerTokenServiceClientclass targetTokenServiceClientclass baseURL public String getAutoLoginToken return clientgetTokenrequest client FeignClientvalue tokenServiceClient public interface TokenServiceClient RequestMappingmethod RequestMethodPOST value tokens HeadersContentType applicationjson String getTokenAutoLoginTokenRequest request buildgradle orgspringframeworkcloudspringcloudstarteropenfeign RELEASE orgspringframeworkcloudspringclouddependenciesGreenwichSR comnetflixfeignfeigngson iogithubopenfeignfeignslf j 