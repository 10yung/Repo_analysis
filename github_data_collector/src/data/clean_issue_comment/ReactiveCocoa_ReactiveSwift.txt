I recently inherited a iOS project written using ReactiveSwift and ReactiveCocoa Im tasked with updating it to Swift and the latest ReactiveSwift versions I updated ReactiveSwift to and ReactiveCocoa to Im not well versed in Reactive programming but I managed to convert a good portion of the existing codebase to the latest versions However Im stuck at this particular part The original programmer is not available anymore In this project there is an extension on view controller to present error messages swift extension Reactive where Base UIViewController func presentErroranimated Bool true BindingTargetError return selfmakeBindingTarget presenterror animated animated func presenterror Error animated Bool true completion Void nil LogErrorPresenting error errorverboseDescription selfpresentUIAlertControllererror error completion completion animated animated completion nil In a view controller Im getting the below error at this line swift selfreactivepresentError selfviewModelreportActionerrorsmap BindingTarget is not convertible to Bool BindingTarget This is the relevant part in the view model swift privateset var reportAction ActionUser ReportReason Void APIKitError The only change that happened here is the errors type in viewModelreportActionerrorsmap changed from public let errors SignalError NoError to public let errors SignalError Never This is due to some changes done in the latest ReactiveSwift source That has apparently broken this piece of code Im not sure why the error is occurring and how to fix this part Hi Thanks again for creating ReactiveSwift Ive searched around a bit online and cant find what Im looking for The APIContracts used to include this best practice My question is should pipe be avoided for the same reasons that RACSubject should be avoided Thanks ReactiveSwift Xcode Hi there This may be a dumb question Im wondering is it possible to update the value of a MutableProperty in a block triggered by observing that MutableProperty When I run the following code and click the button a few times I get a LockUnfairLocklock error import UIKit import ReactiveSwift class Foo let mutableProperty MutableProperty Int init mutablePropertysignalskipRepeatsobserveValues list in printlist if listcount selfmutablePropertyvalueappendcontentsOf class ViewController UIViewController let foo Foo IBAction func didTapButton sender Any DispatchQueuemainasyncAfterdeadline now selffoomutablePropertyvalueremoveFirst However I have a similar version of this working in another project Ill try to sanitize it so I can post Im just wondering if what Im trying to do is not possible or if there is another ReactiveSwift construct that would help can we regenerate the documentation on based on the last release Checklist x Updated CHANGELOGmd turn this swift class ViewModel privateset lazy var profile PropertyProfilemutableProfile private let mutableProfile MutablePropertyProfile initprofile Profile mutableProfile MutablePropertyProfileprofile into this swift class ViewModel Observable privateset var profile Profile initprofile Profile selfprofile profile usage swift viewModelInstanceprofilepropertysignalobserveValues value in Please see for the details Hey all In this PR Im removing testing libraries for SPM users This is because currently SPM will both fetch build your libraries even though they are in a target that you dont use Because of that and the current integration of SPM in Xcode Xcode will build your testing dependencies either in Xcode Preview or for normal builds and complain in Preview you wont ever get your UI to show and in your projects you will get runtime crash for missing XCTest etc With this fix we are still able to test ReactiveSwift using additional env variable and skip downloading the testing libraries for normal usage Let me know what you think about it Checklist x Updated CHANGELOGmd Are there plans to start making use of property wrappers I think that it could improve the syntax in certain areas especially Property so I quickly put together this swift package as a proof of concept Hi I came across this repository comparing performance of RxSwift and Combine so I thought cool I ll try to add ReactiveSwift So I did but when I did I was very surprised as ReactiveSwift is much much slower than the other two Does anyone know if it is really that slow or the tests are just not doing what they should The results end the same while integrating using Carthage so some build configuration issues do not make a difference Sorry for duplicate to Slack post but an issue would more maintainable Thanks in advance Hello The following SignalProducerInt Never flatMaplatest i in SignalProducervalue i delay on QueueSchedulermain startWithValues value in printA value Prints nothing vs SignalProducerInt Never flatMaplatest i in SignalProducerempty delay on QueueSchedulermain thenSignalProducervalue i startWithValues value in printB value prints B Why is this the case 