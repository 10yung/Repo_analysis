Which of the ways would you recommend to write the version string to a resource such as confdynvertxt or some such Sometimes when youre developing a library or sbt plugin the most convenient way to test it is in another project and so you have a dev cycle like this Run sbt publishLocal Rerun command in the dependent project to test the changes When using sbtdynvar this dev cycle becomes far more tedious Run sbt publishLocal Copy the timestamp that was built Open pluginssbtbuildsbt in dependent project Update dependency to have the new timestamp Rerun command in other project to test the changes Itd be nice if out of the box sbt dynver had a system property that could be set to turn off outputting the timestamp perhaps replacing it with dev Of course I can do this in my own project but often the project is not my own project and I dont want to go updating the buildsbt of that project to override the sbt config and then need to back it out each time I commit etc A longstanding issue with sbtdynver and publishing on Travis CI is that when you create a commit eg bump the version number in the README and a tag and push both then Travis CI will kickoff two builds and one will fail race condition to Bintray for example Found this code to avoid it bash if z TRAVISTAG then TRAVISTAG git C TRAVISBUILDDIR tag pointsat if n TRAVISTAG then echo Found future tag TRAVISTAG skipping exit fi fi sbtdynver uses git describe abbrev and the pattern matches on exactly characters for the abbreviated SHA git describe abbrevn produces a shortened representation of the SHA of at least n sbtdynver causes a MatchError whenever the abbreviated SHA is longer than info Loading settings for project root from buildsbt info Resolving key references settings error scalaMatchError M dc f error of class javalangString error at scalaPartialFunctionanon applyPartialFunctionscala error at scalaPartialFunctionanon applyPartialFunctionscala error at sbtdynverGitDescribeOutputParseranonfunparse applyOrElseDynVerPluginscala error at sbtdynverGitDescribeOutputParseranonfunparse applyOrElseDynVerPluginscala error at scalaruntimeAbstractPartialFunctionapplyAbstractPartialFunctionscala error at scalaOptionmapOptionscala error at sbtdynverDynVergetGitDescribeOutputDynVerPluginscala error at sbtdynverDynVerPluginanonfunbuildSettings DynVerPluginscala error at scalaFunction anonfuncompose Function scala error at sbtinternalutilEvaluateSettingsMixedNodeevaluate INodescala error at sbtinternalutilEvaluateSettingsINodeevaluateINodescala error at sbtinternalutilEvaluateSettingsanonfunsubmitEvaluate INodescala error at sbtinternalutilEvaluateSettingssbtinternalutilEvaluateSettingsrun INodescala error at sbtinternalutilEvaluateSettingsanon runINodescala error at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava error at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava error at javalangThreadrunThreadjava error scalaMatchError M dc f error of class javalangString error Use last for the full log Project loading failed retry quit last or ignore which can be reproduced using this commit NOTE the link is now broken because I rebased but I kept the commit reproducing the error here The workaround is to amend the commit to get a different SHA so the hash collision resolves DynVer doesnt respect tags with build metadata in them SemVer tags with a in them completely break DynVer Metadata SemVer tags Input v foo Expected Result Ignore tag or Valid SemVer version maybe use v dcda foo instead Actual Result Invalid SemVer version v foo dcda sbt crashstacktrace error scalaMatchError v foo dcda of class javalangString error at sbtdynverGitDescribeOutputparseDynVerPluginscala error at sbtdynverDynVeranonfungetGitDescribeOutput DynVerPluginscala error at scalaOptionmapOptionscala error at sbtdynverDynVergetGitDescribeOutputDynVerPluginscala error at sbtdynverDynVerPluginanonfunbuildSettings DynVerPluginscala error at scalaFunction anonfuncompose Function scala error at sbtinternalutilEvaluateSettingsMixedNodeevaluate INodescala error at sbtinternalutilEvaluateSettingsINodeevaluateINodescala error at sbtinternalutilEvaluateSettingsanonfunsubmitEvaluate INodescala error at sbtinternalutilEvaluateSettingssbtinternalutilEvaluateSettingsrun INodescala error at sbtinternalutilEvaluateSettingsanon runINodescala error at javabasejavautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava error at javabasejavautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava error at javabasejavalangThreadrunThreadjava error scalaMatchError v foo dcda of class javalangString error Use last for the full log It seems like dynver is trying to produce a valid SemVer version as its version but at the moment the tag parser is a bit too flexible in what it allows Non SemVer tags Input v Expected Result Error or ignore tag Actual Result version Input v Expected Result Error or ignore tag Actual Result version Input v thisreallyshouldntbeavaliddynvertag Expected Result Error or ignore tag Actual Result version thisreallyshouldntbeavaliddynvertag Hi I like your plug in very much My normal workflow is to open sbt and leave it open even for days unless changing something related to the build there is no need to reload the project The version setting isnt changed unless I reload the project It is technically understood version is a setting not a task but in case of a dirty files I will have to reload the project each minute and it takes more than seconds or use an outdated version I ended up doing sbt def refreshVersion CommandcommandrefreshVersion state val extracted Project extract state import extracted At first I thought to manually set the version It seems unimportant just refresh the session val result Option State Result String ProjectrunTaskdynver state result match case None statefail Key wasnt defined case SomenewState Incinc statefail error detail inc is of type Incomplete use Incompleteshowinctpe to get an error message case SomenewState Valuev printlnsSetting the version to v appendWithoutSessionSeqversion v state do something with v incAnalysis stateloginforefreshing version appendWithoutSessionSeq state do something with v incAnalysis ThisBuild commands refreshVersion val dirtyEnd d d d dr def stripTimeversion String version match case dirtyEndtime versionstripSuffixtime case version ThisBuild version stripTime ThisBuild dynver stripTime and make compile depend on versionCheck val dynamicVersion dynvervalue val staticVersion versionvalue if dynamicVersion staticVersion syserrorsThe version setting staticVersion is different from the dynamic dynver one dynamicVersion Please use the refreshVersion command to refresh the setting This way the dynamic version only contains the day refresh is needed only once a day Also reload in our project takes more than seconds The refresh command works in seconds But still the refresh should be done manually Do you have a better idea Thanks Would require per subproject configuration and being able to match the different version tags for each subproject eg foov bar and pass the right glob to git describe match Any chance of a simple option to enable including branch names other than master in the version string