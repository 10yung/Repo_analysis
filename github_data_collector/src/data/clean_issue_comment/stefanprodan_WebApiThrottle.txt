I handled Preflight and it works fine but when used WebApiThrottle it fires preflight errors from Ionic app and dont know when configMessageHandlersAddnew CustomThrottlingHandler Policy new ThrottlePolicyperSecond perMinute IpThrottling true EndpointThrottling true ClientThrottling true Repository new CacheRepository Hello I fear I found a security hole in the white list feature by ClientKeys In order to make this configuration to work whitelists add policyType entrysomeuser whitelists you have to configure this setting throttlePolicy clientThrottlingtrue whithout enabled clientThrottling the whitelists are ignored The problem with that is that enabling clientThrottling is IMHO a security hole because this allows the hackers bypassing the throttling by sending random clientIds It would be great if the ClientKey white lists would work as well without enabled clientThrottling many thanks for the great project and your support best Lukas Id like to set the rate to min for function and to min for the nd function following the example as the code below The code is running fine but the throttling is not working at all I can get an unlimited number of value and value and value Do I also need to change settings in webApiConfigcs Please help using SystemWebHttp using WebApiThrottle namespace wepApiThrottleControllers EnableThrottlingPerMinute public class ValuesController ApiController GET apivalues EnableThrottlingPerMinute public IEnumerablestring Get return new string value value GET apivalues EnableThrottlingPerMinute public string Getint id return value On a high traffic site all visitors suddenly got this message Arithmetic operation resulted in an overflow at SystemCollectionsGenericList ctorIEnumerable collection r n at SystemLinqEnumerableToList TSource IEnumerable source r n at WebApiThrottleThrottlingCoreApplyRulesRequestIdentity identity TimeSpan timeSpan RateLimitPeriod rateLimitPeriod Int rateLimit r n at WebApiThrottleThrottlingHandlerSendAsyncHttpRequestMessage request CancellationToken cancellationToken r n at SystemWebHttpHttpServerSendAsyncd MoveNext The problem disappeared after a restart Is this a bug Hi there When I use this library it breaks my CORS policy for example var corsAttr new EnableCorsAttribute configEnableCorscorsAttr Is there something I can do to fix this Thanks David The var policy policyRepositoryFirstOrDefaultThrottleManagerGetPolicyKey is always null Here is my code Rate Limits public static class WebApiConfig public static void RegisterHttpConfiguration config configMessageHandlersAddnew MyThrottlingHandler Policy new ThrottlePolicyperMinute ClientThrottling true ClientRules new Dictionarystring RateLimits testkey new RateLimits PerMinute ClientWhitelist new Liststring anon anotherkeyhere Repository new CacheRepository PolicyRepository new PolicyCacheRepository public class MyThrottlingHandler ThrottlingHandler protected override RequestIdentity SetIdentityHttpRequestMessage request string apiKey UtilityExtractApiKeyrequest return new RequestIdentity ClientKey stringIsNullOrEmptyapiKey anon apiKey ClientIp GetClientIprequestToString Endpoint requestRequestUriAbsolutePathToLowerInvariant On the controller I am simply checking if the Key is PAID customer update the rate limit to higher public static void UpdateRateLimitsstring apiKey RateLimits rateLimits init policy repo var policyRepository new PolicyCacheRepository get policy object from cache var policy policyRepositoryFirstOrDefaultThrottleManagerGetPolicyKey Error here policy is always null if policyClientRulesContainsKeyapiKey update client rate limits policyClientRules apiKey rateLimits else add new client rate limits policyClientRulesAddapiKey rateLimits apply policy updates ThrottleManagerUpdatePolicypolicy policyRepository Any way to send X headers in every call response to tell clients about their limitation As implemented in aspcore version XRateLimitLimit XRateLimitRemaining XRateLimitReset I want to implement ThrottlingHandlerSetIdentity so that it fetches the ClientId from a applicationxwwwformurlencoded POST like POST WebAPIDemoThrottleValuesThrottle HTTP Host localhost ContentType applicationxwwwformurlencoded ClientIdMyClientId OtherParam I came up with the following protected override RequestIdentity SetIdentityHttpRequestMessage request var form requestContentReadAsFormDataAsyncResult var clientId form ClientId But this seems to remove the body from the Action in the controller public async TaskIHttpActionResult Throttle FromBody ThrottleData throttle and throttle will be null Any suggestions or am I doing this the wrong way I Try to user it as folllowing QuotaExceededMessage JsonConvertSerializeObjectnew ApiResult it use frequentlyonly allow per please wait a moment but it dont support I just want to response a custom json result how can I to implement Hi I changed the key calculation algorithm a bit to improve performance and reduce key size