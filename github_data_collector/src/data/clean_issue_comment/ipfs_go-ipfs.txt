We no longer need to manually test the webui on release goipfs Release PR Unfortunately goipfs is taking longer than expected Given the large number of fixes merged since weve decided to cut another patch release This release contains critical fixes Please upgrade ASAP Importantly were strongly considering switching to TLS by default in goipfs and dropping SECIO support However our the current TLS transport in goipfs has a bug that can cause connections to spontaneously disconnect during the handshake This release fixes that bug among many other issues Users that dont upgrade may experience connectivity issues when the network upgrades to goipfs Whats left for release x Get the tests passing Release Notes Estimated shipping date January th at the latest likely earlier Highlights Fixes build on go Fixes an issue where we may not connect to providers in bitswap Fixes an issue on our TLS transport where we may abort a handshake unintentionally Fixes a common panic in the websocket transport Adds support for recursively resolving dnsaddrs makes goipfs compatible with the new bootstrappers Fixes several potential panicscrashes Switches to using predefined autorelays instead of trying to find them in the DHT Avoids selecting random potentially poor relays Avoids spamming the DHT with requests trying to find relays Reduces the impact of accidentally enabling AutoRelay RelayHop Ie the network wont try to DoS you Modifies the connection manager to not count connections in the grace period towards the connection limit Pro New connections dont cause us to close useful existing connections Con Libp p will keep more connections Consider reducing your HighWater after applying this patch Improved peer usefulness tracking in bitswap Frequently used peers will be marked as important and the connection manager will avoid closing connections to these peers Changelog githubcomipfsgoipfs fix limit SW registration to content root ipfsgoipfs fix issue adding with hashonly high CPU usage ipfsgoipfs fixcoreapiadd close the fake repo used when adding with hashonly ipfsgoipfs fix bug ipfsgoipfs fixpin wait till after fetching to remove direct pin ipfsgoipfs pin fix pin update X Y where XY ipfsgoipfs namesys set the correct cache TTL on publish ipfsgoipfs build fix golangci again ipfsgoipfs make move all test deps to a separate module ipfsgoipfs fix close peerstore on stop ipfsgoipfs build fix build when we dont have a full git tree ipfsgoipfs githubcomipfsgobitswap v cbb v e cf d fix wait until we finish connecting before we cancel the context ipfsgobitswap engine tag peers based on usefulness ipfsgobitswap githubcomipfsgocid v v fix parsing issues and nits ipfsgocid Verify that prefix is correct v prefix ipfsgocid githubcommultiformatsgomultihash v v Ensure that length of multihash is properly handled multiformatsgomultihash fix murmur name multiformatsgomultihash rename ID to IDENTITY multiformatsgomultihash multiformatsgomultihash githubcomlibp pgoflowmetrics v v fix bug in meter traversal logic libp pgoflowmetrics githubcomlibp pgolibp p v v options to configure known relays for autorelay libp pgolibp p feathost recursively resolve addresses libp pgolibp p mdns always use interface addresses libp pgolibp p githubcomlibp pgolibp pconnmgr v v dont count connections in the grace period against the limit libp pgolibp pconnmgr metrics fix memory leak libp pgolibp pkaddht githubcomlibp pgolibp ptls v v close the underlying connection when the handshake fails libp pgolibp ptls make the error check for not receiving a public key more explicit libp pgolibp ptls Fix Connection Closed after handshake libp pgolibp ptls githubcomlibp pgowstransport v v Add mutex for writeclose libp pgowstransport Other Update bloom filter libraries to remove unsafe usage of unsafe Release Checklist For each RC published in each stage version string in versiongo has been updated tag commit with vXYZrcN upload to distipfsio Build Pin the resulting release Make a PR against ipfsdistributions with the updated versions including the new hash in the PR comment Ask the infra team to update the DNSLink record for distipfsio to point to the new distribution cut a prerelease on github and upload the result of the ipfsdistributions build in the previous step Checklist Stage Automated Testing Feature freeze If any nontrivial changes see the footnotes of docsreleasesmd for a definition get added to the release uncheck all the checkboxes and return to this stage Automated Testing already tested in CI Ensure that all tests are passing this includes unit sharness crossbuild etc make test lint make testgolint interop goipfsapi goipfshttpclient Stage Internal Testing CHANGELOGmd has been updated use binmkreleaselog to generate a nice starter list Network Testing test lab things TBD Infrastructure Testing Deploy new version to a subset of Bootstrappers Deploy new version to a subset of Gateways Deploy new version to a subset of Preload nodes Collect metrics every day Work with the Infrastructure team to learn of any hiccup IPFS Application Testing Run the tests of the following applications WebUI olizilla IPFS Desktop hacdias IPFS Companion lidel NPM on IPFS achingbrain Stage Community Dev Testing Reach out to the IPFS early testers listed in docsEARLYTESTERSmd for testing this release check when no more problems have been reported If youd like to be added to this list please file a PR Reach out to on IRC for beta testers Run tests available in the following repos with the latest beta check when all tests pass orbitdb Stage Community Prod Testing Documentation Ensure that CHANGELOGmd is up to date Ensure that READMEmd is up to date Ensure that all the examples we have produced for goipfs run without problems Update HTTPAPI Documentation on the Website using Invite the IPFS early testers to deploy the release to part of their production infrastructure Invite the wider community through link to the release issue discussipfsio Twitter IRC Stage Release Final preparation Verify that version string in repoversiongo has been updated tag commit with vXYZ update release branch to point to release commit git merge vXYZ Release published to distipfsio to npmgoipfs to chocolatey to github Publish a Release Blog post at minimum a c p of this release issue with all the highlights API changes link to changelog and thank yous Broadcasting link to blog post Twitter IRC Reddit discussipfsio Announce it on the IPFS Users Mailing List PostRelease Bump the version in versiongo to vXY dev Create an issue using this release issue template for the next release Make sure any lastminute changelog updates from the blog post make it back into the CHANGELOG Contributors Contributor Commits Lines Files Changed Steven Allen vyzo whyrusleeping Roman Proskuryakov Jakub Sztandera hucg Ra l Kripalani Marten Seemann Marcin Rataj b Hector Sanjuan Yusef Napora Would you like to contribute to the IPFS project and dont know how Well there are a few places you can get started Check the issues with the help wanted label in the goipfs repo Join an IPFS All Hands introduce yourself and let us know where you would like to contribute Hack with IPFS and show us what you made The All Hands call is also the perfect venue for demos join in and show us what you built Join the discussion at discussipfsio and help users finding their answers Join the IPFS Core Implementations Weekly Sync and be part of the action Do you have questions The best place to ask your questions about IPFS how it works and what you can do with it is at discussipfsio We are also available at the ipfs channel on Freenode which is also accessible through our Matrix bridge Begin v patch release based on v NOT FOR MERGING Issue Update all deps Goipfs must be able to fetch files via graphsync At the moment the graphsync interface expects a peer with which to sync and a selector to fetch It does not support automatically finding providers splitting requests etc Proposal Add a repeated from flag to instruct IPFS to fetch a file from a specific peer When passed goipfs should Connect to the specified peers Determine which protocols these peers support Pick the best supported transport Fetch the file with this transport For now goipfs will not even try to split the request between multiple peers when from is specified and at least one of the specified peers supports graphsync As we improve graphsyncbitswap we can add request splitting logic in future PRs goipfs should expose a graphsync endpoint to serve files over graphsync Requirements This feature needs to be experimental and needs to be enabled via an ExperimentalGraphsync flag goipfs does not need to be able to fetch files via graphsync for this feature to be considered complete It just needs to expose the local blockstore via graphsync We need a plugin type that can respond to libp p events disconnect connect etc config API HTTPHeaders AccessControlAllowMethods PUT GET POST AccessControlAllowOrigin Addresses API ip tcp Announce Gateway ip tcp NoAnnounce Swarm ip tcp ip tcp Bootstrap null Datastore BloomFilterSize GCPeriod h HashOnRead false Spec mounts child path blocks shardFunc repoflatfsshardv nexttolast sync true type flatfs mountpoint blocks prefix flatfsdatastore type measure child compression none path datastore type levelds mountpoint prefix leveldbdatastore type measure type mount StorageGCWatermark StorageMax GB Discovery MDNS Enabled true Interval Experimental FilestoreEnabled false Libp pStreamMounting false P pHttpProxy false PreferTLS false QUIC false ShardingEnabled false UrlstoreEnabled false Gateway APICommands HTTPHeaders AccessControlAllowHeaders XRequestedWith Range UserAgent AccessControlAllowMethods GET POST GET AccessControlAllowOrigin NoFetch false PathPrefixes RootRedirect Writable false Identity PeerID QmYWgc JTEZhxhrd XmMAzueLJT EqnwZ J m wkt DN PrivKey CAASqAkwggSkAgEAAoIBAQDdyZ SeSSMkjcEj clqwbvsZPgmvObr jzNr giElWeaOMnHyW NoQpVj sgnLqWHXGZYueK KaxMuFS LjcqhUz q iAokal GhOcxbkZ nme q He rxOCyCg o EAiy TVu oL ICbA iO XgZoomSP q N ECo c B N zZkSCRGVDLuEsBt KMMdFPgMVDOcTaHlK vC MzPenzt jmGRPNstwC cYMdN HseOJXBoquc tXDkPT M dTONqDxk EGNUFW SZYPhX sRe YFgS T JRMGx vs KsQpxxnrIc S mLg AgMBAAECggEAfl IiAFquqFaaiTqke meiZm XEJ vPW qn NmYxU KPujWXKVG ErhSNizXa u vUl V O bzYMiUYPXzxSRH KaJEOLCLxIIT yTjwD Yd iO I jXWJI JiSPEpyT vcG ftlNWfMBpENdoU pkXk E WSohI pLTuxbgfCopAKHQt wU pvCDLdMaMekE hFpgfymfcmE stfvJGPuNwKLBDGOXHUemWJ WnMfCxfPsat JHcehml f tJpdxXCETVhRU URh nAg iKOZ ebNnlKrYq d awIoAWi d F uP uotq QyoqShyQQKBgQD wFiKRLK P PUA cqg UK GuGtLLjEIgbfScTptdIWjJfLkgQOp jEW tkn ylTpZtSRt IblnrMT NFq V VcqdSB xXBAXL zd P CQK WktNn fFuvGtF eHUpf qw AmPJODcUoWODiGLff RtXlYoKoakYqQKBgQDnw kFjZG tzh td vWtimB VrhFkT xHeDCUXKJiwAVh UqFSXxXoQ oUpxWu LN yBVTMmp IkgKZNkwyjiT hNnlix XkONmKR gQvtkjaH lzm rRGcAIyi YPQ grUubbtypJpxn S N h jU g ujtdrQKBgQDjnv RE EADBRy xv aBw njsCQaFdPwpPFQT bGOgZBvdDXAF eo MQFGLhZ N Qc YugMY qpNpzpQc BlWQsqSmEeQy iKcwdJBZ cYp Qht GwQMDoDPUyvX ustKqR g xd WB Awp aaFL R s siYfQxywNOcQKBgF zFoDI XGowvERGX Gi Tx FXdYFFiMXs TOnPzNLkSVpbBjne RBhtxrjeIa im qi JyQcKYNb SrmMpOt elHIPFs EFufZePvXInT bzjY hUeuZuHC vIvfH cYvqIr vk XyxLr RzeJvLtT PFEGR TF alAoGBAN BP QY hIF rf JotzKzxz evFLRK kaMvMfNjB c W Pbi zNyQ ewB eK HUaU XEF PE IzXYXEmPOn Ch JFuB gb WQVvYCyuiyntuzV lvcAVHjX OPBdx xNDEhCNKHAacueI PSqlEoJwbhgrBUn f ho Ipns RecordLifetime RepublishPeriod ResolveCacheSize Mounts FuseAllowOther false IPFS ipfs IPNS ipns Pubsub DisableSigning false Router StrictSignatureVerification false Reprovider Interval h Strategy all Routing Type dht Swarm AddrFilters null ConnMgr GracePeriod s HighWater LowWater Type basic DisableBandwidthMetrics false DisableNatPortMap false DisableRelay false EnableAutoNATService false EnableAutoRelay false EnableRelayHop false ipfs daemon rootmaster Initializing daemon goipfs version Repo version System version amd linux Golang version go Swarm listening on ip tcp Swarm listening on ip tcp Swarm listening on ip tcp Swarm listening on p pcircuit Swarm announcing ip tcp Swarm announcing ip tcp Swarm announcing ip tcp API server listening on ip tcp WebUI Gateway readonly server listening on ip tcp Daemon is ready ipfs swarm peers ip tcp ipfsQmSch HCAu JrSsVY YGryFsAKJCDEQ AwzNqtTSUrmBT ip tcp ipfsQmasZHPr VdDa EmtZ kM ewsdaTxa fAj AqQHp CLt to Firefox Firefox Unable to connect my firewall is stop selinux is disable Version information goipfs version Repo version System version amd windows Golang version go Description Ive added GB bytes Files Folders of data using ipfs add recursive pintrue progress and now the client is extremely slow to unusable The desktop client which uses the javascript implementation is unusable and cannot handle that data at all apparently fixed it self I dont know how and the go client the command line tool takes ages h m s to perform a ipfs pin ls But despite taking for ages everything else seam to be fine Maybe some form of caching could help here Badger has released a new version thats format incompatible with the previous version We have several options Ignore it Not a good solution as version isnt maintained Switch to it directly Wed need a migration Badger is experimental but enough users are using it that we cant just say yolo recreate your repos Wed go from a almost stable datastore right back to were not sure how stable this is Add an option to the godsbadger datastore to specify the underlying badger version Pro this is pretty simple to implement We should be able to import both versions of badger into goipfs Con no way for users to opt out of the old badger if they want to decrease their binary size Treat it like a new datastore a Create a new godsbadger repo b Release a v of godsbadger for badger then release a v for badger This is the go mod way to do this however the godatastore interfaces may not be stable enough to do this Im currently leaning towards option We have gone with a thanks Kubuxu