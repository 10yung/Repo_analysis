Hi Im not exactly sure if this can be handled but Im struggling to find a way to have only one scheduler for my Play app that is deployed and replicated via Heroku I use the scheduler this way Modulescala scala package frstaycation import comgoogleinjectAbstractModule import playapilibsconcurrentAkkaGuiceSupport import playapiConfiguration Environment import frstaycationcommonsscheduledTaskActor TaskScheduler class Moduleenvironment Environment conf Configuration extends AbstractModule with AkkaGuiceSupport override def configure bindActor TaskActor taskactor bindclassOf TaskScheduler asEagerSingleton TaskScheduler scala package frstaycationcommonsscheduled import akkaactorActorRef ActorSystem import comtypesafeakkaextensionquartzQuartzSchedulerExtension import comtypesafeconfigConfig import comtypesafescalaloggingStrictLogging import javaxinjectInject Named Singleton import frstaycationcommonsscheduledTasks import scalaconcurrentExecutionContext Singleton class TaskScheduler InjectactorSystem ActorSystem Namedtaskactor taskActor ActorRef config Config implicit executionContext ExecutionContext extends StrictLogging loggerinfoStarting Scheduler val scheduler QuartzSchedulerExtensiongetactorSystem schedulerscheduleExpireBookings taskActor ExpireBookings other schedules And the TaskActor that handle Akka messages and execute jobs Everything is working well with one instance of my app but if I replicate it the scheduler fire as many events as there are instances In this part of the README it says Because it is an Actor which provides no Singletonlike guarantee it becomes too easy for users to accidentally spin up multiple scheduler instances each of which is backed by its own threadpool Instead with akkaquartzscheduler we use Akkas Extension system which provides a plugin model we guarantee only one Quartz Scheduler is ever spun up per ActorSystem But it looks like there are Actor systems running independently Am I missing something how can I synchronize my instances so that the scheduler fires event only once Thanks We have a usecase where a step in a flow needs to wait for days for an action to take place We have a Graph of actors which are executed one after another Similar to a business process you might have steps that need to wait like requesting an approval from a human etc Would you recommend akkaquartzscheduler for this usecase Also if the application restarts after a crash will akkaquartzscheduler know what was the previous state Or it will restart all jobs Is there any other mechanism to build a persistent scheduler I am using a scheduler for the my web service based on Play Framework I want to implement a possibility for a horizontal scaling Several instances will create several independent JobStores and will execute jobs much frequent Quartz has a clustered execution mode which provides by a corresponding common job store Are there any ideas how to make this Bumping Play to x forces bumping playslick to which depends on slickhikaricp which depends on HikariCP The latest akkaquartzscheduler akka x depends via quartz on HikariCPjava which gets evicted Any attempt to run the app ends in a missing method or not class found don t remember which one exactly Is there any nonsurgical solution to that problem ie other than shading I see quartz hasnt been updated beyond yet Changes include Adding the nextprevious firing time to the context message allowing users to retrieve nextprevious firing time Test Fixed some formatting inconsistencies Doc cleanup Made tests less sensitive I picked ms since its double the frequency of the max frequency of cron per second Hi Should QuartzSchedulerExtension be made threadsafe My understanding is that Akka extensions must normally manage threadsafety internally At the moment I think that it is possible for concurrent access to createSchedule to result in a created schedule being lost if the reads updates and writes occurring in schedules nametoUpperCase quartzSchedule are interleaved causing a subsequent call to schedule to fail Thanks Dan 