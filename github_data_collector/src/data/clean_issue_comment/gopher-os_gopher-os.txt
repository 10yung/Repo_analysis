Could these be provided Travis has something that could potentially be used for this Please answer these questions before submitting your issue Thanks Are you trying to build gopheros inside vagrant or on Linux vagrant If building on Linux what is the output of uname a What version of Go are you using go version the one in vagrant go version go linuxamd What did you do In vagrant build kernel and ISO image make kernel make iso On host run in Virtualbox make runvbox VM starts with initial grub selector leave default it goes to black screen with no reaction What did you expect to see Some output from kernel being loaded by grub What did you see instead Blank black screen for as long as I waited Note Machine that I am running it on has no root access i am a user on this specific machine runvbox target requires iso target which in turn depends on xorriso which is weird considering iso has already been built I suggest making iso a virtual target that invokes buildkerneliso target which in turn would depend on xorriso so that whenever I invoke runvbox target it would not fail on hosts that do not have it installed Hi Not reporting a bug wondering if you have any type of roadmap available that can be worked on How are you wanting or planning a GUI interface is there stuff in place to start working on GUI methods For the filesystem has that been sorted or is that still in the works also for executable files maybe goexe could be a good choice or did you have something else in mind Also for networking is there anything to be done there Quote achilleasa I am currently working on taskskernel threadsscheduling so having a working PIC and by extension PICbased timer driver would allow me to get things up and running much faster In terms of a PIC andor APIC driver I think the easiest approach is to implement the Driver interface and add your driver code into a deviceirq or irqchip which linux uses package You then need to define a probe function so that the hal package can detect the chip and an init block to register the driver for an example check out the fb detection code here PS To get the keyboard stuff up and running you will also need to remap the PIC base offset the default configuration has an overlap with the interrupts used by the CPU for exceptions to a higher range so the keyboard interrupt would actually trigger int base enable interrupts after the kernel init code I think they are still off when the kernel boots Another reference that you can use is this welldocumented rust crate for dealing with the PIC This PR implements an AML interpreter to be used by the ACPI driver 