 Description The decode function already accepts a json option which when set to true will always try and parse the resulting payload as JSON and throw an error if that fails This patch adds the same option to the verify function by passing the json option thru to the decode function Testing This can be tested by passing json true to verify with a token that has a string payload That should throw a JSON parse error This change adds test coverage for newchangedfixed functionality Checklist I have added documentation for newchanged functionality in this PR or in auth comdocs All active GitHub checks for tests formatting and security are passing The correct base branch is being used if not master Description I have a JWT generated by an NET application and i have the key used to sign they but the header of this JWT has a w c url on alg property and for this cant be verified with jsonwebtoken Alg should be HS but json type SystemIdentityModelTokensJwtJwtHeader SystemIdentityModelTokensJwt alg typ JWT Reproduction Generate JWT with NET c using System using SystemIdentityModelTokens using ThinktectureIdentityModelTokens using SystemIdentityModelTokensJwt var token new JwtSecurityTokenissuer audience claims issued expires key Try to verify with jsonwebtoken js jwtverifytoken key err decoded jwtverifytoken key algorithms HS err decoded Same result Results invalid algorithm Environment Please provide the following Version of this library used Other relevant versions language server software OS browser NodeJS on MacOs How to verify this JWT without change the NET application Description Expose timespan as an utility function so as to be able to expose or return the expiresIn from a signed token Just a simple helper function to not have to decode the token to determine when the token expires As well as having access to ms For example many web based applications only do a silent refresh of the token when receiving a A more better experience is the client to know when the token will expire and proactively refresh While it is true you can decode the token on the client but that requires another unneeded lib or another step in the flow Ideally just pass back the expiration date with the token I agree there are other ways of doing this but it just seems like a very simple and valid way of ensuring the code cohesiveness References javascript const sign timespan requirejsonwebtoken exportscreateAccessToken id userId const exp timespan m return token sign userId exp processenvACCESSTOKENSECRET expiresIn exp Testing None that I am aware of Checklist X I have added documentation for newchanged functionality in this PR or in auth comdocs X All active GitHub checks for tests formatting and security are passing X The correct base branch is being used if not master I want to know about that why jsonwebtoken package does not provide destroy method to kill the token I am getting stuck to find out the solution How to set expire time to or current time while logout in NodeJSapp Please give me the proper solution for that Describe the problem youd like to have solved When working in a ES module project I would like to be able to import jsonwebtoken Describe the ideal solution A specific build for ESMES Module as other projects have like this Or entirely switch to ESMES Modules in a new major release Alternatives and current workarounds In a ESM context I know of no workarounds except rewriting how the project exports Additional context Great docs on ESM over at Mozilla Description sign and verify works fine in simple test but not in simple Express APP with SECRET as String While it work with SECRET as Buffer Reproduction clone this repository PeichengLiutrackserver install dependencies run simple test node srctestjs all fine run express app npm run dev send post request to we can get token and then try to visit we can get expected response directly use SECRET as String in file authRoutesjs and requireAuthjs to sign and verify Youll find that JWT NOT work as expected Environment OS Name Microsoft Windows Pro OS Version NA Build Nodejs v Description Sometime verify throws SyntaxError instread of JsonWebTokenError Reproduction js var jwt requirejsonwebtoken const malformedtokeneyJhbGciOiJIUzI NiIsInR cCI IkpXVCJ eyJzdWIiOiIxMjM NTY ODkwIiwibmFtZSI IpvaG gRG lIiwiaWF IjoxNTE MjM MDIyfQSflKxwRJSMeKKF QT fwpMeJf POk yJVadQssw c jwtverify malformedtoken Secret algorithms HS Environment Version of this library used Description This PR updates the jws dependency while the dependency upgrade is a major version since jsonwebtoken does its own JWS algorithm check which didnt suffer the flaw of the jwsjwa one we can release this as a patch release Lowercase or match cased algorithm names are also not listed as supported Ergo this should be a bug fix References Description hmcfletch and I would find it useful to have jwtverify also accept an array of keys such that we can rotate our signing key pass both keys to verify during a grace period Itd be great to hear your feedback if its something youre interested in We wrapped the existing secretOrPublicKey argument into an array rather than adding another optionsalgorithms field as that seemed a bit more graceful It will error if unsigned token given with secretOrPublicKey array containing truthy values error if signed token given with secretOrPublicKey array not containing truthy values error if token algorithm is unsupported by default algorithms of every key if optionsalgorithms is unset then successfully decode if any key verifies the token References Key rotation previously discussed here JWK seemed like overkill for our use case Testing We put the basic functionality tests at the bottom of verifytestsjs We put more extensive tests where we mixed in different algorithms in a separate file x This change adds test coverage for newchangedfixed functionality Checklist I have added documentation for newchanged functionality in this PR or in auth comdocs x All active GitHub checks for tests formatting and security are passing x The correct base branch is being used if not master Docs can be added if theres interest in merging Description Replaces the mystery way of checking if string contains other string using strindexOf with strincludes