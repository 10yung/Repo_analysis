Will send a proper horde of pull requests from rspecdev if it does Aimed at reproducing It wasnt that obvious from the docs how metadata tags and metadata hash can be combined Subject of the issue Methods that were injected via configextend are not defined when called within shared contexts Your environment Ruby version rspeccore version Steps to reproduce ruby module Foo def something puts hi end end RSpecconfigure do config configextendFoo end RSpecsharedcontext shared do something end Expected behavior Prints hi Actual behavior something is undefined Subject of the issue Compatibility of sharedexamples with a Real keyword argument from upcoming Ruby Your environment Ruby version preview rspeccore version Steps to reproduce ruby RSpecdescribe ruby preview warning do sharedexamples expects hash do hash it expecthash input reverseto eqhash output end sharedexamples expects keywords do input output it expectinputreverseto eqoutput end includeexamples expects hash input afla output alfa includeexamples expects hash input ovarb output bravo includeexamples expects keywords input eilrahc output charlie Warning includeexamples expects keywords input atled output delta Warning end Expected behavior charlie example should not produce any warning alfa should not be supported to follow Ruby changes Actual behavior Following warning is being printed for charlie and delta case homewojciechkorbenvversions preview librubygems gemsrspeccore librspeccoresharedexamplegrouprb warning The last argument is used as the keyword parameter homewojciechkodevsamplespecrb warning for method defined here Run options include fulldescriptionAGENTServicesCLI python from Dtoolsatrsfttoolmingw librubygems gemsrspeccore librspeccoreworldrb in announcefilters from Dtoolsatrsfttoolmingw librubygems gemsrspeccore librspeccorerunnerrb in setup from Dtoolsatrsfttoolmingw librubygems gemsrspeccore librspeccorerunnerrb in run from Dtoolsatrsfttoolmingw librubygems gemsrspeccore librspeccorerunnerrb in run from Dtoolsatrsfttoolmingw librubygems gemsrspeccore librspeccorerunnerrb in invoke from Dtoolsatrsfttoolmingw librubygems gemsrspeccore exerspec in top required from Dtoolsatrsfttoolmingw binrspec in load from Dtoolsatrsfttoolmingw binrspec in top required from e in load from e in main ruby it should not do anything do expectdidlengthto eq dosomething expectdidlengthto eq end When this fails I get ruby FailureError expectdidlengthto eq expected got compared using Is there a way to know which expect failed Maybe dosomething did something it wasnt supposed to or my initial assumption is wrong Im curious if theres some expect failure line number option to save me the headache of trying to comment out expects and figuring out which failed rspeccore ruby p Subject of the issue While running bundler tests in rubyruby currently done with Azure Pipelines running an Ubuntu job and a MacOS job the following error appears All in rspeccore librspeccore backtraceformatterrb in invalid byte sequence in USASCII ArgumentError backtraceformatterrb in block in matches corebacktraceformatterrb in any backtraceformatterrb in matches backtraceformatterrb in exclude backtraceformatterrb in backtraceline backtraceformatterrb in block in formatbacktrace backtraceformatterrb in map backtraceformatterrb in formatbacktrace formattersexceptionpresenterrb in formattedcause I work with trunkmaster and Ive never come across this error before Anyone have any ideas Your environment Ruby version mastertrunk rspeccore version Steps to reproduce Run Ruby Azure Pipelines tests the bundler jobs bisects ShellRunner does not properly shellescape special characters when running rspec bisect Open capture e called at will pass the cmd string through to the system shell without any escaping leading to spurious failures Your environment Ruby version rspeccore version Steps to reproduce Execute rspec bisect pattern specspecrb excludepattern specfixturesrbfixturesmodulesrb with active shell backend Expected behavior The provided pattern and exclude patterns should be passed through unchanged to the shelled out processes Actual behavior The provided patterns get exposed to the system shell and cause spurious failures If I puts cmdinspect just before L see above I get this pattern specspecrb excludepattern specfixturesrbfixturesmodulesrb and a lot of failures from the excludepattern being wrong