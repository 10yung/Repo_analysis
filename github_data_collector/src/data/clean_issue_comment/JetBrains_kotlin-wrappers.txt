It seems impossible for me to use existing React component without some raw method Eg I try to use Material Icons In JS they are used like javascript import AccessibleIcon from materialuiiconsAccessible import React from react export function Test return AccessibleIcon but how to do it in Kotlin kotlin package test import react import reactdom fun RBuildertest raw AccessibleIcon I dont know how to define component wrapper for existing imported React component either All examples create only new components I try to implement the following Reactjs example in Kotlin JS Reactjs hook sample My implementation doesnt seem to be perfect because after seconds it is rendered at FPS and totally kills Chrome D Do you have any idea what am I doing wrong fun main renderdocumentgetElementByIdcontainer div childMouseWatcher data class MousePositionval x Int val y Int fun useMousePosition MousePosition val position setPosition useStateMousePosition fun handleMouseMovee Event e as MouseEvent TODO It doesnt compile with parameter type of MouseEvent setPositionMousePositioneclientX eclientY useEffectWithCleanup windowaddEventListenermousemove handleMouseMove windowremoveEventListenermousemove handleMouseMove return position val MouseWatcher functionalComponentRProps val p useMousePosition span px py Besides I need some help fixing the TODO as well Im currently trying to implement Redux Advanced Example the one that uses Reddit API to fetch post titles and I canf for the life of me figure out how to add reduxthunk to the project and how to work with middleware in general My experience with JS React Redux and webdevelopment in general is almost nonexistent so I would greatly appreciate if you pointed me to some kotlin specific guide or gave a for dummies explanation Thanks in advance kotlinscss adds amp import kotlinxhtmla import kotlinxhtmlbody import kotlinxhtmlhtml import kotlinxhtmlstreamappendHTML import orgamshovekluentshould contain import orgamshovekluentshould not contain import orgjunitjupiterapiTest class HtmlTests Test fun when aa b then a hrefa b val getUrl val a StringBuilderapply appendHTMLhtml body agetUrl printlna ashould not contain amp ashould containgetUrl Given that MaterialUI is the most popular material design library for react it might be nice to add an official wrapper Im happy to work on this Would this repository be an appropriate place of this wrapper I am not super familiar with the Javascript ecosystem which is why Im using Kotlin so please forgive me if Im being idiotic I ran across the same issue described in and I am wondering why this project targets commonjs Wouldnt it make more sense to target UMD so it can be consumed both by nodecompile time tools as well as be consumed directly in the browser for those of us that are using pure gradlekotlin js build pipelines My understanding is that UMD is universal and works with both commonjs and AMD projects Am I missing some case where this will break It would be great if that use case could work out of the box too The KotlinConf app no longer uses KotlinJS or React Please remove the reference to it in the README or link to an older revision that did Component and RComponent have generic bounds for props and state to be RProps and RState This is unnecessarily tight and obviously prevents types that does not implement the interfaces from being used as props or state for that matter although I cannot image such use case at hand The concrete use case I have is that my types come from another kotlin common module and as such cannot be made to implement RProps As an experiment I have tried to do this myself and it seems that not much relies on this behavior I have not yet verified if this is enough to solve my use case but I ask here because I want to know what the odds are this change to be implemented Index kotlinreactsrcmainkotlinreactImportskt IDEA additional info Subsystem comintellijopenapidiffimplpatchCharsetEP UTF kotlinreactsrcmainkotlinreactImportskt revision d ba dae fd c afb d f ffcfa f c kotlinreactsrcmainkotlinreactImportskt date fun toArraychildren Any Arrayout Child abstract external class ComponentP RProps S RState props RProps definedExternally abstract external class ComponentP Any S Any props P definedExternally open val props P var state S Index kotlinreactsrcmainkotlinreactReactComponentkt IDEA additional info Subsystem comintellijopenapidiffimplpatchCharsetEP UTF kotlinreactsrcmainkotlinreactReactComponentkt revision d ba dae fd c afb d f ffcfa f c kotlinreactsrcmainkotlinreactReactComponentkt date return fn abstract class RComponentP RProps S RState ComponentP S abstract class RComponentP Any S Any ComponentP S constructor super state jsObject init open fun Sinitprops P fun RBuilderchildren propschildren props as RPropschildren abstract fun RBuilderrender Bellow code is a slight modification of this react hook example interface Labels RProps val counterLabel String val buttonLabel String val renderCount functionalComponentLabels props val count setCount useState useEffect consoleloguseEffect count propscounterLabel count button attrs onClickFunction setCountcount propsbuttonLabel fun RBuilderrenderCountlabels Labels childrenderCount labels When rendering the component propsbuttonLabel is undefined Im trying to use an external component that I have imported as such kotlin fileJsModulereacttransitiongroup package reacttransitiongroup import reactRClass external val Transition RClassdynamic This component expects a function child see its doc here So I can use it but how do I give it a child function kotlin Transition How do I pass a child function Ive tried childList trState String but this yields a React error Invariant Violation Objects are not valid as a React child found object with keys If you meant to render a collection of children use an array instead