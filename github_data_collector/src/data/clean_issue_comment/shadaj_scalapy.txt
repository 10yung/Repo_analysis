I was thinking of updating the docs to add the extra steps required to run on Scala Native in But Im not sure how to do this I see markup in the website folder which seems to reflect what I see on the website and some out of date markup in docs On current master and at least the commit before it I cannot run the following shell command sbt clean test sbt test without getting a linking error info Compiling to native code ms info Linking native code immix gc ms error javaniofileClosedFileSystemException error at comsunniozipfsZipFileSystemensureOpenZipFileSystemjava error at comsunniozipfsZipFileSystemnewByteChannelZipFileSystemjava error at comsunniozipfsZipPathnewByteChannelZipPathjava error at comsunniozipfsZipFileSystemProvidernewByteChannelZipFileSystemProviderjava error at javaniofileFilesnewByteChannelFilesjava error at javaniofileFilesnewByteChannelFilesjava error at javaniofileFilesreadAllBytesFilesjava error at scalascalanativeioVirtualDirectoryNioDirectoryreadVirtualDirectoryscala In other words running test appears to produce target files that make the next run of test fail Running sbt clean or manually removing corenativetargetscala classes will make the next run of test complete successfully I believe this is the issue Im encountering in and encountered in As I think TravisCi caches per branch There is one cache per branch and language version compiler version JDK version Gemfile location etc from This PR upgrades ScalaPy to use Scala Native M which is particularly attractive as it removes the dependency on re I dont know if this is a issue specific to Native Scala but runing sbt inside a virtualenv points to the expected python venv path but shows the wrong version How is that possible scala import meshadajscalapypy object Main extends App val os pymoduleos val sys pymodulesys printversion sysversion printpath ospathdirnamesysexecutable Output version default Jan GCC experimental trunk revision Warning the value function dirname at x f ee b was allocated into a global space which means it will not be garbage collected in Scala Native path homedavigitscalapyjevenv bin I suppose it has something to do with python config but I have no knowledge about how to set it differently It points to the wrong python version python config ldflags Lusrlibpython config mx linuxgnu Lusrlib lpython m lpthread ldl lutil lm Xlinker exportdynamic WlO WlBsymbolicfunctions Sorry about the apparent specificity of this but the original JEP project stick with the virtualenv once its location is given in javalibrarypath if a recall correctly So this might be some detail I am missing I created a default scalanative project and included scalapy dependence as below But I couldnt manage to make it work pluginssbt addSbtPluginorgscalanative sbtscalanative buildsbt scala scalaVersion nativeLinkStubs true enablePluginsScalaNativePlugin libraryDependencies meshadaj scalapycorenative e acbe f Mainscala scala import meshadajscalapypy object Main extends App printlnHello world val listLengthPython pygloballenList val listLength listLengthPythonas Int buildproperties scala sbtversion Gives several errors like this first error homeuserhellotargetscala nativemeshadajscalapypyllo In function meshadajscalapypyCPyValuecleanupunit error meshadajscalapypylltext x d undefined reference to PyDecRef I just added scala support but I removed the Seqview methods as they raised type error Im not sure about the impact of the views so might worth correct the ViewSeq error instead System information Windows professional Scala builtin builtin builtin sbt local as per scalapys buildsbt specs Java JRE Java JDK Python Conda Anaconda x bits jep Eclispe Oxygen a a build PyDev buildsbt config libraryDependencies meshadaj scalapy fork in run true javaOptions DjavalibrarypathUsersAppDataLocalContinuumanaconda Libsitepackagesjep Two approaches Approach pointing to the jar file from properties in Eclipse Click right on project Properties Java Build Path Libraries Add External JARs Approach settingup a lib folder with jepdll file Copy and pasting Condas built of jepdll By the way inspecting both referenced librairies indeed yield no trace of javalang yet I read from the Scala documentation that javalang is imported by default scroll down to bottom of the following page linked Command triggering issue relevant error log Run selection in Scala Interpreter and same from command line javalangUnsatisfiedLinkError C Users AppData Local Continuum anaconda Lib sitepackages jep jepdll Cant find dependent libraries at javalangClassLoaderNativeLibraryloadNative Method at javalangClassLoaderloadLibrary Unknown Source at javalangClassLoaderloadLibraryUnknown Source at javalangRuntimeloadLibrary Unknown Source at javalangSystemloadLibraryUnknown Source at jepJepclinitJepjava elided javalangUnsatisfiedLinkError C Users GB AppData Local Continuum anaconda Lib sitepackages jep jepdll Cant find dependent libraries at javalangClassLoaderNativeLibraryloadNative Method at javalangClassLoaderloadLibrary Unknown Source at javalangClassLoaderloadLibraryUnknown Source at javalangRuntimeloadLibrary Unknown Source at javalangSystemloadLibraryUnknown Source at jepJepclinitJepjava elided 