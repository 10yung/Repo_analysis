Bumps PublicApiGenerator from to details summaryRelease notessummary Sourced from PublicApiGenerators releases Changes Fix Output property even though indexer exists PR Changes Remove support for NET PR Readonly structs support PR Inmodifier support PR Unsafe modifier support PR Support for default keyword for non primitive structs PR Removing empty attribute parentheses and Attribute suffix if present PR Fix order of static and readonly keywords PR Fix order of members within a type by adamralph PR Volatile public field support PR Fix support for named indexers PR More advanced support for Property event and method modifiers Event modifiers PR Property modifiers PR Method modifiers PR C nullable reference type support by sungam r and jnm PR Embedded PDB in package and source for better sourcestepping PR Introduce ApiGeneratorOptions to configure the generator PR Extension methods as public API for the generator PR For more information see the related milestone details details summaryCommitssummary c f Merge pull request from sungam rindexernamefix ed fix bab c add tests to demonstrate problem a c Merge pull request from PublicApiGeneratorfixtool afe Update READMEmd f ef Fix tool and readme a b e c Merge pull request from PublicApiGeneratormethodparammatching c f Fix parameter comparison d d Reproduce base class having method with different arguments f a bd Merge pull request from PublicApiGeneratorwhitespace Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version unless you reopen the PR or upgrade to it yourself dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in your Dependabot dashboard Update frequency including time of day and day of week Pull request limits per update run andor open at any time Automerge options neverpatchminor and devruntime dependencies Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details Question asked on StackOverflow Describe the bug When attempting to call IBitmapToNative or BitmapFromNative we receive compiler errors despite having both Splat and SplatDrawing referenced in both the NET Standard project and the Android project Further troubleshooting indicates that Visual Studio may not be attempting to bind the Android versions of the libraries see SO question for full details Steps To Reproduce Create a new Xamarin solution selecting NET Standard for the code sharing project and Android for the platform Using NuGet reference Splat and SplatDrawing in both projects In the Android project create a class with a method that calls the ToNative and FromNative methods See errors IBitmap does not contain a definition for ToNative and no accessible extension method ToNative accepting a first argument of type IBitmap could be found are you missing a using directive or an assembly reference Bitmap does not contain a definition for FromNative and no accessible extension method FromNative accepting a first argument of type Bitmap could be found are you missing a using directive or an assembly reference An example project can be found on Github Expected behavior No compiler error Environmentplease complete the following information OS Android Target Framework Device NA Describe the bug I just installed the latest ReactiveUI into my XamarinForms app and built a single ViewModel out using it I love it so far and I did all of my testing using the iOS simulator Upon testing the app on my Pixel XL Android I immediately got the following runtime exception when I hit the new pageviewmodel csharp PlatformBitmapLoader Exception while detecting drawing types SystemReflectionReflectionTypeLoadException Exception of type SystemReflectionReflectionTypeLoadException was thrown Type callbackfactoryclass is not finished at SystemReflectionEmitAssemblyBuilderGetTypes SystemBoolean exportedOnly x d in ff eae a a e bbcb a e at SystemReflectionAssemblyGetTypes x in ff eae a a e bbcb a e at SplatPlatformBitmapLoaderGetTypesFromAssembly SystemReflectionAssembly assembly SplatIFullLogger log x in d a s src SplatDrawing Platforms Android Bitmaps PlatformBitmapLoadercs SystemTypeLoadException Type callbackfactoryclass is not finished followed by a really long list of this PlatformBitmapLoader DrawableList Type Drawable PlatformBitmapLoader DrawableList Type Drawable PlatformBitmapLoader DrawableList Type Drawable PlatformBitmapLoader DrawableList Type Drawable PlatformBitmapLoader DrawableList Type Drawable The end result is an extremely long delay in loading the page Steps To Reproduce Not sure how to fill this in Im assuming this is a tooling issue moresoe than anything else I will give whatever information you ask for however Expected behavior Page should load instantaneously Screenshots If applicable add screenshots to help explain your problem Environmentplease complete the following information Mono OS Android Version Device Google Pixel LX androidminSdkVersion androidtargetSdkVersion notice in the gif where I press the in the top right there is an enormous delay and an enormous amount of output before the page loads Nov The heightwidth parameters dont change anything in the BitmapLoaderCurrentLoad function the size is always remains original Project Xamarin Forms Android I had to change your lib SplatDrawing and use BitmapCreateScaledBitmap after decoding the stream because parameters outHeigth and outWidth that you used didnt work in this situation In case with IOS everything works fine PS In case with Cocoa Tizen platforms you still provide the ability to set widthheight despite the fact that you dont use these parameters at all in your source code so the size will definitely remain the same from anaisbetts Consider the following Test calls WithResolver as a part of that by default we suppress autoregistration this is implemented as an atomic refcount we add a ref Test kicks off it calls WithResolverfalse we set the resolver but because the prev ref is still at the new resolver doesnt get initialized Test finally finishes we remove our ref edited The ThreadStatic trick is definitely like a compromise Basically the core idea is if you try to Set the locator and youre in a unit test well perthread set it If youre in the app we never do this ThreadStatic bizness MainThreadScheduler works similarly So it means you can have two tests who pave Locator at the same time and they might work ofc if you schedule a Task everything falls over But we make you fall over a little less often What you really want is TaskContextStatic ie something that follows the same context across a bunch of threads Which I think exists now but definitely didnt at the time Maybe this is if list empty remove contract entirely This comment was generated by todo based on a TODO comment in c dfeaede e f d in cc weitzhandler Originally posted by todo in Need to review use of ILogger instead of LogManager ReactiveUI potential that some of the unit tests are watching a nonfunctioning logger Website docs need looking at Splat Remove ILogger init or have a default that returns the default logger from LogManager There is a method associated with GetAllRegistrations too that might need some testing around for the various DI engines to make sure they work as we expect Originally posted by glennawatson in Split out into new issue as it got lost in the review comments for so I had to hunt it out Allow the static logging to pass through the caller member info See Maybe some sort of wrapping logger like the others around the main logger Static loggers loose context at the moment As originally reported by chuuddo they have provided unit tests to help produce the exception here Details of their explanation SimpleInjectorDependencyResolver not works in real apps I made a pull request with changes to View and ViewModel classes to start initialization of RxApp and all tests fails After some investigations i found this issues The container is locked after the first call to resolve but ReactiveUI invoke all registrations after RxAppEnsureInitialized This can be fixed by not getting instace of MainWindow from container If there are no other solutions we should add this workaround to documentation csharp var window MainWindowcontainerGetInstanceIViewForMainViewModel var window new MainWindow windowViewModel containerGetInstanceMainViewModel windowShow SimpleInjector support multiple registrations for same interface only through CollectionRegister We cant register this lines using containerRegister method I dont have any workarounds for second issue Can we use this DI container with ReactiveUI Originally posted by chuuddo in 