Hi there I was wondering if we could discuss trying to bump the version of aruba currently in use in gli Ideally first bumping to and then to from there supporting the latest x version The reason is that were trying to get all gems which are large and using aruba using a x version where a lot of the bugfix and deprecation PRs are going in As were looking to release of aruba in the near future If you could have a stab or let us know what we can do to help that would be great It might be that the upgrade works flawlessly if so thats awesome Try and then as the first two static upgrades would be my advice Any other queries ask away Ill try help Luke Only tested in ruby p revision bundle seems to assume bin the proper way to run from app root bundle exec todo Example cb help GLOBAL OPTIONS exportersarg List of exporters to transform the data default table stdout help Show this message version Display the program version The default in the flag help output contains an array default table stdout However when a user supplies this value they might think they need to supply table stdout Flag attribute is configured like so flag exporters desc List of exporters to transform the data defaultvalue tablestdout type Array However when a user is supplying the flag they would use exporterstablestdout and not exporters tablestdout This is confusing for the user The defaultvalue value should be a real world value that will be processed by the type conversion system of GLI defaultvalue tablestdout Would there be an easy way for either me or you and myself to implement mutually exclusive options so that either a defaultvalue true can be disabled when using an MEO or another flag parameter that you list the options that are not to be used with it bash desc Describe test here argname Describe arguments to test here command test do c caction do globaloptionsoptionsargs puts test command ran end cdesc Test sub command t ccommand t do t t action do globaloptionsoptionsargs puts t ran end end cdesc Test sub command t ccommand t do t t action do globaloptionsoptionsargs puts t ran end end end How can I show help for Test The implementation of commandsfrom is and is a simple require If you call it from a class it will create global scope not local to where it was called from Hi when I run the following code I get bundle exec ruby ecmrb bar v ecm version unknown error ecm version unknown It doesnt even print the defined version number I was expecting to see error Unknown option v Is this a bug It prints the version number if you put v before the subcommand as I expected bundle exec ruby ecmrb v bar ecmrb version If a subcommand knows v you get it as a local option as I expected bundle exec ruby ecmrb foo v globals versionfalse versionfalse helpfalse helpfalse options vtrue vtrue ruby usrbinenv ruby require gli include GLIApp programdesc A Command to test version subcommandoptionhandling normal arguments strict desc foo command command foo do c cdesc Verbose cswitch v caction do globaloptions options args puts globals globaloptions puts options options end end desc bar command command bar do c caction do globaloptions options args puts globals globaloptions puts options options end end exit runARGV Hello guys How to create a subcommand for a flag the subcommand might have command flags and switches as well example rubyfu dothis module MODULENAME modlag modswitch example rubyfu dothis module COMMAND Im trying to write a subcommand with a stop switch ie but GLI always spits out an error saying Ive provided too many arguments ruby command deploy do d dcommand exec do subcmd subcmddesc based instance index subcmddefaultvalue subcmdargname INSTANCE subcmdflag n instance type Fixnum subcmdaction do globaloptions options args assumed one of these arguments would include the rest of the command end end end binexecutable deploy exec n ls error Too many arguments for command What am I doing wrong b addresses the weirdness about rendering an actual newline instead of the escape sequence c adds testunit as a dev dep so the first bundle exec rake test will work Otherwise you get the following UsersmaxDropboxworksrcgithubcommbigrasglisomeglitesttesthelperrb in require cannot load such file testunit LoadError from UsersmaxDropboxworksrcgithubcommbigrasglisomeglitesttesthelperrb in top required from UsersmaxDropboxworksrcgithubcommbigrasglisomeglitestdefaulttestrb in require from UsersmaxDropboxworksrcgithubcommbigrasglisomeglitestdefaulttestrb in top required from Usersmaxrbenvversions librubygems gemsrake librakeraketestloaderrb in require from Usersmaxrbenvversions librubygems gemsrake librakeraketestloaderrb in block in main from Usersmaxrbenvversions librubygems gemsrake librakeraketestloaderrb in select from Usersmaxrbenvversions librubygems gemsrake librakeraketestloaderrb in main rake aborted Command failed with status Usersmaxrbenvversions binbundle in load Usersmaxrbenvversions binbundle in main Tasks TOP test See full trace by running task with trace I could also rewrite the bootstrapped test case to use Minitest which might be better because then we dont need to add the dependency What do you think