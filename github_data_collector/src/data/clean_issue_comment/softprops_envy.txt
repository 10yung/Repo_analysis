 Please search existing issues to avoid creating duplicates Feature description Continue parsing for more missing required values instead stopping at the first one Motivation This can provide more information to the userdevopsdeveloper in order to setup all missing values at once instead of one by one Basic example Today this rust use serdeDeserialize deriveDeserialize Debug struct Config host String port String fn main match envyprefixedAPPfromenvConfig Okconfig println config Errerr eprintlnerror err stdprocessexit running with bash cargo run outputs this error MissingValue host The desired behaviour would output this instead error MissingValues host Or even better APPHOST considering prefix port Or even better APPPORT considering prefix Please search existing issues to avoid creating duplicates Bug description Parsing finishes with error ErrorMissingValue if I rename a field of parsed structure to a word consists of capitals only Expected Behavior Should be parsed without errors Steps to reproduce Define structure for parsing rust deriveDeserialize Debug pub struct DB serderenameDBUSER pub user String serderenameDBPASS pub pass String serderenameDBNAME pub name String serdedefaulthost renameDBHOST pub host String serdedefaultport renameDBPORT pub port u let dbconfig envyfromenvsettingsDBunwrap Make export DBUSERpostgres before running run and get panic value MissingValueDBUSER Your environment Archlinux envy version So I see this code in librs rust implIter IteratorItem String String Iterator for VarsIter type Item VarName Val fn next mut self OptionSelfItem self next mapk v VarNamektolowercase Valk v So I understand why the k is got lowercased I get the expected behavior if I remove this conversion but its not a solution because I lose feature of automatic comparison of a field of parsed structure and an environment variable So my question is how to determine if a field has Serde tag rename I can use the determining in order to prevent the conversion only for renamed fields If there is a breaking or notable change please call that out as these will need to be added to the CHANGELOGmd file in this repository This repository tries to stick with the community style conventions using rustfmt with the default settings If you have custom settings you may find that rustfmt clutter the diff of your change with unrelated changes Please apply formatting with cargo nightly fmt before submitting a pr What did you implement If this closes an open issue please replace xxx below with the issue number Closes just a failing test for now to kick start this How did you verify your change when this test passes the issue will be fixed What if anything would need to be called out in the CHANGELOG for the next release add support for serde flattened structs Please search existing issues to avoid creating duplicates Bug description Using the flatten attribute from serde almost works but breaks in the case of non string values in flattened structs In this case config always parses size as a string However if I put the size attribute directly in Config then everything works Expected Behavior The usize value in the flattened struct should parse Steps to reproduce rust deriveDeserialize struct Config serdeflatten pub subconfig Subconfig deriveDeserialize struct Subconfig pub size usize Your environment nightlyx unknownlinuxgnu default rustc nightly a a a d envy version latest The readme says that it supports parsing into Vec by separating the values by commas If I want to parse a variable as VecPathBuf where each path could contain commas would it work by putting that path in single quotes Eg sh FOLDERSC FooBarD Baz resulting in vec rC FooBar rD Baz And if there is a space after the separating comma it wont work right 