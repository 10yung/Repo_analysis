Updates the requirements on vimeopsalm to permit the latest version details summaryRelease notessummary pemSourced from a href releasesaemp blockquote h Improve template handling between different templated functionsh pBugfixesp ul liresolve codestaticcode inside trait appropriately a href liimprove handling of generic type resolution from one templated function into another templated function a href licheck for array assignment inside assignment operations a href liimprove codearraypushcode handling around known array shapesli ul blockquote details details summaryCommitssummary ul lia href Use forked collections for nowli lia href Added support for preggrep a href lia href Fix testli lia href arraypush shouldn t change list typeli lia href Explain bool assertions a href lia href Fix a href no crash when template cannot be resolvedli lia href Fix a href always check for array assignment in assignopli lia href Test doctrine collections a href lia href Fix a href don t replace templated types with generic ones inside own functionli lia href amending travis config snapshot gt a href liAdditional commits viewable in a href viewali ul details br Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version unless you reopen the PR or upgrade to it yourself dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in your Dependabot dashboard Update frequency including time of day and day of week Pull request limits per update run andor open at any time Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details I have class with accessing to private property within final method like this class ClassWithFinalMethodAndPrivateProperty private prop privet final public function finalMethod return thisprop I get Cannot access private property prop error if I call finalMethod on valueHolder proxy of this class Is there such limitation for Value HolderProxy using or did I something wrong Cant find any mentions about it in documentation or issues Disclaimer this issue was originally submitted here The context is about PHPDI When the class gets destroyed in its life cycle the destruct method gets called and if theres one implementation in the original class the proxy class tries to execute the base class implementation But looks like the proxy class is getting destroyed before creating a instance for the base class and as theres no check for null values we get the following error Wed Jun Uncaught Error Call to a member function destruct on null in Projectpath var proxies ProxyManagerGeneratedProxyPMCLASSNAMEGenerated d f c dc a cbf f f d php Stack trace Projectpath vendor phpdi phpdi src Proxy ProxyFactoryphp ProxyManagerGeneratedProxy PM CLASSNAME Generated d f c dc a cbf f f d destruct Projectpath vendor phpdi phpdi src Proxy ProxyFactoryphp DI Proxy ProxyFactorycreateProxyCLASSNAME ObjectClosure Projectpath vendor phpdi phpdi src Compiler ObjectCreationCompilerphp DI Proxy ProxyFactorygenerateProxyClassCLASSNAME Projectpath vendor phpdi phpdi src Compiler ObjectCreationCompilerphp DI Compiler Obje in Projectpath var proxies ProxyManagerGeneratedProxyPMCLASSNAMEGenerated d f c dc a cbf f f d php on line The project path and class full qualified names were hidden because its a private project where the class is related to database connectivity That class just access authorization data and creates a new connection instance The destruct method implementation exists to ensure the connection will be closed when the class gets destroyed In this scenario the class was never used and thats why I believe its getting destructed before creating an instance for the original class Note this will require a major version bump because it will effectively lead to failed installations rather than composer update sticking to previous versions See x Requires x Requires Fixes So far this is just a stub fixing one of the many proxy types See Right now just failing crashing test assets Related to tempname will not work on location that includes proxy php class file name as passed in location This is generated in generate as from the thisfileLocatorgetProxyFileNameclassName In reality we need the dirname base path of the desired location to pass into tempname 