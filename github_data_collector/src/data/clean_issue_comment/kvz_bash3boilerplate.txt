In reference to you find the corresponding PR New function add comment edit comment only if keyvalue is createdmodified clean up ini file remove empty lines ensure every section have empty line above ensure comments stay above keyvalue Hi is there a reason why the following wont work sh cat makesh usrbinenv bash read r d usage EOF true p printdeps Print dependencies c clean Clean project b build Build project t test Run tests v Enable verbose mode print script as it is executed d debug Enables debug mode h help This page n nocolor Disable color output EOF read r d helptext EOF true exits nonzero when EOF encountered This is a script to support the build of Healthbot Projects it is intended to be used by all projects and provide required boilerplate functions EOF source mainsh printdeps mode if argp then info Print dependencies fi clean mode if argc then info Clean project fi build mode if argb then info Build project fi test mode if argt then info Running Tests fi Ive left mainsh as is other than commenting out the Validation and Runtime sections at the bottom of the file sh makesh p UTC info Print dependencies But the following results in no output sh makesh h I was expecting that the help mode below in mainsh would work sh help mode if argh then Help exists with code help Help using fi The rationale for this approach rather than updating mainsh is that I can pull the latest mainsh with fixes new features and use with minimal changes Any help much appreciated I love and use the other features of bash boilerplate But I found and it has completely replaced my usage for argument parsing it is a vastly superior implementation TLDR Travis CI tests are successfully passing for both Linux OSX x assertions x shellcheck x stylepl Changes x use latest shellcheck binary no more cabal installs x use addons homebrew for darwin GNU packages yaml addons apt update true homebrew update true packages coreutils gnused gnutar grep make gawk findutils gnuwhich gnutime x add gnubin dirs to PATH homebrew decided to remove withdefaultnames gnuhomebrew bash if TRAVISOSNAME osx then if type brew devnull then HOMEBREWPREFIXbrew prefix add gnubin commands to PATH for d in HOMEBREWPREFIXoptlibexecgnubin do export PATHdPATH done fi fi x limit git clone depth x move blah version debug commands to beforescript x remove cache apt because docs set dist trusty in matrix gnuhomebrew sparkles Add colour function line numbers to debug mode x featdebug sparkles add color to PS prompt x use strftime formatting x standardise timestamps to UTC x save and restore TZ if sourced x perfdebug do not xtrace log function x refactorerrreport hammer prevent potential ERR trap recursion x docschangelog memo changelog entries for debug mode Tests whitecheckmark maindebugps scenario and fixture reworking the tests and fixtures add change timezone adjust Closes PR created with GitHub Pull Request inside vscode grin Possible implementation here We use lots of bashisms for good reason Perhaps we should check and bail out if a nonbash shell is running the script One way to check This is a feature request Having the script automatically parse some sort of configuration file jsonxmlyamlbash that dictates default values for its arguements would nice Why not just use default parameters Assume a case where the scripts are written for a multitude of runtimes say for eg servers and the default parameters are meant to be different for each runtime See discussion in PR 