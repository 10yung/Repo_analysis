deprecated SEL deprecatedSelector NSSelectorFromStringcodableKeys if self respondsToSelectordeprecatedSelector self instancesRespondToSelectordeprecatedSelector NSLogAutoCoding Warning codableKeys method is no longer supported Use codableProperties instead deprecatedSelector NSSelectorFromStringuncodableKeys if self respondsToSelectordeprecatedSelector self instancesRespondToSelectordeprecatedSelector NSLogAutoCoding Warning uncodableKeys method is no longer supported Use ivars or synthesize your properties using nonKVCcompliant names to avoid coding them instead deprecatedSelector NSSelectorFromStringuncodableProperties codableKeys uncodableKeys uncodableProperties Where do these methods come from Why do like This Thank you It would be nice to see how to use this especially objectWithContentsOfFile I cant reproduce this on demand but quite frequently when unarchiving an object all its properties are nil and they shouldnt be Have you seen this er method The initWithCoder method is missing a call to self init so I modified the initWithCoder function to adhere to the standard initializer template Hi any suggestions to fix crash and swift usage Add on objectWithContentsOfFile the nullable flag to Swift optional compatibility Trycatch on unarchiveObjectWithData Bellow the implementation of suggestions objectivec nullable instancetypeobjectWithContentsOfFileNSString filePath load the file NSData data NSData dataWithContentsOfFilefilePath attempt to deserialise data as a plist id object nil if data NSPropertyListFormat format object NSPropertyListSerialization propertyListWithDatadata optionsNSPropertyListImmutable format format errorNULL success if object check if object is an NSCoded unarchive if object respondsToSelectorselectorobjectForKeyedSubscript NSDictionary object archiver try object NSKeyedUnarchiver unarchiveObjectWithDatadata catch NSException exception NSLogexception delete corrupted archive initialize libraryDat from scratch else return raw data object data return object return object please push a version support for watchos Not quite sure whats going on here Unfortunately I cant reproduce the crash and crashlytics is giving me incorrect line numbers so I cant see exactly where in code this happens I should note that Countsheetm implements its own NSCoding NSCopying could that be the issue Fatal Exception NSGenericException Collection NSArrayM x b was mutated while being enumerated CoreFoundation x edb exceptionPreprocess libobjcAdylib x e f objcexceptionthrow CoreFoundation x e e NSException name Foundation x c c NSKeyedArchiver encodeArrayOfObjectsforKey Foundation x abb encodeObject RQMobile x db NSObjectAutoCoding encodeWithCoder AutoCodingm RQMobile x bbb RQMobileObject encodeWithCoder RQMobileObjectm RQMobile x d Countsheet encodeWithCoder Countsheetm Foundation x abb encodeObject Foundation x c NSKeyedArchiver encodeArrayOfObjectsforKey Foundation x bc NSDictionaryNSDictionary encodeWithCoder Foundation x abb encodeObject Foundation x b NSKeyedArchiver archiveRootObjecttoFile Hi as I can see you are carefully fill tags and labels for issues in your repo For such cases I create a githubchangeloggenerator that generate change log file based on tags issues and merged pull requests from octocat Issue Tracker This PR add change log file to your repo generated by this script You can check how it is look like here Change Log Some essential features that has this script it exclude notrelated to changelog issues any issue that has label question duplicate invalid wontfix Distinguish issues according labels Merged pull requests all merged pullrequests Bug fixes by label bug in issue Enhancements by label enhancement in issue Issues closed issues wo any labels Generate neat Change Log file according basic change log guidelines You can easily update this file in future by simply run script githubchangeloggenerator nicklockwoodAutoCoding in your repo folder and it make your Change Log file uptodate again Hope you find this commit as useful wink I have a class in swift with several vars strings arrays ints and bools Strings and arrays are coded and decoded well Ints and bools are not 