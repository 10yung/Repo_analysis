 When running cargo install cargosrc I get Compiling rustdochighlight v error E feature may not be used on the stable release channel When runnning with the nightly build cargo nightly install cargosrc I get Compiling rustdochighlight v error E unresolved import syntaxparselexerTokenAndSpan Maybe need to find a way to invoke a browser to browse HTMLXMLSVG tags arent escaped so theres just some empty or browser preprocessed lines instead of markup Similar issue with embed CSS it breaks document style Simple repro is to open document staticindexhtml within this repository Itd be nice to show a list of types functions modules and constants in the sidebar when you open a file Most other codenavigation tools have this ability already Probably this would just be something like turning the line object into a rust enum SourceElement Line Scope The text shown when this scope is collapsed For this enum it would be enum SourceElement summary String elements VecSourceElement and handling this in the JS I dont know how wed actually generate that though Have colours fonts syntax highlighting and suchlike under simple and easytounderstand classnames seperate from the structurallyimportant styling like flex width This would allow you to have a style css file specified with style This would mean that you could have a rustdoc style a readthedocs style and suchlike This isnt really fixable without adding a URL prefix option to comrakComrakOptions This is essentially how GitHub gets relativepath images from the right place in its rendered markdown Alternatively we can add a map method to comrakarenatreeNode and then map it that way since we want images to have a prefix but not links Ill put in a PR and then put a PR to this when that gets merged Currently this is broken because each set of lines in the search results shares one issourcedisplayopen flag This PR changes this so that only one line per file can have its source display visible at once Creates and renders a highlight component for the srcView component A couple of things to note I believe this could work for the SearchResults use of highlight with some additions but I havent attempted that yet One thing I feel a little uncertain about is the pulling of positional data from the DOM in makehighlight L It seems to be working fine but I think if were seeing the highlight end up in the wrong location there may be some render lifecycle conditions where the final position isnt yet available If thats the case I think wed need to move most of the makehighlight code into componentDidUpdate in srcView and put positional data in state pass down as props etc