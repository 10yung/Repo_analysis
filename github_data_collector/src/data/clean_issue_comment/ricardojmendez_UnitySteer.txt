 ning of RigidBody forces with steering forces rather than simply moving a RigidBody when it is not set as kinematic This allows more intuitive behaviour of objects with rigid body physics which also want steering forces This adds an extra tickbox CombineRigidBodyForces and an optional float field RigidBodyPrescalar to the AutonomousVehicle component panel to enable nonkinematic RigidBodies to steer properly This is disabled by default so no default behaviour changes Hi I am not using unity steer or unity but I try to understand steering I had some success so far but I struggle with the following problem and I hope that you as steering expert can help me I would like to apply steering to spaceships like fighters When they move in one direction and I want them to make a degree radius they slow down turn and move to the other direction This is totally fine for big battleships but fighters should keep their steep and make a nice turning Is it possible to use this behavior with steering or would you solve it in the AI Another option is to detect these cases and give them a nice path which also forces them to arrive at the arriving point with the right direction Sebastianw added if UNITY ORNEWER directive default navmesh area in is Walkable Thanks a lot for sharing this It would be great to be able to change properties in the prefab during runtime and have these changes updated to the instances Being able to see the changes instantly would make it really easy to finetune the whole system Thanks I believe the Pythagorean theorem code should have a subtraction not an addition While debug rendering the calculated intersection points the original code could generate points that were wildly off Changing the formula now generates the intersection points directly on the radius of the spherecircle This might not have much impact on obstacle avoidance the original points would indeed steer the vehicle away from the obstacle but it should allow the vehicles to have a closer tolerance to the obstacle Both the PredictFuturePosition and PredictFutureDesiredPosition should check for the Position property instead of the Transformposition property so as to account for the DetectableObjects Center offset The biggest bug Ive found regarding the previous implementation is in regards to the SteerForSphericalObstacles script which uses the return value of PredictFutureDesiredPosition to construct a movement vector to work with This movement vector will be inaccurate since in the steering behaviors Ive seen the DesiredVelocity is being applied with the vehicles Center property in mind eg SteerForPathSimplified That is DesiredVelocity goes from detectableObjectPosition to a future detectableObjectPosition but the constructed movement vectory in SteerForSphericalObstacles was going from dectectableObectPosition to a future transformPosition an inaccurate move vector resulting in inaccurate collision checks However I havent fully explored all calls to the PredictFuturePosition functions so it might create problems somewhere Introduction First of all Thank you so much for UnitySteer It is great Im working on a D Physicsbased game with zero gravity in space My game will use Steering Behaviours heavily Context In my game you control Ships by touching on a Tablet You touch and then the Ships follow your finger I have such behaviour working just fine Issue However theres a Ship which Orbits around another GameObject with Input I have the Orbiting behavior working just fine However I only know how to make such behaviour by using key presses To tell the Ship to go ClockWise or CounterClockwise The Player should be able to touch and have the Ship Orbit around another GameObject trying to Steer to Follow andor Allign with your Finger Without breaking from her Orbit pattern The Ship will always try to Align as much as possible with your finger Or Arrive atFollow the Location of your finger Can you Please Help Me How one achieves such complicated steering behaviour using UnitySteer Thank you so much for your time This is just like the speed fluctuation component but gives a little extra variance to final result which helps it look more natural BTW hope you dont mind all these PRs its just my principle to contribute back changes I find useful even on MIT projects Theres no urgency to merge these from my perspective Im just sending them as I make them