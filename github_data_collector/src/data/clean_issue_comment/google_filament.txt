We need a Dockerfile which can build everything especially the webgl stuff According to Android Studio this makes gltfviewer Java usage go from MB to MB Remove LOC without losing any functionality Fixes Previously we were using defines such as IPHONEOSVERSIONMAXALLOWED to determine feature support but this define is strictly tied to the SDK version We always build against the latest iOS SDK so instead we need to check for certain feature support at runtime This way Filament binaries can be used across multiple iOS versions Ive set the minimum iOS version for Filaments Metal backend to for now but I plan to revisit in the future lowering it to perhaps or Clients should be prevented from allocating unused buffer slots because uploading to an unused slot triggers undefined behavior in the backend Motivated by New release v uses enums such as MTLPixelFormatASTC x HDR only available on iOS I use Xcode to build v for the iOS platform Xcode will automatically set min deploy target to iOS But v SDK crashes on iOS iPhone s dyld x de abortwithpayload dyld x de a abortwithpayloadwrapperinternal dyld x de d fcntl dyld x da f dyldfastBindLazySymbol ImageLoader unsigned long dyld x da a dyldfastBindLazySymbol ImageLoader unsigned long libdylddylib x d bb dyldstubbinder Main reason is backenda is build by Xcode miniosverions is iOS x ApplicationsXcodeappContentsDeveloperToolchainsXcodeDefaultxctoolchainusrbinld demangle ltolibrary ApplicationsXcodeappContentsDeveloperToolchainsXcodeDefaultxctoolchainusrliblibLTOdylib dynamic arch arm iphoneosversionmin syslibroot ApplicationsXcodeappContentsDeveloperPlatformsiPhoneOSplatformDeveloperSDKsiPhoneOS sdk I believe if we set IPHONEOSDEPLOYMENTTARGET to everything will be fine on iOS Describe the solution youd like Provide a way to set CMake min iOS deploy system Describe alternatives youve considered Where can I change the iphoneosversionmin Im not familiar with CMake OS and backend only on iOS Replace with forward declarations if needed and includes in cpp that now need them The idea here is to have our headers have the least amount of impact as possible on our clients eg compilation time Describe the bug When trying to run from Android Studio on a relatively old device Sony Xperia Z runs Android and supports OpenGL ES the sample crash with the following stacktrace javalangUnsatisfiedLinkError dlopen failed cannot locate symbol aeabimemmove referenced by dataappcomgoogleandroidfilamentibl libarmlibfilamentjniso at javalangRuntimeloadLibraryRuntimejava at javalangSystemloadLibrarySystemjava at comgoogleandroidfilamentFilamentclinitFilamentjava at comgoogleandroidfilamentFilamentinitFilamentjava at comgoogleandroidfilamentiblMainActivityclinitMainActivitykt at javalangClassnewInstanceNative Method at androidappInstrumentationnewActivityInstrumentationjava To Reproduce Steps to reproduce the behavior buildsh p desktop i release buildsh p android release gradlew samplessamplehellotriangleinstallDebug Expected behavior Application runs normally Smartphone please complete the following information Device Sony Xperia Z OS Android Additional context The same sample runs on a newer device Samsung S e and AVD after forcing it to use OpenGL ES Note Using the latest master 