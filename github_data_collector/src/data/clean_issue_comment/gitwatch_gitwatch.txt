I updated the usage section of the readme to put the filefolder path at the end which is how the help flag describes how to use the script Also I updated the systemd service to point to usrlocalbin since thats where the README suggests to install it and where bpkg installs it A while back a notable update was made by nevik which I merged in from the devel branch where instead of running gitwatch as a single nonpipelined process multiple pipelined processes are generated This is so that inotifywait can run in monitor mode and pipe updates to gitwatch instead of starting up a fresh instance of inotifywait after every change This has a number of advantages to the previous approach it means that theres likely less overhead as inotifywait doesnt need to reinitialize itself every time This might be especially noticeable on a large repository It also means that we are less likely to miss changes that appear in between instances of inotifywait So this change had a lot of good associated with it However it means that gitwatch runs in multiple permanent processes of them depending on whether an actual commit process is sleeping or committing as well as an inotifywait process This raises difficulties in stopping gitwatch Theres a separate bug report by someone who claims that ctrlC on the master process isnt killing the rest as it should Ive been unable to duplicate that but I have regularly experienced other problems I myself typically run gitwatch as a background process without an associated terminal which means when I want it to stop I need to kill it With the new multiprocess approach I need to make sure to kill all of the gitwatch processes and also remember to look for the inotifywait process because in monitor mode it doesnt die either This is a pain for me and a much more major usability challenge for people who dont know the script well Are there ways of fixing this Presumably Ive been doing some research as Im not a deep bash expert It looks like traps could be used to catch signals on one process to kill the rest Ive been experimenting with this some but havent been all that successful It would continue to make the script more complicated as wed have to make sure to capture the pids for each process spawned to make sure we can correctly kill them when one of them goes And none of the approaches would be resistant to a kill I am therefore planning to revert gitwatch back to a single process script where inotifywait does not run in monitor mode and restarts after each change At least for my use cases I was not personally experiencing any performance difficulties with that anyway though maybe someone else was That said I wanted to post this here to give anyone who wished a chance to respond Ill wait a few weeks before doing this I tried several things I will show one of them I have a folder that made a git inside so cd gitfolder git init git add git commit then I did gitwatch gitfolder and it just hangs there and any changes I do does get commited any guidance or is this project dead Added oneshot option so script doesnt need to run in the background all the time Removes requirement of inotifywait for oneshot Thanks for the great source Saved me a lot of time testing with git I had to make a few edits to make the service work on Manjaro Linux systemd Also changed to assume that gitwatch is in PATH rather than using an absolute path The problem with the regexp not working as discussed in has to do with how inotifywin matches pathnames against the exclusion regexp which is different from Linux inotifywait Ive brought this up in thekidinotifywin and we can discuss further steps once the devs there have responded about whether they want to improve compatibility with Linux inotifywait Asking inotifywait without event create does not detect directory creation and none of the files created within it at least on my system which uses inotifytools Also you may add the event moveself or just move to get tofrom to detect files moved out of the watched directory Eg watched directory is foo and you move file foobar into tmp As datag pointed out in its neat to use bash builtins to reformat the paths instead of the external commands dirname and basename However the bash builtin code for these transformations is rather ugly so they should be placed in sonamed functions Additionally the implementation of dirname datag first suggested does not cover all cases of input strings sometimes wrongly returning empty string so that also needs to be figured out Add a v switch that makes the script act verbosely mostly used for debugging of course outputting things like which push remote and branch were selected if any if the target is recognized as a file or folder etc Depending on the usecase there might be relatively many commits happening with many changes that blow up the repo quite a bit A git repack ad and possibly other switches will help here making use of delta compression by looking at the blobs in the history as one big thing and not just adding new hunks as they come in This could be done with a cronjob but sometimes it might be convenient to just have the gitwatch script itself do the repack after every so many commits This feature should be implemented with a commandline switch and an optional number of commits after which will be repacked 