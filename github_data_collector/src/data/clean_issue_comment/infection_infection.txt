Extracts the ignore role of Util MutatorConfig into IgnoreConfig which is now a simple specific class which can be injected in IgnoreMutator only simplifying MutatorConfig only leaving it with settings I plan to further change that as well how MutatorConfig works later but it will be in another PR Depends on Right now Performance is more about logging the resource consumptions not really about performance Depends on Depends on Also consolidate the tests Depends on Rename Timer to Stopwatch Leverage the already installed PHPUnit Bridge to mock the timesensitive functions to be able to better test Timer Depends on Rename EventSubscriberInterface into EventSubscriber Rename the Event Listener namespace into Event Subscriber I know its pretty much the same thing but since we have only Subscriber classes it will make things less confusing Move EventSubscriberInterface from Event EventDispatcher to the Event Subscriber namespace Depends on This PR proposes to group the event dispatchers subscribers events and listeners under the Event namespace In general I believe when you have categories of things you either group them by boundaries or by type For example Grouping by boundary src User Userphp UserIdphp UserRepositoryphp Grouping by type src ValueObject UserIdphp Model Userphp Repository UserRepositoryphp Those two approaches are not necessarily exclusive for example you can apply one into other or viceversa In any case I feel the current eventrelated organisation is a bit too spread without any real value so the proposal here is to group them under a common namespace and then keep their separation by category This PR changes the mutator tests so the mutation happends at the right time This PR x Wraps reflection with our own class x Covered by tests This will make some things a bit easier It allows us to make a switch to better reflection removing our need to autoload the users code It also means we could possibly update the canMutate function to take this information as a param eg php public function canMutateNode node InfectionReflectionClass reflection bool Once again ive chosen terrible names and as im writing this i realize InfectionReflectionClass should probably be something like ClassReflection