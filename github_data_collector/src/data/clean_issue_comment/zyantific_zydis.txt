I hope to support the conversion between assembly code and hex code which can be used a lot vs Compile Zydis v kernel Zycore cannot open include file windowsh It might be worth a try to cache the most common instructions in the decoder for improved performance I did a very hacky quick test and determined that caching CC and alone results in a performance boost The documentation should always be in sync with the latest changes Currently this involves me manually building it and pushing it into an S bucket That could happen automatically through CI Additionally it would be great if we could display a dropdown in the doc that allows viewing documentation for older versions of Zydis as well similar to what docsrs does for Rust Zydis should provide more official language bindings Create C wrapper class bindings flobernd Create C bindings flobernd x Create Go bindings Create Java bindings x Create Pascal bindings flobernd Create Python bindings official athre z x Create Rust bindings th rex Update unofficial LuaJIT bindings Feel free to contribute if no user is mentioned on a specific bindings task Decouple operanddecoding from general instruction decoding to significantly decrease the size of ZydisDecodedInstruction which will improve usage of CPU cache in some situations Remove the ZydisDecodedOperand array from the ZydisDecodedInstruction struct Provide a function that allows to decode count operands beginning from a given index Additional flags like eg include hidden operands could be useful as well Implement a wrapper struct that contains the fixed size ZydisDecodedOperand array like in the current ZydisDecodedInstruction and a function to fill this struct for convenience reasons First task would be to provide a proper concept and to evaluate if there is a good way to minimize breaking changes Some structural changes should be made to make the interface more consistentintuitive The ZydisDecodedInstruction struct should be split in two separate structs one that contains only the information provided in minimalmode and one that additionally contains the information provided in fullmode The API should be adjusted to mirror the above changes switch to a step decoding process minimallength decoding and fullsemantical decoding The minimal decoding function should take a buffer as input like the ZydisDecoderDecodeBuffer function does and the full decoding function should be able to extract all needed information from the struct returned by the minimal decoding function Create an additional function that takes a buffer as input like the ZydisDecoderDecodeBuffer function does and directly performs a full decoding for convenience reasons First task would be to provide a proper concept and to evaluate if there is a good way to minimize breaking changes Add a flag in the ZydisDecodedOperand struct to mark a register operand as AVX VNNIW multisource operand Add formatterproperty to print these instructions in a special LOHI form x Introduce ZYDISELEMENTTYPECC type for operands containing conditioncodes Provide a mnemonic offset for instructions with ZYDISELEMENTTYPECC operands pointing to the position where the condition code string can be inserted eg offset for VCMPPD Improve the instructionformatter functionality Print hidden memory operands if an segment override is used Add formatterproperty to automatically rewrite instructions with condition codes to their corresponding pseudomnemonics eg VCMPEQPD