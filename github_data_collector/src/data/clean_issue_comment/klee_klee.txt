Statistics encoded in runistats were limited to a maximum number of due to encoding in a uint t variable This approach has multiple limitations a maximum number of statistics were allowed a subtle bug can be triggered if many more statistics are added independent of the selected statistics for runistats Depending on the linking order statistics will get a different ID Previously the ID was used to shift a to its position marking the statistic as being used This will lead to undefined behaveour if more than statistics are used Using an llvmSmallBitVector instead fixes both problems Remove support for old tr unordered set and map And check hashes using callbyreference instead of callbyvalue to avoid incdec of reference counters This patch enables easily adding statistics to the runstats file This both cleans up StatsTracker a bit and makes adding stats effortless by simply adidng ad SQLIntStatistic variable and incrementing it as desired It moves most of the existing stats to this system Since there are some statistics that are gathered but not used I added a verbosity flag that enables the option of writing those unused statistics too A nice property of this is that kleestats should now work with any addition to the stats file and will ignore additional columns Add option to generate xml testcases This patch generates test cases as XML files In addition testcompspecific additional arguments are specific to generate experiment descriptions KLEE flushes uninitialised memory which I encountered during sqlite runs Given this program C include asserth int main char a malloc unsigned i kleemakesymbolic i sizeofi i kleeassumei a i a a a b ifa i b printfHA else asserta i a return KLEE issues queries like this Query Type Value Instructions array constarr w w array i w w symbolic query Ult N ReadLSB w i Eq false Eq Read w Extract w N ZExt w Add w N false Add w N OK Elapsed e s Result It is really annoying that the uninitialised memory gets flushed to the update list This is because ObjectStateflushRangeForRead creates a new flushMask if it is not present yet That means that all bytes are unflushed which means that the uninitialized memory is read from concrete store and added to the updatelist Because there is also a symbolic write at the start those concrete updates dont get folded into an array One solution disccused with MartinNowack is to enhance handling for uninitialised memory For example we could consider bytes xAB in concreteStore as uninitialised and then handle writes of xAB byte as symbolic so they dont get written into concrete store Any opinions on this Or other ideas how to make it more efficient This patch fixes RandomPathSearcher to respect the calls to update method and therefore supports use cases where you only want it to work on subset on states It uses pointer bit stealingllvmPointerIntPair so its limited to just instancessubsets Because currently the update method is a noop this is of course slower but I never saw it in the flamegraphs The selectState should have similar performance as before as this patch adds only a couple of arithmetic instructions This should deprecate and in general enable subset searcher extensions I had to revert unqiueptr patch as it is very difficultannoyingunclear to have bitstolen pointers with unqiueptr In the AssignmentGeneratorhelperGenerateAssignment method the Select case is not handled I encountered this while fuzzing the Rust url crate but it took over minutes to manifest This may or may not be related to the optimizearrayall flag Im not entirely certain what helperGenerateAssignment is used for but I assume it has to do with simplifying the SMT query before actually creating it Hi During my experiment I found that when using klee with writecvcs libcuclibc posixruntime mazebc A symfiles it generates CVC files like the following Adatastat ARRAY BITVECTOR OF BITVECTOR modelversion ARRAY BITVECTOR OF BITVECTOR Adata ARRAY BITVECTOR OF BITVECTOR ASSERT NOT b Adatastat x B Adatastat x A Adatastat x Adatastat x STP reports the following errors syntax error line Illegal input character Fatal Error STP Error STP works fine when replacing Adatastat with Adatastat and Adata with Adata I found that file fdinitc affects the variable names in CVC files The output files are OK when changing two adhoc strings in the file Since Im not familiar with KLEE Im not sure whether my modification has any sideeffect BTW it is necessary to do similar things change some dashs to underscores in genboutcpp eg Adata Thanks Is there a better way of opening the csv file in the kleelast directory than hard coding it line of PTreecpp And is it worth having a local variable PTreeh to store whether we should dump the process tree or just call the StatsTrackerdumpProcessTree function KLEE has been used by many software systems like Angelix for providing symbolic information of a program It would be nice if theres API interfacing with KLEEs core symbolic execution engine just like Z which has both CLI interface and API bindings for different languages This task might be too timeconsuming though but I do see its a very good to have feature that KLEE should have The good thing is that I can see KLEEs structure is modularized already maybe just a class dedicated for exposing highlevel API functions with proper documentation are required to be done for this Thanks