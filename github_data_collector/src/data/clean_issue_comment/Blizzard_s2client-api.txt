Just added ControlGetObservation in AgentControlImpRestart The Update will still return false thus breaks the main loop although it have called AgentControlRestart in OnGameEnd In single player game with a computer it works fine And maybe that is what caused the problem cpp static void CallOnStepAgent a UpdateStepAgentsRunParallel stepagentCallOnStep ControlInterface control aControl if controlIsInGame aOnGameEnd Ok it calls OnGameEnd and my AgentControlRestart will be called soon controlRequestLeaveGame OKThats it return ActionInterface action aActions controlIssueEventsactionCommands if action actionSendActions ActionFeatureLayerInterface actionfeaturelayer aActionsFeatureLayer if actionfeaturelayer actionfeaturelayerSendActions Then it will return to Update and return false then the main loop breaks and my program exits I guess the problem comes from here Just see the comments cpp void CoordinatorImpStepAgents auto stepagent this Agent a ControlInterface control aControl if controlGetAppState AppStatenormal return if controlPollLeaveGame return if controlIsFinishedGame return controlStepprocesssettingsstepsize controlWaitStep from here we know the game has been end if processsettingsmultithreaded CallOnStepa The first chance to call the CallOnStep is missing This function will call OnGameEnd based on whether the Agent is in game or not since it is not a multithreaded game according to my settings if agentssize stepagentagentsfront else RunParallelstepagent agents Normal opeartion as usual if processsettingsmultithreaded for auto a agents if aControlGetAppState AppStatenormal continue It is possible to have a pending leave game request here if aControlPollLeaveGame In PollLeaveGame it checks if the Agent is in game is not return true and continue continue CallOnStepa Because of step the last precious call of CallOnStep that is the call of OnGameEnd as I have mentioned in step is missing again Forgot to say this is the headless version on Linux I am using Edit I think I got to the bottom of this I will post some code when I get to eventually solving my own problem Followed the steps for compiling this Only command i changed is cmake G Visual Studio Win cmake G Visual Studio Could that be issue Builds on piroxiljin changes to fixes issue and probably a bunch of other Observation issues A number of issue were introduced by the most recent major balance changes This pull request attempts to fix Mishandling of the cloak state Remapping of some ability ids Additionally unit tests have been updated to reflect bigger bunkers gateways automatically building as warpgates Issue TestSnapshot raises assertion error on line of testsnapshotcc during the test class TestSnapshot Setup Visual Studio Latest client Latest master branch of s clientapi including new protocols Comments Im attempting to fix the sc api for the latest client Im pretty sure the problem is in how the raw observation data is piped in and then used to update the unitpool lines of sc clientcc For some reason after the first two test cases have passed where ObservationImpunitpool member is populated with a total of neutral and allied units during the update prior to calling TestSnapshop only one unit is put into that pool For reference the observation unit test class Testobservationinterfacecc pass just fine though there are problems transitioning between test suites but thats for another day Code something like this not actual tested code fails assertion because weapons is empty const UnitTypes data clientgetObservationGetUnitTypeData assertdata UnitTypeIDUNITTYPEIDTERRANBATTLECRUISER weaponsempty This was called in OnGameStart Many other units have their weapons data set properly Here Ive used game version Base 