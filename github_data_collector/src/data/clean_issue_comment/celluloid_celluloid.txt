This PR updates the CI matrix to use latest JRuby JRuby release blog post Hi Im making updates for Open Collective Either you or a supporter signed this repo up for Open Collective This pull request adds backers and sponsors from your Open Collective It adds two badges at the top to show the latest number of backers and sponsors It also adds placeholders so that the avatarlogo of new backerssponsors can automatically be shown without having to update your READMEmd more info See how it looks on this repo You can also add a Donate button to your website and automatically show your backers and sponsors there with our widgets Have a look here PS As with any pull request feel free to comment or suggest changes The only thing required are the placeholders on the README because we believe its important to acknowledge the people in your community that are contributing financially or with code Thank you for your great contribution to the open source community You are awesome And welcome to the open collective community Come chat with us in the opensource channel on great place to ask questions and share best practices with other open source sustainers This is a tracking issue for a Celluloid release see also The master branch contains the code to be released This includes a lot of refactoring to consolidate Celluloid from fragmented gems and removed global variables and other hardtomaintain bits I dont have time to do the release myself though see so Im looking for volunteers to address the following items below x Timeout extensions decide whether to merge this PR or abandon it EDIT abandoning the PR CHANGESmd add v release notes Manual testing of the upgrade against some realworld Celluloid applications its been a long time since Celluloid had a release like this and theres a good chance there are some unaddressed bugs not caught by automated tests If you are interested in working on either of these items or would like to suggest additional items which should make it into a v release please respond below If there are any volunteers interested in taking over maintenance of Celluloid please reach out to me either on this issue or at my GMail address bascule I can help mentor you NOTE Discussion about the future maintenance of Celluloid has largely moved to the Gitter I keep finding I need to retreive actors that are alive and of a given class normally just to count them Whats the correct way of doing this without getting a DeadActorError The obvious doesnt work CelluloidActorallselecta aalive aisaThing Maybe this is because of a race condition alive is true when the first part of the test happens but false when we reach the second part But I dont know for sure The only workable solutions I have been able to find are CelluloidActorallselecta aalive aklass Thing Which seems to rely on a private method so Im not very happy about that Or I could trap for DeadActorError which seems worse Proposed solution should there not already be one Make alive a valid method to call on a dead Actor rather than raising a NoMethodError as it does now Chasing an issue where my Celluloid script is unable to reconnect to the database if in case the connection gets lost Found this discussion around celluloid and ActiveRecord from but nothing in it that help me here Tested the AR reconnect under JRuby Thread the reconnect works there Here are the scripts I used to test the reconnect thing With script running Celluloid celluloid require celluloid require activerecord require activerecordjdbcpostgresqladapter ActiveRecordBaseestablishconnectionadapter postgresql username postgres database postgres pool timeout class Worker include Celluloid def start begin ActiveRecordBaseconnectionpoolwithconnection do conn connexecuteselect pgsleep connexecuteselect puts Working end rescue Exception exception puts n got exception exceptionmessage end end end loop do Workernewasyncstart sleep end Using JRuby Thread require activerecord require activerecordjdbcpostgresqladapter require securerandom ActiveRecordBaseestablishconnectionadapter postgresqlusername postgresdatabase postgresencoding unicode pool timeout loop do Threadnew do Threadcurrent id SecureRandomhex begin ActiveRecordBaseconnectionpoolwithconnection do conn puts Threadcurrent id puts conntos connexecuteselect pgsleep connexecuteselect puts Working Threadcurrent id end rescue Exception exception puts ngot error from Threadcurrent id exceptionmessage n end end sleep end While Im still searching for the reason for the above issue Is anything specific I need to understand here NOTE All code was tested under java version JavaTM SE Runtime Environment build b Java HotSpotTM Bit Server VM build b mixed mode this program eats Gb in hours i think this related somehow to gem timers also there was a leak in it before ruby p celluloid timers Ubuntu LTS ruby require celluloid class A include Celluloid def initialize timer every end def stop timercancel terminate end end p CelluloidVERSION p TimersVERSION loop do actors Arraynew Anew sleep actorseach stop end I have recently started noticing Actors failing in our Celluloid service with the following error and stacktrace E T ERROR Actor crashed TimeoutError execution expired appvendorbundleruby gemscelluloid libcelluloidmailboxrb in sleep appvendorbundleruby gemscelluloid libcelluloidmailboxrb in wait appvendorbundleruby gemscelluloid libcelluloidmailboxrb in block in check appvendorbundleruby gemstimers libtimerswaitrb in block in for appvendorbundleruby gemstimers libtimerswaitrb in loop appvendorbundleruby gemstimers libtimerswaitrb in for appvendorbundleruby gemscelluloid libcelluloidmailboxrb in check appvendorbundleruby gemscelluloid libcelluloidactorrb in block in run appvendorbundleruby gemstimers libtimersgrouprb in wait appvendorbundleruby gemscelluloid libcelluloidactorrb in run appvendorbundleruby gemscelluloid libcelluloidactorrb in block in start appvendorbundleruby gemscelluloidessentials libcelluloidinternalsthreadhandlerb in block in initialize appvendorbundleruby gemscelluloid libcelluloidactorsystemrb in block in getthread appvendorbundleruby gemscelluloid libcelluloidgroupspawnerrb in block in instantiate I am a bit confused as to what is causing this error as there is no stack trace that correlates with any calls from my app Any advice on how to work out what could be causing this error would be hugely appreciated so that I can look into the root cause I suspect it could be A block Actor A call to sleep I have seen some odd issues in our logs recently and tried to reproduce it I use the registry for Actors so that I can avoid having to link all my Actors together and restart everything when one Actor fails What I mean by that is that I have a controller which starts up all the actors at the outset and if one of those actors fails it does not matter as I rely on the Supervisor functionality to restart that actor and by then accessing the actors as CelluloidActor foo I am not coupling Actors together unnecessarily simply for the purposes of passing messages According to the Supervisor docs if I supervise an actor with the as foo argument then I can access that actor or any later respawned instance of that actor with CelluloidActor foo Here is my registration code ruby Watchsupervise as watchkeywatchid args watchid options In the Watch itself I log when it is instanced and when that line above runs I soon after see the log entry from the initializer as expected with the arguments specified above I then later forcibly trigger a failure of that actor E T ERROR Actor crashed RuntimeError Test recoverer exception recovererrb in block in runmanagercommand The actor crashes as expected and then within a few milliseconds I see the log entry from the Watch initializer confirming that a new Watch Actor has been created by the Supervisor Unfortunately however whenever I then try and access that same actor I get the DeadActorError ruby CelluloidActor watchkeywatchid futurefoo raises DeadActorError CelluloidActor watchkeywatchid alive false According to the docs it states In this case the supervisor will ensure that an actor of the Sheen class created using the given arguments is always available by calling CelluloidActor charlie This is not happening for some reason The old Actor is remaining in the registry and the new one whilst instanced is not available Any idea what is going on here BTW I am using Celluloid on Linux but expect this will happen on OSX too as that is my dev environment I am not using the superviseas method and instead using supervise as as superviseas no longer exists We should release While theres an awful lot of stuff we could potentially fix before shipping a release I think the biggest thing we can do is ship the ActorCell split as and work to fix everything that breaks as a result wink What about the rest of the stuff Well thats what is for 