Improves types added in and added test cases Fixes types on deeprecursive unwrapping observable array of observables Passes through RegExp and Date wo mapping prototype see here In the added test cases observableArr and builtins are the two newly covered conditions the others were good already but always nice to have tests Also in finding which builtins get unwrapped correctly Date and RegExp I found this Should Map Set WeakMap and WeakSet and potentially others be added here They currently do not behave as expected with kotoJS Theoretically this is a breaking change since the output for a given input will change but asis the returned mapset is just an empty object so I cant see any way it would be being used currently Proof In the Knockout release there was a change to the componentsdefaultLoaderjs that is breaking compatibility issues with IE due to the use of reserved word default if module typeof module object moduleesModule moduledefault module moduledefault My suggested fix is to change from dot notation to bracket notation if module typeof module object moduleesModule module default module module default I have tested this with IE and it seems to fix the issue Description In the Knockout release there was a change to the componentsdefaultLoaderjs that is breaking compatibility issues with IE due to the use of reserved word default if module typeof module object moduleesModule moduledefault module moduledefault My suggested fix is to change from dot notation to bracket notation if module typeof module object moduleesModule module default module module default I have tested this with IE and it seems to fix the issue Expected Behavior Compatibility with IE Actual Behavior Unable to load page in IE Steps to Reproduce the Problem Open page using templates and knockout in IE or in compatibility mode Specifications Version Knockout Last Working Version Knockout Platform Windows Browser IE Additional Info Comment on Commit Example IE knockout bugzip Hi Ive been experimenting with rd party Web Components in order to get rid of the HTMLCSS mess of some layout and UIframeworks you know who they are The context Of course there is a conceptual mismatch between the two It would be nice to have the Custom Elements properties and attributes to be observable and let Knockout keep everything twoway binded Alas most rd party WCs are build on LitElementPolymer or Stencil that come from the world of state machines onewaybinding and not from our beloved MVVM world with its twowaybinding So hooking into the attributes and properties with observables will probably be a challenge especially for rd party WCs that are beyond our control And were left with our regular databindbindings that have Knockout and the WC manipulating the DOM at the same time in order to perform their respective bindingmagic Its pretty obvious that this will lead to problems but still Simple text value or foreach bindings should work IMO and I would be happy just to have those working But unfortunately no dice The foreachbinding messes up most rd party WCs Ive tried Material Components Web Components based on LitElement Weightless based on LitElement Ionic Core based on Stencil Both Ionic and Weightless WCs dont work in a foreach binding They both exhibit the exact same problem HTML elements are doubled even though they use different techniques Material Components WCs dont seem to exhibit this behaviour but I dont really trust it since theyre build on LitElement just as Weightless The problem When theres a foreachbinding containing WCs that loads directly on startup it works times out of obvious race condition but when the foreach is created or updated later on for instance when adding items to the binding when lazy loading a component containing a foreach or even when just delaying applyBindings with a setTimeout the created items contain corrupted HTML elements are doubled in most cases My findings KOs foreach uses the internal templating engine and the childNodes of the bound element are used as template However as soon as the WCs javascript has loaded and the browser has manipulated the DOM to reflect the WCs design added CSS and sometimes even elements to the Light DOM the KO template engine will use those new nodes from then on as a template And when inserting new elements the browser will again try to manipulate already manipulated nodes and so they get corrupted The solution If I keep the template out of the browsers reach It wont be mangled by the WCs JS and the browser and Knockout will inject clean nodes into the DOM Eg this doesnt work example using Ionic WCs html iongrid databindforeach list ionrow ioncol size ionitem ionlabel positionfloatingLabelionlabel ioninput databindvalue dataioninput ionitem ionbutton databindclick parentdeleteDeleteionbutton ioncol ionrow iongrid But this does html iongrid databindtemplate foreach list name itemrow iongrid script typetexthtml iditemrow ionrow ioncol size ionitem ionlabel positionfloatingLabelionlabel ioninput databindvalue dataioninput ionitem ionbutton databindclick parentdeleteDeleteionbutton ioncol ionrow script This is however a lot less readable Especially with many foreach bindings So now what I understand that there are a lot of conceptual differences between the worlds of Knockout and of Web Components I dont really know how we can get foreach templates from the DOM without the browser proactively manipulating them Still I see a lot of people online using WCs with Knockout So what am I missing here avickers you mentioned in that you moved away from Knockout components to Web Components How do you deal with this Or is everyone rolling their own in stead of using rd party WCs Kind regards Karim I am using knockout with bootstrap js My requirement I am creating an HTML form and I have done data binding using knockout After submission of this form I am showing a message to the user in bootstrap modal On closing this modal I need to reset the HTML form SO on clicking on the close button I and doing a click binding and calling a method Below is the snippet of that method Resetting the observable to default value meaddStudentForClassnull meparentskomappingfromJSnew parentInfoModelundefined melocalGuardiankomappingfromJSnew localGuardianundefined melastSchoolEducationkomappingfromJSnew lastSchoolEducationundefined Closing bootstrap Modal modalidmodalhide Cleaning the knockout node to reflect the reset change kocleanNodeaddstudent and binding the view model koapplyBindingsappmainViewModel addstudent If we are not using below two lines of code then the modal work fine and modal got closed on clicking the close button kocleanNodeaddstudent koapplyBindingsappmainViewModel addstudent But I need to use the above two lines of code because it needs to reset my form Please help me with this Thank You I would like to reopen issue regarding the possibility to override the standard behaviour of kotoJS Im binding a complex view model that is composed of many objects in a treelike structure a simplified version below item code description properties attributes attribute attribute I would like to customize the attributes part of kotoJS standard implementation I found this interesting article which explains how to control how an object is converted to JSON The article is based on this assumption JSONstringify will check if each object has a toJSON method and execute it first before serializing the object to its JSON representation Similarly if kotoJS implementation looked for a custom toJS method on each visited object it would be easy to customize the unwrap of a specific part of the view model At the moment I cannot find an easier and less performanceaffecting way than adding a customized toJSON method on attributes view model and executing these two instructions var json kotoJSONobservableItem var js JSONparsejson Thanks The latest version of knockout appears to come with a Typescript definition file when install it with npm This definition file seems to be pretty different from the latest one in typesknockout and it doesnt seem to work with any of the type definitions for plugins like typesknockoutmapping or typesknockoutvalidation Those type definitions rely on the KnockoutStatic interface which doesnt exist in the new definition file Are there any good examples for how to get this to work I think its better to separate the definitions for readonly computed and writable computed export interface ReadonlyComputedT any extends ComputedFunctionsT T export interface WriteableComputedT any extends ReadonlyComputedT T value T this export interface ReadonlyPureComputedT any extends ReadonlyComputedT Compare Regression withbinding reinvokes given function call expression instead of using returned value where it was reported that the with binding evaluates its view model expression multiple times The foreach binding evaluates its view model expression multiple times The template binding evaluates its view model expression multiple times 