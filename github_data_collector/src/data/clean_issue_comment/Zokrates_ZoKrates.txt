Minor code cleanup added CI steps to circleci config and added release steps in scriptsreleasesh Note changed bellman to point to e as there is a breaking change in latest bellman commit Hi team Ive been trying to split my code up into neat modules Modules make code more reusable and all that good stuff In some cases Im effectively outsourcing some equality checks to other modules Therefore it feels sensible to not repeat any equality check in the calling function But then I get an error that Assertion statements should be an equality check Example I havent checked whether this compiles Im just trying to give a minimal example Basic example WITHOUT outsourcing the equality check mainfilezok main field a private field b private field c a b c return this works The same example WITH outsourcing the equality check mainfilezok import commoncheckmultiplicationzok as checkMultiplication main field a private field b private field c checkMultiplicationa b c this line fails return checkmultiplicationzok main field a private field b private field c a b c return this would fail with not yet implemented Assertion statements should be an equality check found checkMultiplicationa b c I could modify this by returning a from the checkmultiplicationzok file but this isnt ideal because the checkmultiplicationzok file contains a valid function What would be ideal is permitting checkMultiplicationa b c as a standalone line because it contains the relevant equality checks Add instructions for MacOS Remove WITHLIBSNARK distinction Hello Im a beginner learning zokrates I want to make a circuit that can verify that you know the secret key that matches the public key The below circuit is implemented using ProofOfOwnership library but it does not work successfully The ethereum secret key and public key for testing secret key public key testzok code import eccproofOfOwnershipzok as proofOfOwnership import eccbabyjubjubParamszok as context def mainfield pk private field sk field prove the public key context context proofOfOwnershippk sk context return testjs code const util requireethereumjsutil const crypto requirecrypto const BN requirebnjs const SCALINGFACTOR new BN function printZokratesCommandparams let cmd zokrates computewitness a paramsforEachp cmd new BNp toString consolelogcmd function getCreateNoteParamspubKey secKey let pubKey new BNpubKey toString let secKey new BNsecKey toString let privateParams pubKeyslice pubKeyslice secKey printZokratesCommandprivateParams getCreateNoteParams ec d dcdac a a be c bd bc a a f f a b aa f eff aceadc b d b a e a bd f pk x abcea f fa e bb a da de e b e d edbb c sk Zokrates compute witness a fails when testing I want to know why the error occurs The public key and secret key is normal I found that ZoKrateszokratesstdlibteststestseccproofOfOwnershipzok example uses eccbabyjubjubParams as context and the tested pk sk is created using However the pyCrypto creates a different public key when using the same secret key How can I solve the problem What is my fault Thanks Hi Looking at the sha code in stdlib it uses a special EMBED import which Im guessing is a compiler intrinsic Im interested in doing sha hmac in zokrates since I want to try and make a zkp that if PK came from a BIP HD seed then given a chaincode so does PK Maybe this isnt even possible It was just a quick idea and I went looking for sha as the first thing The future example should contait structs in it Hi team I was just exploring doing triangular for loops in order to ensure a list contains only unique values What Id like to do is the following triangular nested for loop Notice how the second loop has lower bound i check for duplicates def mainfield values field acc for field i in do for field j in i do acc acc values j values i isNotZeroacc endfor endfor return This understandably fails because i is variable thread main panicked at not yet implemented For loop bounds should be constants found i zokratescoresrcabsyfromastrs However in the above code its clear that the nested loops bounds arent dynamic because i isnt changed within the loop Therefore this ought to be allowable Are there plans to allow such syntax in future Hello I have an invalid opcode when calling the verifyTx method of a verifier contract generated by zokrates My use case is quite complicated so I repeated the operation with a simple program to isolate the problem I define the following zokrates file testzok def mainprivate field secret field input field return secretinput Then I run zokrates compile i testzok zokrates setup zokrates exportverifier In a terminal I run ganachecli I then launch Remix IDE set up the environment to connect to the running ganachecli with the Web Provide import the verifiersol compile it and deploy it I run zokrates computewitness a and zokrates generateproof In remix I call the verifyTx method of the previously deployed verifier with the values from proofjson as inputs I get the following transact to VerifierverifyTx errored VM Exception while processing transaction invalid opcode When I use Remix with the Javascript VM environment instead the error doesnt show up Some versions for reproducibility ZoKrates Ganache CLI v ganachecore Remix compiler commitc d b 