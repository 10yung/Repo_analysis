 Feature Request It just took me about half an hour to find out how to define a custom handler I was trying to get a getpath route to work for that and the only reason it didnt work is because I also had another highpriority catchall NamedFile route Finally I found out through this issue that I could just write catch and where that is documented I had previously looked at all the routing docs I found because thats where I expected this to be documented I think it would be very useful to link to the error catchers docs from the routing overview and maybe also the more detailed routing page to avoid this happening to other people too Or maybe the error catching section could be moved up to immediately after the routing section that would also make it much easier to discover Shows how to handle parameter renaming for the next person that is looking for it Closes The feedback and compile time errors in Rocket are excellent theyve saved me lots of time already I did loose a chunk of time wondering why the url wasnt matching when I was trying to invoke it and it was because the ContentType was different It would be most excellent if rocket in development mode could say the closest matching url was to the console and why it failed to match Its already a pleasure to work with but that would make rocket extremely easy to use Doing the commit directly to the async branch since it seems the most up to date one I upgraded most of the dependencies This also fixes This does not upgrade mongodb for the reasons explained in I didnt upgrade time because it requires a fundamental change on how cookie works and I didnt upgrade rusqlite and its r d crate because diesel does not support it yet I didnt upgrade percentencoding because Rocket depends on a trait that no longer exists in the new version and I didnt have the time to fully understand our use and do a proper upgrade compiletestrs drops the stable feature it still exists but does nothing so I removed it I also ran rustfmt on the files I modified Hello Sergio I have been working on a new SQL query builder ORM for Rust for the last month Toql I have never announced it and would like to do so together with a big update on cratesio I like Rocket and Ive done nice integration with it so that Toql requests are smooth My problem is that I need at least MySQL query column types to do my magic On cratesio rocketcontrib v depends on In your Git repo however the version is updated to Do you have any plans to update the version on cratesio On my machine I have a Git dependency to Rocket So no probs for me but I cant push on cratesio with a Git depedency Have a nice week Roy Ref Toql Heavily outdated version Hello Bug reports must include The version of Rocket youre using Ensure its the latest if possible rustc version rustc nightly de d f The operating system distribution and version where the issue occurs OSX A brief description of the bug that includes The nature of the bug FromData and FromDataSimple ask status Error for Failure As far as I can see the Error is not populated any where When the bug occurs What you expected vs what actually happened It would be good to get Error output to up to default catcher response Outputs How you uncovered the bug Short reproducible tests are especially useful Simplest FromDataSimple Guard do not show Error any where not even debug level logs Ideas if any about what Rocket is doing incorrectly Rocket transforms rocketrequestOutcome to rocketOutcome and just drops the addition E info all together It would be very convenient if the Error info could be populated from data parsers to above levels Now I need to do FromDataSimple functionality in post route fn itself Im using rocket and rocketcontribserve on Ubuntu Linux LTS and rust nightly Im using StaticFiles to serve a directory static containing two files indexhtml and appjs with mountstatic StaticFilesfromstatic The file indexhtml includes the line script srcappjs typetextjavascriptscript If I visit in my browser it loads my index page and the application script as expected GET static texthtml Matched GET static Outcome Success Response succeeded GET staticappjs Matched GET staticpath Outcome Success Response succeeded However if I visit instead it loads my index page but fails to load the application script The Rocket logs show this GET static texthtml Matched GET static Outcome Success Response succeeded GET appjs Error No matching routes for GET appjs Warning Responding with Not Found catcher Response succeeded I expected the page to load correctly whether it was requested with static or static Actually it only loads corectly if static is used if static is used all relative URLs are interpreted relative to the parent directory rather than the static directory I would prefer Rocket to respond to a request for static with a redirect to static In general if the request does not have a trailing slash but the matching file is a directory issue a redirect to the request URI with a trailing slash appended Thanks Summary One thing thats always been discussed after adding database pooling support as a firstclass structure in rocketcontrib has been supporting transactional database tests or some other facility for easy testing that doesnt require writing user code to rollback database changes Weve had user reports where theyre unable to write integration tests with transactions because the data is rolled back before they can make assertions This is going to serve as a tracking issue to allow for the discussion of implementation and the expectations of such a solution Ill update this origin message as the conversation evolves to summarize the discussion Prior Art Prior art that Ive researched has primarily come from the Rails framework ActiveRecord allows for transactional fixture loading and data manipulation However given its integration with testing frameworks like rspec theyre able to make data assertions before the data is rolled back Previous Attempts and outcomes Ive made a previous attempt at implementing this based on jebrosens suggestion that we allow a connectioncustomizing callback be added to a database pool This callback would initiative a transaction before passing the connection to the handler It would then roll the transaction back when the connection was returned to the pool on Drop and the database would be restored to a pristine state The chief pitfall with this approach is that the transaction terminates at the end of the handler not the end of the test and thus does not allow for assertions that require database interaction Having a connectioncustomizing callback may be useful for other reasons though but it doesnt solve this particular problem Heres a link to that attempt Next Steps So I propose that we start a discussion where we can clarify expectations of such a feature and how such a feature could work This hopefully drives out finer grained items that can guide implementation Current Tera version in contrib is nearly year old and there are missing features which are present in Tera documentation Because of this its difficult to know what is available and not As an example Im getting this error Error Filter float not found The filter float is present in standard Tera doc but not in the oldish version Rocket uses Is there a plan to bump Tera version to current one I recently started learning rocket and hit an obstacle with sessions there are cookies and shared state but no builtin session support Unless I somehow missed it Session is used to hold data between requests coming from the same client using a session cookie as an identifier Its a really useful feature especially as a building block for user authentication so I went ahead and built a generic session store with a fairing I want to ask if this is something you might want to add to the contrib crate or I should rather keep it as a separate crate like it is now Im not sure how youd write unit tests for something like this beyond checking that it compiles