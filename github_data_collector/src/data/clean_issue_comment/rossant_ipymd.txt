If we have an ipynb notebook that contains a first Markdown cell First Markdown text Then a second Markdown cell with two paragraphs Second Markdown text with a second paragraph Then converting to py and then back to ipynb fails the second cell is considered commented out code This is a problem because this situation is very likely to happen Also if the first Markdown cell is a header This is a header then the second Markdown cell is considered code through the roundtrip which is a problem Having a header cell and then some Markdown cell is another common situation for notebook PS I tested this with the grstipymd version of ipymd which apparently didnt touch this part of the code The pip version of rossantipymd fails with File anacondaenvspy libpython sitepackagesipymdformatsnotebookpy line in read assert nb nbformat TypeError string indices must be integers not str A Jupyter notebook that contains Unicode characters seems to be failing when converted to Python code File anacondaenvspy libpython sitepackagesipymdutilsutilspy line in writetext fwritecontents UnicodeEncodeError ascii codec cant encode character u xe in position ordinal not in range Encoding the Python file in UTF instead works fwritecontentsencodeutf but then probably this should also add a codingUTF at the beginning of the generated Python file Also the conversion back to a Jupyter notebook might have to be adapted so as to be compatible with this change How does one create a Python code cell in md files The documentation states Python py code cells are delimited by double line breaks Markdown cells Python comments TODO this doesnt work well see and However double line breaks are not working say for this example markdown H printhi I have Ipymd working for jupyter notebooks but its not working for jupyter lab In Jupyter lab everything looks good md files icons changed from markdown symbol to the notebook symbol but when I open them they open in the text editor and not in the notebook editor I dont know much about how jupyter lab is structured so perhaps this isnt something I shouldve expected to work but I thought the notebook parts would be similar Am I doing something wrong If not are there plans to support jupyter lab I created RMarkdown support for ipymd With my extension Rmd files edited in rstudio can be directly opened with jupyter Notably this format two outputfiles Rmd the rmarkdown source code nbhtml where the output is stored Like that input and output are separated which is really handy when working with version control Images are fully supported Images and other content such as tables are fully supported Unlike the other markdown formats Rmarkdown is thus a full replacement for jupyter nbformat The ipymdcell representation was not sufficient As I wanted to cover all information from jupyter nbformat the sparse cell representation used for the other formats was not sufficient I therefore use the jupyter nbformat as internal representation and convert directly between notebook and rmarkdown This required to implement a special case in FormatManager I couldnt think of an elegant solution to address this without rewriting a good deal of core code I added a virtualenv for testingdeveloping make jupyter will run jupyter in a virtual environment with ipymd enabled so that I dont have to mess with my production instance of jupyter I improved the README I restructured the README starting with a concise motivation then an overview of formats and installation instructions Hi Thanks for sharing this package It looks really useful I have trouble using it under anaconda It seems like everything installs correctly however when I open a md file it opens as a simple text file The procedure I followed for adding ipymd to my conda enviroment was source activate myenv pip install ipymd jupyter notebook generateconfig jupyter configdir Result with homeuserjupyter echo cNotebookAppcontentsmanagerclass ipymdIPymdContentsManager homeuserjupyterjupyternotebookconfigpy echo cIPymdContentsManagerformat markdown homeuserjupyternotebookconfigpy and then double checking the above line were added correctly to homeuserjupyternotebookconfigpy Thanks again If ipymd notebook dont store output images in notebook anymore whats the good practise to collect the outputs Thanks Im afraid I cant figure out how to use this I have cNotebookAppcontentsmanagerclass ipymdIPymdContentsManager In my jupyter config But when I open md files I cant compute with them Likewise if I start a new notebook and save it it is still saved in ipynb format not markdown So clearly Im missing either the purpose of this package andor how to use it What I was looking for is a way to have jupyter create open and close md and Rmd files into usable notebooks cc lepture bollwyvl As far as I remember the changes were relatively minor Ill give more information when I find the time to delve into the code again It was something along the lines of having a nonrenderer Markdown parser that allows one to write callback methods that dont render anything Issue raised by bollwyvl The question is how to customize how cells are split during Markdown ipynb conversion There are several ways of doing it heres one By default the current behavior is kept the smallest cells are created ie one for every new line n n basically using the observation that its easier to merge than to split cells Then there is a dedicated class for example CellMerger that is responsible for merging consecutive cells It implements a method tomergecell cell that takes as input two consecutive ipymd cells and returns True or False When converting from Markdown to ipynb this class is called at the end of the conversion It starts from the first cell decides whether it should be merged with the next one does the merge if necessary and move to the next pair of cells until the end probably this should only concern Markdown cells a code cell will never be merged with a Markdown cell Returning always True means that well end up with as few Markdown cells as possible a single big cell if theres no code cell Returning always False means that the current behavior is kept In the middle we can customize how cells should be created out of Markdown text For example decide that two Markdown cells should be merged if none starts with a header The default CellMerger should implement reasonable heuristics between the two extremes Another thing it may be possible to force a split with something like a in Markdown but I dont think it should be mandatory ie not writing any should not result in a single big cell for the whole document 