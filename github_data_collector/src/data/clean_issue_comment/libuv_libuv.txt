Add the ability to create pseudottys and to use them to communicate with child processes PTY support has so far been rejected because of lack of Windows support but Windows gained a CreatePseudoConsole kernel dll API that does what it says Its possible to emulate ptys on older Windows versions but its very involved I doubt we want to go down that road There are some platform differences to work out on the UNIX side see nodes ptyhelperpy for examples Refs See Can not compile it because of the following lines Since there NO closeNOCANCELUNIX function in iOS SDK can we changed the first line to if definedLP definedTARGETOSIPHONE likes if definedLP definedTARGETOSIPHONE extern int closeNOCANCELint return closeNOCANCELfd else extern int closeNOCANCELUNIX int return closeNOCANCELUNIX fd endif ipmreqsource struct are not defined in Android NDK regardless of the API level Fix proposal for not ok pollunidirectional timeout Output from process pollunidirectional no output observed on originibmiifaddr at If you want to report a bug you are in the right place If you need help or have a question go here If you are reporting a libuv test failure please ensure that you are not running the test as root Please include code that demonstrates the bug and keep it short and simple Version x Platform Linux Ubu generic Ubuntu SMP Thu Nov UTC x x x GNULinux When following your build instructions jzer Ubumediajzer Devgitlibuv source androidconfigurearm mediajzer Devdevelopmentandroidndkr c gyp HOSTOSlinux HOSTEXE HOSTARCHx HOSTTAGlinuxx HOSTNUMCPUS BUILDNUMCPUS Toolchain installed to mediajzer Devgitlibuvandroidtoolchainarm Dtargetarcharm DOSandroid f makeandroid I commongypi testtestgyp depth Goutputdirmediajzer Devgitlibuvout generatoroutput mediajzer Devgitlibuvout Dhostarchx Duvlibrarystaticlibrary jzer Ubumediajzer Devgitlibuv make C out make Entering directory mediajzer Devgitlibuvout CCtarget mediajzer DevgitlibuvoutDebugobjtargetlibuvsrcunixudpo srcunixudpc In function uvudpsetsourcemembership srcunixudpc error request for member saddr in something not a structure or union err uvinetptonAFINET interfaceaddr mreqimrinterfacesaddr srcunixudpc error request for member saddr in something not a structure or union mreqimrinterfacesaddr htonlINADDRANY srcunixudpc error request for member saddr in something not a structure or union mreqimrmultiaddrsaddr multicastaddrsinaddrsaddr srcunixudpc error request for member saddr in something not a structure or union mreqimrsourceaddrsaddr sourceaddrsinaddrsaddr make mediajzer DevgitlibuvoutDebugobjtargetlibuvsrcunixudpo Error make Leaving directory mediajzer Devgitlibuvout While thinking about issues we could address in v I was looking at the set of types we have that keep around unused fields or need to malloc some extra fields to hang off of it in order to make fixes and enhancements without breaking ABI sizeof Id like to request feedback on a proposal to make the libuv structs more opaque instead of declaring the whole struct in the public header have libuv only declare the public fields there To allocate a struct you must call the appropriate libuv function For instance instead of c uvttyt tty mallocsizeofuvttyt uvttyinittty UVSTDINFD Youd write c uvttyt uvttynewUVSTDINFD Where uvttyt is just c typedef struct uvhandles void data user pointer uvloopt loop readonly uvhandletype type readonly uvhandlet typedef struct uvhandles uvhandlet typedef struct uvhandles uvstreamt typedef struct uvhandles uvttyt This would have been more constraining a few years ago but now all of these public fields should have accessors so completely opaque objects may be entirely acceptable And similar for uvreqt though a few reqt subtypes may expose some additional fields Transition strategy I think could also be pretty reasonable For v x we can introduce the new API as an optional usage If you use the uvnew API then uvclose will automatically free the memory after returning from the user callback Otherwise everythingd continue working as it does now In v x the old uvinit APIs would be removed making it possible for libuv to then freely alter fields On IBMi PASE we need to skip some file permission tests for root And the file stat of symbolic links are different as well The mutex also needs to protect the access to the stateloop variable since thats owned by the child thread and will be destroyed as soon as it processes our message This previously caused shutdown of libuv loops especially the stress test fseventerrorreporting to segfault occasionally Fixes Observed locally on cb f a ff aa a af b de f about half of the time in repeated runs Cf testruntests fseventerrorreporting runtests FSEventsframework FSEventStreamStart registerwithserver ERROR f dregisterrpc null Segmentation fault FWIW this is a stress test to make sure that this code is written correctly So the message or some message is expected the segfault is the issue Process stopped thread queue comapplemainthread stop reason EXCBADACCESS codeEXCI GPFLT frame x fff cb a CoreFoundationCFRunLoopWakeUp CoreFoundationCFRunLoopWakeUp x fff cb a cmpl x xcrax x fff cb e je x fff cb c x fff cb a movq x b ba rip rax void x fff fb stackchkguard x fff cb a movq rax rax Target runtests stopped lldb bt thread queue comapplemainthread stop reason EXCBADACCESS codeEXCI GPFLT frame x fff cb a CoreFoundationCFRunLoopWakeUp frame x aac e libuvdylibuvfseventsloopdelete inlined uvcfloopsignalloop x ffeefb a e handleunavailable typekUVCFLoopSignalRegular at fseventsc opt frame x aabec libuvdylibuvfseventsloopdeleteloop x ffeefb a e at fseventsc opt frame x a libuvdylibuvloopcloseloop x ffeefb a e at loopc opt frame x a libuvdylibuvloopcloseloop x ffeefb a e at uvcommonc opt frame x ca runtestsruntestfseventerrorreporting at testfseventc opt frame x fff f d libdylddylibstart frame x fff f d libdylddylibstart lldb up libuvdylib was compiled with optimization stepping may behave oddly variables may not be available frame x aac e libuvdylibuvfseventsloopdelete inlined uvcfloopsignalloop x ffeefb a e handleunavailable typekUVCFLoopSignalRegular at fseventsc opt state loopcfstate assertstate NULL pCFRunLoopSourceSignalstatesignalsource pCFRunLoopWakeUpstateloop return This is inside uvloopclose while closing loop of 