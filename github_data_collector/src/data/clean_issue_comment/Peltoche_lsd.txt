 lsd is omitting directory names when trying to target a specific file across multiple directories via wildcard shell mkdir a b c touch abctesttxt Normal ls output ls testtxt atesttxt btesttxt ctesttxt lsd output lsd icon never testtxt testtxt testtxt testtxt Loving lsd and based on what I gathered from browsing through the issues lsd is indeed usable on Windows So is there any chance adding lsd onto the Windows Package Manager Scoop Scoop is my personal favorite package manager on Windows It can install commandline tools in a Unixstyle manner with a simple scoop install xxx based on the tools dedicated App Manifest basically a JSON file describing what to do when installing the tool More information here Scoop So What The current way to install lsd for me is to install Rust then use Cargo to install lsd which is a bit of an overkill It would be nice to use Scoop for the installation This is a first implementation of lsd using a configuration file to configure itself in addition to command line flags This should lay the groundwork for issue Design Generally this tries not to change any behavior of the command line options They always have precedence and the config file values are only used when the corresponding command line option has not been passed If neither command line option nor a configuration option have been specified the Default value of the flag is used which this pull request also implements for each flag Changes The only real change I made is that for command line options that can be specified multiple times I always use the first instead of the last because this is already defined behavior and has existing methods in clap On this I would also like to know what the motivation is for this overall because it is not really explained and can be pretty unexpected for the user when they can specify multiple values but only one is ever used Caveats and TODO Missing XDG support for Windows This is actually a nongoal for the xdg crate according to this issue whitequarkrustxdgissues I could also not find another crate that implements the specification That leaves us with two options either not use XDG config dirs specification bad option in my opinion implement the behavior ourselves writing this as a wrapper as suggested in the issue wouldnt work because of this line Missing date format validation in the configuration file I did not just simply want to duplicate the validation code that was already written for the command line argument validation This touches on something that I would like to do with the config file that I have not been able to so far I would like to have the command line argument definitions for each option in its corresponding module I tried doing that by defining functions for each option which return clap Args But I have not been able to do that because trying to use the flags module in the app module makes the rust compiler complain it cant find the flags module This might be a cyclic dependency I am not sure In any case I never ran into this problem with rust before and couldnt really find a solution for this way to implement it Another way to implement it could be to write functions in the flags modules which take a clap App and just add their options to it That however would make it necessary to have the code to call those in the main module When using the monospaced nerd fonts the whitespace between icons and names is very wide An option to reduce this space would be nice Schermafdruk van nt inside the title CF Expected behavior cconverseconverse ls l usrbincc lrwxrwxrwx root root May usrbincc etcalternativescc Actual behavior cconverseconverse lsd l usrbincc cannot access usrbincc No such file or directory os error Is there a way to have the color of the icon separate from the filefolder name Example source It would be useful to have a Copr repo for easy usage with RHEL CentOS