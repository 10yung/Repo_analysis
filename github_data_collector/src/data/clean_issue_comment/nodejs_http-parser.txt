 After installing httpparser calling in nodejs configure sharedhttpparser prints Package httpparser was not found in the pkgconfig search path Perhaps you should add the directory containing httpparserpc to the PKGCONFIGPATH environment variable No package httpparser found Hi Ive fixed dependencies missing and dependency excessive reported Those issues can cause incorrect results when httpparser is incrementally built For example any changes in httpparserh will not cause urlparser to be rebuilt which is incorrect The changes in httpparserh will cause an unnecessary rebuild of testfast Ive tested it on my computer the fixed version worked as expected Looking forward to your confirmation Thanks Vemake Problem Description I got a conflict with httpparserh which uses the same macro name define XX Code to reproduce this issue define XXx something Proposed solution Never use nondescript unqualified macronames in libs as these identifier belong to the user and end up breaking their code So either qualify the define and rename it HTTPPARSERXX or use the standard Xmacro name convention ENTRY implement support with tests for the following File URLS no host part filetmpsomefiletxt magnet URLS schemequery magnetturnbtihc fe c bba a dc f b aa c a a dn Opaque URLS mailtoadminnodejscom When parsing URLs treat an empty port eg as if it were unspecified RFC says URI producers and normalizers SHOULD omit the port component and its delimiter if port is empty or if its value would be the same as that of the schemes default Emphasis mine This indicates that URIs MAY be produced with an empty port and the delimiter Thus we stop failing if we end host parsing at the port delimiter httpparserparseurl quietly fails to parse very long URLs Instead it will return invalid off and len values There could be a security impact in this issue in situations where the parse result data would be used to make security related decisions for example the parsed path might be different in actual URL vs the parsed one PR is a proposed fix to this issue Alternatively if the existing ABI must be maintained the code should be changed to return an error if off or len overflow become UINT MAX Earlier httpparserparseurl would incorrectly parse very long URLs The resulting off and len parameters would just get truncated Even though very long URLs are typically considered invalid by servers they could still end up being parsed by httpparserparseurl Thus its better handle this situation gracefully This change is unfortunately not backwards ABI compatible due to changes in httpparserurl structure field types hence the major version number bump The search for body parsers took a lot of time For convenience a list of some libraries for parsing various body types in the same ideology has been added Currently the onheaderscomplete callback can return to proceed with the response body to skip the body and to skip the body and stop looking for further messages and this decision on what to do with the body can only be made inside the onheaderscomplete callback This PR adds an ability to alter the parser behaviour later after onheaderscomplete pauses the parser and returns To be honest Im not very fond of the preprocessor usage or the name httpparsercontinueafteronheaderscomplete