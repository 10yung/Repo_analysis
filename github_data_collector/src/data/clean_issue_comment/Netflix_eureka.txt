Hi I have a eurekazuul application running on my server in order to have service discovery and API gateway for my microservices When i make a request to any microservice on the same machine localhost it is working fine but when i try with another instance and from another machine i am getting this error timestamp T status error Internal Server Error message Connect to server ip address server ip address failed Connection refused Connection refused My EurekaZuul Config serverport springapplicationnameservicediscovery eurekaclientregisterWithEurekafalse eurekaclientfetchRegistryfalse eurekainstancepreferIpAddresstrue eurekaserverwaitTimeInMsWhenSyncEmpty eurekainstancenonSecurePort springcloudinetutilspreferredNetworks eurekaserverexpectedClientRenewalIntervalSeconds eurekainstanceleaseExpirationDurationInSeconds eurekainstanceregistryexpectednumberofclientssendingrenews eurekaserverevictionIntervalTimerInMs eurekaserverrenewalPercentThreshold eurekaserverrenewalThresholdUpdateIntervalMs eurekaserverenableSelfPreservationtrue zuulroutesmicroserviceurl ip address of my server machine zuulroutesmicroservicesensitiveHeaders My Microservice Config eurekaclientserviceUrldefaultZone address of my server machine eureka eurekaclientfetchRegistrytrue eurekaclientregistryFetchIntervalSeconds eurekainstancepreferIpAddresstrue eurekaclientregisterWithEurekatrue eurekaclienthealthcheckenabledtrue eurekainstancehealthCheckUrlPathactuatorhealth eurekainstancestatusPageUrlPathactuatorinfo eurekainstanceleaseRenewalIntervalInSeconds eurekainstanceleaseExpirationDurationInSeconds eurekaclienteurekaServiceUrlPollIntervalSeconds eurekaclientinstanceInfoReplicationIntervalSeconds eurekaclientinitialInstanceInfoReplicationIntervalSeconds Please let me know what i am missing should i add more URLs to zuulroutesmicroserviceurl ip address of my server machine so i mention all ip addresses of my machines and how is it possible Were removing archaius from springcloudnetflix but the eureka client still depends on it I know theres archaius version but looking for something pluggable When I look at eureka has been a source of confusion in selfPreservationMode I saw the sorce code with mater branch when we see register or cancel method there will be update expectedNumberOfClientsSendingRenews just like the code java The lease does not exist and hence it is a new registration synchronized lock if thisexpectedNumberOfClientsSendingRenews Since the client wants to register it increase the number of clients sending renews thisexpectedNumberOfClientsSendingRenews thisexpectedNumberOfClientsSendingRenews updateRenewsPerMinThreshold i have read the code with evict method in AbstractInstanceRegistry class but i didnt find where to update the expectedNumberOfClientsSendingRenews when we evict a instance according to a timed task can you tell me where to update the expectedNumberOfClientsSendingRenews when we evict a instance Steps to reproduce Download the targz file from the Releases page Extract the tarball gradlew build Error gradlew build FAILURE Build failed with an exception Where Build file UsersmatthewjDownloadseureka buildgradle line What went wrong An exception occurred applying plugin request id nebulanetflixoss version Failed to apply plugin id nebulanetflixoss Cannot set property defaultVersionStrategy on null object Try Run with stacktrace option to get the stack trace Run with info or debug option to get more log output BUILD FAILED Total time secs The issue is that the Nebula plugin depends on the existence of tags within a Git repo If you clone the repo checkout the v tag and build from there then it succeeds I was trying out eureka endpoints as mentioned here After doing PUT eurekav appsappIDinstanceIDstatusvalueOUTOFSERVICE for instance it is going out of service in service registry but still I see traffic flowing through this instance Any help here is appreciated HiThere is two Eureka Servers named ServerA and ServerB a part of services with Eureka Client named ClientAClientB were setted eurekaclientserviceUrldefaultZone value to ServerA the rest of services with Eureka Client named ClientCClientD were setted eurekaclientserviceUrldefaultZone value to ServerB ServerA and ServerB defaultZone were setted each other I expected ServerA and ServerB could replicate client instancesServerA has all clients the same as ServerB but ServerA only has ClientAClientBServerB only has ClientCClientD Even ServerA and ServerB were started with fetchRegistrytrue setting had all clents ServerA would lost clientC and clientD laterno heate beat Why Eureka Servers do not exchange instances each other Need the Client must set eurekaclientserviceUrldefaultZone value to all eureka serversServerA and ServerB eurekaclient version JDK version springcloudnetflixeurekaclient version RELEASE On eurekaserverside we have servers in zones zone zone server discovery server discovery server discovery server discovery After server crashed it was unreachable NoRouteToHostException the other server had no problem when contacting them per HTTP manually However cacherefresh requests from the eurekaclients in our services produce errors for all server instances The first request that is done by the RetryableEurekaHttpClient tries to contact discovery and fails because of the NoRouteToHostException Afterwards the RetryableEurekaHttpClient tries discovery Unfortunately it fails with comfasterxmljacksoncoreJsonParseException processing aborted at Source GZIPInputStream line column As a last step it tries to contact discovery which results in the same Exception as the request to discovery Afterwars because the retries reache the maximum numberOfRetries it throws TransportExceptionRetry limit reached giving up on completing the request The requests to discovery and discovery result in a JsonParseException because the Thread was interrupted I think that the failed request to discovery leads to the threadinterruption Per remote debugging I was able to see that the noncompleted future was cancelled in which interrupts the thread in line of FutureTask The thread which is interrupted is the same thread that tries to contact discovery and discovery Can you please advice me are we doing something wrong or could this be a bug Full stack traces following in the order of occurence everything in thread DiscoveryClientCacheRefreshExecutor times In this issue eureka client try to re register but throw TransportException so the re register logic not executed in my opinion throw ThranportException show that serverside processing logic errors Therefore I personally think that DiscoveryClient should reregister when receiving TransportException Please review the pull request and make Suggestions I will track this problem thank you Hi all Is there any way to stablish a whitelist or blacklist in order to enable registry only microservices deployed in several hosts I know that we could use AWS zones but currently we have deployed all microservices in our internal intranet Thanks Regards I just cloned the repo in my local machine and was trying to follow the instructions provided at However when i have launched the server using the war and tomcat it shows the replica as unavailable when i run the example service application it throws the following error PM Executing task ExampleEurekaServicemain Inferred project eureka version SNAPSHOT The testJar task is deprecated Please place common test harness code in its own project and publish separately The testJar task is deprecated Please place common test harness code in its own project and publish separately The testJar task is deprecated Please place common test harness code in its own project and publish separately Publication nebula not found in project buildinfo Not using buildInfo properties file for this build Publication named nebula does not exist for project in task artifactoryPublish eurekaclientcompileJava UPTODATE eurekaclientprocessResources UPTODATE eurekaclientclasses UPTODATE eurekaclientwriteManifestProperties UPTODATE eurekaclientjar Note homeabdurIdeaProjectseurekaeurekaexamplessrcmainjavacomnetflixeurekaExampleEurekaGovernatedServicejava uses or overrides a deprecated API Note Recompile with Xlintdeprecation for details eurekaexamplescompileJava eurekaexamplesprocessResources UPTODATE eurekaexamplesclasses main WARN comnetflixconfigsourcesURLConfigurationSource No URLs will be polled as dynamic configuration sources main INFO comnetflixconfigsourcesURLConfigurationSource To enable URLs as dynamic configuration sources define System property archaiusconfigurationSourceadditionalUrls or make configproperties available on classpath main INFO comnetflixconfigDynamicPropertyFactory DynamicPropertyFactory is initialized with configuration sources comnetflixconfigConcurrentCompositeConfiguration be d main WARN comnetflixdiscoveryinternalutilArchaius Utils Cannot find the properties specified eurekaclient This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism main INFO comnetflixappinfoprovidersEurekaConfigBasedInstanceInfoProvider Setting initial instance status as STARTING main WARN comnetflixdiscoveryinternalutilArchaius Utils Cannot find the properties specified eurekaclient This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism main INFO comnetflixdiscoveryDiscoveryClient Initializing Eureka in region useast main INFO comnetflixdiscoveryproviderDiscoveryJerseyProvider Using JSON encoding codec LegacyJacksonJson main INFO comnetflixdiscoveryproviderDiscoveryJerseyProvider Using JSON decoding codec LegacyJacksonJson main INFO comnetflixdiscoveryproviderDiscoveryJerseyProvider Using XML encoding codec XStreamXml main INFO comnetflixdiscoveryproviderDiscoveryJerseyProvider Using XML decoding codec XStreamXml main INFO comnetflixdiscoverysharedresolverawsConfigClusterResolver Resolving eureka endpoints via configuration main ERROR comnetflixdiscoverysharedresolverawsConfigClusterResolver Cannot resolve to any endpoints from provided configuration defaultZone main ERROR comnetflixdiscoverysharedtransportEurekaHttpClients Initial resolution of Eureka server endpoints failed Check ConfigClusterResolver logs for more info main INFO comnetflixdiscoveryDiscoveryClient Disable delta property false main INFO comnetflixdiscoveryDiscoveryClient Single vip registry refresh property null main INFO comnetflixdiscoveryDiscoveryClient Force full registry fetch false main INFO comnetflixdiscoveryDiscoveryClient Application is null false main INFO comnetflixdiscoveryDiscoveryClient Registered Applications size is zero true main INFO comnetflixdiscoveryDiscoveryClient Application version is true main INFO comnetflixdiscoveryDiscoveryClient Getting all instance registry info from the eureka server main ERROR comnetflixdiscoveryDiscoveryClient DiscoveryClientUNKNOWNrtx ti was unable to refresh its cache status There is no known eureka server cluster server list is empty comnetflixdiscoverysharedtransportTransportException There is no known eureka server cluster server list is empty at comnetflixdiscoverysharedtransportdecoratorRetryableEurekaHttpClientexecuteRetryableEurekaHttpClientjava at comnetflixdiscoverysharedtransportdecoratorEurekaHttpClientDecoratorgetApplicationsEurekaHttpClientDecoratorjava at comnetflixdiscoverysharedtransportdecoratorEurekaHttpClientDecorator executeEurekaHttpClientDecoratorjava at comnetflixdiscoverysharedtransportdecoratorSessionedEurekaHttpClientexecuteSessionedEurekaHttpClientjava at comnetflixdiscoverysharedtransportdecoratorEurekaHttpClientDecoratorgetApplicationsEurekaHttpClientDecoratorjava at comnetflixdiscoveryDiscoveryClientgetAndStoreFullRegistryDiscoveryClientjava at comnetflixdiscoveryDiscoveryClientfetchRegistryDiscoveryClientjava at comnetflixdiscoveryDiscoveryClientinitDiscoveryClientjava at comnetflixdiscoveryDiscoveryClientinitDiscoveryClientjava at comnetflixdiscoveryDiscoveryClientinitDiscoveryClientjava at comnetflixdiscoveryDiscoveryClientinitDiscoveryClientjava at comnetflixdiscoveryDiscoveryClientinitDiscoveryClientjava at comnetflixeurekaExampleEurekaServiceinitializeEurekaClientExampleEurekaServicejava at comnetflixeurekaExampleEurekaServicemainExampleEurekaServicejava main WARN comnetflixdiscoveryDiscoveryClient Using default backup registry implementation which does not do anything main INFO comnetflixdiscoveryDiscoveryClient Starting heartbeat executor renew interval is main INFO comnetflixdiscoveryInstanceInfoReplicator InstanceInfoReplicator onDemand update allowed rate per min is main INFO comnetflixdiscoveryDiscoveryClient Discovery Client initialized at timestamp with initial instances count eurekaexamplesExampleEurekaServicemain Registering service to eureka with STARTING status Simulating service initialization by sleeping for seconds Done sleeping now changing status to UP main INFO comnetflixdiscoveryDiscoveryClient Saw local status change event StatusChangeEvent timestamp currentUP previousSTARTING Waiting verifying service registration with eureka DiscoveryClientInstanceInfoReplicator INFO comnetflixdiscoveryDiscoveryClient DiscoveryClientUNKNOWNrtx ti registering service DiscoveryClientInstanceInfoReplicator WARN comnetflixdiscoveryDiscoveryClient DiscoveryClientUNKNOWNrtx ti registration failed There is no known eureka server cluster server list is empty comnetflixdiscoverysharedtransportTransportException There is no known eureka server cluster server list is empty at comnetflixdiscoverysharedtransportdecoratorRetryableEurekaHttpClientexecuteRetryableEurekaHttpClientjava at comnetflixdiscoverysharedtransportdecoratorEurekaHttpClientDecoratorregisterEurekaHttpClientDecoratorjava at comnetflixdiscoverysharedtransportdecoratorEurekaHttpClientDecorator executeEurekaHttpClientDecoratorjava at comnetflixdiscoverysharedtransportdecoratorSessionedEurekaHttpClientexecuteSessionedEurekaHttpClientjava at comnetflixdiscoverysharedtransportdecoratorEurekaHttpClientDecoratorregisterEurekaHttpClientDecoratorjava at comnetflixdiscoveryDiscoveryClientregisterDiscoveryClientjava at comnetflixdiscoveryInstanceInfoReplicatorrunInstanceInfoReplicatorjava at comnetflixdiscoveryInstanceInfoReplicator runInstanceInfoReplicatorjava at javautilconcurrentExecutorsRunnableAdaptercallExecutorsjava at javautilconcurrentFutureTaskrunFutureTaskjava at javautilconcurrentScheduledThreadPoolExecutorScheduledFutureTaskaccess ScheduledThreadPoolExecutorjava at javautilconcurrentScheduledThreadPoolExecutorScheduledFutureTaskrunScheduledThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava 