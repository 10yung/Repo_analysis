I want to use MultiRoot structure to edit and compile Multiple Project Just like having multiple projects in a solution in Visual Studio However I met some problems Whether I chose gCProject or g codeworkspace both of them can generate an executable After compiling I used Launch to run the executable Both LaunchCProject and Launchcodeworkspace failed I checked my launchjson tasksjson and codeworkspace but found nothing Do I miss something Or VSCode cant support Launch in MultiRoot Workspace operate This is my codeworkspace codeworksapce This is my launchjson in CProjectvscode launch This is my tasksjson in CProjectvscode tasks This is my whole files VSCCPPMINGWMRzip Describe the issue OS and Version MacOS VS Code Version CC Extension Version Other extensions you installed and if the issue persists after disabling them Locally Remote SSH Remote SSH Editing Configuration Files Remote just this plugin A clear and concise description of what the bug is When I reload or start the window I immediately get an error in the output stating this Error PM Connection to server got closed Server will not be restarted terminate called after throwing an instance of stdsystemerror what Resource temporarily unavailable Unsure of what error is or could be To reproduce Open a remote directory ensure the plugin is installed and see the error Using vscode with cpptools under Win and remote ssh to a Ubuntu based Jetson Nano machine Getting error messages command CCppConfigurationEditJSON not found command CCppConfigurationEditUI not found Tried with same issue Reinstalling andor restarting did not help OS and Version Win VS Code Version CC Extension Version Remote SSH on Host Cmake Cmake Tools Pythonon Remote in addition there is a porblem Unable to load schema from cpptoolsschemaccpppropertiesschemajson Request vscodecontent failed with message cannot open cpptoolsschemaccpppropertiesschemajson Detail resource is not available Type LanguageService Input information below Prior to filing an issue please review Existing issues at Our documentation at FAQs at Describe the bug OS and Version centos VS Code Version latest CC Extension Version all versionabout a year I always use latest version Other extensions you installed and if the issue persists after disabling them only vscodecpptools installed A clear and concise description of what the bug is whats the fxxk the autocompletion I use vscode years never can use autocompletion for cpp To Reproduce Steps to reproduce the behavior The most actionable issue reports include a code sample including configuration files such as ccpppropertiesjson Go to Click on Scroll down to See error Expected behavior A clear and concise description of what you expected to happen Screenshots If applicable add screenshots to help explain your problem Additional context Call Stacks For bugs like crashes deadlocks infinite loops etc that we are not able to repro and for which the call stack may be useful please attach a debugger andor create a dmp and provide the call stacks Windows binaries have symbols available in VS Code by setting your symbolSearchPath to Add any other context about the problem here including log messages in your Output window CCpploggingLevel Debug in settingsjson Add new Typescript E E tests for testing IntelliSense features Test uses a private workspace project and is run from private Azure pipeline The test code that runs the tests from VS Code development host enviroment is on this Typescript repository Add test set for Quick info Add test set for Find all references Note tests are not yet run on the Typescript checkin tests Describe the feature youd like When writing nodegypbased CC extensions to nodejs nodegyp adds the currently active node include directory to the include path the bindinggyp file can specify additional paths These are not configured in system environment variables and when using nvm the location of the node include directory is dynamic which is the real issue When using nodeaddonapi the node p requirenodeaddonapiinclude is used in bindinggyp to add nodeaddonapis include directory to the include path While nodegyp automatically adds these paths for compilation cpptools does not know about them It would be useful to have an option to automatically include the node include directory as well as those defined in bindinggyp so that vscode can find those files Currently it squiggles them and isnt able to find declarations and definitions Overall it would be a nice addition to have an option of something like CCppaddNodeGypIncludePaths or something similar The nvm setting seems most important because hardcoding a possibly nonexistent nodeaddonapi location is not a big deal So maybe its more limited and something like CCppaddNvmNodeIncludePath Thanks for your consideration As a workaround I created a simple extension that implements a command to return the node include directory let disposable vscodecommandsregisterCommandextensionnodeIncludeNvm function just return a best guess as to the include directory for this version of node presume NVMBIN var points to bin if it exists if not presume usrlocalincludenode no its not sophisticated let path if processenvNVMBIN path processenvNVMBINreplace bin include else path usrlocalincludenode return Promiseresolvepath It works within the echo nodeIncludeNvm path task tasks label echo nodeIncludeNvm path type shell command echo commandextensionnodeIncludeNvm problemMatcher label echo CCppdefaultincludePath type shell command echo configCCppdefaultincludePath problemMatcher but I am unable to get it to stick in CCppdefaultincludePath My project settingsjson CCppdefaultincludePath workspaceFolder commandextensionnodeIncludeNvm workspaceFoldernodemodulesnodeaddonapi and executing echo CCppdefaultincludePath task output is Executing task echo workspaceFoldercommandextensionnodeIncludeNvmworkspaceFoldernodemodulesnodeaddonapi homebrucegithubcombmacnaughtonnvmnodeincludehomebrucegithubcombmacnaughtonnvmnodeincludenodemodulesnodeaddonapi If Im just doing something wrong trying to get commandextensionnodeIncludeNvm to work let me know In any case my workaround seems to work even though the task doesnt handle the command substitution cpptools is finding the include files Originally reported at Its a known issue since autocomplete was released so this may be duplicate of another issue class foo int func foo f bug shouldnt popup autocomplete int i doesnt popup autocomplete but it should be manually triggerable bug Both bugs dont repro with VS Type LanguageService Input information below I dont know if that qualifies as a bug or if this is the intended autocompletion behaviour Describe the bug OS and Version Archlinux VS Code Version CC Extension Version Other extensions you installed and if the issue persists after disabling them A clear and concise description of what the bug is To Reproduce Start implementing your class constructor While initialising your class fieldsvariables see how the autocomplete suggest more than a thousand entries making the one your are looking for impossible to find without looking up the class definition Most of those entries are defines in the system headers and standard libraries Expected behavior Autocomplete should suggest entries that are relevant to class initialisation ie the variables to initialise The same goes when inside the body a function Seeing everything available in the global scope seems irrelevant to the constructor implementation or any kind of function But Im in no way a C expert maybe some people actually need those thousands of defines to display like that in a small window Screenshots class constructor example Additional context This occurs in other contexts like when picking the name of a variable the autocomplete will propose defines and labels from the global scope in a context were it should no suggest anything at all Im eager to hear what are your takes on this issues Thanks to anyone who is willing to take part on this matter From CVS Code sync meeting Delay real activation of C extension Want to avoid notification that contents of extension have changed and the user needs to reload Possible Solutions Potentially have one extension that is language activated and one for tools that is always activated that downloads platform specific bits and fetches latest because extension should be ready to go C extension currently has their C Configuration UI in a web view can use the VS Code Custom Editor API Proposal 