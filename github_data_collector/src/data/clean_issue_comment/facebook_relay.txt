the first one returns json data from http API server the second one returns a placeholder which will be used to get json data using useFragment both queries have fragment defined why their behavior are different const createAutoBrandFormSchema useLazyLoadQueryCreateAutoBrandFormSchemaQuery graphql query CreateAutoBrandFormSchemaQueryorgid Id createAutoBrandFormSchemaorgid orgid FormformSchema orgid fetchPolicy storeornetwork consolelogcreateAutoBrandFormSchema const gridMetadata useLazyLoadQuerybrandGridMetadataQuery graphqlquery brandGridMetadataQuerygridName String gridMetadatagridName gridName Gridmetadata gridName brandgrid fetchPolicy storeornetwork consoleloggridMetadata I have a url like adminproductcreateorgid the orgid is very special which is globally available for resource creation I dont like to add it to CreateProductInput because if we follow this way we need to add it to every resource creation input type Can we pass arbitrary query string to a Relay query without variables declared first inside that query or any workaround input CreateProductInput name String description String images File price Int onHand Int tracked Boolean autoSeries String channels String clientMutationId String I noticed a strange behavior caused by this if in practice the fragment nodes are rewritten every time it is compiled even if they have not been modified Is this the expected behavior or is it a bug Relay Config package doesnt exist in every project which results in yargsconfigundefined call Unfortunately yargs adds a new config option for these cases However this option is not specified by Relay Compiler so it confuses people I am not sure if its a bug or feature though because technically its fine as well Id argue that its better to hide it and expose it manually when needed because now its sometimes available and sometimes not This will prevent calling Relay Compiler with unsupported arguments relaycompiler unknown See This is in an example from the official documentation commitLocalUpdatemodernEnvironment store const dataID clientstore const record storecreatedataID Store modernEnvironmentretain dataID variables node selections that causes the following error Uncaught TypeError Cannot read property identifier of undefined at RelayModernStoreretain RelayModernStorejs at RelayModernEnvironmentretain RelayModernEnvironmentjs I did a bare bones setup based on relayexamples todo app Nothing fancy Not sure if related Fixes various typos on the landing page Note Some corrections like adding a missing s at the and of a word or capitalizing the S in TypeScript seem to not be highlighted properly in the GitHub diff Weird have many article and each article has many comment I build this structure follow by this example When i call loadMore method inside TimelinePaginationContainer it works perfectly but when i call loadMore method inside CommentsPaginationContainer it return old data in network return correctly but inside component not working RootComponent javascript import React Component from react import TimelineComponent from componentsTimelineComponent import CreatePost from componentsCreatePostCreatePost import environment from Environment import QueryRenderer graphql from reactrelay const TimelineQuery graphql query TimelineQuerycount Int cursor String TimelineComponenttimeline class Timeline extends Component render return CreatePost QueryRenderer environmentenvironment variables count queryTimelineQuery render error props if error return diverrormessagediv else if props return TimelineComponent timelineprops return divTimelineLoadingdiv export default Timeline TimelinePaginationContainer javascript import React Component from react import graphql createPaginationContainer from reactrelay import AddCommentMutation from sharedmutationsAddCommentMutation import Feed from Feed import timelinescss class TimelineComponent extends Component state CommentText null AddComment postId AddCommentMutationthisstateCommentText postId loadMore if thispropsrelayhasMore thispropsrelayisLoading return thispropsrelayloadMore error consolelogerror render const timeline thispropstimeline return timelineedgesmapitem index Feed feeditemnode keyindex loadMthisloadMore export default createPaginationContainer TimelineComponent timeline graphql fragment TimelineComponenttimeline on RootQuery timelinefirst count after cursor connectionkey Poststimeline edges cursor node Feedfeed direction forward query graphql query TimelineComponentQuerycount Int cursor String TimelineComponenttimeline getConnectionFromProps props propstimelinetimeline getFragmentVariables prevVars totalCount prevVars count totalCount getVariables props count cursor fragmentVariables count cursor Refetch Container javascript import React Component from react import TimelineImage from UiTimelineImage import graphql createRefetchContainer from reactrelay import moment from moment import Comments from Comments class Feed extends Component render const feed thisprops return div div classNametimelinebox div classNametimelinecreator img src div classNametimeliecreatorbox p onClick thispropsloadMfeedauthorusernamep spanmomentfeedcreatedAtformatDD MMMM YYYYspan div div div classNametimelinedescription feedpostType A pfeedtextp h feedtexth div div classNametimelinemedia TimelineImage src ImageWidthfeedpictureWidth ImageHeightfeedpictureHeight div div classNametimelineactions div onClickthisloadMore className feedcheckIfLiked timelineactionitem liked timelineactionitem like spanspan pfeedlikesCountp div div classNametimelineactionitem comment spanspan pfeedcommentsCountp div div div classNametimelinecomments Comments feedfeed postIdfeedid div div classNametimelineaddcomments button onClick thisAddCommentfeedidPostbutton textarea placeholderAdd comment onChangee thissetState CommentText etargetvalue textarea div div div export default createRefetchContainer Feed feed graphql fragment Feedfeed on TimelineNode argumentDefinitions count type Int defaultValue cursor type String defaultValue null id postType path picture likesCount commentsCount text pictureWidth pictureHeight checkIfLiked createdAt Commentsfeed author fullName username graphql query FeedQueryid String count Int cursor String feedid id Feedfeed argumentscount count cursor cursor CommentsPaginationContainer javascript import React Component from react import graphql createPaginationContainer from reactrelay import timelinescss class Comments extends Component loadMore if thispropsrelayhasMore thispropsrelayisLoading return thispropsrelayloadMore error consolelogerror render const comments thispropsfeed return commentsedgesmapcomment key p keykey onClickthisloadMore bcommentnodeuserusernameb commentnodetext p commentspageInfohasNextPage spanLoad more commentsspan null export default createPaginationContainer Comments feed graphql fragment Commentsfeed on TimelineNode argumentDefinitions count type Int defaultValue cursor type String defaultValue null id commentsfirst count after cursor connectionkey Commentcomments edges node user fullName username created text direction forward getConnectionFromProps props propsfeedcomments getFragmentVariables prevVars totalCount prevVars count totalCount getVariables props count cursor fragmentVariables count cursor id propsfeedid query graphql query CommentsQueryid String count Int cursor String feedid id Commentsfeed argumentscount count cursor cursor relay refetch return old data I want to when i call relayrefetch inside Comments component update store in new sense and also update Comments components but it returns the value that was first loaded The reason why Im doing this is because want to paginate posts and also want to paginate comments which belong posts In network everything is ok pagination container javascript import React Component from react import TimelineImage from UiTimelineImage import graphql createPaginationContainer from reactrelay import moment from moment import AddCommentMutation from sharedmutationsAddCommentMutation import Comments from Comments import timelinescss class TimelineComponent extends Component state CommentText null AddComment postId AddCommentMutationthisstateCommentText postId loadMore alerthalu if thispropsrelayhasMore thispropsrelayisLoading consolelog thispropsrelayhasMore thispropsrelayhasMore thispropsrelayisLoading thisprops alerthere return thispropsrelayloadMore Fetch the next feed items error consolelogerror render const timeline thispropstimeline consolelogthisprops propsss return timelineedgesmapfeed key div classNametimelinebox keykey div classNametimelinecreator img src div classNametimeliecreatorbox p onClickthisloadMorefeednodeauthorusernamep spanmomenttimelinecreatedformatDD MMMM YYYYspan div div div classNametimelinedescription feednodepostType A pfeednodetextp h feednodetexth div div classNametimelinemedia TimelineImage src ImageWidthfeednodepictureWidth ImageHeightfeednodepictureHeight div div classNametimelineactions div className timelinecheckIfLiked timelineactionitem liked timelineactionitem like spanspan pfeednodelikesCountp div div classNametimelineactionitem comment spanspan pfeednodecommentsCountp div div div classNametimelinecomments Comments commentsfeednode keykey postIdfeednodeid div div classNametimelineaddcomments button onClick thisAddCommentfeednodeid Post button textarea placeholderAdd comment onChangee thissetState CommentText etargetvalue textarea div div export default createPaginationContainer TimelineComponent timeline graphql fragment TimelineComponenttimeline on RootQuery timelinefirst pageSize after after connectionkey Poststimeline edges node id postType path picture likesCount commentsCount text pictureWidth pictureHeight checkIfLiked createdAt Commentscomments author fullName username direction forward query graphql query TimelineComponentQuerypageSize Int after String TimelineComponenttimeline getConnectionFromProps props propstimelinetimeline getFragmentVariables previousVars pageSize previousVars pageSize getVariables props paginationInfo pageSize after paginationInfocursor Comments component javascript import React Component from react import createRefetchContainer from reactrelay import graphql from relayruntime import timelinescss class Comments extends Component loadMore const refetchVariables fragmentVariables after thispropscommentscommentspageInfoendCursor const renderVariables first thispropsrelayrefetch refetchVariables renderVariables null consolelogRefetch done force true render const comments thispropscomments consolelogcomments comment props return commentsedgesmapcomment key p keykey onClickthisloadMore bcommentnodeuserusernameb commentnodetext p commentspageInfohasNextPage spanLoad more commentsspan null export default createRefetchContainer Comments comments graphql fragment Commentscomments on TimelineNode commentsfirst connectionkey Commentcomments edges node user fullName username created text graphql query CommentsQueryafter String commentsfirst after after connectionkey ComCommentcomments pageInfo hasNextPage edges cursor node user fullName username id created text There are two different functions named fetchQuery one in relay hooks one in relayruntime It isnt well documented that they are actually different It can be confusing Are there plans to rename one of them