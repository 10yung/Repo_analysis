is there an option to do BPX apicall at edb For example using BPX malloc to breakpoint on every call to malloc func I had an idea to make our analysis much more robust using Unicorn Engine a lightweight CPU emulator platform Heres the idea Given that the Instruction Pointer is at a given location We can take a snapshot of the CPU regs and memory ideally doing some sort of copy on write concept to avoid too much copying And feed it to Unicorn Engine Then we can emulate the CPU up until the next unpredictable jumpcall or the next N instructions whichever comes first The most obvious feature this would offer would be the ability to predict the parameters to calls further down the execution pipeline I was thinking we basically have uncommon dependencies Capstone gdtoadesktop libdoubleconversion These are all relatively speaking small It may be reasonable to have a libs directory which contains copies of these projects which we would use if they are not installed systemwide or perhaps always This lets us have a simpler dependency process potentially lock in versions we are sensitive to and make these dependencies unconditional which is just simpler Thoughts If you hide Registers theres no way to get them back I even tried to hide them all to see what happened and now Im with a blank window where the registers should be Ive noticed that on my system some binaries have the first page be a readonly region which precedes the actual code segment For example faa faa rp lib libc so faa faa d rxp lib libc so faa d faa e rp b lib libc so faa e faa e p c lib libc so faa e faa eb rp c lib libc so faa eb faa ed rwp c lib libc so There is some code in edb that has assumed that the first region of a module would be the executable region I have fixed this in a few important spots but a complete review needs to be done When using linker ld to build executable Symbol Viewer cannot load symbols and does not produce symbol mapfile in cachecodef comedbsymbols when i use gdb i could use p mainarern bins to print heap info I wonder if edb have the same features A while ago I checked in the file RegisterRef with the goal of improving the Register API to make it more robust and involve less copying Essentially it is kinda analogous to what stringview is to strings It is a nonowning view of part of the PlatformState object The idea is that we can unify all of the getxxxregister functions to always return a RegisterRef regardless of the register type since it will simply point to the right bytes in the State object and know how many bytes are part of that register The example I have checked in needs some work as it is clunky and requires a state object I think a pointer can be even better and avoid this requirement I think we dont even really have to worry about alignment issues since the underlying structures that wed be pointing to would require that the data members be aligned Hello I like this project but I dont always have time to find the packaged to compile it It would be very nice and comfortable to just be able to download and run the binary I have perhaps quite unusual feature request I would like edb to have automatic tests I did some testing a while ago I tested edb under valgrind under address sanitizer and with debug mode of libstdc As the result I found a few bugs I have fixes for some of them and Im going send patches when they are ready My problem is that I believe that fixes without tests are fragile Nothing prevent the same code to break in the future again during some refactoring Thats why I would like edb to get some automatic tests I can imagine two types of automatic tests in edb Tests that uses edb as a library They dont do any UI They just initialize debugger and call some functions of it Like start this program for debugging set break point to this address run and wait until break point is hit and so on The programs to run can be some minimal a few kb in size programs designed to check the specific features of the debugger Which test framework to use for these tests doesnt matter much in my opinion and can be decided later Tests that test edb as whole Qt has ability to simulate clicks and user actions in the application I have never used them but at first glance they looks pretty straightforward These tests are primary designed to test UI In theory they can be used to test debugger logic as well but if we have many of them I expect them to run much slower than tests I believe we can do either or or both At least for my use case either option is OK I think I can spend some time implementing these tests But before I start I would like to ask your opinion What type of tests do you think should be implemented or or both or perhaps you have some other ideas Tests require edb to be split into a library part and a UI part Looking at edb source code it is not apparent to me which translation unit should go to which part Do you think making this split is feasible If not perhaps just tests should be implemented At the moment Im currently leaning toward implementing option 