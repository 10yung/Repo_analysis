Currently in ReactComponent we have override methods for componentWillUpdateshouldComponentUpdate componentDidUpdate componentWillReceiveProps just to get scala propsstate from wrapper JSPropsJSState scala class ReactComponent extends JSNamesComponentWillUpdate def componentWillUpdatenextProps P nextState S Unit JSNamecomponentWillUpdate override def jsComponentWillUpdatenextProps Props nextState State Unit componentWillUpdatenextPropssprops nextStatesstate JSNamesShouldComponentUpdate def shouldComponentUpdatenextProps P nextState S Boolean true JSNameshouldComponentUpdate override def jsShouldComponentUpdatenextProps Props nextState State Boolean shouldComponentUpdatenextPropssprops nextStatesstate JSNamesComponentDidUpdate def componentDidUpdateprevProps P prevState S Unit JSNamecomponentDidUpdate override def jsComponentDidUpdateprevProps Props prevState State Unit componentDidUpdateprevPropssprops prevStatesstate JSNamesComponentWillReceiveProps def componentWillReceivePropsnextProps P Unit JSNamecomponentWillReceiveProps override def jsComponentWillReceivePropsnextProps Props Unit componentWillReceivePropsnextPropssprops When ever a component updated via setState they will be called even though implementation is just unit we still paying method call and user component should annotate method with JSNamesShouldComponentUpdate etc how about removing this overrides Current User Component with overrides of sComponetX scala class HeaderComponent extends ReactComponent JSNamesShouldComponentUpdate override def shouldComponentUpdatenextProps P nextState S Boolean nexProps ne props nextState ne state New after removing overrides from ReactComponent scala class HeaderComponent extends ReactComponent override def shouldComponentUpdatenextJSProps JSProps P nextJSState JSState S Boolean nextJSPropssprops ne props nextJSStatesstate ne state this way we can eliminate extra method calls and no JSName annotations required but user should call spropssstate when they need scala propsstate Current Approach scala case class WebStylename String def v String Double new WebStylePairname v class WebStylePairval name String val value Any trait WebStyleAttrs final vallazy val opacity new WebStyleopacity object flexDirection extends WebStyleflexDirection inline final def column this column inline final def columnReverse this columnreverse inline final def row this row inline final def rowReverse this rowreverse more trait WebStyleSheet extends WebStyleAttrs if duplicate attrs found then last one wins inline def styleEmaps jsDictionary Any v WebStylePair mapsfoldjsDictionaryempty Any d d d d toJSDictionary stylev toJSDictionary inline def stylev WebStylePair jsDictionary Any val p jsDictionaryempty Any vforeacht pupdatetname tvalue p New Proposal scala ScalaJSDefined trait WebStyles extends jsObject var opracity jsUndefOr String Int jsundefined var flexDirection jsUndefOr String jsundefined trait WebStyleSheet extends WebStyleAttrs if duplicate attrs found then last one wins inline def styleEmaps jsDictionary Any mapsfoldjsDictionaryempty Any d d d d toJSDictionary toJSDictionary Pros no runtime overhead easy to define and maintain Cons we loose little convenience in defining enum attributes for example in previous system flexDirectioncolumn now flexDirection column currently its k LOCinline noinline generated each tag defined like scala inline def caption tabIndex U Int undefined is U String undefined classID U String undefined contentEditable U String undefined role U String undefined style U jsAny undefined hidden U Boolean undefined ref U domhtmlElement undefined key U String Int undefined dir U String undefined id U String undefined many more exclude extraAttributes U jsObject undefinedchildren ReactNode ReactElement val props FunctionMacro ifextraAttributesisDefined extraAttributes null addJsObjectspropsextraAttributesget if developmentMode ReactcreateElementcaptionpropschildren else inlineReactElementcaptionpropschildren In above code we used macro to create jsObject from method params which expands to bunch of updateDynamic calls and we have extrraAttributes for unknown props at compile time which will add extra execution time while combing objects i think with new ScalaJSDefined trait changes came in scalajs we can make it better New Proposal lets have a global trait with all dom attributes scala ScalaJSDefined trait DOMProps extends jsObject var tabIndex U Int undefined var is U String undefined var classID U String undefined var contentEditable U String undefined var role U String undefined var style U jsAny undefined def captionpropsDOMPropschildrenReactNode ReactcreateElementcaptionpropschildren call site captionnew DOMProps id hello tabIndex children Pros we can have type safe DOM tags under LOC instead of K LOC before no need of macros no extra run time cost Cons we need some extra typing new DOM Props at call site but i think its not a big deal Hi Till now sri is under single ownerits definitely not scalable option in long run lets distribute owner shipmaintenance publishing from now onwards all future work will be done under as were moving to more stable place lets make architecture changes and breaking changes now Separate Project for each module Core react core types and componentelement construction helpersfactories Universal Components and APIs that will work across multiple platform webiosandroidmacoswindows Relay reactrelay Web ReactDOM and html tagssvg tags etc Mobile reactnative Other Platforms by having separate project we can iterate rapidly for example if dispalt want some change in relay and nafg want some change in web they can make their changes in isolation and publish it without worrying about other projects Is there any way to debug the Scalajs code in Chrome when running in the reactnative in the iOS Simulator or anyhow else Im only able to debug using the generated indexiosjs I see that the project is depending heavily on npm packages and dependencies as well as sbt It would be easier to use if only sbt was required to build and use the library Do you think that is possible All dependencies from npmbower is possible to findimport to webjarsorg and get from sbt ScalaJSReact is already pretty complete and I think itd be great if there werent yet another way to write Scalajs React Is it possible to use ScalaJSReact instead of rolling your own facade 