 Description As pointed out in RubyGems currently frequently sets the SOURCEDATEEPOCH environment variable even if it doesnt need to This can break certain things With this PR Gemsourcedateepoch no longer sets environment variables at all Gemwithsourcedateepoch sets SOURCEDATEEPOCH yields then reverts it to its previous value It returns the result of the block passed to it Tasks x Describe the problem feature x Write tests x Write code to solve the problem code review from coworkers friends I will abide by the code of conduct Im having a problem or would like to suggest a feature My current problem is that GemSpecificationfindbynamebundler raises an exception if the program running it is currently in a deleted directory This issue is related to x Other Here are my current environment details gem env version I will abide by the code of conduct Reproducing this issue Heres a repro case ruby require tmpdir Dirmktmpdir do dir Dirchdirdir puts pwd is now Dirpwd end our current dir is now gone bundlergem GemSpecificationfindbynamebundler and this breaks putsUsing Bundler bundlergemversiontos details summaryoutput and backtracesummary pwd is now privatevarfoldersntf r kbx n b sj rr tsw gnTd akv a Traceback most recent call last from mainrb in main from Usersasfrbenvversions librubysiteruby rubygemsspecificationrb in findbyname from Usersasfrbenvversions librubysiteruby rubygemsdependencyrb in tospec from Usersasfrbenvversions librubysiteruby rubygemsdependencyrb in tospecs from Usersasfrbenvversions librubysiteruby rubygemsdependencyrb in matchingspecs from Usersasfrbenvversions librubysiteruby rubygemsbundlerversionfinderrb in filter from Usersasfrbenvversions librubysiteruby rubygemsbundlerversionfinderrb in bundlerversion from Usersasfrbenvversions librubysiteruby rubygemsbundlerversionfinderrb in bundlerversionwithreason from Usersasfrbenvversions librubysiteruby rubygemsbundlerversionfinderrb in lockfileversion from Usersasfrbenvversions librubysiteruby rubygemsbundlerversionfinderrb in lockfilecontents Usersasfrbenvversions librubysiteruby rubygemsbundlerversionfinderrb in pwd No such file or directory getcwd ErrnoENOENT details This is a mildly contrived example I tried to make it selfcontained but sometimes the services we run have their working directory go away due to environmental conditions it would be good if they were resilient to this scenario I would expect the specification finder to either work as expected it does find a bundler gem if you execute the code under bundle exec but raises ErrnoENOENT if no bundler is present in the currentlyloaded gems I would expect this snippet to correctly find the bundler gem thats installed via rubygems or if thats not installed on the global rubygems env to return a nil specification Im having a problem and would like to a feature My current problem is I would like to publish prerelease versions with dashes eg something like preupdatelogo This appears to not be possible as of rubygems version log irbmain GemVersionnew preupdatelogo GemVersion prepreupdateprelogo The s are all replaced by pre which is fairly unhelpful except possibly the first replacement That happens here Dashes in prerelease versions are allowed by the SemVer spec A prerelease version MAY be denoted by appending a hyphen and a series of dot separated identifiers immediately following the patch version Identifiers MUST comprise only ASCII alphanumerics and hyphen AZaz Note that Im not asking about FULL SEMVER but only about dashes in prerelease labels This issue is related to Network problems Installing a library x Publishing a library The command line gem x Other Other issues Support for full Semantic versioning Match rubygems notquiteSemver versioning for prerelease versioning Here are my current environment details gem env version RubyGems Environment RUBYGEMS VERSION RUBY VERSION patchlevel x linux etc na I will abide by the code of conduct Currently deprecate only supports four arguments allowing for deprecation year and month Attempting to supply a day fails class MyClass extend GemDeprecate def thedyingmethod end deprecate thedyingmethod thenewmethod def thenewmethod end end ArgumentError wrong number of arguments given expected This supports prior implementation day is optional but can support more specific deprecation dates NOTE MyClassthedyingmethod is deprecated use thenewmethod instead It will be removed on or after Description Tasks Describe the problem feature Write tests Write code to solve the problem Get code review from coworkers friends I will abide by the code of conduct Im having a problem My current problem is in the title Steps to reproduce sh sh binsh apk add buildbase neovim gem install bundler v mkdir app cd app touch Gemfile bundle cat Gemfilelock cat rb SCRIPT require bundlersetup p BundlerVERSION SCRIPT ruby rb docker run rm v PWD sh sh ruby alpine sh Successfully installed bundler gem installed The Gemfile specifies no dependencies Resolving dependencies Bundle complete Gemfile dependencies gem now installed Use bundle info gemname to see where a bundled gem is installed GEM specs PLATFORMS ruby DEPENDENCIES BUNDLED WITH So as you can see it says BUNDLEDWITH but gets required That doesnt happen with ruby sh sh binsh apk add buildbase neovim gem install bundler mkdir app cd app touch Gemfile bundle cat Gemfilelock cat rb SCRIPT require bundlersetup p BundlerVERSION SCRIPT ruby rb docker run rm v PWD sh sh ruby alpine Successfully installed bundler gem installed Resolving dependencies Bundle complete Gemfile dependencies gem now installed Use bundle info gemname to see where a bundled gem is installed GEM specs PLATFORMS ruby DEPENDENCIES BUNDLED WITH The reason why this is happening is because rubygems doesnt find the default bundler spec by path as such the default bundler is always required That in its turn happens because when the default spec bundler gets registered none of its files make its way into pathtodefaultspecmap Because the spec is considered to be in the new format but the following line filters out all the bundler files Lets take a look at the bundler spec from ruby usrlocallibrubygems specificationsdefaultbundler gemspec rb srequirepaths libfreeze sfiles bundlerrbfreeze libexecbundlefreeze libexecbundlerfreeze That is there are files in libexec dir that is the reason why rubygems decides it uses the new format But prefixpattern is lib it doesnt match any file cant be removed and so every file is skipped ruby spec doesnt have libexec dir Im not sure if thats an issue with rubygems The bundler spec might very well be wrong like in this case This issue is related to Network problems Installing a library Publishing a library The command line gem x Other Here are my current environment details gem env version I will abide by the code of conduct Im having a problem with the behavior of the new Gemsourcedateepoch function I dont think it should set the environment variable SOURCEDATEEPOCH if isnt already set This affects the behavior of other applications Existing programs may allow this environment variable to be unset By loading rubygems via Bundler at least into the runtime it has the side effect that the environment variable is always set But theres no way to know if it was set by the users environment or by RubyGems Either RubyGems shouldnt set this environment variable itself or it should honor a secondary environment variable to prevent it from being set or allow it to be set either way Here are my current environment details gem env version I will abide by the code of conduct Related issue Description Currently RakeTestTask adds rdevkit to rubyopts for all Windows platforms using Gemwinplatform devkit is only part of publicly facing mingw builds and does not exist in other Windows builds Tasks x Describe the problem feature Write tests Write code to solve the problem Get code review from coworkers friends I will abide by the code of conduct Description headius wrote at One bit of process Im not sure about this java gem can only be built with JRuby and likewise the standard gem cant be build on JRuby because the gemspec uses RUBYENGINE This could be modified to allow building both versions on any impl since theyre just packaging files ie theres no compile step required for either JRuby or MRI Tasks x Describe the problem feature x Write tests x Write code to solve the problem Get code review from coworkers friends I will abide by the code of conduct Description Use an action that includes more rubies so the we dont need to use rvm for ruby and jruby Tasks x Describe the problem feature Write tests x Write code to solve the problem Get code review from coworkers friends I will abide by the code of conduct Description I do like the idea of bundler being able to lock its own version but this implementation is not the right way to do it in my opinion I aim to reimplement this inside bundler in the near future but it needs to be done in a more user friendly way that properly informs the user about whats going on and never raises when not necessary But for now I think we should remove this code from rubygems because this is causing more problems than benefits and its being counterproductive Closes Closes Closes rubygemsbundler Closes rubygemsbundler Closes rubygemsbundler Closes rubygemsbundler Closes rubygemsbundler Closes rubygemsbundler Tasks x Describe the problem feature Write tests x Write code to solve the problem Get code review from coworkers friends I will abide by the code of conduct 