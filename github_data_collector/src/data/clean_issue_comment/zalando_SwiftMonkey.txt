Thanks for the library I have an issue with the latest release Assertion Failure MonkeyXCTestswift Failed to get matching snapshots Timed out while evaluating UI query Here is my setup swift func testMonkey let monkey Monkeyframe appframe monkeyaddDefaultUIAutomationActions monkeyaddXCTestTapAlertActioninterval application app monkeymonkeyAround SwiftMonkeyExampleUITestsRunner CATransaction synchronize called within transaction SwiftMonkeyExampleUITestsRunner Running tests SwiftMonkeyExampleUITestsRunner refreshPreferences HangTracerEnabled SwiftMonkeyExampleUITestsRunner refreshPreferences HangTracerDuration SwiftMonkeyExampleUITestsRunner refreshPreferences ActivationLoggingEnabled ActivationLoggingTaskedOffByDA SwiftMonkeyExampleUITestsRunner SwiftMonkeyExampleUITests SwiftMonkeyExampleUITestsRunner dlopenpreflightvarcontainersBundleApplicationBD FF F ACFB B CD SwiftMonkeyExampleUITestsRunnerappPlugInsSwiftMonkeyExampleUITestsxctestSwiftMonkeyExampleUITests Library not loaded rpathSwiftMonkeyframeworkSwiftMonkey Referenced from varcontainersBundleApplicationBD FF F ACFB B CD SwiftMonkeyExampleUITestsRunnerappPlugInsSwiftMonkeyExampleUITestsxctestSwiftMonkeyExampleUITests Reason image not found building err Showing All Messages Undefined symbol swiftFORCELOADswiftCompatibilityDynamicReplacements Showing All Messages Undefined symbol swiftFORCELOADswiftCompatibility I tried to run the example project in Xcode but it seems like monkeyaddDefaultXCTestPrivateActions is not working with this Xcode Version while using monkeyaddDefaultUIAutomationActions works fine Not working means you can not see any paws and nothing happens while running the UITest Maybe you have an idea why its not working I noticed Monkey seems to always tap on the very first element of my screen Is there a way to get it to scroll down randomly so that it wont always tap on the same element of my screen func monkeyAround iterationsToMonkey Int bringAppToForeground Rotate back to Portrait to avoid Plus size iPhone locking issues XCUIDevicesharedorientation UIDeviceOrientationportrait Sleep while the animation completes sleep Now we setup the Monkey to tap objects randomly and if an alert displays tap a random button on any alert that popsup appdescendantsmatching anyelementboundBy frame let monkey Monkeyframe appframe monkeyaddDefaultXCTestPrivateActions monkeyaddXCTestTapAlertActioninterval application app monkeyaddUIAutomationShakeActionweight monkeyaddUIAutomationLockActionweight monkeyaddUIAutomationClickVolumeDownActionweight monkeyaddUIAutomationTapActionweight Doublearc randomuniformUInt UInt UInt monkeyaddUIAutomationDragActionweight monkeyaddUIAutomationFlickActionweight Begin taking a screenshot each second until timer is stopped below with stopTimer If persistScreenshotsOnSuccess true then well save the values of the screenshots even if the test passes If persistScreenshotsOnSuccess false then well only save the values of the screenshots if the tests fail Otherwise well ditch the screenshots startTimerToTakeScreenshots Dont set this much lower than as sometimes it cant escape whats already onscreen monkeymonkeyArounditerations iterationsToMonkey Stop the timer then ensure the app is foregrounded again just in case its gone off to Safari or the home screen stopTimer bringAppToForeground Cheers Lucas When Xcode packages the App NameUITestsRunnerapp it includes a different XCTestframework from the one it packaged with Xcode This new version does not contain the XCEventGenerator class that SwiftMonkey expects and causes a crash when the library user uses addDefaultXCTestPrivateActions The crash occurs when Monkey tries to forceunwrap XCEventGenerator sharedGenerator which is nil because the class doesnt exist Are there any plans to update this library to use components present in the Xcode XCTest framework Additionally I was unable to send events when using addDefaultUIAutomationActions UIAutomationframework Is this also known to be a broken approach on iOS Thanks To ensure code format consistency we could use SwiftFormat We can integrate it as a build phase that triggers a warning or an error if swiftformat command was not found If we choose the error approach we should clearly describe in README that in order to contribute to the project you should first make sure you have the swiftformat installed In addition we could use SwiftLint to ensure a consistent code style The integration options are the same as for the SwiftFormat The SwiftMonkeyExample could have some functions that crash just to demonstrate that they can be found The SwiftMonkeyExample project should have more screens and more controls to emulate a real app more closely Currently SPM does not support iOS but once it does the preliminary support included currently should be fixed xcodeprojs could be generated directly from SPM too