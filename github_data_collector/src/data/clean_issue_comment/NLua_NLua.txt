In earlier versions if the object at fullPath was nil GetFunction returned null Now if the object is not a LuaFunction a LuaFunction is created so GetFunction will never return null Is this really the intended behavior Tests submitted for the issue Both of the tests cause crashes on Linux but run fine on Windows Ive run them on netcore While testing some Lua scripts using NLua Ive encountered a strange behavior possibly related to some bug with runtime stack Here is a minimal example of the bug reproduction LuaTestzip How the code works The Lua script is being loaded into a new Lua state and executed The pcall functions call TestClass method exceptionMethod which throws an exception The exception should be caught by the pcall and store the exception in err and errMsg variables When executing the code on Windows everything works as expected I can see the output of WriteLine False NLuaExceptionsLuaScriptException A NET exception occured in usercode False NLuaExceptionsLuaScriptException A NET exception occured in usercode However the same code executed on Ubuntu ends with a Segmentation fault core dumped and no output When running the app through the debugger on Ubuntu i can see Exception thrown SystemException in SampleAppdll Exception thrown SystemException in Unknown Module The program SampleAppdll has exited with code x I have tested the code on NET Core versions and producing the same results on both Windows works as expected and Ubuntu results in segmentation fault I expect that throwing the exception maybe breaks the stack but I dont know how to test this further or fix it Could it be a bug in the runtime implementation for linux This should fix the error I was having though its hard to tell now that Im getting a different error for a different file it cant find a NET property that actually exists on a NET object so I cant really test it Hello Current behaviour executing a code sample under the trycatch block kills the process instead of throwing an exception Expected result exception is thrown I prepared a project to demonstrate whats happening LuaTestzip Could you help me resolving this problem I assume if something wrong with a script we should get a message over the exception process must live I upgraded to the latest NLua NuGet package and now my Lua scripts no longer load SystemInvalidCastException HResult x MessageUnable to cast object of type KeraLuaLuaFunction to type SystemReflectionMemberInfo SourceNLua StackTrace at NLuaMetaFunctionsTrySetMemberLua luaState ProxyType targetType Object target BindingFlags bindingType String detailMessage at NLuaMetaFunctionsSetFieldOrPropertyInternalLua luaState at KeraLuaNativeMethodsluapcallkIntPtr luaState Int nargs Int nresults Int errorfunc IntPtr ctx IntPtr k at NLuaLuaDoFileString fileName at BlugenStageBGctorBG bg Blugen game Lua state Animation animations Vector localCoord SFF sff SND snd String filePath in R dev Blugen Stage BGcsline at BlugenBlugenLoadBGString filePath in R dev Blugen Blugencsline at BlugenBlugenLoadContent in R dev Blugen Blugencsline at MicrosoftXnaFrameworkGameInitialize at BlugenBlugenInitialize in R dev Blugen Blugencsline at MicrosoftXnaFrameworkGameDoInitialize at MicrosoftXnaFrameworkGameRunGameRunBehavior runBehavior at BlugenProgramMainString args in R dev Blugen Programcsline Whats in the Lua file function StageProcess end function StageDisplay end StageStates StageDisplay Relevant line of code that causes the exception Initialize Lua thisstate state stateNewTableStage state Stagedata this stateDoStringsetmetatableStage mt Load the states for int j j bgFilesStatesLength j string fp PathCombinefilePath bgFilesStates j Now load it var f stateDoFilefp BGcsline Metatable definition stateNewTablemt stateDoStringmtindex functionselfkey local k selfdata key local metatable getmetatablek if key data or not k then return rawgetself key elseif typek function and metatable nil or metatablecall nil then return k else return function if self then return kselfdata select else return k end end end end stateDoStringmtnewindex functionself key value local c rawgetself key value if not c then local dataHasKey selfdata key key if not dataHasKey then rawsetself key value else selfdata key value end else rawsetself key value end end stateDoStringcollectgarbagesetpause This worked before with Lua and I believe NLua now uses Lua but I dont see why this would break Trying to access a member that doesnt exist in a CLR object should result in obtaining nil Instead it always results in obtaining a function that throws Trying to invoke invalid method Ive tried to figure out what was going on and found the following PushInvalidMethodCall introduced in is always called for nonexisting members probably because it cannot be known what type is expected field property value or function Wouldnt it make more sense to return nil when trying to access a field property method that doesnt exist and resort to Lua throwing attempt to call a nil value when its being used as a function Hi Im trying to create coroutines for my methods so that all my scripts can make use of yield However it doesnt seem to be possible to call coroutinecreate from C Whats the correct way of working with coroutines using System using SystemDiagnostics using SystemLinq using NLua namespace CLuaTest class Program static void Mainstring args Lua state new Lua stateDoString function fibn if n then return n end return fibn fibn end var scriptFunc state fib as LuaFunction var coroutine state coroutine as LuaTable var create coroutine create as LuaFunction var status coroutine status as LuaFunction var co createCallscriptFunc if coLength co null ConsoleWriteLinewat da heck ConsoleReadKey return ConsoleWriteLineok all good ConsoleReadKey This is an awesome project but as Im integrating it into my app the lack of documentation is becoming noticeable Documenting the few public classes NLua offers would definitely help Lua support