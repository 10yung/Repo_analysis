I am using grequests on my Django project sending requests synchronously and concurrently the number is When I visit other pages I get the following error greenleterror cannot switch to a different thread This is the environment I use Windows Pycharm Python This is my code python def asynchttppeerlist headers Connection close ContentType applicationxwwwformurlencoded cachecontrol nocache PostmanToken mytoken timestamp createtimestamp urllist for peer in peerlist befor xxAccessIdvpncnadmin peers timestamps peer timestamp sign getsignbefor url peer timestamp timestamp sign sign urllistappendurl task grequestsgeturl headersheaders timeout for url in urllist response grequestsmaptask exceptionhandlerexceptionhandler size return response def exceptionhandlerrequest exception failedpeerlist sendurl requesturl peer sendurlsplit split failedpeerlistappendpeer return failedpeerlist I had a usecase where I needed to be able to identify which requestresponse was which I felt this method was a nice and simple way of achieving this Hi Encountered an error when using boto python client for S The new API of S supports the method uploadfileuploadfileobj which I guess internally uses gevent Importing both grequests and boto causes uploads to fail sporadically with the following exception LoopExit This operation would block forever This happens also when theres no use of grequests functionality only importing the library maybe monkeypatching collision Your help is appreciated I am trying to use grequests to connect to a server and parse data grequests works fine with Python but when I switch to Python some weird problems start to show They might get resolved by the order that I import the packages ie importing grequests as the last one Also I have used the following piece of code to resolve some parallelizing issues as import geventmonkey geventmonkeypatchselectaggressiveTrue Apparently there are some problems in using gevent in python Hi guys Ive try to use grequests but the sessions wasnt close so my HA proxy was laggy Ive solved the problem by closing the session in a finally The tests pass in my env Maybe there is other solutions to this problem Regards Adrien python binenv python import logging import requests import grequests URL loggingbasicConfig logginggetLoggersetLevelloggingDEBUG def sessionGRequestsMap nrofrequests urls session requestsSession sessionmount requestsadaptersHTTPAdapter poolmaxsize for nr in range nrofrequests urlsappend URL rs grequestsgetu session session for u in urls for r in grequestsmaprs pass def sessionGRequestsIMap nrofrequests urls session requestsSession sessionmount requestsadaptersHTTPAdapter poolmaxsize for nr in range nrofrequests urlsappend URL rs grequestsgetu session session for u in urls for r in grequestsimaprs pass sessionGRequestsMap nrofrequests print sessionGRequestsIMap nrofrequests first function creates https connection in parallel second function only two I would expect the first function also to only create two connections Please tell me if Im wrong request may not have attr exception Ive tested for many times if request doesnt have exception attr it will not call exceptionhandler and at this time response is none so you dont know where to handle this situation So although request doesnt have exception attr you can still call exception handler so you can handle this situation by judgeing requests attrs I am getting response for all of my urls after I make a call to the Cisco ACI fabrics at the same time Sample code for each in range lenurls responseappendgrequestsgeturls each cookiescookiesArray each eachresp grequestsmapresponse printeachresp eachresp for r in eachresp respArrayappendrjson The eachresp returns for each of the fabric url Works fine with requests module when sending single url But for faster results I want to use grequests import requests import grequests requestsget Traceback most recent call last File stdin line in module File usrlibpython sitepackagesrequestsapipy line in get return requestget url paramsparams kwargs File usrlibpython sitepackagesrequestsapipy line in request return sessionrequestmethodmethod urlurl kwargs File usrlibpython sitepackagesrequestssessionspy line in request resp selfsendprep sendkwargs File usrlibpython sitepackagesrequestssessionspy line in send r adaptersendrequest kwargs File usrlibpython sitepackagesrequestsadapterspy line in send timeouttimeout File usrlibpython sitepackagesrequestspackagesurllib connectionpoolpy line in urlopen chunkedchunked File usrlibpython sitepackagesrequestspackagesurllib connectionpoolpy line in makerequest selfvalidateconnconn File usrlibpython sitepackagesrequestspackagesurllib connectionpoolpy line in validateconn connconnect File usrlibpython sitepackagesrequestspackagesurllib connectionpy line in connect certreqsresolvecertreqsselfcertreqs File usrlibpython sitepackagesrequestspackagesurllib utilsslpy line in createurllib context contextoptions options File usrlibpython sslpy line in options superSSLContext SSLContextoptionssetself value File usrlibpython sslpy line in options superSSLContext SSLContextoptionssetself value File usrlibpython sslpy line in options superSSLContext SSLContextoptionssetself value Previous line repeated more times RecursionError maximum recursion depth exceeded If the order of imports is reversed the problem no longer occurs With the following code snippet import grequests from multiprocessing import Manager Managerlist I get the following traceback Traceback most recent call last File minimalpy line in module Managerlist File usrlib python multiprocessingmanagerspy line in temp token exp selfcreatetypeid args kwds File usrlib python multiprocessingmanagerspy line in create conn selfClientselfaddress authkeyselfauthkey File usrlib python multiprocessingconnectionpy line in Client answerchallengec authkey File usrlib python multiprocessingconnectionpy line in answerchallenge message connectionrecvbytes reject large message IOError Errno Resource temporarily unavailable Id guess some conflicting patching I dumped grequests and it works Also lolcuriousgeorge awesome Thanks for the lib Using it here and there 