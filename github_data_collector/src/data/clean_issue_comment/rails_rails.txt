Related This is a reattempt to fix keyword arguments warnings in Active Job Now Ruby master has Hashruby keywordshash and that will be backported to Ive emulated that for and older versions Calling removeconnection on the handler is deprecated in favor of removeconnectionpool This change was made to support changing the return value from a hash to a DatabaseConfig object removeconnection will be removed in NOTE removeconnection on ActiveRecordBase will also now return a DatabaseConfig object We didnt use a deprecation here since its not documented that this method used to return a Hash Coauthoredby John Crepezzi johncrepezzigmailcom cc rafaelfranca matthewd jhawthorn tenderlove were not totally sure its ok to change the return value of the removeconnection on AR Base but it wasnt documented so we opted to change that one and deprecate the other one so we can pass objects around everywhere The problem with returning a configuration hash is it results in Rails creating a new database configuration object if that returned hash was passed to establishconnection Thoughts on changing the return value of this public method Rails has introduced a regression whereby if a given models aftercreate itself creates a number of associated subobjects only the first of those subobjects aftercommit hooks will be called To clariify I dont mean the first of many aftercommit hooks each subobject has but rather all of the aftercommit hooks for the first subobject and none of the aftercommit hooks for the second and subsequent subobjects Further complicating things is that this seems to be strongly related to whether or not the created subobjects are defined using singletable inheritance STI Edge case much Steps to reproduce This script should do the trick Note the comment WOOHOO and tweak the boolean condition to toggle back and forth between Rails which works as expected and Rails which doesnt ruby require bundlerinline gemfiletrue do source gitsourcegithub repo if false WOOHOO Twiddle this for fun and profit Work liks a charm gem activerecord gem sqlite else Yeah not so much gem activerecord gem sqlite end end require activerecord require minitestautorun require logger This connection will do for databaseindependent bug reports ActiveRecordBaseestablishconnectionadapter sqlite database memory ActiveRecordBaselogger LoggernewSTDOUT Define the schema ActiveRecordSchemadefine do createtable properties force cascade do t tstring name limit null false ttext value tstring type tbigint objectid tindex name name indexpropertiesonname end createtable things force cascade do t tinteger count end end Number of properties each Thing should create for itself NUMTHINGPROPS Properties in this universe use STI So we have our generic Property parent class which isnt meant to be instantiated really And then for each specific model that wants a properties list we define a child class FooProperty class Property ActiveRecordBase cmpilato is a minitest amateur and couldnt quickly think of a better system for tracking the number of executed aftercommits aftercommit incrementparentcount def incrementparentcount selfloggerdebug selftypename selfname aftercommit called Thingfindselfobjectidincrementcountself end end class ThingProperty Property end Property support plumbing for models By including this Concern models automagically get decorated with the stuff needed to be able to refer to and act on a properties list which contains objects carrying an STI type value derived from the models class name module PropertiesCommon extend ActiveSupportConcern def selfincludedbase baseclasseval do Find the property class that matches this ones name classname basenamesingularizeProperty begin klass classnameconstantize raise unless klassisaClass rescue NameError raise Class classname doesnt seem to exist end Add the hasmany association to the base class hasmany properties classname classname dependent destroy foreignkey objectid Now add the reverse belongsto association to the inherited properties model class klassclasseval do baseclassnameu basenameunderscore class self attraccessor baseclassnameu end belongsto baseclassnameutosym foreignkey objectid end end end end This is our generic model We include PropertiesCommon so it gets the property list extension support class Thing ActiveRecordBase include PropertiesCommon After this is created well add a number of properties to it aftercreate addprops def addprops NUMTHINGPROPStimes do n selfpropertiescreatename propn value valuen end end Increment a counter like pretty much all example code should at some point right def incrementcountprop selfcount selfcount selfsave end end class BugTest MiniTestTest def teststuff thing Thingcreatecount thingreload assert thingcount NUMTHINGPROPS end end Expected behavior Id expect that for each model committed that models aftercommit is run regardless of stuff such as STI and transaction nested and lunar phases Actual behavior In Rails the actual and expected behaviors are the same But in Rails I find that in a situation where N objects are created in the way I describe the aftercommit of only the first of those N is executed Note that any aftersave hooks dont seem to suffer this same fate in my debugging experience though this is not demonstrated by my reproduction script System configuration Rails version Ruby version p Steps to reproduce Create an initializer with the following line ActionControllerParametersactiononunpermittedparameters raise Create a form passing an unpermitted parameter to a controller which doesnt permit that field Example app to reproduce the issue Relevant documentation page Expected behavior It should raise an exception Actual behavior It logs the unpermitted parameter System configuration Rails version Ruby version During the upgrade from to weve noticed the performance degradation in one of our jobs Steps to reproduce details summaryscript to reproducesummary ruby require bundlerinline gemfiletrue do source gitsourcegithub repo Activate the gem you are reporting the issue against gem activerecord gem sqlite end require activerecord require logger This connection will do for databaseindependent bug reports ActiveRecordBaseestablishconnectionadapter sqlite database memory ActiveRecordBaselogger LoggernewSTDOUT ActiveRecordSchemadefine do createtable posts force true do t end createtable comments force true do t tinteger postid end createtable likes force true do t tinteger commentid end end class Post ActiveRecordBase hasmany comments end class Comment ActiveRecordBase belongsto post hasmany likes end class Like ActiveRecordBase belongsto post end times Postcreate times i Commentcreatepostid i times i Likecreatecommentid i post Postincludescomments likeslast result Benchmarkmeasure do times postcommentseach c clikesfirstid end puts result result Benchmarkmeasure do times postcommentseach c clikestoafirstid end puts result Results first toafirst details Given models Product Variant and OptionValue Product hasmany Variants and Variant has many OptionValues product Productincludesvariants optionvaluesfindbycatalognumber G Benchmarkbenchmark do times productvariantseach v voptionvaluesfirstname end you can also use this repo to reproduce the issue Actual behavior Rails Rails Expected behavior Performance should be similar System configuration Rails version Ruby version Details Several methods including first were removed in this commit and implementation has been changed and uses methods from ActiveRecordRelation Degradation is caused by findnth however findnthwithlimitindex limit works fast as Rails findnth findnthwithlimit here is the call sequence findnth offsetindex offsetvalue scope Here we come to the method that consumes a lot of time because it merges two scopes and even builds scopes from scratch Worth to mention that issue still exists in Rails and toafirst works as fast as Rails first toafirst Steps to reproduce Given class Author ActiveRecordBase hasmany books inverseof author hasmany publishers through books end class Book ActiveRecordBase belongsto author belongsto publisher end class Publisher ActiveRecordBase hasmany books inverseof publisher end author Authornew authorbooksbuildpublisher Publishernew authorpublisherstoa authorsave authorpublisherssize should be Expected behavior After adding records to a hasmany relationship loading a hasmany through relationship and saving the parent record the associated hasmany through relationship returns the added records Actual behavior After adding records to a hasmany relationship loading a hasmany through relationship and saving the parent record the associated hasmany through relationship does not return the added records System configuration Rails version through master Ruby version skipkeeps option in rails generator is used for skipping creating keep files in the project But it also skips on creating assetsimages modelsconcerns and controllersconcerns folders When we create a new rails app with this option as in the issue it gives error because configmanifestjs file reference to images folder which doesnt exist Code of configmanifestjs file linktree images linkdirectory stylesheets css Steps to reproduce Setup STI with classes and use scoping from a descendant with the block calling the parent class directly frozenstringliteral true require bundlerinline gemfiletrue do source gitsourcegithub repo Activate the gem you are reporting the issue against gem activerecord gem sqlite end require activerecord require minitestautorun require logger This connection will do for databaseindependent bug reports ActiveRecordBaseestablishconnectionadapter sqlite database memory ActiveRecordBaselogger LoggernewSTDOUT ActiveRecordSchemadefine do createtable shops force true do t tstring type tstring name end end class Shop ActiveRecordBase scope deliverable all end class Market Shop end class BugTest MinitestTest def testscopingsti shop Shopcreatename Test assertequal Shopdeliverablesize assertequal Shopwherename Testscoping Shopdeliverablesize assertequal Shopwherename Other testscoping Shopdeliverablesize assertequal Marketdeliverablesize assertequal Shopwheretype Marketscoping Shopdeliverablesize assertequal Marketallscoping Shopdeliverablesize end end As you can see I know I can do Shopwheretype Marketscoping Shopallsize but I do find it a lot more cryptic than what Im trying to do Ive managed to have a passing test using the following monkey patch but I have not idea of what it might breaks class ActiveRecordBase class self private def relation relation ActiveRecordRelationcreateselfbaseclass if finderneedstypecondition ignoredefaultscope relationwheretypecondition relationcreatewithinheritancecolumntos stiname else relation end end end end Expected behaviour I assume that the scoped block will be executed within the subclass constraint even if we query the base class directly Actual behaviour The subclass scope is ignored and the resulting records contain all types of Shop instead of only Market ones System configuration Rails version but Ive reproduced it with Ruby version p Summary This pull request allows the resolver in the DatabaseSelector middleware ActiveRecordMiddlewareDatabaseSelector to have access to the response computed in the middleware and use it to update the context if necessary Currently in the default resolver ActiveRecordMiddlewareDatabaseSelectorResolver and default context ActiveRecordMiddlewareDatabaseSelectorResolverSession this is not necessary because the context is stored in the session which can be modified via the request and gets automatically set in the response This is not the case for other cookies Our use case Wed like to set a cookie that can be accessed outside Rails when the primary DB is used mirroring session lastwrite that we cant read We could have done this with another middleware but thought about supporting this directly since this is a case mentioned in the guides and defining our own resolver and context to use a cookie for example The current implementation allows the resolver to decide whether to read or write based on other cookies from the request but not to persist that in the response This PR reflects the solution we ended up with in our particular case but Im happy to change it completely if you think itd be more useful or itd make more sense to support this differently Steps to reproduce Open cmd and create a new Rails app rails new testapp Change directory to the app cd testapp Create a new test file at test sampletestrb require testhelper class SampleTest ActiveSupportTestCase test this is the first one do assert true end test this is the second one will fail do assert false end test this is the third one do assertnot false end test this is the fourth one will fail do assertnot true end end Go back to cmd and run the test at a specific line number rails test test sampletestrb Expected behavior According to the Rails Guide when you run the rails test command on a file specifying the line number only the test at that line number should run Actual behavior When you run the rails test command on a file specifying the line number all the tests in the file are run In the example presented the following output was generated Run options seed Running F Failure SampleTesttestthisisthesecondonewillfail CUsersmyusernamerailstestapptestsampletestrb Expected false to be truthy rails test testsampletestrb F Failure SampleTesttestthisisthefourthonewillfail CUsersmyusernamerailstestapptestsampletestrb Expected true to be nil or false rails test testsampletestrb Finished in s runss assertionss runs assertions failures errors skips You can see that it did not run only the test at line It went on to run all the tests If you change the line number to it does the same thing and includes preceding tests as well as the ones afterward System configuration Operating System Windows Enterprise Version Command Line cmdexe Ruby Version ruby p revision x mingw Rails Version Rails 