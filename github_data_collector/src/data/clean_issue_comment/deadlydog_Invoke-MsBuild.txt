If I have my build script in the same folder as the solution and call InvokeMSBuild with BuildLogDirectoryPath PathDirectory an error occurs here line if BuildLogDirectoryPathEqualsPathDirectory SystemStringComparison InvariantCultureIgnoreCase BuildLogDirectoryPath SystemIOPath GetDirectoryNamePath As Path do not contain a directory If the current culture is deDE for example the conversion results in wrong values For example Found version string will be converted to which could not be found Adding SystemThreadingThread CurrentThreadCurrentCulture enUS before conversion calls or for the whole script solves the problem When I use this it can never seem to create the build log If I add the parameter to bypass dev tools it seems to build and generate a log but no output is shown and it seems to hang even though the build finished Windows PowerShell VS Enterprise C source cbsnorthstar FeatureCheckSearchServerTime InvokeMSBuild NorthStarOrderEntryPOSsln WARNING Cannot find the build log file at C Users geoffh AppData Local Temp NorthStarOrderEntryPOSslnmsbuildlog so unable to determine if build succeeded or not Name Value Message Cannot find the build log file at C Users geoffh AppData Local Temp NorthStarOrder MsBuildProcess BuildLogFilePath C Users geoffh AppData Local Temp NorthStarOrderEntryPOSslnmsbuildlog BuildErrorsLogFilePath C Users geoffh AppData Local Temp NorthStarOrderEntryPOSslnmsbuliderrorslog BuildSucceeded ItemToBuildFilePath NorthStarOrderEntryPOSsln CommandUsedToBuild cmdexe k C Program Files x Microsoft Visual Studio Enterprise Common BuildDuration With MSbuild version Running Visual Studio The solution I am building is predominantly VBNET code MsBuild only reports Warningss and Errorss however InvokeMsBuild finishes with a BuildSucceededFalse Ive isolated this to the return code of MsBuild not being equal to Because if I remove that check condition resultMsBuildProcessExitCode eq from line in the script then BuildSucceededTrue That means that the string Build FAILED is not in the build output Ive tried digging into the MsBuild docs to see if BC warnings from vbc are handled differently than that C warnings Ive got a suspicion they are but cannot confirm Hello I try to make this part from my csproj working Target NameCustomPostAfterBuild AfterTargetsAfterBuild Exec Commandecho PostBuild event Active configuration is ConfigurationName PropertyGroup EmptyCheckScripts dist jsEmptyCheck PropertyGroup Error ConditionEmptyCheck TextEmpty folder EmptyCheck ItemGroup what ever is in the build folder should be included in the project Content IncludeScripts dist js Content IncludeMSBuildThisFileDirectoryScripts dist js ItemGroup Target When I publish my project from visual studio it is ok But when I use InvokeMsBuild from my powershell script it fails I got the same problem with my Gulp task but I fixed it by using absolute path Its not possible for ItemGroupContent Is it a way for command line InvokeMsBuild to be based on current project publishing We are getting below error for few of the projects where rest of the projects getting compiled successfully SolutionOutputPathJoinPath AgentFolderPath Src DOTNET Common bin BuildParameterstargetBuild propertyConfigurationRelease pOutDirSolutionOutputPathPlatformAnyCPU verbosityQuiet SolutionPathJoinPath AgentFolderpath Src DOTNET NonWebApps ShipmentHistoryUpdateJob ShipmentHistoryUpdateJobcsproj InvokeMsBuild Path SolutionPath MsBuildParameters BuildParameters InvokeMsBuild Unexpect error occured while building Dyyy OEM POCSMM PS src Src DOTNET NonWebApps ShipmentHistoryUpdateJob ShipmentHistoryUpdateJobcsproj Process with an Id of is not running At Dyyy POCSMM PS src Build Library InvokeSolutionsps char InvokeMsBuild Path SolutionPath MsBuildParameters BuildParameters CategoryInfo NotSpecified WriteError WriteErrorException FullyQualifiedErrorId MicrosoftPowerShellCommandsWriteErrorExceptionInvokeMsBuild Migrated from this codeplex issue Id like to see a Target parameter for InvokeMSBuild added as string so we dont need to pass it as a string in MsBuildParameters Id also like a Properties parameter of type hashtable so we could write things like this powershell InvokeMSBuild Target CleanBuild Properties ConfigurationDebugOutDir artifacts 