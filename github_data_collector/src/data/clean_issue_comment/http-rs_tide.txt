When the same path is registered but with another method respond with instead of Followup to Disables console printing by default Thanks This is the part of the effort described here Problem Short summary for the problem that asynclisten and this PR solves is before the PR I get the error cargo run example hello Compiling tide v work Finished dev unoptimized debuginfo targets in s Running targetdebugexampleshello Server is listening on Error Custom kind Other error ErrorAccept Os code kind Other message Too many open files If I run wrk against the app ie simultaneous connections wrk c this is with ulimit n of which is default on many linuxes And after the pull request there is no error Benchmarks Before the PR tested on the same example hello release build wrk c Running s test threads and connections Thread Stats Avg Stdev Max Stdev Latency ms ms ms ReqSec k k k requests in s MB read Requestssec Transfersec MB And after the PR wrk c Running s test threads and connections Thread Stats Avg Stdev Max Stdev Latency ms ms ms ReqSec k k k requests in s MB read Requestssec Transfersec MB Which means performance is basically whiting the measurement error Questions What default limit should be I thought it could depend on resource limit but then its another dependency and still its not clear how to transform ulimit to maxconnections for some apps it could be maxconnections ulimit for others maxconnections ulimit So Ive set a as default Will this PR be accepted Tide version v OS ubuntu linux x Hi I tried putting tide server behind a reverse proxy For testing purposes I tried the same with hyper Tried both with caddy and heres the finding Both hyper and tide works when request with the binded url When reverse proxy with root path both server works When proxy tide behind a supbath for example domaintide tide server becomes unresponsive and returns in firefox and in chromium But the hyper proxy works in the path hyper Is there anything about header that needs changed manually when proxying tide behind a proxy server This closes it turns out there was already an implementation it was just commented out grin It makes it hard to use StatusCodeOK or StatusCodeNOTFOUNT for semantic coding Note that Responsestatus and Responsesetstatus are using StatusCode The new method is quite an inconsistency This is a port of the cookies implementation from the time when the tide was split into multiple crates Changes are ContextExt into RequestExt StringError was needed again appendHeader also needed Tests have been ported as well I was unsure how the strategy will be regarding Error handling so feel free to comment and suggest alternatives So far I have tried to stay as close to the original version Cheers Niko Adds to the reading list Thanks Hey I have started to port from v to v so far so good no major issues I noticed that cargo build fails if I try to mount a route with following signature rust pub async fn listarticlescx RequestRepo tideResultResponse with the following error error E the trait bound stdresultResulttideresponseResponse tideerrorError tideresponseintoresponseIntoResponse is not satisfied srcmainrs apiatarticlesgetwebarticleslistarticles the trait tideresponseintoresponseIntoResponse is not implemented for stdresultResulttideresponseResponse tideerrorError note required because of the requirements on the impl of tideendpointEndpointdbRepodieselPgConnection for fntiderequestRequestdbRepodieselPgConnection impl corefuturefutureFuture webarticleslistarticles Id be happy to submit a PR to implement IntoResponse for tideResulttideResponse but Id like to understand first if this implementation is missing on purpose due to some pending discussions around error handling in tide grin If we want to execute multiple times cxsetlocalvalue