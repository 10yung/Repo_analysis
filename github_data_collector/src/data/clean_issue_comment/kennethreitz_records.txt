When called from the Database query methods the Record generator accesses the ResultProxy cursor after the database connection has been closed This causes problems with SQLite in particular This PR corrects the behavior by using the closewithresult connection parameter for the query methods since they only return one result which is used in the generator instructing SQLAlchemy to have the ResultProxy cursor close the connection itself once all the results via the generator have been consumed In this case we do not close the connection manually For more documentation see and find closewithresult Fixes Fixes Fixes Closes my code is like python import records db recordsDatabasesqlitetestdbdb rows dbqueryselect from testtable printrows Im pretty sure there is content in test table and other operations like insert or createtable is perfectly normal But when I use select query like README it throws an exception as Im fetching the data from row says Cannot operate on a closed database Condensed two if statements into one and removed redundant else statement Should be syntactically the same Fixes broken tablib links Update the outdated Tablib docs links The openpyxl dependency doesnt have to be anymore since the issue in tablib that required this is fixed Also openpyxl has some buggy version check that fails when deployed in AWS Lambda thus making records not useable in this environment As the title I am just simply trying this api with the provided example rc mkRecordCollectionmetasampledatatxt r rcpeak Ive found one use case that was a bit difficult which is using records to perform routine maintenance I was able to work around with the following codesql is a records db from psycopg extensions import ISOLATIONLEVELAUTOCOMMIT vacconn sqlenginerawconnection vacconnsetisolationlevelISOLATIONLEVELAUTOCOMMIT vaccurr vacconncursor vaccurrexecuteVACUUM ANALYZE vacconnclose It would be great to add a raw flag to the query method or even just have a raw method to be able to call sql outside of transaction blocks DB connection is an IO intensive operation could records support asyncio to connect to many db machines asynchronously 