Add POSTGRESHOSTAUTHMETHOD to bring back old behavior and be similar to MYSQLALLOWEMPTYPASSWORD but add warning when trust is used since it disables all passwords Fixes In our CI pipeline we run some sql scripts on initialization of the postgres container This works well most of the time When there is heavy load on our CI cluster we are noticing that the initialization scripts executes all of our sql but doesnt restart postgres Successful UTC STATEMENT INSERT INTO tag accountid createdat SELECT NULL NOW INSERT waiting for server to shut down UTC LOG received fast shutdown request UTC LOG aborting any active transactions UTC LOG worker process logical replication launcher PID exited with exit code UTC LOG shutting down UTC LOG database system is shut down done server stopped PostgreSQL init process complete ready for start up Unsuccessful postgres doesnt restart and is killed after a timeout Notice diff in timestamps UTC STATEMENT NSERT INTO tag accountid createdat SELECT NULL NOW INSERT waiting for server to shut down UTC LOG received fast shutdown request UTC LOG aborting any active transactions UTC LOG worker process logical replication launcher PID exited with exit code UTC LOG shutting down Is it possible pgctl in dockertempserverstop does not return Dockerfile FROM postgres alpine ENV DIRdockerentrypointinitdbd SEEDDIRetcpostgresqlseed SCRIPTSDIRetcpostgresqlscripts RUN mkdir p DIR mkdir p SEEDDIR COPY postgresqlconf SCRIPTSDIRpostgresqlconf COPY scripts SCRIPTSDIR COPY seedsql SEEDDIR COPY initializesh DIR RUN chown R postgres SCRIPTSDIR chown R postgres SEEDDIR chown postgres DIRinitializesh ARG COMMIT ENV COMMIT COMMIT I have been working with the Alpine build for a bit I am not sure how to communicate with the devs here or in forum whenif I find findings in Twistlock Who should I email or how do I communicate here to make suggestions in the Alpine build Thanks Hi Im trying to run the PostgreSQL docker image with the minimum set of Linux capabilities This set seems to work well so far superficially version services postgres image postgres capdrop ALL capadd CHOWN DACREADSEARCH FOWNER SETGID SETUID Am I missing some capabilities that the service will not use in the first few minutes of operation but later in its lifetime Does it need any where I am not likely to see errors in standard erroroutput Thanks and best Sebastian This change adds support to choose which auth method to use on newlycreated database md vs scramsha vs future ones See and for some context When upgrading from stretch to buster the glibc locale data is upgraded Specifically this changes how PostgreSQL sorts data in text indexes To avoid corruption such indexes need to be REINDEXed immediately after upgrading the locales or localesall packages before putting back the database into production Suggested command sudo u postgres reindexdb all Im not entirely sure how were going to handle this but it does mean it wont be reasonable for us to simply upgrade the images from Stretch to Buster once Buster is released confused disappointed This container is rather handy but Ive found it more difficult than I expected to apply a nondefault configuration Specifically I needed to install SSL certificates and keys apply some postgresqlconf entries and modify pghbaconf To do so I had to create a setup script in dockerentrypointinitdbd to overwrite pghbaconf append to postgresqlconf and copy the SSL certs in from a bind mounted volume Originally I actually went further and made a derived container that copied these things in before I realised I could just bind mount I suggest document that bindmounting dockerentrypointinitdbd is a good way to run scripts and load configuration Special case a dockerentrypointinitdbdcopyfilesd directory When present copy everything in copyfilesd to the new datadir recursively preserving mode and changing ownership to container user So you can add an includedir etc Special case a dockerentrypointinitdbdappendfilesd directory When present append everything in appendfilesd to the new datadir with the same filename creating it if it doesnt exist Autoappend includedir postgresqlconfd to the generated postgresqlconf Document that any config file snippet placed in dockerentrypointinitdbdcopyfilesdpostgresqlconfd will be copied to the datadir and loaded as part of PostgreSQLs configuration Or alternately just special case postgresqlconfd in the dockerentrypointinitdbd and autoenable includedir if its present Make it more obvious in the docs that scripts in dockerentrypointinitdbd run as the postgres user I believe that current authentication configuration in dockerentrypointsh is less secure than it should be I have a problem with POSTGRESPASSWORD changing the authentication settings and not adequately warning user about it Currently if the password is not supplied host all all all trust is added to pghbaconf disabling the password checks for all users I think this goes way too far I honestly believe that there should be no way for the line host all all all trust to appear in configuration unless user explicitly sets ACCEPTANYPASSWORDFORANYUSERtrue Currently any mistake in configuration for example misspelling POSTGRESPASSWORD results in disabled authentication Disabled authentication is completely silent User could believe that password authentication is working since the DB accepts the password Warning displayed if POSTGRESPASSWORD wasnt set does not convey that password checks were disabled altogether No password has been set for the database This will allow anyone with access to the Postgres port to access your database Sounds like you can fix it by setting the password but the password would be just ignored I had an unpleasant experience of discovering my development DB for a personal project consuming of servers CPU because someone was mining some kind of crypto coin on it Initially I was using POSTGRESPASSWORD but later I decided to move password configuration for postgres user together with creating additional less privileged users into an init SQL file in dockerentrypointinitdbd amazing feature btw As you might imagine I did not believe that this would disable all password checks altogether and since my server continued to grant access with my password I had no idea that I was completely insecure I did not expect and didnt need high security from DB with an exposed port and without SSL but having literally no security is a really strange decision Ive read issues about security of this image and it seems like security is annoying and not our problem argument is winning Id much rather have official images be more secure by default but I feel like this fight is futile So here are my suggestions from less bothersome to more secure Change the warning to clearly state all authentication is disabled any password is valid for any user change pghbaconf or set POSTGRESPASSWORD if this behavior is undesirable or something like that Add this warning to readme If POSTGRESPASSWORD is not set better yet if ALLOWEMPTYPASSWORD is set then set it to an empty string and keep the md authentication always enabled That way developers can still easily connect to a DB with empty password but changing the password would never be silently ignored like it was in my case If POSTGRESPASSWORD is not set better yet if GENERATERANDOMPASSWORD is set then set password to a random string and print it on initial launch Official MySQL image allows to get second or third behavior by setting MYSQLALLOWEMPTYPASSWORD or MYSQLRANDOMROOTPASSWORD environment variables Alternatively you can set MYSQLROOTPASSWORD directly One of the three variables must be set explicitly or MySQL container fails to launch For backwards compatibility ACCEPTANYPASSWORDFORANYUSER or similarly explicitly named environment variable could be added If it is set to true then host all all all trust is added to the config Im willing to write the necessary code but Id like to know beforehand which approach would be accepted IMHO MySQLs approach is the correct one it is both flexible and explicit but its up to the maintainers During the research for that problem I came to the finding that if any files mounted to dockerentrypointinitdbd are unreadable to postgres user eg have wrong permissions dockerentrypointsh just goes ahead and ignores them IMHO the entrypoint script should be more verbose in terms of complaining about files being there but having wrong permissions instead of just passing by and starting up the server