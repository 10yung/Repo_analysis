It would be nice to get a release of this so that it can be used with Scala and Spark X val knn new KNNRegressionsetTopTreeSizedfcounttoInt setFeaturesColfeatures setPredictionColpredicted setK This throws the following exception Caused by javalangClassNotFoundException orgapachesparkmlparamsharedHasInputColsclass at javanetURLClassLoaderfindClassURLClassLoaderjava at javalangClassLoaderloadClassClassLoaderjava at sunmiscLauncherAppClassLoaderloadClassLauncherjava at javalangClassLoaderloadClassClassLoaderjava As part our CICD pipeline we have a daily build that runs on relatively small amounts of data As part of this we discovered an interesting bug as part of the method estimateTau there is the following line scala val y DenseVectorestimatorsmap case d mathlogd In this case d is the average distance between points We are finding that on the small data used in our daily build beta can exceed When this happens yMax which is defined as scala val yMax breezelinalgmaxy is below negative one and subsequently used as the bufferSize Specifically the following appears in the log bash ERROR KNN Unable to estimate Tau with positive beta This maybe because data is too small Setting to which is the maximum average distance we found in the sample This may leads to poor accuracy Consider manually set bufferSize instead You can also try setting balanceThreshold to zero so only metric trees are built this does not cause the code to stop and it continues bash Exception in thread main javalangIllegalArgumentException knn a d d parameter bufferSize given invalid value This then causes an error and the pipeline stops From my understanding very low average distances would always cause errors if beta exceeds Is there a way to extract the K nearest neighbors from Training samples from the KNN model in the Scala version while fitting training data on what parameter does top tree size leave size and sub tree leave size depends followed whatever was there val training MLUtilsloadLibSVMFilesc datamllibsamplelibsvmdatatxttoDF val knn new KNNClassifier setTopTreeSizetrainingcounttoInt setK st error TopTreeSize is invalid since total count of training sample is let say we set manually TreeSize as then it throws an exception while running knnfittraining javautilNoSuchElementException Failed to find a default value for inputCols at orgapachesparkmlparamParamsanonfungetOrDefault applyparamsscala at orgapachesparkmlparamParamsanonfungetOrDefault applyparamsscala at scalaOptiongetOrElseOptionscala at orgapachesparkmlparamParamsclassgetOrDefaultparamsscala at orgapachesparkmlPipelineStagegetOrDefaultPipelinescala at orgapachesparkmlparamParamsclassparamsscala at orgapachesparkmlPipelineStagePipelinescala at orgapachesparkmlknnKNNfitKNNscala It appears that sparkknn needs to transform dense vectors into their sparse form This creates a limitation when using sparkknn for very wide sparse datasets such as documentterm matrices used in NLP Is there any interest in supporting sparse vectors within sparkknn Would you please advise how to get K nearest neighbors for each data point using the python interface I believe this is possible based on KNN itself is also exposed for advanced usage which returns arbitrary columns associated with found neighbors I ran KNNClassifier on my local machine with rows data and I got stackoverflow errors The version of this KNN is v How to avoid this stackoverflow Just faced the issue and the reason was that the number of points defaults to was higher than the number of records in the training dataset Perhaps obvious for ML practitioners but I spent few minutes debugging to nail it down Itd be nice to know it before fitting a model or get a more userfriendly error message Exception in thread main javalangIllegalArgumentException requirement failed Sampling fraction must be on interval at scalaPredefrequirePredefscala at orgapachesparkutilrandomBernoulliSamplerinitRandomSamplerscala at orgapachesparkrddRDDanonfunsample applyRDDscala at orgapachesparkrddRDDanonfunsample applyRDDscala at orgapachesparkrddRDDOperationScopewithScopeRDDOperationScopescala at orgapachesparkrddRDDOperationScopewithScopeRDDOperationScopescala at orgapachesparkrddRDDwithScopeRDDscala at orgapachesparkrddRDDsampleRDDscala at orgapachesparkmlknnKNNfitKNNscala 