 Issue Often bots need to Check if a person is part of a particular conversation Gain additional information about a person in a conversation when the bot only has an ID Right now the only way to handle this is to retrieve the entire set of members for the conversation then search through them for the person youre looking for For large teams particularly for Teams teams in excess of k this becomes prohibitively expensive Proposed change Preferred implementation Add a GET call to this endpoint v conversationsconversationIdmembersmemberId Where ID is one of below is specific to the Teams channel not sure if the format of the ID is relevant for the core SDK Encrypted user MRI Unencrypted user MRI orgid AAD object id GUID UPN mostly its email Potential alternative implementation Allow the below endpoint to be filtered not sure if any actual work would be necessary for this option GET v conversationsconversationIdactivitiesactivityIdmembers with something like idid Im not sure if it would make sense in this instance to distinguish between the various types of valid IDs Component Impact Customer Impact The ability to lookup a single member of a conversation is necessary for large teams in the Teams channel This will impact all Teams bots that expect to operate in such a team Tracking Status Dotnet SDK PR Merged Javascript SDK PR Merged Java SDK PR Merged Python SDK PR Merged Emulator PR Merged Samples PR Merged Docs PR Merged Tools PR Merged dcr Hello I m using bot framework v and built a facebook messenger bot The problem is that suddenly my bot is not persisting the userprofile states anymore After I modified the data I save it as follows public override async Task OnTurnAsyncITurnContext turnContext CancellationToken cancellationToken defaultCancellationToken await baseOnTurnAsyncturnContext cancellationTokenConfigureAwaitfalse await conversationStateSaveChangesAsyncturnContext true cancellationTokenConfigureAwaitfalse await userStateSaveChangesAsyncturnContext true cancellationTokenConfigureAwaitfalse Well after that the file that is being generated on my Azure Blob Storage is truely a null storage typeSystemCollectionsConcurrentConcurrentDictionary SystemString SystemPrivateCoreLib SystemObject SystemPrivateCoreLib SystemCollectionsConcurrent UserProfile typeMicrosoftBotBuilderSamplesModelsUserProfile FacebookEventsBot MessageFlowType OtherQuestionMessagenull InsuranceCompanyNamenull YearOfSignContractnull IsActiveOrCancelednull FavourOfPhoneTimenull PhoneNumbernull CurrentStepnull CustomerServiceBotPersonnull ExpertNameBotPersonnull WasOptinfalse FacebookProfilenull The bot is saving nothing and I cant explain it no exceptions no errors or strange events in ApplicationInsights This is not for asking questions or filing bugs To get help with an issue with your bot How To questions should be submitted on Stack Overflow where there is a robust community to help you To file an issue against a component please go to the components repo Create Azure Bot Framework Service or Channel issue Create Bot Builder Tools issue Create Bot Builder SDK V NET or Javascript issue Create Bot Builder SDK V NET issue Create Bot Builder SDK V Javascript issue Create Bot Builder SDK V Java issue Create Bot Builder SDK V Python issue DirectlineWeb Chatbot generated ARM Template adds Channels that cause an error when redeploying from Azure CLI to a new resource group It looks like the channels in the ARM template are causing an issue json type MicrosoftBotServicebotServiceschannels apiVersion name concatparametersbotServiceschatbotname DirectLineChannel location global dependsOn resourceIdMicrosoftBotServicebotServices parametersbotServiceschatbotname properties type MicrosoftBotServicebotServiceschannels apiVersion name concatparametersbotServiceschatbotname WebChatChannel location global dependsOn resourceIdMicrosoftBotServicebotServices parametersbotServiceschatbotname properties Hi all This is stemming from one previous issue I posted regarding how to get Chat Logs from a ChatBot conversation as in where does the conversation end when does a client leave from the convo what is the human user sending to the bot etc I know now that I require Telemetry insights for the bot but following this link it is all done in C The bot I have developed using Bot Framework is using nodejs Is there any instructionssamples on how to add these insights via nodejs Please let me know This will be helpful Issue The WebApp bots created via the Azure CLI already have the webSocket code but the setting webSocketsEnabled on the AppService is not configured Proposed change Update ARM templates in Azure CLI with same changes as per this commit Hi Quick question regarding a future project Is it possible to have an option with the dialog of the ChatBot to hand off the existing state of the conversation to an actual human connected via Cisco UCCX Issue Including swagatmishra We talked about this offline But I believe this is less likely to require a fix on the channel side This is a problem because the combination of SDK and Direct Line channel It may not apply to other channels Client DLJS Web Chat or any ABS clients Todays characteristics Activities could arrive at the client at pseudorandom order Given U is the activity from user B and B is the first and second activity from bot Sending U to the bot the bot will reply with B and B The order of activity arrive at the client most of the time it is B B U User is expected to perceive it as U B B instead Sometimes it can be a bit random due to polling To support transcriptbased client the client need some knowledge to reorder the activities Direct Line channel will put a timestamp on the user message and echo it back to the client This is considered as read receipt Web Chat use this timestamp to sort messages The problem is The timestamp for bot activity can be random because Direct Line channel is on a server farm B and B could have a timestamp that would reorder into B then B Same for user activity We cannot timestamp on the client side because the client has no knowledge of the real order of the activities We know B and B is a reply of U We dont know B is before B Proposed change We could timestamp both bot and user activities on bot side Since U B B should be processed on the same box This will make the timestamp for all these activities more trueful For proactive messages I think it is fair to say the timestamp may be slightly off because of its distributed nature Given B P is a proactive message it will have very slight chance to make B P chronologically appear before B and B Component Impact Requires devs input Customer Impact Web Chat If both the bot and user send activities to each other very rapidly the outoforder behavior can be observed Tracking Status Dotnet SDK PR Merged Javascript SDK PR Merged Java SDK PR Merged Python SDK PR Merged Emulator PR Merged Samples PR Merged Docs PR Merged Tools PR Merged dcr Relates to This PR is a preview for the skill manifest schema It includes the follow changes Adds a dispatchModels property for defining lu modes and intent mappings to activities Adds a activitiesSent property for defining proactive messages that can be sent by a bot To review the easiest thing is to probably look at the sample and see if that meets your needs You can also check the schema and descriptions for each new property Please review and provide any comments Issue The READMEmd has not been updated says the current version is and that is in preview Proposed change Update to reflect the current version Might make sense to wait until at this point Tracking Status Dotnet SDK PR Merged Javascript SDK PR Merged Java SDK PR Merged Python SDK PR Merged Emulator PR Merged Samples PR Merged Docs PR Merged Tools PR Merged dcr 