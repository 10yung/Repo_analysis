 Motivation Refactored Acquires to handling just names of resources not types Acquiring a resources acquires all possible instantiationsinstances Test Plan cargo test Related PRs Consider a scenario in which a state sync request retrieved all the required chunks but failed in the processcommit function The state sync request is going to remain pending All the future invocations of checkprogress are not going to send new chunk requests because the DB is already updated The system is thus stuck because consensus is waiting for a state sync request that is never going to get terminated One solution is to make sure that checkprogress can release the pending requests that are already satisfied Whitespace is generally not significant in Move but the exception is that space is required between an identifier and a lessthan operator When parsing fails possibly due to a missing space add a message to suggest adding a space Motivation Improve usability for a potentially common user error Have you read the Contributing Guidelines on pull requests Yes Test Plan Added a test and updated existing tests Summary This adds a buildspec which will be used to define the build for clustertest on AWS Codebuild This also adds a script which can be invoked to trigger the build The validatordynamicbuildawssh and clustertestbuildawssh share a common base script dockerbuildawsbasesh cc metajack bmwill This is for tracking effort to make libra core library wasm safe which means all crypto functions and LCS stuff could be compiled into wasm and used by JS so currently various core library depends on following nonwasm safe rust crates memsec and clearondrop just require feature changes and getifaddrs and errno dependency can be get rid of patchcratesio errno path emptyerrno getifaddrs path emptygetifaddrs memsec path emptymemsec clearondrop pathemptyclearondrop So I created this This allows for publishing of generic resources Its not as clean of a solution as we would like but we are going to change things significantly with the binary format changes and the loader work Motivation Making x a reserved address for VM by Disallow creating account on x Reject transactions with sender x Have you read the Contributing Guidelines on pull requests Yes Test Plan Add test cases for each operation Under a specific configuration an invalid instantiation could be generated for both Pack and Call instructions Particularly if the type on the stack was a nested generic with no other instantiations of the type variables contained within the inner struct we would fail to create a substitution for that type variable For example if we had the following two structs struct InnerA B x A y B struct OuterX Y f Y g SelfInnerX u Now if the stack contains an OuterT G where T and G are generic type parameters to the surrounding function context TypedStack OuterT G Now we apply an unpack to this to get type stack TypedStack G SelfInnerT u Now we generate a PackOuter instruction when we try to generate an instantiation we succeed in the unification of G with the Y TypeStack G SelfInnerT u G Y Y G But we would fail to even try to unify the SelfInnerT u type on the stack with the SelfInnerX u from the struct field and we would fail to add the substitution of X T We would then fall back to thinking that X was an unused type parameter and fill it in with a u and this would fail to typecheck in the verifier This all stemmed from line in transitionsrs we only looked for a type parameter and did not look any deeper to see if it was a generic type Updating this solved the issues This is stacked on other commits so only reviewlook at the top commit of this PR Converting storage client to tonic seem to reduce cluster test reported performance from to TPS Add ability for test generation to log to a file or terminal if no log file is specified Also record the error along with the module that failed