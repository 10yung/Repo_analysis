Here we added a variation to allowed using the value to indicate that a wiki server will be started if a directory exists for the wiki A nicer looking error page is also added for when a wiki that is not allowed is accessed Screenshot at allowhost is also reworked for the combinations of allowed and wikiDomains I wanted to see how this works a friend recommended it I dont want it installed globally on my system So I ran mkdir wiki cd wiki yarn install wiki then npx wiki Now I realise that this wiki created wiki and started storing data there In my opinion this is extremely unexpected for an NPM package I just installed as a dependency I realise that yall are most likely imagining folks use the npm g i wiki as a means of installing a system wide application I figured Id share my feedback as otherwise theres no way for the authors to know Im very interested in the concept of the federated wiki and keen to explore the software further This decision to immediately create files in wiki has in my personal case significantly reduced my trust in running this software on my machine I wonder what other traces this software will leave on my computer without my knowledge My next thought is that I need to install a VM or docker container in order to be able to run this on my machine That is probably a barrier thats too high for me to get to Please feel free to ignore this issue if youre not interested A friend has been evangelising the wiki and I really love the concept Im now very reluctant to run it and I wanted to share that feedback as maybe this information might lead to helping federated wiki gain adoption I imagine that honest independent user feedback is usually hard to get As a closing thought Id love to have some method of testing the wiki listed on the README that doesnt require a system wide install That or a test that tries to determine is wiki installed globally or locally and switches the data directories etc as a result End of feedback Example use case I want to run be able to publish a blog piece using an instance of a fediverse blogging server like Hubzilla Plume or WriteAs and have a copy of that text automatically added as a new page on an instance of FedWiki The blogging server keeps the article in its original form although edits may be made there afterthefact to fix typos or factual errata or add updates to the subject of the article as in any other blogging system Whereas the copy on the FedWiki server becomes a living document updated and evolved over time and available to be searched or mirrored across the FedWiki network incorporated into larger sets of documents and so on Asked about before but I keep falling into this trap Taking live notes using wiki Take screen shots to capture context Roughly about after adding the rd screen shot wiki loses the ability to save the live page to the server When this happens on ChromeOS I try to fork the live page but the fork controls are out apparently also out of memory Is there any way to make wiki page memory more robust for normal users Modern phones and laptops now have retina high resolution screens that induces large images using memory Could a new halo color indicate the page is out of memory the page will save null before it can be backed up by overnight process Could the page selffork rather than commit page suicide Could images automatically save a lower safer resolution Just some ideas because I think wiki needs to be more memory safe ChromeOS does not have all the fancy of MacOS Unix or Windows saving a local page copy to cache Chromebooks are often a default option for schools As a newbie Im not sure what behaviour I should expect when theres a field at the bottom of the window that says search as opposed to the link at the bottom of a wiki page that says search If I stop and think about it these the search field is beside the count of pages in the neighbourhood However my newbie sense has become accustomed to the idea of Google Search which might be different from the older idea of Yahoo Search that went into categories ie YAHOO as a backronym for Yet Another Hierarchically Organized Oracle For a newbie is search the right term for either the window search field or the page bottom link Given that at Nov StatCounter announced Internet usage by mobile and tablet devices exceeded desktop worldwide for the first time in October according to independent web analytics company should we consciously be giving smartphone and tablet users more love on federated wiki The How to Wiki pages says Tip Use arrow keys to scroll left and right which isnt an affordance available on my Android smartphone or tablet The only control on a touch screen browser is the back button Steps to reproduce git clone SOMEPATH cd SOMEPATH dockercompose up d build Expected Result Have a container of wikiweb image running Actual result Container exited Logs docker logs CONTAINERID modulejs throw err Error Cannot find module coffeescript at FunctionModuleresolveFilename modulejs at FunctionModuleload modulejs at Modulerequire modulejs at require internalmodulejs at Objectanonymous usrsrcappindexjs at Modulecompile modulejs at ObjectModuleextensionsjs modulejs at Moduleload modulejs at tryModuleLoad modulejs at FunctionModuleload modulejs Additional information I receive the following during the build process npm WARN deprecated coffeescript CoffeeScript on NPM has moved to coffeescript no hyphen Ive been pursuing a better way of drawing maps vector images for some time As of May drawio moved to an Apache license In August they released desktop versions to complement the browserbased versions that were previously free See my digest of these events at Drawio open source Theres a repository for jgraphdrawio on Github For Dokuwiki I notice a drawio Pluign for DokuWiki on Github and a forum discussion I havent fully investigated these yet Instead of trying to replicate the rich functionality in drawio what would an integration with federated wiki look like symptom While working on the calendar plugin Ive tried to deploy a wiki from npm scopes Ive published my forks as dobbsewikiv e dobbsewikiplugincalendarv a My custom wiki modifies packagejson to point to my custom wikiplugincalendar All the interesting stuff is in calendar Wiki does not find my plugin when installed this way npm install dobbsewikiv e I see that npm does install the scoped plugin find nodemodules type d name wikiplugincalendar nodemodulesdobbsewikinodemodulesdobbsewikiplugincalendar wiki version finds these plugins that start with c notably excluding calendar wiki version grep pluginc wikiplugincalculator wikipluginchanges wikipluginchart wikiplugincode cause npm install puts my scoped package into a scoped directory tree which fails to match the filesystem glob that searches for plugins on disk In clicoffee starting at line config ccargv ccenvwiki packageDir pathresolvepathjoindirname nodemodules a little later on line glob wikiplugin cwd configpackageDir e plugins Here we see that version searches configpackageDir for folders starting with wikiplugin My scoped package landed in dobbsewikiplugincalendar The dobbse scope hides my plugin from version and presumably from other places too potential remedy I propose to inspect packagejson instead of file globbing Something like this would work for version though similar changes are needed elsewhere requirepackagedependencieskeysreduce acc name acc name requirenameversion other things I notice This area of code has been through some other issues wiki Move clifarm into wikinode wikiserver Move clifarm to wikinode wikiserver more specific annotation of json Plugin management really wants to live in plugmatic Maintaining a Custom Wiki mentions Warning This workflow has proven to be unreliable and will be replaced by plugin support within wiki It is left here for historical reference See About Plugmatic Plugin Theres a good chance I havent discovered all the things tugging on this code and warrants futher discussion I have been thinking about how people use wiki as a broader technology With the current federated wiki the view is oriented towards two pages per screen An alternative view that is popular is kanban boards However I am thinking about wiki as a horizontal application in the sense that Joel Spolsky describes spreadsheets in Some people use Tiddlywiki for personal todo lists Federated wiki could be a shared todo list but its rather heavy weight for that Trello is popular but somehow doesnt have the piecemeal growth feel that wiki technology does