Hi The latest version in Cocoapods spec repo is Can someone please do me a favour and push the spec Have tried using git tag but it fails due to validation errors Cheers Gareth Getting build issue Hello Overcoat I m using Overcoat v using CocoaPods Overcoat is using Mantle v and AFNetworking v But Pod is unable to build Overcoat because of some errors saying Include of nonmodular header inside framework module OvercoatOVCResponse Include of nonmodular header inside framework module OvercoatOVCModelResponseSerializer I have created an issue on Mantle library with issue and AFNetworking library with issue I tried changing these settings in my main project Define Module to YesNo Allow Nonmodular Included in Framework Modules to YesNo Enable Modules C and ObjectiveC to YesNo but no luck till now I tried deleting projectxcworkspace file Pods directory and Podfilelock and then run pod install again with updated module settings but no luck Development Configuration I m using Xcode and CocoaPods Could you please let me know what might be the cause of issue or Im doing something wrong Here are the screenshots I captured for you for better understanding of issue mantleerror afnetworkingerror screen shot at pm Is there any pagination ability in Overcoat to handle cases like json rootmodel count models next previous null I think a lot of the recent Xcode Overcoat build pains see the heroic efforts of Iyuna with come from the fact that Overcoat adds nested dependencies to potentially unwanted frameworks each dependency adds its own build environment requirements complexity and just as importantly more build time I imagine some people dont necessarily want Reactive Cocoa or Promise Kit linking into their projects Others are only interested in Reactive Cocoa not Promise Kit and some will want the reverse But in general adding the dependencies to the core Overcoat project seems add additional frustration for anyone that wants to consume Overcoat in its purest form as a convenience framework for objectmapping AFNetworking responses with Mantle Im not exactly clear on the best way to implement a more modular Overcoat framework in the modern era of package management CocoaPods Carthage eventually Swift PM Ideally whatever solution is one that more easily allows someone to optin to the accessories and their nested dependencies but I think its an important effort worthy of some time investment Maybe the answer is really to have separate GitHub repositories and thus separate frameworks for each optional accessory OvercoatPromiseKit OvercoatReactiveCocoa OvercoatThenKit Maybe rodrigolima Thoughts from the community or sodastsai Do you think splitting things up will add more hassle than its worth I just updated to the latest Im in ObjectiveC and used cocoa pods pod OvercoatPromiseKit beta Changed the GET to pmkGET but get warnings go Property then cannot be in forward class object AnyPromise sodastsai it would be great if you can provide examples in Swift for this great library I would highly appreciate it Thanks in advance For instance I was trying to convert this AnyPromise fetchTeamUsers return self GETquickrefscoutlist parametersnil then OVCResponse response return responseresult catch NSError error return HTOTeamUserModel fetchCache into Swift but Im so new to it that Im lost eg Theres an endpoint apiitems that redirects to newapiitemlist modelClassesByResourcePath in the OVCHTTPSessionManager subclass returns apiitems ItemModel class This results in responseresult containing raw JSON because Overcoat uses HTTPResponseURL for matching and since the original requests been redirected to a new URL theres no match Not sure if a bug but it would be awesome if it was possible to use the original request URL for matching The min target of OvercoatPromiseKits dependencies are why OvercoatPromiseKit deploymenttarget Im trying to send UIImage in base NSString but final response catch up by Charles contains before every I cant find any solution can you help me with this Is something that i missed or Im just that stupid stringByReplacingOccurrencesOfString is way too I know but where to get that string right before sending to replace by Im looking for a best practice on using this framework when inserting large numbers of entities with possible duplicate entries My model is essentially like this Invoices Customer InvoiceItems Product A given Customer may be in multiple Invoices and a given Product may be multiple InvoiceItem objects My data set roughly comes out to Invoices and InvoiceItems It appears that entity iterations perform a fetch for each object to determine whether we need to insert or update an object which I think is the bulk of my performance issues Anyway Im curious what others have done to increase their performance or if there is a best practice to follow Thanks 