 workflow vs job name TOXPARALLELNOSPINNER vendoring env state logging Pip cache One way and before the rewrite release the only way to bootstrap a virtual environment in an offline environment is to point pip to some bundled wheels via the findlinks parameter The problem is that if this folder contains both wheels that support the target environment and wheels that dont eg with setuptools dropping python pip does not pick the last supported version of a package but instead picks the highest version and then fails at install time Triggered by Environment pip version Python version also tested with OS linux Description Package A is being installed and depends on package B version and package C Package C depends on package B version Package B is already installed in version When I now run pip install in package A B is not upgraded to version This happend because a package depended on astropy and numpy where numpy was required to be Astropy depends on numpy When installing said package in an environment where numpy is installed it does not get updated although astropy is downloaded and installed and requires numpy Expected behavior Upgrade Package B numpy to the version required by the dependency How to Reproduce Describe the steps to reproduce this bug setuppy of test package from setuptools import setup findpackages setup nametestpipdep packagesfindpackages version authorme installrequires astropy requires numpy numpy Commands python m venv testenv testenvbinactivate pip install U pip pip install numpy pip install testpackage Output Obtaining filehomemaxnoetestpackage Collecting astropy Using cached Requirement already satisfied numpy in homemaxnoetestenvlibpython sitepackages from testpipdep ERROR astropy has requirement numpy but youll have numpy which is incompatible Installing collected packages astropy testpipdep Running setuppy develop for testpipdep Successfully installed astropy testpipdep Quoting chrahunt in One issue with globally managing the temporary build directory is that InstallCommand and WheelCommand catch a PreviousBuildDirError and then explicitly set optionsnoclean This prevents us from taking a straightforward approach for configuring global tempdir handling if optionsnoclean is set From my reading of the implementation the problem is that the temp directory relies on the registry to decide whether it should clean up but that decision is made on instantiation so the PreviousBuildDirError handler cannot affect that decision This patch would delay that decision until cleanup time instead so the PreviousBuildDirError handler can be kept to tell the registry to stop the cleanup Feel free to close this if you think this is not the way to go Environment pip version and master Python version OS Windows Description Copied from here Oh if additional arguments are needed to run pips tests out of the box thats not right The commands to run the tests on Windows from the CI config are tox e py m unit n auto tox e py m integration n auto Those work But just tox e py produces loads of errors suggesting that there are tests that are marked as neither unit nor integration that are failing on Windows Worse after running the incorrect command I found masses of unexpected packages installed in my system Python I was running tox from a venv created just for testing pip so everything should have been isolated from the system install It was bad enough that reinstalling my system Python was the easiest fix Ill make this comment into a separate issue but honestly I dont want to spend a lot of time fighting the test suite into submission on Windows particularly if it involves trashing my system Python on a regular basis So if anyone else wants to pick this up they are welcome to do so Following up Currently there are no tests around special characters for things like subdirectory egg and other parts of the URL like auth We should add those and verify they are all working egg is probably fine since all valid package names are URLsafe anyway but it won t hurt to at least understand its behaviour Related Whats the problem this feature will solve When the new resolver is implemented we will need to have a way to allow users to test it One option is to add a new option to pip to allow selection of which resolver to use Describe the solution youd like Add a pip option resolver legacynew Name of the option and the values can be discussed Choosing legacy will select the current resolver choosing new will select the new resolver Notes The default should initially be legacy so that the new resolver is optin After a suitable period of testing the default should change to new The option should be temporary being removed along with the legacy resolver code once the new resolver is considered final Adding the option in advance of the new resolver code has been discussed its not yet clear what benefit this would have but it is certainly possible Alternative Solutions A boolean option like enablenewresolver could be used instead The transition process might be more complex with such an option The new resolver could be made available simply as a separate feature branch of pip This would make it significantly harder for users to try the new code though Additional context See Zulip for some additional discussion Environment pip version Python version OS debian Buster The machine is setup in a secure isolated network with no internet connection I have two machines supplying a PyPi server namely hereafter index and index My etcpipconf looks like this global index indexurl extraindex extraindexurl trustedhost index index timeout Description When installing a package present on index s PyPi server everything works fine But when installing a package that isnt present on index but is on index pip tries to contact This results in pip retrying times to request this URL in vain eventhough I have my pipconf overriding the index URLs and where to search for packages This is extremely similar to but is not fixed by upgrading pip or python or system whatsoever Expected behavior Pip would skip index upon failure and directly request index How to Reproduce Output I am not able to copy paste the output of the commands directly since it happens on a networkisolated machine However output is extremely similar to that of and contains pip install verbose package creating some temp dirs Looking in indexes Getting page Found index url Starting new HTTP connection index GET simplepackage HTTP Looking up in the cache And then a bunch of pointless retries on this request before successfully contacting index and installing the package as expected This is pretty annoying I must admit It would be less of a pain would I be able to override the default retry count in the pip configuration but I havent been able to find such parameter anywhere Thanks in advance for the quick reply Finishing Given the recent automation added to our release process see for details I know that itll work on MacOS and likely Linux systems because Ive tested that I expect that it works on Windows but Ive not been able to test that Itd be great if someone could try it out on Windows to make sure things work as expected there as well This is basically someone running the preparerelease and buildrelease nox commands to make sure they work well on Windows Ive assigned folks that I know run Windows machine and informally agreed to try this when theyd find time to tackle this If a new contributor wants to try this out please go through step here 