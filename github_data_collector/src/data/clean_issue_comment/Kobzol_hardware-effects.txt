This isnt really an issue but more of a request I think it would be really nice to have a program much like cachehierarchybandwidth which determine the cache line size It is surprisingly difficult to isolate cache line size effect prefetching makes everything hard I tried to follow the advice mentioned in the top answer here but it doesnt work on my computer I am curious what is the correct perf counter for K aliasing You have mentioned ldblocksstoreforward but I was wondering about the other counter ldblockspartialaddressalias as well Here is the perf list description ldblocksstoreforward loads blocked by overlapping with store buffer that cannot be forwarded ldblockspartialaddressalias False dependencies in MOB due to partial compare on address Here are the perf results on my machine perf stat e ldblockspartialaddressaliasldblocksstoreforward aout Performance counter stats for aout ldblockspartialaddressaliasu ldblocksstoreforwardu seconds time elapsed perf stat e ldblockspartialaddressaliasldblocksstoreforward aout Performance counter stats for aout ldblockspartialaddressaliasu ldblocksstoreforwardu seconds time elapsed As you can see both of them are hugely different for and Im toying around with the cacheconflicts code and Im using a higher count than you did in your benchmark However the repetition count than makes the program run for absolutely forever So maybe you could do ifndef REPETITIONS define REPETITIONS endif so that it becomes possible to override that count After that I can of course recompile by hand but beats me if I can figure out how to use your build system and pass the DREPETITIONS to the compiler Thoughts Hi again heres my plot for the cachememoryboundtest screenshot from Do you have any explanation for the measurements after increment The processor is a XeonR Gold CPU GHz This is in reference to It makes direct use of perf events in Linux for measuring TLB misses but also times each run Overall the results I got seem to make sense and are outlined in the REAMDEmd but there are a few cases that dont like tlbaliasing doesnt give close to misses per iteration which I would expect in a entry TLB PTAL thanks x nontemporal stores x multiple threads saturating the memory bus x hardware prefetching with indexed accesses x floating point handling denormals etc x k aliasing x store buffer capacity instruction cache misses TLB misses more multithreading examples lock contention etc vector instructions critical word load CUDA examples