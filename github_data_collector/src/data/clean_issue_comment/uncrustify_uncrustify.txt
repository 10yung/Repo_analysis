In C I have the following input namespace N public class DictionaryLookupCompare public DictionaryLookupCompare foreach var item in EnumerableRange Selectx new str MyProperty x i x hashTableAddEncodingUTF GetBytesitemstr itemi with these in the config codewidth unsigned number lscodewidth true truefalse the output from uncrustify is namespace N public class DictionaryLookupCompare public DictionaryLookupCompare foreach var item in EnumerableRange Selectx new str MyProperty x i x hashTableAddEncodingUTF GetBytesitemstr itemi I would like it be something more like namespace N public class DictionaryLookupCompare public DictionaryLookupCompare foreach var item in EnumerableRange Select x new str MyProperty x i x hashTableAddEncodingUTF GetBytesitemstr itemi I imagine it must be one of the indent rather than align options but I cant find which Any idea Thank you The language is C I have codewidth unsigned number lscodewidth true truefalse this works nicely in keeping the code at characters per line max However I found a couple of scenarios where it doesnt work Basically if there is a group of parenthesis that are empty that go over chars and they come after a sequence of identifiers separated by dot the dot sequence is not broken into two lines as it should be So if its just the parenthesis that are over the char limit uncrustify wont split at the dot If the identifer itself is over even by just one character then it will split The same happens with attributes uncrustify wont split at the dot if its just the parenthesis overflowing It will split if an identifier goes over the So you can end up with lines that are or characters over the codewidth which is bad enough for those who rely on the exact limit but its an even bigger problem when you have a bunch of spaces in the parenthesis you end up with a line that can be characters long that doesnt get split at all When assignments are involved Uncrustify isnt as reluctant to split at the assignment character whether its the identifiers that go over or just the parenthesis It will happily and correctly split after the Examples This works fine namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsjkdflsjfsdfsdfsdfssss uncrustify outputs a corect result namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdfl sjkdflsjfsdfsdfsdfssss but for this input the wrapping doesnt happen the difference is that in this second case the sjkdflsjfsdfsdfsdfsss stops right at the char limit whereas in the previous case it went one character over namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsjkdflsjfsdfsdfsdfsss the corect result would be namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdfl sjkdflsjfsdfsdfsdfsss but uncrustify simply leaves it unmodified namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsjkdflsjfsdfsdfsdfsss Also this input works fine it gets split namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsjkdflsjfsdfsdfsdfssss but this doesnt namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsjkdflsjfsdfsdfsdfsss remains the same characters line This input gets split but not into enough lines namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsjkdflsjfsdfsdfsdfssss uncrustify outputs incorrect result namespace MessagePack public class MyClass public MyClass sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdfl sjkdflsjfsdfsdfsdfssss This gets split correctly namespace MessagePack public class MyClass public MyClass int a sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsljdflsjdfsdf uncrustify outputs the correct result namespace MessagePack public class MyClass public MyClass int a sldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsljdflsjdfsdf This gets split but into insufficient lines namespace MessagePack public class MyClass public MyClass int a ldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsljdflsjdfsddffsdf uncrustify outputs incorrect result namespace MessagePack public class MyClass public MyClass int a ldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsljdflsjdfsddffsdf If I add one more character then it finally gets split correctly Input namespace MessagePack public class MyClass public MyClass int a ldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdflsljdflsjdfsddfsfsdf uncrustify outputs the correct result namespace MessagePack public class MyClass public MyClass int a ldfjsljkfdlskjdflsjkdflsjfsldfjsljkfdlskjdfl sljdflsjdfsddfsfsdf Attributes Input doesnt get split although it should AggressiveInlining stops right at the border namespace MessagePack public class MyClass SystemRuntimeCompilerServicesMethodImpl SystemRuntimeCompilerServicesMethodImplOptionsAggressiveInlining uncrustify leaves it unmodified The correct result would be namespace MessagePack public class MyClass SystemRuntimeCompilerServicesMethodImpl SystemRuntimeCompilerServicesMethodImplOptions AggressiveInlining but again if I add one more character to the identifier to make it go over with this input it works Input namespace MessagePack public class MyClass SystemRuntimeCompilerServicesMethodImpl SystemRuntimeCompilerServicesMethodImplOptionsAggressiveInlining Uncrustify outputs the correct result namespace MessagePack public class MyClass SystemRuntimeCompilerServicesMethodImpl SystemRuntimeCompilerServicesMethodImplOptions AggressiveInlining Thank you Im making use of the config options Add or remove newline after each in a function declaration nlfuncdeclargs remove ignoreaddremoveforce Add or remove newline after each in a function definition nlfuncdefargs remove ignoreaddremoveforce setting them to Remove so that a list of parameters that spans many lines gets compacted to as few lines as possible as permitted by codewidth Im looking for something similar for the parameters of a function call as opposed to function definitiondeclaration I cant seem to find anything For example this call func parameter parameter parameter parameter parameter parameter parameter parameter parameter would be transformed into func parameter parameter parameter parameter parameter parameter parameter parameter parameter assuming a codewidth setting of characters Any idea for that Thank you The language that Im using uncrustify for is C but this applies to CC as well Im looking for something similar to indentnamespace and indentclass but for functions Basically I would like to NOT have the body of a function indented So instead of class X int F int a a return a I would like to get class X int F int a a return a Would there be any way to accomplish that Thank you functionbodyzip The language that Im using uncrustify with is C but this applies to CC as well Debug file The following code gets incorrectly treated when parsed doconst name const ip booltoggle return becomes do const name const ip booltoggle return it also gives the error checkcomplexstatements g pawnuncrustifytest mainpwn origline is Error Expected while got it believes the do function name is actually part of a do while loop When an assignment continuation contains a lambda it appears impossible to remove the extra level of indentation Input and desired output const auto lambda this int arg doSomething Output const auto lambda this int arg doSomething Debug debugtxt A very hacky and unacceptable patch that works around the problem hackdiff I wanted to ask a question to know if there is anything I can do about the following pieces of code and prevent them from being changed I have tried set IGNORED but it doesnt seem to apply to a specific macro I set or any macros I try the best I can do is ignore all define instances Which I was hoping to avoid Code define ALSDOPlayerExit PlayerExitiendplayerid becomes define ALSDOPlayerExit PlayerExit i endplayerid It is required that the output of the macro be kept without spaces since this becomes part of a much bigger macro that is used to make functionsnativescallbacks hookable using a certain library Code foreachnew i Player becomes foreachnew iPlayer foreach is not present in Pawn generally and is actually a macro function that does some magic behind the scenes it uses a custom Iterator implementation I just found an issue that also causes another crashfilter error debug in Pawn it is legal to do this new TexttestText MAXPLAYERS TextINVALIDTEXTDRAW TexttestText MAXROWS MAXPLAYERS booltestText MAXPLAYERS testText MAXPLAYERS However because the data doesnt start on the same line as the quantifier it does in fact throw a crash filter error Using the latest version of uncrustify Compiled it myself Debug file The issue is related to this code static stock const data b b b b it appears that the equal sign used to denote initializing the array with values is the cause of a crash filter The crash filter gives the error crashfilter exception xC at ip FF F C A CallStack pawnprocessvariable pawnprocessline pawnprescan The space between the return type and parameters of a function type in a stdfunctionreturn params declaration is incorrectly removed in some cases Note that the sizet is incorrectly assessed as FUNCCALL whereas void is correctly assessed as TYPE Input and expected output Retains the space after void typedef stdfunctionvoid int arg Pass Removes the space after void typedef stdfunctionsizet int arg Fail Output Retains the space after void typedef stdfunctionvoid int arg Pass Removes the space after void typedef stdfunctionsizetint arg Fail Debug debugtxt 