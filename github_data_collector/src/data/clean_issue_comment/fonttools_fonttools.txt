Running fonttools varLibinterpolatable tool on the set of master TTFs generated from NotoRashiHebrewMMglyphs source from notosource repo does not detect this interpolation issue where the starting point on a contour is different across master but the contours have the correct order and the same number and type of segments leading to this rendering issue ezgif a fd acd c Here are the files to repro NotoRashiHebrewinterpolatableissuezip Question mainly for behdad was the interpolatablepy intentended to spot these sort of issues If not canshould it be extended to detect these I am trying to figure out how to correctly map my axis width and weight variable font I assumed that the wght and wdth axes should be mapped to correspond with the css width and weight values ie from and up to for weight and for width Now Im not sure how to proceed here the instances weight values at the Condensed end differ to the Expanded end just for example Condensed Light Regular Bold Normal Light Regular Bold Expanded Light Regular Bold I wonder what the correct practise is for mapping it Should I just take an axis that intersects with the default master and run it along there even though it will be incorrect as you move across one of the axes The vhea table has a version that changes the name and definition of the following fields ascender becomes vertTypoAscender descender becomes vertTypoDescender lineGap becomes vertTypoLineGap The new names are not available in LibfontToolsttLibtablesvheapy yet The method getName in LibfontToolsttLibtablesnamepy currently requires callers to pass in a platformdependent language code It would be nice if instead a BCP language tag could be passed in The module already has the dictionaries to map BCP language tags to the language codes used for Windows and Mac For the Unicode platform I d suggest mapping language tag und to the language codes and xFFFF the latter is only mentioned in Apple documentation and supporting other language tags only if an ltag table is present The dictionary WINDOWSLANGUAGES in LibfontToolsttLibtablesnamepy maps the Windows language code x C B to BCP language tag sms According to x C B stands for Southern Sami which has language tag sma Apparently the macOS bug has been fixed Im not sure when but in the workaround introduced in is not needed anymore Can anybody confirm When exporting a DesignSpace OTF into a VF OTF I get a UnboundLocalError local variable model referenced before assignment error It s not a good use scenario but still a corresponding TTFbased VF exports Files fsType VFzip Error log INFOfontToolsvarLibAxes default hidden False labelNames en Weight map maximum minimum name weight tag wght INFOfontToolsvarLibInternal master locations weight INFOfontToolsvarLibInternal axis supports weight INFOfontToolsvarLibNormalized master locations weight INFOfontToolsvarLibIndex of base master INFOfontToolsvarLibBuilding variable font INFOfontToolsvarLibLoading master fonts INFOfontToolsvarLibGenerating fvar INFOfontToolsvarLibGenerating avar INFOfontToolsvarLibNo need for avar INFOfontToolsvarLibBuilding variations tables INFOfontToolsvarLibGenerating MVAR INFOfontToolsvarLibGenerating HVAR INFOfontToolsvarLibMerging OpenType Layout tables Traceback most recent call last File Usersadambinbuildflvivfcommand line in module buildvariablefontdesignspacepath File Usersadambinbuildflvivfcommand line in buildvariablefont font model masterttfs varLibbuilddesignspacepath finder File UsersadamLibraryPython libpythonsitepackagesfontToolsvarLibinitpy line in build addCFF vf model masterfonts File UsersadamLibraryPython libpythonsitepackagesfontToolsvarLibinitpy line in addCFF mergeregionfontsvarFont model orderedfontslist glyphOrder File UsersadamLibraryPython libpythonsitepackagesfontToolsvarLibcffpy line in mergeregionfonts cvData mergecharstringsglyphOrder nummasters topdicts model File UsersadamLibraryPython libpythonsitepackagesfontToolsvarLibcffpy line in mergecharstrings addnewvsindexmodel key masterSupports vsindexdict UnboundLocalError local variable model referenced before assignment My code python usrbinenv python coding utf from future import unicodeliterals printfunction import os ospath sys import logging from fontTools import varLib designspaceLib loggingbasicConfiglevelloggingINFO def buildvariablefontdesignspacepath basedir ospathdirnamedesignspacepath ds designspaceLibDesignSpaceDocument dsreaddesignspacepath printhelpds ufopaths ospathjoinbasedir mfilename for m in dssources ufodir ospathdirnameufopaths vfdir ospathjoinbasedir masterttfinterpolatable vfext ttf if not ospathexistsvfdir vfdir ospathjoinbasedir masterotfinterpolatable vfext otf vfpath ospathsplitextdesignspacepath VF vfext finder lambda s sreplaceufodir vfdirreplaceufo vfext font model masterttfs varLibbuilddesignspacepath finder fontsavevfpath if lensysargv designspacepath sysargv else designspacepath rawinputPlease enter the path to the designspace file or dragdrop it from Finder and press Enterlstriprstripreplace replace buildvariablefontdesignspacepath As discussed in this PR adds support for readingwriting a new formatVersionMinor element in metainfoplist as well as a formatMinor attribute to the glyph element of the GLIF data structure The idea is to be able to add new data to the UFO spec without breaking existing implementations which should be able to ignore this new data I marked this as WIP as I still need to add tests but Id like to gather initial comments When reading axis designspaces in axis or in location in sources and instances the designspace always returns the name of the axis but libraries sometimes ask the axis tag like for extracting a static instance so you always had to store tag and name in a dict and read the dict to run function Sometimes its confusing Also when you give weight instead of wght to the extractInstance function it doesnt warn you the weight is not a existing tag or that you gave a name and not a tag See The requirements for duplicate substitutions could be relaxed a little to be more compatible with makeotf and existing font source data