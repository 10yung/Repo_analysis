Hey I use the latest version of reactnative expo and expoinapppurchases Package expoinapppurchases is used for autorenewable subscriptions On any Android devices and any countries everything works well as aspected On iOS devices sometimes works sometimes not If a user comes in from the US the connection via the connectAsync method never ends There is neither error nor success It feels like the application is running in an emulator but it is not If you are logged in from the same iPhone but from another country eg Ukraine everything works well as aspected Who knows what may be the problem Does it look like a bug Any suggestion Bug Report Environment Expo CLI environment info System OS macOS Shell binzsh Binaries Node nvmversionsnodev binnode Yarn nvmversionsnodev binyarn npm nvmversionsnodev binnpm Watchman usrlocalbinwatchman IDEs Android Studio AI Xcode B usrbinxcodebuild npmPackages expo react reactnative reactnavigation npmGlobalPackages expocli Im testing on an iOS device Steps to Reproduce My phone region is Brazil Call getProductsAsync Expected Behavior The returned subscription price should be R Actual Behavior The returned subscription price is R Should be able to press to focus search Why Expo CLI automatically resolves this field since October Not sure how long we want to wait before deprecating the field Test Plan expo start should work for all platforms in all examples Why Other one wasnt square transparent or centeraligned We should also host this somewhere with a short url for snacks How reduced image size with imagemin pluginpngquantquality splashpng splashpng rerun npx expooptimze in each modified example Why Next exponotifications feature How NotificationsHandlerModule registers at singleton for new notificationsmessages for each message it starts up a task which emits an event to JS in response to the JS event delegate responds with the appropriate behavior eg shouldShowAlert true the behavior is pushed to native side using NotificationsHandlerhandleNotificationAsync call which directs it to the appropriate task task handles the behavior on iOS calls completionHandler on Android it will show the notification once implemented and finishes if for whatever reason delegate didnt respond in seconds onTimeout is called on task which emits another event to JS for debugging purposes and the task finishes excalidraw Test Plan Tested manually by sending notifications and logging messages that the scheme works both when the delegate responds and when it does not Expo Docs Now I dont know what side is right or wrong here but the docs specify a maximumAge parameter for LocationgetCurrentPositionAsync which is not available in typescript At the same time there is a timeout option in the ts definition of LocationOptions but not in the docs Why Part of How Refactored JS code responsible for rendering DevMenu and converted it to TypeScript Redesigned DevMenu to be a bottom sheet instead of a modal to improve user experience Upgraded reactnavigationstack to Inout DevMenu animations are now controlled by JavaScript side Moved Kernels module methods related to DevMenu to separate DevMenuModule file I think it makes the code using it clearer Nux wasnt clear to me what it is and what it does so I suggest renaming it to Onboarding Prepared some stuff to be used on Android as well Android support will come in a separate PR To do Remove legacy twofinger gesture Test Plan x Test on experience in debug mode Test on experience in production mode x Test on snacks x Test on older SDKs Test on simulators Demo ezgif comresize Why uuidjs is very old and it not really necessary for the generation of a simple UUID How The UUID generation comes from which is linked by for the smallest possible UUID generation Test Plan Use createDownloadReusable in any form Why fixes several imports in example code which no longer worked renames GoogleServiceinfoplist GoogleServiceInfoplist update ios workflow to use GoogleServiceInfo plist by default How Tested examples in testapp Test Plan on iOS add GoogleServiceInfoplist to appjson omit clientId from initAsync method on iOS signin should still work 