We should try to add more control over the way genetic programming creates individuals in the untyped case For example if we are using DEAP to evolve functions from RR and the primitives provided are binary operators and unary operators then a lot of the individuals generated may end up of a form that is essentially useless For example we may have an individual of the form squaresubractxx which is equivalent to the zero function Binary operators such as the subtract operator should not be considered for the tree level right before the terminals in this case My suggestion is to add an optional parameter to each primitive that specifies the levels for which it should be considered I would also be willing to help out with this if the idea seems interesting The function isDominated in emopy reads def isDominatedwvalues wvalues Returns whether or not wvalues dominates wvalues param wvalues The weighted fitness values that would be dominated param wvalues The weighted fitness values of the dominant returns objTrue if wvalues dominates wvalues objFalse otherwise Right now three first lines of the docstring are contradictory Shouldnt it be Returns whether or not wvalues dominates wvalues This fixes by appending the second child to offspring and controlling offspring length In my use case it also increases speed for big populations quite a bit In the crossover section of this code is there any reason to discard the second result of the crossover operation ind instead of appending it to the offspring list Depending on the crossover probability this gives quite a good speedup in my case Has the fast C version of the artificial ant simulator code ever been deployed It is sitting there and I was hoping to use it as I find that the copydeepcopy calls within the artificial ant eat a lot of computing time I am referring to deapexamplesgpantbuildAntSimFastpy Not sure if this is a bug or not I find that the lines python elif indfitness hoferfitness and selfsimilarind hofer hastwin True break cause an error something like type int not callable but replacing lines with a set comparison seems fine python elif indfitness hoferfitness if setind in sethofer hastwin True break In Line of PSO the abs function seems to be used wrongly as presented below Python if absspeed partsmin partspeed i mathcopysignpartsmin speed elif absspeed partsmax partspeed i mathcopysignpartsmax speed When partsmin is set to a negative value eg Line never be executed In other worlds the lower bound checking of speed is not run To fix it maybe delete the abs function And also do not need to use the mathcopysign function This fixes Sorry to interrupt Im debugging nsga multitarget evolution I need to get parameters to weight and remove some unimportant parameters but I found that the nsga output is linear not obviously distinguish between importance how to get nonlinear weight output Thank you I am using DEAP for a multiobjective problem and Ive been noticing the Pareto Front contains repeated individuals Is this expected behavior I remember reading the default similarity check for ParetoFront is operatoreq so it shouldnt be allowing identical individuals right Im using hof toolsParetoFront To define it Thanks in advance for any help