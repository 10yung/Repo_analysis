We have our application deployed in Kubernetes with Nginx When we use just a single replica pod the socketio client establishes connection and receives data But when we add multiple pods with load balancing the socketio client tries to connect and then disconnects quickly with xhr error T Z ERROR local server on TEST Connection error Error xhr poll error at XHRTransportonError C Users TEST Desktop Projects brokerclient nodemodules engineioclient lib transportjs at Requestanonymous C Users TEST Desktop Projects brokerclient nodemodules engineioclient lib transports pollingxhrjs at RequestEmitteremit C Users TEST Desktop Projects brokerclient nodemodules componentemitter indexjs at RequestonError C Users TEST Desktop Projects brokerclient nodemodules engineioclient lib transports pollingxhrjs at TimeoutonTimeout C Users TEST Desktop Projects brokerclient nodemodules engineioclient lib transports pollingxhrjs The kind of change this PR does introduce a bug fix a new feature x an update to the documentation a code change that improves performance other Current behaviour has passed now is license year need to update New behaviour Update license year Other information eg related issues Slack link is now working How do I get a users online status How to get whether a message is sent successfully You want to x report a bug request a feature Current behaviour When using a middleware and closing the server during a connection event the server does not close immediately The close event is emitted but the nodejs process exits only after a timeout of a few minutes This behavior only appear when both conditions are set a middleware has been set using socketuse the server is closed during a connection event or shortly after During my tests using serverclose on a setTimeout of ms triggers the bug but a setTimeout of ms does not Steps to reproduce Running the following scripts at the same time serverjs then clientjs clientjs js let WsClient requiresocketioclientManager let client new WsClient autoConnect false clientonclose consolelogclient event close clientconnecterr if err consolelogerror err processexit consolelogclient has been connected clientclose serverjs js let server requiresocketio serverusesocket next next serveronconnection consolelogserver event connection serveronclose consolelogserver event close serverlisten consolelogWait for connection serveronceconnection consolelogclient has been connected consolelogwill close server now serverclose consolelogserver closed The serverjs result is Wait for connection server event connection client has been connected will close server now server closed Then the script wait a few minutes before exiting Expected behaviour NodeJs should exit instantly after the server closed message Setup OS Linux NodeJs v Socketio Socketioclient It should be easier to learn the whole structure of the project a error like this You want to x report a bug Current behaviour The socket is connecting And does not reproduce events And to be more precise it only reproduces the trip event What is actually happening I expect logging when connecting But the socket just plugs in And after that it does not go about other events at all Steps to reproduce if the current behaviour is a bug I am ready to throw the code Or you can copy my repository To make sure his ability is not working Expected behaviour I expect socketon events to be visible to the server Setup Ubuntu chrome last version socketio version socketioclient socketio Other information eg stacktraces related issues suggestions how to fix If you ask I can throw stacktraces Note for support questions please use one of these channels stackoverflow or slack For bug reports and feature requests for the Swift client please open an issue there For bug reports and feature requests for the Java client please open an issue there You want to x report a bug request a feature Current behaviour What is actually happening Steps to reproduce if the current behaviour is a bug Note the best way and by that we mean the only way to get a quick answer is to provide a failing test case by forking the following fiddle Expected behaviour What is expected Setup OS browser socketio version Other information eg stacktraces related issues suggestions how to fix how to handshake through a gateway there is a way to do I have a problem between Serversocketio Gateway frontend how to handshake socketio server through gateway My Gateway const http requirehttp const express requireexpress const httpProxy requireexpresshttpproxy const app express const cookieParser requirecookieparser const logger requiremorgan const helmet requirehelmet const socketServiceProxy httpProxy appuseloggerdev appusehelmet appuseexpressjson appuseexpressurlencoded extended false appusecookieParser appusefunctionrequest response next responseheaderAccessControlAllowOrigin responseheaderAccessControlAllowOrigin responseheaderAccessControlAllowCredentials true responseheaderAccessControlAllowHeaders Origin XRequestedWith ContentType Accept next appoptionssocket req res next socketServiceProxyreq res next const server httpcreateServerapp const port serverlistenport consolelog APIGATEWAYNodeJS Server started on port port My front const socket socketIOClient transports pollingxhr websocket query socketId personId My Backend 