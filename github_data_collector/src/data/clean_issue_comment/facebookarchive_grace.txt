 after graceNetStartProcess process may exec some cmd Carrying env variable LISTENFDS are unnecessary In my process the cmd is start another grace net process which cause error ERROR error inheriting socket fd file filetnet listener getsockopt socket operation on nonsocket I am a bot Please reach out to azillion if you have any issues or just close the PR An example unix socket server The punch line is golang server httpServer Handler httpFileServerhttpDirroot unixListener err netListenunix osArgs if err nil panicerr serverServeunixListener I tried this here and sadly our types dont match nethttps interface From func srv Server Servel netListener error However here were asking for func Serveservers httpServer and then we hardcode tcp l err anetListentcp sAddr here in listen It seems like we should match nethttp here and take a which would allow us to grab so we can open tcpudpunix as appropriate I could be missing something but I didnt see anything too TCP specific in the forkexecinherit code My use case is that I want to front multiple versions of the same service with nginx and I dont want to play games with ports While that particular case is admittedly a little wacky fronting a service with nginx or the like isnt too unreasonable say for handling auth somewhere else At the StartProcess function while Listener s File is called this will puts the Listener fd into blocking mode This should lead to Accept cant return even if ListenerClose is called Listener File fd netFD dup Golang func fd netFD dup f osFile err error ns err dupCloseOnExecfdpfdSysfd if err nil return nil err We want blocking mode for the new fd hence the double negative This also puts the old fd into blocking mode meaning that IO will block the thread instead of letting us use the epoll server Everything will still work just with more threads if err fdpfdSetBlocking err nil return nil osNewSyscallErrorsetnonblock err return osNewFileuintptrns fdname nil So User either use Shutdown to close socket or use syscallSetNonblock to put the Listener fd into the nonblock Uses golangorgxnetnetutilLimitListener to wrap the grace Listener This PR implements a Win fall back version of Serve function to fix This change will make the package buildable on Windows though graceful restarts shutdowns will not be supported on it Changelog gracehttp httpgo and httptestgo are moved asis to the nixgo and nixtestgo build windows tags are added to both and to the testbintestgo pprintAddr and modification of applisten are moved from from the nixgo to the httpgo where they can be reused between nix and fallback versions of serve serveFallback is implemented in the httpgo and covered by tests httptestgo It doesnt have a build windows tag to make testing of the function on other platforms possible wingo with build windows tag and Serve function wrapper around the serveFallback are added to be used on Windows gracedemo gracehttpServe call is wrapped by logFatal to show the errors if any occur If this is not the approach youd like to take feel free to close the PR Running a go get githubcomfacebookgogracegracehttp gives me githubcomfacebookgogracegracehttp c gobits src githubcom facebookgo grace gracehttp httpgo undefined syscallSIGUSR c gobits src githubcom facebookgo grace gracehttp httpgo undefined syscallSIGUSR c gobits src githubcom facebookgo grace gracehttp httpgo undefined syscallKill Add the close interface for listener and check the closed while restart 