Ive rebased the hcjpbridgemodule branch onto master from last weekish and now in this PR Ive make some changes to make the pallet compile The two main things are using the new declerror changes introduced by Basti and updating dependencies to use their versions This slightly refactors how client processes forkblocksbadblocks internally and also puts those under tests Some fixes after This removes the unwanted expects from MultiSigner Instead we convert from full to compressed in TryFrom and can return an error on invalid input This PR removes the NetworkSpecialization from the network service NetworkSpecialization was an early attempt at customizing the nodes network behavior for Polkadot but there are now better APIs for doing so registernotificationsprotocol At the moment this PR introduces network backwardsincompatibility This can be fixed at which point the breakseverything label will be removed I will do this in separate PRs Polkadot begin to ignore the chainstatus parameter Substrate begin to ignore the chainstatus in the handshake when decoding and send a Vecu no matter what A few releases down the road remove the chainstatus member from the handshake Breaking API Changes The service API is no longer the same The constructsimpleprotocol macro withnetworkprotocol function have been removed Invocations of the macro and function should be deleted without loss of functionality except when NetworkSpecialization was nonempty then you need to port to the registernotificationsprotocol For substraTEE to be able to run as a parachain well need to be able to verify certificates of the Intel attestation service within a runtime call Right now we do that with custom hostcalls This is not allowed for parachains because relaychain validators just know the wasm runtime not the custom host calls The following primitives would be needed for substraTEE maybe we could settle on a smaller set but thats what substraTEE supports right now static SUPPORTEDSIGALGS SignatureAlgorithms webpkiECDSAP SHA webpkiECDSAP SHA webpkiECDSAP SHA webpkiECDSAP SHA webpkiRSAPSS SHA LEGACYKEY webpkiRSAPSS SHA LEGACYKEY webpkiRSAPSS SHA LEGACYKEY webpkiRSAPKCS SHA webpkiRSAPKCS SHA webpkiRSAPKCS SHA webpkiRSAPKCS SHA Moreover wed need base decoding Our minimum requirement is the actual Intel certificate which has these properties hashAlgo sha WithRSAEncryption keyType bit RSA This would fix the main obstacles in Original comment about the source of the issue In this particular case we want to add text in the description that shows how to use the command line to pass parameters to the relay chain and the para chain To do that it would be best if we know the name of the executable Unfortunately Version takes static str so it is not possible to format at runtime cc bkchr The trait Time is supposed to give the current time for the current block however there is no other way to set this time than using an inherent Thus we can precise in which context we expect the value to be correct Maybe in some context like offchain worker this trait could be implemented differently but then I would suggest providing a different trait LockableCurrency trait provides setextendremove locks api but no methods to do locks query In our case of working on a vesting module it is needed to ensure while adding a new vesting schedule the account has no locks or only has locks with vestinglockidentifier It would be great if LockableCurrency trait added methods to query existing locks Addresses some of This PR tries to improve several issues in the consensus engines Currently if users pass on an incompatible BlockImport with a Verifier consensus will silently fail Because Verifier does not assume parents it is not always possible for it to return the correct fork choice rule but currently it is forced to do so Methods to pipeline data downwards from Verifier to all subsequent BlockImports is not obvious In this PR Changed ForkChoiceStrategy to be Option If None it indicates that the BlockImport or Verifier cannot currently make a decision on the fork choice rule Subsequent BlockImport should properly modify the value If the value is passed all the way down to the bottom BlockImport then the block will not be imported Added intermediates in BlockImportParams This indicates values that should be processed by subsequent BlockImports If a value in intermediates is not processed the block import fails As an example usage of this in PoW engine Verifier uses intermediates to pass the calculated difficulty if available and the full block hash down to BlockImport who will then use them to calculate the block auxiliary Updated PoW engine to have proper separation of BlockImport and Verifier Closes 