 General contribution criteria Please have a look at our contribution guidelines Particularly the sections about the DCO contribution workflow and how to get your fix accepted To help the maintainers out when theyre writing release notes please try to include a sentence or two here describing your change for end users See the CHANGELOGmd file in the toplevel directory for examples Particularly for groundbreaking changes and new features its important to make users and developers aware of whats changing and where those changes were documented or discussed Even for smaller changes its useful to see things documented as well as it gives everybody a chance to see at a glance whats coming up in the next release It makes the life of the project maintainer a lot easier as well The following short checklist can be used to make sure your PR is of good quality and can be merged easily if it resolves an issue is a reference ie to this issue included if it introduces a new functionality or configuration flag did you document this in the references or guides optional but much appreciated do you think many users would profit from a dedicated setting for this functionality in the Helm chart Hi Just a small change that I stumbled upon when attempting to build flux from source to work one some features and I kept getting the following error when running make Running macOS Catalina dockerimagetag line syntax error near unexpected token mkdir p builddockerflux cp dockerDockerfileflux buildfluxd buildkubectl buildsops buildkustomize dockersshconfig dockerkubeconfig dockerknownhostssh builddockerflux sudo docker build t dockeriofluxcdflux t dockeriofluxcdflux buildarg VCSREFa edbc f a ff e da e ac e a buildarg BUILDDATE T Z f builddockerfluxDockerfileflux builddockerflux invalid argument dockeriofluxcdflux for t tag flag invalid reference format I took a the file and replaced the line on with the follow and the build works perfect after the fix is applied make mkdir p builddockerflux cp dockerDockerfileflux buildfluxd buildkubectl buildsops buildkustomize dockersshconfig dockerkubeconfig dockerknownhostssh builddockerflux sudo docker build t dockeriofluxcdflux t dockeriofluxcdfluximagetagfixa edbc wip buildarg VCSREFa edbc f a ff e da e ac e a buildarg BUILDDATE T Z f builddockerfluxDockerfileflux builddockerflux Docs at I ve deleted a HelmRelease file from Git Why is the Helm release still running on my cluster Point to Which claims fixed Docs should be updated to be correct Hey there As discussed on Slack I would like to override the default readiness probe for Flux deployment To do so I suggest we make probes configurable through the chart Describe the feature Today flux applies the manifest in the order according to Namespaces have the highest priority and are first applied during a sync However OpenShift has a higher level definition of a namespace called a Project This means that OpenShift users do not have a Namespace manifest defined in their git repos but instead a Project manifest It would be great if Flux could take this into account in some way preferably without adding openshift specific code into the codebase What would the new user story look like A possible solution could be to add a command line argument that defines the sort order of a given kind Maybe something like this A user starts up Flux with the kindsortorderproject New commits in git branch happen projectopenshiftioProject manifests are applied as the first kind during the next sync Expected behavior I expect that the defined kind from the command line argument are applied to the cluster in the order that I have specified Describe the bug When deciding what files to pass to kubectl flux ignores json files in its target repositorybranchpath To Reproduce Set up a cluster with flux Add a valid namespace manifest file such as the one below to the target git repobranchpath and name it json json apiVersion v kind Namespace metadata namespace testnamespace Expected behavior Flux should pick up this file and apply it to the cluster under management What actually happens Flux notices that the git repo has changed and reruns kubectl but omits the JSON file from the things it passes to kubectls stdin Additional notes yaml yml and json files are all accepted by kubectl and flux should mirror this behaviour All tests until now run without using the registry scanner so I thought it was about time to have an endtoend test for image releases which is a fundamental Flux feature We probably shouldnt depend on external registries particularly on stefanprodanpodinfo since it is often updated for tests I plan to add an internal registry to the tests but that will come later If this test becomes too flakey I am happy to disable it until then Addresses part of adds a test covering fluxctl release TODO x Test automatic image releases x Test HelmRelease image updates Describe the feature In my organization were not storing sensitive tokens inside K s secrets but instead using Vault for storing it and inject the secret directly into the pod What would the new user story look like Users who already runs Bank Vaults or Vault would like to pass the tokens as the environment variables For example this project This solution is tested and working with other projects such as certmanager and externalDNS Expected behavior Assuming users have an existing Vault server running they will provide the following changes in the deployment yaml annotations vaultsecuritybanzaicloudiovaultaddr vaultsecuritybanzaicloudiovaulttlssecret vaulttls vaultsecuritybanzaicloudiovaultrole default extraEnvs name GITAUTHUSER value vaultsecretdataaccountsfluxGITAUTHUSER name GITAUTHKEY value vaultsecretdataaccountsfluxGITAUTHUSER Those annotations will use Kubernetes Auth into Vault and will store the values as environment variables which later will be used by giturl instead of storing the token inside K s Secret Current behavior Ive tested this implementation and those are my results so far When the extraEnvs are set as above and giturl is configured with GITAUTHUSERGITAUTHKEY it results with the following url in the logs url and the following error Authentication failed for full output n Cloning into bare repository tmpfluxgitclone nremote Invalid username or password nfatal Authentication failed for When the extraEnvs are set as above and giturl is configured with GITAUTHUSERGITAUTHKEY it results with the following url urlsshhttps GITAUTHUSER GITAUTHKEY githubcommyrepotempchartsgit and the following error errgit repo not ready git clone mirror fatal unable to access URL using badillegal format or missing URL This adds the ability to set your own upstream service ie Fluxcloud or other when installing the helm chart Describe the bug A docker image repository that contains an empty tag ie myrepocomapp will fail to sync with the image repository with the following messages ts T Z callerimagesgo componentdaemon errfetching image metadata for repoazurecrioapp empty tag in fetched tags ts T Z callerwarminggo componentwarmer errempty tag in fetched tags tagsunsupported value type To Reproduce Steps to reproduce the behaviour Whats your setup Azure container registry Unsure as to how a image such as myrepocomapp ever got set but here we are flux Thu Jan DEPLOYED flux flux helmoperator Thu Jan DEPLOYED helmoperator rc flux Push image named as such to your repository myrepocomapp Setup HelmRelease like below yaml apiVersion helmfluxcdiov kind HelmRelease metadata name myapp namespace prod annotations fluxcdioautomated true filterfluxcdioapp globmaster tagfluxcdioapp imagetag repositoryfluxcdioapp imagerepository spec releaseName appprod targetNamespace prod timeout resetValues true forceUpgrade false chart git gitgithubcommyorgappgit path chartsapp ref master values image repository myrepocomapp tag latest Look at logs and see messages pasted above Expected behavior Image get updated on git commit Logs Relevant ones pasted above Additional context Add any other context about the problem here eg Kubernetes version Client Version versionInfoMajor Minor GitVersionv GitCommitc fe ef df d e c c e b GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformdarwinamd Server Version versionInfoMajor Minor GitVersionv GitCommitd ddbd faf a faf ffc GitTreeStateclean BuildDate T Z GoVersiongo Compilergc Platformlinuxamd Git provider github Container registry provider Azure Container Registry Describe the feature Actual there exist filter pattern types glob regexp and semver semver is documented to filter for Semantic Versioning but it isnt While semverorg describes a valid semver with the XYZ patter this implementation allows a lot more So for flux just an integer is seen as a semver Pls have a look at this regex I would call this a bug but as changing this behavior would break things I would go for another filter strictsemver To describe the actual failure that occured We build images with chars git sha as tag It happens that this chars is composed of only digits integer We also build images with a valid semver Releases This integer is detected as a semver and deployed Deployments stuck on this tag as a digit integer is the valid semver releases What would the new user story look like Use strictsemver as tag filter Only valid Semantic Versions are filtered Expected behavior Because a changefix of this behavior would break things for others I would like to have a filter like strictsemver strictsemver should filter only valid Semantic Versions 