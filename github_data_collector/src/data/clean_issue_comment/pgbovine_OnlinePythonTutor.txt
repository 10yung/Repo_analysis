As you can see most obviously in this example rIdx is actually showing tmpResults Everything seems to be one off Also having let declarations be displayed as block and so on is incredibly annoying why not just have the memory space name Screen Shot at AM in my code using C i use a nested structure that is personname struct personname char first FIRSTNAMELEN char middleinitial char last LASTNAMELEN and a student structure data type which include personname structure data type after that i declare two variable student and student with a student data type struct student struct personname name int idage char sex student student in my following program i modify student memcpystudent namefirstFredsizeofFred student namemiddleinitial C strcpystudent namelastYay displaynamestudent name i only modify one of two variable ie student but in pythontutor both of them having the same value img width altAnnotation src from a user bug report index shows as in python tutor but prints as in consolelog similar to Want to do some translation to Chinese on the instance webpage can you advise the code structure in a bit detail Thanks by the way for such a brilliant contribution online Variables declared with let that are not declared globally have all this issue Example instead of having the result variable there is n block AA D E D CF A E DCECF A I often suggest this tool to newbies but a thing like this is greatly confusing See example It would be nice if there was information that there is another variable x local to function f before it gets assigned Reason why it would demonstrate what the problem is in the classic error UnboundLocalError local variable uhel referenced before assignment from server error logs some work in javascript dont have energy to minimizedebug h Attentionh pVotre abonnement va prochainement se terminer Il ne vous reste que joursAbonnement jours p const checker functioninput const reverse functionstr return strsplitreversejoin const validator str iscor str reversetcer str isth validateattempt return attempt validatorstr validatorstr validatorstr return validatorvalidateinput const x function p return m function m try return x finally consoleloghi const z p m m function Devsnameage job thisname name thisage age thisjob job thispresentation functionstyle timeOfDay ifstyle formal consolelogGood timeOfDay Ladies and Gentlemen I am thisname and I do thisjob for a living else ifstyle casual consolelogWhats up guys timeOfDay You know meI am thisname and I do thisjob for a living else consolelogHi there timeOfDay Ladies and Gentlemen Devsprototypeorg LinkedIn Devsprototypepresentation functionstyle timeOfDay ifstyle formal consolelogGood timeOfDay Ladies and Gentlemen I am thisname and I do thisjob for a living else ifstyle casual consolelogWhats up guys timeOfDay You know meI am thisname and I do thisjob for a living else consolelogHi there timeOfDay Ladies and Gentlemen let John new DevsJohn Architect let Emily new DevsEmily UXDesigner consolelogJohnpresentation Emilypresentation Emilypresentation function JohnpresentationcasualMorning EmilypresentationformalEvening consolelogEmilyorg consolelogJohnorg function padLeftvalue string padding any if typeof padding number return Arraypadding join value if typeof padding string return padding value throw new ErrorExpected string or number got padding its unfortunate that the python break statement happens to be similar to the break special comment that i use to mark python backend breakpoints so when that line is commentedout a weird NullTrace error happens even though the program is fine offending line break def insertorderedxsv result None if lenxs xsappendv break for i in rangelenxs if lenxs and v lenxs xsappendv break if lenxs and v xs i xsinsertiv printxs result None else if xs i v and v xs i xsinsertiv break elif maxxs v xsappendv break printxs return result printinsertordered ideally OPT should generate a partial trace so that something can be visualized y x printx while y xxx printx 