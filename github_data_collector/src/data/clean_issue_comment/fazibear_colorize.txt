 Most modern terminals support true color with full RGB values COLORTERM truecolor I made an app that colorcodes different programming languages and when I started running out of Colorizes colors I looked around and discovered that there was a surprisingly simple way to colorize text and backgroundsee below Stringcolortext and Stringcolorbg Then I discovered that there are a few basic terminals that dont have COLORTERM truecolor so I made my code which had used Colorize backwardscompatible with Colorize I wrote my own Stringcolorize method And then I decided to make that method work regardless of whether a console had COLORTERM true or not See below If Colorize incorporated this more advanced colorization that would be awesome Any interest module ColorizeInstanceMethods alias oldcolorize colorize end class String def colortextr g b rgbmself u b m end def colorbgr g b rgbmself u b m end Takes symbol with English color name returns colored string Examples foocolorizered returns red string foocolorizebackground blue returns blue background string def colorizecolor if ENV COLORTERM colorclass Symbol selfcolortextRGBCODES color selfcolorbgRGBCODES color background else if colorclass Symbol color COLORMAPPERhaskeycolor COLORMAPPER color color selfoldcolorizecolor else color background COLORMAPPERhaskeycolor background COLORMAPPER color background color background selfoldcolorizecolor end end end RGBCODES Original Colorize gem colors for backwardscompatibility black red green yellow blue magenta cyan white lightblack lightred lightgreen lightyellow lightblue lightmagenta lightcyan lightwhite New colors freespeechred Ruby festival JavaScript denim CSS tahitigold HTML chateaugreen Bash malibu SQLPSQL echoblue C medaquamarine C carrotorange Java saffron Python brown Rust Mapping new color names to old names for use by Colorize gem COLORMAPPER freespeechred red Ruby festival lightyellow JavaScript denim blue CSS tahitigold lightred HTML chateaugreen white Bash malibu cyan SQLPSQL echoblue lightblue C medaquamarine blue C carrotorange magenta Java saffron yellow Python brown red Rust end Id like an option to rainbowize strings Thanks any chance we can get a git tag for the latest release that is put on rubygems Would appreciate it Added example of mode usage One interpretation of GPL has made it so that I am discouraged from using this gem The Apache and MIT licenses encourage using libraries with less copyleft implications Any chance of shifting By convention I am used to colorized applications suppressing colorization when sending the output to a pipe unless I explicitly force colorization For example in colorsjs js if processstdout processstdoutisTTY return false Writing an app using colorize I was surprised that colors were not suppressed when doing app filetxt or app cat The color codes can cause problems in later processing stages I then turned colorization off for nonTTY output with ruby Stringdisablecolorizationtrue unless STDOUTisatty Id like to propose that be the default behavior with a way to force colors by choice in all cases For example Error Code errorcolorizerredcolorizeryellow I would want the code to still be red with the rest of the text being yellow In ANSIBash not wrapping color escapes with causes line wrap issues due to the prompter not calculating the line length correctly In readline while doesnt work and work See this StackOverflow answer for an explanation of the issue 