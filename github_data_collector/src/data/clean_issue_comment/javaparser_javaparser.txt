 x Fixes Documentation as to when to use toNumber and deprecate toInt Write a validatorcheck to produce a parse error in case is used without an unary expression I have a simple class where I want to resolve MethodCallExpr java public class MyClass private Ibaz msomething public interface Ibaz public void fooClass extends Ibaz clazz protected void bar foonull this works foomsomethinggetClass this doesnt work In MethodResolutionLogicfindMostApplicable the methods with matching name seems to be correct nevertheless it fails to find a matching method ListResolvedMethodDeclaration methodsWithMatchingName JavaParserMethodDeclarationwrappedNodepublic void fooClass extends Ibaz clazz typeSolvercomgithubjavaparsersymbolsolverresolutiontypesolversCombinedTypeSolver d dc In my above example the first call on foonull with a null parameter works whereas the second call passing the class of msomething does not We have been running into an issue while parsing the expression According to the Java Spec the largest number a decimal literal can be is but only in combination with the unary expression since it then represents the lowest number in Java Larger numbers or the use of it without the unary expression is considered a compile error JavaParser will correctly deduce that is a unary expression containing a literal However by calling asInt on the IntegerLiteralExpr it will correctly produce a NumberFormatExpression since it cannot represent the value of the literal in a Java int However the combination itself is a valid Java construct which we cannot correctly parse without an exception Quick fix would probably be to return the literal as a long not sure if this would introduce other problems It seems that in the statement bellow the comment is not setted to the correct node a comment before parent if file null is parsed to if a comment before parent file null It seems that CommentsInserterinsertComments postprocessor run on child nodes but in this case it should take into account the node itself What do you think about this Resolving a TypeParameter from ClassOrInterfaceType fails with javalangUnsupportedOperationException How to reproduce TypeSolver solver new ReflectionTypeSolver ParserConfiguration parserConfiguration new ParserConfiguration parserConfigurationsetSymbolResolvernew JavaSymbolSolversolver JavaParser parser new JavaParserparserConfiguration ParseResultCompilationUnit cu parserparseclass AT T t cuifSuccessful c cacceptnew VoidVisitorAdapterVoid Override public void visitClassOrInterfaceType n Void arg supervisitn arg nresolve null Expected nresolve returns with ResolvedTypeVariable Result nresolve throws an exception Steps to reproduce java CompilationUnit u StaticJavaParserparseComment package a class A SystemoutprintlnugetComments Expected result A singleton list containing the comment that reads Comment Observed result An empty list I can get the comment with ugetComment I dont know if this is intended but I think its kind of ugly to have to call both getComment and getComments if I want to get ALL the comments in the compilation unit When parsing a Java source code the parser reports an error as follows Lexical error at line column Encountered u d Preprocessing of Unicode escapes does not help The file is attached javatxt Type resolution of the scope expression in a method call expression fails when the variable used as the scope of the method call is declared outside of the block where the method call is contained in The following code works with a simple JavaParserFacadegetnew ReflectionTypeSolvertruegetTypescope when trying to resolve the type of the a scope of the acrossb v method call expression for the following code java import javaxvecmathVector f class X void fooVector f a Vector f b Vector f v new Vector f vcrossa b However the actual code I am trying to do this on much more complex has an additional block around the method call like so java import javaxvecmathVector f class X void fooVector f a Vector f b Vector f v new Vector f vcrossa b In this case type resolution of the v variable in the method call expression scope fails with Exception in thread main UnsolvedSymbolExceptioncontextv nameSolving v causenull at comgithubjavaparsersymbolsolverjavaparsermodelTypeExtractorvisitTypeExtractorjava at comgithubjavaparsersymbolsolverjavaparsermodelTypeExtractorvisitTypeExtractorjava at comgithubjavaparserastexprNameExpracceptNameExprjava at comgithubjavaparsersymbolsolverjavaparsermodelJavaParserFacadegetTypeConcreteJavaParserFacadejava at comgithubjavaparsersymbolsolverjavaparsermodelJavaParserFacadegetTypeJavaParserFacadejava at comgithubjavaparsersymbolsolverjavaparsermodelJavaParserFacadegetTypeJavaParserFacadejava at Testlambda Testjava at javabasejavautilOptionalifPresentOptionaljava at Testlambda Testjava at javabasejavautilArrayListforEachArrayListjava at TestmainTestjava I have some information about Node position But I cant find any API to support this feature 