There were major changes in see history The changes on May th broken goworker package Added required parameter with default value default value as defined in struct to fix the issue This PR will fix an open issue interval will be overwrite by workerSettingsIntervalSetFloatworkerSettingsIntervalFloat in flaggo gosrcgithubcombenmannsgoworkerredisgo not enough arguments in call to poolsNewResourcePool In vitessiovitessgopools the NewResourcePool is defined as NewResourcePoolfactory Factory capacity maxCap int idleTimeout timeDuration prefillParallelism int ResourcePool Is missing the argument prefillParallelism in redisgo return poolsNewResourcePoolnewRedisFactoryuri capacity maxCapacity idleTimout or return poolsNewResourcePoolnewRedisFactoryuri capacity maxCapacity idleTimout It seems like vitessiovitessgopool has changed their function signature and it requires more arguments func newRedisPooluri string capacity int maxCapacity int idleTimout timeDuration poolsResourcePool return poolsNewResourcePoolnewRedisFactoryuri capacity maxCapacity idleTimout Above lines are source of this problem and must be changed to accept arguments as needed by NewResourcePoolfactory Factory capacity int maxCap int idleTimeout timeDuration prefillParallelism int ResourcePool This PR adds a new feature optional queue priorities Starting now queues priority could be defined meaning that jobs from a queue with higher priority will be pulled before jobs from a queue with lower priority How to define priorities go settings goworkerWorkerSettings URI redislocalhost Connections Queues stringmedpriority lowpriority highpriority QueuesPriority map string int highpriority medpriority lowpriority UseNumber true ExitOnComplete false Concurrency Namespace resque Interval goworkerSetSettingssettings Values Priorities could be defined from to the max int value Smaller values mean higher priority Zero is the highest priority Those queues with no defined priority will automatically get the highest priority zero How optional is this All the following scenarios are valid No priorities are defined All queues have priorities Some queues have priorities Compatibility This new feature does not introduce any compatibility issue with code bases using previous versions Other PRs This PR includes It will be great if it can support Resque scheduler or delayed job based on On May th a th parameter was added to function vitesspoolsNewResourcePool see the commit This function is invoked as part of newRedisPool and the goworker package doesnt work without this new parameter This PR adds as the th parameter meaning the pool wont be prefilled goredis support Redis Clusterredigo not support Redis Cluster It can happen that workers get stuck silently We were using noderesque worker before which handled this scenario very well With goworker jobs just keep shown as running in resqueweb Also the worker count in resqueweb keeps increasing should be img width altscreen shot at src Currently when goworker workers fail due to an uncaught error tracking down the root cause of the problem is rather difficult Only the contents of the error message itself is passed to the Resque failure queue unlike other languages eg Ruby which pass the entire stack trace Golangs errors do not support stack traces out of the box The goerrors githubcomgoerrorserrors package makes it possible to attach stack trace information to the errors either at creationtime or at wrappingtime This pull request takes advantage of the idempotency of goerrorss Wrap function allowing a worker to either raise a goerrors error object themselves or automatically wrapping a standard Golang error when the failure is observed by goworker A worker that throws a standard error will see the same information currently provided to the failure queue with a stack trace pointing them to goworkerworkergo as the investigation point A worker that wraps their standard error with goerrors will see that same information plus a full stack trace to the point that the user instantiatedwrapped the goerrors error object