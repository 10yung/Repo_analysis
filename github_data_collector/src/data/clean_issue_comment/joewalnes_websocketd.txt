This project uses websockets through websocketd to transmit live gamepad events from a device androidonly client for the time being to a LinuxWindows machine which then will report them to the system using the appropriate driver with the help of a C program fed by websocketd The result of this is a nice gamepad emulation which seems to perform pretty well through websockets even with the analog controls and easily supports multiple simultaneous clients thanks to websocketds architecture Note The emulation should be done only on local area networks to achieve good emulation results I like to use websocketd as an inetd or CGI to launch a process and work as a conduit between client and server the backend process not websocketd what is the high level outline of what I need to do Is websocketd multiuser ie does it allow multiple clients to connect and conduct business What kind of client information is passed from websocketd to execed program A use case is where backend process prints logs which I want to convey to client Given WebSocket notion of messaging or frames is there any IO buffering that I should be concern about A use case is where backend process ask a question from the user on stout and stdin again related to IO buffering is there any foreseeable issue related to such interactive scenarios Imagine I was trying to solve telnet and ssh with websocket Am I barking at the wrong tree and should just use ssh and be done Thanks PS in the old days we used Usenet but now it seems like SCM like Git is used for such Q As Is this how I should be asking questions from author of a software module websocketd nodejs scriptjs Wrong message Unable to locate specified COMMAND nodejs in OS path Correct usage websocketd port node xxxjs I would like to know how the server handles the data sent by the client thank you Is it possible to do a function of saving it to a local file Hi Im trying to publish a jshell with websocketd via a docker container When I execute docker run it openjdk jdkslim in a terminal i can use the jshell from the docker container When executing websocketd port docker run it openjdk jdkslim I get the error the input device is not a TTY When executing websocketd port docker run t openjdk jdkslim without interactive flag I get no error and can see in my browser console where Im connected to the websocket the default start output from a starting jshell Here the problem is that its not possible to send anything Actually its not that surprising because if docker run t openjdk jdkslim is executed in the terminal its also not possible to get output after typing ls How can I achieve to send commands to a docker bash via websocketd Something like websocketd port docker run it openjdk jdkslim websocketd port jshell does work Thank you for the help When using maxforks if the limit is reached websocketd will return HTTP This causes browsers to report unexpected code in handshake causing as the web API websocket closeerror event code But this is the same code that is returned if websocketd isnt running at all Is there anyway that websocketd could return something else which would cause the javascript websocket api to use another return code This way we would be able to make javascript code that differentiates between no connection to server and server fork limit from too many clients At the moment there is no way to do this Maybe this is this actually a poor implementation of the websockets by the webapi Its seems rather strange that they return code for anything that goes wrong during handshake and the exact same code if the server isnt even there and no connection at all is established When user connected to socket i add data to db I want delete this data when user is disconnected How detect when connection is closed When running websocketd on windows when a client disconnects I get ERROR SIGINT unsuccessful to pid not supported by windows and ERROR SIGTERM unsuccessful to pid not supported by windows and the command to execute is never terminated Obviously this is a big problem as instances of the command will just pile up Surely I am missing something here How do you get commands spawned for each client to be killed off I have a poor work around which is to have the client periodically send data to the command and the command programmed to terminate itself if it gets no stdin for a while But is there a better way