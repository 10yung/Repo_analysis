With this small patch its now possible to use the outline pass with animated meshes The only thing users have to add at app level is to set morphTargets or skinning to true for OutlinePassdepthMaterial and OutlinePassprepareMaskMaterial Thats of course still a manual effort but at least the more complicated shader enhancement is already done Correct the type signature of isPresenting Add getReferenceSpace which was missing Servez has an app version which some people find easier httpserver has been semiabandoned It has issued errors on windows for months and is using deprecated and discontinued libraries In response to seeing it wasnt working well for windows users and that the maintainers showed no interested in fixing it I created a commandline version of servez i saw it at but it seems to be deprecated Description of the problem I put a new version of my app online based on the development version r of Threejs I was previously using r However since the update I keep receiving an increasing amount of requests from users stating that WebGL is crashing and sometimes even freezing and crashing the entire system This is a hard one because I didnt experience it myself however when I received hundreds of messages on all my communication channels I could not ignore it I am using the material node system and the new pmrem generator for environment lighting I made them try the official examples for pmremnodes and materialsnodes and they have the same issues So it is not just related to my code The threejsorg twitter account made one of the user try this example and the result was similar From the feedback that I have it happens at least on both systems Windows and MacOs It doesnt seem to be related to any particular browser One of them posted the following logs EOelwhiWoAIOok and EOjgklX AAXQcY A MacOs user sent me a screenshot of his system The issue is completely freezing his system macos Dont know if it is related to this issue I will provide more information as I get them I may be able to find a pattern among the OSGPUs Threejs version x Dev x r Browser x All of them OS x Windows x macOS From This PR adds extensibility to GLTFLoader It adds puglin API and rewrites the existing extension handlers Im not sure if the API and implementation are good yet So opened as draft PR Feedback is very welcome Benefits Simplifying GLTFParser by separating extension handlers from core GLTFParser Easiness to add new or custom extension handlers without messing GLTFParser Easiness to reuse even custom extension handlers API javascript I call handler plugin so far class MyExtensionHandler constructor If extension is defined the handler is for an gltfDefextensions its called only for gltfDefextensions extension is defined If extension is empty strings or undefined the handler is for generic its called regardless of gltfDefextensions thisextension EXTfoo If onBeforeXXX method is defined it is called before parserloadXXX Currently only GLTF entire gltf def supports onBeforeXXX param GLTFdefinition def param parser GLTFParser return PromiseObject onBeforeXXX def parser override def return Promiseresolvedef If onXXX method is defined it is called in parserloadXXX to create an XXX instance on behalf of entire or part of parserloadXXX Currently only Texture Material Geometry and Node needed for existing extension handlers support onXXX We should support all XXX later param GLTFdefinition def param parser GLTFParser return PromiseObjectnull onXXX def parser var object new XXX set up object return Promiseresolveobject return null if you dont want to create instance because of certain reasons In such a case next plugin is called or GLTFParserloadXXX creates if no more plugins registered If onAfterXXX method is defined it is called after parserloadXXX In addition to XXX of all loadXXX Map for materialfooTextureextensions support onAfterXXX param Object object param GLTFdefinition def param parser GLTFParser return PromiseObject onAfterXXX object def parser override object properties or creating a new object return Promiseresolveobject const loader new GLTFLoader loaderregisterPluginnew MyExtensionHandler loaderload Live Demo Notes I implemented the existing extension handlers into GLTFLoaderjs and registered as default because a most of them are popular extensions and I want users to avoid import separated plugin files and b some of them for example Draco extension rely on some logics implemented in GLTFLoaderjs and I couldnt clearly separate Maybe sounds good to keep adding KHR extensions in GLTFLoaderjs and adding separated plugin files for other extensions into examplesjsmloadersgltfPlugins or somewhere if needed If this PR is too huge maybe I can break it up into some PRs For example one PR for one extension handler This PR includes the cleaned up change in thanks pailhead Maybe better to merge this PR after merging as respect to him if we decide to go with this change Update Regarding onXXX I implemented only Texture Material Geometry and Node in this draft PR for now because I first wanted to show the API and how the existing handlers can be rewritten Im thinking to add others in this or other PRs later Regarding onBeforeXXX I had a comment and Im not sure yet if we really need So I implemented only GLTF so far because I only see the request that they need before hook point for entire gltf Typically a single renderer is used to render not only the scene but for inset viewports for rendertargets for postprocessing etc In each case the rendered scene may or may not have a background Also there may be multiple scenes This can cause the scene background material to be recompiled every frame To replicate add a texture background in exampleswebglshadowmapviewerhtml I am thinking webGLBackground may have to be redesigned but this change in an improvement at least in the cases I have studied Fixes Fixes Switched to using the render targets viewport and scissor instead of the renderers so as not to affect state Also some minor cleanup Remove the need to create new TypedArray objects when using attributeupdateRange by using the bufferSubData WebGL API which removes the need for TypedArraysubarray See for diagnosis and details Tested and reduces GC frequency How feasible is it to adapt a multithread approach to this loader similar to how OBJLoader Parallel does it What would be involved I see that kaisalmen as mentioned something similar in previous issues but dont see anything recent