The following program samplego triggers a panic go package main import net var lookupHost netDefaultResolverLookupHost func main printlnlookupHost nil Expected result console go run samplego true Got console yaegi samplego samplego panic panic reflectSet value of type funccontextContext string string error is not assignable to type funcnetResolver contextContext string string error recovered panic reflectSet value of type funccontextContext string string error is not assignable to type funcnetResolver contextContext string string error goroutine running githubcomcontainousyaegiinterprunCfgfunc xc xc b homemarcgosrcgithubcomcontainousyaegiinterprungo x panic xc da xc e b usrlibgosrcruntimepanicgo x b reflectValueassignTo xdbf a x d xa xddc xb xc x x b x x usrlibgosrcreflectvaluego x reflectValueSet xc xc x xdbf a x d xa usrlibgosrcreflectvaluego xbd githubcomcontainousyaegiinterpassignfunc xc xc c homemarcgosrcgithubcomcontainousyaegiinterprungo x f githubcomcontainousyaegiinterprunCfg xc b xc homemarcgosrcgithubcomcontainousyaegiinterprungo x a githubcomcontainousyaegiinterpInterpreterrun xc a e xc x homemarcgosrcgithubcomcontainousyaegiinterprungo x githubcomcontainousyaegiinterpInterpreterEval xc a e xc e x e x e xc e x e x x homemarcgosrcgithubcomcontainousyaegiinterpinterpgo x ef mainmain homemarcgosrcgithubcomcontainousyaegicmdyaegiyaegigo x e The following program samplego triggers a panic go package main func main panicfail Eval will panic in the callstack of Eval EvalWithContext panics on a goroutine causing a crash Im unsure if this is a good thing or not golang package main import log func main logFatallnfail I wrote this toy example to illustrate my question when I run this I get an error from Yaegi incomplete type How do I fix this package main import githubcomcontainousyaegiinterp const src package foo func Bard mainData string return dMessage Foo type Data struct Message string func main d Data Message Kung i interpNewinterpOptions err iEvalsrc if err nil panicerr v err iEvalfooBar if err nil panicerr bar vInterfacefuncData string r bar d printlnr I get the followinf stack trace on the go playground panic incomplete type goroutine running githubcomcontainousyaegiinterpitypeframeType x ab x x x tmpgopath pkgmodgithubcomcontainousyaegiv interptypego x githubcomcontainousyaegiinterpscopeadd x e a x ab x a x tmpgopath pkgmodgithubcomcontainousyaegiv interpscopego x githubcomcontainousyaegiinterpInterpretercfgfunc x a x x x b tmpgopath pkgmodgithubcomcontainousyaegiv interpcfggo x githubcomcontainousyaegiinterpnodeWalk x a x be x bea x tmpgopath pkgmodgithubcomcontainousyaegiv interpinterpgo x githubcomcontainousyaegiinterpnodeWalk x a x be x bea x e d tmpgopath pkgmodgithubcomcontainousyaegiv interpinterpgo x githubcomcontainousyaegiinterpInterpretercfg x x a x e d x x x x x tmpgopath pkgmodgithubcomcontainousyaegiv interpcfggo x githubcomcontainousyaegiinterpInterpreterEval x x ee x x x x bb x x x x bb tmpgopath pkgmodgithubcomcontainousyaegiv interpinterpgo x e mainmain tmpsandbox proggo xe Go Playground link The following program samplego triggers a panic go package main import githubcomcontainousyaegiinterp const src package foo func Bars string fn funcstringstring string return fns func main i interpNewinterpOptions err iEvalsrc if err nil panicerr v err iEvalfooBar if err nil panicerr bar vInterfacefuncstring funcstringstring string r barKung addS printlnr func addSs string string return s s See Expected result Kungs See Got panic reflectSet value of type funcstring string is not assignable to type interpnode goroutine running reflectValueassignTo x ad x d e x x e ea xb x d x x d x b x c c usrlocalgosrcreflectvaluego x reflectValueSet x d x c d x x ad x d e x usrlocalgosrcreflectvaluego xc githubcomcontainousyaegiinterpgenFunctionWrapperfunc x ee x x x ee x ee x a x x tmpgopath pkgmodgithubcomcontainousyaegiv interprungo x reflectcallReflect x ee x bf x bf c x usrlocalgosrcreflectvaluego x reflectmakeFuncStub x e d x x d e x x af a x ee x x x x ce usrlocalgosrcreflectasmamd p s x mainmain tmpsandbox proggo x If you do not respect this template your issue will be closed Make sure to browse the opened and closed issues before submit your issue Proposal Im a big fan of ipython ipython has syntax highlighting It looks like this ipython screenshot Would be cool if yaegi could support this as well although It hink that this will maybe crash when rlwrap is being used Background Colors are nice mhhhhkaaay Workarounds No current workaround The following program samplego outputs the wrong value go package main import fmt func main const huge const large huge fmtPrintlnint large Expected result console go run samplego Got console yaegi samplego It seems that untyped constants are truncated if they overflow int instead of being arbitrary precision see The following program samplego does not trigger any error go package main import fmt func Bar string return func main fmtPrintlnBar Expected result console go run samplego commandlinearguments samplego not enough arguments to return want string Got console yaegi samplego Empty output should trigger an error The following program samplego has wrong output go package main import fmt type Foo int func Foo String string return foo func printarg interface fmtPrintlnarg func main var arg Foo var f print farg Expected result console go run samplego foo Got console yaegi samplego It appears that fmtPrintln does not see that Foo declared in the interpreter implements fmtStringer and simply outputs the int value I met the same problem with my interpreter gomacro and I have no idea how to fix this except by cheating ie replacing fmtPrintln with an interpreteraware implementation Several months ago before my project switched over to Go modules I did an experimental integration of yaegi I used the interp package to instantiate a VM and run yaegi scripts In order to make some of my projects internal packages available I used goexports to generate symbol files eg goexports projectpkgbase This worked fine originally but having switched over to Go modules and Go I find that goexports no longer works properly Here is a slightly edited for clarity error message goexports projectpkgbase typechecking package projectpkgbase failed homejohngosrcprojectpkgbasebasego could not import projectpkgresourcemanager typechecking package projectpkgresourcemanager failed elided could not import githubcomvictorspringerhttpcacheadaptermemory typechecking package githubcomvictorspringerhttpcacheadaptermemory failed homejohngopkgmodgithubcomvictorspringerhttpcachev fe e af adaptermemorymemorygo could not import githubcomvictorspringerhttpcache cannot find package githubcomvictorspringerhttpcache in any of usrlocalgosrcgithubcomvictorspringerhttpcache from GOROOT homejohngosrcgithubcomvictorspringerhttpcache from GOPATH Basically it seems as though once it got out of the packages in my repo and started to descend into external imports such as githubcomvictorspringerhttpcache it got lost I believe the problem may be related to this code in goexportsgo func genContentdest pkgName license string byte error p err importerForCompilertokenNewFileSet source nilImportpkgName The documentation for ForCompiler states A lookup function must be provided for correct moduleaware operation Deprecated If lookup is nil for backwardscompatibility the importer will attempt to resolve imports in the GOPATH workspace Im afraid I dont know enough about the Go build process particularly about modules to be able to suggest an actual solution