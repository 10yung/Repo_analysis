Im want to write a library and I want to port it to other languages as well How can I write wrappers for other languages such as Python Hello I found this project a few days ago and at the same time I was getting into the actual C API of a scripting language Gravity Now working with its CAPI is rather tedious Whilst not being too complicated working with values retrived and sent to and from the VM is not that easy But when I saw Cello I wondered if it would be possible to port Cello to use Gravitys value types instead But I have no idea where to start I did find the Tree class in srcTreec but could not find any of the other classes I would have to port unfortunately Basically I only want to map these kinds of types and need to know where their respective classes are so I can modify them properly Numbers integer double Strings Arrays mixed Maps I already saw that in Tree but Table as well What is the difference aside from the used members And where would one use the one or the other FunctionsClosures Objects Where are those specific parts defined and can I just go ahead and fork this repo and modify the classes contents Also Gravity has a GC already so I dont want to have values made withbyfor Gravity to be garbage collected Thank you in advance I came across this while trying to fix the benchmarking on my local copy benchmarksListlistcello dyld dyld section not supported in UsersIngwieWorkGitCellobenchmarksListlistcello fish benchmarksListlistcello terminated by signal SIGABRT Abort I didnt investigate into it just yet but maybe you have an idea Meanwhile this is what I did up to the point I found this error diff diff git abenchmarksbenchmark bbenchmarksbenchmark index f e c abenchmarksbenchmark bbenchmarksbenchmark if uname s Darwin then On Mac OS use gtime if it is installed which s gtime if then TIMEgtime f else gtime not found revert to basic time TIMEtime fi else Use regular time This is GNUs time command so it has the f flag TIMEtime f fi gcc extgenintc o extgenint gcc Nbodiesnbodiescc stdc O lm o Nbodiesnbodiesc echo echo Garbage Collection echo echo n C time f e GCgcc TIME e GCgcc echo n C time f e GCgccpp TIME e GCgccpp echo n Cello time f e GCgccello TIME e GCgccello echo n Java time f e java cp GC gcjava TIME e java cp GC gcjava echo n Javascript time f e nodejs GCgcjavascriptjs TIME e node GCgcjavascriptjs echo n Python time f e python GCgcpythonpy echo n Ruby TIME e python GCgcpythonpy TIME Ruby time f e ruby GCgcrubyrb echo n Lua time f e lua GCgclualua TIME e lua GCgclualua echo n Lua JIT time f e luajit GCgclualua TIME e luajit GCgclualua gprof GCgccello GCprofiletxt rm gmonout echo echo List echo echo n C time f e Listlistc TIME e Listlistc echo n C time f e Listlistcpp TIME e Listlistcpp echo n Cello time f e Listlistcello TIME e Listlistcello echo n Java time f e java cp List listjava TIME e java cp List listjava echo n Javascript time f e nodejs Listlistjavascriptjs TIME e node Listlistjavascriptjs echo n Python time f e python Listlistpythonpy TIME e python Listlistpythonpy echo n Ruby time f e ruby Listlistrubyrb TIME e ruby Listlistrubyrb echo n Lua time f e lua Listlistlualua TIME e lua Listlistlualua echo n Lua JIT time f e luajit Listlistlualua TIME e luajit Listlistlualua gprof Listlistcello Listprofiletxt rm gmonout echo echo Map echo echo n C time f e sh c extgenint Mapmapc TIME e sh c extgenint Mapmapc echo n C time f e sh c extgenint Mapmapcpp TIME e sh c extgenint Mapmapcpp echo n Cello time f e sh c extgenint Mapmapcello TIME e sh c extgenint Mapmapcello echo n Java time f e sh c extgenint java cp Map mapjava TIME e sh c extgenint java cp Map mapjava echo n Javascript time f e sh c extgenint nodejs Mapmapjavascriptjs TIME e sh c extgenint node Mapmapjavascriptjs echo n Python time f e sh c extgenint python Mapmappythonpy TIME e sh c extgenint python Mapmappythonpy echo n Ruby time f e sh c extgenint ruby Mapmaprubyrb TIME e sh c extgenint ruby Mapmaprubyrb echo n Lua time f e sh c extgenint lua Mapmaplualua TIME e sh c extgenint lua Mapmaplualua echo n Lua JIT time f e sh c extgenint luajit Mapmaplualua TIME e sh c extgenint luajit Mapmaplualua gprof Mapmapcello Mapprofiletxt rm gmonout echo echo NBodies echo echo n C time f e Nbodiesnbodiesc TIME e Nbodiesnbodiesc echo n C time f e Nbodiesnbodiescpp TIME e Nbodiesnbodiescpp echo n Cello time f e Nbodiesnbodiescello TIME e Nbodiesnbodiescello echo n Java time f e java cp Nbodies nbodiesjava TIME e java cp Nbodies nbodiesjava echo n Javascript time f e nodejs Nbodiesnbodiesjavascriptjs TIME e node Nbodiesnbodiesjavascriptjs echo n Python time f e python Nbodiesnbodiespythonpy TIME e python Nbodiesnbodiespythonpy echo n Ruby time f e ruby Nbodiesnbodiesrubyrb TIME e ruby Nbodiesnbodiesrubyrb echo n Lua time f e lua Nbodiesnbodieslualua TIME e lua Nbodiesnbodieslualua echo n Lua JIT time f e luajit Nbodiesnbodieslualua TIME e luajit Nbodiesnbodieslualua gprof Nbodiesnbodiescello Nbodiesprofiletxt rm gmonout echo echo Dict echo echo n C time f e sh c extgenint Dictdictc TIME e sh c extgenint Dictdictc echo n C time f e sh c extgenint Dictdictcpp TIME e sh c extgenint Dictdictcpp echo n Cello time f e sh c extgenint Dictdictcello TIME e sh c extgenint Dictdictcello echo n Java time f e sh c extgenint java cp Dict dictjava TIME e sh c extgenint java cp Dict dictjava echo n Javascript time f e sh c extgenint nodejs Dictdictjavascriptjs TIME e sh c extgenint node Dictdictjavascriptjs echo n Python time f e sh c extgenint python Dictdictpythonpy TIME e sh c extgenint python Dictdictpythonpy echo n Ruby time f e sh c extgenint ruby Dictdictrubyrb TIME e sh c extgenint ruby Dictdictrubyrb echo n Lua time f e sh c extgenint lua Dictdictlualua TIME e sh c extgenint lua Dictdictlualua echo n Lua JIT time f e sh c extgenint luajit Dictdictlualua TIME e sh c extgenint luajit Dictdictlualua gprof Dictdictcello Dictprofiletxt rm gmonout echo echo Sudoku echo echo n C time f e sh c extsudoku Sudokusudokuc TIME e sh c extsudoku Sudokusudokuc echo n C time f e sh c extsudoku Sudokusudokucpp TIME e sh c extsudoku Sudokusudokucpp echo n Cello time f e sh c extsudoku Sudokusudokucello TIME e sh c extsudoku Sudokusudokucello echo n Java time f e sh c extsudoku java cp Sudoku sudokujava TIME e sh c extsudoku java cp Sudoku sudokujava echo n Javascript time f e sh c extsudoku nodejs Sudokusudokujavascriptjs TIME e sh c extsudoku node Sudokusudokujavascriptjs echo n Python time f e sh c extsudoku python Sudokusudokupythonpy TIME e sh c extsudoku python Sudokusudokupythonpy echo n Ruby time f e sh c extsudoku ruby Sudokusudokurubyrb TIME e sh c extsudoku ruby Sudokusudokurubyrb echo n Lua time f e sh c extsudoku lua Sudokusudokulualua TIME e sh c extsudoku lua Sudokusudokulualua echo n Lua JIT time f e sh c extsudoku luajit Sudokusudokulualua TIME e sh c extsudoku luajit Sudokusudokulualua gprof Sudokusudokucello Sudokuprofiletxt rm gmonout echo echo Matmul echo echo n C time f e Matmulmatmulc TIME e Matmulmatmulc echo n C time f e Matmulmatmulcpp TIME e Matmulmatmulcpp echo n Cello time f e Matmulmatmulcello TIME e Matmulmatmulcello echo n Java time f e java cp Matmul matmuljava TIME e java cp Matmul matmuljava echo n Javascript time f e nodejs Matmulmatmuljavascriptjs TIME e node Matmulmatmuljavascriptjs echo n Python time f e python Matmulmatmulpythonpy TIME e python Matmulmatmulpythonpy echo n Ruby time f e ruby Matmulmatmulrubyrb TIME e ruby Matmulmatmulrubyrb echo n Lua time f e lua Matmulmatmullualua TIME e lua Matmulmatmullualua echo n Lua JIT time f e luajit Matmulmatmullualua TIME e luajit Matmulmatmullualua gprof Matmulmatmulcello Matmulprofiletxt rm gmonout While the dynamic library so is compiled by default under linux with make it doesnt get installed with make install When running sudo make install or simply make install as root the Makefile assumes root umask is something like Which is just an assumption not a fact Many system administrator set root umask to no file is created worldreadable or worldexecutable The command install from GNU coreutils has the mode option to enforce file and directory permissions during the file copy Which very likely is for Celloh and libCelloa and for libCelloso Cannot compile either v and v with the latest tcc version from mob branch tcc srcTablec c I include stdgnu Wall Wnounused g ggdb fdollarsinidentifiers fPIC DCELLONSTRACE o objTableo srcTablec error cannot cast struct Tuple to void make Makefile objTableo Error However this page under Portability mentions that it can indeed be done Cello can be compiled easily with all of the major compilers including gcc clang clexe and tcc on the development branch Has anything changed since or has tcc not been tested UserszhangxinweiClionProjectscellodemocmakebuilddebugcellodemo p Point At x x fff efe p Point At x x fb c c cmp hash l There are many statical analysis systems for C language Mostly specified on some standards Have you tried any for Cello Some of them may give some errors which a developer may never see because its not on an embedded platform etc But itd be good to see the limitations since it has some hacks as youve mentioned and those hacks may cause some issues under some conditions 