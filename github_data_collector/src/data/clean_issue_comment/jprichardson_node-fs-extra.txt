Since issue CLI equivalent for fsextra it doesnt seem the situation has changed So as my first attempt to create an actual project of CLI with npm atao fsecli Ill try in the next days to add more tests and more functionalities of fsextra Already existings copy ensureDir remove emptyDir ensureFile move Id be pleased to receive any of yours comments types does not seem to be handling returned promises In VS Code the following information is providedfsexists as an example function existspath PathLike callback exists boolean void void namespace exists Expected arguments but got Operating System Windows Nodejs version fsextra version Hi Function readDirFiles may due to some race return object srcFiles with different structures In particular if property sub an object comes before a string function filter fails to remove a as it returns after the recursive call This case makes the test flaky Error Uncaught AssertionError ERRASSERTION Input A expected to strictly deepequal input B expected actual Lines skipped a Hello world n b Hello ncp n expected actual a Hello world n b Hello ncp n c d e at readDirFiles libcopytestsncpncptestjs First ensure you installed the latest version of fsextra If your bug still exists please fill out the following information if it applies to your issue Operating System Windows and online REPLs Nodejs version fsextra version First reported within moveSync errors thrown when the destination already exist do not have EEXISTS as a code property causing defensive try catches in that thread to fall through I isolated this behavior outside of CRA and I think it serves as a proper reduced test case to discuss further fsextra moveSync behavior with errorcode fsextra moveSync behavior without errorcode DO NOT MERGE until is merged To make this all work I had to propagate the same pattern to the jsonfile library so this PR wont work unless you check out that PR and npm link it instructions below Fixes We wanted to use the wellbeloved fsextra API in build systems that use a virtual FS under the hood for streaming and pluggability This might include Webpack Gulp or other cool things we might use in the future The nice thing about using fsextra is that it already has a wellthoughtout wellmaintained and useful API However you cant attach it to a different filesystem object without doing some dangerous monkeypatching This PR makes only small logic changes though they look like large code changes Instead of the individual module files creating methods based on the gracefulfs module directly they return factory functions which receive an fs object to use Example of the change Highly simplified version of ensureFile for illustration purposes Before js const fs requiregracefulfs moduleexports function createFilefile callback fswriteFilefile callback After js moduleexports function createFileFactoryfs return function createFilefile callback fswriteFilefile callback This pattern is spread across the codebase so that the fs object can be injected from the top down This may cause concerns about performance of the constructor This PR includes memoization of the method factories based on the reference identity of the fs object being pushed in This means that while you can create many FsExtra objects using the exact same filesystem the methods themselves will be declared and constructed only once All tests pass on all supported OSes The one area of concern is utimes which uses ostmpdir to briefly test file timestamps In a virtual filesystem ostmpdir might not exist so the test methods simply return false here which is probably safestvirtual filesystems are not guaranteed to do timestamping right Verification Pull and check out this branch and run npm install In a sibling directory clone the nodejsonfile dependency sh git clone cd nodejsonfile git checkout zetlenfsinjection npm install npm link Complete the link in your nodefsextra directory sh npm link jsonfile Run test suites and user acceptance experiments Remember that until is merged and released youll need to do that procedure after every reinstall of the node modules First ensure you installed the latest version of fsextra If your bug still exists please fill out the following information if it applies to your issue Operating System macOS Nodejs version v fsextra version js fscopySyncnewImagePath oldImagePath preserveTimestamps true consolelogfsstatSyncnewImagePathmtimeMs consolelogfsstatSyncoldImagePathmtimeMs Comparing mtime produces false results which can be a problem This is my use case And I do not expect the default behavior To add another case where itd be nice to support this I use a glob to find a bunch of files in different directories and Id like to copy them all to the same directory So Ive got something like js Not really hardcoded but returned from a glob query const input absolutepathtosomefileimg absolutepathtosomeotherfileimg absolutepathtosomewhereelseimg What Id like to do is js inputmappath fscopyfilePath ouputDir But instead Ive got to do js inputmappath fscopyfilePath pathjoinoutputDir pathbasenamefilePath Its not a showstopper but I find the first hypothetical snippet a lot more readable Originally posted by Retsam in First ensure you installed the latest version of fsextra If your bug still exists please fill out the following information if it applies to your issue Operating System Windows Pro bit Nodejs version v fsextra version v If i use copy or copySync to copy the Documents Folder on Windows i get the following Error RROR Error Uncaught in promise Error EPERM operation not permitted symlink C Users danielehrhardt Pictures C temp Eigene Bilder Error EPERM operation not permitted symlink C Users danielehrhardt Pictures C temp Eigene Bilder My User is a AD User My Command copySyncC Users danielehrhardt Documents C temp I do not Understand why the folder Pictures is not in the Documents Folder We may depreciate Node version for using async functions more free chmodr is a library I feel similarly to ncp mkdirp etc I feel like it has a place in this package