 Summary In rails application are now generated by default with configcacheclasses false see That generates a warning from cucumberrails Expected Behavior Adding cucumberrails to a default rails app should ideally not create a warning Current Behavior A warning is printed when loading cucumberrails I think the real question is if that warning is still relevant Its several years old by now Fixes Summary We want to be compatible with current Ruby versions is not yet in the matrix It could be Expected Behavior Have in CI matrix No Ruby warnings from the test suite All tests pass or no tests fail due to Current Behavior Does not have Ruby in the test matrix Possible Solution Extend the matrix Context Motivation Rails is moving forwards with their warningsremoval work for This is a Rails plugin Would be nice to move in the same direction In multiple places alias method chaining is used instead of prepend Since cucumberrails doesnt work with version of Ruby prior to these should be updated to the more semantically correct prepend Summary Draft attempt at making Cucumber work on cucumber rails How Has This Been Tested CI Screenshots if appropriate Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue x New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to not work as expected Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help Ive added tests for my code x My change requires a change to the documentation I have updated the documentation accordingly Summary Fixes How Has This Been Tested Please add tests for changes to the code otherwise we probably wont merge it Please describe in detail how you tested your changes Include details of your testing environment tests ran to see how your change affects other areas of the code etc Types of changes x Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to not work as expected Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help Ive added tests for my code My change requires a change to the documentation I have updated the documentation accordingly Summary I am working on a project where MiniTest and rspecmocks rspecexpectations are both available in the Gemfile However we have RSpec disabled as we do not use RSpec assertions in Cucumber This is causing an issue with cucumberrails where it tries to load RSpec expectations and matchers regardless of them being necessary Expected Behavior Tests run fine without RSpec getting loaded when the Gemfile has require false for those libraries Current Behavior assertequal with capybara fails due to rspecexpectations changing its behavior from vanilla minitest Possible Solution Changing line the librspecrb file to check for definedRSpecMock would allow for these two libraries to coexist without causing a conflict Minor tidy to method to improve linting and use new syntax Expected Behavior Should use new ruby syntax Current Behavior Use Ruby or older syntax Possible Solution Update syntax Summary Cucumberrails generates scriptcucumber but recent versions of Rails put helpers scripts in bin Cucumberrails should do the same Expected Behavior Upon installing cucumberrails theres a file bincucumber for running the scenarios Current Behavior Instead theres a file called scriptcucumber Possible Solutions Change the target location of scriptcucumber to bincucumber Depend on springcommandscucumber and have that generate bincucumber There are probably other options We can see how rspecrails does things Context Motivation Its an annoyance to have to move this file manually or install springcommandscucumber myself