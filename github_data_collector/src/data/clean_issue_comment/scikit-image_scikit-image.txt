 Description This PR fixes the circular import between skimagemeasureregionprops and skimagemormphologyconvexhull forcing the ugly import in the RegionPropertiesconveximage property This circular import is also pointed out by stevendbrown For reviewers Dont remove the checklist below Check that the PR title is short concise and will make sense year later Check that new functions are imported in corresponding initpy Check that new features API changes and deprecations are mentioned in docreleasereleasedevrst Consider backporting the PR with meeseeksdev backport to v x Description If this is a bugfix or enhancement state the issue it closes If this is a new feature reference what paper it implements Purpose Propose x x speedup when calculating Haar feature Propose new Pytest procedure for Haar feature Correct Haar feature bug To be done Please help review the APIs first Since there are a lot of changes once an initial review is done so we finalize the APIs I will fill create Docstrings accordingly A Benchmark is expected to be given before The initial Benchmark is given here for checking the effect to be done later Checklist Its fine to submit PRs which are a work in progress But before they are merged all PRs should provide Docstrings for all functions Gallery example in docexamples new features only Benchmark in benchmarks if your changes arent covered by an existing benchmark Unit tests Clean style in the spirit of PEP For detailed information on these and other aspects see the scikitimage contribution guidelines For reviewers Dont remove the checklist below Check that the PR title is short concise and will make sense year later Check that new functions are imported in corresponding initpy Check that new features API changes and deprecations are mentioned in docreleasereleasedevrst Consider backporting the PR with meeseeksdev backport to v x I url result SampleE pxfor mm SampleE pxfor mmout am new to image processing on python and my main project aims to segment the particles of soil grains included within an image after performing edge detection of the image using holistically nested edge detection then applying watershed segmentation on this image to get the contour areas in the image however I face some problems regarding segmenting the intersecting grains as I got two or more grains as one grain and this gives me an error in the results Could anyone figure out where can I modify the code to get better segmenting the grains in the image Way to reproduce python import cv import numpy as np from skimagefeature import peaklocalmax from skimagemorphology import watershed from scipy import ndimage import matplotlibpyplot as plt Load in image convert to gray scale and Otsus threshold image cv imreadSampleH pxfor cmjpg image cv pyrMeanShiftFilteringimage kernel cv getStructuringElementcv MORPHELLIPSE image cv morphologyEximagecv MORPHCLOSEkernel gray cv cvtColorimage cv COLORBGR GRAY thresh cv thresholdgray cv THRESHBINARYINV cv THRESHOTSU distancemap ndimagedistancetransformedtthresh localmax peaklocalmaxdistancemap indicesFalse footprintnpones labelsthresh Perform connected component analysis then apply Watershed markers ndimagelabellocalmax structurenpones labels watersheddistancemap markers maskthresh Iterate through unique labels n totalarea for label in npuniquelabels if label continue Create a mask mask npzerosgrayshape dtypeuint mask labels label Find contours and determine contour area cnts cv findContoursmaskcopy cv RETREXTERNAL cv CHAINAPPROXSIMPLE cnts cnts if lencnts else cnts c maxcnts keycv contourArea area cv contourAreac totalareaappendarea n printGrain number of number n has area area totalarea area cv drawContoursimage c calarea for a in totalarea b a calareaappendb cv imwriteresultjpg image printtotalarea cv imshowimage image cv waitKey Place the full code we need to recreate your issue here upload all necessary images to github too Version information python Paste the output of the following python commands the code gives the areas of contours detected as shown in the attached images python your output here Description Closes Border condition handling is added to the meijering sato and hessian filters border artifact in meijering are removed using the reflect mode implicit constant mode used in sato and hessian are deprecated in favor of reflect mode This PR comes from a suggestion of shenker For reviewers Dont remove the checklist below Check that the PR title is short concise and will make sense year later Check that new functions are imported in corresponding initpy Check that new features API changes and deprecations are mentioned in docreleasereleasedevrst Consider backporting the PR with meeseeksdev backport to v x Description As proposed in this PR comes with some refactoring of the adpathist module annex functions are now private unnecessary arrays of indices are replaced by slices some other minor refactoring For reviewers Dont remove the checklist below Check that the PR title is short concise and will make sense year later Check that new functions are imported in corresponding initpy Check that new features API changes and deprecations are mentioned in docreleasereleasedevrst Consider backporting the PR with meeseeksdev backport to v x Description maijering filter suffers from the same artifacts as frangi described in Way to reproduce python import pylab as plt from skimage import color data from skimagefilters import meijering img colorrgb graydataretina out meijeringimg sigmas pltimshowout meijerin Managing border conditions for the ridges filters as suggested by shenker may solve the problem Version information default Oct GCC Linux genericx withdebianstretchsid scikitimage version dev numpy version Description I have python code embedded inside c code Its basically downloading the images from network and later user them to load for further processing using below code It crashes on but works on version of skimage with python Update It works with python with skimage version Python default Nov GCC on linux Type help copyright credits or license for more information import skimage skimageversion quit mdeoremdeoreLenovoclonecboxerservernativeserver python Python default Dec GCC on linux Type help copyright credits or license for more information import skimage skimageversion Way to reproduce from skimage import io def prewhitenimg loggerdebugImage path formatimg if not ospathisfileimg loggererrorFile does not exists return try x ioimreadimg crash block except loggererrorImage is corrupt return mean npmeanx std npstdx stdadj npmaximumstd npsqrtxsize y npmultiplynpsubtractx mean stdadj return y Images is proper and not corrupt because i verified it post crash on python shell Even if it is corrupt for any other problem i have try block it should not crash Works like charm on version of skimage for python Crash log The log looks something like Jan mdeoreLenovo kernel cboxerserver segfault at ffffffffffffffff ip fbffa d sp ffecffd c error in libpython so fbffa f When i ran it inside GDB i got to the function which cased this crash gdb bt x ffff d a in from usrlibx linuxgnulibpython mso x ffff e e in from usrlibx linuxgnulibpython mso x ffff e in from usrlibx linuxgnulibpython mso x ffff d in from usrlibx linuxgnulibpython mso x ffff e in from usrlibx linuxgnulibpython mso x ffff d in from usrlibx linuxgnulibpython mso x ffff e ec in from usrlibx linuxgnulibpython mso x ffff a in from usrlibx linuxgnulibpython mso x ffff e in PyEvalEvalCodeEx from usrlibx linuxgnulibpython mso x ffff in from usrlibx linuxgnulibpython mso x ffff c a in PyObjectCall from usrlibx linuxgnulibpython mso x ffff in PyEvalEvalFrameDefault from usrlibx linuxgnulibpython mso x ffff c f in from usrlibx linuxgnulibpython mso x ffff e in PyEvalEvalCodeEx from usrlibx linuxgnulibpython mso x ffff in from usrlibx linuxgnulibpython mso x ffff c a in PyObjectCall from usrlibx linuxgnulibpython mso x ffff in PyEvalEvalFrameDefault from usrlibx linuxgnulibpython mso x ffff c f in from usrlibx linuxgnulibpython mso x ffff e in PyEvalEvalCodeEx from usrlibx linuxgnulibpython mso x ffff in from usrlibx linuxgnulibpython mso x ffff c a in PyObjectCall from usrlibx linuxgnulibpython mso x ffff in PyEvalEvalFrameDefault from usrlibx linuxgnulibpython mso x ffff c f in from usrlibx linuxgnulibpython mso x ffff c in from usrlibx linuxgnulibpython mso x ffff in PyEvalEvalFrameDefault from usrlibx linuxgnulibpython mso x ffff fa in from usrlibx linuxgnulibpython mso x ffff in PyFunctionFastCallDict from usrlibx linuxgnulibpython mso x ffff c in PyObjectFastCallDict from usrlibx linuxgnulibpython mso x ffff c in PyObjectCallFunctionObjArgs from usrlibx linuxgnulibpython mso x in FaceClassifierServerloadinputimages this x ff startindex endindex unknownfalse at faceclassifierservercorecpp x baee in cboxerprocess userIdsstdvector of length capacity at faceclassifierserverapicpp x c in main argc argv x fffffffe f at faceclassifierserverapicpp gdb f x in FaceClassifierServerloadinputimages this x ff startindex endindex unknownfalse at faceclassifierservercorecpp pReturn PyObjectCallFunctionObjArgsthispPrewhitenFunc pyimagePath NULL gdb quit Description Add Large Deformation Diffeomorphic Metric Mapping LDDMM to the registration module This implements the algorithm in Computing Large Deformation Metric Mappings via Geodesic Flows of Diffeomorphisms Some features which are not enabled by default implement the work in D Mapping of Serial Histology Sections with Anomalies Using a Novel Robust Deformable Registration Algorithm If this is a bugfix or enhancement state the issue it closes If this is a new feature reference what paper it implements Checklist Its fine to submit PRs which are a work in progress But before they are merged all PRs should provide x Docstrings for all functions x Gallery example in docexamples new features only Benchmark in benchmarks if your changes arent covered by an existing benchmark x Unit tests x Clean style in the spirit of PEP For detailed information on these and other aspects see the scikitimage contribution guidelines For reviewers Dont remove the checklist below Check that the PR title is short concise and will make sense year later Check that new functions are imported in corresponding initpy Check that new features API changes and deprecations are mentioned in docreleasereleasedevrst Consider backporting the PR with meeseeksdev backport to v x Its been discussed several times to create a scikitimagecontrib or a better name repo and package for highquality contributions which are not of broad enough interest for scikitimage An example is Creating the repo is easy but several questions need to be addressed Structure of the package same as scikitimage with the same submodule names CI maybe more lightweight doc landing page gallery of examples so that it would still be required to have a gallery example when contributing a new function release cycleprocess accepted dependencies needs to be pipconda installable on LinuxMacWindows but maybe we can accept more deps than scikitimage Etc Please comment skimagecore The burden of maintaining this package would probably be on us so we would have to find ways to make this more lightweight than for the main package or it wont be sustainable Im working on bumping the scikitimage version available for Gentoo Linux to the newest one The package install seems to work fine but the test suite fails with numerous plugin and attribute errors Here is the full buildlog Version information python from future import printfunction import sys printsysversion default Jan GCC import platform printplatformplatform Linux gentoo marsx IntelRCoreTMi UCPU GHzwithgentoo import skimage printscikitimage version formatskimageversion scikitimage version import numpy printnumpy version formatnumpyversion numpy version 