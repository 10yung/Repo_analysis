Notably bucketdnfrb and bucketpiprb are missing on rubygems Other files that have changed are bucketyumrb bucketrb Both have version set to Whats going on Intro I am using vagrant cachier plugin It gets stuck at Mounting NFS shared folder when I do a vagrant up and displays an error message If I do a vagrant up again It works I am looking for a better solution than this Output deepdeepHPPavilionNotebookcachierjugaad vagrant up Bringing machine default up with virtualbox provider default Importing base box ubuntubionic default Matching MAC address for NAT networking default Checking if box ubuntubionic is up to date default A newer version of the box ubuntubionic for provider virtualbox is default available You currently have version The latest is version default Run vagrant box update to update default Setting the name of the VM cachierjugaaddefault default Fixed port collision for Now on port default Clearing any previously set network interfaces default Preparing network interfaces based on configuration default Adapter nat default Adapter hostonly default Forwarding ports default guest host adapter default Running preboot VM customizations default Booting VM default Waiting for machine to boot This may take a few minutes default SSH address default SSH username vagrant default SSH auth method private key default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default Warning Remote connection disconnect Retrying default Warning Connection reset Retrying default default Vagrant insecure key detected Vagrant will automatically replace default this with a newly generated keypair for better security default default Inserting generated public key within guest default Removing insecure key from the guest if its present default Key inserted Disconnecting and reconnecting using new SSH key default Machine booted and ready default Checking for guest additions in VM default Configuring and enabling network interfaces default Installing NFS client default Exporting NFS shared folders default Preparing to edit etcexports Administrator privileges will be required sudo password for deep default Mounting NFS shared folders The following SSH command responded with a nonzero exit status Vagrant assumes that this means the command failed mount o vers udprwvers tcpnolock homedeepvagrantdcacheubuntubionic tmpvagrantcache Stdout from the command Stderr from the command mountnfs Connection timed out deepdeepHPPavilionNotebookcachierjugaad vagrant up Bringing machine default up with virtualbox provider default Checking if box ubuntubionic is up to date default Configuring cache buckets default Running provisioner shell default Running tmpvagrantshell jldzyjsh default uid root gid root groups root default default WARNING apt does not have a stable CLI interface Use with caution in scripts default Hit bionic InRelease default Hit bionicupdates InRelease default Hit bionicbackports InRelease default Hit bionicsecurity InRelease default Reading package lists default Building dependency tree default default Reading state information default packages can be upgraded Run apt list upgradable to see them default WARNING default apt default default does not have a stable CLI interface default Use with caution in scripts default Reading package lists default Building dependency tree default Reading state information default The following additional packages will be installed default apache bin apache data apache utils libapr libaprutil default libaprutil dbdsqlite libaprutil ldap liblua sslcert default Suggested packages default wwwbrowser apache doc apache suexecpristine apache suexeccustom default opensslblacklist default The following NEW packages will be installed default apache apache bin apache data apache utils libapr libaprutil default libaprutil dbdsqlite libaprutil ldap liblua sslcert default upgraded newly installed to remove and not upgraded default Need to get kB of archives default After this operation kB of additional disk space will be used default Get bionicmain amd libapr amd kB default Get bionicmain amd libaprutil amd kB default Get bionicmain amd libaprutil dbdsqlite amd kB default Get bionicmain amd libaprutil ldap amd B default Get bionicmain amd liblua amd build kB default Get bionicupdatesmain amd apache bin amd ubuntu kB default Get bionicupdatesmain amd apache utils amd ubuntu kB default Get bionicupdatesmain amd apache data all ubuntu kB default Get bionicupdatesmain amd apache amd ubuntu kB default Get bionicmain amd sslcert all kB default dpkgpreconfigure unable to reopen stdin No such file or directory default Fetched kB in s kBs default Selecting previously unselected package libapr amd default Reading database Reading database abase default Reading database default Reading database default Reading database default Reading database default Reading database default Reading database default Reading database default Reading database Reading database files and directories currently installed default Preparing to unpack libapr amd deb default Unpacking libapr amd default Selecting previously unselected package libaprutil amd default Preparing to unpack libaprutil amd deb default Unpacking libaprutil amd default Selecting previously unselected package libaprutil dbdsqlite amd default Preparing to unpack libaprutil dbdsqlite amd deb default Unpacking libaprutil dbdsqlite amd default Selecting previously unselected package libaprutil ldapamd default Preparing to unpack libaprutil ldap amd deb default Unpacking libaprutil ldapamd default Selecting previously unselected package liblua amd default Preparing to unpack liblua build amd deb default Unpacking liblua amd build default Selecting previously unselected package apache bin default Preparing to unpack apache bin ubuntu amd deb default Unpacking apache bin ubuntu default Selecting previously unselected package apache utils default Preparing to unpack apache utils ubuntu amd deb default Unpacking apache utils ubuntu default Selecting previously unselected package apache data default Preparing to unpack apache data ubuntu alldeb default Unpacking apache data ubuntu default Selecting previously unselected package apache default Preparing to unpack apache ubuntu amd deb default Unpacking apache ubuntu default Selecting previously unselected package sslcert default Preparing to unpack sslcert alldeb default Unpacking sslcert default Setting up libapr amd default Processing triggers for ufw default Processing triggers for ureadahead default Setting up apache data ubuntu default Setting up sslcert default Processing triggers for libcbin ubuntu default Setting up libaprutil amd default Processing triggers for systemd ubuntu default Processing triggers for mandb default Setting up liblua amd build default Setting up libaprutil ldapamd default Setting up libaprutil dbdsqlite amd default Setting up apache utils ubuntu default Setting up apache bin ubuntu default Setting up apache ubuntu default Enabling module mpmevent default Enabling module authzcore default Enabling module authzhost default Enabling module authncore default Enabling module authbasic default Enabling module accesscompat default Enabling module authnfile default Enabling module authzuser default Enabling module alias default Enabling module dir default Enabling module autoindex default Enabling module env default Enabling module mime default Enabling module negotiation default Enabling module setenvif default Enabling module filter default Enabling module deflate default Enabling module status default Enabling module reqtimeout default Enabling conf charset default Enabling conf localizederrorpages default Enabling conf othervhostsaccesslog default Enabling conf security default Enabling conf servecgibin default Enabling site default default Created symlink etcsystemdsystemmultiusertargetwantsapache service libsystemdsystemapache service default Created symlink etcsystemdsystemmultiusertargetwantsapachehtcachecleanservice libsystemdsystemapachehtcachecleanservice default Processing triggers for libcbin ubuntu default Processing triggers for ureadahead default Processing triggers for systemd ubuntu default Processing triggers for ufw default Configuring cache buckets Vagrantfile and provision script Vagrant version Vagrant other important details Tried switching from nfsv to nfs or inverse didnt work firewall is turned off nfs service is running If I do a exportfs then I can see the vagrantdcache path and private network address Ever since Im on macOS High Sierra APFS and using Vagrant x Im getting E You dont have enough free space in varcacheaptarchives ERROR Failed to run installdebiandeps when running vagrant up Needles to say the disk is far from full Usershbokhvagrantdcachedebiancontribjessie G G G tmpvagrantcache Weirdest things is once inside a box debiancontribjessie virtualbox but also olejessie virtualbox in my case aptget upgrade gives the not enough free spacemessage but aptitude upgrade will work OK and uses the cache Disabling both nfs and the mountoptions for the plugin in the Vagrantfile makes things work again Now I wonder is this a Vagrant a macOS a Debianbox since for example ubuntuxenial seems unaffected or pluginissue How do you disable the plugin for a given machineVagrantfile Its discussed here but never documented AFAICT Also how does cacheenablenfs work I see it mentioned here but I dont see it documented Hey so I just installed vagrantcachier to speed up my local env running symfony Whilst there is a noticeable speed difference it wasnt as fast I was expecting still s so I did a little digging in my box and found that running ls al on my vendor folder from within tmpvagrantcache returned the following total drwxrwxrwx dialout Oct drwxrwxrwt root root Oct drwxrwxrx dialout Oct apt drwxrwxrx dialout Oct aptlists drwxrwxrx dialout Oct cache drwxrwxrx dialout Oct composer drwxrwxrx dialout Oct gem drwxrwxrx dialout Oct logs drwxrwxrx dialout Oct npm drwxrwxrx dialout Oct vendor Likewise from within the vendor folder none of the dirs are symlinked it looks like its just ripped the vendor folder straight out of my app and put it in a new place which whilst marginally faster is essentially no different except that it ruins my autocomplete functions when referring to functions belonging to vendor classes Heres my Vagrantfile IP VMNAME myproj VMMEMORY VMCPUS SYNCEDFOLDERVMPATH varwwwmyprojcurrent Vagrantconfigure do config configvmbox geerlingguyubuntu configvmprovider virtualbox do v vname VMNAME vcustomize modifyvm id name VMNAME memory VMMEMORY natdnshostresolver on cpus VMCPUS end configvmnetwork privatenetwork ip IP configsshforwardagent true configvmprovision ansible do ansible ansibleplaybook devopsprovisioningplaybookyml ansibleinventorypath devopsprovisioninghostsvagrant ansiblelimit all end configvmsyncedfolder SYNCEDFOLDERVMPATH nfs true if Vagranthaspluginvagrantcachier configcachescope machine configcachesyncedfolderopts type nfs mountoptions rw vers tcp nolock configcacheenable generic cache cachedir varwwwprojectlocalhtdocscurrentappcache logs cachedir varwwwprojectlocalhtdocscurrentapplogs vendor cachedir varwwwprojectlocalhtdocscurrentvendor end end Any help would be greatly appreciated cheers I am using VirtualBox Vagrant with vagrantcachier VM Ubuntu chrisvirexenial Host iMac macOS When I use apt commands eg sudo apt update I get the following error W Cant drop privileges for downloading as file varlibaptlistspartialusarchiveubuntucomubuntudistsxenialInRelease couldnt be accessed by user apt pkgAcquireRun Permission denied Hmm I just tried it on my Linux Desktop as host and I am getting a similar error W Cant drop privileges for downloading as file varlibaptlistspartialusarchiveubuntucomubuntudistsxenialInRelease couldnt be accessed by user apt pkgAcquireRun Permission denied E Could not get lock varlibdpkglock open Resource temporarily unavailable E Unable to lock the administration directory varlibdpkg is another process using it The goal of this request is to allow the root directory that is used for cache to be specified by the user It may be considered an edge case as NFS cannot mount encrypted directories such as an encrypted home directory More details in Thanks Please let me know if there are any issues Hi I am really enjoying this plugin so far However my home directory is encrypted causing issues with the NFS mounting I have taken a look here and seen its something not supported here My idea is to add another configuration attribute specifying the root to be used for caching If this is specified it overrides checking the machine or box specification and builds the root at that spot Apologies if this is not the correct way to propose ideas etc My first time attempting to contribute smile Hi running a vagrant VM with vagrantcachier enabled breaks a zypper refresh adminhomevagrant zypper update n cache rubygempuppet x rpm KiB KiB unpacked Checking for file conflicts done Installing ruby rubygemaddressable x error Installation of ruby rubygemaddressable x failed Error Subprocess failed Error RPM failed error unpacking of archive failed on file usrlib rubygems cacheaddressable gem cpio chown failed Operation not permitted error ruby rubygemaddressable x install failed Abort retry ignore i This fails cause the directory rights are wrong adminhomevagrant ls la usrlib rubygems cache total drwxrxrx vagrant Oct drwxrxrx vagrant Oct vagrant Oct addressable gem vagrant Oct builder gem rwrr vagrant Jan chef gem rwrr vagrant Mar chefconfig gem rwrr vagrant Feb chefzero gem rwrr vagrant Mar coderay gem rwrr vagrant Mar difflcs gem rwrr vagrant Jan erubis gem rwrr vagrant Jan facter gem rwrr vagrant Sep fastgettext gem rwrr vagrant Mar ffi gem rwrr vagrant Mar ffiyajl gem rwrr vagrant Oct gem rpm gem rwrr vagrant Sep hashie gem The pip support checks whether pip is installed runs which pip and does not create the pip bucket if pip is not yet found However this means that when using a bootstrap script that installs pip and then installs a requirements file then those pip requirements will never use the cache As a workaround pip has to be installed in a separate bootstrap script first This might make some sense in the autodetect mode but if the pip bucket is explicitly enabled configcacheenable pip it might make more sense to avoid the which pip test and always create the bucket 