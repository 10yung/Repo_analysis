manifests dependencies property must be an object otherwise it will return an error message Close pnpm version Code to reproduce the issue Suppose there are a workspace packages barpackagejson workspacefoo depends on workspacebarworkspace foopackagejson workapacebar bumped to a prerelease version eg And run pnpm recursive exec pwd Expected behavior Command pwd runs for workspacefoo before workspacebar pnpm sort packages correctly by default despite the version of packages Actual behavior Command pwd runs for workspacebar before workspacefoo Additional information OS OSX Sometime I want to update all dependencies in all of my projects and prune away unusedoutdated versions of packages Linking doesnt seem to work anymore It did work with PNPM x I did recreate the nodemodules directories after upgrading to x pnpm version Code to reproduce the issue cd foo pnpm link cd bar pnpm link foo Expected behavior It should link foo to bar instead of throwing an error Actual behavior Receiving the following error json debug pnpmscope selected debug pnpm isCaseSensitive false store C Users RoelVB pnpmstore error pnpm message code ERRPNPMUNEXPECTEDVIRTUALSTORE expected C Users RoelVB Documents Development foo nodemodules pnpm actual C Users RoelVB AppData Roaming npm pnpmglobal nodemodules foo nodemodules pnpm modulesDir C Users RoelVB Documents Development foo nodemodules err name Error message Unexpected virtual store location code ERRPNPMUNEXPECTEDVIRTUALSTORE stack Error Unexpected virtual store location n at ObjectcheckCompatibility as default C Users RoelVB AppData Roaming npm pnpmglobal nodemodules pnpm registrynpmjsorg pnpm nodemodules pnpm lib nodemodules pnpm getcontext lib checkCompatibility indexjs n at Promiseallprojectsmap C Users RoelVB AppData Roaming npm pnpmglobal nodemodules pnpm registrynpmjsorg pnpm nodemodules pnpm lib nodemodules pnpm getcontext lib indexjs n at Arraymap anonymous n at validateNodeModules C Users RoelVB AppData Roaming npm pnpmglobal nodemodules pnpm registrynpmjsorg pnpm nodemodules pnpm lib nodemodules pnpm getcontext lib indexjs n at ObjectgetContext as default C Users RoelVB AppData Roaming npm pnpmglobal nodemodules pnpm registrynpmjsorg pnpm nodemodules pnpm lib nodemodules pnpm getcontext lib indexjs n at processtickCallback internalprocessnexttickjs Additional information node v prints v Windows OS X or Linux Windows Please only file bugsfeature requests for pnpm here If you have a question that is not answered in the FAQ section of the README then it is best to post your question on StackOverflow under the pnpm tag or ask it in our Gitter chatroom If your issue is a bug please follow the format below Ive done some investigation into the issue and I think it stems from this change Now instead of trying to read a packagejson from a relative location its trying to resolve the pnpm package and read that packagejson The problem with this is in our projects we use the selfinstaller to save pnpm into our own specific cache and so it never gets installed into the nodemodules folder its being run in This breaks the resolution of requireresolvepnpm pnpm version x Code to reproduce the issue Using the selfinstaller install pnpm somewhere Try getting the pnpm version from pnpmjs node pathtolibbinpnpmjs v If there was a fatal error also include a gist of your pnpmdebuglog file Expected behavior node pathtolibbinpnpmjs v Outputs the pnpm version Actual behavior Outputs the following stack trace node UnhandledPromiseRejectionWarning Error Cannot find module pnpmpackagejson at FunctionModuleresolveFilename internalmodulescjsloaderjs at Functionresolve internalmodulescjshelpersjs at Objectanonymous Usersjosephschmittdevelopmentucfrontendpnpm libnodemodulespnpmcliutilslibpnpmPkgJsonjs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at tryModuleLoad internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at Modulerequire internalmodulescjsloaderjs at require internalmodulescjshelpersjs Additional information Any NodeJS macOS x Please only file bugsfeature requests for pnpm here If you have a question that is not answered in the FAQ section of the README then it is best to post your question on StackOverflow under the pnpm tag or ask it in our Gitter chatroom If your issue is a bug please follow the format below pnpm version Code to reproduce the issue pnpm install If there was a fatal error also include a gist of your pnpmdebuglog file pnpmdebuglog Expected behavior pnpm installs dependencies and does not error Actual behavior pnpm first gets stuck for a while saying Packages Resolving total reused downloaded Then exits with the following Packages ERROR ENOENT no such file or directory open C Users dionn pnpmstore registrynpmjsorg staticroute tmp faaf c bafe bd dab test weird filename newline Resolving total reused downloaded packages were not updated this still occurs after deleting nodemodules Additional information Packagejson dependencies devDependencies httpserver typescript node v prints v Windows OS X or Linux Windows Please only file bugsfeature requests for pnpm here If you have a question that is not answered in the FAQ section of the README then it is best to post your question on StackOverflow under the pnpm tag or ask it in our Gitter chatroom If your issue is a bug please follow the format below pnpm version Code to reproduce the issue sh pnpm add dreamopt If there was a fatal error also include a gist of your pnpmdebuglog file Expected behavior The package is installed instantly Actual behavior pnpm prints following error and exits after approx s Packages ERROR Unexpected end of data at final nvmversionsnodev libnodemodulespnpmlibnodemodulestarstreamextractjs if thispartial retur at callFinal nvmversionsnodev libnodemodulespnpmlibnodemodulestarstreamnodemodules tail n pnpmdebuglog gives downloaded packageId registrynpmjsorgdreamopt status inprogress warn pnpmpackagerequester message Fetching registrynpmjsorgdreamopt failed prefix homeec user error pnpm message attempts resource err name Error message Unexpected end of data stack Error Unexpected end of data n at Extractfinal homeec usernvmversionsnodev libnodemodulespnpmlibnodemodulestarstreamextractjs n at callFinal homeec usernvmversionsnodev libnodemodulespnpmlibnodemodulestarstreamnodemodulesreadablestreamlibstreamwritablejs n at processTicksAndRejections internalprocesstaskqueuesjs Additional information node v prints v Windows OS X or Linux repros on all not a network or package issue pnpm version Hello Ive already posted question on gitter related to that issue but after further investigation I think this worth mentioning in tracker Previous discussion Strider zkochan hello Ive found another strange behavior specific for nosave users When Im using pnpm i g foo then pnpm i g bar after nd foo will be deleted I can workaround this with S but this creates packagejson for my global packages This may be intended behavior but it is strange for me using this nosave scenario Both pnpm and npm works normal way for a long time that you can manually install any package globally without interrupting other global packages Might be worth to note on this channel Zoltan well foo should not be deleted there is a global packagejson and both foo and bar should be added as dependencies to it You gave me answer but today I compared that behavior to npms behavior Basically I have savefalse in npmrc so both npm and pnpm use this settings When I install something with npm i g foo it does not teardown anything previously installed I think npms behavior is correct It may be formulated like when using global mode install any package and treat everything previously installed as manually installed so keep it too even if no packagejson present or if its empty With pnpm its not possible to have savefalse and install bunch of global tools After installing second tool st will be torn down So in any time point only one tool can be installed To workaround this nosave users will must always append S to their global installs Often Id like to installbuildtest a package all its dependencies and all its dependents This is useful for local development but also as an optimization in CI builds to constrain what packages need to be verified pnpm filtering supports this to an extent with the pkg syntax but the current functionality isnt quite complete Im not sure if this is by design or a bug but it does not recurse through dependents to include their dependencies Take the following monorepo where X Y declares that X depends on Y localb locala localc localb localc localz Running pnpm run r build filter localb will execute the build script in a b and c but not z This breaks the build in c because z hasnt been built Either as a bug fix or a new flag Id like to have a mechanism that recurses to include z here and properly orders the execution so that z runs before c Original comment Users of docker can benifit from it by changing their Dockerfile to dockerfile ADD pnpmlockyaml RUN pnpm install ci onlyfromlockfile Proposed option for this feature ADD packagejson RUN pnpm testlockfile Need to verify the lockfile is correct ADD instead of the current popular pattern Dockerfile ADD packagejson pnpmlockyaml RUN pnpm install frozenlockfile ADD The new Dockerfile pattern will allow pnpm install ci onlyfromlockfile layer be reused even when packagejson is modified as long as lockfile is not modified eg version bump