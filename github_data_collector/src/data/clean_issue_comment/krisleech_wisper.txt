This PR is a followup of and it solves issue with anonymous class string It doesnt avoid calling tos completely but only calls tos when allowedclasses contains a string like Class xXXXXXX Hi Im developing an events API for my Rails app and Im conflicted between these three choices Ive read their READMEs but I dont know whats the right choice for me Any suggestions Sorry for the confusion Im switching branches on this PR with this new approach so Im closing my old PR and opening this one This approach still fails in one case when you call tos on an anonymous class you get a name like Classxxxxxx Im not aware of a safe sane way to reify an object from that string The API currently supports passing in those strings in the publisher but this breaks that ability Any ideas Recently while chasing down some database performance bottlenecks in my application I noticed a fairly significant amount of time being spent broadcasting events created by wisperactiverecord It turns out that the underlying issue concerns wisper itself My application involves subscribing to a number of classes each along the lines of ruby MyPublishersubscribemylistener where the publisher is an activerecord model Wisper handles these cases by instantiating an ObjectRegistration for each listener and adding each one to a set of globalregistrations that are stored in the GlobalListener class and accessible by all publishers When broadcast is called on an activerecord instance eg in one of the AR callbacks defined by wisperactiverecord a method of the same name is called on all registrations accessible by the model which in my case are all globalregistrations I have no instancelevel localregistrations or temporaryregistrations That method involves first testing those registrations to see whether the specified event should be broadcast ruby def broadcastevent publisher args methodtocall mapeventtomethodevent if shouldbroadcastevent listenerrespondtomethodtocall publisherinscopepublisher broadcasterbroadcastlistener publisher methodtocall args end end Even though the callback is triggered by a CRUD event on a single AR record of known class this test is performed for every globalregistration created for every AR publisher class In my case I have around publisher classes and each one has multiple listeners so the total number of globalregistrations to be tested each time is potentially of the order of The computational cost of this process is dominated by the method publisherinscope ruby def publisherinscopepublisher allowedclassesempty publisherclassancestorsany ancestor allowedclassesincludeancestortos end When used in the context of wisperactiverecord publisherclassancestors includes all of the modules included in ActiveRecordBase and its parent classes In my case that amounts to items Because of a particular pressing need I had to eliminate unnecessary computation the approach I took to address this situation involved creating a new set of classspecific registrations represented by the class instance variable classregistrations and overriding the classlevel subscribe method to add registrations to this new set rather than to globalregistrations This significantly reduces the number of registrations that need to be tested each time an event is broadcast The new definitions are wrapped in a Publisher module that I include into my AR models instead of Wispermodel overriding WisperObjectRegistrationpublisherinscope to eliminate the testing of ancestor modules To ensure that were able to pick up registrations defined on any parent classes a new class method registrations recursively retrieves registrations from any of the publishers superclasses The approach is illustrated in the following gist Obviously this isnt a general solution since it doesnt touch the gem directly but it should serve to highlight the issue Im raising and to indicate broadly one way of addressing it should someone wish to do so Note that the gist includes the definition of WisperObjectRegistrationbroadcast only for the sake of clarity for me to provide context and to add some comments The method itself is unchanged Fixes I work on a project that uses the values gem for immutable hence frozen value objects in several places We add behavior to the objects that doesnt mutate their data Sometimes we generate events of interest that wed like to publish with Wisper But due to the lazyloading of localregistrations we cant unless we override initialize to set localregistrations Setnew and then call super which is where freeze gets called Just this one niggling line of code keeping Wisper from working smoothly for a frozen object Id be happy to put together a pull request can you tell me what you would or would not want to see in a fix for this issue