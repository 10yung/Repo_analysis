I added one test as an example and proof that it works Fixes Hi Thank you for you project I have a feature request expose the Generator trait in order to create a custom PrettyWriter Just convenience helpers similar to the standard librarys HashMap etc useful when eg checking that a certain key is present or not Just a quick idea this would be nice for those cases when you have to generate an error expected a list got and maybe a few other similar cases add JsonValuekind method that returns something like this rust deriveCopy Clone Debug Eq PartialEq pub enum JsonValueKind Null Short String Number Boolean Object Array impl Display for JsonValueKind fn fmt self f mut fmtFormatter fmtResult writef format selftolowercase impl From JsonValue for JsonValueKind fn fromvalue JsonValue Self match value JsonValueNull JsonValueKindNull JsonValueShort JsonValueKindShort JsonValueString JsonValueKindString JsonValueNumber JsonValueKindNumber JsonValueBoolean JsonValueKindBoolean JsonValueObject JsonValueKindObject JsonValueArray JsonValueKindArray Heya Since I borrowed most of the encoding logic for simdjsonrs from justrust I wanted to contribute back I improved the writestring logic to use simd instructions to speed up those parts especially for larger strings If there is interest Ill open a PR so jsonrust can take advantage of that Hi Thanks for all your great work on jsonrust I recently needed a way of writing a json object with highlights on certain slices for my work on gmmorrisjg To achieve this I wrote an external writer which takes your jsonrust implementation which I have published as jsonhighlightwriter This required duplicating some code from jsonrust license kept in tact as you can see as it wasnt exposed in a consumable manner My original intent was to keep the highlightwriter as an external writer and use it in the manner you can see in the jg library but it occurred to me that it might be worth offering to add it as a build in writer in jsonrust Before I go to the effort of putting together a pull request I wanted to make sure theres an interest If not Im happy to keep it external Cheers In we fail to parse a JSON document because of an ExceededDepthLimit It would be useful to be able to customize the depth limit json entitynumber namemediumelectricpolepositionx Attempting to parse this json using the asi method results in thread main panicked at attempt to multiply with overflow rustcdaa a a d fe bfcc b b c d srclibcorenummodrs stack backtrace stdsysunixbacktracetracingimpunwindbacktrace at srclibstdsysunixbacktracetracinggccsrs stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at srclibstdsyscommonbacktracers at srclibstdpanickingrs stdpanickingdefaulthook at srclibstdpanickingrs stdpanickingrustpanicwithhook at srclibstdpanickingrs stdpanickingcontinuepanicfmt at srclibstdpanickingrs rustbeginunwind at srclibstdpanickingrs corepanickingpanicfmt at srclibcorepanickingrs corepanickingpanic at srclibcorepanickingrs corenumimpl u pow at rustcdaa a a d fe bfcc b b c d srclibcorenummodrs jsonnumberimpl coreconvertFromjsonnumberNumber for i from at usrlocalcargoregistrysrcgithubcom ecc db ec json srcnumberrs T as coreconvertIntoUinto at rustcdaa a a d fe bfcc b b c d srclibcoreconvertrs jsonvalueJsonValueasi closure at usrlocalcargoregistrysrcgithubcom ecc db ec json srcvaluemodrs coreoptionOptionTmap at rustcdaa a a d fe bfcc b b c d srclibcoreoptionrs jsonvalueJsonValueasi at usrlocalcargoregistrysrcgithubcom ecc db ec json srcvaluemodrs jsonvalueJsonValueasi at usrlocalcargoregistrysrcgithubcom ecc db ec json srcvaluemodrs This should really be wrapped in a Result type that can return an error type json entitynumber name fastsplitter position x y direction In this example obj position x asi unwrap Floats should return false for the isinteger functions