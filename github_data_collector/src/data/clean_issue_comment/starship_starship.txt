Adding two new configuration settings shownamespace and showcontext which let user manage Kubernetes module display Both settings matter only if namespace is known if not we show context name and thats it and simply enabledisable appropriate segments So by default with both set to true we get context namespace but we setting one of those to false we can get context or namespace This in particular resolves Warning this is my first contact with Rust after briefing some book yesterday Enjoy This issue has been prepopulated with your systems configuration Thank you for submitting a bug report Bug Report Current Behavior A clear and concise description of the behavior Prompt is not showing glyphs instead it shows the square box with question mark img width altScreen Shot at PM src Even though iTerm is setup to use a font that has glyphs img width altScreen Shot at PM src img width altScreen Shot at PM src and starship configuration explicitly calls this glyph in the gitbranch module Expected Behavior A clear and concise description of what you expected to happen I would expect to show the git branch glyph instead Additional contextScreenshots Add any other context about the problem here If applicable add screenshots to help explain Possible Solution Only if you have suggestions on a fix for the bug Environment Starship version fish version fish version Operating system Mac OS Terminal emulator iTermapp Relevant Shell Configuration bash eval starship init fish Starship Configuration toml Replace the symbol in the prompt with gitbranch symbol uniE Provide a general summary of your changes in the Title above To help with semantic versioning the PR title should start with one of the conventional commit types The conventional commit types for Semantic PR are feat fix docs style refactor perf test build ci chore revert Description Describe your changes in detail Motivation and Context Why is this change required What problem does it solve If it fixes an open issue please link to the issue here reqwest is quite a heavy dependency in terms of file size and pulls in a lot of async related dependencies tokio despite starship only using the blocking API By replacing reqwest with ureq binary size on windows release builds is reduced by Types of changes What types of changes does your code introduce Put an x in all the boxes that apply Bug fix nonbreaking change which fixes an issue New feature nonbreaking change which adds functionality Breaking change fix or feature that would cause existing functionality to not work as expected Screenshots if appropriate How Has This Been Tested Please describe in detail how you tested your changes Include details of your testing environment tests ran to see how your change affects other areas of the code etc I have tested using MacOS x I have tested using Linux x I have tested using Windows Checklist Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help I have updated the documentation accordingly I have updated the tests accordingly IMPORTANT Please run the following command to create an issue starship bugreport An issue will be prepopulated with your systems configuration making the process a whole lot quicker Bug Report Current Behavior Same as described in issue Expected Behavior Same as described in issue Additional contextScreenshots No error with version with other newests versions the issue occurs Environment Starship version Shell type bash Shell version GNU bash version release x pclinuxgnu Shell plugin manager bashit Terminal emulator Tilix Operating system Debian Testing Relevant Shell Configuration Starship Configuration This is likely nontrivial but I decided to raise it as the functionality could be interesting I sometimes use kubernetes Frequently enough to enable kubernetes module but by far not always I would be much happier if kubernetes module was disabled by default but magically activated in given terminal once I issue kubectl helm or oc as it proves my intent to enter my cloudy hat for some time Similar theme could be related to other modules aws comes to mind immediately but even python version starts being interesting once I do anything pythonic python pip conda even if current dir doesnt contain any trigger Memory module could show up if I happen to issue tophtopfree etc I see some possible ways to achieve similar functionality draft ideas below Dynamic perterminal configuration context From the user point of view I imagine it as sth like starship confighere enable kubernetes starship confighere disable python of course options can be named differently and maybe provided by separate binary Not exactly sure about best way to implement it but some ideas starship confighere updates runstarship someidofthissessionl configtoml or sth similar in tmp if run doesnt work During prompt generation starship checks for those settings and uses them Both sides must somehow agree on what the thissessionid is shell pid could probably serve starshipconfighere is just a shell function which sets some environment variables STARSHIPCONFIG Actual starship triggers some shell callback asking for their values maybe calls shell function givemethissessionsettings target or maybe does brute echo STARSHIPCONFIG target where target is pipesockettempfile ready to grab the data This functionality lone could be sufficient to achieve my main goal with some scripting around like aliasing kubectl to starship confighere enable kubernetes actualkubectl And seems useful in general even for play with starship game enable this disable that contemplate effects without the need to restart shell Changing state according to the commands executed It would be great if I could write in starshiptoml kubernetes disabled true enableaftercommand kubectl oc helm I am not quite sure whether this is possible is starship able to inspect which command user just executed or is to execute thats mostly q whether prompt callbacks see BASHCOMMAND and similar vars but if so would be great Apart from accessing command itself it also requires keeping some state preferably sharing the way with commands from pkt so one could later use explicit command to disable if he or she likes so If such mechanism appears I also imagine extending it to more switchy behaviours in the future so various commands could enable general flavor of the current terminal disabling unrelated modules I used python or pip fine lets see pyver check for venvs and even signal PYTHONPATH contents but disable rustrelated things I called kubectl fine lets disable most local modules including that python and show mostly things about remote cluster for some time etc But this is just a rough idea which could be more confusing than useful Thank you for creating starship I started using it recently and I am already in love Would it be possible to make kubernetes note more compact I am using openshift and in my case prompt after activating kubernetes module looks like devmarcinvariousopenshiftmyorglocal marcin devmarcinvarious srcsazteappsapi I already relocated kubernetes module to separate line via promptorder Here I use openshift instance on openshiftmyorglocal my username is marcin and namespace or rather project in openshift flavor is devmarcinvarious Suggestions Id be fairly happy with sole namespace even if I use multiple kubernetes instances and users I usually dont reuse namespace names So my specific case would likely be resolved by sth like kubernetes shownamespace true showuser false showhost false or configurable format string or anything similar what would let me limit output in this very case to devmarcinvarious For more advanced cases of people using plenty of kubernetes instances I imagine it could make sense to predefine some aliases so one could somehow write in his toml rules like replace openshiftmyorglocal marcin with myorgos But maybe thats overkill Feature Request Is your feature request related to a problem Please describe A clear and concise description of what the problem is Ex I have an issue when and show that sometimes the curl install fails due to permissions issues Describe the solution youd like A clear and concise description of what you want to happen Add any considered drawbacks Modify the install script so that it will escalate privileges if they are needed Describe alternatives youve considered A clear and concise description of any alternative solutions or features youve considered Modify install instructions to use sudo in the shell command While this is arguably simpler for both us and the user I prefer to explicitly explain what we need escalated privileges for Bug Report Current Behavior Only with linebreak disabled cursor location shifts when tab completion For example lsTAB will leave the prompt as follow starship The ls pointed by the arrow was not manually inserted and the BACKSPACE is able to delete only the two character inserted leaving the PROMPT as follow starship afterbackspacetothebeginning Expected Behavior Prompt should not interfere with TABcompletion also when linebreak module is disabled Environment Starship version zsh version zsh x debianlinuxgnu Operating system Debian testing Terminal emulator unknown terminal unknown version Relevant Shell Configuration Im able to reproduce the issue using this minimal zshrc bash export PATHcargobinPATH for starship itself eval starship init zsh Starship Configuration toml addnewline false directory truncationlength style cyan gitstatus stagedstyle green stagedcountenabled true stagedcountstyle green Issue seems to be reproducible disabling linebreak linebreak disabled true Bug Report Gradle project files can be renamed to something besides buildgradle This causes the java detection to fail Current Behavior No java version identified Expected Behavior java version displayed in the prompt Possible Solution instead of relying on buildgradle look for any file gradle 