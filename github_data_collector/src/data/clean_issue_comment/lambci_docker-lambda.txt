When trying to run a suite of jest unit tests I get repeated errors saying Error listen tcp bind address already in use My first test will always succeed but subsequent ones all fails Since Jest runs all tests in parallel I tried using runInBand which did not help I suspect that is what is causing this error How can this be fixed First of all Thanks for your amazing work on this project I understand it is possible to attach a remote debugger to process running in the docker container However Im missing documentation on how to do so Im specifically search for info on how to attach a debugger on node java and python lambdas when they are running in the container Thanks Im using GitHub Actions to run integration tests against your Docker image Locally on my MacBook everything works fine but when they run in my GitHub Actions workflow I get following response json errorType RuntimeImportModuleError errorMessage Error Cannot find module color nRequire stack n varruntimeUserFunctionjs n varruntimeindexjs My githubworkflowsbuildyml looks like this yml name CI on push pullrequest jobs build runson ubuntulatest services lambda image lambcilambdanodejs x ports volumes PWDvartaskrodelegated env DOCKERLAMBDASTAYOPEN AWSLAMBDAFUNCTIONHANDLER lambdamytesthandler steps Certain packages such as ssh python require openssl to build native assets Would be nice if the build image could have openssl installed The above install works after sh yum install openssl openssldevel Im trying to run a lambda function locally with the docker image set to Python For some reason I get a weird error even when there are no imports in the code This is the code of the lambda function def lambdahandlerevent context return statusCode body asd The command Im running docker run rm v C sandboxlambdavartaskrodelegated lambcilambdapython lambdafunctionlambdahandler networkhost The error START RequestId fe f b e d c da b f Version LATEST Unable to parse input as json Expecting property name enclosed in double quotes line column char Traceback most recent call last File varlanglibpython jsoninitpy line in loads return defaultdecoderdecodes File varlanglibpython jsondecoderpy line in decode obj end selfrawdecodes idxws end File varlanglibpython jsondecoderpy line in rawdecode obj end selfscanonces idx jsondecoderJSONDecodeError Expecting property name enclosed in double quotes line column char END RequestId fe f b e d c da b f REPORT RequestId fe f b e d c da b f Init Duration ms Duration ms Billed Duration ms Memory Size MB Max Memory Used MB errorTypeJSONDecodeErrorerrorMessageExpecting property name enclosed in double quotes line column char stackTrace File varlanglibpython jsoninitpy line in loads n return defaultdecoderdecodes n File varlanglibpython jsondecoderpy line in decode n obj end selfrawdecodes idxws end n File varlanglibpython jsondecoderpy line in rawdecode n obj end selfscanonces idx n PS C sandboxlambda Im getting python package dependency conflict when installing zappa into new virtual environment I use lambcilambdabasebuildpython image to build zappa project Steps to replicate docker run rm it lambcilambdabuildpython sh c virtualenv venv source venvbinactivate pip install zappa pip check Whats happening Zappa requires pythondateutil dependency virtualenv pip tries to install pythondateutil to solve zappa dependency virtualenv pip install fails to install pythondateutil because Found existing installation pythondateutil Not uninstalling pythondateutil at varruntime outside environment vartaskvenv Cant uninstall pythondateutil No files were found to uninstall pip check fails with zappa has requirement pythondateutil but you have pythondateutil pythondateutil dependency isnt installed in venv and is injected into python runtime by PYTHONPATH from outside Question I would like to know why does lambcilambdabuildpython have extra python dependencies in image that interfere with every virtual environment Is it safe to ignore those extra global dependencies Some extra dependencies in varruntime installed here Workaround I use workaround for this problem by resetting PYTHONPATH for now docker run rm it e PYTHONPATH lambcilambdabuildpython sh c virtualenv venv source venvbinactivate pip install zappa pip check The installation of bundler as root from has broken bundler functionality for nonroot users Reproduction as root docker run rm ti lambcilambdabuildruby bundle v Bundler version As nonroot docker run rm ti user ec user lambcilambdabuildruby bundle v Traceback most recent call last from varlangbinbundle in main from varlanglibruby rubygemscoreextkernelrequirerb in require from varlanglibruby rubygemscoreextkernelrequirerb in rescue in require varlanglibruby rubygemscoreextkernelrequirerb in require cannot load such file bundler LoadError Could we perhaps install bundler as a nonroot user in the dockerfile using runuser if necessary or fix the permissions as a secondary step I have an issue trying to use the RazorLight package on dockerlambda It errors with Cant load metadata reference from the entry assembly Make sure PreserveCompilationContext is set to true in csproj file but only when run on dockerlambda It runs properly when run on live AWS Ive boiled it down to a minimal reproduction case here LambdaTestzip Its running on dotnetcore and originally it was running through the awssamcli but running it via docker run rm v PWDbinreleasenetcoreapp publishvartask lambcilambdadotnetcore LambdaTestLambdaTestFunctionFunctionHandler someevent in powershell also causes the issue Running Docker Desktop win with engine I have a NET lambda function containing the following code thisconfig new ConfigurationBuilder AddJsonFileappSettingsjson optional false reloadOnChange true Build And a file appSettingsjson that is copied to the publish folder If I deploy this to AWS then it runs fine and I can access the values defined in the file however if I run it with dockerlambda then i will get an error Unhandled Exception AWSLambdaInternalBootstrapLambdaUserCodeException An exception was thrown when the constructor for type SaleCycleEnrichmentsEarlyBirdsLambda was invoked Check inner exception for more details SystemReflectionTargetInvocationException Exception has been thrown by the target of an invocation SystemIOFileNotFoundException The configuration file appSettingsjson was not found and is not optional The physical path is varruntimeappSettingsjson at MicrosoftExtensionsConfigurationFileConfigurationProviderLoadBoolean reload at MicrosoftExtensionsConfigurationConfigurationRootctorIList providers at MicrosoftExtensionsConfigurationConfigurationBuilderBuild This error makes sense given that my settings file is in vartask not varruntime so there is an issue with exactly how the NET core runner invokes the function I have a workround make it optional and use an environment variable and am endeavouring to wrap my head around how the NET stuff works in order to possibly try and fix See here 