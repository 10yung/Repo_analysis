When using a custom scheme such as custom intraschema relative references will fail to resolve They only fail however in schemas referenced from the base schema passed to the validator Minimal Repro Example foobasejson json ref custombarjson foobarjson json definitions bar type number ref definitionsbar repropy python import jsonschema import json import os scheme custom def handlerurl prefix formatscheme asserturlstartswithprefix url url lenprefix with openospathjoinfoo url r as f return jsonloadf schema handlercustombasejson resolver jsonschemaRefResolverfromschemaschema handlersscheme handler errors jsonschemaDraft Validatorschema resolverresolveritererrors printlisterrors Repro Stacktrace Traceback most recent call last File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in resolvefragment document document part KeyError definitions During handling of the above exception another exception occurred Traceback most recent call last File privatetmpreprorepropy line in module printlisterrors File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in itererrors for error in errors File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in ref for error in validatordescendinstance resolved File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in descend for error in selfitererrorsinstance schema File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in itererrors for error in errors File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in ref scope resolved validatorresolverresolveref File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in resolve return url selfremotecacheurl File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in resolvefromurl return selfresolvefragmentdocument fragment File privatetmpreprolibpython sitepackagesjsonschemavalidatorspy line in resolvefragment Unresolvable JSON pointer r fragment jsonschemaexceptionsRefResolutionError Unresolvable JSON pointer definitionsbar Cause This is caused by a failure of urllib to allow relative paths in urljoin when scheme is not in usesrelatives As a result the call to selfurljoincache simply returns ref and the reference fails to resolve Stacktrace of cause of issue jsonschemavalidatorspy itererrors jsonschemavalidatorspy ref jsonschemavalidatorspy resolve urllibparsepy urljoin The cause of this bug was discussed in specifically by gazpachoking here as Possibly also do this for urljoin and add the scheme to urlparseusesrelative and urlparseusesnetloc too This would apply to python as well However this note was not addressed in which fixed System Info OS MacOS Python jsonschema Changes Schema exception handling Formatted errors I discovered that anyOf related errors can be very mistleading jobs must fail as correct is job Validating snippet above with would fail with a misleading error nodeset is a required property Failed validating required in schema required nodeset On instance jobs name foo That schema allows multiple value and nodeset happens to just one of several As you can see what user gets is an erros that makes no sense for him Official meta schema files has been changed since they got committed to the project This PR is to bring them in sync with official meta schema files This PR enables us to do easy diffs in the future Official Good news is draft and draft are pretty close to official files Files in jsonschemaschema has been reviewed a all elements are resorted to be in sync with element ordering of official schema files to enable easy PR review b formatting is now in sync with official schema c git commit history is inspected to find intended changed d patches of the jsonschema project are kept intact e rest is updated to become in sync with official meta schema files For easyer PR review i created separate commits on each step please review this PR commitbycommit Please execute your test before merge to master to ensure that everything works as expected You may want to check if your fail rate has changed If this PR undo an intended patch now stated in the commit history let me know i will reapply it update the PR BTW i have to deal with draft and draft JSON instances in a project that is the reason why i put efforts in these old meta schema files Hi Julian once again i want to thank you for this great validator To enable the crowd to easily use jsonschema in CI CD pipelines i implemented an automated build and release of a docker image which is available at This docker image is automatically scanned for security vulnerabilities with trivy You are warm welcomed to join the release process If your are interested in it i can grant you direct permissions at Just ping me Release cycle is very simple a change Dockerfile new version number b commit and tag commit with version number c push we use sticky version numbers to have the same result on subsequent build reruns of the same commit Feel free to link it in your github repo project website Alternative If you want to create your own namespaceorganisation at DockerHub feel free to grap my code and enable automation in your git repo Currently its not possible to install jsonschema offline as pip cannot found setuprequires dependencies See and Simply removing the option from setupcfg do the trick Add support to have the offending element within the instance reported via a JSON path This allows to have a standard way of identifying the element with the problem that can be used by other external CLI tools for example When jsonschema validates that a given object property is of type string and it is null in the data it outputs None None is not of type string No more information is shown especially not the property that failed to validate This makes finding the error with large schemas nearly impossible Example Schema schema type object properties foo type string Data foo null Output jsonschema i testdatajson testschemajson None None is not of type string I know its a big ask just letting you know Im pretty excited about the new draft and am eagerly awaiting support Thanks for all you do A CI build of ours pulled the new release and all validation is failing with messages like ugo does not match u s Building with does not have this issue Reproducer testjson json test testString schemajson json schema title Reproducer type object properties test type string pattern s dockerfile or just install locally dockerfile FROM alpine RUN apk add nocache pypip jq pip install jsonschema COPY build RUN jsonschema version RUN jsonschema buildschemajson i buildtestjson 