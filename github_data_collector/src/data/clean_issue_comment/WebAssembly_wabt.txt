See and Even if bulk memory is enabled it can be convenient to omit the DataCount section for MVP compatibility This change only includes the DataCount section when an instruction requires it either datadrop or memoryinit It is also omitted if there are no data segments Rather than doing a second pass on the instructions this implementation unconditionally writes the DataCount section but removes it when it is not needed This required adding a function to truncate a stream StreamTruncate With release the tool wat wasmexe with the command line parameter enablereferencetypes produce ever a DataCount section with zero entries Is this expected I would expected that an empty section is not written never to reduce size and prevent such problems Are there any workarounds with wat wasm to prevent this I know I can switch back to version Fixes thanks rathann This is a fun way to give somewhat meaningful names to sections containing strings In the case of pure binary sections this likely generates random characters but thats not any worse than the current generated names We currently have it as the ghpages branch but it will be easier to update if it was on master See im compiling rust project to wasm with wasmpack then converting resulting wasm to wat and trying to read it currently I can find functions by their original names but function params and variables lack original names so for this rust function rust pub fn addtwomyparam i i let myarg myparam myarg i have this wat wat func wasmdebugsymbolsaddtwoh f edd d type t param p i result i theres only auto generated names for paramsvars like p p l l etc but this is strange because Ive configured rust project to include DWARF debug symbols to wasm toml packagemetadatawasmpackprofiledevwasmbindgen dwarfdebuginfo true i can even see those myparam and myarg strings in target wasm file bash hexdump C wasmdebugsymbolsbgwasm grep A B my a f f f d scribeaddtwom b f d d f yparammyarga c f c e c rg retclang L apparently original names for paramsvars are included in wasm but wasm wat cannot find them also ive checked that wasm file in dev tools of chrome and firefox and i dont see original paramsvars there either i assume those browsers have their own wasm to wat converters also ive tried to write simple function in wat feed it to wat wasm and then feed resulting wasm to wasm wat back again and i see that custom names for params are preserved it means wasm wat can extract param names from wasm ok details summarysimple function in watsummary wat module type t func param i i result i func addTwo export addtwo type t param myparam i param p i result i i add localget myparam localget myparam details so i assume that problem is either in wasmpack which generates invalid debug symbols so wasm wat cannot extract them or in wasm wat which cannot read valid debug symbols from wasm any thoughts ive created minimum rust project for testing wasmdebugsymbolsbgwasm from wasmpack wasmdebugsymbolsbgwat from wasm wat Ran into this issue when reviewing some recent additions Currently the only documentation I could find was that we specify BasedOnStyle Chromium in clangformat This implicitly locks down a lot of things which good more explicit docs would be good The specific issue we ran into was the wabt uses a style that requires curly braces around conditional blocks but chromium which inherits from google style allows from single line conditional and conditional without curlys In general curly braces are not required for singleline statements We should be specific if we want to enforce this style I wasnt able to find much documentation about libwabtjs but I was able to piece this together from various sources Correctionselaborations are invited Usage Call either parseWatfilenamestring watSourcestring features object or readWasmbuffer Uint Array readDebugNamestrue The features object can contain any of the following boolean keys mutableglobals exceptions multivalue signextension satfloattoint simd threads tailcall bulkmemory referencetypes The calls to parseWat and readWasm will return an object wasm that supports the following methods wasmdestroy wasmresolveNames wasmvalidatefeatures wasmtoBinarylog boolean writedebugnames boolean log string buffer Uint Array wasmgenerateNames wasmapplyNames wasmtoTextfoldExprs boolean inlineExport boolean string UpdatingBuilding The file demolibwabtjs in the wabt git repository is periodically updated Its not clear how to do this manually oneself to incorporate recent changes to the repo Issue says that this can be done by running make emscriptenrelease which uses a target from the repos toplevel Makefile However I just now tried going into my emsdk folder updating it following the instructions here including the source emsdkenvsh command then cding into my wabt repo and trying make emscriptenrelease This fails with mkdir p outemscriptenRelease cd outemscriptenRelease cmake G Unix Makefiles UsersjimDocumentsCLOUDdevwasmwabt DCMAKETOOLCHAINFILEUsersjimDocumentsCLOUDdevwasmemsdkupstreamemscriptencmakeModulesPlatformEmscriptencmake DCMAKEBUILDTYPERelease CMake Error at UsersjimdevwasmemsdkupstreamemscriptencmakeModulesPlatformEmscriptencmake message Failed to fetch compiler version information with command Usersjimdevwasmemsdkupstreamemscriptenemcc v Process returned with error code Call Stack most recent call first optlocalsharecmake ModulesCMakeDetermineSystemcmake include CMakeListstxt project CMake Error CMake was unable to find a build program corresponding to Unix Makefiles CMAKEMAKEPROGRAM is not set You probably need to select a different build tool Configuring incomplete errors occurred make outemscriptenReleaseMakefile Error Is there a roadmap of typed function references and GC proposal support Tools like wasminterp or wasm c would be useful to test compilers while waiting for browser support 