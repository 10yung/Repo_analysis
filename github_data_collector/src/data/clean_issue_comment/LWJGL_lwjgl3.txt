Build was failing on the android branch due to an outdated URL for the maven repo Hi I just tried how far I could get with the new DriftFX integration using the nightly build via Maven on my MacBook Pro Retina macOS As an example I used the application HelloDriftFX from the demos I first tried it with OpenJDK and OpenJFX That compiled but failed at runtime I then tried it with Oracle JDK builtin JavaFX and the example worked giving me roughly FPS on my old MacBook from but Java crashes unexpectedly each time when I try to terminate the application via ESC To my knowledge OpenJDK cannot work because you would have to build DriftFX from the specific Java branch which seems to be a little bit outdated too Do you have any plans to support OpenJDK The crash when terminating on Java is not nice Is this a known bug or can anything be done against it The line libcabidylib Pure virtual function called is in red so I assume it is an error GLContext name drift surface GLVENDOR NVIDIA Corporation GLRENDERER NVIDIA GeForce GT M OpenGL Engine GLVERSION NVIDIA fps fps fps fps fps fps fps fps fps fps fps fps fps fps fps libcabidylib Pure virtual function called C INFO TransferModeManagercpp RegisterTransferMode Registering TransferMode Instance IOSurface as C INFO TransferModeManagercpp RegisterTransferMode Registering TransferMode Instance MainMemory as C INFO TransferModeManagercpp RegisterTransferMode Registering TransferMode Instance NoOp as C INFO Configurationcpp Initialize Loaded native driftfx configuration C INFO Configurationcpp Initialize debug C INFO Configurationcpp Initialize logLevel C INFO Configurationcpp Initialize useWinFallback LWJGL version SNAPSHOT and multiple other recent lwjgl builds LWJGL build Java version tested with multiple different java versions starting from to Platform Windows only so far havent tested on others Module Unsure I mainly use LibGDX not lwjgl but have had to come here after discovering a bug in lwjgl whatever the Spaceship demo uses When in windowed mode in LWJGL with glSwapInterval set to my FPS goes wild as shown in these three example gifs from different games Heres a printout of frame delta times in windowed mode during a buggy session Heres a printout of frame delta times in fullscreen mode from that same session Notice the extreme variations in windowed mode and the normalness of the fullscreen nonbuggy There are some extremely strange things about this issue It happens sometimes If I restart my computer theres maybe a chance that the bug will appear when running lwjgl games If my computer decides that this session of being powered on is going to be a buggy session then the bug appears of the time Otherwise it works normally if I dont get a buggy session The bug goes away completely in fullscreen regardless of if its a buggy session or not or if it is enabled from start or midgame The bug seems to be attached to the usage of my external monitor but I cant confirm this Im maybe sure of this My computer is more than capable of pushing frames to get these games way beyond fps With vsync disabled most games have ran in fps one game ran at fps Attempts made to fix this I have tried modifying Nvidia control panel settings for the games nothing seems to work internal graphics graphics card vsync other options in control panel I have updated all my drivers with no change one interesting thing that happened once was when I updated nvidia drivers midgame during a nonbuggy session it then became a hybrid of buggy and not buggy When tabbed out Id get fps fine when tabbed back in the bug would reappear Never have I seen this occur again Ive tried running this in a sandbox using Sandboxie the bug continued existing during a buggy session Have searched all over github issues for lwjgl and libgdx have searched stack overflow and forums asked multiple communities and gotten hours of help trying to find the bug to no avail I very much hope that someone here can offer me some answers point me in directions I could look or anything else of help I really appreciate any assistance with this issue and if theres more information you need Id be happy to provide whatever I can Hi from Gradle I was just checking how LWJGL is published and was delighted to see that you are already using the mavenpublish plugin I wanted to let you know that with Gradle we are supporting a new metadata format called Gradle Module Metadata that would allow you to publish metadata that knows about jars containing native code and would allows Gradle to automatically pick the correct native jar I actually used LWJGL as an example in our documentation to illustrate that use case I dont know how interesting this is for you but if you get your build configured to publish Gradle Module Metadata correctly it would make it really easy to use lwjgl as a dependency in a Gradle build like this thats a sample repository I created to demonstrated some use cases I am happy to help here if you are interested LWJGL version LWJGL build SNAPSHOT Build Java version openjdk OpenJDK Runtime Environment build postRaspbian Platform Linux Raspberry PI with Mesa rc Module GLFWGLES Running a program using GLFW GLES and fetching GLCapabilites from GLES will only show support for GLES and not GLES as expected Below is a snippet that will reproduce the error if GLFWglfwInit throw new IllegalStateExceptionUnable to initialize glfw GLFWglfwDefaultWindowHints GLFWglfwWindowHintGLFWGLFWVISIBLE GLFWGLFWFALSE GLFWglfwWindowHintGLFWGLFWRESIZABLE GLFWGLFWTRUE GLFWglfwWindowHintGLFWGLFWSAMPLES window GLFWglfwCreateWindowwidth height MemoryUtilNULL MemoryUtilNULL if window MemoryUtilNULL throw new RuntimeExceptionFailed to create the GLFW window GLFWglfwMakeContextCurrentwindow orglwjglsystemConfigurationOPENGLESEXPLICITINITsettrue GLEScreateGLgetFunctionProvider GLESCapabilities caps GLEScreateCapabilities The created caps will only have capsGLES set to true although the Mesa driver clearly reports GLES Update Requesting hard version of GLFWglfwWindowHintGLFWGLFWCONTEXTVERSIONMAJOR GLFWglfwWindowHintGLFWGLFWCONTEXTVERSIONMINOR Results in LWJGL GLFWVERSIONUNAVAILABLE error Description GLX Failed to create context GLXBadFBConfig The nanovg project has been archived and so it would be great if an alternative canvaslike rendering library was added that is actively maintained To this cause I would to put Intels fastuidraw project up for consideration Despite what the name implies this is an OpenGL canvas library Canvas libraries are extremely useful for quickly and easily drawing simple to very complex things Nanovg achieved this brilliantly with only lines of code needed to draw something on the screen in java Because of the big name attached to Intels fastuidraw the focus on performance and the goal of providing something close to what we have already seen from nanovg I believe it to be a good long term alternative Hello Currently only ARM and x is supported but it would be nice to support the OpenPOWER platform thats high performance and gaming capable An OpenPOWER compliant CPU would be the IBM POWER I dont exactly know whats really architecture specific into lwjgl but hopefully you can tell me that so I can go straight to the point if I want to solve that issue myself Thanks Havent tested I did up to ant compile in the build process but stopped after that since I dont have a native compiler on this pc