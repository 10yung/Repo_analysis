 What happened Even though productionyml has Flower configured traefiktoml doesnt contain anything related What shouldve happened instead Flower should be working with Docker Thank you for helping us out your efforts mean great deal to the project and the community as a whole Before you proceed Make sure to add yourself to CONTRIBUTORSrst through this PR provided youre contributing here for the first time Dont forget to update the docs presuming others would benefit from a concise description of whatever that youre proposing Description Whats it youre proposing Remove osenvironsetdefault quotDATABASEURL quot quotpostgres quotformatosenviron POSTGRESUSER osenviron POSTGRESPASSWORD osenviron POSTGRESHOST osenviron POSTGRESPORT osenviron POSTGRESDB osenvironsetdefault quotCELERYBROKERURL quot osenviron REDISURL from default Django console start script in PyCharm Rationale Why does the project need that Currently django console launch ends with KeyError because of osenviron POSTGRESUSER osenviron POSTGRESPASSWORD This env variables is never mentioned in cookiecutterdjango docs and quite confusing Actually its unnecessary to set this env variable in this script Use cases visualizations Better to see something once than to hear about it a thousand times Description Update files in docs directory according to the latest version of Sphinx and updated related documentation Rationale Update based on the file content generated by the latest version of sphinxquickstart Rendering custom widgets from the projects root template directory doesnt work out of the box See This changes the setting to use the same template finding logic that the TEMPLATES setting uses What happened On heroku we get errors for static files like Navigated to appherokuappcom Refused to apply style from because its MIME type texthtml is not a supported stylesheet MIME type and strict MIME checking is enabled appherokuappcom GET netERRABORTED Not Found What shouldve happened instead Static files should simply work on heroku Do whatever djangoheroku does Steps to reproduce make a djangocookiecutter app deploy to heroku attempt to load a page that uses css or js on heroku the env var DJANGOSETTINGSMODULE is configsettingsproduction Heroku outputs the following during build gp heroku Enumerating objects done Counting objects done Delta compression using up to threads Compressing objects done Writing objects bytes KiBs done Total delta reused delta remote Compressing source files done remote Building source remote remote Python app detected remote Python has released a security update Please consider upgrading to python remote Learn More remote Installing SQLite remote Sqlite successfully installed remote Installing requirements with pip remote remote python managepy collectstatic noinput remote static files copied to tmpbuild a c a e f e dbabba staticfiles postprocessed remote remote Discovering process types remote Procfile declares types release web worker remote remote Compressing remote Done M remote Launching remote Release command declared this new release will not be available until the command succeeds remote Released v remote deployed to Heroku remote remote Verifying deploy done remote Running release command b f ef bb master master we see that django is detected and heroku runs collectstatic automatically for django apps However the destination is tmpbuildnumberstaticfiles The django cookiecutter app looks for static assets in hostnamestaticCACHEcssjscompressedstaticfilejscss Maybe the production config needs to be updated to point to this tmp dir heroku makes Django support Whats it youre proposing How should it be implemented when will django be supported Why should this feature be implemented Better to see something once than to hear about it a thousand times What happened At it reads binsh so the script has no guarantee to deal with Bash and not just a POSIX shell but then uses Bash features eg set o pipefail What shouldve happened instead I would expect a use of usrbinenv bash or b a true POSIX shell script without use of Bashisms Thank you What happened I am using the precommit hooks as instructed at I have also chosen black as my formatter in the wizard as well as in my editor When I go to commit the following form class FooFormformsModelForm objective formsCharField requiredFalse widgetformsTextareaattrsplaceholder Objective class Meta model Foo fields objective I get the error gc Trim Trailing Whitespaceno files to checkSkipped flake Failed hookid flake fooformspy E missing whitespace after Thats for the CharField trailing comma in the keyword args What shouldve happened instead Flake should not complain about blacks formatting Steps to reproduce make a cookiecutter app and select black install precommit hooks make a form like mine and attempt to commit Solution Should we add What happened Multiple things Altough we set cloudprovider to None follwing is set in configsettingsproductionpy COMPRESSSTORAGE storagesbackendss boto S Boto Storage Compressed static files are not available via Whitenoise giving an error on page compressorexceptionsOfflineGenerationError You have offline compression enabled but key is missing from offline manifest You may need to run python managepy compress What shouldve happened instead Compress storage should be set to local configuration COMPRESSSTORAGE compressorstorageGzipCompressorFileStorage composeproductiondjangostart should be extended to this python appmanagepy collectstatic noinput python appmanagepy compress force python appmanagepy collectstatic noinput See for further information Steps to reproduce Set up project with following settings usedockery usewhitenoisey usecompressory cloudprovider None What happened I follow the instructions for deploying to heroku When I open the heroku app I see Internal Server Error When I review the docs I see T app web return selfrendercontext T app web File appherokupythonlibpython sitepackagesdjangotemplateloadertagspy line in render T app web return compiledparentrendercontext T app web File appherokupythonlibpython sitepackagesdjangotemplatebasepy line in render T app web return selfnodelistrendercontext T app web File appherokupythonlibpython sitepackagesdjangotemplatebasepy line in render T app web bit noderenderannotatedcontext T app web File appherokupythonlibpython sitepackagesdjangotemplatebasepy line in renderannotated T app web return selfrendercontext T app web File appherokupythonlibpython sitepackagesdjangotemplateloadertagspy line in render T app web result blocknodelistrendercontext T app web File appherokupythonlibpython sitepackagesdjangotemplatebasepy line in render T app web bit noderenderannotatedcontext T app web File appherokupythonlibpython sitepackagesdjangotemplatebasepy line in renderannotated T app web return selfrendercontext T app web File appherokupythonlibpython sitepackagescompressortemplatetagscompresspy line in render T app web return selfrendercompressedcontext selfkind selfmode forcedforced T app web File appherokupythonlibpython sitepackagescompressortemplatetagscompresspy line in rendercompressed T app web cachekey cachecontent selfrendercachedcompressor kind mode T app web File appherokupythonlibpython sitepackagescompressortemplatetagscompresspy line in rendercached T app web cachekey gettemplatetagcachekeycompressor mode kind T app web File appherokupythonlibpython sitepackagescompressorcachepy line in gettemplatetagcachekey T app web templatetagsss compressorcachekey mode kind T app web File appherokupythonlibpython sitepackagesdjangoutilsfunctionalpy line in get T app web res instancedict selfname selffuncinstance T app web File appherokupythonlibpython sitepackagescompressorbasepy line in cachekey T app web selfcontent selfmtimesencodeselfcharset T app web File appherokupythonlibpython sitepackagesdjangoutilsfunctionalpy line in get T app web res instancedict selfname selffuncinstance T app web File appherokupythonlibpython sitepackagescompressorbasepy line in mtimes T app web for kind value basename elem in selfsplitcontents T app web File appherokupythonlibpython sitepackagescompressorcsspy line in splitcontents T app web basename selfgetbasenameelemattribs href T app web File appherokupythonlibpython sitepackagescompressorbasepy line in getbasename T app web baseurl selfstoragebaseurl T app web File appherokupythonlibpython sitepackagesdjangoutilsfunctionalpy line in inner T app web selfsetup T app web File appherokupythonlibpython sitepackagescompressorstoragepy line in setup T app web selfwrapped getstorageclasssettingsCOMPRESSSTORAGE T app web File appherokupythonlibpython sitepackagesdjangocorefilesstoragepy line in getstorageclass T app web return importstringimportpath or settingsDEFAULTFILESTORAGE T app web File appherokupythonlibpython sitepackagesdjangoutilsmoduleloadingpy line in importstring T app web module importmodulemodulepath T app web File appherokupythonlibpython importlibinitpy line in importmodule T app web return bootstrapgcdimportname level package level T app web File frozen importlibbootstrap line in gcdimport T app web File frozen importlibbootstrap line in findandload T app web File frozen importlibbootstrap line in findandloadunlocked T app web File frozen importlibbootstrap line in callwithframesremoved T app web File frozen importlibbootstrap line in gcdimport T app web File frozen importlibbootstrap line in findandload T app web File frozen importlibbootstrap line in findandloadunlocked T app web File frozen importlibbootstrap line in callwithframesremoved T app web File frozen importlibbootstrap line in gcdimport T app web File frozen importlibbootstrap line in findandload T app web File frozen importlibbootstrap line in findandloadunlocked T app web ModuleNotFoundError No module named storages T app web Nov GET HTTP pip freeze heroku run pip freeze Running pip freeze on foobar up run Hobby amqp argon cffi Babel billiard celery certifi cffi chardet coreapi coreschema defusedxml Django djangoallauth djangoanymail djangoappconf djangocelerybeat djangocompressor djangocrispyforms djangoenviron djangomodelutils djangoredis djangotimezonefield djangorestframework flower gunicorn idna importlibmetadata itypes Jinja kombu MarkupSafe moreitertools oauthlib Pillow psycopg pycparser pythoncrontab pythondateutil pythonslugify python openid pytz rcssmin redis requests requestsoauthlib rjsmin six sqlparse textunidecode tornado uritemplate urllib vine whitenoise zipp You are using pip version however version is available You should consider upgrading via the pip install upgrade pip command When I log in with heroku run bash and run pip list Djangocompressor is listed correctly What shouldve happened instead I should have seen the home page same as in local development Steps to reproduce run app locally using custom bootstrap compilation and celery deploy app using heroku cli and these instructions skip the aws steps heroku configset DJANGOAWSACCESSKEYID and the other aws configs be sure to run the celery steps celerybrokerurl and psscale worker 