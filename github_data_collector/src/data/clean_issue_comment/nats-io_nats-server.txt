 Feature Requests Resolving SRV Record for routing addresses Use Case Its in AWS ECS env I would like to setup a small seed container with SRV record and let other eatsservers connecting to the seed server at startup However natsserver seems cannot resolve SRV records Proposed Change Resolve SRV record first and then try to connect to route addresses Just like what natsjs client does Who Benefits From The Changes Who works in a limited IP addresses env X Defect Feature Request or Change Proposal Defects Make sure that these boxes are checked before submitting your issue thank you X Included natsserver DV output c INF Starting natsserver version c DBG Go build version go c INF Git commit beda c WRN Plaintext passwords detected use nkeys or bcrypt c INF Starting http monitor on c INF Listening for leafnode connections on c DBG Get non local IPs for c DBG ip c INF Listening for client connections on c INF Server id is ND MSDWDWTMJEX V TDS O Q ZEY W ORS T HOM PR BBP ZSYCA c INF Server is ready c DBG Get non local IPs for c DBG ip c INF Starting natsserver version c DBG Go build version go c INF Git commit beda c WRN Plaintext passwords detected use nkeys or bcrypt c INF Starting http monitor on c INF Listening for client connections on c INF Server id is NCIHCZWAIQUH OK BMEV WEEX IEBKUFXAPRFRCE GVEWRRNC WBX c INF Server is ready c DBG Get non local IPs for c DBG ip c DBG Trying to connect as leafnode to remote server on c c DBG lid Leafnode connection created c DBG lid Remote leafnode connect msg sent c DBG lid Leafnode connection created c INF Connected leafnode to c c TRC lid CONNECT tlsrequiredfalsenameNCIHCZWAIQUH OK BMEV WEEX IEBKUFXAPRFRCE GVEWRRNC WBX c TRC lid LS testservice c TRC lid LS ldsqtioyTeG dZPgE uYM rsy c TRC lid LS testservice c TRC lid LS ldsqtioyTeG dZPgE uYM rsy c DBG cid Client connection created c TRC cid CONNECT verbosefalsepedanticfalseuserapass REDACTED tlsrequiredfalsenameNATS Sample Responderlanggoversion protocol echotrue c TRC cid PING c TRC cid PONG c TRC cid SUB testservice NATSRPLY c TRC cid PING c TRC cid PONG c DBG lid LeafNode Ping Timer c TRC lid PING c TRC lid PING c TRC lid PONG c TRC lid PONG c DBG lid LeafNode Ping Timer c TRC lid PING c TRC lid PING c TRC lid PONG c TRC lid PONG c DBG cid Client Ping Timer c TRC cid PING c TRC cid PONG c DBG cid Client connection created c TRC cid CONNECT verbosefalsepedanticfalseuserapass REDACTED tlsrequiredfalsenameNATS Sample Requestorlanggoversion protocol echotrue c TRC cid PING c TRC cid PONG c TRC cid SUB INBOXW P kJjrbQVrbmzAqqk V c TRC cid PUB testservice INBOXW P kJjrbQVrbmzAqqk V cn D c TRC cid MSGPAYLOAD foo c TRC cid PING c TRC cid MSG testservice INBOXW P kJjrbQVrbmzAqqk V cn D c TRC cid PONG c TRC cid PUB INBOXW P kJjrbQVrbmzAqqk V cn D c TRC cid MSGPAYLOAD response text c TRC cid MSG INBOXW P kJjrbQVrbmzAqqk V cn D c DBG cid Client connection closed c TRC cid DELSUB c DBG cid Client connection created c TRC cid CONNECT verbosefalsepedanticfalseuserbpass REDACTED tlsrequiredfalsenameNATS Sample Requestorlanggoversion protocol echotrue c TRC cid PING c TRC cid PONG c TRC cid SUB INBOX ynIPqChOQMSroNEZqndLx c TRC lid LS INBOX ynIPqChOQMSroNEZqndLx c TRC cid PUB testservice INBOX ynIPqChOQMSroNEZqndLxHhaycK D c TRC cid MSGPAYLOAD foo c TRC cid MSG testservice Rie QZJ bq K c TRC lid LS INBOX ynIPqChOQMSroNEZqndLx c TRC cid PUB Rie QZJ bq K c TRC cid MSGPAYLOAD response text c TRC cid MSG INBOX ynIPqChOQMSroNEZqndLxHhaycK D c DBG cid Client connection closed c TRC cid DELSUB c TRC lid LS INBOX ynIPqChOQMSroNEZqndLx c TRC lid LS INBOX ynIPqChOQMSroNEZqndLx c TRC lid DELSUB INBOX ynIPqChOQMSroNEZqndLx c DBG cid Client connection created c TRC cid CONNECT verbosefalsepedanticfalseusercpass REDACTED tlsrequiredfalsenameNATS Sample Requestorlanggoversion protocol echotrue c TRC cid PING c TRC cid PONG c TRC cid SUB INBOXTfzSpQyvrMigTw TP cMHt c TRC lid LS INBOXTfzSpQyvrMigTw TP cMHt c TRC cid PUB testservice INBOXTfzSpQyvrMigTw TP cMHt sUrsio c TRC cid MSGPAYLOAD foo c TRC lid LMSG testservice INBOXTfzSpQyvrMigTw TP cMHt sUrsio c TRC lid LS INBOXTfzSpQyvrMigTw TP cMHt c TRC lid LMSG testservice INBOXTfzSpQyvrMigTw TP cMHt sUrsio c TRC lid MSGPAYLOAD foo c TRC cid MSG testservice Rie QZJx JGBo c TRC cid PUB Rie QZJx JGBo c TRC cid MSGPAYLOAD response text c TRC lid LMSG INBOXTfzSpQyvrMigTw TP cMHt sUrsio c TRC lid LMSG INBOXTfzSpQyvrMigTw TP cMHt sUrsio c TRC lid MSGPAYLOAD response text c TRC cid MSG INBOXTfzSpQyvrMigTw TP cMHt sUrsio c DBG cid Client connection closed c TRC cid DELSUB c TRC lid LS INBOXTfzSpQyvrMigTw TP cMHt c TRC lid LS INBOXTfzSpQyvrMigTw TP cMHt c TRC lid DELSUB INBOXTfzSpQyvrMigTw TP cMHt c DBG cid Client connection created c TRC cid CONNECT verbosefalsepedanticfalseuserdpass REDACTED tlsrequiredfalsenameNATS Sample Requestorlanggoversion protocol echotrue c TRC cid PING c TRC cid PONG c TRC cid SUB INBOX dvNgB mAb aZo PLaWJz c TRC cid PUB testservice INBOX dvNgB mAb aZo PLaWJzWyXS UnR c TRC cid MSGPAYLOAD foo c TRC lid LMSG testservice RBBa rhQOCWj c TRC lid LMSG testservice RBBa rhQOCWj c TRC lid MSGPAYLOAD foo c TRC cid MSG testservice Rie QZJtVfoKl c TRC cid PUB Rie QZJtVfoKl c TRC cid MSGPAYLOAD response text c DBG cid Client connection closed c TRC cid DELSUB Gracefully stopping press CtrlC again to force Stopping c done Stopping c done x Included a Minimal Complete and Verifiable example Versions of natsserver and affected client libraries used See logs The go examples are as of commit f f c dc bf ef bd bf c OSContainer environment Windows nanoserver Steps or code to reproduce the issue dockercomposeyml version services cluster image nats nanoserver containername c command c C mount c DV ports expose volumes C mount networks cluster restart always cluster dependson cluster image nats nanoserver containername c command c C mount c DV ports expose volumes C mount networks cluster restart always networks cluster cluster config port monitorport accounts A users user a password a exports service testservice B users user b password b imports service account A subject testservice leafnodes port authorization account B cluster config port monitorport accounts C users user c password c exports service testservice D users user d password d imports service account C subject testservice leafnodes remotes urls natsleafc account C Starting a natsrply start cluster Account A service natsrply s natsaalocalhost testservice response text Sending request to account D natsreq s natsddlocalhost testservice foo Expected result Request is sent from account D on cluster to service listening at testservice on Account A on cluster and the requester gets response text back Actual result The service listening at testservice gets a request of foo but no message is returned to requester Instead nats timeout for request Feature Requests Hi we would like to switch the logging format to structured json For easier analysis of logs If you would welcome this feature we could do it and create a pull request Use Case Projects with automated log analysis Proposed Change Add a new configuration to create a structured logger shell wget yum install natsserverv amd rpm y after install natserver how to start it i am using it in production I think there would be value in getting additional information about acks specifically what set got it and what the sequence is A message can conceivably go to multiple set and callers will wait for all acks and want to ensure all got it reference recent slack conversations though I still think overlapping message sets are a bad idea Someone will want to keep a audit trail of what messages in what sets belong to some transaction to later make it much easier to do GDPR erases over the data where you need the specific set IDs For a kv type of use case the JetStreamMsgBySeqPre needs a set sequence so knowing this is valuable there too else I am not really sure how to get this easily Kind of for discussion if this is a thing we want or not I think we do you had some concerns that this would be too much additional overhead OPCUA is a standard protocol for Industrial Automation OPCUA has published the specification for PUBSUB OPCUA PUBSUB over MQTT is attracting lot of interest Is there a possibility that we can have OPCUA PUBSUB over NATS going forward Defect x Feature Request or Change Proposal Feature Requests Add support for remote configuration backend like etcd consul etc Allow configuration in these backends to take effect live Use Case Allow config changes to be orchestrated from a remote back end so that config updates are easier Right now changing the configuration requires config files updates on all servers and a sighup to each one The can be real cumbersome does not scale well and is a slow process Proposed Change Make the configuration portions of the config a little more modular Implement everything config related config objects config parses backend clients an internal package separate from the rest of the server code Define an interface for the backend so that the server code does not care what the actual backend technology is Who Benefits From The Changes Orgs with large and or frequently changing environments Alternative Approaches NA Other comments I might be able to contribute at least some part of this work Currently when using leafnode remote connections the server only reports the first successful attempt one with INF level which can be confusing in case there is a reconnect to another node as it may look like the server is still connected With this change now we report whenever the leafnode endpoint changes in case there are multiple URLs hcl listen http leafnodes remotes urls nats nats credentials tmpstancreds INF Starting natsserver version RC INF Git commit not set INF Starting http monitor on INF Listening for client connections on INF Server id is NBPDYXCODBGJIE FHT PO DGDO DSJTQW V Q ZDE K IPBBSQKRD INF Server is ready INF Connected leafnode to INF Reconnected leafnode to Signedoffby Waldemar Quevedo wallysynadiacom X Documentation added if applicable Tests added X Branch rebased on top of current master git pull rebase origin master Changes squashed to a single commit described here Build is green in Travis CI You have certified that the contribution is your original work and that you license the work to the project under the Apache license Changes proposed in this pull request Add message for when remote leafnode connection successfully reconnects cc natsiocore This relaxes the nonce signing checks when a bearer token is provided PR is a preview and depends on JWT changes Usecase I want to use node nats cluster and have found it to be working I want to confirm if it is appropriate to use such type of model What could be the possible downsides of this approach I will be deploying my own splitbrain algorithm which will make sure subscriber always talk to publisher of same nats server Also I understand nats uses mesh clustering any specific clustering algorithm used for it Can you please explain a little how exactly it works