Taking a quick look at this crate it generates a separate FooBuilder for the Foo struct youve derived However that does not fit my use case where I dont want to build to a structure Id like to add the setters onto the structure I am deriving directly My use case is creating a builder that implements amethystcorebundleSystemBundle where the build method does not create a new object but rather registers a bunch of things with an existing World object I see the builderbuildfnskip attribute for making my own build function but it still generates an extra useless structure Other use cases could be generating a builder for a structure in a foreign crate or for an FFI object rust macrouse extern crate derivebuilder mod channel deriveDefault Builder Debug buildersetterinto struct Channel token i specialinfo i a whole bunch of other fields fn main builder pattern go go go let ch channelChannelBuilderdefault specialinfo u token build unwrap println ch error E struct ChannelBuilder is private srcmainrs let ch channelChannelBuilderdefault error E method build is private srcmainrs build The current implementation of derivebuilder exposes too much of the crates internal behavior across the boundary between derivebuilder and derivebuildercore This results in unnecessary minor version bumps as seen in rust error E no method named unwrap found for type in the current scope cargoregistrysrcgithubcom ecc db ec derivebuilder srclibrs envloggerinitunwrap Looks like envloggerinit just panics and doesnt need to be unwrapped manually anymore starting from v Id like the builder to be instantiated by a custom method that requires some initial arguments and Id like it to be impossible to start with FooBuilderdefault Is this currently possible Currently the crate has a fairly scattershot feature list in READMEmd but no reference for each setting its compatibility and its function Questions How should we explain to newcomers the value of the crate Is a usage example best for that or do we need to explain why people shouldnt make structs with all public fields Is serders a model for best practices around procmacro documentation What level of documentation should be included in READMEmd misdreavus or steveklabnik are there prior discussions on this that we canshould reference Would it be possible to have special setter methods for Vec fields That is instead of just a field for setting the whole vec at once the user could optin to also generating setters that push an element of type T onto a field with type VecT The generated code could look something like struct FooBuilder bars OptionVecBar impl FooBuilder pub fn barsVALUE IntoVecBar mut self value VALUE mut Self selfbars Somevalueinto self pub fn barVALUE IntoBar mut self value VALUE mut Self if let Someref mut bars selfbars barspushvalueinto else selfbars Somevec valueinto self Ideally Id like to have this for any pushable type but until we have collections traits I think having it just for Vec could be helpful I would like to use in my code the useful buildersetterskip option to write a custom setter for a struct field Expanding macros I noticed though that such field is marked in the builder as stdmarkerPhantomData and I dont know how to deal with it Other generated setters assign actual value to common Option how can the same be done with PhantomData Its been a while since I worked on this crate And I have to admit that right now Im focusing on other things At the end of the day theres not enough time for me to maintain and improve this crate right now If anyone is interested to pick up the crate maintenance and can prove to be trustworthy Id be ready to hand it over including cratesio ownership cc TedDriggs PS It took me some time to reach this conclusion but as they say You cant have the cake and eat it rust deriveBuilder struct GenericT buildersetterskip implicit default pub ipsum T builderdefault explicit default pub dolor T fails with error E the trait bound T stddefaultDefault is not satisfied deriveBuilder the trait stddefaultDefault is not implemented for T help consider adding a where T stddefaultDefault bound note required by stddefaultDefaultdefault 