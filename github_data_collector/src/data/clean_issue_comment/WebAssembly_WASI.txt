The Wasm in person meeting is coming up Do we want to have subgroup breakout meeting Or perhaps a lunch dinner meeting Lets use this ticket to propose agenda items Are there topics that could benefit from being discussed in person This makes it more consistent with naming through the rest of the witx specs Ken Thompson was once asked what he would do differently if he were redesigning the UNIX system His reply Id spell creat with an e The buffer contains arbitrary bytes not UTF encoded bytes so use u rather than char Fixes Remove processcputimeid and threadcputimeid Some implementations will not have one wasm nanoprocess per OS process or one wasm thread per OS thread making it difficult to implement processcputimeid meaningfully Also the concept of cputime available in most host environments isnt easy to directly connect to what we might expect cputime to mean for wasm code These correspond to CLOCKPROCESSCPUTIMEID and CLOCKTHREADCPUTIMEID in POSIX which are optional As part of a larger effort to answer questions about what capabilitybased design means whether WASI is intending to be POSIXoriented and other things heres a draft of a design principles document This also includes a section on virtualization which takes some ideas from but modifies it to focus on using interface types and the linking proposal to implement virtualization Feedback is welcome Edit Click here to read as rendered html The discussion about enforcing ensuring determinism in WASI has already been started and touched upon in a couple of issues here and there bytecodealliancewasmtime if I missed any please feel free to mention it in this thread Id like to gather all the knowledge ideas perceived issues etc here creating essentially a metaissue that we could use to track this and come up with solutions or at least guidance as to what direction to take Ill try and describe all potential sources of nondeterminism below leaving out sockets for now though Feel free to correct me add more etc Randomness and entropy This is an obvious one and from what I understand the current consensus is to have it require a capability see and bytecodealliancewasmtime for more details randomget also will get its own module in the upcoming WASI snapshot wasiephemeralrandomwitx wasiephemeralrandomwitx Clocks Access to systemthreadprocess clocks will also lead to nondeterminism and as far as I understand like in the randomness case the consensus is to have it require a capability see and bytecodealliancewasmtime for more details Also as in the randomness case clocktimeget will get its own module in the upcoming WASI snapshost wasiephemeralclockwitx wasiephemeralclockwitx File accessmodificationchange times This one concerns four WASI syscalls that may introduce nondeterminism into the picture namely fdfilestatget fdfilestatsettimes pathfilestatget and pathfilestatsettimes The nondeterminism may sneak in if the client app makes use in some way of the access atim modification mtim or change ctim times of a file descriptor which can change between any two runs of the app Im not sure what the best approach to handle this would be so Id like to start some brain storming on this Could we only perhaps populate the filestat time values if a clock capability was requestedprovided Or introduce a different type of capability Readdir This one is potentially of lesser importanceimpact since I assume that on the same host fdreaddir syscall should return the same ordering of the entriesaccording to the macOS man of readdir Note that the order of the directory entries vended by readdir is not specified Some filesystems may return entries in lexicographic sort order and others may not I assume similar will hold on all nixes so as long as the same host with the same filesystem is used the order should be the same between the app runs The problem however may become more pronounced in distributed settings where wed like to execute an app on two unknown and potentially different hosts and expect deterministic comparable results on both There already was some discussion about ordering of results seeking and fdreaddir in general in Poll Im adding that one in since I remember having a discussion with marmistrz about this one and he was convinced he could generate entropy with a clever use of polloneoff hence bringing in nondeterminism into the picture marmistrz perhaps you could shed more light on this Same as for randomget environget probably also should require a capability as pointed out by erights in an issue in the Wasmtime repo This was brought up in a recent meeting after sunfishcode mentioned it in an issue and erights filed an issue about it in the Wasmtime repo As Dan mentioned in the call on November theres no mechanism yet for asking for such a capability lukewagner I think you had thoughts on mechanisms for these kinds of capabilities too around Interface Types IIRC buf should not have been changed to char since it is random bytes not valid UTF 