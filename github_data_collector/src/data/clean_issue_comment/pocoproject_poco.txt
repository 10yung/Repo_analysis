 pocoNetincludePocoNetSocketImplh virtual void setReceiveTimeoutconst PocoTimespan timeout Sets the send timeout for the socket Sets the send timeout for the socket Rather than sets the receive timeout Was not sure if implementation should be put in cpp or in h with inline So I did the same thing as the two operators that was already there Poco handles DST as s however there exists also negative DST offset s Example is EuropeDublin timezone where poco erroneously returns offset instead of during winter with recent tzdatatzinfo package under Linux This line of code causes this behaviour For background on this see Chrome is changing the default value for the SameSite HTTPCookie attribute to Lax on Feb Currently POCOs HTTPCookie code does not support setting the SameSite attribute RFC bis Firefox is heading in this direction too NOTE There is currently a bug affecting Mac OSX and iOS which causes SameSiteNone cookies to be inadvertently treated as SameSiteStrict and therefore not sent with crosssite requests See Until this is fixed SameSiteNone may not work properly on Safari Can we add support for the SameSite attribute There are values for it None Lax and Strict Im not sure what POCOs behavior should be for the Safari case above I heard other older browsers suffer the same problem so youd have to NOT set the cookie instead of setting SameSiteNone on those as well I wanted to build the samples After examining the CMakeListtxt file I determined I needed to add the DENABLETESTSON option to the cmake command However with that argument supplied the build fails because it tries to copy from a nonexistent directory Linking CXX executable binEncodingstestrunner Error copying directory from tmppocoEncodingstestsuitedata to tmppococmakebuildEncodingstestsuitedata EncodingstestsuiteCMakeFilesEncodingstestrunnerdirbuildmake recipe for target binEncodingstestrunner failed As a workaround manually adding an empty directory in the right place will fix it mkdir Encodingstestsuitedata fix a dead lock when called unregisterConnector twice in same time lock When socket connected NObservernotifyNotification pNf lock SocketConnectoronWritableWritableNotification pNotification SocketConnectoronConnect SocketConnectorunregisterConnector SocketReactorremoveEventHandlerconst Socket socket const PocoAbstractObserver observer wait to unlock When delete SocketConnector SocketConnectorSocketConnector SocketConnectorunregisterConnector lock SocketReactorremoveEventHandlerconst Socket socket const PocoAbstractObserver observer SocketNotifierremoveObserverSocketReactor pReactor const PocoAbstractObserver observer NotificationCenterremoveObserverconst AbstractObserver observer NObserverdisable wait to unlock Test code maybe execute only on my machine I will remove test code if you dont need it from It changed source and destination branch While looking at the CMakeListstxt in order to improve them I noticed already nice improvements being present which are not in Eg the namespaced aliases like PocoFoundation Will this come in please I would also suggest to using the proposed naming conventions usggested in the Professional CMake book in order to avoid name conflicts Because source consumption of the libaries is a very important use case FetchContent For example in our codebase we were character short for a name clash we have a Util library and poco has Utils The suggestion in the book is to prefix with an underscore the libraries something like PocoFoundation with alias PocoFoundation What do you think I can always try to help out This changes the format produced by OpenSSL from being separated by to obiltschnig aleksf Is the change in formatting acceptable Closes I am using Poco Websocket for my project I am getting exception SSL connection unexpectedly closed sometimes when I try to read Frames with receiveFrame Initially I was thinking there could be some issue with the Server However I came across this link It looks like Poco could have some issuesbugs and that could be reason for this exception I am unable to move forward with this issue in my mind Below is the code part that sometimes throws that exception PocoNetHTTPSClientSession httpsClienturigetHost urigetPort getSSLContext PocoNetHTTPRequest requestPocoNetHTTPRequestHTTPGET PocoNetHTTPMessageHTTP PocoNetHTTPResponse response httpsClientsetTimeoutPocoTimespan appendheadersrequest regFailCount TODO Use sharedptr webSocket new PocoNetWebSockethttpsClient request response while true int len webSocketsetReceiveTimeoutPocoTimespan millisecond if len webSocketreceiveFramebuffer sizeofbuffer flags continue Process the buffer Poco Version is The current implementation of X CertificatesubjectName doesnt return return non ASCII UTF characters Instead it returns them in hex escaped form If the subject conains Z hlerweg as the locality the expected return would be LZ hlerweg However X CertificatesubjectName returns LZ xC xA hlerweg Using subjectNameX CertificateNIDLOCALITYNAME properly returns Z hlerweg So i think the issue lies in the OpenSSL function X NAMEoneline used here which according to the documentation is strongly discouraged in new applications Test case to reproduce issue Poco Version and master