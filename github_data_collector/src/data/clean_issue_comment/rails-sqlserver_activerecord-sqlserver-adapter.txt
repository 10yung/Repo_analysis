Ive fixed the logic I would happily alter the unit tests but I couldnt see any for this class Im not really sure what the fix is so Ill describe the symptom and my resolution At some point I had added a defaultscope orderprimarykey ASC to all my sql server record I didnt recall why until I accidentally removed it and our ci tests using metaskillsmssqlserverlinuxrailssha c b d a fcb de db c cfc e c fc d f be e ece started failing SELECT VERSION Microsoft SQL Server RTM X Aug Copyright C Microsoft Corporation Developer Edition bit on Linux Ubuntu LTS gem versions activerecordsqlserveradapter tinytds with TinyTdsError Invalid column name TicketNo UniqueID ItemNo ORDER BY Tkscale TicketNo UniqueID ItemNo ASC ie the table Tkscale has a composite primary key on the three fields TicketNo UniqueID ItemNo which is getting executed as a single key Which is somewhat odd because Ive defined the primary key in the record selfprimarykey UniqueID This was getting triggered where by a findby query or a wheretake and I traced it from the rails querymethods HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordconnectionadaptersabstractschemastatementsrb in primarykey HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordconnectionadaptersschemacacherb in primarykeys HOMErvmrubiesruby librubygems gemsactiverecordsqlserveradapter libarelvisitorssqlserverrb in primaryKeyFromTable HOMErvmrubiesruby librubygems gemsactiverecordsqlserveradapter libarelvisitorssqlserverrb in makeFetchPossibleAndDeterministic HOMErvmrubiesruby librubygems gemsactiverecordsqlserveradapter libarelvisitorssqlserverrb in visitOrdersAndLetFetchHappen HOMErvmrubiesruby librubygems gemsactiverecordsqlserveradapter libarelvisitorssqlserverrb in visitArelNodesSelectStatement HOMErvmrubiesruby librubygems gemsarel libarelvisitorsreducerb in visit HOMErvmrubiesruby librubygems gemsarel libarelvisitorsreducerb in accept HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordconnectionadaptersabstractdatabasestatementsrb in tosql HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordconnectionadaptersabstractdatabasestatementsrb in selectall HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordconnectionadaptersabstractquerycacherb in selectall HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordqueryingrb in findbysql HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordrelationrb in execqueries HOMErvmrubiesruby librubygems gemsgoldiloader libgoldiloaderactiverecordpatchesrb in execqueries HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordrelationrb in load HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordrelationrb in records HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordrelationfindermethodsrb in findtake HOMErvmrubiesruby librubygems gemsactiverecord libactiverecordrelationfindermethodsrb in take to require activerecordconnectionadapterssqlserverschemastatements ruby def primarykeystablename primaries primarykeysselecttablename primariespresent primaries identitycolumnstablenamemap name end as used by require arelvisitorssqlserver ruby def primaryKeyFromTable t return unless t columnname connectionschemacacheprimarykeystname connectionschemacachecolumnshashtnamefirsttrysecondtryname columnname t columnname nil end and was able to resolve by just patching the primaryKeyFromTable and leaving the connectionschemacacheprimarykey alone ie diff require arelvisitorssqlserver module Arel module Visitors class SQLServer ArelVisitorsToSql private def primaryKeyFromTable t return unless t NOTEBF Always use the schemacacheprimarykeytablename to be get one key else we get generated sql with invalid order clauses TinyTdsError Invalid column name TicketNo UniqueID ItemNo ORDER BY Tkscale TicketNo UniqueID ItemNo ASC columnname connectionschemacacheprimarykeystname columnname connectionschemacacheprimarykeystnametryfirst connectionschemacachecolumnshashtnamefirsttrysecondtryname columnname t columnname nil end end end end but that interacted poorly with table without a composite primary key since it got the first character in the key name from pkfirst so instead I patched module ActiveRecordConnectionAdaptersSQLServerSchemaStatements or add to it primarykey with the diff below as compared to the ar schema statement diff def primarykeytablename pk primarykeystablename pk suppresscompositeprimarykeypk tablename pk pkfirst unless pksize pk end per def suppresscompositeprimarykeypk tablename return pk unless pksize ActiveRecordBaseloggerdebug do WARNINGstripheredoc WARNING Active Record does not support composite primary key tablename has composite primary key Composite primary key is ignored WARNING end pk end Hi wpolicarpo Now this gems test is broken It occurs a lot of NoMethodError undefined method split for nilNilClass because of Rails backtrace cleaner silences all backtrace So I use Rails backtrace in first commit And next commit supresses minitest warning But test fails with some TinyTdsError yet I will try to success the test in next pull request The tinytds lib might return false on execute when the call fails This caused exceptions when active is called after the connection was lost fixes Hi there We have connection issues in our production environment It is supposed to be an easy fix but we cannot safely rescue the exception because it is billed as an ActiveRecordStatementInvalid exception I add my exception translation where it is supposed to be It is not feasible to emulate the same issue in tests so I simply dont add any test Hopes you guys could release a quick fix version soon Does tinytds v running on ruby rails x support sql server v It worked for me till sql server v but not beyond that My activerecordsqlserveradapter version is Included changes from serkaniyigun Since rails has been released I changed the gem depency from rails beta to Tests are failing TinyTdsError Cannot insert explicit value for identity column in table tasks when IDENTITYINSERT is set to OFF This could be as simple as setting IDENTITYINSERT to ONOFF Doesnt help with activerecord tests that fail before do connectionexecuteSET IDENTITYINSERT on table ON after do connectionexecuteSET IDENTITYINSERT table OFF Im currently attempting to get the master branch tests to work as there are a bunch of tests that are failing I have managed to resolve many of the errors in testcases folder but it appears the errors Im now getting are mostly ActiveRecord tests from coercedtestsrb that havent been implemented My knowledge on how to resolve some of these at this point is very limited due to Ive not collaborated on many projects Whats the best way to share my current cloned project changes to allow others in assisting fixing these Creating a pull request Current Status bundle exec rake test ONLYSQLSERVER Finished in s runss assertionss runs assertions failures errors skips bundle exec rake test ONLYACTIVERECORD Finished in s runss assertionss runs assertions failures errors skips An example of a test I tried to correct from one of the errors mentioned above would be the one below coercetests testpluckwithfromincludesquotedoriginaltablename def testpluckwithfromincludesquotedoriginaltablenamecoerced relations Postjoinsauthororderid subquery PostfromPostquotedtablename USE INDEX PRIMARY includesauthororderid assertequal relationspluckid subquerypluckid end Error RelationTesttestpluckwithfromincludesquotedoriginaltablenamecoerced ActiveRecordStatementInvalid TinyTdsError Ambiguous column name id SELECT id FROM posts USE INDEX PRIMARY LEFT OUTER JOIN authors ON authors id posts authorid ORDER BY id ASC binrails test mntcUsersmcdonalddDocumentsopensourcesqlservermaintestcasescoercedtestsrb Now to my knowledge Id expect having to change the following line assertequal relationspluckid subquerypluckid to assertequal relationspluckid subquerypluckauthorsid But Im not sure if that really tests for what its intended to test for So this is where Im currently stuck Actual Questions Ive covered a couple of things here so Ill summarize into these two questions Whats the best way for me to share my current changes so that others might be able to assist me in correcting these tests Can I do a pull request with the changes even though nothing is really totally resolved What would be the approach to fixing the new test I added RelationTesttestpluckwithfromincludesquotedoriginaltablenamecoerced As I would expect the Ambiguous column id name error if I had not specified which table the id column was supposed to come from 