We use Typoheus and accidentally set the timeout configuration env variables as strings The result was timeout wasnt set correctly was set to instead This implements support for libcurls noproxy option as described by issue I want this pull request to be merged after typhoeusethon PR is merged So I think I just realized that the cache functionality does not really work if you are using streaming onbody callback because the body is never set in the response I am wondering if there shouldnt be some sort of exception or something here to prevent people from making the same mistake I did Just ran into a caching issue that I found out was only happening on production Well the first issue is that I think there is a bug in libtypheouscacherailsrb cachewriterequest response expiresin requestcachettl defaultttl It should be requestcachekey correct But even after fixing that there is a secondary issue Id like to mention If you have the New Relic gem installed it automatically injects a unique XNewRelicTransaction header into all outgoing requests in order to instrument them This effectively nukes the caching ability of Typheous since that unique value makes its way into the cachekey by way of hashablestringforoptions So Im going to have to make my own Cache class anyway which is fine but since a lot of people are probably using the stock TypheousCacheRails class and many of them are probably using New Relic it might be nice to have a warning somewhere in the docs if you use an APM since the issue doesnt appear in devtest environments New Relic is disabled there by default That or implement a special cachekey for TypheousCacheRails that doesnt include the headers and save Rails users the trouble Thoughts Problem In some cases when request fails returned code ie HTTP status code is Since isnt semantically valid return code we should return nil instead Do you accept PRs Happy to contribute one Steps to reproduce request TyphoeusRequestnew method get acceptencoding gzip deflate httpversion httpv maxredirs followlocation true sslverifypeer true sslverifyhost timeout verbose true tcpnodelay true response requestrun puts responsecode Somewhat similar request to but much less dangerous Most other Ruby HTTP clients support the SSLCERTFILE environment variable out of the box as a way to specific a CA file that should be used to verify TLS certificates From some quick testing this is currently supported by nethttp HTTParty restclient excon mechanize gem install probably lots more Unfortunately it doesnt seem to be supported by Typhoeus Itd be very useful if it was or if there was some other clear equivalent option ie an easy way to configure a CA to trust processwide There is a link in the README for available cURL options Maybe I misunderstood something but it doesnt seem like the linked page contains any useful options apart from escape and multipart For instance how do I pass the arbitrary CURLOPT option It looks like libcurl supports an idle timeout But AFAICT its not exposed in typhoeus Were hoping to use typhoeus as a faraday adapter for calls between microservices behind ELBs and the ELB idle timeout is seconds so wed prefer to set the faradaytyphoeuslibcurl idle timeout to seconds