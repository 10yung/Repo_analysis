 Fire now try to parse flat args and kwargs but often this not convenient Example import fire def testargs kwargs printkwargs printargs fireFiretest python mainpy arg arg kwarg kwarg kwarg kwarg arg arg In some cases will be much more simple have opportunity to set args kwargs like this python mainpy args arg args arg kwargs kwarg kwargs kwarg Fix Use dir instead of inspectgetmembers to get available methods of given object Refer for explanation Is it sensible to define a default command if dose not lead to any conflict python in script foopy def foo printfoo def bar printbar def main printmain It the rule is running a command with the same name to the script then command foopy will run foo function by default If the rule is running command main that was defined then run it Based on my understanding of the PrintResult function it seems like the help page with possible methods will pop up if returning an object even if help isnt passed It seems like the help page should only pop up if explicitly added Here is an example I came across I set up a fire script to connect to a sql database and run a sql file or code and return the connections cursor Sometimes I want want to run a file creating a table or insert data without calling another method Other times I may want to call fetchone to see one row of results from a query I dont want man pages to pop up the times where I dont call another method on the cursor but that is what happens I know that whether I am using a class or a function fire will internally handle the exception and show the help if there is an issue So considering fireobj fireFireSomeClass how can I access that exception from fireobj I know that fireobj points to a new instance of SomeClass but I am trying to capture and handle the exceptions that fire is handling internally when it shows the help or exceptions When I wrap it in a try except I can see that the exception is FireExit but I dont want the pythonfire help message to print which is printing from the code in the library I want to instead raise my own exception but even better access the exception that happened inside SomeClass which is trigger the error dbieber Hi i have a foopy file compiled to foopyd by cython then use fireFire to make it a cli like below instead output i get seems because cython treat functions as PyObject with first argument self after i checked the generated c file any idea to make this work except wrap it one by one by another normal python function not want to wrap because maybe many functions in foopy later and barpy will be compiled to barpyd called by another mainpy then the wrapper become cython function too python barpy from foo import import from foopyd not foopy fireFire python foopy def testfna b c printa b c c fooc for foopyd static PyObject pyxpw testfn foo fooPyObject pyxself PyObject pyxargs PyObject pyxkwds I am having an issue with pythonfire when a method has arguments with default values Consider the following code import fire class SomeClassobject def initself selfa selfb def methodaself selfa A return self def methodbself xB selfb selfa x return self def strself return selfb if name main s SomeClass smethodbmethoda printsb this prints B correctly fireFireSomeClass As seen in the comments in the printsb it is printing B correctly But when i change the order of the methods being called in fire from the command line I am getting the odd behavior Example python xpy B correct python xpy methoda methodb Here B AB both correct python xpy methodb x B methoda Here B B again both correct python xpy methodb methoda Here B methoda this is not correct It should print B here also As you can see with the last example if i call methodb which has an argument with a default value it prints methoda instead of B as expected My question is How can I use a method that has a default argument value first in this type of scenario without passing in xsomething In short how can i make python xpy methodb methoda properly print B Second question is how can I show the method args in the help Currently it shows nothing when there is a default value assigned When I do methoda methodb I do not have to pass xB but if I move the method with the default argument value up it doesnt work as seen in the example Traceback most recent call last File multilabelrunnersresnetrunnerpy line in module main File multilabelrunnersresnetrunnerpy line in main fireFireresnet File usrlocallibpython distpackagesfirecorepy line in Fire componenttrace Firecomponent args parsedflagargs context name File usrlocallibpython distpackagesfirecorepy line in Fire treatmentcallable File usrlocallibpython distpackagesfirecorepy line in CallAndUpdateTrace component fnvarargs kwargs File usrlocallibpython distpackagestorchnnmodulesmodulepy line in call result selfforwardinput kwargs TypeError forward missing required positional argument x When I rewrite pytorch nnModule I use x as params to override forward function This bugs appear I have test If I do not use Fire it works well I suppose that because fire did not support this kind of override Or someone can tell me how to fix it Thanks When running a script with no arguments the user is presented with a manstyle page listing the available commands The natural way to dismiss this message is to either hit q or controlc The former works fine but the latter triggers a KeyboardInterrupt which when returning to the shell has lost the cursor and typed text no longer appears Ive tested this on both MacOS and Linux the same error occurs in both terminal and iterm Take the following example python import fire def myfunc return True if name main fireFire Run it with shell python testpy Then hit controlc and try to type something in the returned shell Youll see what I mean 