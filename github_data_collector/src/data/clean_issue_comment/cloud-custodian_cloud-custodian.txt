some of the service apis will return back all resources if we issue an api call for an empty set of ids when using getresources we should explicitly check for an empty set and return in the base describe source or query resource manager getresources method closes Hi Team Is there a way that I can resize an EC based on resource tag Am trying to implement AWS trusted advisers recommendations and am tagging ec with current size as well as recommended size Example Tags cSize t large rSize t small Document says hardcoding the type map typemap c xlarge c xlarge m xlarge m xlarge Can we get this mapping from the instance tags first step to actually exposing these in documentation and schema validate they are valid and fixes those that are not this also includes a data source of valid iam permissions from the iam permission generator and a script to update that data set we store this in the repo guideline is unit tests should run offline in a prettyprinted ordered json format kb as it will enable minimal updates and readable diffs The alternative of gzip data set k feels as though it would grow larger over time with changes Note the dataset is missing elbv permissions so those are whitelisted in the permission validity checking test and will need additional scrutiny in prs Maybe Im simply misunderstanding what each of these filters do but I found that present and not absent return different counts Cloud Custodian version custodian version Steps to reproduce I created users in an aws account and a policy named Test I attached the Test policy to user Then I created the following custodian policy name iamuserswithouttestpolicy resource awsiamuser description Number of users without Test policy filters type policy key PolicyNameTest value absent Now executing the policy custodian run d outputdir out playpoliciesyml custodianpolicyINFO policyiamuserswithouttestpolicy resourceawsiamuser regionuswest count time count Im new to custodian so I didnt realize that this means Im expecting that no users will have this Test policy Fine lets change the value to present instead name iamuserswithouttestpolicy resource awsiamuser description Number of users without Test policy filters type policy key PolicyNameTest value present Now this is weird Im expecting this to be the opposite count I have users and user has the Test policy attached so the count should be right Lets see custodian run d outputdir out playpoliciesyml custodianpolicyINFO policyiamuserswithouttestpolicy resourceawsiamuser regionuswest count time count Well thats weird the count was actually What if we try changing the custodian policy from present to not absent name iamuserswithouttestpolicy resource awsiamuser description Number of users without Test policy filters not type policy key PolicyNameTest value absent Running this policy custodian run d outputdir out playpoliciesyml custodianpolicyINFO policyiamuserswithouttestpolicy resourceawsiamuser regionuswest count time count Ok so I finally got what I expected But now Im really confused because present is different from not absent Is this a bug or am I just not understanding the nuances of custodian Since each resource already has a permissions block It would be nice to expose those permissions using the following command custodian schema awsec This would allow easier creation of least privilege IAM roles for policies instead of a blanket IAM role We could even have builtin iam role validation for a given policy to make sure the iam role has the required perms custodian validate iamrole cloudcustodian policysomepolicyyml References Id like to test out my template before sending an email Currently to do this I need to Disable my mailer lambda by disabling the cw alarm trigger Run my policy to createupdate the policy lambda Manually execute my policy lambda to send a message to SQS Dump out the message in SQS using awscli to get policylambdamessagejson Base decode the Messages Body key to get policylambdazlib Uncompress the zlib using gzip to get policylambdajson Delete the message from the SQS queue Reenable my mailer lambda c nmailerreplay p policylambdajson T config maileryml If I can print out the plain SQS message from the policy I could avoid using the above steps completely The JSON structure of the sqs message seems straightforward enough to script for json event null accountid snip account snip region uswest executionid snip executionstart policy jsonpolicyhere name c nmailertest resource sqs etc action jsonactionhere type notify template testtemplate priorityheader subject testing the c n mailer etc resources outputted resources json here Could this be integrated into c nmailerreplay custodian or a separate script Reference Separate script Per Security Hub added native support for the following resources Note they continue to use their own bespoke naming convention thats completely idiosyncratic Custodian supported these in security hub via the Other generic resource investigate Also see if we can chat with the service team to have better uniformity to integration its very bespoke and labor intensive compare to ssm ops center which has more features and more resource support AwsElbv LoadBalancer AwsKmsKey AwsIamRole AwsSqsQueue AwsLambdaFunction AwsSnsTopic AwsCloudFrontDistribution During onhours when instances are being started and there is an error errorCode ServerInsufficientInstanceCapacity errorMessage We currently do not have sufficient t alarge capacity in the Availability Zone you requested useast d Our system will be working on provisioning additional capacity You can currently get t alarge capacity by not specifying an Availability Zone in your request or choosing useast a useast b useast c useast f Instances that are not t alarge are also not being started I understand this is not a code issue but a corner case Because of this we have to turn instances manually and preventing from using offhours closes 