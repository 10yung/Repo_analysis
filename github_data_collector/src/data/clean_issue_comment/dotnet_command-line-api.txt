I love the way DragonFruit works This style will work for of cli work Great work Thanks Chad This will address Many interactive programs will match commands by prefix In GDB for example dis disas disassem etc are all equivalent to disassemble Having an outofthebox option that could enable this command matching behavior would make the experience of using SystemCommandLine for such scenarios much smoother I imagine it could be implemented as a middleware function Please see the changes Ive made so far for to access the return value of a command Im not sure if this is the desired approach for accomplishing this but hopefully this helps explain further what Im trying to accomplish A lot of the tests fail now though so there must be something problematic about what Ive done I would appreciate any recommendations for alternate desired implementation approaches to take I added a InvocationContextResultObject to store the return value of a command I did not try to set the value on the InvocationContextInvocationResult because it seems that property is reserved for storing parsing results and I wasnt sure if that made sense to use and it has the IInvocationResult interface which I couldnt just set to the return value It would be nice to use this API with WPF and future WinUI apps to parse out arguments I have created basic apps that do this within the Appxamlcs file but would probably be better if there was support from here Can we add an option to display the help text if NOTHING is filled out Summary Im trying to do something that Im not sure if theres already a recipe for Im trying to make an option that works like dotnet run p path to project Basically Finds a project file in the current directory if option is unspecified Find a project file in the specified directory if the argument specified is a directory Uses the argument specified if the argument is a file Validation that we found a single project file and it exists Im using this option in multiple places so its pretty important to me that these errors are reported by the parameter binding system not by code that I write after getting the option values bound What I Tried My code is here What I tried is creating an argument bound to FileInfo and then taking control of the conversion process This doesnt meet all my requirements because it doesnt default to the current directory conversion delegates dont run unless a value is passed in at the command line So I added a default value however you dont have the chance to report validation errors when setting the default value The validation error can occur when defaulting if theres or more than one project file in the current directory So I added a validator At this point it seems to cover all of my bases but its pretty complex and nonobvious My default value has to noop when it hits a validation error so that my validator can report it etc What Id like It be nice if there were a way to specify a Funcsomething FileInfo for my option that can Run regardless of whether a the option is specified Be responsible for converting the unparsed value to a FileInfo Add my own validation errors All of these capabilities already exist but theyre part of three different extensibility points Hi I created an application that targets netcoreapp and references the AzureStorageBlobs package together with xml PackageReference IncludeSystemCommandLineDragonFruit Version alpha PackageReference IncludeSystemCommandLineExperimental Version alpha The application runs as expected with F from Visual Studio but if I publish it in release mode dotnet publish c Release and then try to run it I get the following exception Unhandled exception SystemReflectionReflectionTypeLoadException Unable to load one or more of the requested types Could not load file or assembly AzureCore Version Cultureneutral PublicKeyToken e e c The located assemblys manifest definition does not match the assembly reference x at SystemReflectionRuntimeModuleGetTypesRuntimeModule module at SystemReflectionRuntimeAssemblygetDefinedTypes at SystemCommandLineDragonFruitEntryPointDiscovererFindStaticEntryMethodAssembly assembly String entryPointFullTypeName at SystemCommandLineDragonFruitCommandLineExecuteAssemblyAsyncAssembly entryAssembly String args String entryPointFullTypeName String xmlDocsFilePath IConsole console at AutoGeneratedProgramMainString args in I can see that the package AzureCore is referenced by AzureStorageBlobs The assembly in the publish directory has the following FullName AzureCore Version Cultureneutral PublicKeyToken e e c Currently having to repeat this pattern everywhere cs internal class changerequestNew internal static Command command new Command new Create a new change request static changerequestNew commandAddOptionnew Optionnew param p Argument new Argumentstring Required true ALWAYS HAVING TO ADD THIS PATTERN commandAddOptionnew Optionnew confirm c Required false commandHandler CommandHandlerCreate Always adding confirmation parameter to handlers string param bool confirm handle paramparam confirmconfirm internal static void handlestring param bool confirm ConsoleWriteLineNew change request for param ALWAYS HAVING TO ADD THIS PATTERN if confirm Interactiveconfirmation ConsoleWriteLineSkipping execution return ConsoleWriteLineCreating new change request internal class Interactive internal static bool confirmation bool repeat true while repeat ConsoleWriteLineAre you sure you want to continue yesno string output ConsoleReadLine if output null return false output outputTrimToLower if outputLength continue Can be deceptively more complex than this else if output yes output y return true else return false return false Would be nice to have a default yesno confirmation handler in srcSystemCommandLineCommandcs if a given property Confirmation true