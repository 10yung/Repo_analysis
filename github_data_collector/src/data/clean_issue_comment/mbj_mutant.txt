Hey mbj I asked you a question about this on twitter previously but failed to debug it myself Im experiencing a mismatch in the results between local machine and CI and unfortunately Im getting failures in the latter The failure is about neutral mutation Neutral failure Original code was inserted unmutated And the test did NOT PASS Your tests do not pass initially or you found a bug in mutant unparser Subject AST sdef execute sargs sbegin sif ssend nil templatepath nil sreturn ssend sconst nil YAML loadfile ssend nil templatepath Unparsed Source def execute unless templatepath return end YAMLloadfiletemplatepath end Local setup MacOS w Ruby pass Docker minidebstretchbased w Ruby pass CI setup Exactly same docker image running on Gitlab CI EE fail At worst I will move this method elsewhere but Id still like to understand the cause Apart from that mutant has been absolutely stellar and helped me improve the codebase and I wanted to say thank you for sharing it Close A feature request I have would be to add two flags to the mutant cli skipsubject pendingsubject The skipsubject flag should perform exactly the same as ignoresubject where it doesnt bother to mutate the subject nor run the subjects tests This would be reserved for methods where attempting to mutate will cause an infinite loop and never finish The pendingsubject flag should mutate the subject and run its tests and report failure if the subject is fully mutation covered The expectation is that these methods are safe to mutate but are expected to have alive mutations Both of these flags should work with wildcards as well as explicit targets The reason for these two flags is that we noticed we were using ignoresubject for both cases but we want mutant to tell us when something is covered so we can adjust configuration so we can begin asserting the methods stay covered in the future We believe that less than of the methods we are currently ignoring should be unconditionally skipped Original not desugared if foo doa elsif bar dob else doc end mutation if bar dob else doc end In a commit with a removal of a method the location of the removed code was used for subject selection The method directly below had no coverage and was selected which caused the build to fail mutant replaces the second argument to raise with self leading to infinite recursion if that raise call is within tos as raise tries to stringify that argument minimal repro bash echo class C def tos raise TypeError foo end end crb echo RSpecdescribeC ittos expect Cnewtos to raiseerrorTypeError foo speccspecrb bundle exec mutant require c use rspec C this one raises ArgumentError marshal data too short but Ive also seen EOFError there might be other cases where inserting self within tos causes problems To decrease the time until we get valuable feedback mutant should print alive mutations to the console while it is still running Using mutant git commit remote revision d f bbd fde d de a a e ef The pattern as I see it is a neutral failure is reported then a EBADF bad file descriptor error on some file Sometimes the file reported is a gem sometimes a code file Note the error at top indicates fptrfinalizeflush and the error below indicates iofillbuf PrepareProgressneedstempthemesfinishedUserstjprojectsAOTapplibstageprogressprepareprogressrb rspec speclibstageprogressprepareprogressspecrb PrepareProgressdeterminecomplete has calculate the progress of a virgin cycle rspec speclibstageprogressprepareprogressspecrb PrepareProgressdeterminecomplete has calculate the progress of a real cycle neutralPrepareProgressneedstempthemesfinishedUserstjprojectsAOTapplibstageprogressprepareprogressrb d fb Neutral failure Original code was inserted unmutated And the test did NOT PASS Your tests do not pass initially or you found a bug in mutant unparser Subject AST sdef needstempthemesfinished sargs sbegin sif ssend ssend nil themes blank sreturn nil slvasgn active ssend ssend nil activethemes size slvasgn temp ssend nil numtempthemes ssend nil addstats slvar active ssend slvar active slvar temp ssend sconst nil I n t sstr finishtempthemes shash spair ssym temp slvar temp Unparsed Source def needstempthemesfinished if themesblank return end active activethemessize temp numtempthemes addstatsactive active temp I ntfinishtempthemes temp temp end runtime rspec speclibstageprogressprepareprogressspecrb PrepareProgressdeterminecomplete has calculate the progress of a virgin cycle rspec speclibstageprogressprepareprogressspecrb PrepareProgressdeterminecomplete has calculate the progress of a real cycle Test Output Randomized with seed PrepareProgress determinecomplete has calculate the progress of a real cycle FAILED Failures PrepareProgressdeterminecomplete has calculate the progress of a real cycle FailureError assessmentgrammarrecommendationsreordernildistinctpluckcode ErrnoEBADF Bad file descriptor fptrfinalizeflush Userstjrvmrubiesruby librubygems gemsactiverecord libactiverecordassociationsjoindependencyrb applibaastatsrb in pointsneedinggrammarfixed applibstageprogressprepareprogressrb in pointsneedinggrammarfixed applibstageprogressprepareprogressrb in needsgrammarreview applibstageprogressprepareprogressrb in toplevelcyclechecks applibstageprogressprepareprogressrb in determinecomplete applibstageprogressstageprogresscalculatorrb in block in completeness applibstageprogressstageprogresscalculatorrb in each applibstageprogressstageprogresscalculatorrb in completeness speclibstageprogressprepareprogressspecrb in block levels in top required specspechelperrb in block levels in top required specspechelperrb in block levels in top required Userstjbundleruby mutant d f bbd flibmutantenvrb in block in runmutationtests Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in call Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in block in startchild Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in fork Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in startchild Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in call Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in block levels in call Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in block in with Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in pipe Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in with Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in block in call Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in block in with Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in pipe Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in with Userstjbundleruby mutant d f bbd flibmutantisolationforkrb in call Userstjbundleruby mutant d f bbd flibmutantenvrb in runmutationtests Userstjbundleruby mutant d f bbd flibmutantenvrb in kill Userstjbundleruby mutant d f bbd flibmutantparallelworkerrb in call Userstjbundleruby mutant d f bbd flibmutantparallelworkerrb in block in call Userstjbundleruby mutant d f bbd flibmutantparallelworkerrb in loop Userstjbundleruby mutant d f bbd flibmutantparallelworkerrb in call Caused by ErrnoEBADF Bad file descriptor iofillbuf fd Userstjrvmrubiesruby librubygems gemsactiverecord libactiverecordassociationsjoindependencyrb applibaastatsrb in pointsneedinggrammarfixed Finished in seconds files took minutes seconds to load example failure Failed examples rspec speclibstageprogressprepareprogressspecrb PrepareProgressdeterminecomplete has calculate the progress of a real cycle Randomized with seed 