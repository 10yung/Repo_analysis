 Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details add new method to achieve fromPairs During the process of dropping lodash for hexo project we have faced serious obstacles when replacing lodashassignIn with native javascript We have tried the example function from the README but soon run into serious performance regression After some investigations it turns out that the ObjectgetPrototypeOf is the culprit After trying ObjectgetPrototypeOf ReflectgetPrototypeOf even the deprecated proto the performance regression remains We finally drops lodashassignIn with a pure javascript alternative without bringing in any performance regression It proves that forin is still the fastest way to iterate over the properties of an object When immediate is true the debounced func will never called javascript lodash var abc functiona b c return a b c var curried curryabc curried curried curried Curried with placeholders curried nonready for review native example const curry foo len foolength args if argslength len return fooargs const foo foo nextArgs fooargs nextArgs const len foolength argslength return curryfoo len const add curryabc a b c add add add To be discussed placeholders support curryRight Just seeing if theres interest in adding issue creation was inspired from isFunctionx could be written as typeof x function isStringx could be written as typeof xvalueOf string Would be happy to create PRs for these if this is something youd like to add I think it would be super helpful to have an ESLint rule that checks for chain usage It breaks the mold of the other methods rules in that it has no direct translation to ES it just goes away so I can see why it doesnt exist But itd still be nice to see where in code it is being used via ESLint especially since it appears to break treeshaking with lodash Adding lodash clamp function native replacement to READMEmd