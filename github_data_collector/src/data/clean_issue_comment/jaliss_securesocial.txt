According to maven the latest version of secure social only supports Play It seems as though a new version from the master branch is needed I was looking at adding secure social to a play web app but the documentation is not clear on which version of secure social should be used Versions Stable for Play x for Play x for Play for Play available via the official Play module repository and under the x branch on GitHub Snapshots SecureSocial for Play x is built from master SecureSocial for Play x is built from masterplay x Note you can use snapshots to get access to the latest changes but keep in mind that things might break there When trying to use the SS views in my Java play implementation I get the following templating error ambiguous implicit values both method requestHeader in object PlayMagicForJava of type playapimvcRequestHeader and value request of type playapimvcRequestHeader match expected type playapimvcRequestHeader Are there any known solutions orgapachecommonslang reflectTypeUtils is no longer a dependency most changes related to playlibsconcurrentHttpExecutiondefaultContext no longer available lets keep this PR open while is not released Is there any persistent implementation of UserService available The only implementation I saw was the inmemory version from the demo Implementing UserService myself makes me nervous as a bug in eg link could be a serious vulnerability For a few months weve had issues with a small number of users unable to login via facebook We havent been able to recreate this and Im going to guess of users dont have this issue It is definitely only a subset of users Ive got the output from our logs as May doarama appweb playapilibsjsonJsResultException JsResultExceptionerrorsListListValidationErrorerrorexpectedjsstringWrappedArray May doarama appweb at playapilibsjsonJsValueanonfun applyJsValuescala May doarama appweb at playapilibsjsonJsValueanonfun applyJsValuescala May doarama appweb at playapilibsjsonJsResultclassfoldJsResultscala May doarama appweb at playapilibsjsonJsErrorfoldJsResultscala May doarama appweb at playapilibsjsonJsValueclassasJsValuescala May doarama appweb at playapilibsjsonJsUndefinedasJsValuescala May doarama appweb at securesocialcoreprovidersFacebookProviderfillProfileFacebookProviderscala May doarama appweb at securesocialcoreIdentityProvideranonfunauthenticate applyIdentityProviderscala May doarama appweb at securesocialcoreIdentityProvideranonfunauthenticate applyIdentityProviderscala May doarama appweb at scalautilEitherfoldEitherscala May doarama appweb at securesocialcoreIdentityProviderauthenticateIdentityProviderscala May doarama appweb at securesocialcontrollersProviderControlleranonfunhandleAuth applyProviderControllerscala May doarama appweb at securesocialcontrollersProviderControlleranonfunhandleAuth applyProviderControllerscala May doarama appweb at playapimvcActionBuilderanonfunapply applyActionscala May doarama appweb at playapimvcActionBuilderanonfunapply applyActionscala May doarama appweb at playapimvcActioninvokeBlockActionscala May doarama appweb at playapimvcActionBuilderanon applyActionscala May doarama appweb at playapimvcActionanonfunapply anonfunapply anonfunapply applyActionscala May doarama appweb at playapimvcActionanonfunapply anonfunapply anonfunapply applyActionscala May doarama appweb at playutilsThreadswithContextClassLoaderThreadsscala May doarama appweb at playapimvcActionanonfunapply anonfunapply applyActionscala May doarama appweb at playapimvcActionanonfunapply anonfunapply applyActionscala May doarama appweb at scalaOptionmapOptionscala May doarama appweb at playapimvcActionanonfunapply applyActionscala May doarama appweb at playapimvcActionanonfunapply applyActionscala May doarama appweb at playapilibsiterateeIterateeanonfunmapM applyIterateescala May doarama appweb at playapilibsiterateeIterateeanonfunmapM applyIterateescala May doarama appweb at playapilibsiterateeIterateeanonfunflatMapM applyIterateescala May doarama appweb at playapilibsiterateeIterateeanonfunflatMapM applyIterateescala May doarama appweb at playapilibsiterateeIterateeanonfunflatMap anonfunapply applyIterateescala May doarama appweb at playapilibsiterateeIterateeanonfunflatMap anonfunapply applyIterateescala May doarama appweb at scalaconcurrentimplFuturePromiseCompletingRunnableliftedTree Futurescala May doarama appweb at scalaconcurrentimplFuturePromiseCompletingRunnablerunFuturescala May doarama appweb at akkadispatchTaskInvocationrunAbstractDispatcherscala May doarama appweb at akkadispatchForkJoinExecutorConfiguratorAkkaForkJoinTaskexecAbstractDispatcherscala May doarama appweb at scalaconcurrentforkjoinForkJoinTaskdoExecForkJoinTaskjava May doarama appweb at scalaconcurrentforkjoinForkJoinPoolWorkQueuerunTaskForkJoinPooljava May doarama appweb at scalaconcurrentforkjoinForkJoinPoolrunWorkerForkJoinPooljava May doarama appweb at scalaconcurrentforkjoinForkJoinWorkerThreadrunForkJoinWorkerThreadjava May doarama appweb error application securesocial error retrieving profile information from Facebook Any idea on why only some accounts would be erroring with this issue Existing documentation states that playmailer is used and that smtp configuration should go in smtp section of securesocialconf However it looks like the current solution is to put it in playmailer section of applicationconf Most IdentityProviders are selfcontained only depending on bits and pieces of Play I propose breaking out the selfcontained parts of modulecode out into a securesocialcore then abstracting the bits of Play that are actually required configuration HTTP caching localization into adapters that can bridge the gap from different versions of play and different libraries entirely Given the recent forplay it seems like this will become more important as Play continues to evolve since specialized adapter code would be able to be defined in the consumers project the different versions of securesocialcore being versioned completely separate from Play This is just a proposal Im curious to see how many would be interested in something like this v M java templating doesnt appear to work if you want to reuse existing securesocial templates like providerscalahtml or mainscalahtml although most would provide their own main view as these both require an implicit playapii nMessages object as an input This implicit Messages var conflicts with the Java playi nMessages implictMessages variable passed into templates by PlayMagicForJava It cant be made explicit as then the method signature in the ViewTemplates subclass conflicts with the superclass causing a compile error This is pretty serious issue because Messages need to be passed to basically every view template and with securesocial pasing them implicitly they conflict with the play framework Messages in java also passed implicitly but through a slightly different namespace With this issue I cant see an obvious way to get customised views working for v M for Java developers Customising views apparently works for scala and I believe this is because play for scala uses playi nMessages not playapii nMessages Play Java automatically uses PlayMagicForJava to convert explicit and implicit vars between java and scala objects for view templates so its not possible to avoid this namespace scope collision There must be an explicit implicit var structure for view templates that allows customisation in both scala and java see also 