Problem Currently we have implementation assumptions coded into the LM API For example the DSEnableDecoderWithLM call assumes there are two separate files one for the LM binary and one for the trie It also assumes there are two float hyperparameters alpha and beta If we keep it as is then any change in the underlying external scorer technology requires breaking the API Complication We dont currently have a concrete idea of how the underlying scorer implementation would change so we dont know what the future API would need Proposal Any problem in computer science can be solved with another layer of indirection Separate the decoder loading and the hyperparameter setting into separate API calls so the latter can be made deprecatednoop in case we move to a new implementation where it isnt needed Figure out a way to package our current KenLM solution into a single file instead of separate LMbinary and trie files We can then iterate on the underlying file format and handle upgrades without breaking the API for example by supporting two implementations at the same time until a future x release The new API would look something like this cpp int DSEnableExternalScorerModelState ctx const char scorerModelPath int DSSetScorerAlphaBetaModelState ctx float alpha float beta Ideally we can push default alpha and beta values into the LM package so that most users dont have to call DSSetScorerAlphaBeta makes upgrading easier For an even more flexible approach where we can deprecate individual options and add new options without breaking the API we can also do something like cpp enum DSScorerOptions DSSCORERALPHA DSSCORERBETA int DSSetScorerOptionIntModelState ctx int optionCode int optionValue int DSSetScorerOptionFloatModelState ctx int optionCode float optionValue int DSSetScorerOptionStrModelState ctx int optionCode char optionValue Implementation details KenLM takes file paths everywhere for loading the LM binary file so encapsulating it in an archive is hard to do without patching KenLM What we can do instead is append the trie and any extra dataconfiguration to the end of the LM binary file making a single file that still loads with the KenLM API and we can then load the trie from the correct offset We can then embed default alphabeta values in the trie file header which we already control This is hacky but the goal here is just to move to a single file so that we can iterate on the underlying binary file format without breaking the API A future solution could use a cleaner packaging solution but the point is that its invisible to API users x Update KenLM vendored code x Stop including vocabulary data in LMbinary x Refactor Scorer so that trie generation can be performed by generatetrie directly x Make generatetrie take the vocabulary directly as input instead of extracting it from the LM x Adapt generatetrie to generate new package format as a single file x Adapt Scorer to load the new format x Include default alpha and beta hyperparameters in trie header Refactor DeepSpeech API to load a single path and make hyperparameter setting optional Current platforms status x LinuxARMv RPi x LinuxARM x Android ARMv x Android ARM Android x not published x LinuxAMD x MacOSAMD x WindowsAMD Create Mozilla ML WebSite with collected blog posts from the groups members Enhancement of preexisting training materials Need to adapt coderepositorieswebsites to match new branding and validate everything is working So this can affect the timing of other tasks here 