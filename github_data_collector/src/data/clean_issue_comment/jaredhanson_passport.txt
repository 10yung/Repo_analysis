Im managing authentication using passport in my appa sailsjs app I am using redis as storage for persistent session management using connectredis Expected behavior Whenever user authenticates using username and password a session key should be stored in redisused to authenticate further requests without the need of usernamepassword Further requests should not create any new session key entries in redis unless user logs out Actual behavior New entries are created in redis for every request Steps to reproduce Set up the following environment and log in the user and make subsequent requests check redis keys I have reported this issue with sails and connectredis and have shared steps I used for debugging here and here As discussed on sails issues it is an issue in passport Environment Operating System Linux Node version Passport version Passport auth strategy passportlocal Sails version connectredis version Link to delegated authentication in documentation under OAuth is broken Expected behavior Link should redirect to an article Actual behavior Receive a error Steps to reproduce Click the delegated authentication link in documentation under OAuth is broken Environment Operating System NA Node version NA passport version NA I would like to write a custom strategy that validates requests based on a cookie The cookie can expire but contains sufficient information that I can refresh the auth but this changes the cookie value I would like this refresh process to be transparent to the client so my strategy should be able to set a new cookie when necessary but only the request to strategies not the response Strategies can optionally specify that they would like to receive the request if the same was implemented for the response then it would be backward compatible for existing clients as no additional arguments would be provided by default The inelegant workaround is to provide the refreshed data in the user and then use additional middleware to extract that data and set cookies as necessary The decoupling is a bit of a mess here though as it makes it more complex to understand and easier to mess up eg by not resetting the cookie in the middleware Related to discussion issue but it seems like the best implementation would be a new feature so added here as a please do this rather than how do I do that Expected behavior Strategies should have access to responses Actual behavior Strategies do not have access to responses Steps to reproduce NA Environment NA Good night I was starting at authentication on nestjs on the official site and after i build it the following type error appear nodemodulestypespassportindexdts error TS Type RequestDictionarystring does not satisfy the constraint IncomingMessage Type RequestDictionarystring is missing the following properties from type IncomingMessage httpVersion httpVersionMajor httpVersionMinor connection and more nodemodulestypespassportindexdts error TS Type RequestDictionarystring does not satisfy the constraint IncomingMessage nodemodulestypespassportnodemodulestypesexpressindexdts error TS Type ErrorRequestHandler is not generic nodemodulestypespassportnodemodulestypesexpressindexdts error TS Type Request is not generic nodemodulestypespassportnodemodulestypesexpressindexdts error TS Type RequestHandler is not generic passport typespassport Any idea if this works with Github Enterprise Hi everybody I have a problem when I want to send response to frontend Error ERRHTTPHEADERSSENT Cannot set headers after they are sent to the client passportusenew LocalStrategy functionusername password done consolelogusername usersmapu ifulogin username upassword password return donenull username return donenull false apppostapigetAuth passportauthenticatelocal failureRedirect login functionreq res return ressendStatus In frontend log I see netERREMPTYRESPONSE passport v express v Hi this is really minor but whenever I want to check the example codes from the official documents I click the link github informs me of I correct the link get to the right example repository Can somebody fix this Expected behavior I have an application that may look for the user in a different database based on the requests hostname Sure I could store the DB identifier as part of the user id and serializedeserialize based on that but that puts unnecesarry burden on the session store that would have to store the DB identifier even though it doesnt need to I started writing this issue as a feature request for the request object to be made available in serializeUser but upon checking the source I noticed that is alraedy the case in both serializeUser and in deserializeUser so really the docs need to be updated Unless Im reading the source wrong in which case yeah please also pass the req object to serializeUserdeserializeUser callback Actual behavior The session section in the docs makes no mention or example showing that a request can be used Environment Operating System Windows x Node version latest passport version latest The Reddit strategy hasnt been updated in years The demo in it doesnt work If you have gotten Reddit oAuth to work can you share your code Thanks This is Ill admit partially a request for help But theres a general point as well the Passport docs simply dont explain how it interacts with route handling I believe its causing the issue I posted here although correct me if Im wrong If so the questions are How to use Passport with multiple route files Are the paths in eg failureRedirect relative to the application root or to the particular endpoint on which theyre defined This is particularly confusing if youre using a multiple routefile setup Because if relative to the endpoint youd have to do something like to get back to the application root Although that doesnt seem to work in my case above