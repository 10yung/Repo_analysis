By creating Packageswift this commit introduces support for Swift Package Manager joanromano or someone can you look at this Am I missing something or Haneke actually does NOT resize networkretrieved images on the background but performs the resizing on the main thread I noticed my scroll performance on UITableView stutters and profiling led to hnkimageByScalingToSize being called on main thread I ended up adding dispatchasync to BOOLfetchImageForFetcherformatNamesuccessfailure BOOLfetchImageForFetcheridHNKFetcherfetcher formatNameNSString formatName successvoid UIImage imagesuccessBlock failurevoid NSError errorfailureBlock NSString key fetcherkey return self fetchImageForKeykey formatNameformatName success UIImage image if successBlock successBlockimage failure NSError error dispatchasyncdispatchgetglobalqueueDISPATCHQUEUEPRIORITYDEFAULT HNKCacheFormat format formats formatName self fetchImageFromFetcherfetcher completionBlock UIImage originalImage NSError error if originalImage dispatchasyncdispatchgetmainqueue if failureBlock failureBlockerror return dispatchasyncdispatchgetglobalqueueDISPATCHQUEUEPRIORITYDEFAULT UIImage image self imageFromOriginaloriginalImage keykey formatformat self setDiskImageimage forKeykey formatformat dispatchasyncdispatchgetmainqueue self setMemoryImageimage forKeykey formatformat if successBlock successBlockimage Im not sure if this is a nono for any reason I was surprised to see that images are resized on the main queue when one of the stated features is Background image resizing and file reading The crash appear on UIImageHanekeswift at line on swift branch return resizedImage Or resizedImage can be nil Crash sometimes GitHub changed the way Markdown headings are parsed so this change fixes it See bryant readmesfix for more information Tackles bryant readmesfix It appears that it is possible to commit computed images to the cache but to receive them back from the cache seems flawed It seems like I need to already have the computed image before I try to retrieve the image from the cache so that it can save it to the cache which is backward So can you provide a simple example how I would retrieve a cached raw UIImage into a UIImageView and if not found in cache call my render function to computer the new UIImage and save returned image to cache Hello guys I just looked through your code searching for the reason of memory leaks in my custom fetcher and found this line of code I dont know if its intensionally or its a mistake but it cause fetcher to live as long as a success block so you might want to fix it BTW thanks for you for this nice library CFURLCreateStringByAddingPercentEscapes is changed with stringByAddingPercentEncodingWithAllowedCharacters since its deprecated in iOS This pull request also contains changes in Podfile in order to pass Travis tests For details see The method is deprecated and NSString stringByAddingPercentEncodingWithAllowedCharacters should be used instead Podfile is changed to support Cocoapods Installing pods from Podfile using cocoapods throws following error Invalid Podfile file Unsupported options exclusivetrue for target HanekeTests from UsersfooDownloadsHaneke Podfile target HanekeTests exclusive true do pod OCMock 