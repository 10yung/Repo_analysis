Hi Mark we found a behaviour that seems a bit strange See the code below librarystringdist df cI IGO df amatchINIGO df methodlv maxDist df amatchINIGO df methodlv maxDist stringdistINIGO I IGO librarystringdist df cI IGO df amatchINIGO df methodlv maxDist NA df amatchINIGO df methodlv maxDist I IGO stringdistINIGO I IGO As you can see the distance between INIGO and I IGO is However in the first amatch execution with maxDist results in NA and the second amatch execution with maxDist a match is found and returns de position We thought it was and encoding problem but weve read in the documentation strings are converted to utf Maybe we are missing something else or is this an issue Thank you very much Suggested by Tom Magerman by email to add Dice Coefficient Sorensen overlap to the qgram distances Let svec be some vector of N distinct strings When N is too large stringdistmatrix grows unwieldy NxN as does the dist struct returned by stringdistmatrix when called w a single arg Would like to request a new function similar to stringdistmatrix but which would return the information in a sparse way for those cases one is only interested in ij lowertriangular pairs satisfying a condition r svec cstring string N lengthsvec df stringdistthreshsvec methodlv thresh op The above will return a tibble w columns i j and dist Each row will indicate that for some ijdist the predicate in this case dist was satisfied i in to N j in i to N op can be one of As an example consider r svec caaaaab aacabc df stringdistthreshsvec methodlv thresh L op tibble i j dist Notice how the data frame indicates only those pairs for which the distance satisifies lv For example stringdisthelloworldmethodcosine q would yield the cosine distance over the concatenation of gram and gram profiles This would also enhance compatibility eg with the textcat package Why not a bit of userfriendlyness At the moment stringsim assumes that all weights are equal to for editbased distances Although this does yield a valid maximum weights are maximally using lower weights will lower the maximum possible similarity It is probably more intuitive to scale the similarities taking weights into account I was wondering if youve thought of including qgram filtering for edit distance in the stringdist package Oftentimes users are only concerned with comparing strings that pass a certain similarity threshold and qgram filtering allows them to do this significantly quicker than just calculating the levenstein distance on all the strings Adding support for string kernel distances would be nice 