Since memory growth was enabled in it seems prudent to minimize initial memory footprint Prior to this with TOTALMEMORY set to GiB pyodide preallocates a whole gigabyte of memory I could see the difference in memory usage quite easily in the developer tools memory tab Ive done some rudimentary testing with developer tools and the console and can confirm that doing things like allocating large byte arrays dynamically grows the memory up to around the GiB browser limit I discovered that if you set ModuleTOTALMEMORY in pyodidejs then this overrides the compiledin initial memory allocation Itd be awesome to have this be applicationoverrideable similar to how languagePluginUrl is today Id be happy to put together a commit for that if theres interest The users python script running in pyodide is still interpreted instead of compiled The speed is extremely slow when running for loops of millions times In desktops python I use numba to justintime compile a specific loopintensive function Would it be feasible to implement numba package for pyodide or native support of compiling users code with a decorator similar to numbanjit This is not quite complete as altair is not yet displaying anything in iodide I dont think this should be that hard as its just using vegaEmbed under the hood which Ive gotten working seperately Likely we can just provide a small patch to detect that were running in an iodide environment and do something similar to what we do for matplotlib This might be useful as a reference I dont know at priory where the language pack will But shouldnt it be next to pydidedevjs javascript var scripts documentgetElementsByTagNamescript var index scriptslength var myScript scripts index baseURL myScriptsrc Just a long way to say baseURL url of the javascript file currently executing Which solves this problem for me in Firefox of course I wouldnt dare ext The script from was loaded even though its MIME type texthtml is not a valid JavaScript MIME type consolehtml Loading failed for the script with source consolehtml TypeError Response has unsupported MIME type Also scipy is Mb long maybe a good idea to divide it so I can host it on github which file limit is Mb All that said text a b dP d d b d b d b d b d b d P d b Y ooooo Y Y P P dP dP P dP P dP P d P For the wonderful job you did it works like a charm Hello Maybe it is a wrong place to ask ie it is not an issue so I apologize in advance I was trying to follow the documentation to build a package that includes C I was able to compile the package in question the name of which I would prefer to keep private for workrelated issues natively Then I have modified setuppy to include the following osenviron CC emcc osenviron CXX em However when running python setuppy build v Im getting the following errors In file included from mntdata DataCminiconda includepython mPythonh mntdata DataCminiconda includepython mpyporth error LONGBIT definition appears wrong for platform bad gccglibc config error LONGBIT definition appears wrong for platform bad gccglibc config What am I doing wrong What is the proper way of building a python package for emscripten The wasmbackend for matplotlib creates a div element by a iodideoutputelementdiv call if that fails a plain div is created by a documentcreateElementdiv call In the latter case the newly created div is never appended to the document and remains therefore invisible This PR fixes that by adding a call to documentbodyappendChilddiv after the creation of the div Among other things cpython has fixes which are needed to allow compilation under MacOS X Catalina where we can no longer have headers in usrinclude Id expect lists imported from javascript to have the same semantics as lists built natively in python but this seems not to be the case for example you cant use pythons autoslicing syntax like foo This confused me for an hour the other day when I was trying to use difflib Example notebook I ran into some trouble building Pyodide on my Mac running OS X Catalina Looks like this is a known issue tracked by I hacked things into working and put together a PR Please forgive me if this isnt the right place to ask questions re usage Im currently using Pyodide for a work project and Ive been very impressed Id like to run multiple Pyodide instances on the same page loading each Pyodide instance in its own webworker It would be nice if the browser didnt download the large pyodideasmdata file multiple times in this scenario I noticed that pyodideasmdata doesnt seem to be cached even though the other files eg pyodideasmwasm do seem to be cached Is there a way to cache pyodideasmdata to improve load times Thanks