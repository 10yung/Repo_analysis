 Discussed briefly with phuu and mentioned to lawnsea Right now the canWriteProtect function in utils behaves different in debug mode from productionnormal mode If debugenabled is true mixins cannot overwrite functions from earlier mixins Otherwise later mixins clobber functions from earlier mixins This can lead to nasty bugs where a component will behave differently when debugging from production mode Id like to remove the setWritability calls entirely from composemixin since thats how the library behaves in production The alternative way to eliminate the discrepancy would be to always write protect which is much slower Thoughts Hi there Im a researcher studying software evolution As part of my current research Im studying the implications of opensourcing a proprietary software for instance if the project succeed in attracting newcomers Flight was in my list However I observed that the software history of when the software was developed as a proprietary software was not kept after the transition to Github Knowing that software history is indispensable for developers eg developers need to refer to history several times a day I would like to ask Flight developers the following four brief questions Why did you decide to not keep the software history Do the core developers faced any kind of problems when trying to refer to the old history If so how did they solve these problems Do the newcomers faced any kind of problems when trying to refer to the old history If so how did they solve these problems How does the lack of history impacted on software evolution Does it placed any burden in understanding and evolving the software Thanks in advance for your collaboration Gustavo Pinto PhD The mixin API documentation has a section on overriding defaults The attributes method is available to both component and mixin modules When used with mixins it will not overwrite attributes already defined in the component module My impression was that default attributes defined in components would never be overridden by default attributes defined in mixins However the opposite seems to be the case for me javascript moduleexports withCookies function withCookies thisattributes wantsCookies false javascript moduleexports flightcomponentcookieMonster withCookie function cookieMonster thisattributes wantsCookies true thisafterinitialize function initialize consolelogthisattrwantsCookies false If I want the components default attribute to take precedence over the mixins I need to change the order they are passed into flightcomponent javascript moduleexports flightcomponentwithCookie cookieMonster function cookieMonster thisattributes wantsCookies true thisafterinitialize function initialize consolelogthisattrwantsCookies true Is this the intended behavior If so can we clarify this in the documentation While writing some tests I noticed that flight components can still fire off events or take other actions on their node after theyre town down which seems like something that shouldnt be possible In my particular case a component had an inflight XHR that completed after the end of the test and wound up affecting the next test even though Im careful to tear down all components after each test I fully understand that a wellbehaved component should keep track of all its timersxhrscallbacks and clean them up beforeafter teardown is called but I also think this is something that people could easily forget to do Explicitly setting node and node to null or perhaps setting them to a new DOM element that isnt in the document would go pretty far towards neutering a components ability to accidentally do things after teardown So Im looking to switch from a inhouse framework to Flight theyre very similar except that Flight is obviously supported by many more developers I had a question about attributes though In our inhouse solution we define defaultAttributes as events bob blahblah bill bloobloo selectors anne meepmeep ariel moopmoop as opposed to flight which suggest defining the defaultAttributes as bobEvent blahblah billEvent bloobloo anneSelector meepmeep arielSelector moopmoop We found that the Flight standard is very verbose and results in a lot of repetition in our code Is this really the best practice Weve thought about creating a mixin which will use selector for select but that seems really hacky and I would rather not have to do that Also it looks like if I were to create a mixin I would also have to do it for on as well Thoughts PS Posted this same question on Gitter but no replies sorry for the double post As mentioned here it would be nice to unbind events of specific child elements inside components like javascript thisonclick buttonSelector thiscalculateShippingPrice inputSelector thiscalculateShippingPrice thisoffbuttonSelector click this Currently the documentation for thison reads Optional Specify the DOM nodes that should listen for the event Defaults to the component instances node value Ive made the mistake to believe that the selector if its a string is interpreted as relative to thisnode Please make it clear that its a global selector I know the browser dev tools are slowly coming up to speed on this stuff but Id love to be able to break on a certain event Something like DEBUGeventsbreakOnuiTweetFaved 