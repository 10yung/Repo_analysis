I would like to be able to somehow pass path to the C sources of nanomsg when feature bundled is set that way I dont have to rely on git and I can easily choose which version of nanomsg will the crate be compiled against Is it doable and if so would maintainers consider incorporating this feature into the crate I can see that nanomsgsys checks if nanomsggit path exists but its not clear to me that working directory is it checking I have C nanomsg in my project directory as gits submodule but it doesnt look like nanomsgsys finds it rustc b dcd a srcmainrs error unresolved import stdiotimersleep Could not find timer in stdio E srcmainrs use stdiotimersleep srcmainrs help run rustc explain E to see a detailed explanation srcmainrs error module duration is private srcmainrs use stdtimedurationDuration srcmainrs error mismatched types E srcmainrs let mut buffer u srcmainrs help run rustc explain E to see a detailed explanation srcmainrs note expected type u srcmainrs note found type stdopsRangeTo srcmainrs error no associated item named milliseconds found for type stdtimeDuration in the current scope srcmainrs sleepDurationmilliseconds srcmainrs error no method named write found for type nanomsgSocket in the current scope srcmainrs match pushsocketwritebfoobar srcmainrs help items from traits can only be used if the trait is in scope the following trait is implemented but not in scope perhaps add a use for it srcmainrs help candidate use stdioWrite srcmainrs error no method named read found for type nanomsgSocket in the current scope srcmainrs match pullsocketread mut buffer srcmainrs help items from traits can only be used if the trait is in scope the following trait is implemented but not in scope perhaps add a use for it srcmainrs help candidate use stdioRead error aborting due to previous errors error Could not compile nanomsgtest The linked documentation at does not match the actual code in the repository the type signature of readtoend is what tripped me up Why The MIT license requires reproducing countless copies of the same copyright header with different names in the copyright field for every MIT library in use The Apache license does not have this drawback and has protections from patent trolls and an explicit contribution licensing clause However the Apache license is incompatible with GPLv This is why Rust is duallicensed as MITApache the primary license being Apache MIT only for GPLv compat and doing so would be wise for this project This also makes this crate suitable for inclusion in the Rust standard distribution and other project using dual MITApache How To do this get explicit approval from each contributor of copyrightable work as not all contributions qualify for copyright and then add the following to your README License Licensed under either of Apache License Version LICENSEAPACHE LICENSEAPACHE or MIT license LICENSEMIT LICENSEMIT or at your option Contribution Unless you explicitly state otherwise any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above without any additional terms or conditions and in your license headers use the following boilerplate based on that used in Rust Copyright c t developers Licensed under the Apache License Version LICENSEAPACHE or or the MIT license LICENSEMIT or at your option All files in the project carrying such notice may not be copied modified or distributed except according to those terms And dont forget to update the license metadata in your Cargotoml Contributor checkoff x blabaere x thehydroimpulse glycerine x dcbishop x Ryman x lawlerd x GGist x polyfractal x danburkert x bfops x musitdev x mystal x pwoolcoc Downloading nanomsg v thread unnamed panicked at called Resultunwrap on an Err value A requested feature protocol or option was not found builtin in this libcurl due to a buildtime decision srclibcoreresultrs thread main panicked at called Resultunwrap on an Err value Any srclibcoreresultrs thehydroimpulse I noticed the appveyor script is using the nightly build of rust while the travis one is using version How do we go on with this now GGist This means that as long as the travis build is ok the appveyor should be ok too but the opposite maybe true only as long as no new feature of rust are used Since some public parts Reader Writer Duration of nanomsgrs wont make it in Rust we will probably end up with a branch for the Rust and another one for Rust nightly thehydroimpulse Which one should be the master Since the inner value is a numeric id it could be useful when debugging If we want to be compatible with the stable Rust we wont be able to depend on or use syntax extensions which linkconfig is composed of Not to mention its breaking every other day because of the compiler churn The rust nightly build cc e introduced the warning reproduced below This drew my attention to the fact this conflicting lifetime name wasnt even used in the function So after resolving the name conflict I changed the signature parameter to actually use that named lifetime but this had the effect of breaking almost all unit tests boom With this modification it becomes impossible to retrieve the endpoint and then to send or receive a message For example you can use testbind alone but not testbind and then testwrite Calling directly bind without storing the result in variable and then write works fine Storing the NanoResult or the Endpoint will cause a compilation error cannot borrow pushsocket as mutable more than once at a time It looks like constraining the lifetime of the Endpoint to the one of the Socket makes the Endpoint a borrower of the Socket I will post something on reddit and add the link here when done Signature before and after the change rust fn bindb a b mut self addr str NanoResultEndpointb fn bindb x b x mut self addr str NanoResultEndpointb Warning Compiling nanomsg v filehometravisbuildthehydroimpulsenanomsgrs hometravisbuildthehydroimpulsenanomsgrssrclibrs warning lifetime name a shadows another lifetime name that is already in scope hometravisbuildthehydroimpulsenanomsgrssrclibrs pub fn bindb a b mut self addr str NanoResultEndpointb hometravisbuildthehydroimpulsenanomsgrssrclibrs help shadowed lifetime a declared here hometravisbuildthehydroimpulsenanomsgrssrclibrs impla Socketa hometravisbuildthehydroimpulsenanomsgrssrclibrs help shadowed lifetimes are deprecated and will become a hard error before 