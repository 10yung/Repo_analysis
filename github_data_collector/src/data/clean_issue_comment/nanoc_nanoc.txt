I see that Markdown is supported Is reStructuredText supported Steps to reproduce Run nanoc on a site using ruby released December Expected behavior No change from Ruby Actual behavior Deprecation warnings from Ruby most about other packages but a couple about nanoc itself This is far from a serious problem I dont even plan to migrate to soon but I thought putting the issues in record would be useful Details VolumesCasedgitiayiaysitevendorruby gemscri libcricommanddslrb warning Using the last argument as keyword parameters is deprecated maybe should be added to the call VolumesCasedgitiayiaysitevendorruby gemscri libcricommanddslrb warning The called method option is defined here VolumesCasedgitiayiaysitevendorruby gemscri libcricommanddslrb warning Using the last argument as keyword parameters is deprecated maybe should be added to the call VolumesCasedgitiayiaysitevendorruby gemscri libcricommanddslrb warning The called method option is defined here VolumesCasedgitiayiaysitevendorruby gemsjson libjsoncommonrb warning Using the last argument as keyword parameters is deprecated VolumesCasedgitiayiaysitevendorruby gemsjson libjsoncommonrb warning Using the last argument as keyword parameters is deprecated Loading site VolumesCasedgitiayiaysitevendorruby gemsjson libjsoncommonrb warning Using the last argument as keyword parameters is deprecated VolumesCasedgitiayiaysitevendorruby gemsjson libjsoncommonrb warning Using the last argument as keyword parameters is deprecated done VolumesCasedgitiayiaysitevendorruby gemsnanoccore libnanoccorecompilerloaderrb warning Using the last argument as keyword parameters is deprecated maybe should be added to the call VolumesCasedgitiayiaysitevendorruby gemsnanoccore libnanoccorecompilerrb warning The called method initialize is defined here Steps to reproduce Add an img tag using srcset Compile using relativizepaths Expected behavior Expected not only the src attribute but also all the links in the srcset to be relativized Actual behavior Only the src attribute is relativized Details I wasnt able to get the selector parameter to work using srcset like I have done in the past for datasrc This is likely due to the fact that srcsets unlike src are a list of links and image sizes and not just a single link Steps to reproduce Follow the steps in Then cp tmpsecondfilepng content nanoc rm contentsecondfilepng nanoc showdata Expected behavior We have removed a binary file This should not cause another binary file to be invalidated Actual behavior It is Details This is the second problem I have in large projects Adding new images is a fast operation removing them is recompile everything hell fire Steps to reproduce nanoc create foobar cd foobar cp tmpblubbpng content Add thumbnailizefilterrb to lib Add the following to Rules compile pngjpggifsvg rep thumbnail do filter thumbnailize width write itemidentifier thumbnailpng end Create a trivial libhelpersrb def foo bar end nanoc echo libhelpersrb nanoc showdata Expected behavior Nanoc figures out that the image does not depend on the content of libhelpersrb Actual behavior item blubbpng rep thumbnail is outdated The code snippets have been modified since the last time the site was compiled Details This is becoming a problem in some of my larger projects where I create a lot of thumbnails changing something in the code snippets invalidates all of them leading to a recompile of several minutes Is there a way to tell nanoc that thumbnail generation only depends on libthumbnailizefilterrb Thanks Steps to reproduce Create a layout that pulls in some other items with items itemidentifierstring or itemsfindallsomeitemglob Use that layout in two or more items Run nanoc showdata Expected behavior showdata should list all the dependencies for all of the items Actual behavior showdata lists the dependencies for one of the items using that template The other items are listed as depending on nothing Details Unsure if this is related or not but the values given to items originates from an item property Eg itemsfindallitem arrayofitemidentifiers join or items item thumbnailitemidentifier Despite not showing in showdata the dependency tracking works most of the time Sometimes need to run compile a second time for an item using such a layout will recompile Update The recompilation issue seems to only affect item properties from items with meta files Update Recompilation issue separated into separate issue Steps to reproduce Run bundle exec nanoc live Modify a file Save it Expected behavior I think previously nanoc live used to log what it was doing exactly like nanoc compile does For example update s outputfoobarindexhtml Actual behavior Now I only get a INFO Compilation succeeded line Steps to reproduce Create some items that links multiple times to different websites item links ten times to examplecom item links ten times to exampleorg etc Run nanoc check elinks Actual behavior Nanoc sends requests in the order the links where discovered and ends up sending multiple requests to the same origin in a short amount of time This can also happens when frequently linking to the same website from multiple items Results in HTTP Too Many Requests ratelimiting responses Expected behavior Nanoc should avoid sending repeated requests to the same origin multiple times in a row Introducing a delay between requests is undesirable but shuffling all the collected links from all items in a way that spreads out requests to the same origins would be great Not sure how to best do that though This makes Nanoc compile items in parallel Detailed description The design For each outdated item rep schedule its compilation in a fixedsize thread pool The thread pool is of a fixed size so that we can control the effective parallelism When an outdated item rep fails to be compiled due to a missing dependency queue its compilation in a separate thread pool without a fixed size called extra for now This ensures that there cannot be a deadlock due to there not being enough threads For each element in this extra thread pool there is one item rep in either thread pool that is blocked because of an unmet dependency The Resume phase now a bad name notifies the coordinator of failed hard dependencies while accessing snapshot contents will block until the content is available One main thread does the coordination through event handling Eventually this main thread will also do deadlock detection To detect deadlocks Nanoc will record the source and target reps for each compilationsuspended notification and build a graph If it has cycles there is a deadlock The current implementation deals with item reps but that is limited because there are cases where this approach would detect a false deadlock For example item reps R and R R has snapshot R S and R S R has snapshot R S and R S R S depends on R S R S depends on R S R S and R S can be compiled without issue Therefore both R S and R S can also be compiled The deadlock detector unfortunately currently detects a deadlock however The parallelism in the Write phase is removed as it no longer provides a benefit One interesting observation is that the changes are pretty limited The CompileReps stage has lots of changes because that is where the parallelism happens Some stores have basic access mutexes now The Resume phase needed only minor changes The ItemRepSelector is now obsolete and removed Future work The Resume phase It might be possible to remove the Resume phase At the moment it serves as a way of communicating hard dependencies since it knows the source rep and the target rep and target snapshot name which might not be fully known elsewhere eg the snapshot repo would only know the target rep and target snapshot name The name Resume no longer matches the original intent Perhaps HardDependencyCatcher might be a better name But ideally we d get rid of it entirely Shared mutable state The dependencystore snapshotrepo compiledcontentcache and outdatednessstore are all mutable and shared between threads Access to them is controlled using mutexes Rather than having shared mutable state it might be better to allow the worker threads to communicate with the main thread and request data and modifications to data The snapshot repo which stores the alreadycompiled content uses both mutexes and futures mutexes to prevent data races and futures to block until certain content becomes available The combination of mutexes and futures is a little bizarre To do Tests x Thread pool Deadlock detection Thew new implementation can detect dependency cycles but it will find dependency cycles that are fine see above for details Better duration recording When one rep is blocked on another repsnapshot the time spent waiting is currently considered to be part of the rep that requested the content I suppose it s not technically wrong for it to be this way but it might be nice to have the old behavior Related issues nanocfeatures 