Fix by adding a check on identifier Context An URL with multiple parameter and the second one is optional Example php Routegestionsalariesalarie d class GestionSalarieController extends AbstractController Routemissionmission d namegestionsalariemission public function mission Salarie salarie Mission mission null Response Case Call route gestionsalariemission without mission pathgestionsalariemission salarie salarieid Expected result null mission Given Result Mission mission with the first mission of a salarie passed in URL Behaviour DoctrineParamConverter looks for all fields in the request related to Mission to construct a query even if Mission identifier is null Solution Add exclude to exclude Salarie Solution works only if mission is empty php Routemissionmission d namegestionsalariemission ParamConvertermission optionsexclude salarie public function mission Salarie salarie Mission mission null Response Case Call route gestionsalariemission with a mission pathgestionsalariemission salarie missionsalarieid mission missionid Expected result Mission mission has identifier mission from the request Given result null Behaviour The method DoctrineParamConverterfind return false if exclude exists in options here then the method DoctrineParamConverterfindOneBy looks in all request fields including mission if it related to the given class Mission by checking metadatahasField metadataHasAssociation here the param mission is not exists in class Mission because it is an identifier so the param is ignored Temporary solution Add mapping to map mission with id php Routemissionmission d namegestionsalariemission ParamConvertermission optionsmapping mission id exclude salarie public function mission Salarie salarie Mission mission null Response Bug Case Without mapping paramconverter should be able to map mission param to identifier the process of getting criteria from request here ignore if a param is an identifier Solution Case Add a check metadataisIdentifier on attribute here php foreach options mapping as attribute field if metadataisIdentifierfield metadatahasFieldfield metadatahasAssociationfield metadataisSingleValuedAssociationfield mapMethodSignature criteria field requestattributesgetattribute Doctrine Common Persistence Proxy have been deprecated in favor of Doctrine Persistence Proxy since doctrinepersistence This PR deal with both Proxy class to avoid deprecation notice when the new Proxy class is available I have a case looking like that class IndividualMissionController public function createActionRequest request Member owner IndividualMission parentMission null And I have routes defined on it coachingindividualmissioncreate path missionscreate defaults controller Incenteev WebBundle Controller Coaching IndividualMissionControllercreateAction methods GET POST coachingindividualmissionreuse path missionsparentMissionreuse defaults controller Incenteev WebBundle Controller Coaching IndividualMissionControllercreateAction methods GET POST requirements parentMission incenteevrouterrequirementuuid The coachingindividualmissionreuse works fine But the coachingindividualmissioncreate would try to load a parent mission by owner in this case due to the fallback by criteria when loading by identifier does not work Even setting parentMission to null explicitly in the route defaults does not allow to avoid that The workaround is to do ParamConverterparentMission optionsid parentMission to force loading by id only as it will disable the loading by criteria when using an explicit id I think it should at least do the same disabling when the request has explicitly an attribute set to null matching the default id retrieval ie getIdentifier returning null rather than false What do you think about that idea Another option which would work for me would be a way to disable the criteria loading globally maybe with a way to optin again in the annotation as Im always loading by identifier in the project when not using expr Hi Im using FOSRest and since the new update of SensionFrameworkExtraBundle Im facing this error Undefined offset in vendor friendsofsymfony restbundle EventListener ViewResponseListenerphp line namespace FOS RestBundle EventListener The ViewResponseListener class handles the View core event as well as the extraTemplate annotation author Lukas Kahwe Smith smithpooteeweetorg internal class ViewResponseListener implements EventSubscriberInterface Renders the parameters and template and initializes a new response object with the rendered content param GetResponseForControllerResultEvent event public function onKernelViewGetResponseForControllerResultEvent event configuration requestattributesgettemplate if configuration instanceof ViewAnnotation listcontroller action configurationgetOwner At this line vars thisgetDefaultVarsconfiguration controller action This come from this change namespace Sensio Bundle FrameworkExtraBundle Configuration The Template class handles the Template annotation parts author Fabien Potencier fabiensymfonycom Annotation class Template extends ConfigurationAnnotation After The controller action this annotation is set to var array private owner Before The controller action this annotation is set to var array private owner Do you guys have any clue Origin Fixes Im not so sure about the version but looking at the tags I expected the next version will be as is already released removes the ability to pass an array of attributes to isGranted and decide methods Should the IsGranted annotation be updated to not allow arrays too If so lets not forget to revert this documentation commit I made in July As proposed by fabpot in this comment we may consider deprecating the Template annotation We always recommended to not use it because It involves some magic not exactly magic but hidden conventions Its common to use Template without any parameters which makes it more difficult to know which template is being rendered Thanks