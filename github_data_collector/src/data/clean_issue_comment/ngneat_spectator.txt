 Im submitting a Question Current behavior When creating a new instance of spectator the spies are not reset Expected behavior When creating a new instance of spectator all spy should be reset Minimal reproduction of the problem with instructions const createHost createHostFactory component MyComponent mocks Router MyFacade declarations MockComponentMyContainerComponent providers provide ActivatedRoute useValue new ActivatedRouteStub data params beforeEach spectator createHostmycomponentmycomponent routeStub spectatorgetActivatedRouteStubActivatedRoute myFacade spectatorgetMyFacade myFacadesetSomethingreset As you can see here I need to use reset ont the spy Otherwise when I do expectmyFacade setSomethingtoHaveBeenCalledWithsomehting it keeps the previous calls PLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION ISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION Im submitting a Check one of the following options with x precode Regression a behavior that used to work and stopped working in a new release Bug report Please search GitHub for a similar issue or PR before submitting Performance issue x Feature request Documentation issue or request Support request Other Please describe codepre Current behavior At the moment when passing an abstract type to the mocks array the following error is shown when running ng test Cannot assign an abstract constructor type to a nonabstract constructor type The only working methods I have found so far to mock this are manually creating a jasmine spy typescript createComponentFactory providers provide AbstractType useValue jasminecreateSpyObjAbstractTypename methodToMock Problem here is that later in my test I have to the jasmine way to use the mock instead of the spectator way Using the spectator way results in an error jasmine way typescript spectatorgetAbstractTypemethodToMockandreturnValue spectator way typescript Throws error andReturn does not exist spectatorgetAbstractTypemethodToMockandReturn Problem with this solution is that I have to remember which mock was created how and have to use one way or the other This might lead to confusion when a different team member is extending my test Implement the abstract class and pass the implementation to the mocks array typescript class ConcreteType extends AbstractType createComponentFactory mocks ConcreteType Problems For abstract types with many methods the test gets polluted with unnecessary code all abstract methods need to be implemented The implementation has to be done in every test or a central MockImplementation must be provided Both solutions arent ideal because either we get a lot of duplicated code or every team member must know that the MockImplementation exists Expected behavior The mocks array can handle abstract types OR createSpyObject can create mocks of abstract types OR other solution What is the motivation use case for changing the behavior Consistent less error prone tests Environment precodeNOT RELEVANTcodepre PLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION ISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION Im submitting a Check one of the following options with x precode Regression a behavior that used to work and stopped working in a new release Bug report Please search GitHub for a similar issue or PR before submitting Performance issue Feature request x Documentation issue or request Support request Other Please describe codepre Current behavior When I use queryAll Id like to extract values to get an array of current values that I can compared to an array of expected values For example if Ive got html div dataanimal div datanameDog div div databarkWoooof div div div dataanimal This spot is empty div div dataanimal div datanameDog div div databarkWoooof div div and I want to be able to test the name of every animal So Id write something like ts const animals spectatorqueryAll dataanimal const currentAnimalsNames animalsmapanimal here I dont know how but Id like to wrap animal into a spectator query from within I could search ex spectatorqueryFromanimal name const expectedAnimalsNames Dog undefined Dog expectcurrentAnimalsNamestoEqualexpectedAnimalsNames Expected behavior Any way of achieving that already Should I just write that test in a completely different way What is the motivation use case for changing the behavior Being able to query from an element would be helpful and precise 