ruby class User ActiveRecordBase actsasparanoid hasmany userpermissions orderbyprogramname dependent destroy end class Permission ActiveRecordBase actsasparanoid hasmany userpermissions dependent destroy end class UserPermission ActiveRecordBase actsasparanoid belongsto user belongsto permission end user Userfind userdestroyfully ActiveRecordInvalidForeignKey PGForeignKeyViolation ERROR update or delete on table users violates foreign key constraint fkrails c e on table userpermissions DETAIL Key id is still referenced from table userpermissions DELETE FROM users WHERE usersid appcontrollersuserscontrollerrb in destroy Is there anythinng wrong here Thanks Were having a lively discussion on the merits of adding an index to the deletedat column on a very large table in MySQL which is undergoing a migration to add actsasparanoid This table is going to have very few records ever deleted thus the advice at seems to indicate that this is not a good candidate for having such as index Given a table that has deleted it sounds like an index MIGHT be a good idea Id be interested in the advice of more experienced data engineers on this question Ever more helpful to future users would be a note in the README discussing when this column should be indexed and when to avoid doing so I find this issue vexing as its at direct odds with the documentation This library is mutating the default scope to include WHERE deletedas IS NULL so a uniqueness check will use this default scoping to check for unique So contrary to what the docs say here this library handles uniqueness checks among nondeleted records out of the box and needs some wrangling to handle uniqueness including deleted records I was able to solve it with the conditions option for the uniqueness validator I believe the documentation needs to be updated to include the option of passing conditions to control exact scoping for uniqueness The current validator validatesuniquenessofwithoutdeleted should probably be removed as I cant see how the code would work that way Im happy to open a PR with the changes assuming Im not missing The below change is how I was able to get the proper rails validations to trigger on deleted records validates value uniqueness scope customerid casesensitive false message value must be unique to a customer conditions withdeleted Can I set a future date to soft delete an object ruby objectdeletedat DateTimetomorrow So the gem would check if deletedat nil and DateTimetoday deletedat Using destroy on an actsasparanoid model triggers aftercommit callbacks However while most changes in aftercommit are found in the previouschanges hash changes to the deletedat field after destroy are found in the changes hash ruby class User ApplicationRecord actsasparanoid hasone data dependent destroy classname UsersData as holder end module Users class Data actsasparanoid belongsto holder polymorphic true touch true optional true withdeleted true end end I have this interesting case where the user has a unique username but after he gets softdeleted the username is freed up This means that trying to recover a softdeleted user may fail because his previous username may now be taken which means the recover should fail and return false and it does The problem is that I call deleteduserrecover it fails and then if I check the deleteduserdata record it has been recovered even though the parent object has not been recovered I tried deleteduserdatareload to see if maybe the deletedat nil that I am seeing for the data is only an unsaved value but no the data has really been recovered even after a reload or a direct database check Looks like destroyfully doesnt work in Rails It raises Cant modify frozen hash The dependent option for hasmany creates a callback that is executed on softdeletion However it may make more sense to execute it on harddeletion because otherwise the deletion cannot be undone unless the action is destroy and the relation is also paranoid Options Move some of these callbacks to the harddelete stage Warn about these callbacks ie make people not use them This PR offers a new version of the gem that is limited to Rails only This greatly simplified the code in places and removed all the inner classes from UniquenessWithoutDeletedValidator How can I just query normally without all the actasparanoid magic For example Blogunscopedpreloadcomments will pull only nondeleted comments 