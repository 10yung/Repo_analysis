I was surprised to find you arent publishing images for beta I understand it is probably less used but it would have been useful in my particular case Problem Currently its annoying to clean up build caches on CI systems because cargo build just keeps adding stuff to your cache directory without cleaning up unused artefacts cargo clean just cleans out everything Thus any cache that follows the approach of Load cache Cargo build Save cache Will cause you to maintain a technically unbounded cache and thus step and will start taking more time than Have personally seen this happen after builds of not resetting a cache on shipcat Thus finding out a way to ensure the cache doesnt grow and require manual purging is useful Theres a relevant cargo meta tracking issue for cargo cache improvements CI Suggestions CircleCI recommends adding dynamic suffixes to your cache keys to force cache expiry Eg target checksum Cargolock every time you make a version or add new dep targetrelease EnvironmentCACHEVERSION whenever you want to manually bump But neither are really that satisfactory Fast release cadence makes the first basically useless blank cache constantly and the second requires manual intervention every now and then cache too big constantly TravisCI has a only a manual option to clear your cache and normally caches last for days Related Tools One alternative is cargosweep but this only cleans based on date AFAIKT which feels like just kicking the can down the road because itll cause you to rebuild more than you need if you just havent bumped that dependency in a while Another alternative is cargocache but this seems to be more for general gcing and probably wont solve the unbounded cache problem Tools that would solve this could potentially be bundled inside the build image if it doesnt bloat it too much Since its annoying to keep not encouraging multistage builds because you cannot reuse a build cache effectively we should look into using buildkit It appears available on circleci now as orbs and evars supposedly So worth seeing if we can give out some good advice on how to do this Mounting the cargocache volume at rootcargoregistry excludes the rootcargogit directory This causes Cargo to refetch all Git dependencies on each build which can be quite slow There are some project put rusttoolchain file in root directory for example nightly With those project no matter which tag I choose I have to info syncing channel updates for nightly x unknownlinuxgnu when I build the docker image even I chosed cluxmuslrustnightly because this image installed nightly channel toolchain rather than nightly If I have to download toolchain maybe image without preinstalled toolchain is better The way to install rustup without preinstalled toolchain is bash curl sSf sh s defaulttoolchain none Hi just wanted to ask if someone made cargotarpaulin working in this container or musl in general Thanks regards Dominik gdb Program received signal SIGSEGV Segmentation fault x bff d in libunwindLocalAddressSpaceget unsigned long gdb bt x bff d in libunwindLocalAddressSpaceget unsigned long x c c in libunwindCFIParserlibunwindLocalAddressSpacefindFDElibunwindLocalAddressSpace unsigned long unsigned long unsigned int unsigned long libunwindCFIParserlibunwindLocalAddressSpaceFDEInfo libunwindCFIParserlibunwindLocalAddressSpaceCIEInfo x c in libunwindUnwindCursorlibunwindLocalAddressSpace libunwindRegistersx getInfoFromDwarfSectionunsigned long libunwindUnwindInfoSections const unsigned int x c e in libunwindUnwindCursorlibunwindLocalAddressSpace libunwindRegistersx setInfoBasedOnIPRegisterbool x c bd in libunwindUnwindCursorlibunwindLocalAddressSpace libunwindRegistersx step x c d d in unwstep x bfefff in UnwindBacktrace x b d in backtracebacktracelibunwindtracehd fbf f cb at rootcargoregistrysrcgithubcom ecc db ec backtrace srcbacktracelibunwindrs backtracebacktracetracehf bd c bd cb at rootcargoregistrysrcgithubcom ecc db ec backtrace srcbacktracemodrs x b in backtracecaptureBacktracenewunresolvedhb d b a at rootcargoregistrysrcgithubcom ecc db ec backtrace srccapturers backtracecaptureBacktracenewha e ae at rootcargoregistrysrcgithubcom ecc db ec backtrace srccapturers LTbacktracecaptureBacktraceu asu coredefaultDefaultGTdefaulthc e c a at rootcargoregistrysrcgithubcom ecc db ec backtrace srccapturers x b in backtracecaptureBacktracenewha e ae x bf d in errorchainmakebacktraceh de d dd d at rootcargoregistrysrcgithubcom ecc db ec errorchain srclibrs x bfa in LTerrorchainStateu asu coredefaultDefaultGTdefaulth acd a fbdd d at rootcargoregistrysrcgithubcom ecc db ec errorchain srclibrs x f in myappErrorfromkindhf c cea kind at implerrorchainprocessed macros LTmyappErroru asu coreconvertFromLTallocstringStringGTGTfromh fbf a c s at implerrorchainprocessed macros LTTu asu coreconvertIntoLTUGTGTintoh c ca db c f self at checkoutsrclibcoreconvertrs x b in myappmainhf d fbc b at srcmainrs x in stdrtlangstartu bu bclosureu du dh db a df at checkoutsrclibstdrtrs x bee d in stdrtlangstartinternalu bu bclosureu du dhb c f eedfaa at libstdrtrs stdpanickingtrydocallh a cf ef a bbed at libstdpanickingrs x bfd fa in rustmaybecatchpanic at libpanicunwindlibrs x be e e in stdpanickingtryhb e d fdf at libstdpanickingrs stdpaniccatchunwindh f fd at libstdpanicrs stdrtlangstartinternalh c e c ada at libstdrtrs Noticed on old kernels CircleCI host only works fine on local machine using the musl compiled executable but on ubuntu in circle nontrivial chainerr iteration cause segfaults Upstream issue ring complains about relocations of their C objects even though ive tried forking and adding fPIC zestystretch validate this think they link with pie and thus we cant upgrade from xenial yet Currently not been able to do it due to how it attempts to pull in linux headers and the ones that musl supply appear to be insufficient But maybe theres something we can do Note that this may not be necessary if hyper is successfully migrating to a native rust tls stack because we can then probably start dropping it from the images altogether as people stop using it People are forced to make a choice with hyper anyway as it was pulled out of the hyper crate