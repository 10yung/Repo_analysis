 It was possible for a failed build to reuse the same version multiple times for each failed attempt This happened because the version counter was only incremeneted after the build step and just before the deploy step The changes introduced here ensure we always increment the version counter in the database before any other action is taken this incremented version is then propagated to the provisioner What is the problem Its some time I use tsuru both in production and personal but private environments and I always consider the security a PaaS should provide if we want to provide services to public As we know SSL for domains provided on router level and behind the router traffic transferred to containers without any encryption But the problem is all the containers in tsuru especially docker provision are connected to same bridge network and listening on default server ip address public ip address actually A possible solution What we can do about this problem is provide provisionbased config to connect created containers to an specific network This network can use a more advanced driver eg calico flannel weave etc so we can define policies for containers networking as a result containers cannot communicate each other except through the router and they can still connect to service containers in and outside the docker node How to implement I think its possible to add network name and driver options to tsuru config yaml in provision scope and add these details as NetworkingConfig to CreateContainerOptions when its bees initiating Additional Notes Im not very familiar with k s architecture and development but a similar approach may be possible even though I dont have an idea about it Hi folks Im trying to add users to tsuru and I have the following scenario happening I add a user to tsuru using global context I add several permissions from the permission list such as team app node and so on When he logs in he can see all other teams all other applications and so on which he shouldnt Ideally that user should be able to login create his teams and so on and only see things created by him or teams that he is part of How can we do that with Tsuru Today because a lot of permissions we need individual users to have are at a global context users see everything from each other include the units on theonepool which they should not be able to see an use Ideally the scenario we want is to have like sub admins where they can operate as admins of their own resources users teams and others that he adds but without seeing stuff from other people Any help is appreciated The platforminfo command only shows the list of build versions of each platform It was be great if the command also show information about the platform content like supported versions configuration files supported etc One way to do this is creating a yaml file spec inside each platform with these informations ex yaml name python defaultversion supportedversions pypy requirementfiles requirementstxt requirementsapt versionfile pythonversion envs PYTHONVERSION PYTHONPIPVERSION and in tsuru at platformbuild stage parse this file and save the information to show on tsuru platforminfo python Description We use an AWS VPC domain to access our tsuru API and applications eg tsuruourcompanyvpc If I add the target the client I installed using Homebrew fails to resolve this name when calling appinfo for instance returning Error Failed to connect to tsuru server its probably down However if I clone the tsuruclient repo build the project and try to run the same command this time it works Calling targetlist on both binaries returns the same targets as expected Steps to reproduce run tsuru appinfo a someapp using Homebrew version Expected result The usual appinfo output Environment information Operating System macOS Mojave Catalina probably older versions too Tsuru client version My guess is that something during the cross compilation is messing with it but I cant tell for sure Description make test is failing Steps to reproduce make test Expected result no test should failed Attachments If applicable provide logs screenshots screencast etc to help explain your problem Even when accessing events via dashboard dashboard events appdeploy we can see the content of private variables in plain text Filter logs by level