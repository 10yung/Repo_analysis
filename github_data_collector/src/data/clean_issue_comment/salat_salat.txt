Hey noahlz Is there any work or plans to upgrade to support newer versions of Mongo Based on compatibility charts believe Casbah only goes up to Has anyone gotten Salat working with or is there plans to move to Thanks for maintaining over the years I have a case class case class Aa Int b Int I m seeing sometimes that the resulting serialized value is a b and sometimes b a Does salat provide any guarantees as to the order of serialization in a case class Can this be done Graterscala has multiple calls to syserror that place unnecessary cognitive load on users debugging errors For example javalangRuntimeException class comappFoo requires value for someField at scalasyspackageerrorpackagescala at comnovussalatDefaultArgsafeValuelzycomputeGraterscala at comnovussalatDefaultArgsafeValueGraterscala at comnovussalatConcreteGratersafeDefaultGraterscala at comnovussalatConcreteGrateranonfun anonfunapply applyGraterscala at comnovussalatConcreteGrateranonfun anonfunapply applyGraterscala at scalaOptionorElseOptionscala at comnovussalatConcreteGrateranonfun applyGraterscala at comnovussalatConcreteGrateranonfun applyGraterscala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionimmutableListforeachListscala at scalacollectionTraversableLikeclassmapTraversableLikescala at scalacollectionAbstractTraversablemapTraversablescala at comnovussalatConcreteGraterfromJSONGraterscala at comnovussalatjsonFromJValueanonfun applyToJValuescala at comnovussalatjsonFromJValueanonfun applyToJValuescala at scalaOptionmapOptionscala at comnovussalatjsonFromJValueapplyToJValuescala at comnovussalatConcreteGrateranonfun applyGraterscala at comnovussalatConcreteGrateranonfun applyGraterscala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionimmutableListforeachListscala at scalacollectionTraversableLikeclassmapTraversableLikescala at scalacollectionAbstractTraversablemapTraversablescala at comnovussalatConcreteGraterfromJSONGraterscala at comnovussalatGraterfromJSONGraterscala could be salatSalatDeserializationException class comappFoo requires value for someField case class SalatDeserializationExceptionmsg String extends RuntimeExceptionmsg Perhaps have more specific subclasses such as SalatMissingFieldValueExceptionmsg String etc See the following pending test scala fail fast when coercing Double In in a conversion that would lose precision for Map and List fields in grater Ulrich fromJSON i oi mi x list must throwAn IncompatibleTargetFieldType grater Ulrich fromJSON i oi mi x list must throwAn IncompatibleTargetFieldType grater Ulrich fromJSONJObjectJFieldi JDouble JFieldoi JDouble JFieldmi JObjectJFieldx JDouble Nil JFieldlist JArrayJInt Nil Nil must throwAn IncompatibleTargetFieldType grater Ulrich fromJSONJObjectJFieldi JDouble JFieldoi JDouble JFieldmi JObjectJFieldx JDouble Nil JFieldlist JArrayJDouble Nil Nil must throwAn IncompatibleTargetFieldType pendingUntilFixedSKIPPED Maps and List contents get narrowed with information loss Issue I fixed this in for Option fields but not Maps and Collections JArrays Upgrading from sbt has a particular obstacle Salat uses the Scalariform plugin and its current version would also have to change with the sbt upgrade This also requires editing the project build Per the Scalariform Plugin README some configuration that goes the sbt build file changed with their later versions Steps Update sbt version in projectbuildproperties Update projectpluginssbt to use a later version of Scalariform that is compatible with sbt Edit projectSalatBuildscala so that the project loads and builds successfully Other as yet unknown steps This is a good opportunity for someone to contribute to an open source project without having to know much about the actual project just update the sbt version and make it build NOTE Please open the PR against the xbranch sbt test while mongod is running and mongod will show connections from the test suite It seems to be using up one connection per test and not recycling My rlimit is defaulted to so the test suite dies when it can no longer connect to Mongo This is to resolve issue I havent convinced myself this is the very best solution Ie Seq Byte BSON Binary but this is surely better than what is there currently where it goes Seq Byte Array Int Seq Int asInstanceOf Seq Byte and we die of type erasure runtime confusion I am running into this with serializing a case class correct when that class is contained in another case class Concrete example Class definitions scala Salat abstract class DescClassname String case object ExampleDesc extends DescClasAn Example Desc Salat abstract class TestExampleval desc DescClass val numberOfMonths Option Int case class TestExample numMonth Int extends TestExampledesc ExampleDesc numberOfMonths OptionnumMonth case class ContainerClass instId Int name String distinctCount Int sourceCount Int previousRunDate DateTime DateTimenow exampleClass TestExample startDate Option DateTime None endDate Option DateTime None recoverMode Boolean false correctly serializes and deserialize this class Step create an instance scala val pp TestExample pp comnovusanalyticsmodeltestTestExample TestExample Step Serialize this instance scala val dbo grater TestExample asDBObjectpp DEB in cnagNovusContext neverSuppressThisField NovusContext never suppress field with key filterId dbo commongodbcasbahImportsDBObject t Binary Data numMonth Step Deserialize it scala val prt grater RefreshType asObjectdbo prt comnovusanalyticsmodeltestTestExample TestExample completed successfully Now create the Container class and serialize that to demonstrate failure Create an instance of the Container class scala val seed ContainerTestClass Test DateTimenow Example seed comnovusanalyticsmodeltestContainerTestClass ContainerTestClass Test T Example NoneNonefalse serialize it notice the missing numMonth param scala val dbo grater RefreshResultSeed asDBObjectseed dbo commongodbcasbahImportsDBObject institutionId name Test distinctCount sourceCount previousRunDate date T Z exampleClass t Binary Data try to deserialize this fails with comnovussalatutilToObjectGlitch argument type mismatch Im using my custom TypeHintStrategy implementation with overridden encode and decode methods It works fine in BSON serialization but JSON doesnt seem to supports any custom type hint strategy excepts StringTypeHintStrategy From ToJField class val field ctxtypeHintStrategy match case s StringTypeHintStrategy JStringclazzgetName case x syserrortypeHint unsupported type hint strategy sformatx I would appreciate the support for custom type hint strategies in JSON Thanks Courtesy of scalacOptions in ThisBuild Seq deprecation encoding UTF feature unchecked Xfatalwarnings Xfuture Xlint Ynoadaptedargs Ywarndeadcode Ywarnnumericwiden Ywarnvaluediscard scalacOptions in ThisBuild if scalaVersionvaluestartsWith Nil else ListYwarnunusedimport 