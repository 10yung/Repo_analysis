Ive tried cutting the startServer method with an expressApp one that I can export export async function expressApp const app express await requireloadersdefault expressApp app return app async function startServer const app await expressApp And in my test I try using it like I would normally do import request from supertest import expressApp from srcapp describeAnalyze Movements testsucceeds list of analyze movements async const response await requestexpressApp getanalyze expect let body responsebody expectbodylengthtoBeGreaterThan But Im getting a SyntaxError SyntaxError Unexpected identifier queriesjs Objectanonymousfunctionmoduleexportsrequiredirnamefilenameglobaljestimport moment from moment I suspect this is a problem related with the fact that my expressApp method is async but I cant figure it out Hello in your routes you have such file as authts And were using celebrate library to check if all data from frontend in the right format routepost signup celebrate body Joiobject name Joistringrequired email Joistringrequired password Joistringrequired If my name is number or another different type not string I have a response from the server like this errors I would like to see response something like this errors Wrong json data type How can I do this Thank you srcsubscribersuserts error TS Property error does not exist on type unknown import Container from typedi const Logger Containergetlogger Loggererror Error on event eventsusersignIn o e But if I do the next code everything is fine import Logger from loaderslogger Loggererror Error on event eventsusersignIn o e As I can see typedi do not see levels in Container How can I fix this Im trying to write unit tests for service layer bu failing to create mock dependencies mock Models mock EventDispatcher Can anyone write an example unit test or at least show me the way to write them Just one simple test example would help me progress so much I can take it from there and write other tests by taking it as a reference Thanks I read your article and checked your pattern and I was surprised that my architecture is very similar to yours But I not found one thing I am searching for quite for a while How to handle more errors from Service For example I have Service User with method activateUser This method recieve activation token and based on tokens validity user not already active token exists token not expired user exists I activate user or not The problem is that there is lot of things what can go wrong and throwing just one type of error is not good for clients I am using i n so I am translating keys to texts inside my controller Should I just throw those keys from my Service Now I am just trying to have every service method to do one thing so I can throw error But then I am moving too much stuff into controller Does user exists If not throw not exists error Is user already active If not throw already active error Is token not expired If not throw token expired error Does database update failed If not throw error while saving error This is just example and I have much more of this trough project where I have controller full of onetimeuse services because I need to return different error messages for each one of them Hope you understand my frustration and have some more expirience what you can share Hi Santiq Good Day Great work Ive been learning on this pattern and applying on a test project But now Im struggling about which layer should the forminput validation located at I saw your example that you place the validation in the express middleware but isnt these validation considered as business logic Which mean shouldnt we place the validation at the service layer Hope you can help me to understand on this part Thanks Hello Ive been following this pattern for my personal project but I am reaching a point where I think that the controller layer the express routes is getting a bit too big below is an example from one of your articles javascript export default app appgetusersearchlocation req res next try const lat lng reqquery LoggersillyInvoking user service to search by location const users UserServiceSearchUserByLocationlat lng return resjsonusersstatus catche LoggerwarnWe fail return nexte Say I need this endpoint to do A LOT and its fairly complicated It needs too query different tables databases and each service that this calls relies on a previous service Not to mention all the logging I need to do Would make it sense to separate the callback method to maybe a controller directory and if so how would that look like Should I have another service that handles all the complicated parts Or should I separate it all into middlewares Basically if my controller method callback is looking big what steps should I take to reduce or separate it When running npm run build getting Property error does not exist on type in srcapimiddlewaresattachCurrentUserts on Logger Why