 Add dereference support for rust types DescriptionMotivationScreenshots Currently when using gef with rustgdb derefrencing fails as gef doesnt support Rust types This patch adds support for Rust types much like the existing support for Golang Since certain gef commands use deference eg pcustom they also fail without this patch Before Trying to deference when debugging rust binaries failed Now Works nicely How Has This Been Tested Against a x rust binary with rustgdb Architecture YesNo Comments x heavymultiplicationx x heavycheckmark ARM heavymultiplicationx AARCH heavymultiplicationx MIPS heavymultiplicationx POWERPC heavymultiplicationx SPARC heavymultiplicationx RISCV heavymultiplicationx make tests heavymultiplicationx Checklist NB Your patch wont be reviewed unless fulfilling the following base requirements Put an x in all the boxes that are complete or that dont apply x My PR was done against the dev branch not master x My code follows the code style of this project x My change includes a change to the documentation if required x My change adds tests as appropriate x I have read and agree to the CONTRIBUTING document Might be worth a try Said to alphawork on arm might be extended to arm powerpc Allow MachO binaries to be debugged with gef on macOS DescriptionMotivationScreenshots Parts of gef depend on or expects the file being debugged to be an ELF This PR allows for the correct currentarch to be set as well as adding support for getting the memory mappings via info machregions As there have now been a few ctfs with mac pwns eg machbook and applepie being able to use gef would be great How Has This Been Tested Architecture YesNo Comments x heavycheckmark x heavycheckmark also on macOS gdb ARM heavymultiplicationx AARCH heavymultiplicationx MIPS heavymultiplicationx POWERPC heavymultiplicationx SPARC heavymultiplicationx make tests heavymultiplicationx Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Fixes dereferenceaslong was checking if the provided address could be dereferenced and returning either or the address as a long As Grazfather said its only used in the heap and after a bit of testing I cant see how this is any different or changes the behaviour to just casting it Maybe it was used elsewhere and required a valid address or before Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend I dont know if Im missing something but shouldnt be removed the equal to zero condition otherwise the first empty bin would stop the loop causing the summary to be incomplete In case I can submit a patch to fix that Your issue will be closed unless you confirm the following X Did you use the latest version of GEF from master branch X Did you read the documentation first X Did you check closed issues Step Describe your environment Operating System Debian Architecture x GDB version including the Python library version GNU gdb Debian Python default Apr Step Describe your problem When I load certain aarch binaries with gef it complains about lack of gnudebugdata and then it says most features wont work I would be OK with that if it actually displayed context correctly but it doesnt It then believes all code is x and proceeds to dereference x registers which of course fails Steps to reproduce Load aarch binary without gnudebugdata Attempt to debug stepping as normal Observed Results I get the following warning when loading the binary GEF for linux ready type gef to start gef config to configure commands loaded for GDB using Python engine commands could not be loaded run gef missing to know why Configuration from homeusergefrc restored Reading symbols from binaryReading symbols from gnudebugdata for homeuserbinaryno debugging symbols founddone gnudebugdata for homeuserbinary not foundreadable Failed to get file debug information most of gef features will not work no debugging symbols founddone gef Which probably confuses gef since it identifies the code as x stack Command dereference failed to execute properly reason Unknown register registers codex x fc e ObjectInit b x fc e ZN Object InitEv x fc e ObjectStart ldr x x x fc e ObjectStart cbz x x fc e ZN Object StartEv x fc e c ObjectStart ldr x x x fc e ObjectStart ldr x x x fc e ObjectStart br x But gdb detects the architecture correctly gef show arch The target architecture is set automatically currently aarch Expected results As per the warning Im not expecting most of gef features to work although to be honest I havent researched why but I expect the context and registers to be displayed correctly Todo Remove reference to Python compatibility layer Update unit tests Update documentation Add M K Architecture DescriptionMotivationScreenshots Implement M K architecture Capstone Keystone Unicorn does not have special modes for this architecture and it is untested mprotectasm is unimplemented because I am unaware of the Linux m k system call numbers I am working on supervisor code instead of user code Example context screenshot Screenshot How Has This Been Tested Architecture YesNo Comments x heavymultiplicationx x heavymultiplicationx ARM heavymultiplicationx AARCH heavymultiplicationx MIPS heavymultiplicationx POWERPC heavymultiplicationx SPARC heavymultiplicationx make tests heavycheckmark Checklist NB Your patch wont be reviewed unless fulfilling the following base requirements Put an x in all the boxes that are complete or that dont apply x If my code is a bug fix it targets master otherwise it targets dev x My code follows the code style of this project Mostly copypasting here I dont see significant differences please correct me if wrong x My change includes a change to the documentation if required Unable to find architecture documentation in docs x My change adds tests as appropriate Unable to find crosscompiling architecture tests in tests x I have read and agree to the CONTRIBUTING document Step Describe your environment Ubuntu Linux X cross debugging ARM Step Describe your problem It appears on the cstool version that I am using the bytearray type python object passed to csdisasm in the unicornemulate autogenerated python code inside of the disassmble function is not a valid format for the instructions I was able to easily fix this myself by changing the following line for i in csdisasmcodeaddr to for i in csdisasmbytescodeaddr Steps to reproduce Attempt to run unicornemulate n Observed Results A stack trace from ctypes of the exception ctyptesArgumentError argument class TypeError wrong type Additionally Ive noted that memory that claims its readable but is in fact NOT readable by gdbptrace which Ive discovered is occasionally true for reasons I know not why causes unicornemulate to fail Its not an ISSUE per se but a simple enhancement might be to either ignore these memory regions or zerofill them Fix ida pro sync Some previous commit changing the case of ida commands made ida stop working because they didnt fix an rpc on the gefpy This fixes it Checklist X If my code is a bug fix it targets master otherwise it targets dev X My code follows the code style of this project X My change includes a change to the documentation if required X My change adds tests as appropriate X I have read and agree to the CONTRIBUTING document 