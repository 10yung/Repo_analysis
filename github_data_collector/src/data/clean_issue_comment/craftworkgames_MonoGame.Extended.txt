Cause The animation code is broken and commented out As outlined in the TMX format documentation a string property that contains multiple lines is stored inside the property element rather than in the value attribute When a string property contains newlines the current version of Tiled will write out the value as characters contained inside the property element rather than as the value attribute It is possible that a future version of the TMX format will switch to always saving property values inside the element rather than as an attribute The Tiled Importer does not reflect this causing it to throw an exception due to the value attribute being missing Feel free to close this if I am mistaken but as far as I can tell the TexturePacker json is lacking a few critical features mainly sprite trimmingrotation flags filename tiles png frame x y w h rotated true trimmed true spriteSourceSize x y w h sourceSize w h When imported TextureRegion D doesnt seem to track the offset positionx and y of spriteSourceSize and whether or not the sprite was rotated to fit as well as correctly drawing them in offsetrerotated space when using the spritebatchdraw extensions Anyways big fan of the implementation this one tiny thing is holding me back I have content is named testjson and the texture is testtexpng ContentLoadTextureAtlastest Throws an overflow exception If I change the name of the texture to testtexpng it loads fine Seems to not like the period demarcation If this is an issue with monogame itself please feel free to close and I will submit it there can the following methods be implemented in spritebatch FillCircle FillEclipse FillPolygon Sorry if this has been posted elsewhere but I was having issues with the Importers and processors not showing up in the content pipeline I figured this might be due to some recent changes Im using Visual Studio Community with NET Monogame and MonogameExteneded Here are my references in the pipeline reference packages MonoGameExtendedContentPipeline lib netstandard MonoGameExtendedContentPipelinedll reference packages MonoGameExtendedTiled lib netstandard MonoGameExtendedTileddll references Heres my importer selection importers This issue came from a post on the community forum These are new zoom functions for the MonoGameExtended OrthographicCamera class cs public void ZoomInfloat deltaZoom Vector zoomCenter float pastZoom Zoom ClampZoomZoom deltaZoom Position zoomCenter Origin Position Zoom pastZoom Zoom public void ZoomOutfloat deltaZoom Vector zoomCenter float pastZoom Zoom ClampZoomZoom deltaZoom Position zoomCenter Origin Position Zoom pastZoom Zoom They can be called like this cs worldPosition cameraScreenToWorldmouseStatePositionToVector zoom targeting the mouse int previousMouseWheelValue currentMouseWheelValue currentMouseWheelValue MouseGetStateScrollWheelValue if currentMouseWheelValue previousMouseWheelValue cameraZoomIn f worldPosition if currentMouseWheelValue previousMouseWheelValue cameraZoomOut f worldPosition If my game has some trees and a couple of boundaries then I dont want these to check for collisions on each other In the current CollisionComponent it is not possible to specify this Hello If padding is set on stackpanel content is indented only from bottom and right Branch develop Steps to reproduce In demo gui set padding on stack panel var stackTest new DemoViewModelStack Panels new StackPanel Padding Items new Button Content Press Me HorizontalAlignment HorizontalAlignmentLeft VerticalAlignment VerticalAlignmentTop new Button Content Press Me HorizontalAlignment HorizontalAlignmentRight VerticalAlignment VerticalAlignmentBottom new Button Content Press Me HorizontalAlignment HorizontalAlignmentCentre VerticalAlignment VerticalAlignmentCentre new Button Content Press Me HorizontalAlignment HorizontalAlignmentStretch VerticalAlignment VerticalAlignmentStretch Possible fix In LayoutControlUpdate change line from Layoutcontext new Rectangle ContentRectangleWidth ContentRectangleHeight To Layoutcontext new RectanglePaddingLeft PaddingTop ContentRectangleWidth ContentRectangleHeight Coming from LibGDX I was trying to find an implementation of something that is shipped with LibGDX that extends the viewport in either direction with limits that works really well for a lot of scenarios As far as I can see there does not seem to be a similar implementation for MonoGameExtended available Have I overlooked something or is there perhaps desire for such a viewport implementation Seeing as I need it either way I wouldnt mind sharing what I come up with if its not available yet