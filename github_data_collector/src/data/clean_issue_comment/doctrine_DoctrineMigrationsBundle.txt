Related to This PR adds the new cofiguration options available in x see and deprecates the current settings This should allow a smooth transition to x We would like to reach the zero downtime deployment The bottleneck is the database migration There are existing theoretical solutions for this and here is a free book which covers this topic in the Chapter For this support sometimes we would need different migraiton files eg rename or remove column pre deployment post deployment Example We have this User Entity php php namespace Example UserBundle Entity use Doctrine ORM Mapping as ORM ORM Tablenameuser ORM Entity class User var integer ORM Id ORM Columnnameuserid typeinteger ORM GeneratedValuestrategyAUTO protected id var string ORM Columnnamename typestring length nullablefalse protected name var string ORM Columnnameemail typestring length nullablefalse protected email And we want to rename the email field to publicemail php var string ORM Columnnamepublicemail typestring length nullablefalse protected publicemail Now I can run the doctrinemigrationdiff command and I will get a new VersionXXXXXXXXXphp file In that case we would get version file eg Version prephp or Version php add an extra Version postphp or Version php add an extra The numbers at the end may be better because of the natural sort Every version class would get a preDeploy and a postDeploy tag php preDeployment class Version ALTER TABLE ADD COLUMN publicemail DEFAULT NULL ALGORITHMINPLACE LOCKNONE php postDeployment class Version In a for cycle UPDATE SET publicemail email WHERE publicemail IS NULL LIMIT this limitation would come from config ALTER TABLE DROP COLUMN email If I want to use the zero downtime support I could run pre and post migration files differently shell binconsole doctrinemigrationmigrate n preonly make updatesourcecode binconsole doctrinemigrationmigrate n postonly Of course if somebody want to run both of them heshe can call without any option as earlier was used shell binconsole doctrinemigrationsmigrate n it runs every new Version class This solution is backward compatible supports the zero downtime deploy If you think it may be interesting for you I can start working on it But if you think you dont want to implement this feature I will create a custom bundle Adds to the bundle the support for proposed doctrinemigrations Since doctrinemigrations uses properly dependency injection most of the stuff done before mo get entity manger connection shard can be done via Symfony DI Closes Todo x update documentation x tests x phpstan x xml schema Composer updated this Bundle from to I wondered what has changed but the CHANGELOG file in this bundle was last updated in May Since doctrinemigrations version there are new option checkdatabaseplatform I added support for this option My questions Should I specify in doc comment about available since version PR should be to master or branch master Should I update composer dependencies or increase minimal doctrinemigrations version to to avoid methodexists check Yes As mentioned in theres no setting for the diff commands schema provider This adds a schemaprovider setting Refs new Parameter connection to the DoctrineMigrationsBundle that accept connection name like db option After installing doctrinedbal and doctrinedoctrinemigrationsbundle in a new symfonyskeleton project I see this error Symfony operations recipes c b ddf f d cb a adeca Configuring doctrinedoctrinecachebundle From autogenerated recipe Configuring doctrinedoctrinebundle From githubcomsymfonyrecipesmaster Configuring doctrinedoctrinemigrationsbundle From githubcomsymfonyrecipesmaster Executing script cacheclear KO KO Script cacheclear returned with error code In DoctrineExtensionphp line To configure the ORM layer you must first install the doctrineorm package Script autoscripts was called via postupdatecmd A call to binconsole resulted in the same error To resolve this issue I have to manually edit configpackagesdoctrineyaml and remove the ormsection the code in DoctrineExtensionphp does not return and continues with the ORM initialisation because the config key for orm exists Does a recipe automatically assume the ORM is also being installed Use case We have two separate connections one for general doctrine flow and one with administer permissions to perform migrations and schema maintenance In order to perform migrations all our CI jobs and manual commands should be provided with dbmigrations commandline option It would be much easier if we can have a confiig option like yml doctrinemigrations connection migrations to skip this options for further calls