This PR updates the build matrix use latest was also released but it didnt have rvm distribution yet so I excluded that from this PR The trailblazergenerator from master will create operations in a sub namespace So while examples in documentation show class SongCreate TrailblazerOperation end the generator makes module SongOperation class Create TrailblazerOperation end end This is counterintuitive that the documentation conflicts with what the generator creates and I imagine that means executing the operation changes to SongOperationCreate but it is unclear which approach to take when you are learning Trailblazer Is this namespacing the newpreferred way to create concepts Hi sorry this is not an issue my question is how to stub an operation result let say I have opA and opB there is a step in opB that depends on opA and I want to mock failing operation for opA however because operation opAcall creates anonymous instance class I cant stub operationsuccess result thanks in advance In trailblazerdebugger we can use tracing that is printed when an exception is raised showing the stack until the exception was thrown This will improve debugging dramatically The circuit doesnt have to be a dynamic hash it can be a stack of compiled methods optimizing things like linear paths no if needed This would make TRB incredibly fast Paid gem This would go into the gem Allow to render terminalsafe activity visualizations using the inflections API Outcome could be something like this Read your process Write Endsuccess Endfailure Endrequired Now step NestedSomeOperation input options do params options params mergetags options params somehash fetchsomeparam model options model end Will be step NestedSomeOperation input options params model do params options params mergetags params somehash fetchsomeparam model model end How to reproduce ruby module Macro class InTransaction def selfcall block ActiveRecordBasetransaction do blockcall end end end end class Qwerty TrailblazerOperation step WrapMacroInTransaction step a def a puts Woohoo end end Qwertytrace NoMethodError undefined method tofields for nilNilClass from bundleruby gemstrailblazeractivity libtrailblazeractivityrb in decompose GIT remote revision deaa b d e daca c e f specs trailblazerrails reformrails trailblazer beta trailblazerloader From slack discuss Someones sometime need to have their concepts in different roots in one application eg appconcepts libconcepts pluginsappconepts etc For now we need to have several hacky workarounds like ruby Railsapplicationconfigtoprepare do models Railsrootjoinplugins app models rb Dirglobmodels methodrequiredependency DirglobRailsrootjoinplugins app do dir TrailblazerLoadernewconceptsroot dirconcepts methodrequiredependency end end or ruby CellViewModelviewpaths DirglobRailsrootjoinplugins app concepts class PluginConceptCell TrailblazerCell selfviewpaths CellViewModelviewpaths end You guys probably get this sort of thing a lot feel free to close if this isnt a good channel for it I am at the point where I have read all the docs available and done a few small features in TRB so I am probably not grasping misunderstanding some intentions here My first impression is that this will take you much further then the Rails Way but I also have some concerns Would love to get dev feedback if you get the chance and hopefully this will be somewhat helpful This may be a misunderstanding to me but it seems like you are advocating Operations as the sole way to express business logic all the way down I think operations are an interesting framework for domain services but that is one part of a well architected application Operations feel like they should be an interface to your bounded contexts in some way The idea of concepts seems to be finer grained then a bounded context I get that impression based on the guidance of scoping operations under model namespaces rather then under the aggregate or the context Is that intentional I have found bounded contexts to be essential in managing rails growth I feel like there should be some sort of mechanism to specify the Operation contract By that I mean when I look at a method called dothingfoo bar baz I know what that method needs to work With an interface like Createparamshash depshash that is a lot less clear In a CRUD scenario model params operation params so the contract makes the interface super clear But in less trivial situations you have to read through the entire operation to understand how the different pieces interact with the unstructured data In a general way rails is extremely CRUD oriented which I feel is probably the biggest problem TRB seems like an orders of magnitude improvement on how to build things that way but what if you are not building a CRUD oriented app that is a part of every app but the bits that make it interesting are typically not CRUD I am glad this project exists I am sorry if this comes off as overly critical My intention in writing this is partially to see if I understand things correctly and partially to share an early learning experience 