fix the utilsTestToStringFloats unit test because both Map and List define a Get with different parameters Ideally I want something like m TypeThatIsBothMapAndListNew mPutfoo mAddPairNewfoo pair mAt fmtPrintlnpairFirst pairSecond Use case is I want to have a different LinkedHashMap thats not only enumerable but also allow random access to the index It makes sense for this hypothetical map to also implement List but right now thats not possible m linkedhashmapNew m linkedhashmapNew c tSsssAdddd m Putcc mPutbaaaa mPutaaaaa mPutcm mberrmToJSON if err nil fmtPrintlnerr fmtPrintlnstringmb linkedhashmap contain linkedhashmap toJSON result is niCode above mb inside c is nillI added some code in this func ToJSON outputs the JSON representation of map func m Map ToJSON byte error var b byte buf bytesNewBufferb bufWriteRune it mIterator lastIndex mSize index for itNext var km byte var err error switch itKeytype case Map kmerr itKeyMapToJSON default km err jsonMarshalitKey km err jsonMarshalitKey if err nil return nil err bufWritekm bufWriteRune var vm byte switch itValuetype case Map vmerr itValueMapToJSON break default vm err jsonMarshalitValue if err nil return nil err bufWritevm if index lastIndex bufWriteRune index bufWriteRune return bufBytes nil This pull request configures this repository to be run on Replit which allows for quick experimentation with different data structures in Go It adds a replit configuration file and a Replit badge to the README You can read more about running repos on Replit here or view the Repl here fatal error concurrent map read and map write import githubcomemirpasicgodssetslinkedhashset func main set linkedhashsetNew empty go func for i i i go setAddi go func for i i i go setRemovei select This PR add a gomod file in order to convert this library to a module Since the library is already tagged and still in major v this should be enough The step I followed are according to the official guide go mod init githubcomemirpasicgods go mod tidy Introduce a new Filter command to doubly linked lists that can perform several removals in a single On sweep and use that new method to make set removal On instead of On Related to The LinkedHashMaps Remove is On Remove removes the element from the map by key Key should adhere to the comparators type assertion otherwise method panics func m Map Removekey interface if contains mtable key contains deletemtable key index morderingIndexOfkey FIXME On here morderingRemoveindex 