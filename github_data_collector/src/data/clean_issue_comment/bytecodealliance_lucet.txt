Hi and thanks for this awesome project How would I go about creating a WASIenabled standalone native executable from a WASM module such as the one below It doesnt need to be sandboxed Should I package it with the lucetwasi runtime or maybe with wasmmicroruntime How would I do that Im thinking ideally I would be able to generate a o object file containing the Lucet WASI runtime implementations and link it with my own object file that was generated by lucetc How could I generate such an object file containing Lucets WASI runtime implementations Thanks in advance wasm module import wasiunstable fdwrite func fdwrite param i i i i result i memory export memory memory data i const hello world n func main export start i store i const i const i store i const i const call fdwrite i const filedescriptor for stdout i const iovs The pointer to the iov array which is stored at memory location i const iovslen Were printing string stored in an iov so one i const nwritten A place in memory to store the number of bytes written drop Discard the number of bytes written from the top of the stack Hi i only found how to use lucetcwasi in wiki but i cant find its working principle is there any article describing it Thank you very much Im curios to understand the reason why so modules produced by lucetc are so large For instance lets compile the code below with Lucets toolchain and gcc The binary produced by gcc is pretty compact Its just KB when compiled with Oz option The so module from Lucet is almost KB Ive tried different clang and lucetc options also applied strip It doesnt matter so remains KB Is there some technological limitation under the hood Can the size of the binaries be reduced cpp include iostream include list include vector using namespace std int main liststring ls lspushbackone lspushbacktwo lspushbackthree for auto v ls cout v n vectorstring vs vspushbackone vspushbacktwo vspushbackthree for auto v vs cout v n return This change or something like it is a prerequisite to being able to pass target TARGET to lucetc for crosscompilation purposes This doesnt seem to be supported based on help and a quick browse through the code Its entirely possible Im missing something though Firefox at least would really like this for Linux OS X cross builds as well as several other cases Adds a reporttimes which makes for nice breakdowns via lucetc reporttimes slowtocompilewat like Total Self Pass Translate WASM module Translate WASM function Verify Cranelift IR Verify CSSA Verify live ranges Verify value locations Verify CPU flags Compilation passes Control flow graph Dominator tree Loop analysis Postlegalization rewriting Prelegalization rewriting Dead code elimination Legalization Global value numbering Loop invariant code motion Remove unreachable blocks Register allocation RA liveness analysis RA coalescing CSSA RA spilling RA reloading RA coloring Prologueepilogue insertion Instruction encoding shrinking Branch relaxation Binary machine code emission Layout full renumbering Emit output or in json targetdebuglucetc testswasmarithwat reporttimes errorstyle json errorsnulltimingpasstimes Translate WASM module Translate WASM function Verify Cranelift IR Verify CSSA Verify live ranges Verify value locations Verify CPU flags Compilation passes Control flow graph Dominator tree Loop analysis Postlegalization rewriting Prelegalization rewriting Dead code elimination Legalization Global value numbering Loop invariant code motion Remove unreachable blocks Register allocation RA liveness analysis RA coalescing CSSA RA spilling RA reloading RA coloring Prologueepilogue insertion Instruction encoding shrinking Branch relaxation Binary machine code emission Emit output This is another tiny lint fix I found while looking around at things PR Rather than using a CtxMapnew constructor we can implement the Default trait and use that instead this is a matched draft with that I expect to clip down to just ctx ctxpreopenedvirtBoxnewfs sandbox or so whenever this is made a real PR So far as lucetwasi is concerned I just want to exercise file APIs and ensure that things are still usable as I poke at wasicommon This WIP PR fixes 