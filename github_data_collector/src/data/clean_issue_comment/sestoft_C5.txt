This PR addresses Implements SCGISetT on TreeSetT Implements SCGIDictionaryK V on DictionaryBaseK V I also attempted to implement SCGISetT on HashSetT but since it seems to be missing a way to get and delete items by index I am not sure how to proceed Here is the non compiling attempt in case you want to try to complete it d dda ee aa f ff b aee Redundant Behavior Do note that the AddAll ContainsAll RetainAll and RemoveAll methods are now redundant with UnionWith IsSupersetOf IntersectWith and ExceptWith respectively Options Leave the redundant methods in place Break C backward compatibility but follow NET conventions by removing or making internal AddAll ContainsAll RetainAll and RemoveAll Preserve C backward compatibility and hide UnionWith IsSupersetOf IntersectWith and ExceptWith by using explicit interface declarations Performance Most of the ISetT methods were reverse engineered from SCGHashSetT but it may be possible to implement some of the methods at a lower level for better performance I didnt look into it Description When Importing C into Unity a whole slew of errors occur Ive seen references that c iswas actually compatible with Unity and I even have access to an older c dll that works but was hoping to get this into Unity Solution Version of c that is able to be integrated into Unity GuardedDictionary implements the Keys property as return dictKeys with a TODO TODO guard with a readonly wrapper Probably so GuardedSortedDictionary implements the Keys property as return null The implementations should be fixed in particular the one in GuardedSortedDictionary The implementations should probably wrap the keys of the wrapped dictionary in a GuardedCollection GuardedSorted Seems reasonable to expect a Set to implement SystemCollectionsGenericISet especially since the TreeSet in Java does just that Is there any particular reason why that was left out The MoveNextAfterUpdate test in ArrayListTest seems to contain a mistake causing it to test the wrong thing C Test public void MoveNextAfterUpdate listAdd listAdd listAdd SCGIEnumeratorint e listGetEnumerator eMoveNext listAdd Bug this should be Update AssertThrowsCollectionModifiedException eMoveNext The test checks if calling Add makes the enumerator fail It should probably be a call to Update instead Im not sure if this mistake has been duplicated elsewhere In ArrayListTest events are not properly tested The method listen only adds event handlers to the Added event thereby ignoring all other events C private void listen seenListenlist EventTypeEnumAdded This is correctly done in the HashedArrayListTest class C private void listen seenListenlist EventTypeEnumAll Be aware that fixing the listen method will cause the Listenable test to fail It can however easily be fixed by inlining the method C Test public void Listenable AssertAreEqualEventTypeEnumAll listListenableEvents AssertAreEqualEventTypeEnumNone listActiveEvents seenListenlist EventTypeEnumAdded Bug fix AssertAreEqualEventTypeEnumAdded listActiveEvents Even though C will compile successfully for a Windows UWP attempting to build a store package using NET Native compilation will result in an Infinite Expansion exception that leads to an overflow I realize Windows support is not listed here but wanted to make sure you guys are aware of the issue C HashedLinkedList raises an assertion error at the method splittaggroup when adding lots of elements In the attached image example the list had close to million integers As the debugger shows previoustaggrouptag ptgt is equal to intMaxValue and nexttaggrouptag ntgt is equal to intMaxValue So those values do not verify the assertion that ptgt ntgt The C Generic Collection Library for C and CLI technical report states at section Implementation of hashed linked lists Note however that the typical case of always inserting at the end of the list seems to be close to the worstcase scenario for maintaining the tags That is the case You can run this simple program that tries to reproduce this error c hashedlinkedlistassertionerror 