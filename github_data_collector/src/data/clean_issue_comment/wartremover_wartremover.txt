I went through a warning with the following code snippet scala trait One F trait Two F A val arg String trait TypeClass F def capability F String object TypeClass implicit val optionTC TypeClass Option new TypeClass Option def capability Option String None def buildTwo F TypeClass buildingArg String Two F Two F One F new Two F Two F One F val arg String buildingArg def myTwo Two Option Two Option One Option buildTwotest During compilation this warning is triggered warn Mainscala wartremoverAny Inferred type containing Any A Option A warn buildTwotest warn warn one warning found success Total time s completed d c I dont get this error when disabling the wartremoverWarnings Wartsunsafe line in my buildsbt Im guessing I get this warning because the type parameter A of A Option A is inferred to Any Is there a way to avoid this warning without using suppressWarning annotation javanioPathtoString is the correct way to get the String representation as explained by the javadoc Path overrides toString Still ToString fails Severity Blocker How to reproduce When using with scalamavenplugin The option NonUnitStatement cannot be disabled The following plugin configuration plugin groupIdnetalchim mavengroupId artifactIdscalamavenpluginartifactId version version executions execution idscalacompilefirstid phaseprocessresourcesphase goals goalcompilegoal goals execution execution idscalatestcompilefirstid phaseprocesstestresourcesphase goals goaltestCompilegoal goals execution executions configuration scalaVersionscalaversionscalaVersion scalaCompatVersionscalabinaryversionscalaCompatVersion recompileModeincrementalrecompileMode useZincServertrueuseZincServer args argtargetjvmjavaversionarg arguncheckedarg argdeprecationarg argfeaturearg arggvarsarg arglanguageexistentialsarg lt ndash often used in project ndash gt argencodingarg argUTF arg arglanguagearg argXfatalwarningsarg argXlintarg argYnoadaptedargsarg argYwarndeadcodearg NB doesnt work well with the hole argYwarnnumericwidenarg argYwarnvaluediscardarg argXfuturearg argYwarnunusedimportarg argYpartialunificationarg argYwarnnumericwidenarg Warn when numerics are widened argYnonunitstatementarg argPwartremoveronlywarntraverserorgwartremoverwartsUnsafearg args javacArgs javacArgsourcejavacArg javacArgjavaversionjavacArg javacArgtargetjavacArg javacArgjavaversionjavacArg javacArgs compilerPlugins compilerPlugin groupIdorgwartremovergroupId artifactIdwartremoverscalabinaryversionartifactId version version compilerPlugin compilerPlugin groupIdcomolegpygroupId artifactIdbettermonadicforscalabinaryversionartifactId version version compilerPlugin compilerPlugins excludes excludeipynbcheckpointsexclude excludes configuration plugin Will simply yield the following error information ERROR bad option Ynonunitstatement Many test cases rely on this feature it has to be enabled before other features can be invoked Wart remover detects an Any Type where it should not when using traverse from cats on eithers Heres a minimal example import catsimplicits val b List Either String Int ListfailedasLeft Int asRight String val c Either String List Int bsequence gives wartremoverAny Inferred type containing Any error val c Either String List Int bsequence error Im using Scala and wartremover Any and Nothing fail on Jsonreads macro for case classes with more than one param On Scala same code compiles fine Build settings sbt scalaVersion libraryDependencies comtypesafeplay playjson wartremoverErrors in Compile compile Wartsall Example code scala import playapilibsjson final case class Greetingid Long greeting String object Greeting implicit val reads Reads Greeting Jsonreads Greeting Error error wartremoverAny Inferred type containing Any error implicit val reads Reads Greeting Jsonreads Greeting error Output of Xprinttyper for the part which is presumably responsible for this scala scala val underlying playapilibsjsonReads exampleGreeting playapilibsfunctionalsyntaxpackagetoFunctionalBuilderOps playapilibsjsonReads Long playapilibsjsonJsPath jsonthisJsonConfigurationdefault playapilibsjsonJsonMacroOptions MacroOptionsthisDefaultmacroOptionsDefaultnamingapplyidread Long jsonthisReadsLongReadsfunctionalthisFunctionalCanBuildfunctionalCanBuildApplicative A playapilibsjsonReads A jsonthisReadsapplicativejsonthisJsResultapplicativeJsResultand String playapilibsjsonJsPath jsonthisJsonConfigurationdefault playapilibsjsonJsonMacroOptions MacroOptionsthisDefaultmacroOptionsDefaultnamingapplygreetingread String jsonthisReadsStringReadsapply exampleGreeting id Long greeting String Greetingapplyid greetingjsonthisReadsfunctorReadsjsonthisReadsapplicativejsonthisJsResultapplicativeJsResult scala val underlying playapilibsjsonReads exampleGreeting playapilibsfunctionalsyntaxpackagetoFunctionalBuilderOps playapilibsjsonReads Long playapilibsjsonJsPath jsonthisJsonConfigurationdefault playapilibsjsonJsonMacroOptions MacroOptionsthisDefaultmacroOptionsDefaultnamingapplyidread Long jsonthisReadsLongReadsfunctionalthisFunctionalCanBuildfunctionalCanBuildApplicative playapilibsjsonReads jsonthisReadsapplicativejsonthisJsResultapplicativeJsResultand String playapilibsjsonJsPath jsonthisJsonConfigurationdefault playapilibsjsonJsonMacroOptions MacroOptionsthisDefaultmacroOptionsDefaultnamingapplygreetingread String jsonthisReadsStringReadsapply exampleGreeting id Long greeting String Greetingapplyid greetingjsonthisReadsfunctorReadsjsonthisReadsapplicativejsonthisJsResultapplicativeJsResult When running through command line with maven I am only able to specify PwartremoveronlywarntraverserorgwartremoverwartsUnsafe While more expansive options like AllBut would be nice to have I think at the very least I should be able to specify all by running with PwartremoveronlywarntraverserorgwartremoverwartsAll but this fails as it does not exist Thank you the following test passes on scala but fails on scala RC teststring interpolation is allowed val b Boolean true val result WartTestTraverserStringPlusAny sb assertEmptyresult Feature Request I am working on a horrible codebase and if I run Wartremover on the whole codebase the thing will blow up with thousands of warnings and errors Is there a way for me to run Wartremover just on a single file or class in the codebase at a time so that I fix the issues one file at a time Compile wartremoverWarnings WartsunsafefilterNotSetWartNonUnitStatementscontains Is there a better way to exclude certain Warts Not a SBT Ninza so if its something obvious please humor me Why is this useful Given the code below the code passed to the map function should never be evaluated when supplied a None None Option Int map printlnI am called The above prints out I am called The code between the and the function is evaluated eagerly before testing whether the Option is a None We have supplied a block to where a function is to be supplied and the block is evaluated and as long as it returns a function at the end This can lead to unexpected errors Contrast this with supplying a function to the map function with a None None Option Int map x printlnI am not called x In the above case I am not called is never printed because we are mapping over a None