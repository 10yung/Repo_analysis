 The documentation says that using the ErrorRecord will append the error record to the error variable But how does it work I have been playing around for some time and I dont seem to understand how it works I can make the classic WriteError fill out the Error variable and passed ErrorVariable function TestFunction CmdletBinding param WriteError This is an error Calling it with the following fills out the things like expected TestFunction ErrorVariable temp ErrorAction SilentlyContinue When trying to build the same with WritePsfMessage with the documentation in mind function TestFunction CmdletBinding param errorRecord NewObject SystemManagementAutomationErrorRecord NewObject SystemException This is the expetion This is the error string SystemManagementAutomationErrorCategory InvalidArgument null WritePSFMessage Level Warning Message Test is an error ErrorRecord errorRecord Calling it with the following yields a result in the warning variable which makes sense based on the level used TestFunction ErrorVariable temp ErrorAction SilentlyContinue WarningAction SilentlyContinue WarningVariable temp It dont have a error level so Im calling it with the Critical level function TestFunction CmdletBinding param errorRecord NewObject SystemManagementAutomationErrorRecord NewObject SystemException This is the expetion This is the error string SystemManagementAutomationErrorCategory InvalidArgument null WritePSFMessage Level Critical Message Test is an error ErrorRecord errorRecord But calling the critical version doesnt give me what I expected TestFunction ErrorVariable temp ErrorAction SilentlyContinue WarningAction SilentlyContinue WarningVariable temp So I wondering if it is possible to have WritePsfMessage put the error record into the error variable and the ErrorVariable specified for the TestFunction If not possible could you guide me towards how I could implement it beyond using the WriteError Hey As mentioned on Twitter the other day Im trying to make it easier for me and my different tools to write Azure DevOps specific tags as part of the output from the WritePsfMessage function I was inspired by some of the people that consumes my modules and they requested some capabilities to write these tags during an execution from within a pipeline This my attempt to provide that to the module Im happy to refactor it to fit your design principles but I need a bit of guidance before being able to do so Current state would work for me and my needs but I tried think outside my needs only and I hope you see that in the names used and so on The SetPSFConfig should allow pipeline input The primary reason for this is being able to do something like powershell GetPSFConfig name moduleconfigsetting setPSFConfig value new value Logging Upgrades General Plans for the upcoming sprint Core System Simplify Provider Development Reduce configuration handling requirements Upgrade installation requirements system Option Installation Script Option Module Dependency list Global prerequisites and installation management Centrally define repository for installation of required modules Central configuration to enable autoinstall for moduledependencies Make logging cycle interval configurable CPU impact vs logging latency Support multiinstance logging providers eg multiple instances of the logfile provider logging with different sets of configurations Provider Deployment Support defining an update installation source of logging providers from a central source Support requiring signed logging providers Support defining list of approved certificates for signed providers Provider Filtering Level Based Filtering Path Based Filtering New Upgraded Providers Planned CMTrace support for logfile provider Logrotate for logfile provider CMTrace support for filesystem provider Eventlog provider SQL Provider Splunk Provider Azure Log Analytics Provider AWS Cloudwatch Provider Potentially Serilog Provider High potential power unsure about effort required Slack General Where applicable logging providers shall support picking the output encoding Documentation Set up an entire documentation node with deep info on psframeworkorg Comments Ideas and suggestions highly welcome Command should be rewritten in C Should consume a static C method that does the heavy lifting and can be called standalone That routine should also be integrated into PSFCmdlet Should support registering path replacements allowing the user to redirect path resolutions to a different path Eg to redirect requests to a mounted volume shadow copy Configurationbased updates do not execute properly Add support for minimum level and maximum level Validation attribute that accepts a list of enum values any combination of which being legal as input Have experienced locks in the console when triggering SetPSFTaskEngineCache The locks have been noted on Windows and with Windows PowerShell Have also experienced it with Core on a Windows system with PSF v No delays were present with Core on v or v Testing has been completed with versions Method of testing is executing the following code PowerShell ImportModule Name PSFramework RequiredVersion SetPSFTaskEngineCache Module MyModule Name Cache Collector StartSleep Seconds GetDate RegisterPSFTaskEngineTask Name MyModuleCache ScriptBlock null GetPSFTaskEngineCache Module MyModule Name Cache Once The RequiredVersion is altered to force the module version for each test The console was closed and reopened between tests Locks were observed by repeatedly hitting the Enter key Within a few seconds the console will stop accepting input and will not return for the duration of the execution of the engine cache v is the first version with the parameters to support this method That errored in Core and WinPS v resulted in successful execution of the code Core worked without locks and WinPS had locks v Core worked without locks and WinPS had locks v Core had locks and WinPS had locks Is it possible to have a similar feature to NoNewline for WriteHost This would be quite helpful to write the progress of a task in a sequence of dots that should be in the same line