 can cocoaAsyncSocket be applied with Apple Watch app I am using GCDAsyncSocket in my project My project A video conversation project using the Linphone library And I also use socket connection The application only works between devices connected to the local modem The socket I use in my application closes minutes after entering the application background I want the socket not to close as long as the application is running unless the application is killed My application doesnt have a backend All communication except for Linphone only takes place via the socket How can I do that Ive tried func socket sock GCDAsyncSocket didAcceptNewSocket newSocket GCDAsyncSocket printconnect succuess printconnect to newSocketconnectedHost printport StringnewSocketconnectedPort clientsappendnewSocket callIP newSocketconnectedHost sockenableBackgroundingOnSocket newSocketreadDatawithTimeout tag Hello Im seeing a zillion deprecation warnings in GCDAsyncSocketm when building on macOS Catalina targeting iOS Catalyst such as img width altimage src Im using GCDAsyncUDP stuff and it all seems to be working fine and obviously no TLSSSL but things are working fine at this point Wanted to contribute this back this adds Swift Package support to the library There are several ways One Thread SIGSEGV SEGVACCERR libdispatchdylib dispatchasyncVARIANTmp libdispatchdylib dispatchasyncVARIANTmp DriverApp GCDAsyncSocket writeDatawithTimeouttag GCDAsyncSocketm Two Thread SIGSEGV SEGVACCERR libdispatchdylib dispatchcontinuationpush DriverApp GCDAsyncSocket writeDatawithTimeouttag GCDAsyncSocketm Three Thread SIGSEGV SEGVACCERR libdispatchdylib dispatchlanepushVARIANTarmv DriverApp GCDAsyncSocket writeDatawithTimeouttag GCDAsyncSocketm Specific code img width altimage src Through the above stack analysis all the problems occurred in libdispatchdylib which is related to the use of dispatchasync Excuse me What do I need to pay attention to when calling writeData with Timeout tag method how to use SSL in swift Can you provide oneway and twoway example the server is netty