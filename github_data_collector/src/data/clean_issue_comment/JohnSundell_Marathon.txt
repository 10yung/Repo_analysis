Hi everyone When I introduced Marathon almost years ago my goal was to provide a simple abstraction on top of the Swift Package Manager in order to make Swift scripting simpler However as both the Swift Package Manager has evolved to make scripting much easier thanks to features like swift run and that its now being integrated directly into Xcode I feel like Marathon has played out its role and its time to deprecate it As you might have noticed from the lack of activity on this projects issues I also dont have the time required to support this project anymore especially since Ive now personally moved all of my Swift scripts to use the Swift Package Manager directly I really love to build things for the Swift community but I also need to prioritize what I spend my time on just like everyone else That being said Im going to try to do my very best to make the process of migrating from Marathon to another solution as easy as I possibly can for everyone using it So my question to you is how can I help Would you like a MarathontoSwiftPM migration guide Recommendations on alternative tools to use Maybe a tool that lets you export your existing Marathon scripts as Swift packages Let me know by replying to this issue and Ill do my very best to help Marathon isnt going away tomorrow but Im no longer doing any active development on it I will make the changes required to make it fully support Xcode when that ships later this year but thats the last thing Ill do Im of course more than happy to accept PRs and if you want to keep evolving Marathon for your own purposes then you can always fork it and keep iterating on it that way Thanks so much to all of you who have used discussed and helped me work on Marathon during these past years its been fun but I think all of you will just like me enjoy the much simpler workflow of just working with SwiftPM directly without any additional dependencies or layers of abstraction Problem I faced was related to swift version which Ill troubleshoot but rather than just a dead end should spoon feed users on how to troubleshoot Or ideally just dish this verbose stuff up on errors django SyncForks marathon run helloWorldswift verbose cd UsersjohnpopemarathonScriptsCacheUsersjohnpopeDocumentsgitWorkspaceSyncForkshelloWorld readlink OriginalFile UsersjohnpopeDocumentsgitWorkspaceSyncForkshelloWorldswift cd UsersjohnpopeDocumentsgitWorkspaceSyncForks usrbinenv xcrun sdk macosx swift package version Apple Swift Package Manager Swift swiftpm cd UsersjohnpopemarathonScriptsCacheUsersjohnpopeDocumentsgitWorkspaceSyncForkshelloWorld usrbinenv xcrun sdk macosx swift build C UsersjohnpopemarathonScriptsCacheUsersjohnpopeDocumentsgitWorkspaceSyncForkshelloWorld Compiling helloWorld mainswift unknown error invalid value in swiftversion unknown note valid arguments to swiftversion are warning chdirC option is deprecated use packagepath instead Failed to compile script Platform macOS Catalina Version Beta A f Issue I freshly installed Marathon the recommended way on macOS Catalina Beta Version It seems to install without any error but when trying to run Marathon via marathon I get the following error This copy of libswiftCoredylib requires an OS version prior to abort marathon run I didnt dig into source code yet but does anybody know a fast way to solve this error Thanks in advance Platform Raspberry PI running Raspbian GNULinux buster Issue sudo marathon install myscript fails with error output Compiling script Failed to compile script The following errors occured no such module ShellOut You can add ShellOut to Marathon using marathon add urltoShellOut Steps to reproduce Install marathon as described for Linux in readme Install Shellout module with marathon add urltoShellOut Create script that imports ShellOut Try to install that script Notes Interestingly marathon run myscript works just fine with script that uses ShellOut module marathon list shows that ShellOut module is installed indeed Installing a script without dependencies works correctly Im using bitriseio as a build server and they create new VM every time build is happening I need to execute marathon script every time before build The issue Im having is execution time taking a lot of time so I made as simple as possible shell script echo import Foundation print Hello World helloWorldswift marathon run helloWorldswift verbose And its taking over minutes to run there Im trying to debug this with verbose with an assistance of bitrise support team member to see whats taking the most time there but its logging everything at once when the scripts end execution Any solutions for more detail logging and identifying what causing this extend execution time In case if installation time does matter It shouldnt I guess Im installing Marathon via SPM like git clone cd Marathon swift build c release Xswiftc staticstdlib cp f buildreleaseMarathon usrlocalbinmarathon And this installation script finishes there with reasonable time I had suspisions for hidden installation and copying files that causing the issues but running the script twice actually double the time of execution Does Marathon support command line user input Whenever Im trying something like readLine or FileHandlestandardInput script seems to freeze In verbose mode I only see starting execution but it never gets to it This PR is a WIP of fixes for issues in as well as some other things Ill mention in notes below The changes are primarily trying to address importing dependencies from a package that may not go by the same name as the package or situations where there are multiple libraries from a package that you are trying to import Along the way I noticed some issues with the Master Package Description and the way it acts as a template for the Packageswift files used in every script As a result in this current WIP code the Master Packageswift is mostly unused and package update functionality is currently disabled I was mostly working with MarathonCore directly not via CLI but problems with the Master Package Description pattern I saw were After running Marathon a few times the dependencies of dependencies start getting added to the Master Packageswift which are then copied over into the script Packageswift files This also means that if you have many scripts with dependencies then copying from the Master Packageswift will make the scripts depend on each others libraries Updating all packages to run some scripts that may not even have many dependencies can make simple script executions take longer I found the versions depended upon in the Packageswift files werent consistent enough because they only used the major version It could cause issues during swift package update as it tried to resolve the dependencies correctly Notes a new Dependency struct has been introduced that maintains the name of the specific library you want to include not just the name of the package if swift tools version is or greater then local references use the packagepath format This work is currently incomplete but I wanted to open a PR with my first shot at the problem as a proposal Since its a big change and there is lots of room for discussion Thanks for readingreviewing I have a swift package Im trying to import as an inline dependency However it is one of many within the same Packageswift and is not named the same as the Package When Marathon runs it ends up pulling in the library by the name of the Package rather than the specific library name listed in the import ie import SlurpXCTools marathon ends up adding the Slurp library as a dependency instead Ideally Id actually like to be able to import multiple libraries from the same Package ie both Slurp and SlurpXCTools Am I missing something or is this a current limitation If so Im very open to working on this feature Ive already been diving into the code to looks for ideas only implementing this if needed but any guidance is appreciated Thanks Hi Im testing out Swift scripting using Marathon by trying to create a script to build and launch apps But it the scripts takes up all available memory until my computer turns unresponsive Here is the script Swift import Foundation import Files import ShellOut Compile and launch project for physical device This compiles an archive printBuilding archive let try shellOutto xcodebuild arguments project QDBxcodeproj scheme QDB archivePath buildphysical archive This compiles ipa printBuilding ipa let try shellOutto xcodebuild arguments exportArchive archivePath buildphysicalxcarchive exportPath build exportOptionsPlist exportplist Install ipa on physical device printInstalling to device let try shellOutto cfgutil arguments installapp buildQDBipa If I run each shell command seperately in Terminal they execute quite quickly without high CPUmemory usage But through Marathon using ShellOut the memory usage just increases and increases The first print statement is never executed either so it looks like it has to process the entire script somehow before it outputs the print statements Not sure if this issue is related ShellOut or Marathon but since it wont print the print statements it looks like something related to how Marathon executes scripts Here you can see the running script and the memoryCPU usage img width altskjermbilde kl src Hi all Whenever I start a new project I have manually remove cached libraries because as soon as I run marathon run script it causes an attempt to update all installed Packages This then results in two problems I am running marathon on linux Marathon fails if the internet is not good enough as it pings remote github addresses If any of the old packages have been changed and for some reason dont compile anymore I cannot run the current script regardless if this script uses those packages or not Thank you for this software Edit I momentarily closed this issue because it is a bit trick to reproduce But here is a MWE that happens every time If one wants to make a nice little command line interface program with marathon the best option on linux is Console which is part of Vapor Something in the update marathon attempts to do makes anything built with Console only build correctly for the first time Copy the code below swift import Console marathon let terminal Terminal printterminal is Console true terminalprintHello Outputs the prompt then requests input let name terminalaskWhat is your name terminalprintYou said name if terminalconfirmAre you sure they are sure else dont do it This will work in the first attempt but in the second one will be greeted by a bug during the updaterebuilt of the package bash m cd homeluismarathonScriptsCachehomeluisDropboxDocumentosCodingSwiftProgramsCSVImporterexampleexample swift build C homeluismarathonScriptsCachehomeluisDropboxDocumentosCodingSwiftProgramsCSVImporterexampleexample m mwarning chdirC option is deprecated use packagepath instead warning PackageDescription API v is deprecated and will be removed in the future used by packages CSwiftV example homeluismarathonScriptsCachehomeluisDropboxDocumentosCodingSwiftProgramsCSVImporterexampleexample error product dependency swiftnio not found example homeluismarathonScriptsCachehomeluisDropboxDocumentosCodingSwiftProgramsCSVImporterexampleexample error product dependency swiftniozlibsupport not found m 