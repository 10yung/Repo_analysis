Currently the only way to install cargorelease is cargo install which builds it from scratch incudind all the dependencies No wonder it takes quite a bit of time You can setup your travis CI to deploy prebuilded binaries to your releases page so people are able to download it from there The most easy way to do that is to use trust What do you think Every time i release a new version of something i seem to be getting a message like T Z INFO Cannot detect changes for wide because tag v alpha is missing Try setting prevtagname TAG But Im using exclusively this tool to do my releases so its silly that it cant keep track of its own tag naming scheme It seems to just be a tag for each version which is pretty easy to understand However it also updates the version stored with an alpha when a new version is released and thats where things go wrong What happens is that youre working on alpha then you release that and the tool releases it as with a git tag to match and bumps your version in the repo to alpha Then when you go to release that version it doesnt see a tag for alpha because the last tag was and then it says it cant detect changes Checking for the current versions tag first is fine but if thats not found just automatically go back through the tag list to find the latest tag version and compare to that Or just dont even autocompare at all But the current confluence of systems makes it so that just using the tool in the default mode makes it print error messages about problems that it gave itself which is silly Provide option to ignore untracked files when determining if working directory is dirty HEADOUTPUTgit diff HEAD exitcode nameonly echo Head OutputHEADOUTPUT Head Output LSOUTPUTgit lsfiles excludestandard others echo LS OutputLSOUTPUT LS Output RUSTLOGtrace cargo release noconfirm nodevversion tagname cratenameprevversion vv patch T Z WARN Uncommitted changes detected please commit before release Git status also indicates a clean working directory Not sure what it is erroring on If publishing one crate in a workspace fails for any reason it halts the cargo release process It would be nice if there were a way to run something like cargo release continue or cargo release frompackagethe one that failed to have it continue the release process from where it left off Right now I think the best option is to manually specify crates to exclude but in a project with a lot of crates that can be pretty annoying Added a check before running git push If the remote is not configured print info message and skip the push Fixes Fatal IO Error The system cannot find the file specified os error isnt very helpful The command that cargo release does is git push which assumes that an upstream repo is set for the current branch It will fail if this is not the case Having an upstream branch set should not be required I think the logic could go something like this If the upstream remote for the current branch is set then just run git push If the upstream remote for the current branch is not set and the pushremote config is set then run git push pushremote current branch If neither the upstream remote for the current branch nor the pushremote config is set set then run git push origin current branch If anyone merges to master during our release and we have a precommit hook that takes a few minutes the push fails Can I suggest that cargo release pull and merge with the remote before pushing The updateonly flag would combine the skippush skiptag skippublish and nodevversion flags The updateonlydev would combine the skippush skiptag and skippublish flags It would also force nodevversion to false Also it should do only one version bump instead of two Examples grep version Cargotoml version cargo release minor updateonly grep version Cargotoml version cargo release patch updateonly grep version Cargotoml version grep version Cargotoml version cargo release patch updateonlydev grep version Cargotoml version alpha cargo release minor updateonlydev grep version Cargotoml version alpha Use case As noted in when publishing a new version you dont know yet what the next version will be Sometimes your planning is telling you that right after a release youll have to implement some changes that will requires a major or minor release hence you do not want to start a patch release And if your CIplatform or QA team reports a regression you have to patch right away having the possibility to directly set the next dev version as a major or minor release would have been a mistake Setting nodevversion to true solves the first part of the problem by letting you decide later This is where the updateonlydev flags comes handy since it allows you to start the next development iteration with the correct version number The updateonly is simply be a shortcut for people who does not uses dev versions