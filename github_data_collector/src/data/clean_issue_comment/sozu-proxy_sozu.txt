its a bit annoying right now to have two different binaries and the different cargo features increase compilation times We could merge the code of sozuctl in sozu The biggest issue right now is that sozuctl use structopt but sozu uses clap directly But it would be a good opportunity to clean up sozus command line options To reproduce Client javascript const WebSocket requirews const ws new WebSocketwslolcathost hello wsonopen function open consolelogopen wssendsomething wsonmessage function incomingdata consolelogdata Server javascript const http requirehttp const WebSocket requirews const url requireurl const server httpcreateServer const wss new WebSocketServer noServer true wss onconnection function connectionws wsonmessage function incomingmessage consolelogreceived s message wssendhello message serveronupgrade function upgraderequest socket head const pathname urlparserequesturlpathname consoleloggot req n requesturl if pathname hello wss handleUpgraderequest socket head function donews wss emitconnection ws request else socketdestroy serverlisten Launch a sozu that listens on and will proxy HTTP traffic to the server When launching and stopping the client no issues messages are sent and received But when I do an upgrade with sozuctl sometimes nothing happens The node client establishes the TCP connection but I sometimes see invalid behaviour on the sozu side no event is generated for the listen socket Sozu is never notified that the accept socket is readable Note the listen socket is transmitted from the first worker to the new one with SCMRIGHTS the systemd unit file should set the max open files limit The code that checks the limits compared to the max number of connections should check the soft limit too not only the hard limit we regularly have to test new behaviour but activating or deactivating it from the configuration would result in breaking changes since the configuration protocol expects stable types for serialization I can ship test versions with the new behaviour but in case of problems rolling back quickly can be hard What I have in mind a global object that can be accessed from anywhere in the code like logs and metrics that would get its information from environment variables Test code would look up information with a key and Id like to return a tuple String number the string to compare a thing and decide to run the test or not like an application id or a path prefix the number to define a sampling rate so we can run the test on of traffic etc If the key is not present the test does not run when shutting down a worker we deactivate the listener sockets and wait for all session to die down before stopping the worker process Some sessions like websockets could stay connected indefinitely and keep the worker up We should keep track of which connections we should wait on like current HTTP requests but not the ones that are in keepalive waiting for a new request and which ones can be killed without asking most websocket libraries assume they have to reconnect at some point workers start by allocating the entire buffer pool even if most of it is never used The idea was to prevent big allocations when handling requests especially when under pressure to get stable latency It complicates some use cases like upgrading a worker we would need to leave enough free memory for an entire worker otherwise it would not be able to start before we can remove the old worker We could have a config option for that deciding whether we want to preallocate or not in some cases we might want to limit the number of concurrent connections to an application or backend and reject other connections We could need to have such answers available in HttpFront directly Currently we need this for and would need it for For now is hardcoded Fixes I made a naive implementation let me know if this can be done in a better way It only makes sense to have such error if the metrics section is defined A user got confused about this when trying to start sozu for the first time