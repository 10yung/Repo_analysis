Bitmaps now compressed like the other fonts to fix the bounding box problem because noncompressed the calculated text width were wrong Additional advantage is that it needs less program space Arduino board Arduino NANO version Arduino IDE version Other HW SW andor environment dependencies when bugs found Win x in OLED color display w SSD chip from Banggood product SPI can be HW or bitbanged the bugs are not related to the SPI interface or its speed AdafruitGFX ver and later AdafruitSSD version Bugs found In AdafruitGFXcpp the method drawCircleHelper has no effect no pixels are written in any color in any quadrant Root cause In AdafruitGFXcpp version about line Missing startWrite and endWrite calls around code Similarly method fillCircleHelper has no effect no pixels are written in any color Root cause same as above missing startWriteendWrite around code After fixing the above two problems the following additional bugs became visible when trying to refreshoverwrite certain quadrants of a dial gauge In method fillCircleHelper The quadrant corner arguments are misapplied produce incorrect results For example a command to fill quadrant fills both and a command to fill quadrant fills both and To clarify quadrants I define them as follows for a circle with zero degrees on the right quadrant sector from degrees to degrees quadrant sector from degrees to degrees quadrant sector from degrees to degrees quadrant sector from degrees to degrees Also in method fillCircleHelper there is a vertical artifact which the fill algorithm cannot remove That is in the example sketch if the dial gauge succeeds in drawing a degree needle I cannot erase it overwrite it with the background color using the fillCircleHelper method I can only do so with a fillRectangle command See the attached sketch Other testing done I checked later library versions and for my SSD display and sketch backward compatibility got worse not better I have attached a sketch which triggers or demonstrates the above defects It is called oledAFGFx bugsino I have also attached a photo which shows and above Best regards Tealok AFGFX bugs oledAFGFxbugs txt Im basically looking for some drawing functions to create an image where no display is involved the image is intended to be transferred via a webserver running on my board So my question is the AdaGFXlib able to use a drawing buffer of a given size without any hardware involved draw some things on that buffer and then provide the resulting image data for further processing Thanks I have been testing the AdafruitGFXButton function and I noticed that the button label cannot exceed characters I have changed the library to allow a greater range using the strcpy function instead of strncpy Nestor Palomeque The changes are tested well see the example Signedoffby Agha Saad Fraz aghasaad gmailcom I have to document this library while working as a technical writer for Arduino in GSoD I have done the following steps Followed writing standards Added Description Added Requirements section Added Installation steps Added Features Added functions Added example Added contributing heading and its file Added credits Referenced external resources Hello Ive created an extension to the drawButton method to allow the use of custom fonts for the button labels Without these changes the labels were not placed correctly inside the buttons ie in the center when setting a custom font This extension files AdafruitGFXcpp and AdafruitGFXh are currently commited to my local clone Is there a branch where I could push it to for review and the integration in the library Hello GFX maintainers This request is related to this comment The rationals for supporting background painting also for custom fonts are Custom fonts are important because of the limited size availability of the built in font no real size scaling just pixel replication The comment assumes that custom fonts are not monospace Custom fonts can be monospace if the user choses so Even for non monospace fonts being consistent with the native fonts and painting the background is more intuitive The user still has the option of setting textcolor bgcolor for the leave background as is affect similar to the native font Please reconsider this decision and provide a way to overwrite custom fonts backgrounds Its much better than the alternative of using the tiny native font or forking this library If you are concerned about backward compatibility a compile time conditional define OVERWRITECUSTOMFONTSBACKGROUND should do the trick Thanks Wanted to display glyphs from fonth files generated from UTF fontttf files Found some discussions in suggesting the use of iso x chars which IMHO is not a good idea one needs to find a proper tool to convert UTF ttf files to iso first then generate the fonth files that will be still larger than the ASCII fonth files boundled with the library Even in that case you might end up not beeing able to display a glyph if your iso x coded font did contain it Of course a fonth generated from a UTF ttf will need more memory but its and newer boards tend to have a right amount of memory While looking for a solution i also found from Bodmer who also provided me some help He forked V and modified it but that version does not compile on my board and since that version even the code has been reordered here in master branch So i ended up comparing Bodmers modified version with the original master and as result here is my PR that enables UTF with custom made fonts while not changing anything with the default fonts UTF support is turned off by default ensure not breaking anything on boards with few ram you only have to enable it by adding displayutf to the sketch Tested with a MAX FTHR and Flexible Monochrome eInk ePaper Display For generating UTF fonth files is also needed Please test on other boarddisplay combinations and merge 