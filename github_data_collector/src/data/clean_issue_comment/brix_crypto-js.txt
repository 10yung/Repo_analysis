Now the latest version is not compatible with ie please tell me which version to download if I want to use it on ie function root factory if typeof exports object CommonJS moduleexports exports factory else if typeof define function defineamd AMD define factory else Global browser rootCryptoJS factory this function return CryptoJS this is my php code it can work i want to use nodejs function stripPKSC Paddingsource char substrsource num ordchar ifnum return source source substrsource num return source function decryptstrscrectkey str base decodestr screctkey base decodescrectkey ivsize mcryptgetivsizeMCRYPTRIJNDAEL MCRYPTMODECBC iv strrepeat ivsize decryptstr mcryptdecryptMCRYPTRIJNDAEL screctkey str MCRYPTMODECBC iv decryptstr stripPKSC Paddingdecryptstr return decryptstr this is nodejs code var CryptoJS requirecryptojs var data m HcVZR pvTtmNbqgkH qtmLhJpCZx oi u stmGUo Z OmKhtHFVaiFQ pKJvhXwSRVjC IBaotOduxOzIrIqfgxnvBWY zYCUDLPbsm yz omvQLRBGsP MHYLaOFEgFUgREOCa AKH u v YlnTIdp XZGGZnKydissMwTiU xrM quZnFwqgTSXmCzSEfeHfjr qTOpLGRfY JU FCq udkj pA UspfCnUU LY z AiPr TKS ZEj Pxz x beTf pGQDrrFHaB dbbo V RalmWsyNTiKlAA S OO uXtL tkYXCddyYQnk waYqrZOgJLnVS o PLzzChU var aes Lj Ubk ZyzlUZGTKgTl A Base Utf var response CryptoJSencBase parsedatatoString var aes CryptoJSencBase parseaestoString var bytes CryptoJSAESdecryptresponse aes iv mode CryptoJSmodeCBC padding CryptoJSpadPkcs var plaintext bytestoStringCryptoJSencUtf my code can not workplease help me thanks Im using CryptoJS for EvaporateJS and have this bit of code when initialising evaporate its working fine cryptoHexEncodedHash data return cryptoSHA data This shouldnt work for two reasons data here is an ArrayBuffer and typescript tells me that cryptoSHA doesnt take that Type as an argument The returned wordArray is not a string so it shouldnt work but this may be a question for evaporateJS instead Modification that should improve this and make this right but instead break things and stop them from working From this comment converting the data into a wordArray first does not work cryptoHexEncodedHash data const wordArray cryptolibWordArraycreatedata return cryptoSHA wa Doesnt work return cryptoSHA watoString Also doesnt work Returning the original working wordArray as a string via toString does not work either This isnt a complain things are working minus Typescript screaming at me Im just trying to gain a deeper understanding of what is going on Any guidancehelping comments much appreciated Thanks I tried to implement the key based on encryption angular i checked your api docs in npmjsorg I didnt find public key based encryption in your module if not exist kindly implement it const key CryptoencBase parsemykeycipher const iv CryptoencBase parsemyivcipher const encrypted CryptoJSAESencryptpasswordkeyiviv const ctext encryptedciphertexttoStringCryptoJSencBase mykeycipher look like b e dea a abf cf f c myivcipher look like ad bb d a a face ef Its hexdex not base but there are work fine make me confusion I review docs find API that var words CryptoJSencBase parseSGVsbG sIFdvcmxkIQ I want to make the same cipher text by another side issues encrypt How can the crypto Library of nodejs decrypt the AES encryption of crypto JS Some issues asked for TypeScript and ES module support This is an repo the same as cryptojs in ES wich may solve these problems I have a Rijndael based c code I try to encrypt in c Rijndael and decrpt in javascriptCryptoJS But i cant match the encrypted values I try lots of things but nothing worked Here is my c code public string GenerateKey string EncodeAes string key string input var aes GetCryptoParams key var plainBytes EncodingUTF GetBytes input Key will be Base String oo return ConvertToBase String AesEncrypt plainBytes aes RijndaelManaged GetCryptoParams string key random key bytes bit var keyBytes new byte var secretKeyBytes EncodingUTF GetBytes key ArrayCopy secretKeyBytes keyBytes MathMin keyBytesLength secretKeyBytesLength var aes new RijndaelManaged Mode CipherModeCBC Padding PaddingModePKCS KeySize BlockSize Key keyBytes IV keyBytes return aes byte AesEncrypt byte plainBytes RijndaelManaged rijndaelManaged return rijndaelManagedCreateEncryptor TransformFinalBlock plainBytes plainBytesLength return EncodeAes qwertasdfgzxcvbn RandomPasswordGenerate POST apivalues HttpPost public HttpResponseMessage GetEncDecText FromBody encRequest req string EncodeAes string key string input var aes GetCryptoParams key var plainBytes EncodingUTF GetBytes input return ConvertToBase String AesEncrypt plainBytes aes string DecodeAes string key string thisDecode var aes GetCryptoParams key try var encryptedBytes ConvertFromBase String thisDecode return EncodingUTF GetString AesDecrypt encryptedBytes aes catch return null RijndaelManaged GetCryptoParams string key var keyBytes new byte var secretKeyBytes EncodingUTF GetBytes key ArrayCopy secretKeyBytes keyBytes MathMin keyBytesLength secretKeyBytesLength var aes new RijndaelManaged Mode CipherModeCBC Padding PaddingModePKCS KeySize BlockSize Key keyBytes IV keyBytes return aes byte AesEncrypt byte plainBytes RijndaelManaged rijndaelManaged return rijndaelManagedCreateEncryptor TransformFinalBlock plainBytes plainBytesLength byte AesDecrypt byte encryptedData RijndaelManaged rijndaelManaged return rijndaelManagedCreateDecryptor TransformFinalBlock encryptedData encryptedDataLength And here is my javascript code var serverEncText PKvsNm qOc egIkqyi w var secretKey YIOB NooY lP CRSqKQ KiluAF cYn kFXvJkS var decryptData functionencryptedData var Key CryptoJSencBase parsesecretKey var IV CryptoJSencUtf parsenew Bufferfrom ABCDEF var decryptedText CryptoJSAESdecryptencryptedData Key keySize BlockSize iv IV mode CryptoJSmodeCBC padding CryptoJSpadPkcs return decryptedTexttoStringCryptoJSencUtf var result decryptData encryptedData consolelogresult result backend works awesome secretKey is my generated key and serverEncText is my c encoded text When when i try this in javascript its always returns empty string How to resolve it This package hasnt been published in years and the version on npm currently is missing the important bug fix Can we please republish this to npm so that we can pull it into our projects Thank you