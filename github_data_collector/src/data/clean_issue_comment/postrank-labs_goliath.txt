Rack is now on but Goliath currently does not support x ruby sadddependency rack sadddevelopmentdependency rack Are there any plans to update support for Rack x If the connection has been closed there is no point in continuing iterating over the response body and continuing to send data because it will never get written to the socket anyway This saves on performance Also once close has been called on the response body continuing to iterate over it might raise an exception Imagine a scenario where the body is a lazy enumerable that retrieves chunks from an open file and close closes the file In tusrubyserver Im handling large file uploads When the user makes a PATCH request with a chunk of the file the app first validates request headers and if theyre invalid it returns it returns an error response without even reading the request body Im using goliathrackproxy as a glue between Goliath and the tusrubyserver Rack app and Im trying to figure out how to return the response early with Goliath The reason I want that is because I would like to avoid happily accepting multiple gigabytes of request body from a client only to return an error response because the request headers were invalid I would like to utilize Goliaths ability to act as soon as request headers are received The problem is that succeed is called on the GoliathRequest only after all request body has been receved and all of the env ASYNC procs use callback which means they will send the response only after all request data has been received eg I tried using env ASYNCCALLBACK I wrote the following proofofconcept which uses hacks to access the GoliathRequest object already discussed in and use GoliathConnectionsenddata directly rb require goliath class App GoliathAPI def onheadersenv headers request env ASYNCCALLBACK receiver connection requestconn response requestresponse responsestatus responseheaders Foo Bar responsebody This is a response responseeach data connectionsenddatadata connectionterminaterequestfalse end def responseenv end end Im pretty sure that returning a response early is valid HTTP interaction because curling this app returns the response without any errors Are you open to support this in Goliath If yes I could come up with a PR Dear how do I change the message An error happened when status is I need to put a customized message I dont think the Ruby version matters here but just in case Last login Thu May on ttys tmp bundle exec ruby v ruby p revision x darwin tmp Ive set up a minimal repro in a gist tmp git clone gitgistgithubcome e b db ec b egit repro Cloning into repro remote Counting objects done remote Compressing objects done remote Total delta reused delta packreused Receiving objects done Resolving deltas done Checking connectivity done tmp cd repro tmprepro Goliath declares a dependency on eventmachine beta If your Gemfile does not lock to a particular eventmachine version bundle update or even your initial bundle install can wind up installing eventmachine which as of this writing is their latest version This version of EM causes at the very least GoliathTestHelper to fail mysteriously tmprepro bundle update bundle exec ruby testrb Fetching gitgithubcompostranklabsgoliathgit Fetching gem metadata from Fetching version metadata from Fetching dependency metadata from Resolving dependencies Using addressable Using rack Using cookiejar Using einhorn Using eventmachine Using httpparserrb Using gitversionbump Using log r Using multijson Using rackacceptmediatypes Using minitest Using bundler Using asyncrack Using emsocksify Using emsynchrony Using emwebsocket Using rackcontrib Using rackrespondto Using emhttprequest Using goliath from gitgithubcompostranklabsgoliathgit at aeb ae aeb ae Bundle updated Run options seed Running E Finished in s runss assertionss Error Testtestreproducingemdependencyissue RuntimeError API request failed Usersavondrakrvmgemsruby bundlergemsgoliath aeb ae e d libgoliathtesthelperrb in block in moduleTestHelper Usersavondrakrvmgemsruby gemseventmachine libemdeferrablerb in errback Usersavondrakrvmgemsruby bundlergemsgoliath aeb ae e d libgoliathtesthelperrb in hookuprequestcallbacks Usersavondrakrvmgemsruby bundlergemsgoliath aeb ae e d libgoliathtesthelperrb in getrequest testrb in block in testreproducingemdependencyissue Usersavondrakrvmgemsruby bundlergemsgoliath aeb ae e d libgoliathserverrb in block in start Usersavondrakrvmgemsruby gemsemsynchrony libemsynchronyrb in block levels in synchrony runs assertions failures errors skips tmprepro I do not know what the bug is but it seems to have been introduced by EM If I lock the Gemfile to the previously released version I do not get these errors tmprepro LOCKEMVERSION bundle update bundle exec ruby testrb Fetching gitgithubcompostranklabsgoliathgit Fetching gem metadata from Fetching version metadata from Fetching dependency metadata from Resolving dependencies Using addressable Using rack Using cookiejar Using einhorn Using eventmachine was Using httpparserrb Using gitversionbump Using log r Using multijson Using rackacceptmediatypes Using minitest Using bundler Using asyncrack Using emsocksify Using emsynchrony Using emwebsocket Using rackcontrib Using rackrespondto Using emhttprequest Using goliath from gitgithubcompostranklabsgoliathgit at aeb ae aeb ae Bundle updated Run options seed Running Finished in s runss assertionss runs assertions failures errors skips tmprepro At the very least Goliaths dependency is too permissive I dont know how to make Goliath compatible with EM but I do know that a recent bundle update on my project has broken basically all of the tests Also I get runtime errors when I dont declare an emhttprequest dependency should this be added explicitly to the Goliath gemspec Hi One of the apps at my org is deployed on heroku While monitoring the logs on heroku we observed an exception and the app stopsgoes to sleep It is accompanied by exception like this one Feb heroku web Idling Feb heroku web State changed from up to down Feb heroku web Stopping all processes with SIGTERM Feb app web appvendorruby libruby monitorrb in lock cant be called from trap context ThreadError from appvendorruby libruby monitorrb inmonenter from appvendorruby libruby monitorrb in monsynchronize from appvendorbundleruby gemslog r liblog routputteroutputterrb insynch from appvendorbundleruby gemslog r liblog routputteroutputterrb in canonicallog from eval ininfo from eval in block in info from eval ineach from eval in info from appvendorbundleruby gemsgoliath libgoliathserverrb instop from appvendorbundleruby gemsgoliath libgoliathserverrb in block levels in start from appvendorbundleruby gemseventmachine libeventmachinerb incall from appvendorbundleruby gemseventmachine libeventmachinerb in runmachine from appvendorbundleruby gemseventmachine libeventmachinerb inrun from appvendorbundleruby gemsemsynchrony libemsynchronyrb in synchrony from appvendorbundleruby gemsgoliath libgoliathserverrb instart from appvendorbundleruby gemsgoliath libgoliathrunnerrb in runserver from appvendorbundleruby gemsgoliath libgoliathrunnerrb inrun from appvendorbundleruby gemsgoliath libgoliathapplicationrb in run from appvendorbundleruby gemsgoliath libgoliathapplicationrb inblock in moduleGoliath Exception Feb heroku web Process exited with status We got to know from support that this line in goliath is causing the issue Can you guys help to resolve this one Not with ruby background so any detail will be greatly appreciated Thanks Hi I am getting the following error after adding Goliath to my Gemfile I am getting this error when I am trying to run my app using webrick in development mode Please help Exiting Usersnikhilbansalrvmgemsruby gemsrack librackhandlerrb in pick Couldnt find handler for thin puma webrick LoadError from Usersnikhilbansalrvmgemsruby gemsrack librackhandlerrb in default from Usersnikhilbansalrvmgemsruby gemsrack librackserverrb in server from Usersnikhilbansalrvmgemsruby gemsrailties librailscommandsserverrb in printbootinformation from Usersnikhilbansalrvmgemsruby gemsrailties librailscommandsserverrb in start from Usersnikhilbansalrvmgemsruby gemsrailties librailscommandscommandstasksrb in block in server from Usersnikhilbansalrvmgemsruby gemsrailties librailscommandscommandstasksrb in tap from Usersnikhilbansalrvmgemsruby gemsrailties librailscommandscommandstasksrb in server from Usersnikhilbansalrvmgemsruby gemsrailties librailscommandscommandstasksrb in runcommand from Usersnikhilbansalrvmgemsruby gemsrailties librailscommandsrb in top required from binrails in require from binrails in main So I had accidentally put a typo into def oncloseenv on my GoliathAPI class and noticed the app would after crashing remain running but on a different port I tested locally and noticed that it does not happen if we use the daemonize flag We dont use daemonize flag bc of how we have upstart configured So long story short I realized that what was happening was that the app was being restarted with the default configuration by this flag Goliathrunapponexit So I am wondering what is the purpose of this flag and why is it true by default Cheers I add this to my apirb use GoliathRackValidationCoerceValue key url as ValidUrl And required this class libsvalidurlrb in my runnerrb class ValidUrl def coerce value opts raise GoliathRackValidationFailedCoercenew URL is invalid end end The exception is never thrown Am I missing something else exampleshttplogrb is very helpful for me I noticed that the response header handling can be more simple by using EventMachineHttpResponseHeaderraw definition here 