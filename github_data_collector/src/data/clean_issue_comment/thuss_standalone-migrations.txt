 Things Done Updated gemfile to support rails Ran a bundle update to update all gems Added additional configuration to the travis yml to test rails version Bumped ruby version to Accept sqllite gem version from env to allow diff versions to be tested Resolves Hello could you please provide a minimal example of how to populate the database assuming the table and the fields exist Usual rails example doesnt work countrylist Germany France Belgium Netherlands countrylisteach do name population Countrycreate name name population population end Thank you Are there any current maintainers interested in adding support for Rails I couldnt figure out why it bundler was complaining about this gem using rails Perhaps it just me Bundler could not find compatible versions for gem activesupport In Gemfile activerecord was resolved to which depends on activesupport standalonemigrations was resolved to which depends on railties was resolved to rc which depends on activesupport rc Steps to reproduce Run standalonemigrations specs Expected behavior All tests green Actual behavior Finished in seconds files took seconds to load examples failures Failed examples rspec specstandalonemigrationsspecrb Standalone migrations dbseed loads rspec specstandalonemigrationsspecrb Standalone migrations dbseed with nondefault seed file loads System configuration Ruby version Source of the issue Hi are custom templates for migrations supported by standalonemigrations I tried to get some working using templates in libtemplatesactiverecordmigrationcreatetablemigrationrb and libtemplatesmigrationtemplatescreatetablemigrationrb based off some Stackoverflow suggestions but that didnt work No big deal if not just a nice to have move environment configuration into connection task so its not executed in situations where no standalonemigrations task is called Allows other rake tasks to be executed when dbconfigyml is missing fixes dbconfigyml is required in the moment the tasks are loaded I tend to use a rake task like the following to setup development environments without having having the actually used config under version control namespace dev do desc Setup Dev Environment task setup dbconfigyml one rule to rule them all Copy any ymlexample to matching yml rule yml ymlexample do task cp tasksource taskname end end Sadly StandaloneMigrationsTasksloadtasks will fail with a missing dbconfigyml so i cant run my devsetup tasks which would create the file Would be awesome if the dbconfigyml would only be required when the tasks are executed not just loaded Having this env vars DATABASEURLTESTpostgrespostgreshelepostgrestechloopautomatortestik dbconfigyml test database techloopautomatortest Rakefile require standalonemigrations StandaloneMigrationsTasksloadtasks StandaloneMigrationsConfiguratorenvironmentsconfig do env envon test do if ENV DATABASEURLTEST db URIparseENV DATABASEURLTEST return adapter dbscheme postgres postgresql dbscheme host dbhost username dbuser password dbpassword database dbpath encoding utf end nil end end When I run rake dbcreate RAILSENVtest I get rootf db dfautomator rake dbcreate RAILSENVtest Created database techloopautomatortest it creates techloopautomatortest as opposed to techloopautomatortestik I use env file to pass postgres url into my apps Using this approach I cannot migrate test environment db using standalonemigrations When DATABASEURL is set in environment gem ignores existing configuration when other env is specified rake dbdrop dbcreate dbmigrate RAILSENVtesting where testing refers to valid configyml takes whatever is stored in DATABASEURL and creates the database It does it in the specified testing mode so that dropping the database with rake dbdrop produces ActiveRecordEnvironmentMismatchError 