This started out as an attempt to make Rubberduck more sensitive to Windows theme but this failed miserably because we were using same colors in several different places Thus this PR aims to convert all hardcoded color literals eg AliceBlue DimGray etc and all hex codes into references defined in new LightBlueThemexaml style Furthermore most if not all xaml files now reference the DefaultStylexaml making it much easier for to unify the common theming elements The DefaultStylexaml contains all the shared converters Style elements The PR should not actually change the existing coloring scheme we should be able to do this in a separate PR basing our changes on the LightBluexaml So far the IAddComponentService did not provide a possibility to name the new component This is unfortunate since the component is not returned in order to shield the using code from using SCWs This PR changes this by adding an optional parameter for the component name That the name actually gets assigned is not fully guaranteed since a name collision will cause a COMException which will be logged ans swallowed It is the callers responsibility to make sure that no component of the desired name already exists Below are a some ideas that could be considered for enhancements to the EncapsulateField Refactoring Supportallow encapsulation of constants as Read Only properties Apply a ObjectStateUDT annotation on the ObjectStateUDT field Use an annotation to explicitly identify the field to be used for future field encapsulations Once the user has elected to encapsulate the objects state in a UDT the refactoring attempts to make it an explicit optout decision to encapsulate a subsequent field using backing a field Using an annotation facilitates this objective The annotation would be especially important if the user has renamed the ObjectStateUDT Type the refactoring currently looks for an expected Type name to detect if an ObjectStateUDT exists Introduce an Add New Field capability to the refactoring and possibly expose a separate standalone refactoring option admittedly this is more of a code generation feature than a refactoring In order to add an new encapsulated field after all fields are encapsulated backing field or UDT the user needs to add a field Parse and then run the EncapsulateField Refactoring Or do it all manually The Add New Encapsulated Field capability would present the user with a Property Name text box a Type identifier combo box and a Read Only check box Close Still tracking down an issue where changing ClassModuleInstancing is not reflected properly in the View for the Extract Interface dialog Im stumped as to whats causing it Documenting it here in case another duck can help me figure it out the root cause Have RD parse a class module with the code below while instancing is Private Option Explicit Public Sub Bar DebugPrint bar End Sub Public Sub Bazz DebugPrint Bazz End Sub Public Sub Dukvalue As String DebugPrint value End Sub Change the instancing to PublicNotCreatable and perform a reparse The Extract Interface dialog that shows is incorrect The reason is a public implementing class mandates that the interface must also be public Unfortunately as shown below the Private option is still enabled Choose private and confirm with OK to create the private interface Public implementing class has a private allowable interface which causes a compiler error From the menu DebugCompile Project and you have the case were trying to eliminate Delete the Implements keyword from the implementing class then delete the newly created IClass interface This causes RD to reparse Go and extract another interface Notice that now the Private option is greyed out as it should have been originally Confirm with OK to extract the interface and again DebugCompile This time everything is fine as both the implementing class and the interface are public Private option greyed out with a public implementing class What The inspection should find spurious newlines at the end of the files and warn about it It probably also needs a quickfix that removes the newlines to be useful Could also be useful if it identified other whitespace that can be removed lines with just whitespace and potentially two or more newlines after each other this is a code style preference and therefore not equally obviously something people might want Why In my git repos containing VBA code I quite often have changes that are purely adding or subtracting newlines at the end of files and that distracts from the changes actually made by the commit Also because of this is something Rubberduck introduces quite often in my code Example This code should trigger the inspection vb Public Sub DoSomething End Sub QuickFixes Please add a quick fix that simply removes the spurious newlines and or whitespace RemoveTrailingNewLines Example code after quickfix is applied vb Public Sub DoSomething End Sub Resources Each inspection needs a number of resource strings please provide a suggestion here InspectionNames TrailingNewLinesInspection InspectionInfo The file has trailing new lines that should be removed for aesthetic reasons InspectionResults The file has trailing new lines that should be removed for aesthetic reasons Rubberduck version information Rubberduck version Operating System Microsoft Windows NT x Host Product Microsoft Office x Host Version Host Executable EXCELEXE Description Indentation go wrongly to the left after a commented line with a complete FOR loop To Reproduce Please read and optionally copy paste and test the problem with the following sample code lines Sub IndentationTestSampleCode This method is just a sample for edition purposes It is not intended to be executed nor used as coding hint sample and it does not do any relevant action Dim i As Long Do Do The below line does Not affects the rest of the lines when indenting For i To Beep Next But the next line Does it For i To Beep Next Beep From the above line and all after the previous commented FOR loop will be indented by RubberDuck to the left which actually it is a wrong behaviour This issue can be reproduced using Module indentation tested with a shortcut It happens with loops like ForNext DoLoop and WhileWend but always when they are in the same line and that line is commented out While False Wend Note that this comment just at the EOL stops the issue Beep While False Wend But this one at least an space after the EOL does not Beep Loop Loop End Sub Expected behavior Indentation after a commented line even when it has a complete FOR or other kind of loop must keep aligned to the previous commented line except if that line triggers a valid rule like be at begining of the method and that rule is active just to say a valid rule as an example Screenshots Logfile Additional context Rubberduck version information Version Syst me dexploitation Microsoft Windows NT x Produit h te Microsoft Office x Version h te Ex cutable h te EXCELEXE Description I cannot start the Test Explorer I have tried with the menu Rubberduck Unit test Test Explorer With the option Windows Settings Visibility at startup Test explorer ticked Test explorer wont show To Reproduce Steps to reproduce the behavior Go to Rubberduck Test Unitaires Explorateur de test Expected behavior Opening the test explorer window Logfile DEBUG RubberduckUICommandMenuItemsParentMenusParentMenuItemBase Executing click handler for menu item Explorateur de tests hash code TRACE RubberduckUIDockableWindowHostIOleObjectDoVerb called with iVerb OLEIVERBSHOW DEBUG RubberduckUICommandMenuItemsParentMenusParentMenuItemBase Executing click handler for menu item A propos hash code Additional context I have test modules Unit test settings is as followed xml version encodingutf Configuration UnitTestSettings BindingModeDualBindingBindingMode AssertModeStrictAssertAssertMode ModuleInittrueModuleInit MethodInittrueMethodInit DefaultTestStubInNewModuletrueDefaultTestStubInNewModule UnitTestSettings Configuration Justification Hello I am Portuguese and I have some colleagues who would like to use the program but they are not very good in English Description I could collaborate with you to translate the program to Portuguese Justification Having an easilyaccessible file explorer window automatically rooted at the exported files source files directory would make source control operations quicker to access Description Since the removal of the Source Control window Rubberduck has not had any means for users to perform source control operations without leaving the VBE In VBA the Export Project and Sync operations have simplified the process of moving code between the VBE and the file system but the user must make their own arrangements to move code between the file system and a source control repository Whilst there is no appetite to reintroduce the Source Control component we could easily embed a Windows File Explorer inside a toolwindow in Rubberduck This would allow Easy visualisation of exported files Standard explorer operations file rename add directory etc Shell extension operations The last of these is particularly interesting A popular Windows Git client is TortoiseGit This is implemented as a shell extension with Git operations available from a rightclick in Windows File Explorer It also adds icon overlays to display changed unchanged and conflicted files and directories Thus if we embed a file explorer and the user has TortoiseGit installed they can achieve a git workflow without leaving the VBE at minimal development and support cost to the RD team This could be implemented either as a new tool window or preferably as a different mode of the Code Explorer in a similar fashion to modern Visual Studio Additional context Heres a mockup Rubberduck version information Version OS Microsoft Windows NT x Host Product Microsoft Office x Host Version Host Executable EXCELEXE Description RD doesnt create a Test Module To Reproduce Steps to reproduce the behavior In RD MenuUnit TestsTest Module Nothing happens no test module is created Expected behavior A test module is expected to be created Logfile RubberduckLogtxt 