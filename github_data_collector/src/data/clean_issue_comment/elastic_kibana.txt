 Summary We introduced nested fields support in but nested fields show up across different Kibana apps since they are now marked as aggregatable in the index pattern but wont work there and just create nasty error messages and invalid requests This PR filters out nested fields via an isNestedField utility function in the data plugin across those apps At all reviewers if you think about a place where you have the feeling it would make sense that those fields are also filtered out please leave a comment I tried my best testing several places and filtering them out in all those places they dont work which are most of them Checklist Use strikethroughs to remove checklist items you dont feel are applicable to this PR This was checked for crossbrowser compatibility including a check against IE Any text added follows EUIs writing guidelines uses sentence case text and includes i n support Documentation was added for features that require explanation or tutorials Unit or functional tests were updated or added to match the most common scenarios This was checked for keyboardonly and screenreader accessibility For maintainers This was checked for breaking API changes and was labeled appropriately x This includes a feature addition or change that requires a release note and was labeled appropriately A test failed on a tracked branch Error expected testSubjecthomeApp to exist at TestSubjectsexistOrFail devshmworkspacekibanatestfunctionalservicestestsubjectsts First failure Jenkins Build kibanaCiData failedtesttestclassChrome XPack UI Functional Testsxpacktestfunctionalappsadvancedsettingsfeaturecontrolsadvancedsettingsspaces tstestnameAdvanced Settings spaces feature controls space with Advanced Settings disabled redirects to Kibana hometestfailCount Removing PO and cleaning func tests config from code search data since the plugin is no longer in repo Describe the feature Support multiple threshold lines on barlinearea charts Describe a specific use case for the feature There are occasion you may need multiple threshold lines say upper and lower limits Previously this was being done within the internalsecurityapikeyprivileges route by checking the error that was throw by trying to get all API keys nchaulet requested that we expose this functionality and legrego brought up using the xpackusage API to make this determination The rest is history handle fields of type alias fields of type alias have a fieldpath attr before flattening and transforming the field being aliaseds contents need to be copied over to the alias field by searching through all the fields update flattenFields to search for the alias path and copy contents of aliased field over add getField function for searching by alias path update tests to loop through assertions On master the script fields link in the screenshot below goes to which is a Looks like this page is live for x and has redirect content for Move camemra logic to useCamera No change to functionality at all Summary Summarize your PR If it involves visual changes include a screenshot or gif Checklist Use strikethroughs to remove checklist items you dont feel are applicable to this PR This was checked for crossbrowser compatibility including a check against IE Any text added follows EUIs writing guidelines uses sentence case text and includes i n support Documentation was added for features that require explanation or tutorials Unit or functional tests were updated or added to match the most common scenarios This was checked for keyboardonly and screenreader accessibility For maintainers This was checked for breaking API changes and was labeled appropriately This includes a feature addition or change that requires a release note and was labeled appropriately With a short timespan range of s as originally here we can miss data in the case of long refresh intervals in ES or other delays in data coming from heartbeat to ES If data is more than s stale we show empty screens Expanding this to m provides most of the performance benefits and also quite a bit of safety in terms of delays It lets users query very large timespans say a year and still only really query m of data keeping the general purpose of this perf enhancement going Fixes Adding tests here isnt strictly necessary IMHO since were changing a constant value more than functionality The screenshot below can be seen when data is slow to ingest with data The cause is an overly optimistic window for our timespan optimization in QueryContext We should expand that from s to m to be safe This was introduced in 