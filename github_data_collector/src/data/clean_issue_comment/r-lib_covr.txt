Method signatures are listed but the associated generic is not So we can get a report like printp functions cpack Coverage B numericcharacterA numericnumeric A numericcharacter additionally the tally reported for a generic seems not to reflect the fact that some of its methods may be untested the little report above is generated with p packagecoverage for R Under development unstable r Platform x appledarwin bit Running under macOS Mojave Matrix products default BLAS LibraryFrameworksRframeworkVersions ResourcesliblibRblas dylib LAPACK LibraryFrameworksRframeworkVersions ResourcesliblibRlapackdylib locale enUSUTF enUSUTF enUSUTF CenUSUTF enUSUTF attached base packages stats graphics grDevices utils datasets methods base other attached packages covr cpack testthat rmarkdown loaded via a namespace and not attached Rcpp compiler prettyunits remotes tools digest pkgbuild pkgload evaluate memoise rlang rex cli rstudioapi xopen xfun xml withr stringr knitr roxygen desc fs devtools rprojroot glue R processx fansi rcmdcheck sessioninfo startup callr purrr magrittr backports codetools ps ellipsis htmltools usethis assertthat stringi lazyeval crayon I currently use this slightly adapted version of filecoverage to also trace code run using mclapply mcparallel etc filecoverage functionsourcefiles testfiles lineexclusions NULL functionexclusions NULL parentenv parentframe tdir tempfilecovrtraces dircreatetdir fixmcexitpaste tdir env newenvparent parentenv withrwithoptionsckeepparsedatapkgs TRUE lapplysourcefiles syssource keepsource TRUE envir env traceenvironmentenv onexit resettraces clearcounters lapplytestfiles syssource keepsource TRUE envir env savetracetdir coverage structuremergecoveragelistfilestdir fullnames TRUE class coverage excludecoverage lineexclusions lineexclusions functionexclusions functionexclusions path NULL Maybe you want to consider adding this to covr I guess one would certainly want to make patching parallelmcexit optional just as it is for packagecoverage Eg from Travis I saw Rscript e covrcodecov Error in parseexclusionsxfilelines excludepattern excludestart starts but only ends Calls Anonymous packagecoverage exclude lapply FUN parseexclusions Execution halted Would be nice to have the file name source line Otherwise you dont get any feedback in RStudio until theyre done which might take a while Hello all At my company we have an extensive array of tests using testthat on our proprietary codebase and we track coverage using covr This is for a nightly test run that checks our development git branch To shorten our debugging loop and make it faster than a hour cycle weve discovered that its feasible to assemble a traceability matrix that identifies precisely which of our tests would be hit by a proposed commit or pull request affecting a particular subset of our K lines of covered code Step get a named list of coverage objects from the nightly run Step Run this function on it title Tally File Coverage for a traceability matrix description Merge a list of fc objects param fcl named list of fc objects return A datatable wiht the filename line and functions columns from the fc objects and a column for each name in the fcl holding its value column aggregateTestMatrix functionfcl filename NULL appease R CMD Check if requireNamespacecovr returnNULL safety catch here tcl lapplyFilterfunctionx inheritsxcoverage fcl covrtallycoverage for n in namestcl colnamestcl n c filename functions linen rc Reduce functionxy merge xy bycfilenamelinefunctionssortT tcl for some reason it sorts the line column by character so this reverts to numeric asdatatablerc orderfilenameline Step with this datatable you can name the tests youre expecting to affect findTests functionfname tm startNULL endNULL tm filename NULL R CMD Check if isnullstart start tm filename paste Rfnameminline if isnullend end tm filename paste Rfnamemaxline sdcols colnamestm lengthcolnamestm tsts tm filename paste Rfname line start line end tsts tsts lapplySD sum SDcols sdcols names Filterfunctionxx aslisttsts And we have a function to identify the filenames and lines based on your git diff if you have uncommitted work or versus a branchtobranch diff if youre abotu to submit a pull request A new change to the git r library will let us make a cleaner version of the function once it propagates to CRAN preCommit functionPR FALSE URL elided URL to our main Git repository if requireNamespacegit r warningInstall the git r package to use precommit returnNULL todo enable PR comparisons as well repo git rrepository if PR if git rlibgit featuresssh warningInstall the git r package WITH SSH ask Omri to use precommitPRT returnNULL if lengthgit rstatusrepounstaged warningYou have uncommitted work Commit or remove before checking a PR returnNULL warningChanging branches under this R process to get the diff tmyfork git rtreegit rlastcommitrepo git rremoteaddrepordevelop URL git rfetchname rdevelop git rcheckoutrepo branch rdevelopmaster tdevelop git rtreegit rlastcommitrepo D git rdifftdevelop newtree tmyfork git rcheckoutrepo branch master git rremoteremoverepordevelop else D git rdiffrepocontextlines for each file gather line numbers affected in old version and feed into findtests queries lapply Dfiles functionx lapplyxhunks functionh listfilename basenamexoldfile start holdstart end holdstart holdlines return Filterfunctionx lengthx sapplyReduceappendqueries functionx findTestsxfilenamexstartxend USENAMES TRUE The result of all this put together is that before a commit and before a pull request each of our developers can find out what portions of our test suite may be affected overnight and they are encouraged to run some of those tests preemptively and paste the test outputs onto their PRs Im posting this here as a feature request ticket to see if these functions might have a place in the covr codebase I realize they will need editing to remove our dependency on datatable but they could be of great utility and other users may be able to integrate this kind of functionality into the covr HTML reports Hello As a Carpentries instructor Im considering to include a section about codetest coverage in a lesson for intermediate R users I noticed that covr does not penalise tests which reuse a functions default argument values rather than sending their own I presume that this is intended and that a dedicated argumentparameter value coverage may be a bit outofscope However might covr users benefit from it checking whether any nondefault values for function arguments with a default are used in the tests and if so showing a warning or message I imagine that this could help unittestingnovices to understand that other coverages besides if else branches can be important What do you think cc cbeleites for suggesting covrreport to me which got me thinking about this Edit Hadnt finished drafting when I accidentally hit Submit Just discovered the great feature of covr Coverage of Examples However I can not get my examples running with covr Although all of them run with devtoolsrunexamples or devtoolscheck R CMD check etc I cant get them running with packagecoverage typeexample The error is always could not find function xyz in the code generated from the examples of the exported function xyz Which seems that the package isnt loaded I would be happy to debug the problem more closely however the directory containing the file packageExRoutfail is deleted after covrpackagecoverage Error Failure in CUserswolskiAppDataLocalTempRtmp xqd eRLIBS c e LFQServiceLFQServiceExRoutfail In the covrignore section of the readme it would be helpful to have an example of a covrignore format Im not sure what a Systemglob is in terms of inputs Just something like r teststestthattestfooR teststestthattestbarR Im not sure if the lines should refer to the test files or the R files Im happy to open a PR with my guess as to how it should be formatted Im using report as part of generating a larger HTML report of package diagnostics and analyses for support of package review and was wondering if it could be wrapped so it could be included in a larger document I have tweaked version at happy to do a little more to make it robust and do a PR 