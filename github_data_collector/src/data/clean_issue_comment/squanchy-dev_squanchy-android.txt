Algolia released a new Kotlin SDK which looks like an improvement compared to the previous one It doesnt depend anymore on Android so upgrading to it should allow us to remove Jetifier We should improve the UIUX of opting out of Analytics Final message for tracking opt out right now is Do not track me Add a confirmation step where we explain what we do with the data and that we dont sell it to third parties had a requested change moving the factory functions for formatters in our DI graph which was valid but out of scope The app right now requires a working connection on first start since Firestore needs to download its data Ideally we should be able to make sessions available at first launch while offline too A possible strategy is to move session data out of Firestore and into a statically generated series of JSON files that can be hosted somewhere and updated manually when session data changes This requires a function to generate said JSON files and send a FCM push to all apps telling them to get the fresh data We still store the favourites in Firestore that feature still requires connectivity to auth ht to JoseAlcerreca for the great discussion we had on the topic a couple months back in bfxrun Number of crashes Impacted devices Theres a lot more information about this crash on crashlyticscom For Droidcon Berlin we would like to use squanchy as a base However Droidcon Berlin asked me if it would be ok to add a sponsors section somewhere in the app How do you feel about it Would it be ok from your point of view to use your app and add a sponsors section Hey there so I took a look at the current code base and I have some questions What would be the recommended way to use the exising code base for droidcon berlin Would I create a new app module droidcon berlin and will it become part of squanchy repository Should I fork it and maintain my own fork of squanchy and trying the best to keep it with your original squanchy source code in sync What if I dont want to use existing domain layer Some parts like FavoritesService EventService ScheduleService SearchService SpeakerDetailsService VenueInfoService are already well defined and have an interface or its easy to extract an interface Similar to question lets say I would like to write my own ScheduleService that uses SQLite where would I put this SQLiteScheduleService In a module in Squanchy repository Should I keep this in my own fork Related to I think If we want to eventually support Instant Apps which we should we need to start modularising things a lot It will also give us significative advantages in build times As of we can autoscroll to the current events slot during the event but all that logic is thrown together in between the view layer and the Schedule model It should all be moved to ScheduleService and done at the time of composing the schedule then we should put such metadata into Schedule or even better decorating Schedule with that information before emitting it As part of this work we should also fix all the bugs regarding this implementation and resolve the TODOs left behind in the area Move calculation of current event and current page to ScheduleService decorate Schedule with that metadata and only read it in the UI when needed Tapping on the currently selected tab should scroll to the top if there is no current event currently disabled by a flag in ScheduleDayPageView to fix bigger issues The autoscroll should only be performed when there is a current event in the page and only when first starting the activity ie first bind We should rework the way the autoscroll is performed as it is rather convoluted with some luck just moving the calculations away from the UI should make things easier by itself Add analytics to the app so we can measure engagement Specs TBD