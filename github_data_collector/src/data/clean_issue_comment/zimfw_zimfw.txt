Currently this project is available in the AUR Arch Linux User Repository However with the move to Zim the package is no longer maintained Apparently there is some confusion as to how to package Zim now for global installation Is this still possible Presumably the old installation script PKGBUILD is no longer valid How would you recommend package managers distribute Zim Just purchased zimfwsh Would be nice to have a small static site that encapsulates the important information like installation and with tabs that showcase features Ill cover hosting and associated costs Ideally we create a new repo that contains the hugo site and uses Github actions to build and publish an nginxalpine Docker container That would make things simple from my end Could zimfwshinstall to the installation file making the installation instructions a tad cleaner Please check the existing issues to make sure youre not duplicating a report For bug reports please provide the following information In a terminal run zimfw info and paste the output below kronikpillow at susanoo in zimfw info Zim version previous commit is e ZIMHOME homekronikpillowconfigzshzim Zsh version System info Linux susanoo ckivybridge SMP PREEMPT Thu Jan x GNULinux gist of zimrc the default one no modifications gist of zshrc the default one no modifications Description I installed the latest zimfw by running curl fsSL zsh when i switch to tty prompt ctrlaltF I get the following error homekronikpillowconfigzshzshrcsource no such file or directory initzsh homekronikpillowconfigzshzloginsource no such file or directory logininitzsh Steps to reproduce install latest zimfw and switch to tty login to your standard user Images or other information when I manually source zshenv from configzshzshenv and then manually source zlogin and zshrc it starts to work so I come to the following for some reason when I go to a tty it doesnt source zshenv even thou on my PC it sources it with no problems Theres a bunch of stuff in zshrc that I dont really care about sh Bind A B manually so updown works both before and after zlelineinit bindkey A historysubstringsearchup bindkey B historysubstringsearchdown Bind up and down keys zmodload F zshterminfo pterminfo if n terminfo kcuu n terminfo kcud then bindkey terminfo kcuu historysubstringsearchup bindkey terminfo kcud historysubstringsearchdown fi bindkey P historysubstringsearchup bindkey N historysubstringsearchdown bindkey M vicmd k historysubstringsearchup bindkey M vicmd j historysubstringsearchdown I imagine its there so that the user can remove it in case they dont want to use zshhistorysubstringsearch Maybe zim could include a bunch of these patches that are automatically sourced if the corresponding module is enabled linked in the README seems to be from We need to fill in the INSERT CONTACT METHOD Eriner should we put both our email addresses here or do you suggest something else Taken from the original at As reported by AtomicCoding Ive switched to the develop branch about a week ago and everything so far has been amazing its really great to see how far Zim has come However Ive been having a mild issue with how Zim precompiles things into one script I have this line in my zimrc if TERMPROGRAM then if TERMPROGRAM iTermapp then zmodule romkatvpowerlevel k else zmodule minimal fi else zmodule minimal fi And the expected behavior would be that when I run iTerm which has a nerd font installed Id get a powerlevel k prompt but when SSHing or using any other terminal Id get minimal However due to the way it seems to be compiled Im assuming it just checks which modules have been defined and loads them Ive had to run zimfw update each time I switch from different terminals to make sure the prompt changes This isnt a significant issue and would likely require some work to copy over to the precompiled script but its just something Ive been experiencing Originally posted by AtomicCoding in It would be nice to have a CI system to perform both static think shellcheck grepbased style linting and dynamic analysis run in subshell check retcode prompt function availabilityfunctionality etc Github Actions can be used for the CI Necessary tooling is still unknown as it would likely need to be zshspecific and Im not aware of any off the top of my head though I havent investigated whats available One obvious upside to performing testing like this is that we could test varying versions of zsh and catch any isatleast type bugs as well as PRs that may subtly break some functionality Regarding having an allinone initialization file suggested before solving it for scripts that look at is straightforward as can be seen in the solutions below The problem is when theres a N or x in the script Even with a complete Zsh parser I dont think it will be obvious if these are expansions are being used to get the script path or if they are being used in prompts or if for any other creative use NOTE N to get the script path is used as a workaround for when FUNCTIONARGZERO is unset This option is only set by default in the csh and zsh emulations which blows my mind on why someone would run Zsh with a different emulation and expect Zsh plugins to still work The general way to resolve N into a variable is with N as posted in the Zsh Mailing List a while ago could not find the reference now Also x can be seen And maybe there can be other variations which again make the parsing of the script hard if not impossible NOTE An example of a creative usage of N Just for the sake of giving names Im naming different solutions conservative the one currently being used always sources the scripts moderate still sources scripts that have N or x on them This can leave out scripts that can potentially be concatenated into the allinone script Maybe concatenated scripts can be broken in ways we still dont predict Diff from the conservative solution is c print Rn Fsource zscriptsP local zscript for zscript in zscriptsP do if command grep q Nx zscript then print R source zscript else print R local zscript command cat zscript print fi done aggressive concatenates all scripts substituting N or x by pathtoscriptzsh Possibly concatenated scripts can be broken in ways we still dont predict Diff from the conservative solution is c print Rn Fsource zscriptsP local zscript for zscript in zscriptsP do print R local zscript command sed s Nx zscript g zscript print done Ive used the oldestslowest machine I have here to benchmark the solutions Intel Core Duo GHz GB RAM HD using the first version of WSL which is known to have a poor disk performance Benchmark done with the default Zim installation of the develop branch at the moment of writing this Solution Mean s Min Max s conservative moderate aggressive So not sure if the difference is worth the risk And I want to avoid going into the path of giving users the option to set which solution they want as this will increase the complexity of the project in a way that I consider incompatible with our values Eriner want to try to benchmark these in a machine you consider would strongly benefit from the few fopen calls the nonconservative solutions offer Docker got pretty popular Maybe add it out of the box or as a plugin I can get it working by following official instruction for non ohmyzsh but I kinda like zimfw cuz theres so little additional work needed I just get it and its done 