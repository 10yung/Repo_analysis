Hi I have a simple JSON file that I want to use as a global environment When I use the commend line environment Im told that there is no binding for string element in a list doublequoted This can be worked around by using singlequotes in the file not ideal because then I have to postprocess my JSON file created using IonTextWriter However when I use the addtoglobalenv readfilefile of the same file doublequotes and all it works just fine carman cat datafiletxtion outputbuffers idtoterackslotoutbuff carman gradlew clirun consoleplain argse Userscarmanpartiqlpartiqllangkotlindatafiletxtion Task langcompileKotlin UPTODATE Task langcompileJava NOSOURCE Task clicompileKotlin UPTODATE Task clicompileJava NOSOURCE Task cliprocessResources NOSOURCE Task cliclasses UPTODATE Task langprocessResources NOSOURCE Task langclasses UPTODATE Task langinspectClassesForKotlinIC UPTODATE Task langjar UPTODATE Task clirun FAILED No such binding toterackslotoutbuff FAILURE Build failed with an exception What went wrong Execution failed for task clirun Process command LibraryJavaJavaVirtualMachinesjdk jdkContentsHomebinjava finished with nonzero exit value Try Run with stacktrace option to get the stack trace Run with info or debug option to get more log output Run with scan to get full insights Get more help at BUILD FAILED in s actionable tasks executed uptodate carman gradlew clirun consoleplain Task langcompileKotlin UPTODATE Task langcompileJava NOSOURCE Task clicompileKotlin UPTODATE Task clicompileJava NOSOURCE Task cliprocessResources NOSOURCE Task cliclasses UPTODATE Task langprocessResources NOSOURCE Task langclasses UPTODATE Task langinspectClassesForKotlinIC UPTODATE Task langjar UPTODATE Task clirun Welcome to the PartiQL REPL PartiQL addtoglobalenv readfile Userscarmanpartiqlpartiqllangkotlindatafiletxtion outputbuffers id toterackslotoutbuff OK ms PartiQL Im nearly certain that each of the queries below should have an identical result but instead the results are as shown In the examples provided below I would have expected the result to match the result for SELECT The examples with SELECT foo have what I believe to be the incorrect result Note that when foo is a list of structs the result is as expected This this is likely happening because the logic for expr doesnt differentiate between structs which have the correct behavior and the other collection types To be sure it is a good question as to whether or not it should differentiate For bags PartiQL SELECT FROM as foo OK PartiQL SELECT foo FROM as foo OK PartiQL For lists PartiQL SELECT FROM as foo OK PartiQL SELECT foo FROM as foo null null OK As a fix for our pathologically slow builds under openjdk I had to remove JUnitParams from NaturalExprValueComparatorsTest Currently its a single test that iterates over all of its parameters Once a suitable replacement for JUnitParams has been found JUnit we should reparameterize this test Im not entirely certain if this intentional or not but I strongly suspect that this is a bug considering its potential to induce confusion among users PartiQL true OK ms PartiQL e e false OK ms Executing the following test class ScratchPadKotlin EvaluatorTestBase Test fun foo val value eval printlnvalueionValue printlnConfigurableExprValueFormatterprettyformatvalue Results in the following output d My expectation is the second line of the output would be and not The only impact AFAIK is that the REPL displays for PartiQL OK ms langtestorgpartiqllangerrorsParserErrorsTestkt contains an Ignore unit test Lets fix it and remove the Ignore raganhan suggests that if this is QLDB specific then the lang project the functionality of that particualr StaticTypeRewriterConstraint is not the best place for that rule to be implemented We cant remove it now however but in the future it may be possible First query works select ciddsequence from claims as c left join cdiagnosis as d limit id f cad c e f sequence idc f c c f b ee da id ce d f f eed c db b sequence nested query fails select count as cnt from select ciddsequence from claims as c left join cdiagnosis as d orgpartiqllangevalEvaluationException No such binding c Evaluator Error at line column Binding does not exist UNKNOWN UNKNOWN claimssmalljsonzip I am using this code to read the json file attached InputStream fis new FileInputStreamclaimssmalljson final IonReader ionReader IonReaderBuilderstandardbuildfis final IonDatagram values iongetLoaderloadionReader ExprValueFactory valueFactory pipelinegetValueFactory ExprValue exprValue valueFactorynewFromIonValuevalues After binding it and doing a query select from I am getting this output Below this is added to the array Then of course if I do select count I get only as result How can this be done better to load this as array resourceTypeClaim id f cad c e f statusactive usecomplete patient referencePatientd af c c f bc fea af ee billablePeriod start T end T organization referenceOrganizationed eaa e b abb b a diagnosis sequence diagnosisReference referenceCondition c a fa e item sequence encounter claimssmalljsonzip lues It is human visible slow with only K docs I feel like the count should be cached when you create the doc or even simple loop over only top of the docs should not be as slow Suspicious that deep parsing is happening