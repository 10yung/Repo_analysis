There is no activity in this repo for over a year Is someone actually maintaining this We have a case where we have some really long parameter names which in the default formatting wraps all the descriptions into a single column We work around this by specifying columns but a better solution would be if the formatter recognized that the names were over some threshold and then placed the description on the next line So instead of the following required arguments messaginginternalformaturi MESSAGINGINTERNALFORMATURI Uri to publish messages in the internal format eg rabbituserpasslocalhost exchangesomename messaginginternalformatwithrawuri MESSAGINGINTERNALFORMATWITHRAWURI Uri to publish messages in the internal format plus the raw message eg rabbituserpasslocalhost exchangesomeothername It could look like the following required arguments messaginginternalformaturi MESSAGINGINTERNALFORMATURI Uri to publish messages in the internal format eg rabbituserpasslocalhost exchangesomename messaginginternalformatwithrawuri MESSAGINGINTERNALFORMATWITHRAWURI Uri to publish messages in the internal format plus the raw message eg rabbituserpasslocalhost exchangesomeothername When using the mainBody the system performs a exitProcess when eh help is used This brings down my whole unit test VM so it would be nice to have the possibility to influence the exit behaviour like telling it that no exit should be performed The default of course is that the exitProcess is done Ive added a version option in the same manner as the help option The version can be provided in the ArgParser constructor if needed If it is not provided no version option will be added This makes the change fully compatible with older versions of the ArgParser Ive also added a v option for the version but Im unsure if this is wanted Let me know and I can remove it When using a missing argument multiple times the lambda that provides a default value was called at every use of the delegate In some cases like asking the user to input the value on command line this behaviour can be undesirable Id expect the following bits to be legit but for some reason they are not kotlin class MyArgsparser ArgParser val imageDirectory by parserpositionaldirectory The directory which should be scanned for orphan images val markdownFiles by parserpositionalListmd files Markdown files to be used as reference to detect orphans Exception in thread main javalangIllegalArgumentException directory is not a valid argument name at comxenomachinaargparserPositionalDelegateinitPositionalDelegatekt at comxenomachinaargparserArgParserpositionalListArgParserkt at comxenomachinaargparserArgParserpositionalArgParserkt at comxenomachinaargparserArgParserpositionalArgParserkt at MyArgsinitorphimgkt at OrphimgKtmainargs invokeorphimgkt at OrphimgKtmainargs invokeorphimgkt at comxenomachinaargparserArgParserparseIntoArgParserkt For some reason the PositionalDelegate is overly strict just captialized letters when it comes to naming my parameter Kotlin version release JRE comxenomachinakotlinargparser I unfortunately write Python almost every day at work and we use Argparse there most of the time Argparse has wonderful support for subparsers but it seems fairly tedious to do with this library Say Im writing a cli for a program like this bash timetrackerclient h usage h l LOGIN r REGISTER verbose quiet status addtask ADDTASK optional arguments h help show this help message and exit l LOGIN Initialize client with user info and log in User login LOGIN info passed in as properties file with format emailEMAIL passwordPASSWORD addtask ADDTASK Add a task a ADDTASK And I want a separate parser for addtask It will have its own positional arguments and its own help menu Something like this bash timetrackerclient addtask help usage h TASK CATEGORY STARTTIME ENDTIME PROPERTIES optional arguments h help show this help message and exit positional arguments TASK Name of task being stored CATEGORY Category of task to store STARTTIME Start time of a task in the format yyyymmddhhmm ENDTIME End time of a task in the format yyyymmddhhmm PROPERTIES Extra properties desired to be saved in the format prop Property prop property Doesnt seem too unreasonable I think But from going through the docs it doesnt appear this functionality is built in To add this functionality on my own I end up doing a bunch of array splicing and then sending that task to the parser I want to run Its not particularly nice but Im getting it done with this code Im aware I could use a positional list for the a option but that surrenders more control It would be very nice if I could do something like this kotlin val addTask TaskParser by parsersubparseraddtask a help Add a task n Where TaskParser is something like this class TaskParserparser ArgParser val task String by parserpositionalTASK help Name of task being stored val category String by parserpositionalCATEGORY help Category of task to store ABBREVIATED But this does not seem to be very easy Im currently using this library for a personal project here and its been great so far but this was a large gripe that cost me a few hours today trying to understand a good way of adding subparsers In the end I couldnt find one Please advise and if it doesnt exist I might make my own PR in the coming weeks I guess there is no real consistent scheme but quite a few tools capitalize the help section headers So maybe a flag could be added to do the same when using kotlinargparser So showiing Usage h a IMAGEDIRECTORY MARKDOWNFILES Optional arguments h help show this help message and exit a auto Automatically remove orphan images Positional arguments instead of usage h a IMAGEDIRECTORY MARKDOWNFILES optional arguments h help show this help message and exit a auto Automatically remove orphan images positional arguments I have lately been exploring kotlin for scripting purposes using Kotlinargparsers really shines in scripts because its concise and still provides nice error messages On of the differences between regular Kotlin code and a KScript is that the script does not contain a main method Instead it gets executed from top to bottom Not having a main method suddenly makes the mainBody lambda look ugly because I always have write something like this val parsedArgs mainBody ArgParserargsparseIntoArgs The mainBody has to be there because otherwise we get ugly stacktraces instead of a simple error message like missing option X It would be much nicer if there was a method like parseInto that would already contain the exception handling part so we could simply write val parsedArgs ArgParserargsparseIntoOrExitArgs here is a full example val url by parserstoringhelp jdbc url Example jdbcpostgresqllocalhost db results in Exception in thread main javalangIllegalArgumentException URL is not a valid argument name Not sure if this is by design or a bug Changing to the following fixes the issue val url by parserstoringhelp jdbc url Example jdbcpostgresqllocalhost db 