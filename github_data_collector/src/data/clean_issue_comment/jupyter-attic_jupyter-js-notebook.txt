 I want to use jupyterjsnotebook to write and run codes can anyone give me any suggestions about how to do this High appreciation Executing inputs that dont immediately return a result like invoking the help functionality require the output area to support handling inputrequest messages This is a general problem for both the notebook and the console In order to see the problem manifest at a console prompt entering and executing the command help will cause the kernel to pause while it waits for user input The kernel will remain unusable from that point forward cc blink jasongrout I am going to have Team at Cal Poly start to do a full visual design review of the notebook plugin Opening this issue for them to track that work The StringSearch module in completionmodelts is a direct copy of the search algorithm in phosphorcore Once phosphorcore is integrated with jupyterjsnotebook and the old phosphor libs are upgraded this namespace should be removed in favor of the library version cf cc blink sccolbert jasongrout In addition to the notebook interface we need to implement a webbased version of the console interface Here are some of the tasks that will get us there x Create a ConsolePanel as a container that holds a ConsoleWidget similar to the way the notebook works x Create a ConsoleModel that is similar to a NotebookModel but does not have a notion of arbitrary cell insertion x The first child of the ConsoleWidget needs to be a RawCellWidget to hold a banner and the second needs to be a CodeCellWidget to hold the prompt The ConsoleWidget needs a set of keyboard bindings to emulate the Qt Console application x The execution of the code cell needs to be separated from the notebook because it is common functionality x After every prompt execution a new CodeCell needs to be generated to become the new prompt The UI needs to be styled to look like the Qt Console application x The history functionality of the Qt Console needs to be implemented ie navigating through past commands via arrow keys x The contextual tooltip feature of the Qt Console needs to be implemented The pager functionality of leaving the prompt and residing within a different interactive context ie entering the interactive help needs to be implemented x The completion functionality ie tab completion of the Qt Console needs to be implemented This should be done in a way that allows the notebook or other widgets potentially to use it as well cc blink jasongrout One of the hidden benefits of the existing notebook is that users can quickly move between the dashboard and different notebooks which are just browser tabs using the default browser shortcuts commandshift JupyterLab will need a similarly efficient set of keyboard shortcuts that allow navigation to different panelstabs in the dock panel There are a number of different ways of doing this we will have to consider the options One of the core features of the notebook is that notebooks can link through relative links to other notebooks This allows notebooks to function as proper webpages that can be linked to by other notebooks as well as other web pages We use this capability ourself in our own docs here Notice that first page has links that are all links to other notebooks in that directory These links work across the live notebook server GitHubs rendering and nbviewer Given this JupyterLab cant break this critical feature Here are some initial thoughts on how we can offer this Visiting a new lab page that has a path to a notebook labthepathnotebookipynb should simply open the default JupyterLab view open the file browser to that path and then open that notebook in the dock panel This may require a slight bit of server logic to handle those paths Clicking on a link in a notebook or other content in JupyterLab that has a relative path to another notebook should simply open that notebook in the current JupyterLab by default This can be accomplished by intercepting the click on the a tag and preventing default and triggering the document open action with that path Again the file browser should go to that directory If a user holds down command and clicks on such a link the notebook should open in a new JupyterLab browser tab that follows the idea of point Links to relative paths that are not notebooks should follow similar logic Thus a notebook should be able to link to a text file and clicking on that text file should open that document in the current JupyterLab tab Hi All After a few inperson discussions about this since feedback has been positive so far fperez ellisonbg minrk sccolbert rgbkrk Carreau jasongrout I thought that it was a good idea to submit the idea to the list What I am proposing here is a significant change in how we deal with the communication between the frontend and the kernel in the case of the notebook which would also apply to contexts such as dashboards In my opinion it would greatly simplify our security model by decoupling edition and execution rights live collaborations with interactive widgets Lets start with the simpler problem of how to build readonly executable notebooks So the proposal to handle this is to forbid the frontend to send executerequest messages and have it send messages to the server of the form execute cell af b ca The server would have the notebook document model and the content of the corresponding cell A user that does not have edit rights on the document model cannot send arbitrary code to the kernel ie it is really a readonly notebook from a security standpoint The frontend would not have the ability to modify the code but only to refer to addressable parts of existing code Live collaboration with interactive widgets We could go one step further and completely remove the ability of the frontend to send messages to the kernel including comm messages In this case the interactive widget state would be part of the notebook model held by the server The only way the frontend interacts with the kernel is by modifying the document model via widgets or cell content In the case where a widget model was modified the server would be the one sending a comm message to the kernel I think that it would also simplify the problem of live collaboration with interactive widgets because their would be no way to bypass the server and its conflict resolution by sending directly a message to the kernel Conclusion Web frontends would not be clients to the kernel messaging protocols anymore and only the notebook server would be allowed to send kernel messages The communication between web frontends and the web server would mostly be proposed changes on the state of the document some of which trigger comm messages when it is widget state request execution of addressable portions of code cells A user should be able to rename a file that is open in the dock panel if the file browser is no longer opened to that files directory Currently a user has to navigate the file browser back to the directory of the file they want to rename and rename it there An alternative is to provide a way to autonavigate the file browser to the directory of an open file We may want to provide that feature regardless of renaming UX 