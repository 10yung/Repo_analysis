Its been reported that every time an Http is constructed we get numCpus threads created by AHC because we create an AHC client on each invocation Some things to look at One option thats been suggested is to share an AHC client instance under the hood which is threadsafe with qualification specifically so long as you dont do anything notthreadsafe in your callbacks The with qualification bit is what scares me about that Perhaps a more targeted approach is to expose or better document a knob for the number of threads that we should allocate when we build the client Its not strictly a bug more of an API issue Lets take the example code from the homepage and modify it slightly to get a response from housetopinfo scala import dispatch Defaults val svc url val country Httpsvc OK asString countryrecover case e printlnegetClassgetCanonicalName The last line will eventually print javautilconcurrentExecutionException To get to the actual error StatusCode I first need to unwrap it It would seem intuitive that for a common use case like a nonOK status code returned from the HTTP server the future would fail with StatusCode straight away which is not the case Im using dispatch 