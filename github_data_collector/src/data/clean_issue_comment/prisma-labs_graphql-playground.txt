Lets say each comment around field and definitions is an entity Is it possible to group those entities in some logical sections eg group documentation regarding Credentials in sections and other data in another So they are all not generated always in QueriesMutations but Queries Credentials section Mutation Credentials section or Credentials Queries Mutations This issue pertains to the following packages GraphQL Playground Electron App x GraphQL Playground HTML GraphQL Playground GraphQL Playground Express Middleware GraphQL Playground Hapi Middleware GraphQL Playground Koa Middleware GraphQL Playground Lambda Middleware Just downloaded graphqlplaygroundelectron dmg and issued a request It came to the server like this variables query operationName Server cannot deserialize operationName as it expects a String there but found an object Any particular reason you want to make it an object Altair client doesnt supply operationName field at all and it works Changes proposed in this pull request Add ability to search by exact type name using quotes eg searching for Asset would give the Asset type only Add ability to search within a type eg queryasset would give QueryallAssets QueryallAssetsMeta and QueryAsset Combining the two methods QueryallAssets would only give QueryallAssets Bump dependency versions for react webpack babel eslint graphiql graphql redux reduxsaga Changes proposed in this pull request Reorder keys in packagejson Updated dependencies Following are the major ones react webpack babel eslint graphiql graphql redux reduxsaga Updated Webpack scripts to match latest ones from createreactapp Switched from tslint to eslint to match what createreactapp uses This issue pertains to the following packages GraphQL Playground Electron App x GraphQL Playground HTML x GraphQL Playground GraphQL Playground Express Middleware GraphQL Playground Hapi Middleware GraphQL Playground Koa Middleware GraphQL Playground Lambda Middleware What OS and OS version are you experiencing the issues on macOS Catalina version C What version of graphqlplaygroundelectronmiddleware are you experiencing the issues on Desktop app version What is the expected behavior When setting a header cookie foobar I expect that header to be sent so I can get the cookie in my express app What is the actual behavior Im specifying a cookie foobar header but reqcookies is empty If I copy curl command I do see the header being specified in the curl command and upon executing it in my terminal reqcookies is populated Thats why I think the playground app may not be sending the cookie header Other headers seems to work because if I send the authorization Bearer bar header reqauthorization will contain the Bearer bar value What steps may we take to reproduce the behavior Open desktop app Write a GraphQL query Add header cookie foobar Add logs in your app to verify content of reqcookies Play the query Alternative Open playground at your GraphQL URL Write a GraphQL query Add header cookie foobar Play query Inspect request headers from network tab in your browser cookie header is missing Let me know if you need more information or if Im missing something obvious Please provide a gif or image of the issue for a quicker responsefix If there is one I cant find what it is How can I send connection parameters with my subscriptions Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details This issue pertains to the following packages GraphQL Playground Electron App GraphQL Playground What OS and OS version are you experiencing the issues on Linux What version of graphqlplaygroundelectronmiddleware are you experiencing the issues on and from master branch What is the expected behavior Schema view displays schema What is the actual behavior Empty screen Syntax error in web browser console What steps may we take to reproduce the behavior Have a schema with comments like this Defined queries available type Query Fetches an object given its ID namespace common Node The ID of an object id ID Node I found that problem is caused by this line of code in packagesgraphqlplaygroundreactsrccomponentsPlaygroundutilcreateSDLts at line js const sdlWithNewLines rawSdlreplace w s r n gm If to comment it out everything works fine but comments are preserved So I think there is a problem in regexp which does the jom Actually because I have emptyline comment it also removes the next line so schema code looks like this type Query id ID Node which is definitely broken schema I use apollographqlexpress as Apollo server so it can be fixed by forcing schemadisableComments false from server side to make sure initial load will not cause a problem but if user change this property locally bug happen Of course I can fix it by removing new lines from comments BTW despite this fact there is a buggy software behavior Server is based on codefirst schema generation so the javascript schema is provided to server instance instead of typeDefs and resolvers So schema code is built on playground side itself guess with printSchema This also causes the need to restart electron app as there is no way to get back or close the blank scree after pressing Schema button Fixes NA Changes proposed in this pull request Some packages should be installed as a devDependency and not as dependency It can induce yarn in bad behaviors