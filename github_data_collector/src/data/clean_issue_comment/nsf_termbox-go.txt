 mycode package main import fmt golangorgxcryptossh golangorgxcryptosshterminal io net os time type Cli struct IP string IP Username string Password string Port int client sshClient ssh LastResult string Run param ip IP param username param password param port func Newip string username string password string port int Cli cli newCli cliIP ip cliUsername username cliPassword password if lenport cliPort else cliPort port return cli shell param shell shell func c Cli Runshell string string error if cclient nil if err cconnect err nil return err session err cclientNewSession if err nil return err defer sessionClose buf err sessionCombinedOutputshell cLastResult stringbuf return cLastResult err func c Cli connect error config sshClientConfig User cUsername Auth sshAuthMethodsshPasswordcPassword HostKeyCallback funchostname string remote netAddr key sshPublicKey error return nil Timeout timeSecond addr fmtSprintfsd cIP cPort sshClient err sshDialtcp addr config if err nil return err cclient sshClient return nil func c Cli RunTerminalshell string stdout stderr ioWriter error if cclient nil if err cconnect err nil return err session err cclientNewSession if err nil return err defer sessionClose fd intosStdoutFd oldState err terminalMakeRawfd if err nil panicerr defer terminalRestorefd oldState sessionStdout stdout sessionStderr stderr sessionStdin osStdin termWidth termHeight err terminalGetSizefd if err nil panicerr Set up terminal modes modes sshTerminalModes sshECHO enable echoing sshTTYOPISPEED input speed kbaud sshTTYOPOSPEED output speed kbaud Request pseudo terminal if err sessionRequestPtyxterm color termHeight termWidth modes err nil return err sessionRunshell return nil func main cli NewserverIP root passwd cliRunTerminaltop osStdout osStdin run code env x cpu and windows os go version go windowsamd run result panic The handle is invalid goroutine running mainCliRunTerminal xc f x d c x x c xc x c xc x x Dgoplace go x c mainmain Dgoplace go xff can you help me Its a question Dont pretend that nothing happened I find out that someone had asked the same question but you didnt answer him nsf do you think it properly fixes I use Lf which depends on termbox I set in my tmuxconf the following set g defaultterminal tmux color Using Rxvtunicode and tmux inside it get this error when starting lf initializing termbox termbox error while reading terminfo data termbox unsupported terminal If I use a different terminal emulator say Alacritty I dont get this error If I use the following in my tmuxconf set g defaultterminal screen color In either urxvt alacritty I dont get that error from lf To summarize only the combination of urxvt tmux TERMtmux color because of set f terminaldefault tmux color in tmuxconf Causes the error I wouldnt mind that much if italics would have worked with tmux inside urxvt when using screen color TERMdefaultterminal Sfee this FAQ Running env TERMscreen color lfdoesnt raise the error but any inner child process of lf reads TERMscreen color in its environment This means that this env wrapping wouldnt be much helpful because I often use Lf to browse files and edit them expecting to see italics Would solving this be easy by just adding an entry here Every exported function in a program should have a doc comment The first sentence should be a summary that starts with the name being declared From effective go PR generated by CodeLingo Install here to drive Continuous Higher Standards Im trying to use Hecate which uses termbox on WSL Ubuntu When running the application it results in panic when termboxInit You can see the raised Hecate issue here Unfortunately I dont know enough about go or Linux to understand whet the rest of the trace output means bash hecate hecate amd deb panic invalid argument goroutine running mainmain UsersemillerCodegocodesrcgithubcomevanmillerhecatehecatego x d goroutine syscall ossignalloop usrlocalgosrcossignalsignalunixgo x created by ossignalinit usrlocalgosrcossignalsignalunixgo x goroutine select locked to thread runtimegopark x deb xc x c x x x usrlocalgosrcruntimeprocgo x runtimeselectgoImpl xc x x usrlocalgosrcruntimeselectgo xa runtimeselectgo xc usrlocalgosrcruntimeselectgo x runtimeensureSigMfunc usrlocalgosrcruntimesignal unixgo x runtimegoexit usrlocalgosrcruntimeasmamd s x Hi I would like to be able to choose whether or not to switch to the alternate screen Here is an example usecase Currently termbox is hard coded to go to the alternate screen and leave it on Init and Close I have some experience using this library Sometimes it would be nice to have an ability to fire keyboard event in tests For example in such case func Listen for e termboxPollEvent switch eType case termboxEventKey do smth case termboxEventInterrupt do smth case termboxEventError do smth panic The handle is invalid recovered panic The handle is invalid goroutine running githubcomnsftermboxgogetwinsize x e xc e homedggosrcgithubcomnsftermboxgotermboxwindowsgo xc githubcomnsftermboxgoupdatesizemaybe homedggosrcgithubcomnsftermboxgotermboxwindowsgo x githubcomnsftermboxgoClear xc x xc a c homedggosrcgithubcomnsftermboxgoapiwindowsgo x githubcomnsftermboxgoClose homedggosrcgithubcomnsftermboxgoapiwindowsgo x githubcomgizaktermuiClose homedggosrcgithubcomgizaktermuirendergo x githubcomgizaktermuirenderfunc homedggosrcgithubcomgizaktermuirendergo x panic x aee xc a usrlocalgosrcruntimepanicgo x c githubcomnsftermboxgogetwinsize x e xc f f homedggosrcgithubcomnsftermboxgotermboxwindowsgo xc githubcomnsftermboxgoupdatesizemaybe homedggosrcgithubcomnsftermboxgotermboxwindowsgo x githubcomnsftermboxgoFlush xaee e xc fb homedggosrcgithubcomnsftermboxgoapiwindowsgo x d githubcomgizaktermuirender xc e x x homedggosrcgithubcomgizaktermuirendergo x fb githubcomgizaktermuiInitfunc homedggosrcgithubcomgizaktermuirendergo x a created by githubcomgizaktermuiInit homedggosrcgithubcomgizaktermuirendergo x e It appears that when termboxgo was first written the Windows console didnt support more than colors The relevant functionality seems to have been stubbed out in the Windows build Eg in windowsapigo there is the following comment go Windows console does not support extra colour modes so this will always set and return OutputNormal func SetOutputModemode OutputMode OutputMode return OutputNormal The Windows console does now support and bit colors as of one of the Creators Updates This Microsoft blog post has some info about support for the new colors The cmdexe properties page hasnt been updated with the appropriate settings yet so it may not be obvious but the new colors can be used by console apps Hi In xterm the keypad middle arrow can produce a e OE sequence but it is not parsed by termbox Not sure if this is intentional It seems that there are possible sequences for this key