 Hi I have a scenario in my application where i have to recusrively get all the data and i tried to use the jsonPath storebook subBooks author as mentioned in But i am getting an error while parsing I tested the same using some online parsers and it is working fine I would like to know if this is the right syntax to be used in JsonLenses Please let me know if am missing some thing json store book category reference author Nigel Rees title Sayings of the Century price subBooks category fiction author Evelyn Waugh title Sword of Honour price isbn subBooks category fiction author Evelyn Waugh title Sword of Honour price isbn category fiction author Evelyn Waugh title Sword of Honour price isbn bicycle color red price Regards Johns When trying to write a nested js javascript a b c using a single lens scala val ab a b JsObjectupdateab setc That fails So far I solved this with a rather poor solution another combining operator scala trait EskoLenses extends ScalarLenses with OptionLenses with SeqLenses with Operations with JsonPathIntegration with ExtraImplicits def writeIfAbscentCombine M M R outer Lens M inner Lens M implicit ev Join M M R Lens R new LensImpl R evgetinnerops outerops def retr JsValue Validated R JsValue parent for outerV outerretrparent innerV opsallRightouteropsflatMapouterVx inneropstoSeqinnerretrx yield innerV def updatedf SafeJsValue SafeJsValueparent JsValue SafeJsValue outerupdated case l Left innerupdatedfJsObject case r Rightjs innerupdatedfjs parent object EskoLenses extends EskoLenses implicit class WriteIfAbscenCombinatorouter ScalarLens When using this operator the resulting lens join will not fail when trying to to do inner level writes it will instead initialize an empty object param inner return def inner ScalarLens ScalarLens EskoLenseswriteIfAbscentCombineouter inner Im sure better solutions could be thought of Eg a combining lens could be a class which can be matched against and from which the inner and outer can be recovered That way the need for parent node creation could be detected and executed before attempting to write the nested json Im trying to construct a JSON object using multple JsonPath expressions and values extracted from different sources The following snippet reproduces the problem Im facing Namely the set operation doesnt work on JsonPath expressions jsonupdateobjectid set works as expected scala val json JsObject val lens JsonLensesfromPathobjectid val updated jsonupdatelens set In this case updated will be an empty object Im just getting started using this library and Im running into a requirement to support both field renames and field mappers One step further would be to be able to completely map a field in both its name and its value including its type ie being able to write a simple conversion from foo to bar baz so using the old value but wrapping it in some new structure with a new key The way I currently implement these cases is by using a combination of an extract and a set Of course this does mean that the old field will still be present Do you think it is possible to implement this with the current codebase or would it require a major redesign I havent really dived into the implementation yet but if you would give some hints I might be able to come up with a pull request If I have a field which may be null then it blows up on extraction scala val json url null parseJson jsonextract String url This causes a runtime exception with root cause sprayjsonDeserializationException Expected String as JsString but got null Is this an issue with sonlenses or am I doing something wrong a strong possibility Attempting to extract a Seq Seq String from this document scala val json JsonParser vmaz a b c d name Internal RAID datastoreId datastore sizeInBytes name Internal RAID datastoreId datastore sizeInBytes name Internal RAID datastoreId datastore sizeInBytes name Internal RAID datastoreId datastore sizeInBytes name Internal RAID datastoreId datastore sizeInBytes c d name aa datastoreId datastore sizeInBytes name aa datastoreId datastore sizeInBytes name aa datastoreId datastore sizeInBytes name aa datastoreId datastore sizeInBytes name aa datastoreId datastore sizeInBytes c d name aaa datastoreId datastore sizeInBytes name aaa datastoreId datastore sizeInBytes name aaaa datastoreId datastore sizeInBytes name aaa datastoreId datastore sizeInBytes name assas datastoreId datastore sizeInBytes jsonextract Seq Seq String fromPathvmab cd name I attempted other combinations and realized that it seems to be flattening it to a Seq String I wouldnt want this but rather a Seq Seq String in order to preserve the alignment Could you please let me know if I might be missing a step here The extraction seems to be failing for both reading and writing 