Hi gregoryyoung could you please explain what is the intended semantic of the Version property in the Event class Is it meant to be the version of the aggregate at the time the event was raised or the version of the aggregate obtained after the event is applied to the aggregate Here is an example to summarize my doubt Lets imagine of having an aggregate currently at version materialized from the event store Then we issue a command to the aggregate and an event is raised so that after applying the event to the aggregate state the new aggregate version is In such a scenario do you expect eventVersion or eventVersion Based on my understanding it should be eventVersion Is it correct Thanks for the clarification Enrico We keep getting this questions from people who use message buses to build read models it is the FAQ question but it is still here Be May it is time to get rid of the bus in projections This makes Event a mutable type public class Event Message public int Version I think Commands and Events should be immutable instead The changes are not significant insofar as how the event gets pushed to the view models but the concept of a Publishevent has been removed including the implementation so as not to create the false impression that event sourcing should follow the store event publish event to queue pattern As stated by Greg using an ESB creates all sorts of headaches when wanting to rebuild view models or add new subscribers that require events from the beginning of time not to mention the messaging issues created when not managing the ES ESB within a distributed transaction TLDR The new subscriber semantics are designed to encourage the treatment of the event store as a commit log doing away with any notion of an ESB where any subscriber new or old can for whatever reason begin receiving events from the commit log aka the event store at any point in time the position in the log be it the start of time or regular continuations of receiving the latest events Im wondering how to implement business rule depends on entity current state For example You can change the name of the InventoryItem only if new name is longer The version of the AggregateRoot gets incremented whenever a new event is applied Also there was a missing cleanup after saving the events to the store Even though I know this should be seen as a demonstration for learning CQRS and is just the most simplest implementation I have seen people jump onto this horse and start to ride Because of this I want to take a note on the implementation of Command Event FakeBus and the registration of a handler Both Command and Event share the same base class Message here I dont think you should go this path especially when looking at the registration There are two different contracts for Command registration and Event registration You can publish to multiple Eventhandlers but you are not allowed to send a Command to multiple Commandhandlers there can be only one You will notice this here in the FakeBus implementation csharp public void SendTT command where T Command ListActionMessage handlers if routesTryGetValuetypeofT out handlers if handlersCount look at this only handler allowed throw new InvalidOperationExceptioncannot send to more than one handler handlers command else throw new InvalidOperationExceptionno handler registered on the other hand the Publish method does not have such a restriction But using the RegisterHandlerTActionT handler where T Message method you were already able to register as much as Command handlers for the same Command as you want csharp public void RegisterHandlerTActionT handler where T Message ListActionMessage handlers ifroutesTryGetValuetypeofT out handlers handlers new ListActionMessage routesAddtypeofT handlers no rules applied to check and fail early when trying to register nd Command handler handlersAddx handlerTx Because of this the RegisterHandlerTActionT handler where T Message should be really something like RegisterEventHandlerTActionT handler where T Event and RegisterCommandHandlerTActionT handler where T Command This way you are able to express and check the required rules earlier in the registration process eg throw Exception during startup instead of running a long time with a hidden bug I would not even make Command and Event inherit from a shared base class at this point any reasons to give The implemented FakeBus itself might be capable of transport both and might be the same instance Greg already created two different interfaces ICommandSender and IEventPublisher so you are able to keep them in separate implementations that wrap a common transport bus It would be helpful to explicitly know what the license is for this repository For instance can I fork and refactor for training purposes Thanks for great code I have question what purpose of internal struct EventDescriptor Why I should store some kind of event envelope instead of event itself It loos like the AggregateRoot Version field is never updated It should probably be updated at the end of the LoadsFromHistory method which should probably be renamed LoadFromHistory with the version of the last event replayed 