It would be really cool if you could use defined schemas as types Eg s Schemax int y str xy stype x ya I find myself defining Schemas to validate http responses in tests but once they are defined I would like to use them to provide type hints to my IDE However ATM I have to define a different type using either Typings or a dataclass in order to do so This leads to code duplication where I have to define datatypes for type hints that are exact clones of the Schemas used in validation This is bad It would be much better to have a schematodataclass or schematype method to extract a dataclass or type Even better if these methods would be called implicity when schemas are used as types How to customize the error information for each field in JSON For example the name field is required If I dont transmit this field I want to prompt my own customized error response information instead of the default error prompt I see that there is an error parameter function but it can only prompt for the whole JSON not provide custom error information for each field in the JSON Wondering whats the recommended way to inherit from a parent schema So far Ive been able to make it work as follows but worried about this being brittlebroken in future revs from copy import deepcopy from schema import Schema schema Schemakey str schema deepcopyschema schema schemaupdatekey int schema validatekey Traceback most recent call last File input line in module schema validatekey File anaconda envsbuckaneerlibpython sitepackagesschemapy line in validate raise SchemaError k xautos e xerrors schemaSchemaError Key key error should be instance of str schema validatekey key Hello I really like the way Schema validates data but I felt limited by some features like the pretty limited Hook JSON schema support the fact that Schema systematically tries every key of a dict on every schema and that most work is done at each validation instead of on initialization So I eventually rewrote it I staid as compatible as possible the previous version and match almost all the previous tests while adding a big bunch of new one For the minor incompatibilities I removed the support for I dont see why it is a problem SchemaOptionaa Optionaa can actually be useful and silently removing one of them is clearly not any better The repr of Schema has unfortunately more useless stuffs due to the precompilation but this shouldnt be a problem just had to update some tests And the representation of Regex is less clean I changed the callback of Hook it now takes key value new data in order to be able to edit new useful for for instance which is still compatible with the tests and most examples written I authorize using jsonschema without schemaid can be useful for generating a piece of JSON schema or an Open API schema For the new features there are many Everything is as precompiled as possible and Dict is much more clever on which schemas to try with which key depending on the value and the type of the key as the test shows Everything has the same base class BaseSchema As said Hook is much more powerful and can also define a catchkey error new data function for the case where the value is not matched Optional is now a Hook that shows its power and Clean is similar but discards the key instead of saving it they both can be used together Regex can now have directly a compiled pattern and has a regexlib option to use other libraries as regex And mostly jsonschema has totally been rewritten It is now much more powerful and recursive tries to do clever merging to compact the schema can represent regex and comparable and can be specialized for JSON schema or Open API by passing targetjsonschema or targetopenapi I tried to be as compatible as possible with the current version such that it can be merged I think everybody would be glad to have this updated version However being a total refactoring it clearly requires some discussions Thank you This is a feature request I would like it to be possible for an Optional whose value is a dictionary with Optional subentries to have as default a dictionary with the subentries and their defaults Maybe an example can help carry the meaning across from schema import Schema Optional schema Schema Optionalsomething default Optionalmethod defaultA str Optionaltime default int config schemavalidate config schemavalidatesomething config schemavalidatesomething method A time printconfig something printconfig something method A time printconfig something method A time assertconfig config Succeeds assertconfig config Fails I would like both the asserts to succeed The behaviour is not currently supported or maybe I could not find where it is documented if this is the case please advise I would argue that it is a sensible behaviour to support if I am using schema to parse a configuration file that is split in sections I would like all the config entries to be set to their default values The current behaviour however returns a structure with empty subsections which means I need to specify my defaults somewhere else and therefore have duplication the worst kind of duplication that of arbitrary constants It would be great if you could add an option for this behaviour Please advise if I can be of help Would be nice if there was an async def asyncvalidate or something similar so you could have a coroutine as a validate method Recent commit treats callable default param to Optional specially ie calling it instead of using it as it is This can cause confusion what if I want a callable itself as the default For example I might have this schema SchemaOptionalkeytype defaultstr type And the after this commit I am going to get keytype instead of keytype str if keytype is missing I would suggest reverting this asap before the new behavior is widely used and add defaultfactory for the same purpose which is just what stdlib dataclassesfield and collectionsdefaultdict do I encountered a situation where Im trying to ensure that just one field in a schema is correct Ideally I would like to be able to say python myschema schemaSchema fieldone str fieldtwo str assert myschema fieldone isvalidstring assert myschema fieldtwo isvalid string But at the moment this doesnt seem to work Does this seem like a reasonable feature to add in a future release Use Case I am creating a schema to validate a dictionary and for a key key I would like to use an enum to validate that the value is one of value value value Hi is it possible to load schema that has And function in it from file if yes could you give an example 