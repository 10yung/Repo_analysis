SetBuildEnvironment runs as part of initialization and is extraneous here Causes additional warnings for users who may import the module outside of the intended folder and increases load time for the module unnecessarily I have the task BumpVersion that I want the Build task to depend on That said I found PSBPreferenceBuildDependencies and have supplied the following array StageFiles BuildHelp BumpVersion However BumpVersion never runs StageFiles and BuildHelp do run Expected Behavior When running the Build task additional dependencies listed in PSBPreferenceBuildDependencies should also run Current Behavior When running the Build task additional dependencies listed in PSBPreferenceBuildDependencies do not run Strangely enough when supplying PSBPreferenceBuildDependencies with only BumpVersion the default build task dependencies StageFiles and BuildHelp still run making me think PSBPreferenceBuildDependencies is not even being correctly passed Possible Solution Ive verified PSBPreferenceBuildDependencies is being supplied to the Build task here Steps to Reproduce for bugs simply set PSBPreferenceBuildDependencies in the properties block of a psakeFileps with the value of MyExtraBuildTask create a task in the psakeFileps eg task MyExtraBuildTask doing extra things run buildps Context I have a few extra tasks that I want to run as part of the build Specifically a task that bumps the module version if it has not already been incremented and also a task that uploads test results to appveyor when the BuildSystem is appveyor Your Environment Include as many relevant details about the environment you experienced the bug in Module version used PowerShellBuild Psake Operating System and PowerShell version MacOS PowerShell I am trying to specify a nondefault path for PSBPreferenceTestRootDir in the psakeBuildps file It doesnt appear that the projectRoot variable is being populated before the Properties block is instantiated I can see that the BHProjectPath is populated at runtime and projectRoot is being derived from this value But if I output the value of projectRoot during runtime from inside the Properties block it is empty Could you take a look and see if I am correct about the timing issue above Additional integration Pester tests are needed to verify the various psakeInvokeBuild tasks function as expected Expected Behavior psakeInvokeBuild tasks are tested to ensure quality Current Behavior There is only some basic tests to verify help documentation for the public functions Possible Solution Create one or more basic PS modules execute various build tasks and user Pester to verify the process works as expected Steps to Reproduce for bugs NA Context We need to increase the test coverage to ensure any changes to the build functions or psakeInvokeBuild tasks do not break publicly exposed functionality Your Environment Module version used Operating System and PowerShell version NA Latest Beta version The Build task in PowerShellIBTasks is empty task Build As a consequence nothing happens when running invokebuild File buildps task build Expected Behavior In previous version the Build task was task Build StageFiles BuildHelp which built the module I expect the same from the new version Current Behavior You get this Possible Solution Change the PowerShellIBTasks file to either use the same build tasks as previous version or use the tasks specified in PSBPreferenceBuildDependencies which by default is StageFiles BuildHelp this doesnt appear to be used anywhere but I could be missing it Module version used beta Operating System and PowerShell version Windows Windows PowerShell Since this is aiming to be a library of tasks and a framework to use for opinionated templates perhaps some of the dependency ordering should be loosened For instance maybe I dont want Publish to depend on Test or maybe I dont want Test to be dependent on Pester because I want to use my own testing framework I was thinking of a variables to make these dependencies conditional The dependencies would be on by default but you could set the variable that would effectively remove all the dependencies and then you can pickandchoose the tasksjobs and assign dependencies as required in the downstream template This would be an atyourownrisk item but also should probably focus on individual tasks also being autonomous and not being truly dependent on each other eg wont fail if a dependency isnt met For tasks that require interoperation could define high level tasks like Build Test Publish but those are just empty tasks with dependencies so that those could be overridden in the script