 I am trying to send data to remote url using the wpremotepost I did not set up any permission call back for the code but i get a forbidden error when i click to send form with data to remote urlThis is my code function registercustomroute registerrestroute silentblastdashboardv getsetting array array methods GET callback retrievesettingsdata array methods POST callback updatesettingsdata function updatesettingsdata request out updateoption buddysettings request out getoption buddysettings return out remoteurl dashboardv getsetting posts array posts args array method POST timeout redirection httpversion blocking true body posts cookies array request wpremotepost remoteurl args if iswperror request errormessage requestgeterrormessage echo sprintf Something went wrong s errormessage else echo Responsepre printrrequest echo pre Why do i get a error when posting data to remote url with code below remoteurl response wpremoteget url posts wpremoteretrievebody response posts jsondecodeposts posts array posts args array method POST timeout redirection httpversion blocking true body posts cookies array request wpremotepost remoteurl args if iswperror request errormessage requestgeterrormessage echo sprintf Something went wrong s errormessage else echo Responsepre printrrequest echo pre This plugin appears to duplicate core functionality Maybe it should only include endpoints and functionality that isnt in core yet Object Arrays in Meta Currently meta for posts users terms and comments support scalar values in the registered meta keys Thats booleans strings and numbers For comparison the Custom Fields meta box only allows string values The response format of meta allows for arrays objects as values however these types are currently not accepted in the PHP API via registermeta There is a clear path forward to allow developers to register meta keys in the REST API using arrays and objects however as the underlaying registermeta API doesnt support this either yet its my recommendation that this wait until a future release Object Arrays in Settings Currently settings support scalar values this is primarily to keep strict data types when performing validation sanitization on values to make them match the Schema Also all of the WordPress Admin Settings are scalar values The WordPresscom API has only one key that is not a scalar jetpackprotectwhitelist which accepts an array of IP Addresses which has specific sanitizing Theres no support for developers to add settings and therefore doesnt need to solve this issue generically Like meta the format in the response would allow objects and arrays its instead a limitation of the PHP API via registersetting to support object and arrays Again this is a clear path forward to add this without breaking any compatibility its my recommendation that this wait until a future release Add checks for these fields exceeding the DB col size and tests for each field commentauthor commentauthoremail commentauthorurl commentcontent See Currently we handle registering meta even if your register the type as anything other than boolean number and string however we dont currently have great ways to handle nonscaler meta For now lets whitelist these types and throw a doingitwrong if meta is registered with an invalid type Based on discussion following Registering a meta field defines the data type that field should contain but there are ways outside of the APIs purview that a post could come to hold an invalid value in that meta field such as a serialized object which does not match the registered type If the API tries to update the value of a meta object and the API discovers that an invalid type of data is being stored in that field it should return an error rather than replacing the value of that field We need loadplugintextdomain to recognize text domain for translation editor like Poedit or GlotPress Currently when you update a meta value it checks currentusercaneditpostmeta regardless of the actual object type It needs to use object type dependent capability checks These arent in core yet but theres a ticket here A workaround for the time being would be to check editobjecttype I suppose Currently we handle registering meta even if your register the type as anything other than boolean number and string however we dont currently have great ways to handle nonscaler meta For now lets whitelist these types and throw a doingitwrong if meta is registered with an invalid type We should match WordPress Cores sanitization function when addingupdating the title of a Post WordPress Core uses wpfilterkses but we use wpfilterpostkses 