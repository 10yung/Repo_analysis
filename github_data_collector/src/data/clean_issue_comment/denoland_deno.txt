Linker gives error linking with linkexe failed exit code with the following details note C Program Files x Microsoft Visual Studio BuildTools VC Tools MSVC bin HostX x linkexe NOLOGO NXCOMPAT LARGEADDRESSAWARE SAFESEH note libdenocorebdc d bc a rlibdenocorebdc d bc a vq sopdlcddeykwrcguo error LNK unresolved external symbol v LocalNew referenced in function ZN rustyv global GlobalLTTGT get u bu bclosureu du d h d f dc b cb E Motivation As described in its necessary to end the program even when certain types of async ops are remaining in pendingops list The example of such op is oppollsignal in which not yet landed Solution This PR enhances denocoreOpAsync type Now OpAsync has the flag blocksexit along with its main future The flag is used when checking the result of poll method of denocoreIsolate and if the flag is false the op is optional those ops are filtered out in calculation of Poll result which means the program can exit with those optional ops still remaining closes Uses Path instead of String for readwrite permission APIs resolvefromcwd as used in fs ops can just return a Path instead of a tuple The whitelists still store paths as Strings because of some memory issue Denos requestrespond handles Reader instances automatically which makes streaming a file to the browser very convenient This is awesome However the program below leaks resources because fileclose is never called js import serve from const server serve port const handleRequest async request const file await Denoopencatjpg requestrespond body file for await const request of server handleRequestrequest I propose that If the Reader is also a Closer as is the case for File then its close method should be called The error comes from here No idea why Heres the log cargorerunifchangedUsersrldsrcdenotargetpackagedeno jsstreamsreadablestreambyobreaderts cargorerunifchangedUsersrldsrcdenotargetpackagedeno jsreplts cargorerunifchangedUsersrldsrcdenotargetpackagedeno jsformaterrorts cargorerunifchangedUsersrldsrcdenotargetpackagedeno jslocationts stderr thread main panicked at called Resultunwrap on an Err value Os code kind NotFound message No such file or directory srclibcoreresultrs stack backtrace backtracebacktracelibunwindtrace at Usersrunnercargoregistrysrcgithubcom ecc db ec backtrace srcbacktracelibunwindrs backtracebacktracetraceunsynchronized at Usersrunnercargoregistrysrcgithubcom ecc db ec backtrace srcbacktracemodrs stdsyscommonbacktraceprintfmt at srclibstdsyscommonbacktracers stdsyscommonbacktraceprintDisplayBacktrace as corefmtDisplayfmt at srclibstdsyscommonbacktracers corefmtwrite at srclibcorefmtmodrs stdioWritewritefmt at srclibstdiomodrs stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at srclibstdpanickingrs stdpanickingdefaulthook at srclibstdpanickingrs stdpanickingrustpanicwithhook at srclibstdpanickingrs stdpanickingcontinuepanicfmt at srclibstdpanickingrs rustbeginunwind at srclibstdpanickingrs corepanickingpanicfmt at srclibcorepanickingrs coreresultunwrapfailed at srclibcoreresultrs coreresultResultTEunwrap at rustc e aae f a ffa a ac f c cf srclibcoreresultrs denotypescriptreadfile at Usersrldcargoregistrysrcgithubcom ecc db ec denotypescript librs denotypescriptgetasset at Usersrldcargoregistrysrcgithubcom ecc db ec denotypescript librs denotypescriptgetasset at Usersrldcargoregistrysrcgithubcom ecc db ec denotypescript librs denotypescriptopsreadfile at Usersrldcargoregistrysrcgithubcom ecc db ec denotypescript opsrs denotypescriptopsjsonopclosureclosure at Usersrldcargoregistrysrcgithubcom ecc db ec denotypescript opsrs coreresultResultTEandthen at rustc e aae f a ffa a ac f c cf srclibcoreresultrs denotypescriptopsjsonopclosure at Usersrldcargoregistrysrcgithubcom ecc db ec denotypescript opsrs denotypescriptcompileropclosure at Usersrldcargoregistrysrcgithubcom ecc db ec denotypescript librs allocboxedBoxF as coreopsfunctionFnAcall at rustc e aae f a ffa a ac f c cf srcliballocboxedrs denocoreopsOpRegistrycall at Usersrldcargoregistrysrcgithubcom ecc db ec denocore opsrs denocoreisolateIsolatedispatchop at Usersrldcargoregistrysrcgithubcom ecc db ec denocore isolaters denocorebindingssend at Usersrldcargoregistrysrcgithubcom ecc db ec denocore bindingsrs coreopsfunctionFncall at rustc e aae f a ffa a ac f c cf srclibcoreopsfunctionrs rustyv functionimpl rustyv supportMapFnFromF for extern C fnconst rustyv functionFunctionCallbackInfomappingclosure at Usersrldcargoregistrysrcgithubcom ecc db ec rustyv srcfunctionrs extern C fnA R as rustyv supportCFnFromFmappingcfn at Usersrldcargoregistrysrcgithubcom ecc db ec rustyv srcsupportrs Call at cargoregistrysrcgithubcom ecc db ec rustyv v srcapiapiargumentsinlh HandleApiCallHelperfalse at cargoregistrysrcgithubcom ecc db ec rustyv v srcbuiltinsbuiltinsapicc BuiltinImplHandleApiCall at cargoregistrysrcgithubcom ecc db ec rustyv v srcbuiltinsbuiltinsapicc BuiltinHandleApiCall at cargoregistrysrcgithubcom ecc db ec rustyv v srcbuiltinsbuiltinsapicc note Some details are omitted run with RUSTBACKTRACEfull for a verbose backtrace fatal runtime error failed to initiate panic error Previously I was able to use target x unknownlinuxmusl on rustyv and deno excluding the plugin Its unclear to me if its best to only target x unknownlinuxmusl or to additionally support it eg sccache seems to only provide binaries for that target The one concern is that glibc is required for plugins but I dont know if that means glibc cannot be used on a binary created with musl This is useful for platforms without glibc examples alpine linux and amazon linux which is occasionally a pain building so would be helpful if a compatible binaries was in denos CI xlink await Denopermissionsquery name read error Uncaught SyntaxError await is only valid in async function unknown at evaluate denoreplts at replLoop denoreplts It would be nice to be able to type deno eval p Instead of deno eval consolelog I looked at implementing p but the code is evaluated asynchronously and offthread as a module and the result of moduleevaluate is a promise that evaluates to undefined not the value of the expression So this might be harder than I imagined Deno now doesnt exit when it has unfinished async ops However I think thats inconvenient or inappropriate for certain types of ops For example in I want the program to exit even when the user is still listening to the signals but thats impossible to implement with the current core structure because when the user is listening to signals therere async ops remaining and that blocks the program to exit I suggest we should enhance denocoreOpAsync struct to have the additional flag for expressing whether it blocks the program to exit or not and make it possbile to choose to block or not for each op Depends on 