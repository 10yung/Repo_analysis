We currently have a number of issues related to our use of cargo that all manifest as some sort of advanced cargo feature interfering with our rather hacky way of talking to cargo The currently prominent issues Also besteffort integration with cargos newly stabilized offline mode would be quite useful at times We have multiple ways of addressing these either update our interaction with cargo to support all these features cleanly or approach the issues from a different angle for example using something like escargot and cargometadata which we already make use of The main drawback of such an approach would be that its probably quite hard to get all the features we need from outside cargo At the same time not depending on cargo has its benefits as long as our implementation for say finding build artifacts is stable across cargo versions Most importantly changes to cargo will no longer cause as much breakage to semverver as in the past The project currently does not build on nightly Would it be possible to send email notifications automatically when this happens eg via a travisci cron job The usage message for cargo semver states usage cargo semver options cargo options However additional options after are not passed on to cargo We should either make that work again or fix the usage message Since librustcsaveanalysis is actually a somewhat stable API a lot of breakage could be avoided and at the same time some issues with the checks could be easily addressed However since the API operates essentially on an AST level a number of issues has to be solved item correspondence has to be reestablished on an AST level which is less than ideal and might be even bad for performance no existing type check machinery can be reused we would fall back to completely reimplementing our own reasoning about types and lifetimes on an API level At the same time technical issues would become relatively straightforward to solve To summarize I believe such a change will cause a shift from relatively complex but also somewhat compact functionality to much more code which will become possibly a bit simpler and tailored to our domain cc Manishearth gnzlbg you guys might be interested While this could solve a number of problems on the backend side wed be reimplementing a lot of functionality that is already there rustdevtools this repository was moved here recently but travisci appveyor and dependabot were disabled as part of the move These need to be reenabled This will need updating the links in the readme to the appropriate places ive updated most links in but idk what to do about appveyor until the service is back up For instance if you run cargo semver S url C url this will happen text thread main panicked at assertion failed selfinnewcratenew srcsemcheckmappingrs The item that cause this lives in the percentencoding workspace Hello It would be great if cargo semver had a subcommand that could automate a chunk of the publishing process and update the version in Cargotoml This would make make deployment less errorprone by reducing human interaction Thanks for considering Hi Im trying to run cargo semver on exonum crate and getting an ICE Repo text pwd homeozkriffexonumexonum git revparse HEAD aa fac a f a b dfdc a f ec c b Finished dev unoptimized debuginfo targets in s c c Finished dev unoptimized debuginfo targets in s c semver Fresh percentencoding v Fresh quickerror v Fresh libc v Fresh matches v Fresh buildconst v Fresh router v Fresh ironcors v Fresh bodyparser v Fresh urlencoded v Fresh exonumlibsodiumsys v Fresh params v Fresh exonumsodiumoxide v Fresh exonum v filehomeozkriffbitfuryexonumexonum Finished dev unoptimized debuginfo targets in secs Updating registry Fresh serde v Fresh lazycell v Fresh rustcserialize v Fresh safemem v Fresh lazystatic v Fresh itoa v Fresh persistent v Fresh router v Fresh ironcors v Fresh mount v Fresh zip v Fresh failure v Fresh bodyparser v Fresh urlencoded v Fresh params v Fresh exonumlibsodiumsys v Fresh exonumsodiumoxide v Fresh exonum v Finished dev unoptimized debuginfo targets in secs thread main panicked at regionobligations not empty NodeId RegionObligationsubregionReStatic suptypeH librustcinfermodrs note Run with RUSTBACKTRACE for a backtrace error internal compiler error unexpected panic note the compiler unexpectedly panicked this is a bug note we would appreciate a bug report note rustc nightly acd ba running on x unknownlinuxgnu note compiler flags cratetype lib rustup show Default host x unknownlinuxgnu installed toolchains stablex unknownlinuxgnu nightly x unknownlinuxgnu nightlyx unknownlinuxgnu default active toolchain nightlyx unknownlinuxgnu default rustc nightly acd ba From IRC eddyb hmmmmmmmm sadly rustc doesnt support it although maybe it can be done hackily but itd be super cool if you could show that two different targets provide the same API eddyb at least for tier platforms eddyb twk aturon and others might be interested in it because of the compatibility lint stuff Once lands it should be possible to make use of it to compute the bounds for autotrait impls and check them for backwardsincompatible changes It will probably be necessary to PR some minor adjustments to rustc eg moving AutoTraitFinder from librustdoc to librustc but all of the core logic already exists