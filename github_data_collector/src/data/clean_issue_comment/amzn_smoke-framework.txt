In SwiftNIO its generally a good idea that on errorCaught the Channel should be closed to prevent leaking network connections that are in some error states In Smoke this should be added to the HTTP ChannelInboundHandler and the same for smokehttpclient wants that too Why Generally ChannelHandlers fire errors in cases where they dont know how to recover themselves If another later ChannelHandler knows how to recover that ChannelHandler would consume the error In other words If an error reaches the end of the pipeline nobody knew how to handle that error and closing the Channel is a good default This has always been true in SwiftNIO but in NIO this will become especially important because ByteToMessageDecoders and the HTTP decoders wont close the connections themselves anymore Why is that If the decoders themselves close the connection then theres no way for the user to opt out The code to implement this is very straightforward swift public func errorCaughtctx ChannelHandlerContext error Error switch error case let e as SomeErrorTypeIKnowHowToHandle where esomeCondition expectedValue handle error case let e as SomeOtherErrorIKnowHowToHandle handle that error default log error ctxclosepromise nil 