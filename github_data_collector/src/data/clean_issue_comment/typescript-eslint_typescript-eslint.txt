This PR upgrades commitlint packages to latest versions and drops traviscli integration as is not used commitlint config is getting upgraded to validate to use lernascopes in commit message Simple enough Also adds support for optional call expressions Id like to propose new rule Description Typing with array and object literals leads to loose typing And make it hard to find all references to interface at project Because literals has different types and no warning for this ts interface User name string function validateUseruser User const user name John validateUseruser If I want to find all references to User interface Find validateUser Find all usages validateUser Find objects passed to validateUser But if I rewrote code to ts const user User name John validateUseruser it requires from me only step My propose enforce object literal creation with types ts Error lacks typing because literal type object has no explicit types const a name John Error lacks typing for array and object inside it const b a This warns if literalsAsArgument false validateUsername John This passes because const treat this as constant value const c name John as const This passes because of casting d to User const d as User dname Jackie boy This passes because of explicit type const e User name Jill Structural typing on the wild leads to error prone refactoring and usually this mistakes discovered on production but not at compile time DO NOT MERGE This is branch contains so far only test scenarios for upcoming typescript TODO Private class properties Private class method Private class properties in tsx Export type Import type x Export as ns from Known issues There is difference in range for export as ns between babel and ts fixes This change makes it so that the RuleMetaData interface has docs as an optional property docs should not be required according to the eslint documentation From the eslint docs In a custom rule or plugin you can omit docs or include any properties that you need in it If you have a problem with a specific rule please begin your issue title with rulename to make it easier to search for Ie nounusedvars False positive when fooing the bar Please dont ignore this template If you ignore it were just going to respond asking you to fill it out which wastes everyones time The more relevant information you can include the faster we can find the issue and fix it without asking you for more info Are you opening an issue because the rule youre trying to use is not found STOP Check the releases log If the rule isnt listed there then chances are it hasnt been released to the main npm tag yet Try installing the canary tag npm i typescripteslinteslintplugincanary The canary tag is built for every commit to master so it contains the bleeding edge build If ESLint still cant find the rule then consider reporting an issue Repro Include a minimal reproduction case The more irrelevant codeconfig you give the harder it is for us to investigate JSON rules typescripteslintpreferoptionalchain warn TS foo fooa bar bara Expected Result ts fooa bara Actual Result ts fooa bar bara Additional Info Did eslint throw an exception Please run your lint again with the debug flag and dump the output below ie eslint ext tsjs src debug Versions package version typescripteslinteslintplugin typescripteslintparser TypeScript ESLint node npm If you have a problem with a specific rule please begin your issue title with rulename to make it easier to search for Ie nounusedvars False positive when fooing the bar Please dont ignore this template If you ignore it were just going to respond asking you to fill it out which wastes everyones time The more relevant information you can include the faster we can find the issue and fix it without asking you for more info Are you opening an issue because the rule youre trying to use is not found STOP Check the releases log If the rule isnt listed there then chances are it hasnt been released to the main npm tag yet Try installing the canary tag npm i typescripteslinteslintplugincanary The canary tag is built for every commit to master so it contains the bleeding edge build If ESLint still cant find the rule then consider reporting an issue I didnt find the rule for eslint commaspacing its a main reason to create this issue Repro Include a minimal reproduction case The more irrelevant codeconfig you give the harder it is for us to investigate TS const MyComponent Tprops PropsT return AnotherComponent props Expected Result I presume there should be a rule that replaces eslint commaspacing rule and allow for the next code T Actual Result There is no such rule Additional Info This trick is needed for working together with TypeScript and React in tsx file otherwise compiler thinks its a JSXTSX code not generic Did eslint throw an exception Please run your lint again with the debug flag and dump the output below ie eslint ext tsjs src debug Versions package version typescripteslinteslintplugin typescripteslintparser TypeScript ESLint node npm Goal of this PR is simplify and speed up test run time Setting up docker container in this case seems to be overkill that takes min on CI to execute all other tests are executed in min This change removes min out of CI run Notable changes docker is dropped from integration tests in favor of executing isolated commands integration tests are executed on all specified node versions There are a number of tools like forktscheckerwebpackplugin that already manage a TS program and that would like to integrate with ESLint as well Unfortunately right now our parser is a black box we create and manage the Programs we use and our APIs only accept a file path and file contents as input This brings a problem of wasted memory because the tool and our parser both create separate Programs We should look into creating an API which would seed the parser with a given program using that program instead of creating its own Id imagine something along the lines of ts import seedParser from typescripteslinttypescriptestree import CLIEngine from eslint import getProgram from mylocalproject function lintfilePath string const program getProgram seedParserprogram const engine new CLIEngineeslintOptions engineexecuteOnFilesfilePath cc johnnyreilly for forktscheckerwebpackplugin Slightly related If you have a problem with a specific rule please begin your issue title with rulename to make it easier to search for Ie nounusedvars False positive when fooing the bar Please dont ignore this template If you ignore it were just going to respond asking you to fill it out which wastes everyones time The more relevant information you can include the faster we can find the issue and fix it without asking you for more info Are you opening an issue because the rule youre trying to use is not found STOP Check the releases log If the rule isnt listed there then chances are it hasnt been released to the main npm tag yet Try installing the canary tag npm i typescripteslinteslintplugincanary The canary tag is built for every commit to master so it contains the bleeding edge build If ESLint still cant find the rule then consider reporting an issue Repro Include a minimal reproduction case The more irrelevant codeconfig you give the harder it is for us to investigate JSON rules typescripteslintpreferoptionalchain error TS declare const a b string null null a null ab null ablength Prefer using an optional chain expression instead as its more concise and easier to read Expected Result TS ab null ablength Actual Result TS ab null ablength Object is possibly null Additional Info Did eslint throw an exception Please run your lint again with the debug flag and dump the output below ie eslint ext tsjs src debug Versions package version typescripteslinteslintplugin typescripteslintparser TypeScript ESLint node npm 