I want to use gin as a http server may be beego Is it has ability to customize container go Returns allows you to document what responses errors or regular can be expected The model parameter is optional either pass a struct instance or use nil if not applicable func b RouteBuilder Returnscode int message string model interface RouteBuilder err ResponseError Code code Message message Model model IsDefault false this field is deprecated use default response instead lazy init because there is no NewRouteBuilder yet if berrorMap nil berrorMap map int ResponseError berrorMap code err return b now I can not use code to describe the response header it can not automatically generate a complete swagger doc is there any way I can generate response header spec Builds on review that first gorestfuls Logger interface is from b aca at which point the interface included both the Print and Fatal method families That interface moved to the log subpackage in c d a And the interface was reduced to just Print and Printf in a a af but the interface is clearly not gorestfulspecific More recently githubcomgologlog godocs was created as a standalone package with a similar interface it has Log and Logf instead of Print and Printf Just this morning golog grew a subpackage to convert from PrintPrintf to LogLogf That means we can offload our genericlogger shim to golog save a few lines of generic code here after removing the deprecated code and automatically benefit from gologs other implementations eg you can use infoNew to plug in a logger based on glogs Verbose Ive deprecated the old interfaces but kept them around to facilitate migrations to the new approach The only breaking change should be the removal of logLogger so that folks who are setting that directly vs going through one of the two SetLogger functions will get compiletime errors and notice that they have to update their usage If we dont mind jumping through a few extra hoops we could keep logLogger around for now and stage migration with Phase Replace the public restfulLogger with a restfulSetLogLogger setter that takes a golog LogLogf interface Calling restfulSetLogger restfulSetLogLogger or logSetLogger will all set logLogger Wed need a LogLogf PrintPrintf shim for SetLogLogger Keep importing gorestfullog and using logPrint and logPrintf where Im currently using LoggerLog and LoggerLogf Phase Drop gorestfullog and the other interfaces deprecated in this commit Replace the removed logLogger global with a new restfulLogger Replace the logPrint and logPrintf calls with LoggerLog and LoggerLogf Deprecate SetLogLogger Phase Drop SetLogLogger Alternatively you could make the global private restfullogger and keep SetLogLogger But I expect the golog Logger interface to be stable enough that we dont need to hide it behind a setter expecially one with as ugly a name as SetLogLogger or SetLogger or whatever So my first take at this PR just drops logLogger immediately to set us up for a simpler twophase migration where phase is just drop all the deprecated stuff I also see that theres a movelog branch without an associated PR doing some similar logsubpackage shuffling As of d d c that branch is removing the log subpackage entirely so maybe my backwards compat concerns are overblown It needs to import gorestfulswagger and the upstream appstats API has changed NewContext is now unexported newContext I can fix the former but I have no idea how to solve the latter gorestful has all the information it needs to validate request bodies It would be great if we could provide that feature to our users to catch malformed requests earlier See cc brendandburns 