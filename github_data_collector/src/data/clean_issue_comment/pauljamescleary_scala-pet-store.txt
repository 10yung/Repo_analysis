notably downgrade ScalaTest from a prerelease to a release version context scalacommunitybuild dont feel obligated to merge this but my guess is that you dont have any real reason to be on ScalaTest anyway it was scalasteward who PRed the upgrade not a human being Introduces a naive Queue as well as an FS stream for handling orders in the background The FS stream will either save the order for new orders or delete the order for cancels The processing follows On Placing an order the order is sent to the queue for processing to save it On Cancelling an order the order is sent to the queue for processing to delete it The processing is purposefully simple and rather unnecessary if only to illustrate FS OrderProcessor this is the main FS flow that polls for messages on the queue every few seconds pipes them through a handler and then pipes them through to delete the message off of the queue We do not explicitly handle errors right now as I planned on implementing this for SQS which does a retry after timeout I think this example is good enough open to other things to show off OrderQueueAlgebra this is a queue abstraction generalized to any implementation that follows the SQS approach to receivedelete messages OrderService this was modified to use the queue instead of processing directly OrderQueueInMemoryInterpreter a naive implementation of a message queue using purely inmemory constructs OrderQueueEndpoints slight adjustment due to changing the signature of delete and renaming to cancel See this build log info PetEndpointsSpec info create pet FAILED info MalformedMessageBodyFailure was thrown during property evaluation info Message Malformed message body Invalid JSON info Occurred when passed generated values info arg PetKAdoptedSetSet info arg UserbaopwsnrdqijsoznSome RoleAdmin info info update pet info find by tag This build was triggered by a simple documentation edit so we should figure out why this error occured and why it only randomly occurred here Perhaps scalacheck is not trying hard enough Hi pauljamescleary Do you think it would be good idea to do instrumentation using OpenCensus tracing technique I like has support for http s and doobie which are used in this project We can start with opencensus ioopencensusexportertraceloggingLoggingTraceExporter in the beginning and think about the tracing backend later I think its pluggable in opencensus On successful build from travis the most recent generated docs should be deployed to the github pages site So far this has been done manually Adding docs deployment to the travis configuration Necessary steps Add secure github api token to repository so it can be used in travis build Add tut build step to travis build fail the build if tut fails Deploy docs to github pages if successful fail the build if deployment fails The sbtnativepackager is already added to this project Currently we manually append the params to the url query string using urljoin Instead we can send the query params in as a dictionary This is to serperate out the core functionality from its REST interface This would give a chance to other REST frameworks to show how to integrate with the project This would make a new repo called scalapetstorehttp s A lot of the logic in the repositories looks replicated throughout all of the repositories This may be better to break this up into reusable traits Ie OrderService extends with Creatable t with Deleteable T with Updateable T Background The pet store is rather far along but there a lot of ideas for next steps to make it better These include things like Review all the bits collaboratively and make it more idiomatic clearer Create documentation to walk through concepts in the pet store Implement some FS bits for example reading messages off a message queue So what now Would be great to have additional collaboration on the next steps generate a backlog of issues and get others to contribute Using this issue as a starter thread for ideas and will go from there Whats been discussed The pet store could use an accompanying guidetutorial that talks about the overall organization of the codebase with the ability to inspect specific implementations eg how we did this with doobie Could use a round of reviews for cleanup perhaps making things more principled idiomatic wrt the specific libraries being used