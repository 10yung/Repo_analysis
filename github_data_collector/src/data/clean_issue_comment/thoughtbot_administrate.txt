Rubocop brings with it a certain amount of maintenence burden and keeping project level config files means theyre always somewhat out of date Additionally we already have thoughtbotguides one which is the source of truth This removes that to see if we get the right outcome one Added a Date Field where the datepicker lets the admin user select just a date without time Screen Shot at PM Notes After needing a Date field on the project Im working and seeing there were other people that reported their desire to have it see I decided to contribute to Administrate with this PR Issue Captura de Tela a s Displays an asterisk beside label on form when field is required Issue Captura de Tela a s What were you trying to do Showing HasOne association in Index page Where association doesnt have the corresponding path eg User hasone Profile But profile doesnt have an admin page What did you end up with logs or even better example apps are great It raises undefined method error like Undefined method adminprofilepath What versions are you running Rails Administrate Id like to make a fix on this If no one has Labels bug fields Over at a fair point was made if field options were public they could be accessed from templates This would enable users to customize fields without having to create new field types which I find a bit more cumbersome An argument against this change would be that it increases the contact surface of field types which can be an issue later if we change the interface of fields An argument for this change would be that the interface of fields is unlikely to change radically at this point If it did probably subclasses would have to change anyway too possibly forcing more significant changes than that of how to access the options Im not sure about this one Id like to hear more opinions use cases etc So heres a PR which hopefully will bring some feedback Working on something else I saw the following ruby protected def selffieldtype tossplitlastunderscore end This code can lead to misunderstanding as the protected modifier doesnt apply to class methods like selffieldtype On this PR I move two such class methods behind the modifier near the top of the class to avoid this confusion I also move three other class methods to the top of the class as I feel class methods should go together in general in order to clarify interfaces and avoid future instances of this antipattern This is an experiment to see what would be the simplest way to implement The idea here is to use database views to render index pages allowing us to display and sort records in any way we please For the moment I managed to make it work while only having to change Administrates ApplicationController In this change new hooks are introduced to allow controller actions to use specific resource classes Therefore the index action can use a model based off a view while other actions keep using the default model based off a table As a result this code can do three things Order by a field in a belongsto association In the products index the title of the product meta tag is shown and its possible to sort by it Order by the result of an aggregate function In the customers index its possible to sort customers by lifetime value Eliminate the N queries provoked by aggregate functions In the customers index the lifetime value is rendered from the result of the view This is a bit more hacky as it involves a new definition for lifetimevalue This is not quite there yet For one I managed to make index actions to work this way but not show actions There are new things that break and I need to look into Making the show action work would allow us to remove the lifetimevalue methods from Customer and CustomerIndex The first is redundant with the view and the second is only there to work around the first and avoid N queries I should also add some tests specific to the features listed above Working with Pundit I was seeing this index page Screenshot from That was supposed to be records but they were showing as empty rows Instead I was expecting to see the following Screenshot from The issue was that the Pundit scope for the model was returning those records but the perresource policy was returning false for show on each one of them This is a bit of an edge case if the user cant see the resources surely the scope shouldnt be returning them Still I can think of a use case where some users can see them listed with limited information but cant access the show page with additional information In any case Pundit allows for this and I think this behaviour is a bug The fix itself is just in appviewsadministrateapplicationcollectionhtmlerb Apart from that this PR is mostly me figuring out a way to test this in a disposable way that doesnt affect other specs Mostly because theres one more thing While working with this I came across the tabindex settings on the index page As they stand at the moment each row is tabbable as well as each individual cell inside each row I understand this is because these are links but it strikes me as very annoying to navigate On the example above you need to tab times per row and you get the same link for all positions I dont think this is the way tabindex is supposed to be used The reason I made this other change is because its related when applying the authorization fix I had to also make rows tabbable only if they had a link While changing this I noticed the other behaviour Can someone who knows more about accessibility than me confirm all this Some of this was taken from 