I dont want to go making fixups before the last merge commit it will destroy the history But because my master branch is always the latest feature branch merged in I am always happy to fixup every commit until the last merge IMHO this should be the default behaviour Hi thanks for this very nice tool After installing it with cargo install gitabsorb I dont get any bash completions and git absorb help fails To remedy the help situation I ran did the following help man gitabsorb localsharemanman gitabsorb mandb Now that I know that r exists the autocompletion is not so important anymore I ran git absorb and it created a number of fixup commits but still left many staged changes The documentation doesnt say what to do here or what this means Im assuming that it means that absorb couldnt find any existing commits to fixup It could be good to explain what this means in the documentation and give suggested remediation steps If you have any staged changes then you cant proceed to the next step of git rebase i autosquash Apologies if Im misunderstanding something Currently running gitabsorb with nontrivial changes creates LOTS of fixup commits with the same message because a separate fixup commit is created for each hunk Is there a reason to do this or could we squash those into a few commits After fixing I noticed another issue with the testcase from that issue In the testcase the commit to absorb is removing all instances of cfgfeature rsakeygen and there is an intermediate commit adding a function with that attribute cfgfeature rsakeygen pub fn limbsevenaddoner mut Limb cfgfeature rsakeygen pub fn limbscountlowzerobitsv Limb u gitabsorb decides to fix up this intermediate commit with both the hunk removing the cfg attribute at line and at line while arguably line removal doesnt belong to the intermediate commit as line wasnt added by the commit Its clear why gitabsorb does it and if it produced a fixup for an older commit introducing line that fixup would conflict with the intermediate commit Still gitabsorb could Keep the removal of line in the index Warn about this Its also possible rewrite the history to remove line from an older commit if we dont limit ourselves to producing fixup commits on top of existing history but thats probably out of scope for gitabsorb Specifically since Im using signed commits in a repo I would love to be able to also create signed commits with absorb This can of course be generalized down to specify options to be used when running commit I have the current commit tree in my repository f a minversion Get min versions build working bac originalltheci Cirrus CI ca ca Circle CI a e d HEAD travis origintravis Fix clippy issues in tests c d cargo fmt again b a Add travis config ea originmaster originHEAD Merge pull request from Nemo fixes I have changed the travisyml file and staged it which should be absorbed into b a running gitabsorb v n gives Feb DEBG repository found path Usersnemo sourcescbordiagrsgit line module gitabsorb Feb DEBG head found head refsheadstravis line module gitabsorbstack Feb DEBG head pushed head refsheadstravis line module gitabsorbstack Feb DEBG branch hidden branch refsheadsfixes line module gitabsorbstack Feb DEBG branch hidden branch refsheadsmaster line module gitabsorbstack Feb DEBG branch hidden branch refsheadsminversion line module gitabsorbstack Feb DEBG branch not hidden branch refsheadstravis line module gitabsorbstack Feb DEBG commuting hunk header path travisyml line module gitabsorb Feb DEBG could not find noncommutative commit line module gitabsorb Because it has hidden commits from minversion a downstream branch from the one Im currently fixing up there are no commits available to absorb the change into Deleting minversion and running git absorb v n again gives Feb DEBG repository found path Usersnemo sourcescbordiagrsgit line module gitabsorb Feb DEBG head found head refsheadstravis line module gitabsorbstack Feb DEBG head pushed head refsheadstravis line module gitabsorbstack Feb DEBG branch hidden branch refsheadsfixes line module gitabsorbstack Feb DEBG branch hidden branch refsheadsmaster line module gitabsorbstack Feb DEBG branch not hidden branch refsheadstravis line module gitabsorbstack Feb DEBG commit pushed onto stack commit a e d c c c b d f e e cf line module gitabsorbstack Feb DEBG commit pushed onto stack commit c d bf e b cb fc e e line module gitabsorbstack Feb DEBG commit pushed onto stack commit b a ca b ba f acb cdbc ea f line module gitabsorbstack Feb WARN merge commit found commit ea e d e a f a aefa bbe ef line module gitabsorbstack Feb DEBG commuting hunk header path travisyml line module gitabsorb Feb DEBG skipped commit with no path commit a e d c c c b d f e e cf line module gitabsorb Feb DEBG skipped commit with no path commit c d bf e b cb fc e e line module gitabsorb Feb DEBG found noncommutative commit by add commit b a ca b ba f acb cdbc ea f line module gitabsorb Feb INFO would have committed header fixup Add travis config line module gitabsorb Im not sure of the best solution here to support all usecases I think personally what I would want is for gitabsorb to walk down the first parent line from the current commit until it encounters any branch local or remote and hide commits from that point you might notice I dont use a local master branch so the current behaviour of only hiding local branches would fail to correctly identify the point at which to stop anyway EDIT Sorry accidentally submitted this with an old issue I was writing before I managed to debug where this was actually going wrong It would be nice if the algorithm was documented at a highlevel not just so that people can more easily contribute to the code but also so that users can be aware of any particular strengths or caveats For example it seems that it doesnt use libgit s blame APIs is that right In which case does it just iterate through the N most recent commits where N seems to default to looking for commits which change the same lines altered by the fixup hunks