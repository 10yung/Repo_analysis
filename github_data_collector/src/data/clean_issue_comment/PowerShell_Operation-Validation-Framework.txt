 Provide a general summary of the issue in the Title above Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior Using IncludePesterOutput outputs both the Pester output and the moduless default output Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work In many cases I only want the Pester output Possible Solution Not obligatory but suggest a fixreason for the bug or ideas how to implement the addition or change Add a parameter to exclude the modules output Add a Quiet param Add a NoDefaultOutput param Add a IncludePesterOutputExclusive param etc Steps to Reproduce for bugs Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant Context How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful in the real world Your Environment Include as many relevant details about the environment you experienced the bug in Module version used Operating System and PowerShell version So is the intended use of this to have automated tests of automated configuration changes So say you make some changes to your DSC or whatever configuration and check it in System would then spin up some nodes with new DSC changes and use OVF to test those changes Is something similar to that the scenario where I would use this or am I getting this wrong Thanks The GetTestFromScript function uses the method call SafeGetValue against AST types This method does not appear to be available in PSv consoles I also dont see the need to call this method for the logic being performed Current Behavior Method invocation failed because SystemManagementAutomationLanguageArrayLiteralAst does not contain a method named SafeGetValue Possible Solution Extract tags with tagElementsElementsValue instead of tagElementsSafeGetValue Steps to Reproduce for bugs Build an OVF module with a Simple or Comprehensive test ps Add a tag or multiple tags to the Describes Tag parameter Make the module discoverable by PSModulePath In a Powershell v console execute the following command GetOperationValidation Output Powershell Method invocation failed because SystemManagementAutomationLanguageArrayLiteralAst does not contain a method named SafeGetValue At C Program Files WindowsPowerShell Modules OperationValidation Private GetTestFromScriptps char itemTags tagElementsSafeGetValue CategoryInfo InvalidOperation RuntimeException FullyQualifiedErrorId MethodNotFound Context Attempting to write and use OVF modules in my server environment and do not currently have PSv installed Your Environment Module version used Operating System and PowerShell version Windows Server R Datacenter Provide a general summary of the issue in the Title above Current Behavior GetOperationValidation path checks any child directories in the current directory for the presence of a Diagnostics directory therein GetOperationValidation path MyModule does NOT seem to check in MyModule for the presence of a Diagnostics directory Expected Behavior It seems more consistent with PowerShell to accept being pointed to a specific Module directory MyModule and return the info for the tests found within MyModule Diagnostics Context Developing tests in modules not in the PSModulePath Your Environment Include as many relevant details about the environment you experienced the bug in Module version used Operating System and PowerShell version Win PowerShell I get that having logical comparisons in typical unit tests isnt a good idea ie a totally crappy example if nameStartsWithblahblahblah it something name should match blah else it blah name should match foo which I could also do with a single regex ie blahfoo however this would allow for wrong combinations but I have specific whole comprehensive tests that I dont want to run in a cloud based test but do in a on prem test and I also have the odd test where I expect different results based on the name of the machine I also want to use the same set module of tests Thoughts on how to do this conditional logical conditional logic by means of a function to do the verification which has its own tests Name the tests and then only execute tests with a specific naming convention Thanks David The Readme states about GetOperationValidation to use c temp Modules AddNumbers this hides the fact that the Path must be part of a module search path That should at least be mentioned Or consider allowing a LiteralPath instead of the ModulePath The following results in no output InvokeOperationValidation ModuleName tervisactivedirectory IncludePesterOutput File Simpletestsps in TervisActiveDirectory Diagnostics Simple ADUsers GetADUser Filter SearchBase OUDepartmentsDCtervisDCprv Properties HomeDirectory Manager EmployeeID foreach ADUser in ADUsers Describe Active Directory User ADUserName ADUsersamaccountname It Has an employee ID ADUSerEmployeeID Should Not BeNullOrEmpty It Has a manager set ADUSerManager Should Not BeNullOrEmpty Running directly InvokePester without using OVF works and results in the output of the pester tests with the Describe statement dynamically including the name of the AD user being tested I think the problem is with line of OperationValidationpsm testResult Invokepester Path tiFilePath TestName tName quietquiet PassThru The tName variable contains Active Directory User ADUserName ADUsersamaccountname and pester isnt able to find and run that named test Trying to run a Operation Validation Test on a freshly installed Ubuntu Server with Powershell version v alpha installed using the instructions from here causes the following error ParameterValidationArgumentException EmptyStringNotAllowed NewOperationValidationResult The example is now to search for Notepad which only exists on Windows machines Is there an example that is crossplatform Hello Im a novice when it comes to this stuff so let me get that out of the way up front I understand the concept of testing code I understand how Pester achieves that for PowerShell I understand what a PowerShell Module is admittedly I might not understand the full scope of modules I think I understand what OVF is supposed to do What I dont understand is why the example is the way it is In the example theres a module called AddNumbers Yet the Pester tests created to run against that module are things like firewall rules for TCP ports I dont see how those have anything to do with each other If I wanted to validate the operation of my network eg check that a service on my Exchange server was running what kind of module would I be making I feel like I would just skip straight to the Pester tests and run those What kind of function would be in a module that I would write a Pester test against to achieve my goal of validating the operation of Exchange Perhaps a better example would be a module that was actually related to testing TCP ports and not adding numbers 