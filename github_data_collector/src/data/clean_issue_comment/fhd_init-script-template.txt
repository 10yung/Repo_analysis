This was not working for forks as it was only killing the ancestor Updated the template to kill the whole tree The command for killing a process group is from this SO answer I had some trouble running a command with quotes eval fixed it Added options variable Should be useful for many services Doesnt break anything In the interest of writing valid INIT scripts I have added forcereload action According to documentation forcereload is required action in LSBcompilant scripts Source Debian docs forcereload behavior is implemented according to instructions here Hope it helps someone As explained in the process stored in varrunpidfile is the PID for the command sudo U user cmd which causes an error when the user attempts to stop the process since kill pid is not allowed because the pid is owned by root pgrep U user xf cmd captures the pid for the actual running script which is owned by user therefore allowing them to successfully stop the service without sudo I am having a problem stopping a script that I am running using the user option I configured the permissions on some necessary directories to be able to start the service properly but when I try to stop it I get the following message kill Operation not permitted After some investigation I found that the PID stored for the init script is the one for the sudo u user cmd command and there is a separate one for the actual running script I started the service and I cannot kill the process using kill pid using both the pid for the sudo u command stored in varruncmdpid as the desired user Any ideas Bash even in posix emulation mode will expand braced sequences I dont think thats the official name for this construction bash posix c echo But a more minimal shell like dash will not perform this expansion dash c echo seq is pretty common on Linux but is not itself POSIX It isnt available on FreeBSD for instance for i in seq do echo i done The POSIXest way I can think of to do this is to use a while loop and an explicit test i while i le do echo i ii done Adding i to sudo command This uses a login shell for the user Im running as a nonroot user that doesnt have access to varrun What I have to do so that the user has access to the pid file is to create it beforehand sh sudo touch varrunappNamepid sudo chown userName varrunappNamepid But this results in Already running all the time because the script checks only for file existence My change checks for something in the file too sudo sorry you must have a tty to run sudo This message is found it error log file This could be due to requiretty being enabled in visudo by default Reference here If this is the case it is better to apply workaround in the init script instead of altering visudo default configuration 