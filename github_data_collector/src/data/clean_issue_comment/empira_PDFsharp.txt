For example when I open a FormFill PDF take this as an example Depending on if I use PdfDocumentOpenModeModify or PdfDocumentOpenModeReadOnly a specific field I am looking for has a different ObjectID Note I get the correct Object ID when using ReadOnly mode I am viewing ObjectIDs using CosEdit and I can reproduce this issue when printing out the AcroForm field ObjectIDs when opening the PDF file in different modes lexerPosition cause SystemIOMemoryStreamsetPosition to be This change preserve current support for NET at the same time allow with very trivial change to add support for netstandard I try to preserve everything as it was in the original file without performing simple cleanups which maybe too opionated In generaal starting from VS there possibility to use more sane way to manage shared code using Shared Project but I will showcase that only if current changes would be accepted When Code or Interleaved of bar code is rendered using PDFSharp library and TextLocationAboveEmbedded or TextLocationBelowEmbedded is selected for this bar code if font size used to draw text is so large that graphics MeasureString method returns height greater than bar code height exception is thrown in ThickThinBarcodeRendererRenderBar method infoGfxDrawRectangleinfoBrush rect statement since value of rectHeight is negative We came across a PDF file that was referencing one resource dictionary from every page which contained all fonts and images Therefore extracting a single page would make the resulting file very large as all fonts and images would be embedded as well We can provide this file for tests if desired The code changes not treat cloning the resource dictionary differently from cloning other objects as the resources will be reduced to resources used in the content There are a few questions open Are there maybe indirect ways to reference a resource from the content that are not considered here Is there a way to reuse the lexerparser to go identify used resources currently this is a rather hacky implementation Are there any points that we have not considered properly here Any feedback is greatly appreciated and wed love to see this ability in the main branch at some point Ive added the property PdfSharpChartingAxisTickLabelAngle which is used by the renderer to rotate the axis tick labels For example this creates a counterclockwise slant lineChartXAxisTickLabelAngle This allows reading of uints by ReadInt and converts them to negative integers This allows for reading some headers with other encryption options even if we dont support that encryption type useful if pdf still has read access without Should not break most existing code unless code expected an exception for reading uints and was catching it Could look at adding a ReadUInt as well and changing the header functionality depending on preferences but as this allowed reading these PDFs it seemed acceptable to me as is with in theory low possible side effects Specifically ResponseOutputStream Im refurbishing a really old aspnet project and hit the same first time errors as everyone I try and do a PdfDocumentRendererSave to ResponseOutputStream and get the Position error The answer has always been to save to a MemoryStream then send those bytes to ResponseOutputStream It works but it feels like its consuming a lot of extra memory when it might not be necessary I traced the code and it looks like PdfWritercs could be modified to keep track of its position The only thing it would create a problem for is PdfWriterLayoutVerbosewhich would be skipped if the stream cant seek Heres what I quickly slapped together so I didnt need a MemoryStream region PDFsharp A NET library for processing PDF Authors Stefan Lange Copyright c empira Software GmbH Cologne Area Germany Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the Software to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense andor sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software THE SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE endregion using System using SystemCollectionsGeneric using SystemDiagnostics using SystemGlobalization using SystemText using SystemIO using PdfSharpPdfAdvanced using PdfSharpPdfSecurity using PdfSharpPdfInternal namespace PdfSharpPdfIO summary Represents a writer for generation of PDF streams summary internal class PdfWriter internal bool cantSeek false internal int cantSeekCurrentPosition public PdfWriterStream pdfStream PdfStandardSecurityHandler securityHandler stream pdfStream if pdfStreamCanSeek cantSeek true securityHandler securityHandler SystemXmlXmlTextWriter if DEBUG layout PdfWriterLayoutVerbose endif public void Closebool closeUnderlyingStream if stream null closeUnderlyingStream if UWP streamDispose else streamClose endif stream null public void Close Closetrue public int Position get if cantSeek return cantSeekCurrentPosition else return intstreamPosition summary Gets or sets the kind of layout summary public PdfWriterLayout Layout get return layout set layout value PdfWriterLayout layout public PdfWriterOptions Options get return options set options value PdfWriterOptions options summary Writes the specified value to the PDF stream summary public void Writebool value WriteSeparatorCharCatCharacter WriteRawvalue boolTrueString boolFalseString lastCat CharCatCharacter summary Writes the specified value to the PDF stream summary public void WritePdfBoolean value WriteSeparatorCharCatCharacter WriteRawvalueValue true false lastCat CharCatCharacter summary Writes the specified value to the PDF stream summary public void Writeint value WriteSeparatorCharCatCharacter WriteRawvalueToStringCultureInfoInvariantCulture lastCat CharCatCharacter summary Writes the specified value to the PDF stream summary public void Writeuint value WriteSeparatorCharCatCharacter WriteRawvalueToStringCultureInfoInvariantCulture lastCat CharCatCharacter summary Writes the specified value to the PDF stream summary public void WritePdfInteger value WriteSeparatorCharCatCharacter lastCat CharCatCharacter WriteRawvalueValueToStringCultureInfoInvariantCulture summary Writes the specified value to the PDF stream summary public void WritePdfUInteger value WriteSeparatorCharCatCharacter lastCat CharCatCharacter WriteRawvalueValueToStringCultureInfoInvariantCulture summary Writes the specified value to the PDF stream summary public void Writedouble value WriteSeparatorCharCatCharacter WriteRawvalueToStringConfigSignificantFigures CultureInfoInvariantCulture lastCat CharCatCharacter summary Writes the specified value to the PDF stream summary public void WritePdfReal value WriteSeparatorCharCatCharacter WriteRawvalueValueToStringConfigSignificantFigures CultureInfoInvariantCulture lastCat CharCatCharacter summary Writes the specified value to the PDF stream summary public void WritePdfString value WriteSeparatorCharCatDelimiter if true PdfStringEncoding encoding PdfStringEncodingvalueFlags PdfStringFlagsEncodingMask string pdf valueFlags PdfStringFlagsHexLiteral PdfEncodersToStringLiteralvalueValue encoding SecurityHandler PdfEncodersToHexStringLiteralvalueValue encoding SecurityHandler WriteRawpdf else switch valueFlags PdfStringFlagsEncodingMask case PdfStringFlagsUndefined case PdfStringFlagsPDFDocEncoding if valueFlags PdfStringFlagsHexLiteral WriteRawPdfEncodersDocEncodevalueValue false else WriteRawPdfEncodersDocEncodeHexvalueValue false break case PdfStringFlagsWinAnsiEncoding throw new NotImplementedExceptionUnexpected encoding WinAnsiEncoding case PdfStringFlagsUnicode if valueFlags PdfStringFlagsHexLiteral WriteRawPdfEncodersDocEncodevalueValue true else WriteRawPdfEncodersDocEncodeHexvalueValue true break case PdfStringFlagsStandardEncoding case PdfStringFlagsMacRomanEncoding case PdfStringFlagsMacExpertEncoding default throw new NotImplementedExceptionUnexpected encoding endif lastCat CharCatDelimiter summary Writes the specified value to the PDF stream summary public void WritePdfName value WriteSeparatorCharCatDelimiter string name valueValue StringBuilder pdf new StringBuilder for int idx idx nameLength idx char ch name idx DebugAssertch if ch switch ch TODO is this all case case case case case case case case case break default pdfAppendname idx continue pdfAppendFormat X intname idx WriteRawpdfToString lastCat CharCatCharacter public void WritePdfLiteral value WriteSeparatorCharCatCharacter WriteRawvalueValue lastCat CharCatCharacter public void WritePdfRectangle rect const string format ConfigSignificantFigures WriteSeparatorCharCatDelimiter WriteRawPdfEncodersFormat format format format format rectX rectY rectX rectY lastCat CharCatDelimiter public void WritePdfReference iref WriteSeparatorCharCatCharacter WriteRawirefToString lastCat CharCatCharacter public void WriteDocStringstring text bool unicode WriteSeparatorCharCatDelimiter WriteRawPdfEncodersDocEncodetext unicode byte bytes if unicode bytes PdfEncodersDocEncodingGetBytestext else bytes PdfEncodersUnicodeEncodingGetBytestext bytes PdfEncodersFormatStringLiteralbytes unicode true false securityHandler Writebytes lastCat CharCatDelimiter public void WriteDocStringstring text WriteSeparatorCharCatDelimiter WriteRawPdfEncodersDocEncodetext false byte bytes PdfEncodersDocEncodingGetBytestext bytes PdfEncodersFormatStringLiteralbytes false false false securityHandler Writebytes lastCat CharCatDelimiter public void WriteDocStringHexstring text WriteSeparatorCharCatDelimiter WriteRawPdfEncodersDocEncodeHextext byte bytes PdfEncodersDocEncodingGetBytestext bytes PdfEncodersFormatStringLiteralbytes false false true securityHandler streamWritebytes bytesLength if cantSeek cantSeekCurrentPosition bytesLength lastCat CharCatDelimiter summary Begins a direct or indirect dictionary or array summary public void WriteBeginObjectPdfObject obj bool indirect objIsIndirect if indirect WriteObjectAddressobj if securityHandler null securityHandlerSetHashKeyobjObjectID stackAddnew StackItemobj if indirect if obj is PdfArray WriteRaw n else if obj is PdfDictionary WriteRaw n lastCat CharCatNewLine else if obj is PdfArray WriteSeparatorCharCatDelimiter WriteRaw lastCat CharCatDelimiter else if obj is PdfDictionary NewLine WriteSeparatorCharCatDelimiter WriteRaw n lastCat CharCatNewLine if layout PdfWriterLayoutVerbose IncreaseIndent summary Ends a direct or indirect dictionary or array summary public void WriteEndObject int count stackCount DebugAssertcount PdfWriter stack underflow StackItem stackItem stack count stackRemoveAtcount PdfObject value stackItemObject bool indirect valueIsIndirect if layout PdfWriterLayoutVerbose DecreaseIndent if value is PdfArray if indirect WriteRaw n n lastCat CharCatNewLine else WriteRaw lastCat CharCatDelimiter else if value is PdfDictionary if indirect if stackItemHasStream WriteRawlastCat CharCatNewLine n n else DebugAssertstackItemHasStream Direct object with stream WriteSeparatorCharCatNewLine WriteRaw n lastCat CharCatNewLine if indirect NewLine WriteRawendobj n if layout PdfWriterLayoutVerbose WriteRaw n summary Writes the stream of the specified dictionary summary public void WriteStreamPdfDictionary value bool omitStream StackItem stackItem stack stackCount DebugAssertstackItemObject is PdfDictionary DebugAssertstackItemObjectIsIndirect stackItemHasStream true WriteRawlastCat CharCatNewLine nstream n nstream n if omitStream WriteRaw stream content omitted n useful for debugging only else byte bytes valueStreamValue if bytesLength if securityHandler null bytes byte bytesClone bytes securityHandlerEncryptBytesbytes Writebytes if lastCat CharCatNewLine WriteRaw n WriteRawendstream n public void WriteRawstring rawString if StringIsNullOrEmptyrawString return byte bytes PdfEncodersRawEncodingGetBytesrawString streamWritebytes bytesLength if cantSeek cantSeekCurrentPosition bytesLength lastCat GetCategorycharbytes bytesLength public void WriteRawchar ch DebugAssertch Raw character greater than detected streamWriteBytebytech if cantSeek cantSeekCurrentPosition sizeofbyte lastCat GetCategorych public void Writebyte bytes if bytes null bytesLength return streamWritebytes bytesLength if cantSeek cantSeekCurrentPosition bytesLength lastCat GetCategorycharbytes bytesLength void WriteObjectAddressPdfObject value if layout PdfWriterLayoutVerbose WriteRawStringFormat obj n valueObjectIDObjectNumber valueObjectIDGenerationNumber valueGetTypeFullName else WriteRawStringFormat obj n valueObjectIDObjectNumber valueObjectIDGenerationNumber public void WriteFileHeaderPdfDocument document StringBuilder header new StringBuilderPDF int version documentversion headerAppendversion ToStringCultureInfoInvariantCulture version ToStringCultureInfoInvariantCulture n xD xF xCC xE n WriteRawheaderToString if layout PdfWriterLayoutVerbose cantSeek WriteRawStringFormat PDFsharp Version verbose mode n VersionInfoVersion Keep some space for later fixup commentPosition intstreamPosition WriteRaw n WriteRaw n WriteRaw n WriteRaw n WriteRaw n WriteRaw n public void WriteEofPdfDocument document int startxref WriteRawstartxref n WriteRawstartxrefToStringCultureInfoInvariantCulture WriteRaw nEOF n if layout PdfWriterLayoutVerbose cantSeek int fileSize intstreamPosition TimeSpan duration DateTimeNow documentcreation streamPosition commentPosition Without InvariantCulture parameter the following line fails if the current culture is eg a Far East culture because the date string contains nonASCII characters So never never never never use ToString without a culture info WriteRawCreation date documentcreationToStringG CultureInfoInvariantCulture streamPosition commentPosition WriteRawCreation time durationTotalSecondsToString CultureInfoInvariantCulture seconds streamPosition commentPosition WriteRawFile size fileSizeToStringCultureInfoInvariantCulture bytes streamPosition commentPosition WriteRawPages documentPagesCountToStringCultureInfoInvariantCulture streamPosition commentPosition WriteRawObjects documentirefTableObjectTableCountToStringCultureInfoInvariantCulture summary Gets or sets the indentation for a new indentation level summary internal int Indent get return indent set indent value int indent int writeIndent summary Increases indent level summary void IncreaseIndent writeIndent indent summary Decreases indent level summary void DecreaseIndent writeIndent indent summary Returns an indent string of blanks summary static string Indint indent return new String indent summary Gets an indent string of current indent summary string IndentBlanks get return new string writeIndent void WriteIndent WriteRawIndentBlanks void WriteSeparatorCharCat cat char ch switch lastCat case CharCatNewLine if layout PdfWriterLayoutVerbose WriteIndent break case CharCatDelimiter break case CharCatCharacter if layout PdfWriterLayoutVerbose if cat CharCatCharacter ch streamWriteBytebyte if cantSeek cantSeekCurrentPosition sizeofbyte else if cat CharCatCharacter streamWriteBytebyte if cantSeek cantSeekCurrentPosition sizeofbyte break void WriteSeparatorCharCat cat WriteSeparatorcat public void NewLine if lastCat CharCatNewLine WriteRaw n CharCat GetCategorychar ch if LexerIsDelimiterch return CharCatDelimiter if ch CharsLF return CharCatNewLine return CharCatCharacter enum CharCat NewLine Character Delimiter CharCat lastCat summary Gets the underlying stream summary internal Stream Stream get return stream Stream stream internal PdfStandardSecurityHandler SecurityHandler get return securityHandler set securityHandler value PdfStandardSecurityHandler securityHandler class StackItem public StackItemPdfObject value Object value public readonly PdfObject Object public bool HasStream readonly ListStackItem stack new ListStackItem int commentPosition Hello Everyone There is a crash in PdfSharp when appending some of my PDF files to a longer master file Attached is a minimum working sample that triggers this bug Stacktrace is as follows Unhandled Exception SystemInvalidCastException GetReal Object is not a number at PdfSharpPdfPdfArrayArrayElementsGetRealInt index at PdfSharpPdfPdfDictionaryDictionaryElementsGetRectangleString key Boolean create at PdfSharpPdfPdfPagegetMediaBox at PdfSharpPdfPdfPageWriteObjectPdfWriter writer at PdfSharpPdfPdfDocumentDoSavePdfWriter writer at PdfSharpPdfPdfDocumentSaveStream stream Boolean closeStream at PdfSharpPdfPdfDocumentSaveString path at IssueSubmissionProgramMain in C Users user Downloads PDFsharpIssueSubmission IssueSubmission Programcsline File is generated with WeasyPrint and sanitized with PDFXchange editor Original WeasyPrint file doesnt work as well as sanitized version from PDFXchange PDFsharpIssueSubmissionzip I want to create a pdf with fields in it I use MigraDoc but my problem is related to pdfSharp classes Document document new Document Section section documentAddSection sectionAddParagraphSignature Test PdfDocumentRenderer pdfRenderer new PdfDocumentRendererfalse PdfFontEmbeddingAlways pdfRendererDocument document pdfRendererRenderDocument NullPointerException AcroForm is null pdfRendererPdfDocumentAcroFormElementsAddPdfAcroFormKeysSigFlags new PdfInteger const string filename HelloWorldpdf pdfRendererPdfDocumentSavefilename ProcessStartfilename My problem is that the pdfRendererPdfDocumentAcroForm is always null and there is no possibility to create a new object Unfortunately there is no example on the homepage