Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details At now there are some excess copying during passing parameters to the VM and back to the statemachine It can be avoided with using direct bytebuffer With some Asmble drawbacks it seems more reasonable to use Wasmer as the execution environment but currently Wasmer doesnt provide some features of Asmble and previous virtual machine like memory merkalization and static module linkage out of the box Since that we decided to integrate it stepbystep This issue is a beacon issue for this process x initial Wasmer support PR x able to work with one module and pass all tests that use one module PR x able to pass config from Scala part and return state back PR x expectseth support PR x Scala part refactored to support Wasmer PR x support gas and eic metering PR x able to integrate as a jni library branch x optimize logging PR able to use singlepass compiler backend and pass our tests x preallocates all memory on the startup PR x able to save global Instance with found func PR optimize parameters passing and returning result back x Decouple Frank to a separate project Support of multi modules Memory merkalization Currently the following situation is possible tx sent response received tx timed out but node received tx tx timed out node didnt receive tx tx sent node received tx but tx will never be executed because tx is missing This leads to stalled tx processing and client requests looking like they hanged up To solve this problem all failed requests should be retried until success At the moment pwasmutils from Parity doesnt allow to instrument code to compute both gas and EIC for one pas So it needs to be applied twice When a node downloads a code it should send pinadd request to the local IPFS node so code is persisted on that node Currently there is no way to know if block uploading process is alive and well or has stalled Due to this there are also no alerts on whether statemachine is alive or has stalled To achieve this statemachine should provide information timing on the beginning and the end of the Commit phase So if statemachine has CommitBegin TIMESTAMP in status and TIMESTAMP NOW is more than some threshold we can detect the process has stalled Currently blocks are uploaded to a shared IPFS instance there are two of them under a load balancer and sometimes upload add requests do time out This bottleneck can be avoided by deploying IPFS instance on each node locally Also to ensure stored blocks durability there should be some replication and this could be achieved by connecting local IPFS instances into the IPFS cluster There are two getter methods in ControlSignals used in BlockUploading getReceiptheight Long and getVmHashheight Long Both methods are used by wrapping them in backoffretry so they should be idempotent But they are not This is because Queue is used under the hood and once element is dequeued it cant be retrieved again To avoid that Map could be used but this brings a problem on removing data from the Map its not clear when to do that So the task is to make getReceipt and getVmHash idempotent data structures dont matter but Map seems like a good candidate