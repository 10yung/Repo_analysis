When youre working with a large tree and you begin marking trees containing branches as complete you can no longer see the sign that indicates subtrees as the skull seems to clobberhide the symbol consider instead making it only prepend the skull In addition consider making it so that the plus sign and skull symbols do not cover the first part of the node text Instead of covering the text have it prepend the node text Is there any way to export ones data Many thanks in advance Does anyone have a solution to backup the voiddb file A privatepublic gist or github repo would be ideal A general and agnostic implementation would be to enable pre and post hooks for void preopen postclose This would allow the implementation details for backups and other operations to be though out later git back up implementation assuming prepost hooks personally I use void only on one computer so my commands would look as follows prehook would do a git pull posthook would do a git push failure due to network or other reasons would fail silently maybe a place to show error messages within void I am getting an error when trying to use KEYFILE env var The contents of the voidkeys file is a copy of the defaultkeys from the repo Let me know if I can help debug export KEYFILEUserstoidiuvoidkeys void thread main panicked at called Resultunwrap on an Err value Custom kind Other error StringErrorinvalid config at line Comments are supported srclibcoreresultrs note Run with RUSTBACKTRACE environment variable to display a backtrace details summaryfile contentsummary p Comments are supported unselectesc scrolluppgup scrolldownpgdn deletedel selectupup selectdowndown selectleftleft selectrightright erasebackspace createsiblingenter createchildtab createfreenodeCn executeCk drilldownCw popupCq jumpCf togglecompletedCa togglehidecompletedCh arrowCr autoarrangeCp togglecollapsedCt quitCc saveCx toggleshowlogsCl entercommandCe findtaskCv yankpastenodeCy raiseselectedCg lowerselectedCd searchCu undodeleteCz help p details It would be nice to be able to hit a key combo to move the current item up one scope level By default I would suggest Shift Tab to deindent This would move the currently selected item to be at the same level as its parent This pull request aims to add signalhandling to void x add nix as dependency x add signals to the Config structure x initialize Configsignals with various signals that bind to ActionQuit add handlesignal akin to handleevent call it in run Hi I am the author of the imag project Would you like to collaborate on implementing a terminal based organizer I have a big infrastructure for implementing PIMrelated domains for CLITUI usage and I would love to collaborate to build a terminal based organizer tool based on the imag infrastructure Let me hear what you think There have been a lot of new features implemented recently by PRs mostly by alok wink Id be happy to do a release soon but I really want to improve the CI and testing of the project first Pinning an old version of void to write a datafile and then opening it again in the current master branch would catch most data loss issues If youve got ideas for more testing opportunities please post them as comments Ill try to find the time to take a stab at it this week I noticed that if you hit ck on a node with no special handling it just executes it as a shell command If you want to open it in an editor you have to type txt first Wouldnt a better default be to open text in a text editor and for shelling out to require explicit handling with something like a shell prefix From the PR initially implementing this I often use deep trees and currently every time you reopen void the view gets reset to the home level This makes it so the view stack and the current focus view are restored between runs Maybe its not the best way to things just exposing fields with pub but it might be helpful anyway The changes should work on existing documents as all the new proto fields are optional but I havent done exhaustive testing of this An alternative implementation was added with PR Unfortunately adding this feature isnt quite that simple It requires an update to the protobuf generated code which leads to horrible data loss if not done correctly Therefore this feature is blocked on a few changes around configurable data formats Existing data files legacy need to keep working without data loss New storage format needs to include current selection There needs to be a convenient way to migrate from the legacy format to the new one Ill also add a milestone to this once we can estimate how much work is actually required for this