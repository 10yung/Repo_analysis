 The devDependency mustache was updated from to This version is not covered by your current version range If you don t accept this pull request your project will work just like it did before However you might be missing out on a bunch of new features fixes andor performance improvements from the dependency update Publisher flipp License MIT Find out more about this release details summaryFAQ and helpsummary There is a collection of frequently asked questions If those don t help you can always ask the humans behind Greenkeeper details Your Greenkeeper bot palmtree Hi is there an option to incorporate this on a PHP application thank you Python version of cssbeautify can be installed with pip sh pip install cssbeautifier jsbeautifier is installed as dependency Input The code looked like this before beautification handlebars SomeComponent as sc some content SomeComponent Expected Output The code should have looked like this after beautification handlebars SomeComponent as sc some content SomeComponent Actual Output The code actually looked like this after beautification handlebars SomeComponent as sc some content SomeComponent Steps to Reproduce Environment OS MacOS Description If an if statement contains a single trycatch statement only the try block will get indented correctly The catch block will be indented as if it were outside the if statement Input The code looked like this before beautification if a try a catch e ignore Expected Output The code should have looked like this after beautification if a try a catch e ignore Actual Output The code actually looked like this after beautification if a try a catch e ignore Environment Reproduced on as well as locally Settings json indentsize indentchar maxpreservenewlines preservenewlines true keeparrayindentation false breakchainedmethods false indentscripts normal bracestyle expand spacebeforeconditional true unescapestrings false jslinthappy false endwithnewline false wraplinelength indentinnerhtml false commafirst false e x false indentemptylines false Description Spaces are not format properly in media features Input The code looked like this before beautification media only screen and maxwidth px Expected Output The code should have looked like this after beautification media only screen and maxwidth px Actual Output The code actually looked like this after beautification media only screen and maxwidth px Steps to Reproduce Just try beautify sample code Environment OS Windows IDE Visual Studio Code Wrapper codebeautifier on jsbeautify Settings Example json endwithnewline true maxpreservenewlines indentsize indentchar indentwithtabs false css newlinebetweenrules true js jslinthappy true Hi bitwiseman This ticket is just a suggestion to try to be helpful Feel free to use it or not It doesnt make a real difference to me but someone might appreciate it Youll remember that we had a big discussion years ago on Issue about rules of an ideal formatting engine And I want to reaffirm that I am very grateful for your help and that of madmanbob for finally fixing the core formatting rules in Issue I cant say thank you enough Many many years ago I had written my own XMLHTML serializer in Java but I had never got around to implementing a comprehensive set of whitespace formatting rules Im now overhauling the formatting engine you can track it on Jira in JAVA and Im almost done Once Im completely finished I can try to summarize the rules I came up with if youre interested One of the interesting outcomes is that we dont actually need all the categories I proposed when I was outlining a formatting algorithm off the top of my head It turns out we only need categories of block and inline although of course some elements eg pre will have formatting disabled Additionally since browsers normally format unrecognized elements as display inline we would want to merely specify the block elements and let everything else default to inline Im writing this ticket because I was looking for an official list of block elements This is not a semantic category but rather a list of elements that the HTML specification recommends the browser should by default format as display block See Browsers default CSS for HTML elements on stack overflow You can find these elements in the most recent W C HTML specification at HTML Rendering Lastly it turns out you need to include not just those elements that default to display block but also those that default to display listitem in order to include li Im using a jsbeautify formatted HTML file in unit tests for my Java code to see how much the output of my algorithm differs The resulting formatted documents is almost the same The one difference I noted is that jsbeautify formats html figurefigcaptionA Hello World Java Programfigcaption pre classlinenumberscode classlanguagejavapackage comexample While my Java implementation formats this as html figure figcaptionA Hello World Java Programfigcaption pre classlinenumberscode classlanguagejavapackage comexample This is because Im going off the official list of recommended browser default display block elements as explained above and figcaption by default should be a block element as per the W C WHATWG Anyway this is less a request than a suggestion that you may find helpful It would probably be nice to have jsbeautify follow a more official list but its not causing me great problems at the moment All the best Null coalescing is currently at stage and already shipped with TypeScript Currently with the following input js const obj const a objprop hola We get the following output const obj const a objprop hola Notice the extra spaces around The expected output is the same as the input Configuration indentsize indentchar maxpreservenewlines preservenewlines true keeparrayindentation false breakchainedmethods false indentscripts normal bracestyle collapse spacebeforeconditional true unescapestrings false jslinthappy false endwithnewline false wraplinelength indentinnerhtml false commafirst false e x false indentemptylines false Optional chaining is currently at stage and already shipped with TypeScript Currently with the following input js const obj objpropsubprop We get the following output const obj obj prop subprop Notice the extra spaces around The expected output is the same as the input Configuration indentsize indentchar maxpreservenewlines preservenewlines true keeparrayindentation false breakchainedmethods false indentscripts normal bracestyle collapse spacebeforeconditional true unescapestrings false jslinthappy false endwithnewline false wraplinelength indentinnerhtml false commafirst false e x false indentemptylines false Description Referencing VSCode Issue VSCode uses jsbeautify for formatting and defaults wraplinelength to Issue Multiple runs of jsbeautify on HTML with wraplinelength set results in text with numerous unnecessary line breaks Solution Because HTML outside of the pre tag doesnt render line breaks in plain text either change the default to remove line breaks within plain text or add a setting called something like preserveNewTextLines that works like preserveNewLines but within a tag Environment Beautify HTML Input pSee Spot This is a perfectly normal and simple English sentence used to show how the language can expand over timep Output This looks fine pSee Spot This is a perfectly normal and simple English sentence used to show how the language can expand over time p Modified Input Add very far to the simple sentence pSee Spot very far This is a perfectly normal and simple English sentence used to show how the language can expand over time p Output I mean why does the p have its own line But otherwise fine pSee Spot very far This is a perfectly normal and simple English sentence used to show how the language can expand over time p Modified Input Oops Forgot the verb Add run pSee Spot run very far This is a perfectly normal and simple English sentence used to show how the language can expand over time p Output Multiple this by millions and suddenly my code looks atrocious Seriously pSee Spot run very far This is a perfectly normal and simple English sentence used to show how the language can expand over time p Expected Output Id like to see this output pSee Spot run very far This is a perfectly normal and simple English sentence used to show how the language can expand over timep 