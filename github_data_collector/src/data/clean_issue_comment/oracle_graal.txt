Not sure if this is the right place to ask this question However does Graals JIT Compiler have the corresponding flag to C s AutoBoxCacheMax If not is there any plan to enable it in Graal Thank you I tried building my app with the following changes Removing jnativehook library Removing awt usage Build was successful then when i start to play any media file it just doesnt proceed mediaPlayersetOnError isnt triggered and its not in READY state either No stack trace is shown as well pomxml xml version encodingUTF project xmlns xmlnsxsi xsischemaLocation modelVersion modelVersion groupIdcomgithubdubbadhargroupId artifactIdGramophyartifactId version version properties projectbuildsourceEncodingUTF projectbuildsourceEncoding mavencompilersource mavencompilersource mavencompilertarget mavencompilertarget javafxversion javafxversion clientpluginversion clientpluginversion mainClassNameGramophyMainmainClassName properties dependencies dependency groupIdorgopenjfxgroupId artifactIdjavafxbaseartifactId version version dependency dependency groupIdorgopenjfxgroupId artifactIdjavafxcontrolsartifactId version version dependency dependency groupIdorgopenjfxgroupId artifactIdjavafxmediaartifactId version version dependency dependency groupIdorgopenjfxgroupId artifactIdjavafxfxmlartifactId version version dependency dependency groupIdcomjfoenixgroupId artifactIdjfoenixartifactId version version dependency dependency groupIdcommpatricgroupId artifactIdmp agicartifactId version version dependency dependency groupIdorgjsongroupId artifactIdjsonartifactId version version dependency dependency groupIdiogithubtyphon groupId artifactIdAnimateFXartifactId version version dependency dependency groupIdorgopenjfxgroupId artifactIdjavafxswingartifactId version version dependency dependencies build plugins plugin groupIdorgapachemavenpluginsgroupId artifactIdmavencompilerpluginartifactId version version configuration release release configuration plugin plugin groupIdorgopenjfxgroupId artifactIdjavafxmavenpluginartifactId version version configuration mainClassmainClassNamemainClass configuration plugin plugin groupIdcomgluonhqgroupId artifactIdclientmavenpluginartifactId versionclientpluginversionversion configuration Uncomment to run on iOS targetiostarget graalvmHomehomedubbadhargraalvmgraalvmHome reflectionList listjavafxfxmlFXMLLoaderlist listGramophydashControllerlist listjavafxscenecontrolButtonlist listjavafxscenecontrolLabellist listcomjfoenixcontrolsJFXButtonlist listcomjfoenixcontrolsJFXMasonryPanelist listcomjfoenixcontrolsJFXSpinnerlist listjavafxgeometryInsetslist listjavafxscenecontrolLabellist listjavafxscenecontrolListViewlist listjavafxsceneCacheHintlist listjavafxscenepaintPaintlist listjavafxscenecontrolScrollPanelist listjavafxscenecontrolScrollPaneScrollBarPolicylist listcomjfoenixcontrolsJFXButtonButtonTypelist listjavafxscenecontrolSliderlist listjavafxsceneimageImagelist listjavafxsceneimageImageViewlist listjavafxscenelayoutPrioritylist listjavafxscenelayoutAnchorPanelist listjavafxscenelayoutHBoxlist listjavafxscenelayoutRegionlist listjavafxscenelayoutStackPanelist listjavafxscenelayoutVBoxlist listjavafxscenetextFontlist listjavafxscenecontrolTextFieldlist reflectionList mainClassmainClassNamemainClass configuration plugin plugins build pluginRepositories pluginRepository idgluonreleasesid url pluginRepository pluginRepositories project But overall the app itself starts in a jiffy and i really love it JavaFX Version My native image fails at runtime with the following INFO comdatpowLanderResource vertxworkerthread Could not connect to cassandra javalangIllegalArgumentException Error instantiating class AtomicTimestampGenerator specified by advancedtimestampgeneratorclass comkenaijffiForeigninvokeN O JJJJLjavalangObjectIIIJ symbol JavacomkenaijffiForeigninvokeN O or JavacomkenaijffiForeigninvokeN O JJJJLjavalangObject III at comdatastaxossdriverinternalcoreutilReflectionbuildFromConfigReflectionjava at comdatastaxossdriverinternalcoreutilReflectionbuildFromConfigReflectionjava at comdatastaxossdriverinternalcorecontextDefaultDriverContextbuildTimestampGeneratorDefaultDriverContextjava at comdatastaxossdriverinternalcoreutilconcurrentLazyReferencegetLazyReferencejava at comdatastaxossdriverinternalcorecontextDefaultDriverContextgetTimestampGeneratorDefaultDriverContextjava at comdatastaxossdriverinternalcoresessionDefaultSessionSingleThreadedinitDefaultSessionjava at comdatastaxossdriverinternalcoresessionDefaultSessionSingleThreadedaccess DefaultSessionjava at comdatastaxossdriverinternalcoresessionDefaultSessionlambdainit DefaultSessionjava at ionettyutilconcurrentPromiseTaskRunnableAdaptercallPromiseTaskjava at ionettyutilconcurrentPromiseTaskrunPromiseTaskjava at ionettychannelDefaultEventLooprunDefaultEventLoopjava at ionettyutilconcurrentSingleThreadEventExecutor runSingleThreadEventExecutorjava at ionettyutilinternalThreadExecutorMap runThreadExecutorMapjava at ionettyutilconcurrentFastThreadLocalRunnablerunFastThreadLocalRunnablejava at javalangThreadrunThreadjava at comoraclesvmcorethreadJavaThreadsthreadStartRoutineJavaThreadsjava at comoraclesvmcoreposixthreadPosixJavaThreadspthreadStartRoutinePosixJavaThreadsjava Caused by javalangUnsatisfiedLinkError comkenaijffiForeigninvokeN O JJJJLjavalangObjectIIIJ symbol JavacomkenaijffiForeigninvokeN O or JavacomkenaijffiForeigninvokeN O JJJJLjavalangObject III at comoraclesvmjniaccessJNINativeLinkagegetOrFindEntryPointJNINativeLinkagejava at comoraclesvmjniJNIGeneratedMethodSupportnativeCallAddressJNIGeneratedMethodSupportjava at comkenaijffiForeigninvokeN O Foreignjava at comkenaijffiInvokerinvokeN Invokerjava at comdatastaxossdriverinternalcoreosNativeLibCLoaderLibCjnrffi gettimeofdayUnknown Source at comdatastaxossdriverinternalcoreosNativecurrentTimeMicrosNativejava at comdatastaxossdriverinternalcoretimeNativeClockfetchTimeMicrosNativeClockjava at comdatastaxossdriverinternalcoretimeNativeClockinitNativeClockjava at comdatastaxossdriverinternalcoretimeClockgetInstanceClockjava at comdatastaxossdriverinternalcoretimeMonotonicTimestampGeneratorbuildClockMonotonicTimestampGeneratorjava at comdatastaxossdriverinternalcoretimeMonotonicTimestampGeneratorinitMonotonicTimestampGeneratorjava at comdatastaxossdriverinternalcoretimeAtomicTimestampGeneratorinitAtomicTimestampGeneratorjava at javalangreflectConstructornewInstanceConstructorjava at comdatastaxossdriverinternalcoreutilReflectionbuildFromConfigReflectionjava more Im running openjdk version OpenJDK Runtime Environment GraalVM CE build jvmci b OpenJDK Bit Server VM GraalVM CE build jvmci b mixed mode sharing Given that JNI is in the stacktrace at comoraclesvmjniaccessJNINativeLinkagegetOrFindEntryPointJNINativeLinkagejava and because I was hitting some other issues with reflection I did run the dynamic analysis agent using agentlibnativeimageagentconfigoutputdir and pointed to the files in my image build HReflectionConfigurationFilesreflectionconfigreflectconfigjson HJNI HJNIConfigurationFilesreflectionconfigjniconfigjson But Im still hitting the error any ideas would be appreciated Recently with Quarkus I was tasked to debug a problem that manifested itself like this Fatal error comoraclegraalpointstoutilAnalysisErrorParsingError Error encountered while parsing comoraclesvmreflectClassLoaderdefineClassc c b d dc ca eb d b ac c dcb invokejavalangObject javalangObject Parsing context parsing javalangreflectMethodinvokeMethodjava parsing javaxenterpriseutilAnnotationLiteralinvokeAnnotationLiteraljava parsing javaxenterpriseutilAnnotationLiteralgetMemberValueAnnotationLiteraljava parsing javaxenterpriseutilAnnotationLiteralhashCodeAnnotationLiteraljava parsing javautilconcurrentCopyOnWriteArrayListhashCodeCopyOnWriteArrayListjava parsing orggraalvmcollectionsEconomicMapImplgetHashIndexEconomicMapImpljava parsing orggraalvmcollectionsEconomicMapImplputHashEntryEconomicMapImpljava parsing orggraalvmcollectionsEconomicMapImplputEconomicMapImpljava parsing orggraalvmcollectionsEconomicMapputAllEconomicMapjava parsing orggraalvmcollectionsEconomicMapImplinitEconomicMapImpljava parsing orggraalvmcollectionsEconomicMapImplcreateEconomicMapImpljava parsing orggraalvmcollectionsEconomicMapcreateEconomicMapjava parsing orggraalvmcompileroptionsModifiableOptionValuesupdateModifiableOptionValuesjava parsing comoraclesvmcoreoptionRuntimeOptionParserparseRuntimeOptionParserjava parsing comoraclesvmcoreoptionRuntimeOptionParserparseAndConsumeAllOptionsRuntimeOptionParserjava parsing comoraclesvmjnifunctionsJNIInvocationInterfaceExportsJNICreateJavaVMJNIInvocationInterfacejava parsing comoraclesvmcorecodeIsolateEnterStubJNIInvocationInterfaceExportsJNICreateJavaVM df e ea eb ed b c a bbc da e cc adgenerated at comoraclegraalpointstoutilAnalysisErrorparsingErrorAnalysisErrorjava at comoraclegraalpointstoflowMethodTypeFlowdoParseMethodTypeFlowjava at comoraclegraalpointstoflowMethodTypeFlowensureParsedMethodTypeFlowjava at comoraclegraalpointstoflowMethodTypeFlowaddContextMethodTypeFlowjava at comoraclegraalpointstoDefaultAnalysisPolicyDefaultVirtualInvokeTypeFlowonObservedUpdateDefaultAnalysisPolicyjava at comoraclegraalpointstoflowTypeFlownotifyObserversTypeFlowjava at comoraclegraalpointstoflowTypeFlowupdateTypeFlowjava at comoraclegraalpointstoBigBang runBigBangjava at comoraclegraalpointstoutilCompletionExecutorlambdaexecute CompletionExecutorjava at javautilconcurrentForkJoinTaskRunnableExecuteActionexecForkJoinTaskjava at javautilconcurrentForkJoinTaskdoExecForkJoinTaskjava at javautilconcurrentForkJoinPoolWorkQueuerunTaskForkJoinPooljava at javautilconcurrentForkJoinPoolrunWorkerForkJoinPooljava at javautilconcurrentForkJoinWorkerThreadrunForkJoinWorkerThreadjava Caused by comoraclesvmhostedsubstituteDeletedElementException Unsupported method javalangClassLoaderdefineClassString byte int int is reachable The declaring class of this element has been substituted but this element is not present in the substitution class To diagnose the issue you can add the option reportunsupportedelementsatruntime The unsupported element is then reported at run time when it is accessed the first time at comoraclesvmhostedsubstituteAnnotationSubstitutionProcessorlookupAnnotationSubstitutionProcessorjava at comoraclegraalpointstoinfrastructureSubstitutionProcessorChainedSubstitutionProcessorlookupSubstitutionProcessorjava at comoraclegraalpointstoinfrastructureSubstitutionProcessorChainedSubstitutionProcessorlookupSubstitutionProcessorjava at comoraclegraalpointstometaAnalysisUniverselookupAllowUnresolvedAnalysisUniversejava at comoraclegraalpointstometaAnalysisUniverselookupAnalysisUniversejava at comoraclegraalpointstometaAnalysisUniverselookupAnalysisUniversejava at comoraclegraalpointstoinfrastructureUniverseMetaAccesslookupJavaMethodUniverseMetaAccessjava at comoraclegraalpointstometaAnalysisMetaAccesslookupJavaMethodAnalysisMetaAccessjava at comoraclegraalpointstometaAnalysisMetaAccesslookupJavaMethodAnalysisMetaAccessjava at comoraclesvmreflecthostedReflectionSubstitutionTypeReflectiveInvokeMethodbuildGraphReflectionSubstitutionTypejava at comoraclegraalpointstometaAnalysisMethodbuildGraphAnalysisMethodjava at comoraclegraalpointstoflowMethodTypeFlowBuilderparseMethodTypeFlowBuilderjava at comoraclegraalpointstoflowMethodTypeFlowBuilderapplyMethodTypeFlowBuilderjava at comoraclegraalpointstoflowMethodTypeFlowdoParseMethodTypeFlowjava more Immediately the team was confused because it is not clear that the generated class comoraclesvmreflectClassLoaderdefineClassc c b d dc ca eb d b ac c dcb is a generated implementation of a Method invoker So realizing that is step one The next problem was that its nearly impossible to know what was acquiring the Method object corresponding to the method in question The call tree gives no clues because it only shows calls to eg ClassgetDeclaredMethods which of course happen all over the place An exhaustive search of each call site is not practical The solution therefore was to attach a debugger to the nativeimage process with breakpoints set at every point in the JDK which can produce a Method object The breakpoint was configured to trigger only on the class and where possible method in question Then the call stack was inspected at each hit to acquire the list of possibilities excluding the few calls from the SVM classes themselves The interesting results were found by examining local variables in comoraclesvmhostedsnippetsReflectionPluginsprocessGetMethod which is also very nonobvious Finally substitutions are tried for each site with rebuilds to see if the problem was solved This is definitely not optimal The call didnt appear on the call graph and theres no heap analysis available either It would be nice if there were some better way to debug situations like these I tried to build the bundle jar built in the project jerseyhttp jettyconnector using mvn clean verify DskipTests DskipDepCheck command First I tried without any option nativeimage jar jerseyhttp jettyconnectorjerseyhttp jettybundletargetjerseyhttp jettybundlebundlejar It failed and I got the following error Caused by comoraclesvmhostedsubstituteDeletedElementException Unsupported method javalangClassLoaderdefineClassString byte int int ProtectionDomain is reachable The declaring class of this element has been substituted but this element is not present in the substitution class To diagnose the issue you can add the option reportunsupportedelementsatruntime The unsupported element is then reported at run time when it is accessed the first time So I tried with reportunsupportedelementsatruntime I got the following warnings Warning Image jerseyhttp jettybundle bundle is a fallback image that requires a JDK for execution use nofallback to suppress fallback image generation Error comoraclegraalpointstoconstraintsUnresolvedElementException Discovered unresolved method during parsing orgslf jimplStaticMarkerBindergetSingleton To diagnose the issue you can use the allowincompleteclasspath option The missing method is then reported at run time when it is accessed the first time Then with allowincompleteclasspath The build succeed however when I try to run the native bundle it fails with the following error jerseyhttp jettybundle bundle Exception in thread main javalangAssertionError Spi class not found at javasecuritySecuritygetSpiClassSecurityjava at javasecuritySecuritygetImplSecurityjava at javasecurityKeyStoregetInstanceKeyStorejava at comgithubnhenneauxjerseyhttp jettybundleJettyServerTlsSecurityConfigurationgetKeyStoreJettyServerjava at comgithubnhenneauxjerseyhttp jettybundleBootstrapmainBootstrapjava Caused by javalangClassNotFoundException javasecurityKeyStoreSpi at comoraclesvmcorehubClassForNameSupportforNameClassForNameSupportjava at javalangClassforNameDynamicHubjava at javasecuritySecuritygetSpiClassSecurityjava more Do you have any idea why I got the error javalangClassNotFoundException javasecurityKeyStoreSpi Thanks for your help The mx gate under Windows needs some a lot of work It looks like it is flagging the lineendings for every single line in the source which makes it difficult to determine what else might be going on If anyone would like to help me interpret some of this Travis CI build log and point me in some directions then Id be happy to piddle away at it Thank you BUILD LOG log txt The ICCProfile under sunjava dcmmprofiles like sRGBpf are not loaded at compile time setting HIncludeResources pf HIncludeResourcespf has no effect and HLogregisterResource shows they are not loaded Ive set the following in my maven script argaddopensarg argjavadesktopsunjava dcmmprofilesartifactIdarg argaddopensarg argjavadesktopsunjava dcmmprofilesALLUNNAMEDarg and tested with the following code BUGFIX Starting Gluon VM BugTester TEST getResource BEGIN BugTester TEST ProfileclassgetResourcesRGBpf returns url null BugTester TEST ProfileclassgetResourceprofilessRGBpf returns url null BugTester TEST BugTesterclassgetResourcesRGBpf returns url null BugTester TEST BugTesterclassgetResourceprofilessRGBpf returns url null BugTester TEST ProfileclassgetResourceAsStreamsRGBpf returns s null BugTester TEST ProfileclassgetResourceAsStreamprofilessRGBpf returns s null BugTester TEST BugTesterclassgetResourceAsStreamsRGBpf returns s null BugTester TEST BugTesterclassgetResourceAsStreamprofilessRGBpf returns s null BugTester TEST BugTesterclassgetResourcesunjava dcmmprofilessRGBpf returns url null BugTester TEST BugTesterclassgetResourceAsStreamsunjava dcmmprofilessRGBpf returns s null BugTester TEST ClassLoadergetPlatformClassLoadergetResourcesunjava dcmmprofilessRGBpf returns url null BugTester TEST ClassLoadergetPlatformClassLoadergetResourcesRGBpf returns url null BugTester TEST ClassLoadergetSystemClassLoadergetResourcesunjava dcmmprofilessRGBpf returns url null BugTester TEST ClassLoadergetSystemClassLoadergetResourcesRGBpf returns url null BugTester TEST ClassLoadergetSystemResourcesunjava dcmmprofilessRGBpf returns url null BugTester TEST ClassLoadergetSystemResourcesRGBpf returns url null BugTester TEST ClassLoadergetSystemResourceAsStreamsRGBpf returns s null BugTester TEST ClassLoadergetSystemResourceAsStreamsunjava dcmmprofilessRGBpf returns s null BugTester TEST getResource END BUGFIX Started Gluon VM The only workarround I could find is to include the profiles under sunjava dcmmprofiles into my project directly ATM our GraalVM Windows release is special There is no gu tool and nativeimage is not provided as proper addon Instead nativeimage is somewhat part of the default but unfortunately only deployed as cmdscript that calls the driver as java application instead of having a real nativeimageexe I try to create an extention for cxf on quarkus project and I have an issue with substitution with this keyword I found no doc about such a case and it seems odd that this is treated as a field because I cannot substitute it dispatch function have the following signature public HttpServerExchange dispatchHttpHandler handler class UndertowHTTPHandler implements HttpHandler and I want to use this keyword in substitution but I get comoraclesvmcoreutilUserErrorUserException One of Delete Alias or Inject must be used final ioquarkuscxfruntimegraalSubstitutions ioquarkuscxfruntimegraalSubstitutionsSubstituteUndertowHTTPDestinationthis at comoraclesvmcoreutilUserErrorabortUserErrorjava at comoraclesvmcoreutilUserErrorguaranteeUserErrorjava at comoraclesvmhostedsubstituteAnnotationSubstitutionProcessorhandleFieldInAliasClassAnnotationSubstitutionProcessorjava at comoraclesvmhostedsubstituteAnnotationSubstitutionProcessorhandleAliasClassAnnotationSubstitutionProcessorjava at comoraclesvmhostedsubstituteAnnotationSubstitutionProcessorhandleClassAnnotationSubstitutionProcessorjava at comoraclesvmhostedsubstituteAnnotationSubstitutionProcessorinitAnnotationSubstitutionProcessorjava In order that this respect the interface I have add implements HttpHandler So this can be used Here is the substitution I use TargetClassclassName orgapachecxftransporthttpundertowUndertowHTTPHandler public final class SubstituteUndertowHTTPHandler implements HttpHandler Substitute public void handleRequestHttpServerExchange undertowExchange throws Exception try perform blocking operation on exchange if undertowExchangeisInIoThread undertowExchangedispatchthis return Original ExecutableparseParameterAnnotations can access not supported method javalangClassgetConstantPool And ExecutableparseParameterAnnotations could be reached by reflection calls This patch can fix issue 