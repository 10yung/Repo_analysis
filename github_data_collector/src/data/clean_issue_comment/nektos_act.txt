It didnt work with the new yaml syntax When running act f githubworkflowsmainyml l I got Error unable to parse Line illegal char Just to keep track of the work here Thanks for you awesome tool I have a project which creates local so on compilation These are never git commited naturally They appear to be gitignored because of a system default gitignore It would be good if act could similarly respect any local or globaldefault gitignores Otherwise this can lead to thorny problems in this case a bad ELF header Perhaps act should simply commit whatever is on the working tree as a first step maybe in a tempdir and run from there By relying on the local git addcommit wed automatically respect whatever gitignore action was in place it appears that even when the working tree is unclean act sets the GITHUBSHA env var to whatever the last git commit on that branch was This seems friendly but can lead to some pretty unexpected behavior because AFAIK act actually runs with the unclean working tree so the GITHUBSHA is actually kind of wrong In any kind of situation where youre referencing something via GITHUBSHA this can get weird eg I am FROMing Docker images in the version of the GITHUBSHA I think it would be safer behavior to either dont set a GITHUBSHA when the working tree is unclean do not allow act to run on an unclean working tree safest of them all maybe because thats how github actions actually works it never runs on unclean trees This simple tuning can lead to at least gain in action execution time up to twice faster than without it go if runtimeGOOS darwin add delegated at the end of the workspace volume string see act interprets Branch names the master portion in uses abcdefmaster as case insensitive which differs from GitHub This results in different behavior between local and GitHub environment Any RepositoryAction should be fine for testing but for the sake of completeness Create an action as described in this READMEmd run the action success change the case in uses jakobgalbavygithubactionsslackmessagemaster to Master and run the action succeeds locally fails on GitHub it appears that currently act cannot deal with multiworkflow setups ie workflow statements with on push though these are supported by GitHub Actions Heres an unfortunately not minimal example workflow Build and Check on push resolves Check Package Build Website workflow Deploy on push resolves Upload Cache Code Coverage Deploy Website action GCP Authenticate uses actionsgcloudauth d abbbe c d d bc dc bcb b secrets GCLOUDAUTH action Download Cache uses actionsgcloudclid d b dc e bb a cfb ce b runs gsutil m cp r gsghactionscachelibtargz githubhome needs GCP Authenticate action Decompress Cache uses actionsbinsh b a ecdca eddfdc b aab dc ea runs tar zxf githubhomelibtargz directory githubhome needs Download Cache action Install Dependencies uses actionsinstalldeps needs Decompress Cache action Compress Cache uses actionsbinsh b a ecdca eddfdc b aab dc ea runs tar zcf libtargz directory githubhome lib needs Install Dependencies action Upload Cache uses actionsgcloudclid d b dc e bb a cfb ce b runs gsutil m cp libtargz gsghactionscache needs Compress Cache Filter Not Act action Build Package uses actionsbuild needs Install Dependencies action Filter Not Act uses actionsbinfilter c b f e ea ea df b fabf cd da args not actor nektosact action Code Coverage uses actionscovr needs Check Package Filter Not Act secrets CODECOVTOKEN action Check Package uses actionscheck needs Build Package action Install Package uses actionsinstall needs Build Package action Build Website uses actionspkgdown needs Install Package action Master Branch uses actionsbinfilterc d c dfe ef dbd needs Check Package Build Website args branch master action Deploy Website uses maxheld ghpagesv env BUILDDIR docs secrets GHPAT needs Master Branch Filter Not Act On act this fails both workflows pretty soon with error exit with NEUTRAL even though only one of the workflows even includes any kind of filter action This presumably imperfect parsing of the mainworkflow is also reflected in act l output EVENT push GCP Authenticate Filter Not Act Download Cache Decompress Cache Install Dependencies Build Package Compress Cache Install Package Upload Cache Check Package Build Website Code Coverage Master Branch Deploy Website EVENT push Filter Not Act GCP Authenticate Download Cache Decompress Cache Install Dependencies Compress Cache Build Package Install Package Check Package Upload Cache Build Website Code Coverage Master Branch Deploy Website Apparently act here mushes the two workflows together Steps to reproduce Use some workflow with actions one local several remote like so workflow Test Action on push resolves Shellcheck Test dependency installation action Shellcheck uses actionsbinshellcheck b c f b bf d a c d args sh action Install Dependencies uses action Test dependency installation uses maxheld ghactionscheckmaster args testthattestdirpath teststestthat stoponfailure TRUE needs Install Dependencies run act Everything works as intended git commit git push to the third action maxheld ghactionscheckmaster run act again Observed behavior act uses the old now outdated version of maxheld ghactionscheckmaster and does not float to the latest commit of master Expected behavior act should always use the latest commit to master this is how github actions behaves Fix Hardcoding a commit maxheld ghactionscheck ea d fd d cd cb solves the problem but defeats the purpose Hunch maybe a caching problem You can use short SHAs like this action run tests uses actionsdockercli cf args build This works fine in Github but it does not using act run tests Unable to resolve cf reference not found Error reference not found 