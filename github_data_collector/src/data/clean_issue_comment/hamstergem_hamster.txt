On Hamsters Hamsterfrom documentation theres no mention that Struct will be converted to a hash and indeed it is really strange ruby class SomeClass Structnewfoo bar end obj SomeClassnew irbmain Hamsterfromobj obj HamsterHash obj HamsterHash bar foo The problem is that SomeClass is not a hash it is a struct so this will fail ruby a obj SomeClassnew b obj SomeClassnew HamstertorubyHamsterfroma b false While these are true a b HamstertorubyHamsterfroma HamstertorubyHamsterfromb The problem is that Hamsterfrom loses the struct information so its impossible to get back the original object and the documentation doesnt mention anything Fixes I was working on a project then Ive found a case when a b is true but b a is false Minimum code that I could find the error ruby require hamster require bigdecimal a Hamsterfrom items amount quantity b Hamsterfrom items amount BigDecimal quantity a b false b a true When using a SortedSet there is a method called uniqbycomparator It assumes that items with the same sort position a b are actually the same object Thats not true This causes SortedSets with nonunique sort orders to not work correctly Imagine a comparator of size where we are sorting on the length of some class If the size is ever the same they will be considered equal by Hamster For now Im working around this by adding objectid to my comparator but thats definitely code smell def other selfpriority selfobjectid otherpriority otherobjectid end Hope this is an ok place to ask didnt see anything sending me anywhere else in the README or FAQ Is there a reason difference aliased as for Rubys Array is not implemented for Vector andor List Recommended alternative work around Just taking the lib for spin so Im not yet familiar with the implementation details Seems great so far though thanks Also FYI the link to the List API docs is broken This is a followup to The Ruby core issue that gave rise to that ticket has been patched since last August Its probably still worth discussing whether any releases missing the patches should be supported In addition to reverting the original patch for this aims to remove unneeded block parameters throughout My benchmark results on benchhasheachbenchrb are too variable to say anything too conclusive Still I modified the file with bwarmup btime and here are my results They at least point to this making a measurable difference On branch useyield Warming up each small k i ms each medium i ms each large i ms Calculating each small k is M each medium k is k each large is Warming up each small k i ms each medium i ms each large i ms Calculating each small M is M each medium k is k each large is Switched to branch core Warming up each small k i ms each medium i ms each large i ms Calculating each small k is M each medium k is k each large is Warming up each small k i ms each medium i ms each large i ms Calculating each small k is M each medium k is k each large is It seems that using a Rope data structure is efficient for string operations Maybe holding string parts in a HamsterVector achieves the same treelike idea Before starting any implementation I started this issue as a place for discussion A new paper on HAMTs by Michael J Steindorfer and Jurgen J Vinju shows how to make HAMT implementations lean meaning they consume less memory and efficient meaning speedier performance The paper claims to make iteration and equality checks about faster See which links the paper Design the HAMT using this paper 