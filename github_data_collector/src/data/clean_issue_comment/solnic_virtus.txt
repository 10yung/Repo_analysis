I ran into the documented Boolean issue and tried the workaround which didnt help I discovered I was able to make it work by using VirtusAttributeBoolean rather than AxiomTypesBoolean Setting the default value to a hash or empty array or any other mutable object can cause mutabilitysideeffect problems to be introduced These are very hard and timeconsuming to track down For example u Usernew u info something u Usernew u info something In the above example one would expect u info something to return nil however because the default value Hash is shared between all users u info something returns Using the lambda means that a new Hash will be created each time a new user is created avoiding the above sideeffect issue u Usernew u info something u Usernew u info something nil ruby require virtus class SomeRandomClass end class User include Virtusmodelstrict true attribute someranclass SomeRandomClass end Usernewsomeranclass no error Usernew no error Usernewsomeranclass SomeRandomClassnew should be the only one that doesnt cause an error Hi I cant find if the format for parsing dates can be configured somewhere Is it possible to force a given format when parsing dates It would be nice to have a coercion like FiexdWiththat you could inform parameters like width Integer alignment left right padding String Example ruby class Register include Virtuamodel attribute somefield FixedWidth width alignment right padding end myregister Registernew myregistersomefield abc puts myregistersomefield abc I tried to navigate through the classes to find where to make this via Custom Coercion but couldnt come up with an simple implementation You someone could point me the direction I can try to put some effort and code into this Im running into an error specifically with this line of code In Rails and below calling tohash on parameters was easy and returned the expected hash as follows ruby HashtryconvertActionControllerParametersnewfoo bar foobar However this behavior changed in Rails and started to raise an error ruby HashtryconvertActionControllerParametersnewfoo bar ActionControllerUnfilteredParameters unable to convert unpermitted parameters to hash Therefore I think Virtus needs to be slightly more intelligent about how it coerces to a hash I have gone ahead and implemented a PR that should fix the issue I am seeing as well as a test to replicate the issue and verify its fix in Since parameters in Rails no longer sub class from Hash and blow up when you try to call tohash on them when they are not permitted the coerce method in Virtus was no longer working Since the hash here is not mass assigned but instead only permits known attributes it is safe to call tounsafehash if it is defined on the attributes If not we fall back to the previous behavior This also adds specs to capture the bahavior I was seeing on Rails I have a Child class of VirtusAttribute called SortedComponents Which looks like this class SortedComponents VirtusAttribute def coercecomponents components componentssort a b a description b description components nestcomponentscomponents end def selfnestcomponentscomponents componentsdeleteif do c AZ c description true false end end end However Im not able to call nestcomponents in coerce and get the error appmodelsSortedComponentsrb in coerce undefined method nestcomponents for SortedComponents x fcd ea NoMethodError How can I call methods from coerce in my VirtusAttribute because not being able to break up some of the steps in coerce into seperate methods will make coerce huge