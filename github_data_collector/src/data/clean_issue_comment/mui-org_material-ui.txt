Dependencies are starting to bump their required node version and since x has reached its end of life x is now active LTS We still officially support x but to keep our test environment fast and safe were switching to x as should everybody else If we start seeing regressions due to features being released that require x we need to rethink our testing environment Azure pipeline was already using node Netlify is controlled via environment variables Bumps jsdom from to details summaryRelease notessummary pemSourced from a href releasesaemp blockquote h Version h pFor this release wed like to welcome a href to the core team Among other work hes driven the heroic effort of constructor prototype and reform in jsdom and its dependencies over the last few months to allow us to move away from shared constructors and prototypes and set the groundwork for custom elements support a href soonap pBreaking changesp ul liNode v is now the minimum supported versionli liThe codedomrunVMScriptcode API has been replaced with the more general codedomgetInternalVMContextcode APIli liEach jsdom codeWindowcode now creates new instances of all the web platform globals That is our old a href constructor and prototypesa caveat is no longer in playli liEach jsdom codeWindowcode now exposes all JavaScriptspecdefined globals uniformly When coderunScriptscode is disabled it exposes them as aliases of the ones from the outer Nodejs environment Whereas when coderunScriptscode is enabled it exposes fresh copies of each global from the new scripting environment Previously a few typed array classes would always be aliased and with coderunScriptscode disabled the other classes would not be exposed at allli ul pOther changesp ul liAdded the codeAbstractRangecode codeRangecode codeStaticRangecode codeSelectioncode and codewindowgetSelectioncode APIsli liAdded working constructors for codeCommentcode codeTextcode and codeDocumentFragmentcodeli liAdded codevalueAsDatecode codevalueAsNumbercode codestepUpcode and codestepDowncode to code ltinput gtcode elements kraynelli liAdded codewindoworigincodeli liRemoved codedocumentorigincodeli liFixed code lttemplate gtcode to work correctly inside XML documentsli liFixed some bugs which would cause jsdom to choose the wrong character encoding because it was failing to detect code ltmeta charset gtcode or code ltmeta httpequiv quotcharset quot gtcode elementsli liFixed codeinputtypecode to default to code quottext quotcode connormeredithli liFixed incorrect validation errors for code ltinput gtcode with fractional values for their codestep quot quotcode attribute kontomondoli liFixed incorrect validation errors on readonly code ltinput gtcode elementsli liFixed code ltinput type quotemail quot multiple pattern quot quot gtcode validationli liFixed codefileReaderreadAsDataURLcode to always base encode the result ytetsuroli liFixed inserting code ltimg gtcode elements into documents without a browsing context to no longer crash when the codecanvascode package is installedli liFixed a memory leak when using codewindowsetTimeoutcode or codewindowsetIntervalcodeli liImproved the performance of codegetComputedStylecode eps lonli ul blockquote details details summaryChangelogsummary pemSourced from a href changelogaemp blockquote h h pFor this release wed like to welcome a href to the core team Among other work hes driven the heroic effort of constructor prototype and reform in jsdom and its dependencies over the last few months to allow us to move away from shared constructors and prototypes and set the groundwork for custom elements support a href soonap pBreaking changesp ul liNode v is now the minimum supported versionli liThe codedomrunVMScriptcode API has been replaced with the more general codedomgetInternalVMContextcode APIli liEach jsdom codeWindowcode now creates new instances of all the web platform globals That is our old a href constructor and prototypesa caveat is no longer in playli liEach jsdom codeWindowcode now exposes all JavaScriptspecdefined globals uniformly When coderunScriptscode is disabled it exposes them as aliases of the ones from the outer Nodejs environment Whereas when coderunScriptscode is enabled it exposes fresh copies of each global from the new scripting environment Previously a few typed array classes would always be aliased and with coderunScriptscode disabled the other classes would not be exposed at allli ul pOther changesp ul liAdded the codeAbstractRangecode codeRangecode codeStaticRangecode codeSelectioncode and codewindowgetSelectioncode APIsli liAdded working constructors for codeCommentcode codeTextcode and codeDocumentFragmentcodeli liAdded codevalueAsDatecode codevalueAsNumbercode codestepUpcode and codestepDowncode to code ltinput gtcode elements kraynelli liAdded codewindoworigincodeli liRemoved codedocumentorigincodeli liFixed code lttemplate gtcode to work correctly inside XML documentsli liFixed some bugs which would cause jsdom to choose the wrong character encoding because it was failing to detect code ltmeta charset gtcode or code ltmeta httpequiv quotcharset quot gtcode elementsli liFixed codeinputtypecode to default to code quottext quotcode connormeredithli liFixed incorrect validation errors for code ltinput gtcode with fractional values for their codestep quot quotcode attribute kontomondoli liFixed incorrect validation errors on readonly code ltinput gtcode elementsli liFixed code ltinput type quotemail quot multiple pattern quot quot gtcode validationli liFixed codefileReaderreadAsDataURLcode to always base encode the result ytetsuroli liFixed inserting code ltimg gtcode elements into documents without a browsing context to no longer crash when the codecanvascode package is installedli liFixed a memory leak when using codewindowsetTimeoutcode or codewindowsetIntervalcodeli liImproved the performance of codegetComputedStylecode eps lonli ul blockquote details details summaryCommitssummary ul lia href Version li lia href Remove documentorigin and add windoworiginli lia href Use mutability as a measure for valueMissing constraintli lia href Fix pattern constraint with ltinput typeemail multiple gtli lia href Check that ltinput pattern gt is validli lia href Update WPTli lia href Fix documentation on globals installed on windowli lia href Refactor XMLHttpRequest to use webidl jsli lia href Use high precision modulo for stepMismatchli lia href Update dependenciesli liAdditional commits viewable in a href viewali ul details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in the dependabotconfigyml file in this repo Update frequency Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details Resolves This pr makes a Snackbar show whenever a use copies code or links to the code Provide a general summary of the issue in the Title above Thank you very much for contributing to MaterialUI by creating an issue To avoid duplicate issues we ask you to check off the following list Checked checkbox should look like this x x The issue is present in the latest release x I have searched the issues of this repository and believe that this is not a duplicate Current Behavior Describe what happens instead of the expected behavior When the FormControl component is rendered with the disabledtrue prop the children Checkbox Radio and Switch components remains enabled Expected Behavior Describe what should happen All the children components of FormControl that use FormControlContext should be disabled if the FormControl components is disabled Steps to Reproduce Provide a link to a live example you can use codesandboxio and an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant which it most likely is This codesandboxio template may be a good starting point If youre using typescript a better starting point would be If YOU DO NOT take time to provide a codesandboxio reproduction should the COMMUNITY take time to help you This sandbox demonstrates the issue that appeared from v due to this pull request This sandbox clearly shows that everything was working correctly in v Context What are you trying to accomplish How has this issue affected you Providing context helps us come up with a solution that is most useful in the real world The SwitchBase component checks whether it has own disabled prop If it doesnt have it the disabled from FormControlContext is used please see source code The issue is that the Checkbox Radio and Switch components were configured to use the disabled prop set to false by default please see checkbox radio and switch changes Therefore the SwitchBase component never receives the disabledundefined prop which leads to nonusage of the disabled value from FormControlContext Your Environment Include as many relevant details about the environment with which you experienced the bug If you encounter issues with typescript please include version and tsconfig Tech Version MaterialUI v React v x I have followed at least the PR section of the contributing guide Updated babelcli to make use of when building the ESM version of the packages Thanks eps lon This enables treeshaking on all levels and simplifies the build script since we dont need to create a packagejson file in the subfolders anymore Even though we consider rd level imports private there is nothing stopping people from using them so they do This will benefit them with reduced bundle sizes For backwards compatability it still builds the esm folder which we can remove in v Seems like the createGenerateClassName function is specifically looking for classes with the prefix Mui while some generated classes are actually in the form of PrivateSwitchBase The result are a mix of classes with and without keys depending on if disableGlobal is true X The issue is present in the latest release X I have searched the issues of this repository and believe that this is not a duplicate Current Behavior classMuiButtonBaseroot MuiIconButtonroot PrivateSwitchBaseroot MuiCheckboxroot MuiCheckboxcolorPrimary MuiIconButtoncolorPrimary Expected Behavior classMuiButtonBaseroot MuiIconButtonroot PrivateSwitchBaseroot MuiCheckboxroot MuiCheckboxcolorPrimary MuiIconButtoncolorPrimary Steps to Reproduce Steps Go to the following link Inspect the switch button Notice the class names Even the MuiBox has a suffix key for some reason Context Disable randomly generated class keys in jest tests Turning off styles completely results in a bunch of Elevation not applied errors Also would still like the jest tests to have the generated class names however am trying to prevent the snapshot tests from thinking there are changes when they suffix key simply changes Your Environment Tech Version MaterialUI v React Fixes x I have searched the issues of this repository and believe that this is not a duplicate Summary Providing two base Codesandboxes one for javascript one for Typescript in the issue templates For example Fabricjs and Prosemirror already do it and it makes submitting a bug a pleasing process Motivation Everytime I wanted to report a bug in the library I had to create a Codesandbox from scratch This is problematic because it is not trivial to correctly setup a base Codesandbox ie it takes time and this is the least thing you want to do when you are angry because you discovered a bug in the library Moreover for reporting TypeScript bugs I cant even figure out how to setup a base Codesandbox everybody that wants to report a bug has to do the exact same thing again and again This is a big waste of time If you provide such base codesandboxes people will be much more inclined to attach repros to their bug reports but also and this is the more important will be much more inclined to submit the bugs they encounter For AutoComplete on Blur when multiple and freeSolo is set It will be nice that the value of the input field validate like when we hit Enter x I have searched the issues of this repository and believe that this is not a duplicate Summary On multiple and freeSolo on blur the value in the input is automatically validated Motivation When you have multiple input and one is auto complete the user expected that when he leave the filed the value is taking care of Provide a general summary of the issue in the Title above Thank you very much for contributing to MaterialUI by creating an issue To avoid duplicate issues we ask you to check off the following list Checked checkbox should look like this x x The issue is present in the latest release x I have searched the issues of this repository and believe that this is not a duplicate Current Behavior Describe what happens instead of the expected behavior Expected Behavior Describe what should happen Steps to Reproduce Provide a link to a live example you can use codesandboxio and an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant which it most likely is This codesandboxio template may be a good starting point If youre using typescript a better starting point would be If YOU DO NOT take time to provide a codesandboxio reproduction should the COMMUNITY take time to help you Steps Go to Change to dark theme Click on the input Choose a value and click on it Context What are you trying to accomplish How has this issue affected you Providing context helps us come up with a solution that is most useful in the real world Your Environment Include as many relevant details about the environment with which you experienced the bug If you encounter issues with typescript please include version and tsconfig Tech Version MaterialUI v Browser chrome 