This PR allows suture to be installed on Jruby platform else following error occurs ruby ruby v jruby c f Java HotSpotTM Bit Server VM b on b darwinx gem install suture Fetching sqlite gem Building native extensions This could take a while ERROR Error installing suture ERROR Failed to build gem native extension current directory Userszorasrvmgemsjruby gemssqlite extsqlite Userszorasrvmrubiesjruby binjruby r siteconf pky oorb extconfrb NotImplementedError C extensions are not supported top at Userszorasrvmrubiesjruby librubystdlibmkmfrb require at orgjrubyRubyKerneljava root at Userszorasrvmrubiesjruby librubystdlibrubygemscoreextkernelrequirerb top at Userszorasrvmrubiesjruby librubystdlibrubygemscoreextkernelrequirerb extconf failed exit code Gem files will remain installed in Userszorasrvmgemsjruby gemssqlite for inspection Results logged to Userszorasrvmgemsjruby extensionsuniversaljava sqlite gemmakeout Not sure if this is a bug but it could be depending on sutures philosophy Should production legacy code break while Im recording calls I had a separate sqlite client open to verify suture was recording while the app was running which doesnt seem unreasonable if I install this for a few days and want to see if it has captured enough information yet details summary Code summary ruby def currentcategory Suturecreatecurrentcategory old methodoldcurrentcategory args places currentplayer end def oldcurrentcategoryplace return Pop if place return Pop if place return Pop if place return Science if place return Science if place return Science if place return Sports if place return Sports if place return Sports if place return Rock end details details summary stack trace summary Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite statementrb in step database is locked SQLite BusyException from Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite statementrb in block in each from Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite statementrb in loop from Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite statementrb in each from Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite databaserb in toa from Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite databaserb in block in execute from Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite databaserb in prepare from Usersstevejacksonrvmgemsruby p triviagemssqlite libsqlite databaserb in execute from Usersstevejacksonrvmgemsruby p triviagemssuture libsuturewrapsqliterb in block in init from Usersstevejacksonrvmgemsruby p triviagemssuture libsuturewrapsqliterb in tap from Usersstevejacksonrvmgemsruby p triviagemssuture libsuturewrapsqliterb in init from Usersstevejacksonrvmgemsruby p triviagemssuture libsutureadapterdictaphonerb in initialize from Usersstevejacksonrvmgemsruby p triviagemssuture libsuturesurgeonobserverrb in new from Usersstevejacksonrvmgemsruby p triviagemssuture libsuturesurgeonobserverrb in operate from Usersstevejacksonrvmgemsruby p triviagemssuture libsuturecreateperformssurgeryrb in perform from Usersstevejacksonrvmgemsruby p triviagemssuture libsuturecreaterb in create from Usersstevejacksonprojectstriviarubylibuglytriviagamerb in currentcategory from Usersstevejacksonprojectstriviarubylibuglytriviagamerb in roll from bintrivia in main details Show a rails example that has a production postgres dump sets up a oneoff minitest rake task can exploratory test the dump to generate a suture DB and then run the verifications in a local test Empahasize that you dont have to commit your production databaseyou only need it long enough to get and verify each paththat this stuff should be transient Itll slow travis way down to keep it in the main build possible to make a secondary build for them An absolutely minimal little project that incorporates Suture and shows its API configuration off at multiple lifecycle stages how to do that at once is unclear to me right now Expand the safe test we currently have for gilded rose into a multistep walkthrough of using Suture against a pure function Itd be neat to identify a method you associate with a side effect like an httppost and then wrap it Still calling through but warning the user As for default registrations I suspect vcr or webmock might have some prior art on this from an HTTP perspective Would be good to have an API that could handle databasesocket connections as well 