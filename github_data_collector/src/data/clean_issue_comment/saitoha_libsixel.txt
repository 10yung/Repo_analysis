OS Slackware libsixel When trying to build the new release in Slackware the build fails this did not occur with make allrecursive make Entering directory tmpSBolibsixel Making all in include make Entering directory tmpSBolibsixel include make Nothing to be done for all make Leaving directory tmpSBolibsixel include Making all in src make Entering directory tmpSBolibsixel src Makefile depslibsixellaallocatorPlo No such file or directory Makefile depslibsixellachunkPlo No such file or directory Makefile depslibsixelladecoderPlo No such file or directory Makefile depslibsixelladitherPlo No such file or directory Makefile depslibsixellaencoderPlo No such file or directory Makefile depslibsixellaframePlo No such file or directory Makefile depslibsixellafromgifPlo No such file or directory Makefile depslibsixellafrompnmPlo No such file or directory Makefile depslibsixellafromsixelPlo No such file or directory Makefile depslibsixellaloaderPlo No such file or directory Makefile depslibsixellamallocstubPlo No such file or directory Makefile depslibsixellaoutputPlo No such file or directory Makefile depslibsixellapixelformatPlo No such file or directory Makefile depslibsixellaquantPlo No such file or directory Makefile depslibsixellascalePlo No such file or directory Makefile depslibsixellastatusPlo No such file or directory Makefile depslibsixellastbimagewritePlo No such file or directory Makefile depslibsixellatosixelPlo No such file or directory Makefile depslibsixellattyPlo No such file or directory Makefile depslibsixellawriterPlo No such file or directory Makefile depsteststestsPo No such file or directory make No rule to make target depsteststestsPo Stop make Leaving directory tmpSBolibsixel src Makefile recipe for target allrecursive failed make allrecursive Error make Leaving directory tmpSBolibsixel Makefile recipe for target all failed make all Error Full build log libsixellog This might be the issue find libsixel iname deps libsixel srcsrcdirdeps libsixel converterssrcdirdeps where srcdir is not expanding add LICENSE files to dist archive If a PNG file is sixelencoded with img sixel using argument e monochrome the first column of the output image is missing img sixel e imagepng imagesixel This also means that the actual width of the sixel image is therefore imagewidth Like I did for True Color older gist BiDirectional text gist Font shaping gist It will greatly help wider awareness and adoption among terminals and terminal programs So I asked the tmux people if they would be willing to add even a marginal amount of support for libsixel and they pretty much dismissed it out of hand So now Im thinking about forking tmux to add SIXEL compatibility Is there anyone here who could help with that Libquvi is a dependency if you want to stream video but there hasnt been any activity since This makes me want to believe that project is dead Im not sure what might replace it but surely theres something similar thats being maintained I honestly dont know enough about this stuff to provide a good substitute for it but I know the only way for me to install libquvi is building from source and has the disclaimer of having bugs I dont feel comfortable building a unstable release of a project thats no longer being supported So if you were able to figure out an alternative to allow video streaming I would at least be personally grateful If preference can be made Id rather it be a package that can be installed via repo instead of building from source and hunting down all the dependencies along with it I am using libsixel compiled from from git with xterm That works fine but the I option of img sixel so bit true color is producing some corrupted images I always assumed that xterm was the problem but then I noticed a similar issue when using sixel png to decode the output of img sixel Here is an example taken from in The command is img sixel I INjpg sixel png outpng out The generated PNG is a valid image but the palette is corrupted What I also noticed is that images with few colors are correctly rendered by the I option Here is the bash command I used to see the effect of changing the number of colors in the input image using ImageMagick and then display the effect of applying img sixel I sixel png while read p COLORS N do convert INjpg colors N Apng identify Apng img sixel I Apng sixel png Bpng convert Apng Bpng append Cpng display Cpng done Remark The original convert command can be very slow when using more than colors Using less than colors should be mostly fine but here is the output obtained using input colorsFirst the image produced why imagemagick for a palette of and then the output of sixel png c When encoding a ARGB image times in sequence then the output from the second call is wrong and differs from the first call Ive observed that sometimes the image data is corrupted after the first call as well but I cant reproduce the effect Olaf Screenshot both outputs screenshot Example Code C include stdlibh include stdioh include sixelh int sixelwritechar data int size void priv return fwritedata size stdout int mainint argc char argv sixeloutputt octx sixeldithert dctx unsigned char data int i int w int h int bpp int format SIXELPIXELFORMATARGB Create some arbitrary image data calloc bpp w h for i i bpp w h i data i x i x Initalize output and dither context sixeloutputnew octx sixelwrite sixeldithernew dctx sixelditherinitializedctx data w h format SIXELLARGEAUTO SIXELREPAUTO SIXELQUALITYAUTO The first call to sixelencode is OK sixelencodedata w h dctx octx Output is different than in previous call With an additional sixelditherinitialize both outputs are the same sixelencodedata w h dctx octx return I am stuck trying to figure out if there is a good way in the libsixel code to skip drawing sixels that contain the same pixels as the previously drawn frame This would in combination with orderedpositionally stable dithers which I have already implemented probably result in sizebandwidth savings for some uses like qemusdlvncvideo See for examples of similar size savings for GIF animations and for a branch with a commit adding positionally stable dithers and a commit starting to work on tracking frame deltas Maybe youd like to add mintty to your supporting terminal list on the libsixel project page Ive added a gnuplot screenshot to the mintty home page and Id like to mention some more examples of use cases but Im having some problems The gnuplot command shown in the screenshot produces a different image on another machine weird img sixel sometimes works cygwin on one machine sometimes it doesnt cygwin on the same machine cygwin on another machine sometimes it crashes eg with this image linie FFmpegSIXEL does not build for me after installing libsixel and the libquvidevel and nasm packages sometimes configure fails at pkgconfigquvi sometimes make fails Makefile testsMakefile No such file or directory I tried the libsixel examplesdrawing program in xterm but it just shows a white panel nothing happens when trying to interact and yes its xterm compileenabled with DEC locator mode confirmed manually If that worked I would consider to add DEC locator mode to mintty for pixelcoordinate interaction Couldnt find out how to build and test opengl Trying bitbucketorgarakikenw m configure error cannot guess build type you must specify one The mandel c example program does not produce working sixel output Thanks for further info and help 