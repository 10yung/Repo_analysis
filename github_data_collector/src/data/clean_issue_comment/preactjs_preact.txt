Im having issue with render replaceNode parameter the app breaks after I run render the second time with updated properties for the root component Unfortunately I could not isolate the problem the simple cases work as intended so the issue might well be in my code The first error is indeed in my code but it looks that its because something else is broken This works fine js renderhApp initialProps container setTimeout renderhApp updatedProps container This breaks js renderhApp initialProps container target setTimeout renderhApp updatedProps container target Ive found that this one actually works too js renderhApp initialProps container target setTimeout renderhApp updatedProps target Full code static page The variant does what I want so Im fine if this is an intended use but from the docs I had the impression that the right one is and that one breaks Sorry the examples have layers of other less then ideal code but I thought that it might be useful anyway Compiles and Brings suspense based progressive hydration Enables Suspense based hydration for preact CLI Swiping to open or close drawer dont work with preact only works swipe areas touch event In case of using react with same code drawer works properly reproduction sandbox swipe is not work in sandbox editor for reproduction please swipe from right in this page The cause of issue issue We are using Gatsbyjs and switched out React with Preact X Everything works fine except all the popover loose their positioning and open in the top let corner x y preact materialuicore materialuistyles As I havent found any information that would suggest that these wouldnt work with Preact This PR replaces the current devtools adapter with the one that is dynamically injected by the extension This leads to a stark size reduction of preactdebug wink Instead of just replacing the existing code in preactdebug this PR adds a preactdevtool subpackage The benefit of this is that it allows us to enable the devtools in production without bringing in the weight of preactdebug The new devtools adapter weights just B although that size will likely be smaller once bundled into the main package New features Attach devtools to production sites tada Record profiling times of a Preact component tree Tasks x Release new version of devtools and wait until its approved before merging this PR That way users have a smooth upgrade experience x Firefox x Chrome Screenshot from reimplemented Objectassign with a forloop However using a for loop is only roughly half as fast in every browser I tested today Which isnt surprising So utils should check for Objectassign and export that if available instead of the polyfill Our website has been using Preact for a while without any issues I recently started using preactdebug rather than preactdevtools but this started throwing a lot of these errors Following component has two or more children with the same key attribute This may cause glitches and misbehavior in rendering process Component div I understand the purpose of the error but sometimes the components it references eg div arent a rendered list nor do they have any key attributes For example this component which just had two standard DOM elements would give me a specific error for this componentamong lots of other errors for other sibling or parent components export const product return div classmyelement spanTopspan spanBottomspan div Im struggling to find the offending component as the error is ambiguous Thanks Hello I was looking at performance of updating large arrays of child components which led me to looking at this for loop here summarised with some pseudocode js oldVNode oldChildren i if oldVNode matches childVNode oldChildren i undefined else for j j oldChildrenLength j oldVNode oldChildren j if oldVNode matches childVNode oldChildren j undefined break oldVNode null If I understand this code correctly when Preact gets an array of children for each one it checks to see if there was a child already there with the same type and key at the same index in the old array and otherwise it does a linear search to see if any other components match This means that if every element changes this code is quadratic in the number of elements The problem is that every element or almost every element updating is actually very common at least Im suggesting having no evidence in array manipulations Some examples are Removing an element from the front of an array like in a scrollback buffer The user reordering a list by moving an element from near the start of a list to near the end Adding new things to the front of an array like in a news feed In these cases most of the elements are unchanged but a large amount of them will have shifted forward or backwards by in the array and so the loop above is quadratic I think a simple change might be just to change the loop slightly so theres a much better chance the loop finds the corresponding child earlier js for j j oldChildrenLength j const idx j i oldChildrenLength oldVNode oldChildren idx if oldVNode matches childVNode oldChildren idx undefined break oldVNode null This way the loop starts looking at i first but cycles around to all the elements in the array anyway so it speeds up those cases since for each it only needs to perform comparisons and falls back to the old quadratic behaviour otherwise This does make the loop slightly more complicated so might be a pessmisation in real use cases but again I dont really have any evidence of real usage patterns and any potential performance gains so Id just like to know if something like this was considered before Of course its possible to do away with possible quadratic time entirely by precomputing a lookup table ahead of time on the keys of oldChildren but Im more wary of this since it needs to allocate a hashmap and do lookups so in real use cases it could be much slower So Im getting the following error Test suite failed to run TypeError Cannot read property prototype of undefined import Adapter from enzymeadapterpreactpure consolelogEnzyme configure consolelogPreact Adapter configure adapter new Adapter at nodemodulespreactcompatdistcompatjs at Objectanonymous nodemodulespreactcompatdistcompatjs at Objectanonymous testsenzymesetupjs The versions i have are so preact preactrendertostring enzyme enzymeadapterpreactpure jest jestenzyme Jest config has the this moduleNameMapper djforthajaxes fpfetch rootDirtestsmocksdjforthajaxes fpfetch djforthgeolocationhelper rootDirtestsmocksdjforthgeolocationhelper djforthviewportdetectionfp rootDirtestsmocksdjforthviewportdetectionfp morsedigitali nhelper rootDirtestsmocksmorsedigitali nhelper jpgjpegpnggifeototfwebpsvgttfwoffwoff mp webmwavmp m aaacoga rootDirtestsmocksfileMockjs csslessscss rootDirtestsmocksstyleMockjs Enzyme set up like so import configure from enzyme import Adapter from enzymeadapterpreactpure configure adapter new Adapter The application works fine and if I set my tests to use react instead of preact they run fine Is there something Im missing or is there a bug