Please expose a flag to build opensubdiv ONLY as a static library Currently both static and dynamics are built and we have to patch some files in order to do so and its a bit inconvenient Building as static should be exposed in the make process something like DBUILDSHAREDLIBSOFF would be perfect Thanks I get the following stream of errors when running the glViewer example on a Windows machine running a Nvidie GeForce M OpenGL Nvidia Driver with OSD built using VS OpenSubdiv Error Error compiling GLSL shader error C too few parameters in function call For a very long complicated reason I have to use Cuda v The default toolset vc in VS is not compatible with v therefore I am forced to use toolset vc which is the compiler that comes with VS but can also be installed into VS However there is a strange error Despite settings up the whole solution with toolset vc there seems to be some strange mismatch in the Cmake file used when building osdstaticgpu Building NVCC Device object opensubdivCMakeFilesosdstaticgpudirosdReleaseosdstaticgpugeneratedcudaKernelcuobj cudaKernelcu C Program Files x Microsoft Visual Studio Enterprise VC Tools MSVC include yvalscoreh fatal error C error STL Unexpected compiler version expected MSVC or newer ccbinCProgram Files x Microsoft Visual Studio EnterpriseVCToolsMSVC binHostx x CMake Error at osdstaticgpugeneratedcudaKernelcuobjReleasecmake message Error generating opensubdivCMakeFilesosdstaticgpudirosdReleaseosdstaticgpugeneratedcudaKernelcuobj As you can see despite ccbin using ie toolset vc for some reason a header file in vc is being checked I don t know if this is appropriate for OpenSubDiv but I thought this is at least a good place to ask I m wanting to add an option in Blender to be able to set edge creases from a bevel radius approximation and vise versa The main benefit of this is that you may wish to set similar curvatures with diverse geometries This would allow calculating the correct crease value for a given curvature for each edge Given the relative angle of the edge faces and the distance between the limit surface and the control edge at the edge midpoint calculating the bevel radius to approximate it is fairly straightforward Unfortunately I m having trouble determining the distance between the limit surface and the control edge from the edge crease and vise versa Is there a straightforward way to bidirectionally compute this relationship Is this already implemented in OSD Would it make a useful addition to OSD For comparison the rough algorithm to determine the approximate bevel radius from the distance i m looking for Take the unitlength normals of the two faces adjacent to the edge The arccosine of the dot product of these normals to get the angle between these surfaces Inscribe a circle with the desired bevel radius in the calculated angle The distance between the circle center and the angle minus the bevel radius is how far the surface lies from the control edge Given alpha alpha the angle computed above d d the distance from the limit surface to the control edge r r the bevel radius approximating the SS limit surface fracdr frac sin frac alpha fracdr frac sin frac alpha I realize there are all sorts of edge cases where this has divide by zero issues and other range errors and discontinuities and I think I neglected to say that one of the normals should have been negated but this is intended to give the general idea TLDR how do I compute the crease value from the distance between the control edge midpoint and the SS limit surface and vise versa Hi my apologies for bothering you with something so trivial Im getting a CMake configuration error trying to build OpenSubdiv on Windows The reason is Im trying to use Microsofts vcpkg to deal with the dependencies the idea is that I can easily build the necessary dependencies using vcpkg then I can simply point CMake to the right toolchain file provided by vcpkg so that CMake scripts for OpenSubdiv can easily find what they need as per vcpkg integration docs Works amazingly well apart from one little gotcha the main CMakeListstxt in OpenSubdiv defines a macro addexecutable macro which clashes with custom scripts used by vcpkg apparently when overriding a function implementation in CMake the original version gets renamed by adding the underscore prefix and it happens that vcpkg overrides addexecutable in order to do its thing that ends up clashing with the custom macro defined by OpenSubdiv I tried renaming the macro to osdaddexecutable and that fixed the issue for me I also had to edit CMakeListstxt in stringify I could create a vcpkg port of OpenSubdiv and patch it there but its such a tiny change and its probably not a good idea to name your macro addexecutable in the first place so I thought I should open a new issue Hey Ive got compilation complications when trying to compile dxPtexViewer for Windows Error LNK Reference to undefined symbol public void cdecl OpenSubdivv OsdCLD D VertexBufferUpdateDatafloat const intintstruct clcommandqueue UpdateDataCLD D VertexBufferOsdv OpenSubdivQEAAXPEBMHHPEAUclcommandqueueZ in Funktion public virtual void cdecl OpenSubdivv OsdMeshclass OpenSubdivv OsdCLD D VertexBufferclass OpenSubdivv OsdCLStencilTableclass OpenSubdivv OsdCLEvaluatorclass OpenSubdivv OsdD D PatchTableclass CLD D DeviceContextUpdateVaryingBufferfloat const intint UpdateVaryingBufferMeshVCLD D VertexBufferOsdv OpenSubdivVCLStencilTable VCLEvaluator VD D PatchTable VCLD D DeviceContextOsdv OpenSubdivUEAAXPEBMHHZ dxPtexViewer D Bibliotheken OpenSubdiv build examples dxPtexViewer dxPtexViewerobj Error LNK Reference to undefined symbol public struct clmem cdecl OpenSubdivv OsdCLD D VertexBufferBindCLBufferstruct clcommandqueue BindCLBufferCLD D VertexBufferOsdv OpenSubdivQEAAPEAUclmemPEAUclcommandqueueZ in Funktion public bool cdecl OpenSubdivv OsdCLEvaluatorEvalStencilsclass OpenSubdivv OsdCLD D VertexBufferclass OpenSubdivv OsdCLD D VertexBufferclass OpenSubdivv OsdCLStencilTableclass OpenSubdivv OsdCLD D VertexBuffer struct OpenSubdivv OsdBufferDescriptor const class OpenSubdivv OsdCLD D VertexBuffer struct OpenSubdivv OsdBufferDescriptor const class OpenSubdivv OsdCLStencilTable const unsigned intstruct clevent const struct clevent const EvalStencilsVCLD D VertexBufferOsdv OpenSubdivV VCLStencilTable CLEvaluatorOsdv OpenSubdivQEBANPEAVCLD D VertexBuffer AEBUBufferDescriptor PEBVCLStencilTable IPEBQEAUcleventPEAPEAU Z dxPtexViewer D Bibliotheken OpenSubdiv build examples dxPtexViewer dxPtexViewerobj Error LNK Reference to undefined symbol public struct ID D Buffer cdecl OpenSubdivv OsdCLD D VertexBufferBindD D Bufferstruct ID D DeviceContext BindD D BufferCLD D VertexBufferOsdv OpenSubdivQEAAPEAUID D BufferPEAUID D DeviceContextZ in Funktion public virtual struct ID D Buffer cdecl OpenSubdivv OsdMeshclass OpenSubdivv OsdCLD D VertexBufferclass OpenSubdivv OsdCLStencilTableclass OpenSubdivv OsdCLEvaluatorclass OpenSubdivv OsdD D PatchTableclass CLD D DeviceContextBindVaryingBuffervoid BindVaryingBufferMeshVCLD D VertexBufferOsdv OpenSubdivVCLStencilTable VCLEvaluator VD D PatchTable VCLD D DeviceContextOsdv OpenSubdivUEAAPEAUID D BufferXZ dxPtexViewer D Bibliotheken OpenSubdiv build examples dxPtexViewer dxPtexViewerobj Error LNK Reference to undefined symbol public static class OpenSubdivv OsdCLD D VertexBuffer cdecl OpenSubdivv OsdCLD D VertexBufferCreateintintstruct clcontext struct ID D DeviceContext CreateCLD D VertexBufferOsdv OpenSubdivSAPEAV HHPEAUclcontextPEAUID D DeviceContextZ in Funktion void cdecl createOsdMeshintint createOsdMeshYAXHHZ dxPtexViewer D Bibliotheken OpenSubdiv build examples dxPtexViewer dxPtexViewerobj Im not quite sure if its a general problem or just a wrong setup in my system Best Jonas I see theres no Vulkan backend but I believe it would be a great idea in many aspects Its an API with concepts targeted to current gfx hardware designs closer to Metal than to OpenGL Its available on Windows Linux and MacOS on MacOS you need the MoltenVK lib which works on top of Metal but I tried it and it works really great Performance of OpenSubdiv should be better than with OpenGL Gfx developers are progressively turning their eyes to Vulkan just to put an example even ImGui has a Vulkan backend Im going to start Vulkan backends for my projects in the upcoming months so Id like that OpenSubdiv will be supported on them too Python is mere months away from becoming a museum piece so time to move on ldopython docpatchtxt Just wondering if it is possible to build OpenSubDiv as a dynamic library DLL shared object SO I wish to use OpenSubDiv with another library which only allows interaction with a third party library via calling a load command for a dll As far as I understood libtbbmallocproxyso is used on Linux to replace so glibc functions To do so one must load such library before any other shared module by using LDPRELOAD I had a crash in glibcs free function when tbbmallocproxy was a shared module loaded by an application but not preloaded The crash immediately disappeared when I removed tbbmallocproxy from the loaded modules or when I preloaded it Currently FindTBBcmake adds tbbmallocproxy and tbbmallocproxydebug into TBBLIBRARIES Should it be fixed