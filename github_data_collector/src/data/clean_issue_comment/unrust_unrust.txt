If you try to use newer stdweb running the example gives errors of the form LinkError import object field jsuniform vf is not a Function You can avoid the problem by adding in the Cargotoml of unipad stdweb It seems there is no problem with stdweb but stdweb is broken In newer rustcs you get the following error error E multiple applicable items in scope a abe e c bdowncast srclibrs fn istype self bool selftypeid TypeIdofT multiple typeid found note candidate is defined in the trait Any a abe e c bdowncast srclibrs fn typeid self TypeId TypeIdofSelf help to disambiguate the method call write Anytypeid self instead note candidate is defined in the trait stdanyAny help to disambiguate the method call write stdanyAnytypeid self instead Upgrading nphysics d to at least would fix the issue newest is indices larger than you code can not fixed this problem How to create a custom imgui widget Currently the asset loading mechanism is a bit messy i would like to refactor it to use Warmy However Warmy currently do not support asyncloading this issue is for tracking its progress Related This is an exploratory issue wasmbindgen is making great progress and might be much faster than stdweb for passing data between Rust and js That might be very interesting especially for opengl buffers Maybe we could start investigating wasmbindgen on some lower module like unipad or unisnd Goal Standard Material Decide how the standard material and render pipelines works Sky Light Engine Refactoring Change Component from RcRefCellT to RcTClone which allow us to use Rcmakemut instead of borrowmut Add TextRenderer for support bitmap and truetype font maybe by RustType Able to us resizable fixed window Able to toggle fullscreen File Structures Use workspace instead of virtual crate Find a way to allow enduser to use the engine with standard assets Assets gltf support UnrustEditor Basic TBD Right now all future related codes is executing by an adhoc loop in AssetDatabase we should implement an future executor properly Reference The current game object transforms hierarchy are very not optimized We should store some kind of SOA in SceneTree and update it serially Shall we upgrade the minimum version to or maybe allow end user to override it