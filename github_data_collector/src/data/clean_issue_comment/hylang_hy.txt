Trivial yay or nay Previously the Hy files would be bytecode compiled before the compilers dependencies were installed In additon the revamped version properly propogates the optimization level and generally is a bit cleaner Fixes This solution wasnt nearly as bad I thought Please forgive minor formatting issues atm literally typed this whole thing out on a phone Right now if you run setuppy install without installing the dependencies first then the install will fail This is because all the Hy files are compiled before installation but in order to compile them the dependencies need to be present Unfortunately fixing this isnt particularly pretty As it stands setuppy doesnt install the dependencies at all thanks to this everopen setuptools bug Right now the setuptools install command does this Gathers the distribution information Builds a binary egg Asks easyinstall to install said egg which will also install dependencies In order to install the dependencies prior to compiling the Hy bytecode one of the following would need to be done in combination for working around the issue mentioned above Figure out some way to reliably iterate through the dependencies and install them first This would probably involve copying a bit of small code from easyinstallpy Get easyinstall to install only the dependencies first I like this approach but Im trying to figure out how to do it without calling egginfo which would involve going through the manifest twice on install Of course we could always just say the install command is broken This isnt as insane as it seems because right now the only reason youd be forced to use the install command is for distro packaging in which case the dependencies will already be installed In all other cases pip install is superior in every way Closes hylangcore recall that the twoweek rule doesnt apply for releases so I need at least two approvals to make this release Not sure this qualifies as a bug but with my python hat on Id expect let to be able to assign to n symbols returned as an ntuple from a function using pythons standard tuple unpacking idiom So you can do this hy let p returnstuple foo bar firstelement first p secondelement second p blah blah blah But you cant do this hy let firstelement secondelement returnstuple foo bar blah blah blah Hy fails to find hy modules when used in an embedded Python version given two files mainpy and foohy import hy import foo ModuleNotFoundError No module named foo Any chance support for this or pyinstaller can be added so we can create standalone Hy programs Youd think from the name or from the word traverse in its docstring that walk does some kind of recursive descent into its argument It doesnt It looks like the function was inspired by Clojure and by inspired I mean literally copies part of the docstring which could be a licensing issue even if the Eclipse Public License is compatible with our license we would need to keep track of the chain of copyright Heres the Clojure implementation defn walk Traverses form an arbitrary data structure inner and outer are functions Applies inner to each element of form building up a data structure of the same type then applies outer to the result Recognizes all Clojure data structures Consumes seqs as with doall added inner outer form cond list form outer apply list map inner form instance clojurelangIMapEntry form outer clojurelangMapEntrycreate inner key form inner val form seq form outer doall map inner form instance clojurelangIRecord form outer reduce fn r x conj r inner x form form coll form outer into empty form map inner form else outer form The Clojure implementation makes it clearer what walk is supposed to do walk inner outer x should work like outer map inner x except x can be of several types that arent supported by Clojures map and the return value of the map is reboxed in whatever collection type x started out as The Clojure implementation also makes it clear that the outer parameter is totally superfluous because walk inner outer x is equivalent to outer walk inner identity x Why does it exist Why did the programmer write outer in every branch instead of just wrapping the whole cond in outer Why would a programming language that enthusiastically promotes sideeffect free programming be named after closures There are some questions that man is not meant to know the answer to Heres the current Hy implementation defn walk inner outer form Traverses form an arbitrary data structure Applies inner to each element of form building up a data structure of the same type Applies outer to the result cond instance HyExpression form outer HyExpression map inner form or instance HySequence form list form type form outer HyExpression map inner form coll form walk inner outer list form True outer form Two bugs are now obvious in the first and third branches of the cond the return value is not reboxed and in the second branch outer is called on a HyExpression instead of the reboxed collection So here are the changes to walk that appear necessary Give it a better name Remove the outer parameter Rename the last argument form suggests it is an unevaluated expression of some kind which it might be but it doesnt have to be Fix the bugs Improve the docstring Ensure that it supports a wide variety of data structures In the current documentation the set of symbols I can reference in core hy is split into multiple distinct sections in the lefthandside index BuiltIns Hy Core Extra Modules Index and Contributor Modules Index The Hy Core is further subdivided into only one open at a time lists of core sequence and itertools functions Especially with the builtincore split this makes it more difficult than Id like to navigate the system I dont especially care if instance is a builtin or part of the core library or supplied by itertools when I just wanted to know what the function signature was OK that one is kind of a gimmie when it comes to figuring out which section but definitely things like filter or name are way harder to guess Anyway itd be great if there was a single index that listed all those items so that I could scan the list to find what Im looking for click it and get the right docs immediately In the Common Lisp HyperSpec CLHS this is their symbol index it only covers symbols as in functions global vars etc and not eg syntax discussion or anything like that I am not familiar enough with Python documentation generators to know howif this can be done and Im unfortunately not in a position for a couple of months due to USA related work issues to be able to contribute to make this happen Sorry fa raises NameError name a is not defined The AST walker in hycontribwalk doesnt see inside of an fstring so the let macro built on it will fail when the inlined code references a letbound variable hy unknown using CPythondefault on Darwin require hycontribwalk True let a fa Traceback most recent call last File stdin ddbd ca b de cc e b dcd line in module let a fa NameError name a is not defined unknown is master as of the time of submission