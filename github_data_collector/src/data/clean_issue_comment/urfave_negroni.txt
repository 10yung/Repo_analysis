I have a server that serves a dist folder on a GET request But Negroni panics on any and all POST PUT PATCH or DELETE requests I know this might not be negronis fault But running this on a docker instance on my local machine works like a charm while running on a server will return this PANIC runtime error invalid memory address or nil pointer dereference goroutine running githubcomcodegangstanegroniRecoveryServeHTTPfunc x fb xc ef xc a homeusergosrcgithubcomcodegangstanegronirecoverygo xe panic x de x fc usrlocalgosrcruntimepanicgo x b githubcomdirecotrydirectory modelsPdbMessage x aa xc b a x x x x x x xc homeusergosrcgithubcomdirecotrydirectory modelsmodelsgo xa githubcomdvlcdrdirectory modelsMessage xc b a x x x e x x x xc b a homeusergosrcgithubcomdirecotrydirectory modelsmodelsgo xd githubcomdirecotrydirectory controllersFetchAllDb x fb xc ef xc d x x x homeusergosrcgithubcomdirecotrydirectory controllerscontrollersgo xef githubcomjulienschmidthttprouterRouterServeHTTP xc x fb xc ef xc d homeusergosrcgithubcomjulienschmidthttprouterroutergo x e githubcomcodegangstanegroniWrapfunc x fb xc ef xc d xc homeusergosrcgithubcomcodegangstanegroninegronigo x d githubcomcodegangstanegroniHandlerFuncServeHTTP xc e x fb xc ef xc d xc homeusergosrcgithubcomcodegangstanegroninegronigo x e githubcomcodegangstanegronimiddlewareServeHTTP x f xc e xc x fb xc ef xc d homeusergosrcgithubcomcodegangstanegroninegronigo x c githubcomrscorsCorsServeHTTP xc x fb xc ef xc d xc homeusergosrcgithubcomrscorscorsgo x githubcomcodegangstanegronimiddlewareServeHTTP x e xc xc x fb xc ef xc d homeusergosrcgithubcomcodegangstanegroninegronigo x c githubcomcodegangstanegroniStaticServeHTTP xc c x fb xc ef xc d xc homeusergosrcgithubcomcodegangstanegronistaticgo x d githubcomcodegangstanegronimiddlewareServeHTTP x e xc c xc x fb xc ef xc d homeusergosrcgithubcomcodegangstanegroninegronigo x c githubcomcodegangstanegroniLoggerServeHTTP xc x fb xc ef xc d xc e homeusergosrcgithubcomcodegangstanegroniloggergo x c githubcomcodegangstanegronimiddlewareServeHTTP x e e xc xc x fb xc ef xc d homeusergosrcgithubcomcodegangstanegroninegronigo x c githubcomcodegangstanegroniRecoveryServeHTTP xc a x fb xc ef xc d xc c homeusergosrcgithubcomcodegangstanegronirecoverygo x githubcomcodegangstanegronimiddlewareServeHTTP x e xc a xc x fb xc ef xc d homeusergosrcgithubcomcodegangstanegroninegronigo x c githubcomcodegangstanegroniNegroniServeHTTP xc c f x a a xc ca xc d homeusergosrcgithubcomcodegangstanegroninegronigo xdd nethttpserverHandlerServeHTTP xc d x a a xc ca xc d usrlocalgosrcnethttpservergo xa nethttpconnserve xc a x a a xc ce usrlocalgosrcnethttpservergo x created by nethttpServerServe usrlocalgosrcnethttpservergo x f Is there any chance this could be happening from a lack of memory Or could anyone point me in a good direction to figuring out the problem The docs indicate that when overriding the default RecoveryFormatter its possible to set response headers Im currently attempting to set the ContentType header to applicationjson however it appears that doesnt stick and reverts to textplain charsetutf Example go package main import fmt nethttp githubcomurfavenegroni type PanicFormatter struct func t PanicFormatter FormatPanicErrorrw httpResponseWriter r httpRequest infos negroniPanicInformation rwHeaderSetContentType applicationjson fmtFprintfrw errors infosRecoveredPanic func main mux httpNewServeMux muxHandleFunc funcw httpResponseWriter req httpRequest panicoh no n negroniNew recovery negroniNewRecovery recoveryFormatter PanicFormatter nUserecovery nUseHandlermux httpListenAndServe n txt curl i localhost HTTP Internal Server Error Date Fri Nov GMT ContentLength ContentType textplain charsetutf erroroh no I am using Timeout middleware with negroni Sample code can be found here But when there is panic occurs in my http handlers negroni Recovery middleware doesnt work which means programs crashes If I disable my Timeout middleware program recovers as expected Is there I need to change in my Timeout middleware to work with Recovery middleware PrintStack should be set to false as default in negroniRecovery It should be set willingly to true only in a protected development environment but never in production Why does Negroni use both httpHandler and httpHandlerFunc in its API Its rather inconsistent func Newhandlers Handler Negroni compared with the third parameter in type Handler interface ServeHTTPrw httpResponseWriter r httpRequest next httpHandlerFunc Addresses I definitely think this should be implemented for Negroni Terminable middleware allows you to add code that runs AFTER the response has been fully served There is a subtle but crucial difference to adding code after nextrw r It is also related vaguely to an issue I highlighted here where in the the recovery middleware if you were to add a custom error handler the handler wastes time from clients perspective Further Reading The Recovery middleware couldnt recover a panic correctly after something was already written into the ResponseWriter So I wrote some tests against this issue and fixed it 