 The story started when I inspected this reline commit I wondered about so few changes in tests although there was a hard change to string encodings on the Windows backend So I tried to run the tests alone and got encoding related failures as expected After some back and forth I realized that the way how make testall is running makes the difference If its running with j it succeeds and without j it fails So make testall was joking in CI The two attached commits first fix the MinTTY detection that caused the difference in test results and then it fixes the encoding related failures caused by commit f ea b cac aec e c e af These were all deprecated in Ruby I noticed this default size while working on something else and it intrigued me It was set to in a a b be a bb d cf ed d a bb d However on ruby p there are much more than k frozen string right after boot ruby robjspace e p ObjectSpaceeachobjectStringselect s sfrozen ObjectSpacedumpsincludefstringtrueuniqcount The gain is likely very minor but its also a very simple change which I suppose dont require a redmine ticket mame what do you think lourensCarbonX srcrubyruby make benchmark ITEMconstants COMPARERUBYsrcrubytrunkruby OPTSv repeatcount repeatresult median usrlocalbinruby disablegems rrubygems Ibenchmarklib benchmarkbenchmarkdriverexebenchmarkdriver executablescomparerubyhomelourenssrcrubytrunkruby Iextcommon disablegem executablesbuiltrubyminiruby Ilib I Iextcommon toolrunrubyrb extoutext disablegems disablegem find benchmark maxdepth name constants o name constantsyml o name constantsrb sort v repeatcount repeatresult median compareruby ruby dev T Z master ac cf ff x linux builtruby ruby dev T Z optconstat d e d f x linux Calculating compareruby builtruby all k k is M times in s s inherited k k is M times in s s Comparison all builtruby is compareruby is x slower inherited builtruby is compareruby is x slower macOSs make testbundledgems job is currently frozen and runs for hours Use a sparse matrix format to add test timeouts to all macOS Actions tests Small update to MinGW see The following code should pass one positional argument and one block one args fooargs argspop However the old implementation passes no argument because the expression of the block argument argspop is executed before the rest argument is passed By this change the passed rest argument is duplicated before argspop is executed This duplication is omitted when the expression of the block argument is getblockparamproxy because it has no side effect Bug 