I have a Rails app and actsasvotable of versionThere are two problems that I faced Migration does not run with the error shown as below ubuntuenvironmentmyapp newlayout rails generate actsasvotablemigration Running via Spring preloader in process Could not find generator actsasvotablemigration Maybe you meant activerecordmigration actsasfollower or migration Run rails generate help for more options actsasvotable comes undefined when added to a modeladded actsasvotable to videorb Videonew Traceback most recent call last from irb from appmodelsvideorb in main from appmodelsvideorb in classVideo NameError undefined local variable or method actsasvotable for Video call Videoconnection to establish a connectionClass Did you mean actsastaggable url I had to manually create migration files by copying those from libgenerators folder which is Ok but why the second problemnot sure Can someone put some light on this Thanks in advance As the title says destroying a voter does not update cached values in the votable ie votes by nonexistent voters are still counted when looking at the votable Still love your gem just a minor comment on version upgrade pain points Before upgrading from to I checked the changelog at and corresponding pull requests Rails BillyParadise murny Gem cleanup olleolleolle Failure message wasnt very helpful without checking the source code FailureError actsasvotable cacheablestrategy updateattributes ArgumentError updateattributes appmodelsentryrb in classEntry thats how I found this important commit that somehow wasnt mentioned in the changelog It doesnt feel like a patchlevel version upgrade because it is not backward compatible The API has changed for retrieving votes likes dislikes positives negatives etc particularly in Update the API examples from votes to votesfor and the like Thanks for all things actsasvotable Here is my web app environment Rails actsasvotable Here is the stack trace that i got ctsasvotable libactsasvotablecacheablerb in updatecachedvotes actsasvotable libactsasvotablevotablerb in block in voteby rdconnectionadaptersabstractdatabasestatementsrb in block in transaction iverecordconnectionadaptersabstracttransactionrb in block in withinnewtransaction optrubiesruby libruby monitorrb in monsynchronize iverecordconnectionadaptersabstracttransactionrb in withinnewtransaction rdconnectionadaptersabstractdatabasestatementsrb in transaction sactiverecord libactiverecordtransactionsrb in transaction actsasvotable libactsasvotablevotablerb in voteby appcontrollersapivotescontrollerrb in create Here is the error message NoMethodError undefined method for nilNilClass After lookin for the code here is the part of code that throw that error which call actsasvotableoptions that is assigned in which per my understanding will never be nil except there is another assignment My model only calls actsasvotable without any args so i assume it will use the default options Anyone can explain why this could happen This PR is a small refactoring that makes AAV use Rails autoloading mechanisms to avoid using nested require calls This fixes an issue in development where in some situations I encountered unitialized constant ActsAsVotableVotable errors due to calling ActsAsVotableVotable directly in a place where Rails hadnt already loaded a votable model thus requiring the actsasvotablevotable file Since the gem already depends on ActiveSupport its autoload feature seems a good fit to allow the lazy loading provided by the original require calls without its drawbacks Note I converted all local require calls to autoload and created the needed parent module files actsasvotableextendersrb and actsasvotablehelpersrb This is not mandatory but this way theres only one method used throughout the gem Update rake reference to rails and inheritance from ActionControllerBase to ApplicationRecord in README postrb actsasvotable userrb actsasvoter The vote registers fine and doing postweightedscore shows the correct amount as well But when doing currentuservotedfor post it shows the incorrect boolean Just a note for anyone using UUIDs out there you will need to change the generated database migration to something like the example below since treferences column assumes that you are using integers Might be worth mentioning in the Readme wanted to post it here in case anyone runs into this issue ruby class ActsAsVotableMigration ActiveRecordMigration def selfup createtable votes do t tstring votabletype tstring votertype tuuid votableid tuuid voterid tboolean voteflag tstring votescope tinteger voteweight ttimestamps end addindex votes voterid votertype votescope addindex votes votableid votabletype votescope end def selfdown droptable votes end end articlecachedvotesup times Threadnew userlikes article articlecachedvotesup articlegetupvotes votableid voterid votableid voterid Fix this issue please