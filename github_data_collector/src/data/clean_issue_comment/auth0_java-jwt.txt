When I try to upgrade javajwt from to the version after The following code breaks public class TestJavajwt private static final long EXPIRETIME public static String signString uidString username String secret try Date date new DateSystemcurrentTimeMillisEXPIRETIME Algorithm algorithm AlgorithmHMAC secret return JWTcreate withClaimuid uid withClaimusername username withExpiresAtdate signalgorithm catch UnsupportedEncodingException e return null The code should pass but it throws an error TestJavajwtjava exception javaioUnsupportedEncodingException is never thrown in body of corresponding try statement Description One would think the best solution to your extremely long processing time for issues and pullrequest is to divert some manhours to reviewing pullrequests instead of nuking by stalebot So wrong Reproduction Add a PR wait patiently for more than a year see PR closed by bot you were too slow to react Description I am trying to follow the example in READMEmd HMAC Algorithm algorithmHS AlgorithmHMAC secret RSA RSAPublicKey publicKey Get the key instance RSAPrivateKey privateKey Get the key instance Algorithm algorithmRS AlgorithmRSA publicKey privateKey However getting the key instances is not that simple After a lot of digging I managed to load at least the private key as follows I followed to generate public and private key I converted private key to the DER form openssl pkcs topk inform PEM outform DER in privatekeypem out pkcs der nocrypt Now I am able to load the private key as val privateKey readKeyAsBytespkcs der run PKCS EncodedKeySpecthis run KeyFactorygetInstanceRSAgeneratePrivatethis as RSAPrivateKey However this doesnt work for generating the public key val publicKey readKeyAsBytespublickeycrt run X EncodedKeySpecthis run KeyFactorygetInstanceRSAgeneratePublicthis as RSAPublicKey as it fails with InvalidKeyException invalid key format I am not sure whether getInstnaceRSA is correct here but I couldnt make it work with anything else either I guess the public key is not in the X format but I cannot seem to manage to convert it to it It would be great to provide some better example to start with this Prerequisites note this is not a bug x I have checked the documentation for this library in the README x I have checked the Auth Community for related posts x I have checked for related or duplicate Issues and PRs x I have read the Auth general contribution guidelines x I have read the Auth Code of Conduct x I am reporting this to the correct repository note this library is used by many libraries such as auth java Environment Please provide the following Version of this library used Version of Java framework used Java Additional libraries that might be affecting your instance Reproduction not a bug Please do not report security vulnerabilities here The Responsible Disclosure Program details the procedure for disclosing security issues Thank you in advance for helping us to improve this library Your attention to detail here is greatly appreciated and will help us respond as quickly as possible For general support or usage questions use the Auth Community or Auth Support Finally to avoid duplicates please search existing Issues before submitting one here By submitting an Issue to this repository you agree to the terms within the Auth Code of Conduct Describe the problem youd like to have solved To make the library useful need to add custom Map claim when creating a new token A clear and concise description of what the problem is Ex Im always frustrated when Describe the ideal solution The method should be like withMapClaimmap map String token JWTcreate withMapClaimmap map signalgorithm A clear and concise description of what you want to happen Need to be able to add adhoc JSON map structure as claim Alternatives and current workarounds Current workaround to use JJWT or possibly hack into the JWT internals with reflection A clear and concise description of any alternatives youve considered or any workarounds that are currently in place Additional context Add any other context or screenshots about the feature request here The Header Claim type should not be hardcoded with the value JWT We would like to use this library to stirshaken authentication Suggestion Class JWTCreator Method sign Verify the header claims contains the key value typ if it does not exist create one entry with value JWT Changes Add a manifest entry for automatic module name as a small improvement for use with modules and JDK Or better yet use a plugin to create a release compatible with both and for example a multirelease jar References Testing This change adds test coverage x This change has been tested on the latest version of Java or why not Manually inspected resulting jar Checklist x I have read the Auth general contribution guidelines x I have read the Auth Code of Conduct x All existing and new tests complete without errors Please do not report security vulnerabilities here The Responsible Disclosure Program details the procedure for disclosing security issues Thank you in advance for helping us to improve this library Your attention to detail here is greatly appreciated and will help us respond as quickly as possible For general support or usage questions use the Auth Community or Auth Support Finally to avoid duplicates please search existing Issues before submitting one here By submitting an Issue to this repository you agree to the terms within the Auth Code of Conduct Describe the problem youd like to have solved Id like to be able to verify that certain claims are present on a JWT but I dont want have to limit its value Describe the ideal solution A Verification method along the lines of withClaimString name which simply ensures the claim is present Additionally withClaimString name Type type which validates the claim is present and assignable to type would be nice Alternatives and current workarounds I dont have any work around currently especially since the implementing class is final Alternative names for the proposed method could be hasClaim isPresent requireClaim etc might make it clearer that the method is different to the other withClaims Not sure if this is preferred vs sticking with a consistent name Please do not report security vulnerabilities here The Responsible Disclosure Program details the procedure for disclosing security issues Thank you in advance for helping us to improve this library Please read through the template below and answer all relevant questions Your additional work here is greatly appreciated and will help us respond as quickly as possible For general support or usage questions use the Auth Community or Auth Support Finally to avoid duplicates please search existing Issues before submitting one here By submitting an Issue to this repository you agree to the terms within the Auth Code of Conduct Description When using Intellijs view javadoc feature on a Verification method such as withIssuer no javadoc is found Proposed solution Move or copy the relevant javadocs from the JWTVerifier class to the interface Possibly add small javadocs on the class linking or referring to the new interface javadoc Reproduction Given the following click on withIssuer or acceptLeeway and press CtrlQ java JWTrequirealgorithm withIssuerVersionAPIURL acceptLeeway build Environment Please provide the following Version of this library used Version of the platform or framework used if applicable Java Other relevant versions IDE Intellij IDEA Ultimate Other modulespluginslibraries that might be involved NA JWTVerifer added isValid method Reason for the addition it shows false exception for instrumented tools like Dynatrace Functional programming without exception References Please include relevant links supporting this change such as a Testing Junit tests have been added Test coverage has been verified X This change adds test coverage X This change has been tested on the latest version of Java or why not Checklist X I have read the Auth general contribution guidelines X I have read the Auth Code of Conduct X All existing and new tests complete without errors Description Currently we use the following code to decrypt but as we are supporting multiple data if we cannot decrypt we send the original value back try DecodedJWT decodedJWT JWTrequirealgorithm build verifysid return decodedJWTgetClaimOLDSTYLESIDasString catch Exception e LOGGERinfoCould not extract the SID assuming oldstyle SID is being sent returning the same return sid This works fine but we are seeing JWTDecodeException in Dynatrace as Dynatrace instrumentation captures this exception and reports which is creating noise The ask if a convenience method isValid can be provided which will check the validity of the incoming string without throwing an exception I can work on this issue but need to ensure that it follows design guidelines Prerequisites x I have checked the documentation for this library in the README x I have checked the Auth Community for related posts x I have checked for related or duplicate Issues and PRs x I have read the Auth general contribution guidelines x I have read the Auth Code of Conduct x I am reporting this to the correct repository note this library is used by many libraries such as auth java Environment Please provide the following Version of this library used Version of Java framework used Additional libraries that might be affecting your instance None Reproduction See above for code sample 