I am refacting the mapping of NHibernateAspNetCoreIdentity to NHibernateMappingByCode as descripted in the issue I have rewrite the orignal xml mapping of NHibernateAspNetCoreIdentity with ClassMappingT the code looks like this c public class IdentityRoleMappingPostgreSql ClassMappingIdentityRole public IdentityRoleMappingPostgreSql Schemapublic Tableaspnetroles Ide eId id idColumnid idTypeNHibernateUtilString idLength idGeneratorGeneratorsTriggerIdentity Propertye eName prop propColumnname propTypeNHibernateUtilString propLength propNotNullabletrue propUniquetrue other property mappings ignored here The full mapping code is here Then I try to extend these mappings with joinedsublcass of xml mapping like this xml xml version encodingUTF hibernatemapping xmlnsxsi xmlnsxsd xmlnsurnnhibernatemapping namespaceWebTestEntities assemblyWebTest joinedsubclass nameAppRole schemapublic tableapproles extendsNHibernateAspNetCoreIdentityIdentityRole NHibernateAspNetCoreIdentity Version Cultureneutral PublicKeyTokennull key columnid property nameDescription columndescription typestring length joinedsubclass hibernatemapping I got the following exception when setting up nhibernate NHibernateMappingException These classes referenced by extends were not found FullNameNHibernateAspNetCoreIdentityIdentityRole NameNHibernateAspNetCoreIdentityIdentityRole NHibernateAspNetCoreIdentity Version Cultureneutral PublicKeyTokennull FullNameNHibernateAspNetCoreIdentityIdentityUser NameNHibernateAspNetCoreIdentityIdentityUser NHibernateAspNetCoreIdentity Version Cultureneutral PublicKeyTokennull at NHibernateCfgMappingsQueueCheckNoUnavailableEntries at NHibernateCfgConfigurationSecondPassCompile at NHibernateCfgConfigurationBuildMappings at UnitTestIdentityTest CanSetupMappingByXml Then I rewrite the xml mapping with JoinedSubclassMappingAppRole which works can build session factory and query without any exception c public class AppRoleMapping JoinedSubclassMappingAppRole public AppRoleMapping ExplicitDeclarationsHolder AddAsRootEntitytypeofNHIdentityRole ExtendstypeofNHIdentityRole Schemapublic Tableapproles Keyk kColumnid Property p pDescription maping mapingColumndescription mapingTypeNHibernateUtilString mapingLength So the issue is when using JoinedSubclassMappingT to extend the mappings build with ClassMappingT it works CanExtendByCodeWithByCode when using joinedsubclass of xml mapping to extend the mappings build with ClassMappingT get an exception of NHibernateMappingException These classes referenced by extends were not found CanExtendByCodeWithXml when using joinedsubclass xml mapping to extend class xml mapping it works CanExtendXmlByXml when using JoinedSubclassMappingAppRole to extend class mapping of xml it works CanExtendXmlByByCode The full test code is here Maybe there something I do wrong or some issues with nhibernates mappings Now it is impossible to change starting symbol of the parameter or run queries containing local variables We are using firebird and it uses for local variables while NHibernate recognize them as named parameters and replaces with placeholders Would be nice if NHibernate can parse parameters starting with instead of or do not parse inside part of execute block for parameters Fix in x with release commit Release ready NH disables batching for entities that use an identity generator I understand why this would be the case for stateful sessions but Im curious to know why this rule still applies to stateless sessions and why there isnt a way to circumvent the rule I have tens of thousands of records to insert and I dont need the the ID values returned yet each row is being inserted with a roundtrip to the database so that the SCOPEIDENTITY is returned This is taking minutes to execute What Id like to be able to do is to implement a way of forcing batching regardless of the identity generator in this particular scenario Can anyone think of a reason why this would be a bad thing to implement in NH Fixed by slightly modifying a few relinq related classes copied a couple of them from Relinq where it was not possible to override them was sealed and another had private constructor Relinqs apache license allows this as far as I understand The issue was that NH expected Relinq to evaluate independent subtrees but RL considers all parameters defined in lambda expressions as nonevaluatable and their status is pulled upwards leaving expressions on constants not evaluated Modified visitor maintains ancestor list and checks whether parameter accepts values from evaluatable expression by analyzing its ancestors Fixes query by example is an efficient way to implement a multicriteria search it has limitations between or but not all use cases hit these limitations and it is much easier to use than LINQ when all criteria are optional Unfortunately associations are ignored For instanceSQL generated from this example var example new Book Title Author new Author Lastname Category new CategoryId will not include restriction on author lastname and category id In Java world springdatajpa projects implementation of query by example includes several associations not sure for n and nn It would be nice to have this feature in NHibernate I want to create a persisted computed column to be able to have index on it in MSSQL Im trying following piece of code for mapping but column isnt getting created in sql cs classMapPropertypropName pMap pMapFormulaCASTCASE WHEN Column Column THEN ELSE END AS bit PERSISTED pMapGeneratedPropertyGenerationAlways pMapUpdatefalse pMapInsertfalse pMapIndexIXtypeNamepropName Can anyone please tell me what im doing wrong Hi everyone I currently tried the Discriminator feature for storing several sub classes in one table After starting with the feature and placing the discriminator tag in my mappigns I discovered a problem If you are not placing the discriminator tag right after the id tag the runtime is providing me with a error MappingException XML validation error The element class in namespace urnnhibernatemapping has invalid child element discriminator in namespace urnnhibernatemapping From the error Im started struggling around First I thought something with my discriminator was wrong so I switched around the type and several other stuff but nothing seems to work So I started googleing around and after some time I found a blog post which put me in the right direction That it is a must to place discriminator right below the id tag If this restriction is correct in the validation schema I think it would be very helpful if it would be mentioned in the official documentation Right now under in nothing to this restriction is stated and so I was more or less lost for the right google search to give me a clue after trying around with no luck Cheers Simulacruxx Originally reported under incorrect query is generated for var selectedProducts new productDefinition var query sessionQueryMaterial Wherex selectedProductsContainsxProductDefinition selectedProductsSelecty yMaterialDefinitionContainsxMaterialDefinition Selecty yMaterialDefinition is ignored and IDs of product definitions are inserted into the list of material definitions ie SQL contains query to the effect of where MaterialDefinitionId in ProductDefinitionId ProductDefinitionId Original standalone unit test New unit test integrated in a fork of NH repo added in commit It runs and fails but needs some further development