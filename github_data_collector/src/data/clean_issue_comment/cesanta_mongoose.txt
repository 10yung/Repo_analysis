I see some webservers reply to the proxy requests with strange data and MGEVHTTPREPLY never gets called At the MGEVCLOSE event I see that the reply is stuck in the mbuf In the cases I see it looks like the reply status is good OK the reply headers are good but the reply data is empty the last n r are not there The apache httpd proxy is okey with this also adds a ContentLength header I do not care why those webservers do this I just want the mongoose proxy to work the same as the apache httpd proxy My solution is to send out the stuck data in the MGEVCLOSE event handler pre static void mgreverseproxyhandler case MGEVCLOSE struct mbuf io ncrecvmbuf printfproxy close mbuf p bytes d n io intiolen iobuf if iolen mgsendpdreverseproxydatalinkedconn iobuf iolen pdreverseproxydatalinkedconnflags MGFSENDANDCLOSE break pre This works for me I am not sure if mbufs are chained and I need to loop over the mbuf chain here Would like to have advice from mongoose developers With all these fixes the mongoose proxy seems to work as well as the apache http proxy minus the URL rewriting for doctoring the absolute URLs inside the proxied replies KO The http proxy code fails with a funny problem if the proxied web server returns a response with chunked encoding mghttpreverseproxy code decodes the chunking and replies with a complete nonchunked message but leaves the TransferEncoding chunked header This confused the next guy header says chunked but the data is nonchunked My solution is to doctor the header replace T with X pre static void mgreverseproxyhandler case MGEVHTTPREPLY char s strstrcharhmmessagep TransferEncoding chunked if s s X pre Not good because we are missing the ContentLength header but works because we close the connection after sending the reply KO i create two thread a httpda mqtt broker two thread will call mgmgrinitopt and will call SSLlibraryinit twice this will abort the program Define MGENABLEHTTPIGNOREINVALID to ignore nonprintable TLV responses for Apple HomeKit Accessory Protocol Hi Is there any way of modifying the http Server header to something other than MongooseXxx Thanks I tested it has been reported that this error successfalsecode msg exceptionjavalangNullPointerException In mongoose mghttpreverseproxy does not work without following fixes a after mgconnecthttpbase mghttpgetprotodatabe returns NULL and there is an immediate crash b purl is missing the querystring c mghttphandler overwrites our protodata after that our reverseproxydatalinkedconn becomes NULL in mgreverseproxyhandler pdlinkedconn is NULL and nothing works With following changes against mongoosec git tag http proxy works pre diff git aprogsmongoose cxx bprogsmongoose cxx index cc e fe b aprogsmongoose cxx bprogsmongoose cxx void mghttphandlerstruct mgconnection nc int ev if reqlen New request new proto data pd mghttpcreateprotodatanc if pd pd mghttpcreateprotodatanc pdrcvd iolen void mghttpreverseproxystruct mgconnection nc memset opts sizeofopts optserrorstring error mgasprintf purl sizeofburl ss int upstreamlen upstreamp int hmurilen mountlen hmurip mountlen mgasprintf purl sizeofburl ssss int upstreamlen upstreamp int hmurilen mountlen hmurip mountlen hmquerystringlen int hmquerystringlen hmquerystringp be mgconnecthttpbasencmgr MGCBmgreverseproxyhandler NULL opts http NULL https NULL purl path void mghttpreverseproxystruct mgconnection nc goto cleanup mghttpcreateprotodatabe link connections to each other they must live and die together mghttpgetprotodatabereverseproxydatalinkedconn nc mghttpgetprotodatancreverseproxydatalinkedconn be pre KO Im trying to compile mongoose on IAR EWARM but it misses sysstath systypesh and fcntlh so mongoose wont compile Some googling showed up that Keil MDK ARM also misses these headers How do I complie mongoose for my STM board I am updating the web server component of our data acquisition application from mongoose ish to mongoose By necessity our web server is multithreaded we have many web requests that take a very long time to process databases have to be queried large data files have to be read etc and it took me a few years to work up the courage to tackle the new multithreading model implemented in recent versions of mongoose I generally like how the removal of old multithreading code simplified the mongoose code and api But I have run into trouble working with the new code a examplesmultithreadedmultithreadedc does not explain how to send arbitrary large amounts of data more than fits in MGCTLMSGMESSAGESIZE b contrary to mgbroadcast is obviously not threadsafe True it is safe against mgmgrpoll co but not safe against multiple threads calling mgbroadcast Ultimately I got my web server working with two changes to mongoose mgbroadcast has to be protected by a mutex in user code mgmgrhandlectlsock should send the handshake reply after the loop over network connections required change in mongoosec This is how I explain the problems to the next guy to work on our web server NB mgbroadcast is advertised as threadsafe but it is not in mongoose mgbrodacast and mgmgrhandlectlsock have several problems a wrong thread read from mgrctl defeating the handshake b lost messages if more than one message is written to mgrctl the second message will be eaten by mgmgrhandlectlsock because of mistatch between number of bytes read and written in the two functions mgmgrhandlectlsock always reads about bytes while mgbroadcast writes bytes per message per examplesmultithreadedmultithreadedc mhttpd messages are a bit longer So if multiple messages are present in the msgctl pipe the read call of about bytes in mgmgrhandlectlsock will return several messages last message may be truncated but only the first message will be processed by the code any additional messages are ignored Problems a and b are easy to fix by using a mutex to serialize mgbroadcast c if the mgbroadcast message contains pointers to the data buffer to be sent out the caller of mgbroadcast should not free these data buffers until mgsend is called in onworkcomplete In theory the caller of mgbroadcast could wait until onworkcomplete sets a done flag In practice if the corresponding network connection is closed before mgmgrhandlectlsock has looped over it onworkcomplete will never run and the done flag will never be set Of course network connections are permitted to close at any time without warning but the firefox browser closes the network connections a lot especially when user pressed the page reload button at the moment when HTTP transations are in flight googlechrome tends to permit these lame duck transactions to complete and mongoose does not see unexpected socket closures at least not as many To fix problem c I need to know when mgmgrhandlectlsocks loop over network connections has completed two cases a my onworkcomplete was hopefully called and finished and b the right network connection was already closed for whatever reason and my onworkcomplete was never called My solution is to change the handshake between mgbroadcast and mgmgrhandlectlsock by sending the handshake reply after looping over the network connections instead of after reading the message from msgctl This requires a modification to the code in mongoosec If this change is lostundone nothing will work KO If the browser is a client is there an example of HTTP client downloading a large file from the server writed by mongoose In the example only the example of uploading a large file is found