In recent git versions git filterbranch prints a message to use other tools and waits for the user to press CtrlC Since gitsubrepo uses filterbranch sensibly and doesnt show the message to the user theres no need for this delay Setting FILTERBRANCHSQUELCH disables it Fixes When the history in the main repo is complex with lots of merges Im seeing changes being pushed to the subrepos remote with a message from a merge commit instead of the real commit Sometimes the merge commit is from a completely unrelated pull request I have created a test file that demonstrates at least part of the problem although in this case the message is related pushwithmergest The problem seems to stem from gitsubrepos logic of skipping nonlinear commits ie this part of subrepobranch bash Only include the commit if its a child of the previous commit This way we create a single path between subrepoparentHEAD if n ancestor then local isdirectchildgit show s prettyformatP commit grep ancestor o is child isdirectchild if z isdirectchild then o Ignore commit its not in the selected path continue fi fi On newer git versions the filterbranch command emits a warning message that its a dangerous operation and you shouldnt use it It then waits seconds or more for the user to press CtrlC and abort This makes any operation of gitsubrepo that uses filterbranch a lot slower Setting the environment variable FILTERBRANCHSQUELCHWARNING to makes this go away With this variable set tests run in seconds on my machine Without it I dont have the patience to see how long it takes git subrepo branch foobar git clean foobar ls gittmpsubrepo still contains foo bar has been removed Honestly if subrepo or tmp are empty they should be removed also When pulling a subrepo the modified gitrepo contains LF instead of CRLF on Windows The automatically generated commit message is lost since Git errors out before the commit step The volume on which this occurs is formatted NTFS Windows Version OS Build From Git Bash git version git version windows git subrepo pull utilitiesmath gitsubrepo Command failed git add f utilitiesmathgitrepo fatal LF would be replaced by CRLF in utilitiesmathgitrepo The relevant section of my gitconfig on Windows core whitespace crateoltabinindent autocrlf true safecrlf true longpaths true This issue does not occur on Linux My gitconfig on Linux core whitespace crateoltabinindent sh git clone gitingydotnet gitsubrepo echo source gitingydotnet gitsubreporc bashrc bash source bashrc Fixes I dont know how to comprehensively test this but I have verified that some basic completions work correctly I had found that the parent pointer does not change after the pull As a result the next pull does resampling of old commits and ends up in merge conflicts in some cases To fix the issue i commented out the extra check in the updategitrepofile if upstreamheadcommit output then This works in all my cases It also works in all tests but pullmerget The test did sample the parent before pull So i modified it to sample the parent after the pull There was also an issue with pusht The push after pull had truncated history because the parent pointer had been moved before the push is done The solution for the issue was to add yet another parent pointer as pushparent So the gitrepo has another entry now On the way i had fixed a few issues git changed word casing in the Cc ouldnt find remote ref message I fixed the regex branch tests were failing sporadically at least with git The order of transactions reported by revlist in presence of branches was different from test to test looks like topoorder fixed it errort was failing inside a submodule because there was a ref to dir So the cd command failed I fixed the test Background Have a tree of nested subrepos of various levels top subrepo top import subreop subreop subrepo import sibreopo checkout time for all files of the top subrepo is about min Issues found subrepo branch for the top of the nested subrepos creates a tree which includes nested subrepos and pushes them tot he origin subrepo bfanch created nested references which just do not work in case of the multiple branches in existence eg error cannot lock ref refsheadssubrepos refsheadssubrepos s s exists cannot create refsheadssubrepos treefilter used int the branch filtering is veeeery slow My initial experinent of creating a branch for subrepo took hours multiple commands are missing the ALL qualifier Bugs found Worktree was not cleaned at subrepobranch It was causing issues in push ALL if some branches already existed testbranchrevlistonepatht failed internittently encoding did not catch single correclty causing worktree creation to fail at least in git Features change git message letter casing was changed from Couldnt find remote ref to couldnt find remote ref Added changes Added feature to clean nested subrepo in the filterbranch flattened names of nested branches by replaceing with Added extra checking for the updates done to the nested subrepos only It checks updated files against the nested subrepo regex found a code which created EMPTY commits which looked like a leftower from debugging It stayed in the way and I commented it out Did not affect any test it reduced number of revisions needed for subrepo in my initial case from to Replaced treefilter with indexfilter in socbranch For different subrepos performance was improved x to x found a git issue probably related to the tree size It crashed in filterbranch with xrealloc ULL I did not investigate it further This happened to the top subrepo with revisions It worked with from above and took onlly min to finish vs hours initially aded the usetreefilter qualifier to allow old treefilter in case of git issues added the squashbranch S feature to the branch push pull and fetch commands It causes subrepobranch to squash all commits into one with combined log This was initially done for performance reasons fixed found bugs and updated features added ALL to branch clean fetch pull and push added topoorder to revlist in subrepobranch This makes git reporting consistent and it looks like branchrevlistonepatht passes consistently now claned wortree in subrepobranch before checking for existense fo the branch added checking of nonprefixed branch names to the encoding It was ok for branches but not ok for worktrees Now worktree seems to work fixed message regex to handle both capitalized and noncapitalized veresion of the Cc ouldnt added nestedt test to check both regular and squashed branches I had rebased the commit where I performed the git subrepo clone and when I tried to do a pullafter that I received the error gitsubrepo Command failed git branch subrepoutilitiescacherer fatal Not a valid object name I was able to figure out this was because of the rebase eventually but it took some doing so I made this MR to make the problem obvious in the future Also replaced one raw reference to git with an invocation of git revparse gitdir