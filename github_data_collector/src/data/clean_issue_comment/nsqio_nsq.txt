Using the golang nsdq client What is the correct way to consume all the messages of a channel and then when it is empty stop the consumer and eliminate the topic and or the channel right now an nsqd client doesnt refresh its ip connections to lookupd on lookupd DNS changes this causes a problem on long running instances when a lookupd instance gets rebuilt Hello I noticed nsqd correctly marked the health state to not ok eg via ping end point when disk is full and a message is published However it did not do this when a message is published to existing topic even worse it reset the state to healthyok Steps to replicate nsqd memqueuesize curl see OK echo Haha tonsq topic t nsqdtcpaddress rate curl see OK sudo fallocate l G penuh g df see available space left curl see OK echo Haha tonsq topic t nsqdtcpaddress rate curl still OK echo Hoho tonsq topic t nsqdtcpaddress rate curl now NOK echo Haha tonsq topic t nsqdtcpaddress rate sending to existing topic reset the error status now OK df see available space left Is this a bug Users cannot create topic through nsqadmin The topic created cannot be implemented to nsqd This can help distinguish log levels in gcp stackdriver This PR will fix register db write lock starvation We have encountered a circumstance we have many topics with many ephemeral channels our cluster fo nsqd is large with more than instances some channels will register and unregister itself normally since the consumer client can break because timeout is readed or other various situations And finally the register db is large So the lookup api will consume some little more time to respond In the case where a lookup api get the read lock fo register db all the write lock for example registerunregister channels will be blocked And since the read lock can be acquired simultaneously by lookup requests the operations that needs write lock will all be blocked and the memory and goroutine will accumulated This PR will add a cache for the FindProducers resposne TTL is minute the purge operation will be operated at minutes interval Corns This will add some pressure on the memory since a new memory will be allocated newly added nsqds instance may have some more time to be discovered by consumer There were some small errors in benchpy fixes sshconnectwithretries did not ask for the ssh key I also added some logging in sshcmd bootstrapaddr followed the old build process run called the async ssh command however sometimes the pkill killed the deamon immediately so I switched to the usual sshcmd and to screen Id like to provide an experience report from introducing new nsqd nodes to a cluster while operational activities which involve pausing channels are underway Currently nsqd discovers the topicchannel topology from nqlookupd when it receives a new message This ensures that if you have say channels on a topic all channels get a copy of the first message If a channel is in a paused state when the first message is published to a new nsqd node its naturally expected that the new node would also end up with channels in an appropriately paused states That doesnt happen unfortunately because nsqlookupd has no context about the paused state of a channel and so it cant provide it when queried by nsqd on a new topic creation There also isnt technically anything that requires all hosts to be paused or unpaused together even though thats obviously most common Feature Request nsqd propagate topicchannel pause states to nsqlookupd On discovery nsqlookupd can advise if the majority of clients for a topicchannel are paused and if so nqsd will create a prepaused topic or channel If there are no clients for a topicchannel connected to nsqd at the time of topic discovery nsqd should create a topic and channel unpaused When nsqd queries multiple nqslookupd if any response indicates paused the result should be a paused state ie paused is preferred Note nsqlookupd response changes to support this should be backwards compatible Currently messages are received in order of publishing and recently published messages are waiting to be received while older messages are completed We have a requirement of receiving messages in random order Read the docs but could not find any option Is it possible Fix Fix 