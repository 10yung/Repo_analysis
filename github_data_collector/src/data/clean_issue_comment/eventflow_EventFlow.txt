First iteration of Reliable Events for Crash Resilience Early feedback appreciated Spike on a version of EventFlow for Nothing is decided yet Please note that this isnt very pretty To do x Delete old projects Make the three core projects work ie EventFlow EventFlowTestHelpers EventFlowTests use MicrosoftExtensionsLogging everywhere Readd other projects one by one when main project is done EventFlowMsSql the others This issue will try to outline the plan on creating a release The issue is up for discussion and Ill try to update this issue text to make sure that its easy to digest EventFlow has been in version x for more than five years and is used by many projects already For many the in front might as well be and thus it will be treated as such going forward ie there will be no more breaking API changes to the x releases only additions and bug fixes The real release will try to be the next iteration of EventFlow A version of EventFlow that follows the trends of NET and feels uptodate This will require several breaking changes Replace custom logging with MicrosoftExtensionsLogging and use structured logging Replace custom dependency injection with MicrosoftExtensionsDependencyInjection Replace custom memory cache with MicrosoftExtensionsCachingMemory Remove Bootstrapper Evaluate if AsyncHelper can be completely removed from the code base Remove all NET Framework build targets Minimum API level of NET Core and NET Core LTS versions Move to Linux build agents Update build setup to allow prerelease packages to be used for betaRC releases Delete packagesprojects that doesnt make any sense to have going forward EventFlowAutofac Will move to standard dependency injection EventFlowDependencyInjection The core package will have support for this no need for an additional package EventFlowOwin ASPNET Core will be the only supported pipeline going forward other stuff need input Issues for each bullet will be created when everyone has had a chance to give feedback The above list is the must haves then there are several nice to have issues which are the current issues in the Milestone This represents a huge amount of work but hopefully people with chip in with a PR To do Finalize list of issues that are required to put a stamp on a new set of packages Create a x x branching strategy Please refrain on starting on PRs until a branching plan has plan has been made Edit Only NET Core supported going forward and added that Bootstrapper must be removed Fixes Now that the net core PR is merged and available I tried to upgrade my current project Unfortunately I have a very weird issue which I cannot debug any further as I cannot get the EventFlow solution running on my MacBook Id debug it there if it was running The exception I get is SystemMissingMethodException Method not found MicrosoftEntityFrameworkCoreMetadataBuildersIndexBuilder MicrosoftEntityFrameworkCoreMetadataBuildersEntityTypeBuilder HasIndexSystemLinqExpressionsExpression SystemFunc SystemObject at EventFlowEntityFrameworkExtensionsModelBuilderExtensionsAddEventFlowSnapshotsModelBuilder modelBuilder Same goes for AddEventFlowEvents The strange thing is if I skip these both calls and ONLY use my own model builder stuff for my own entities then there is no such error though I also call HasIndex and such And to make it even more strange putting the code from AddEventFlowEvents directly into my ModelBuilderstuff does NOT throw this exception About the project it uses net core and event flow with autofac integration and entity framework integration using postgresql Unfortunately it is quite impossible to strip out the relevant parts as the project already got quite huge and complex However according to the net core api changes I had to do some parts different to the EventFlow examples AutoFac no longer integrated within ConfigureServices but instead within ConfigureContainer being a void method public void ConfigureContainerContainerBuilder builder EventFlowOptionsNew Configureoptions optionsIsAsynchronousSubscribersEnabled true UseAutofacContainerBuilderbuilder ConfigureEntityFrameworkEntityFrameworkConfigurationNew UseHangfireJobScheduler PublishToRabbitMqRabbitMqConfigurationWithnew UrithisConfiguration RabbitMQUrl exchange thisConfiguration RabbitMQExchange UseLibLogLibLogProvidersSerilog CreateContainer Note the point not calling CreateContainer which threw exceptions Obviously net core does it on its own or at least the relevant stuff which is done within this method In our current implementation we sometimes have event subscribers on the read side instead of a read model Example Register user where the username column has a unique key The subscriber does the insert and catches the unique key violation exception and publishes a compensation command When the events are replayed do the subscribers also get invoked This would result in a republish of a command which in turn will result in creating a new event while replaying If the subscribers do not get invoked the read side will miss content if tables are updated by subscribers instead of simple read models because not every scenario can be handled by the current read model implementation How does eventflow handle this scenario Kind Regards Christian Hi Were using eventflow v When our commandserver starts up we see lots of verbose logging like Verbose Upgrading events and found these event upgraders to use Verbose Upgrading events and found these event upgraders to use The weird thing is we are not using any event upgraders Any thoughts on this a workaround for this As NET Framework is rather hard to maintain as it requires Windows to build I would like some input on whether or not removing NET Framework from the produced NuGet packages is a good idea at this point good idea bad idea If you have any comments please post them below Find a fix root cause for unstable test MultipleAggregateReadStoreManagerTestsEventOrdering