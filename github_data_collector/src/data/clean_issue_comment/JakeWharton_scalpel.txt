Hi Is there any way that the library to this for you It helps to use it everywhere painless after I import the project and found this error ErrorGradle DSL method not found getBootClasspath It seem that the buildgradle config is too old please update the buildgradle Added drawing class names functionality described in and build configuration was updated for latest versions of used tools Drawing class names When it is enabled simple class name is rendered for view When there is id as well class name is rendered under it screen Gradle build update Update Gradle configuration for newest Gradle distribution and Android Gradle plugin Updated and tested new Travis configuration In addition to drawing ids I would like to see the ability to toggle class names of the views ex androidwidgetTextView or even just TextView Ive started using scalpel in my app and Ive been seing a bug I guess where setting translation values in views doesnt have any effect I didnt know which was the cause but I have now confirmed that is due to using ScalpelLayout with the Debug Drawer from u thanks a lot for that Jake I dont have enough knowledge to debug the issue so Im reporting it I hope its fixable Thanks anyways Currently siblings are always drawn on the same layer This is actually bad if you have overlapping views as they and their children can draw over each other on the same level A second child which overlaps need to be prompted to a layer higher than its sibling and all its children Use the animation APIs for performing the hierarchy transformation Pros Hardware accelerated Could have a supersexy enableddisabled transition Views would still be interactive Doesnt require being in the view hierarchy unless we want to intercept touch events Cons Other animations using absolute positioning would break the effect It sucks having to put this in your hierarchy What if we walked up the tree and attached ourself at the end of the ViewRootImpl automatically It could even be idempotent so you always just call java Scalpelobtainthis activity someControl The D implementation is fairly wonky as a result from being iterated on rapidly rather than thought out initially On the rotation extremes you can clearly see that the layers are being translated along the rotated xy axes to perceive zaxis movement While this creates visual separation that looks like spacing it makes the layers appear smaller We need true D manipulation where the layers are rotated with the model and moved along the true zaxis Note Its important that the model be perfectly flat when viewed from straight on Otherwise the zaxis spacing would cause perceived sizes to be wrong That is a control thats a few levels up would appear much larger than if it were on the ground layer This is honored now by scaling the xy translation by the rotation percentage For example a degree rotation is of the max therefore we only separate the layers by of their spacing 