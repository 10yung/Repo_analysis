 Examples textql header sql pkey Company name Composite primary key can be specified with commaseparated string textql header sql pkey namebirth day Go modules is builtin so we can simplify the build process Hi first of all thank you for this tools In sqlite via load its possible to load extensions Is it possible to do it via textql Thank you Is it possible to get the instructions in text form instead of a video Videos arent usable by screen readers and not good for disabled users This video is really long much longer than if we just had the usage instructions in text Hi Im Yevgeny Pats Founder of Fuzzit Continuous fuzzing as a service platform We have a free plan for OSS and I would be happy to contribute a PR if thats interesting The PR will include the following gofuzz fuzzers This is generic step notconnected to fuzzit Continuous Fuzzing of master branch which will generate new corpus and look for new crashes Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step This will prevent new or old bugs from crippling into master You can see our basic example fuzzitdevexamplego and you can see an example of in the wild integration googlesyzkaller Let me know if this is something worth working on Cheers Yevgeny Not urgent but I was writing a query to check a CSV for duplicate rows and realized it might be nice to have a flag for returning an exit status In my specific case an option to return a status for an empty result set would be fine A moreflexible implementation might be an option to create the table with a presupplied schema before trying to load the rows In that case I could add a schema that prohibits the duplicate rows and I imagine the integrity errors would trigger to return an exit status as it already does for malformed queries I would like to donate to you or your favorite charity to help encourage a new feature Unicode separated values USV which uses Unicode unit separator U F and Unicode record separator U E Unicode separated values USV are much like comma separated values CSV tab separated values TSV aka tab delimited format TDF and ASCII separated values ASV aka DEL Delimited ASCII aka ASCII The advantages of USV for me are that USV handles text that happens to contain commas andor tabs andor newlines and also having a visual character representation For example USV is great for me within typical source code such as Unix scripts because the characters show up and also easy to copypaste and also easy to use within various kinds of editor search boxes When data are solely for machines then for me the choice of characters doesnt matter When data are potentially for reading or editing such as by a programmer then I prefer typicallyvisible characters U F U F over typicallyinvisible zerowidth characters ASCII For example I can write code samples such as echo a b c d e f g h i tr t n a b c d e f g h i In addition Unicode U F U E are semantically meaningful and use an international standard and are able to work well in any typical Unicode language and any typical Unicode font USV is akin to TSV in that the delimiter characters cannot not appear in the content For comparison I am using the TSV standard by IANA here Im offering similar donations to similar projects If you know of ones that could be interested Im happy to connect with them Thank you for your consideration Any chance you could actualy release it as a binary on github Releasing a binary just makes your tool available for someone who just wants to check it out quickly Not everyone has the entire go distribution installed or as a simple user is familiar with compilingBesides that releasing a binary would make it easier for others to create a package for a Linux distro based on the binary ex Archlinux AURi Do you know this tool you can also use travis circleci The advice of creating such an alias in the README is really good and works well alias textqldocker run rm it v pwdtmp textql but the problem with it is that it runs textql as root and so the output files are created with that user Ideally the solution would be to use this command instead alias textqldocker run rm user id uid g it v pwdtmp textql which works fine when called like this textql usage shown but not when an actual SQL processing is requested textql sql SELECT FROM groups LIMIT groupscsv user unknown userid Is there a way to fix that