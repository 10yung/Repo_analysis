This pull request enables CI against Ruby Rails provides allocations to event subscribers now so it would be nice to include these in the default stats when available My lograge configuration look as below configlogrageenabled true configlogragebasecontrollerclass ActionControllerBase configlogrageformatter LogrageFormattersLogstashnew But whenever i use Railsloggerinfothis is my log string in log files it comes like this this is my log string methodGETpathsomeapiformatjsoncontrollercontrollersomeactionpingstatus duration view db transactionidnullspanidnulltraceidnullparamsexceptionnullexceptionobjectnullremoteip timestamp T Zversion message GET someapi I want to append timestamp before all Railslogger entries I wan to format the log based on a type parameter sent in the loggerinfo message For example Railsloggerinfotype testlog used something similar in a nonlograge setup I have build a custom formatter for this the problem is the actual rails logger message is not included in the custom formatter data parameter all the info i get there is the one sent from the event in configlogragecustomoptions lambda do event since i sent multiple parameters that i wan included in all the logs Thank You where is the websocket object initialized Application error undefined method protocol for nilNilClass Application error undefined method protocol for nilNilClass Problem and highlight the problem To summarize its great that lograge by default tacks on fields like action controller format etc onto the controller log entries But its unfortunate that other log entries triggered throughout the request do not have these fields tacked on Goal The goal of this PR is to make it so that you can opt into having all log entries even those triggered from thirdparty gems within a request have the default fields that lograge typically adds on plus any fields added on by the users supplied configlogragecustompayload by using a special formatter Example Config Below is an example of how the newly added formatter LogrageLogStashLoggerFormattersMergedWithLogragePayload can be used to add all the fields on all the log entries ruby require logragelogstashloggerformattersmergedwithlogragepayload Railsapplicationconfigure do configlogrageenabled true configlogrageformatter LogrageFormattersLogstashnew configlogragecustompayload do controller request controllerrequest remoteip requestremoteip requestid requestrequestid end configlogragelogger LogStashLoggernew type multidelegator formatter LogrageLogStashLoggerFormattersMergedWithLogragePayload outputs type file path logdevelopmentlog type tcp host listenerexamplecom port customizeevent event event token logstashservicetoken Railslogger configlogragelogger end Open Questions I have left a couple of TODOs in the code that I think warrant more discussion please feel free to comment and we can come to a consensus on the right approach Limitations Logs triggered from middleware that is run before the Rails application is run will not get the additional fields tacked on because this change relies on the startprocessingactioncontroller event As far as I can tell there is no trivial fix for this though this can be revisited later Callouts Provided this approach is on the right path I will add to the specs and README Using a formatter in this way with logstashlogger doesnt totally work out of the box I have submitted a fix PR If there is lag in getting that merged I think I can outline a temporary workaround Context Hi I have a project using and I had trouble to get it running in production because of a railties setup problem ActionController was required before the authlogic lazy setup could trigger Why I think its lograge related Because I checked all my gems by disabling them individually And when I disable lograge everything runs fine Digging further I found out that the culprit was an initializer invoking Lograge custompayload demoapp Ive set up an example application which trigger an error with authologic when precompiling production assets with a configured Lograge initializer same effect when config is placed in configenvironmentproductionrb Running assets precompilation fails DISABLESPRING RAILSENVproduction bundle exec rails assetsclean assetsprecompile rails aborted AuthlogicControllerAdaptersRailsAdapterAuthlogicLoadedTooLateError Authlogic is trying to add a callback to ActionControllerBase but ApplicationController has already been loaded so the callback wont be copied into your application Generally this is due to another gem or plugin requiring your ApplicationController prematurely such as the resourcecontroller plugin Please require Authlogic first before these other gems plugins UsersbobWorkauthlogicrailsadaptedloadedtolateconfigenvironmentrb in main binrails in main Tasks TOP environment See full trace by running task with trace When removing configinitializerslogragerb or block in configenvironmentproductionrb or even simple usage of configlogragecustompayloadfrom those files DISABLESPRING RAILSENVproduction bundle exec rails assetsclean assetsprecompile yarn install v Resolving packages success Already uptodate Done in s What did I do to make the whole gems work together We managed to split the configuration from the initializer to production environment file and ApplicationController by overriding the rails appendinfotopayload method as suggested in the documentation appcontrollersapplicationcontrollerrb class ApplicationController ActionControllerBase def appendinfotopayloadpayload super payload host requesthost end end configinitializerslogragerb Railsapplicationconfigure do configlogrageenabled true add time to lograge configlogragecustomoptions lambda do event host eventpayload host end end With this setup it works With the documented custompayload its not Trying to find what is not working Authlogic just got upgraded to with a change in its ActionController setup Im not super fluent in railties but Lograge seems not use the rails setup best practise and instead juste requiring rails components like this May be you could replace the code with something like ruby require activesupport ActiveSupportonloadactioncontroller do do whatever Lograge need to do end or may be just drop the custompayload example from the documentation Exclude CI matrix between Ruby and Rails Rails requires Ruby No need to exclude any JRuby because JRuby x is compatible with Ruby x This PR updates the CI matrix to use latest JRuby JRuby release blog post Hello Any ideas why AR SQLs are not showing in logstestlog Ive got Gemfile gem lograge gem logragesql configenvironmentstestrb require logragesqlextension Railsapplicationconfigure do configloglevel debug configlogrageenabled true configlogragekeeporiginalrailslog true end 