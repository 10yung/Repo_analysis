Description When using androidxpreferencePreferenceFragmentCompat ViewPump doesnt intercept inflating underlying elements Even PreferenceFragmentCompat uses a different inflation process than androidappFragment by loading the elements from the XML resource it still uses regular widgets at the base How to reproduce Add a preference activity with fragment to the sample app guided by this example Dont forget to wrap the base context Observe the interceptors are not called and the TextView is not replaced with CustomTextView My app gets sometimes an ANR from that line ViewPumpinitViewPumpbuilder looking like this main prio tid Runnable groupmain sCount dsCount flags obj x b f self x c cc a sysTid nice cgrpdefault sched handle x c a c b stateR schedstat utm stm core HZ stack x ff e x ff a stackSize MB held mutexes mutator lockshared held Not sure its actually the framworks fault but maybe anyone knows what this means When calling getLayoutInflater from two threads early in the application lifecycle its possible to hit a KotlinNullPointerException when evaluating this lazyNONE While it is probably not advisable to get a LayoutInflater off of the main thread and weve already fixed our callsite that was triggering this it does appear to be a regression We should be able to replace lazyNONE with lazyPUBLICATION to correct this crash and avoid any impact to runtime performance I try this public InflateResult interceptNotNull Chain chain InflateRequest request chainrequest InflateResult result chainproceedrequest if applicationTheme null View view resultview if view null AttributeSet attrs requestattrs if view instanceof TextView view instanceof Toolbar view instanceof BottomAppBar setFontview applicationThemegetFontName return result private void setFontView view String fontName if fontName null String formattedName fontNamereplaceAll trim typeface getTypefaceformattedName context if typeface null typeface ResourcesCompatgetFontcontext Rfontmontserratmedium if view instanceof TextView viewsetTypefacetypeface This code dont change font for EditText if inputtypepassword and for TabLayout How i can intercept it If the same context is passed in then just return the same LayoutInflater From what I gathered from the doc and source code currently we call only call ViewPumpinit once and have only one configuration If we want to add some new interceptors later we have to call init again after getting currently installed interceptors and add them in the new config It also means that having an activity specific configuration while maintaining an app wide configuration is possible but complicated In my case I have an appwide configuration and for one activity I have to override a specific widget with my own version One solution could be to add a ViewPump parameter to the ViewPumpContextWrapperwrap method and then inject the ViewPump instance into ViewPumpLayoutInflater and by default make it use ViewPumpget This change would also mean that the resolution would be eager and thus after creating the wrapped context changes to ViewPump wouldnt affect it anymore An easy solution would be to inject null in the ViewPumpLayoutInflater and when creating a view if the instance is null fallback to ViewPumpget as before This would prevent any behavior changes This will provide better safety for PRs when the sample app is not run manually In order to make it easier to debug inflation exceptions in large apps we should consider adding an API that provides the layout resource id that was trying to be inflated and possibly any other information that the app would like to tag the inflation request with Log all views that are inflated and their inflation times Potentially highlight views in the UI that take too long Example Printing the name of the view to be inflated results in duplicate lines getting printed since multiple InflationRequests could be issued from successive attempts using different methods for inflating a view