rawpath was missing in TestClient requests scope whereas uvicorn has rawpath in requests scope This problem makes it impossible to write tests when parsing raw path is necessary Ive created this app to prove this cat examplepy from starletteapplications import Starlette from starletteresponses import PlainTextResponse from starletterouting import Route from starlettetestclient import TestClient async def valuerequest value requestpathparams value path requestscope path rawpath requestscope rawpath return PlainTextResponse fvalue value npath path nrawpath rawpath n app StarlettedebugTrue routes Routevaluepath value def testapp client TestClientapp response clientgethel Flo hello result value hello npath hello nrawpath hel Flo n assert responsetext result Launch the app with uvicorn envbinuvicorn exampleapp Test it with curl curl localhost hel flo value hello path hello rawpath bhel flo Test app with TestClient envbinpython c import example exampletestapp Traceback most recent call last File string line in module File Usersjustasworktilaajavastuustarlettetestexamplepy line in testapp response clientgethel Flo hello File Usersjustasworktilaajavastuustarlettetestexamplepy line in value rawpath requestscope rawpath KeyError rawpath The purpose of this pr is to add the RAW value of a path route to the scope Recently I tried to get this value and it didnt seem possible Dont know if I did it the best way possible but it seems so The main reason at least for me for having this value available is to aggregate values based on each endpoint in metric systems Microsoft Application Insights New Relic Datadog Please let me know if I need to change something or if this is not desirable Thanks The following exception is thrown when I use uvicorn to drive my starlette project After control variates I am sure this is caused by Gzip Middleware File C Users AberS Documents Github indexpy venv lib sitepackages h writerspy line in sendeom raise LocalProtocolErrorToo little data for declared ContentLength h utilLocalProtocolError Too little data for declared ContentLength Hello I have opened this issue about back pressure on FastAPI and dmontagu agreed that it could be more interesting to discuss it on Starlette instead so here it is I would like to know if thoughts were put in the design of Starlette to prevent or help prevent system overloading due to lack of back pressure with async Here is the direct link to the article I think dmontagu gave a really good answer already but maybe you the authors maintainers and users of Starlette would like to share more about this Thanks An alternate implementation of x Refactor lifespan to run as an async generator x Allow lifespancontext argument to Starlette and Router x Add app argument to the lifespan context function End result API would be allowing the application to take a single async generator function that can encapsulate any required startupshutdown logic Taking the example in youd end up with this kind of pattern python async def lifespanapp async with dbConnectionPool as appstatepool yield app Starletteroutes middleware lifespanlifespan Im trying to request a route graphql that is being handled by a GraphQLApp It works well when I send requests from postman but it fails when going over preflight checks requesting from my web browser Access to fetch at from origin has been blocked by CORS policy Response to preflight request doesnt pass access control check It does not have HTTP ok status I slightly modified the code from starlettemiddlewarecorspy to have a little bit more information on what is happening The response content generated by preflightresponse is Disallowed CORS method POST header accesscontrolalloworigin header authorization header contenttype details summaryOPTIONS request detailssummary json startedDateTime T Z time request method OPTIONS url httpVersion HTTP headers name Host value name Connection value keepalive name Pragma value nocache name CacheControl value nocache name AccessControlRequestMethod value POST name Origin value name UserAgent value Mozilla Macintosh Intel Mac OS X AppleWebKit KHTML like Gecko Chrome Safari name AccessControlRequestHeaders value accesscontrolalloworiginauthorizationcontenttype name Accept value name Referer value name AcceptEncoding value gzip deflate name AcceptLanguage value frenUSq enq queryString cookies headersSize bodySize response status statusText Bad Request httpVersion HTTP headers name date value Tue Jan GMT name server value uvicorn name accesscontrolalloworigin value name accesscontrolallowmethods value GET name accesscontrolmaxage value name contentlength value name contenttype value textplain charsetutf cookies content size mimeType textplain compression text Disallowed CORS method headers headers headers redirectURL headersSize bodySize transferSize cache timings blocked dns ssl connect send wait receive blockedqueueing details I also have a regular access point admin that I can request without any problem on both postman and browser My code looks like so python graphqlapp GraphQLAppschemaschema executorclassAsyncioExecutor routes Routegraphql graphqlapp Routeadmin adminlogintoken methods POST middleware MiddlewareTrustedHostMiddleware allowedhostslistsettingsWEBALLOWEDHOSTS MiddlewareCORSMiddleware alloworigins MiddlewareAuthenticationMiddleware backendBasicAuthBackend app Starlette debugTrue routesroutes middlewaremiddleware I also can cheat a little by allowing all problematic headersmethods to my middleware but I guess if these headers are not allowed by default that must be for a reason diff Middleware CORSMiddleware alloworigins allowmethods POST GET allowheaders accesscontrolalloworigin authorization contenttype Thats also strange because CORS middleware never complain about these headers on POST requests but only on OPTIONS requests Did I do something wrong or is there a problem in starlette Im mentioning this feature because I can imagine wanting it in the future not because I actually need it right now One of the popular features of Pyramid is that it offers in addition to regular url dispatch the option of traversalbased routing A traversal uses the URL Universal Resource Locator to find a resource located in a resource tree which is a set of nested dictionarylike objects Traversal is done by using each segment of the path portion of the URL to navigate through the resource tree You might think of this as looking up files and directories in a file system Traversal walks down the path until it finds a published resource analogous to a file system directory or file The resource found as the result of a traversal becomes the context of the request Then the view lookup subsystem is used to find some view code willing to publish this resource by generating a response For example with py def getrootrequest return Resourcea Resourceb Resourcec Resource Navigating to abc will return the innermost resource Any object providing getitem can be used in the route lookup as the nested Resources are being used here The Pyramid docs on traversal are extensive Quick example Much ado about traversal Traversal details Combining Traversal and URL Dispatch Resources I could not figure out why include anotherTemplatehtml does not work in templates request kwargsgetrequest args idx should change to first find request in kwargs request kwargsgetrequest None second find request in args if request is None and lenargs request args idx exception when use decorator requires Traceback most recent call last File dataserverpyenvpy libpython sitepackagesuvicornprotocolshttphttptoolsimplpy line in runasgi result await appselfscope selfreceive selfsend File dataserverpyenvpy libpython sitepackagesuvicornmiddlewareproxyheaderspy line in call return await selfappscope receive send File dataserverpyenvpy libpython sitepackagesfastapiapplicationspy line in call await supercallscope receive send File dataserverpyenvpy libpython sitepackagesstarletteapplicationspy line in call await selferrormiddlewarescope receive send File dataserverpyenvpy libpython sitepackagesstarlettemiddlewareerrorspy line in call raise exc from None File dataserverpyenvpy libpython sitepackagesstarlettemiddlewareerrorspy line in call await selfappscope receive send File dataserverpyenvpy libpython sitepackagesstarlettemiddlewareauthenticationpy line in call await selfappscope receive send File dataserverpyenvpy libpython sitepackagesstarlettemiddlewarebasepy line in call response await selfdispatchfuncrequest selfcallnext File dataserverpyenvpy libpython sitepackagesstarletteexportermiddlewarepy line in dispatch raise e File dataserverpyenvpy libpython sitepackagesstarletteexportermiddlewarepy line in dispatch response await callnextrequest File dataserverpyenvpy libpython sitepackagesstarlettemiddlewarebasepy line in callnext taskresult File dataserverpyenvpy libpython sitepackagesstarlettemiddlewarebasepy line in coro await selfappscope receive send File dataserverpyenvpy libpython sitepackagesstarletteexceptionspy line in call raise exc from None File dataserverpyenvpy libpython sitepackagesstarletteexceptionspy line in call await selfappscope receive sender File dataserverpyenvpy libpython sitepackagesstarletteroutingpy line in call await routescope receive send File dataserverpyenvpy libpython sitepackagesstarletteroutingpy line in call await selfappscope receive send File dataserverpyenvpy libpython sitepackagesstarletteroutingpy line in app response await funcrequest File dataserverpyenvpy libpython sitepackagesfastapiroutingpy line in app rawresponse await dependantcallvalues File dataserverpyenvpy libpython sitepackagesstarletteauthenticationpy line in asyncwrapper request kwargsgetrequest args idx IndexError tuple index out of range PEP asynchronous iterators have the following signature python class AsyncIterable def aiterself return self async def anextself data await selffetchdata if data return data else raise StopAsyncIteration For example the Azure storage python library returns such an asynchronous iterator for blob downloading I cant pass it to Starlette though it will execute in the threadpool and crash there ERROR Exception in ASGI application Traceback most recent call last File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesuvicornprotocolshttphttptoolsimplpy line in runasgi result await appselfscope selfreceive selfsend File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesuvicornmiddlewareproxyheaderspy line in call return await selfappscope receive send File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesfastapiapplicationspy line in call await supercallscope receive send pragma no cover File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteapplicationspy line in call await selferrormiddlewarescope receive send File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarlettemiddlewareerrorspy line in call raise exc from None File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarlettemiddlewareerrorspy line in call await selfappscope receive send File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteexceptionspy line in call raise exc from None File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteexceptionspy line in call await selfappscope receive sender File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteroutingpy line in call await routescope receive send File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteroutingpy line in call await selfappscope receive send File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteroutingpy line in app await responsescope receive send File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteresponsespy line in call async for chunk in selfbodyiterator File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteconcurrencypy line in iterateinthreadpool yield await runinthreadpoolnext iterator File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteconcurrencypy line in runinthreadpool return await loopruninexecutorNone func args File homekorijnpyenvversions libpython concurrentfuturesthreadpy line in run result selffnselfargs selfkwargs File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagescontextvarsinitpy line in run return callableargs kwargs File homekorijnlocalsharevirtualenvsaiotestvQHOsYhomekorijnpyenvshimspythonlibpython sitepackagesstarletteconcurrencypy line in next return nextiterator TypeError AsyncChunkIterator object is not an iterator I have to wrap the iterator in an asynchronous generator function for it to work async def chunksgenerator async for i in blobchunks yield i return StreamingResponsechunksgenerator 