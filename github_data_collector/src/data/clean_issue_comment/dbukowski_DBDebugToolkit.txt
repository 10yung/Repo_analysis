Im created the ability to provide mainViewController as UINavigationController I needed to implement the ability to use mainViewController to custom shows Now we can use it like this let navigationController DBDebugToolkitmainViewController Rewire delegate to UISearchBar instance UISearchController is deprecated and is raising warning when compiling our code It also breaks Catalyst builds My initial setup for DBDebugToolkit is let shakeTrigger DBShakeTrigger DBDebugToolkitsetupwith shakeTrigger DBDebugToolkitsetupCrashReporting DBDebugToolkitaddClearDataShortcutItem let clearDefaultsAction DBCustomActionname Clear User Defaults DBDebugToolkitclearUserDefaults DBDebugToolkitaddclearDefaultsAction The issue i have no crash reports are being made I have intentionally crashed the app and even purposefully loaded large images and created OOM errors and there have been no crash logs being logged Did i miss some obvious configuration setup Added JsonViewer feature to conveniently view received or sent JSON Simulator Screen Shot iPhone X at Simulator Screen Shot iPhone X at Simulator Screen Shot iPhone X at Simulator Screen Shot iPhone X at There is a weird bug related to custom URLSession and URLCache Project setup Here is my AppDelegate that enables DBDebugToolkit class AppDelegate UIResponder UIApplicationDelegate var window UIWindow func application application UIApplication didFinishLaunchingWithOptions launchOptions UIApplicationLaunchOptionsKey Any Bool DBDebugToolkitsetup let window UIWindowframe UIScreenmainbounds selfwindow window windowbackgroundColor UIColorwhite windowrootViewController ViewController windowmakeKeyAndVisible return true In my ViewController I have a button that loads an url with CacheControl header set meaning the system should cache the response class ViewController UIViewController private lazy var button UIButton let button UIButtontype system buttonsetTitleLoad for normal buttonaddTargetself action selectorload for touchUpInside return button Custom URLSession with custom cache and custom diskPath private lazy var session URLSession let memoryCapacity MB let diskCapacity MB let cache URLCache memoryCapacity memoryCapacity diskCapacity diskCapacity diskPath comxxxxxyyyyy let configuration URLSessionConfigurationdefault configurationurlCache cache return URLSession configuration configuration delegate self delegateQueue nil override func viewDidLoad superviewDidLoad viewaddSubviewbutton buttonframe viewbounds MARK Private objc private func load A KB image small enough to be cached by the default URLSession session let url URLstring sessiondataTaskwith urlresume extension ViewController URLSessionDataDelegate MARK URLSessionDataDelegate func urlSession session URLSession dataTask URLSessionDataTask willCacheResponse proposedResponse CachedURLResponse completionHandler escaping CachedURLResponse Void printsessionwillCacheResponse completionHandlerproposedResponse func urlSession session URLSession dataTask URLSessionDataTask didReceive response URLResponse completionHandler escaping URLSessionResponseDisposition Void printdataTaskdidReceive response completionHandlerallow func urlSession session URLSession dataTask URLSessionDataTask didReceive data Data printdata data With DBDebugToolKit activated When I first clic on the load button the request is sent to the server and the logs are the following dataTaskdidReceive response data bytes When I clic a second time the request is not sent to the server the cached image is used and the logs are the same We can note that the log printsessionwillCacheResponse is never called even it should be The cache folder structure is Wrong cache structure Note the duplication of the Cachedb files Whats more the fsCachedData folder that contains the cached image is at the wrong location That means the image is saved in the default URLCache and not in the custom one I defined in my sesssion Without DBDebugToolKit activated If I trash the app and remove the line DBDebugToolkitsetup in the AppDelegate when I first clic on the image the request is sent to the server and the logs are the following dataTaskdidReceive response data bytes data bytes data bytes data bytes data bytes data bytes data bytes data bytes sessionwillCacheResponse Note that this time the logs are correct and sessionwillCacheResponse is printed The cache folder structure is Correct cache structure This time there is only one Cachedb file and the fsCachedData folder is under the comxxxxxyyyyy directory Which is the expected behavior Issue So the issue is that a custom url session with a custom url cache is never taken into account with DBDebugToolkit activated Whats more the URLSessionDataDelegate method urlSession dataTask willCacheResponse completionHandler is not called Due to the way DBRequestModel intercepts requests progress block is never called when using file upload task for a multipart request from AFNetworking Example code NSMutableURLRequest request AFHTTPRequestSerializer serializer multipartFormRequestWithMethodPOST URLString parametersnil constructingBodyWithBlock idAFMultipartFormData formData formData appendPartWithFileURL NSURL fileURLWithPathfilepathtoimagejpg namefile fileNamefilenamejpg mimeTypeimagejpeg errornil errornil AFURLSessionManager manager AFURLSessionManager alloc initWithSessionConfiguration NSURLSessionConfiguration defaultSessionConfiguration NSURLSessionUploadTask uploadTask uploadTask manager uploadTaskWithStreamedRequestrequest progress NSProgress Nonnull uploadProgress This block is never called after installing DBDebugToolkit dispatchasyncdispatchgetmainqueue Update the progress view progressView setProgressuploadProgressfractionCompleted completionHandler NSURLResponse Nonnull response id Nullable responseObject NSError Nullable error if error NSLogError error else NSLog response responseObject uploadTask resume This issue caused us a lot of problems related to disappearing file upload progress bars etc and we tracked the problem to be related with DBDebugToolkit We cant use it anymore because just calling DBDebugToolkit setup results in our app being unstable and behaving differently than it used to In my opinion if its impossible to intercept multipart upload request without breaking its documented behavior such a requests shouldnt be intercepted and logged at all logging such requests should be optin or at least we should have a way to disable it texteventstream requests are chunked requests with double newline breaks Because of the way DBURLProtocol intercepts requests what ends up happening is all response chunks are batched up until the end and then forwarded to the original response handler Any ideas how to fix this other than disabling interception altogether We use AFNetworking and have code like the following swift let httpSessionManager AFHTTPSessionManagerbaseURL baseURL httpSessionManagersetTaskWillPerformHTTPRedirectionBlock urlSession task response request in return someCheck request nil Stop following redirect After we integrated DBDebugToolkit we noticed that this block was not getting called anymore Disabling networking logging via DBDebugToolkitsetNetworkRequestsLoggingEnabledfalse fixes the issue I looked at AFNetworkings related code part part and it does not seem to do anything special which leads me to believe that this is a general issue Please let me know if additional information is needed to reproduce this behavior Hi it is sometimes helpful to be able to edit NSUserDefaults and Keychain items within the app Do you plan to add this feature Thanks Jidrich