Group padding is not needed to be set as it is defaulted to however the typescript type makes it required which is not necessary See for where it is defaulted Hi I use WebCola with typescript we have theese type definitions for Group export interface Group bounds Rectangle leaves Node groups Group padding number but when calling colad adaptord nodesgroups here we should pass leaves as number of nodes indexes If we pass leaves as array of nodes Node nothing works properly then hi in the results I get from colajs it seems like the unconnected nodes could be more neatly packed into the space images below Does anyone have any advice about this Screenshot from Im using the groups function and something similar seems to happen it seems like some members of the group could be pulled together more Screenshot from If you think it should behave differently then there is probably a bug in my code for rendering it Any other comments based on what you see appreciated thanks colin Bumps mixindeep from to details summaryCommitssummary f c ee fa ensure keys are valid when mixing in values See full diff in compare view details details summaryMaintainer changessummary This version was pushed to npm by doowb a new releaser for mixindeep since your current version details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details If some rectangles share the same topleft coordinates exemple let r new Array r new colaRectangle r new colaRectangle r new colaRectangle r new colaRectangle then removeOverlaps returns exactly the same rects but r new colaRectangle works correctly To make it work I add a small random value to top and left coordinates I used the triple ticks in the HTML code part so the code has syntax highlighting I removed the first link to Github as its a dead link I replaced the second link with a jsDelivr link GitHub serves files with a ContentType header set to textplain which can cause errors Also jsDelivr is way faster because its designed to serve that kind of file Before After I am using the d cola adapter as dropin replacement for the d force directed graph It is working very well thanks for this nice project except the performance for large graphs The graph loads and moves slowly and the CPU load is very high With the original D simulation I could ameliorate this problem by putting a counter in the ticked function and only updating the animation every n ticks However this does not help with cola it seems there is already a heavy CPU load outside the ticks Any ideas on how to boost performance for large graphs WebCola has UMD builds which is great This adds unpkg and jsdelivr fields so that tools like d require and requirejs can easily require these builds this means that if you depend on youll depend on the UMD build instead of being redirected to the CommonJS indexjs file Id like to use webcola as a layout engine only How do I initialize the coordinates eg from db and then update them eg on some outside button press or on drag without d Hey I have this snippet private getConstraints WebcolaConstraints const mainPath thispickPathIdentifierthispaths return type alignment axis x offsets thisidentifiersmapidentifier index node index offset mainPathindexOfStringidentifier and I have output like this type alignment axis x offset type alignment axis x offset type alignment axis x offset The problem is that second and third item are correctly in center but first should be moved to right and its not Right after start rendering cola changes structure and assigns default offsets to the first node