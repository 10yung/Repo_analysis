From the security review bug None of the sources auth the few sinks that have auth credentials are iirc not wired up to authenticate IP whitelisting andor presence in a blessed subnet was Good Enough Obvious issues there secure whether to attempt HTTPS or not with the elasticsearch host default false It makes sense to change the default to true as per My comment from the security review Is this essentially insecure by default If it s insecure with the default setting that should probably at minimum be called out explicitly in the wiki So IMO there either shouldnt be an insecure default location configured or at least the wiki documentation should very clearly state that the default should be changed prior to any production deployment blt suggests this issue may be interesting for more than just scripts Depends on what cernan is shipping of course but yeah I guess it is The wiki should be amended Im open to suggestions for alternative behavior My main thinking when I wrote this was that its easy to screw up the operation of cernan by fiddling with those files We never implemented checksums or recovery for queue files on account of there not being a call for them at the time of implementation Weak area generally Oh youre talking about scripts here Well both are probably unsafe If you craft a special purpose queue file for say the kafka sink you can get cernan to ship whatever you want Same deal for scripts As noticed in security review Followup action We should document a limit to this value and check the users input emit a warning if the value is too large As per This is part of the generated protobuf code Itd be reasonable to regen this and see if the unsafe bits have disappeared Itd also be willing to open up an issue for deprecation in the next release removal in the release after The rlua project looks to be pretty tidy and has a full head of steam behind it as of this writing Our specific lua mond is a fork that has little but maintenance work go into it While kcov was broken cernans unit test coverage dropped to I have temporarily reduced the project requirement to but we should also work on improving the coverage to again Hello friends Rusoto has recently gained hyper support and basic async behavior Since cernan is not only open source but also a potentially high traffic user of AWS services wed love some feedback on the new version Async is available in the master branch of Rusoto Using this version and helping us find any bugs or issues would be greatly appreciated This is a breaking change to the API since we return RusotoFutures instead of the call result Updated integration tests including Kinesis are available Thanks For more visibility into how many retries its taking to flush cernans log lines buffer I suppose a counter for any failures would be helpful here too if theres not already one Right now the flush function has no way of signaling error As pulltab noted the InfluxDB sink flush will loop infinitely without an influxdb to report to which is not great is caused by an inability to signal error upward This can be repaired by having Result kicked out of the function or some other kind of failure 