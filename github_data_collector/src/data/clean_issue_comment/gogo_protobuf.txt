Hello Im newbie in grpc I have some problems with gogoprotobuf After using command protoc gogoout proto I have this errors Screenshot from I tried change Makefile and write path to gogoprotobuf but it didnt help me I will be very grateful if someone can help me Sorry for my english protocgengogodescriptordescriptorpbgo does not contain generated ProtoSize Marshal or Unmarshal funcs This means that if you generate code for some application message type that includes eg a DescriptorProto field and which has protosizer marshaler or unmarshaler enabled then that generated code will not compile Worse the problem is recursive you can disable these plugins on the application message type but then you also have to disable the plugins for any messages that use that message type as well Add a new extension casttypewith that could be used to define and use fields of an nonlocal type by using a custom caster type The caster should implement func c Caster Equala b Castee bool func c Caster Sizea Castee int func c Caster MarshalToa Castee buf byte int error func c Caster Unmarshalbuf byte Castee error func c Caster NewPopulated Castee The protobuf field type should be bytes The feature is usable only with marshal and unmarshal plugins and features like JSONPB and text marshaling is are incompatible The castrepeated extension changes the generated field type of a repeated field and expects that the whole array generated by a repeated field is castable to this type Example from the tests message CastRepeated repeated ProtoType Field gogoprotocastrepeated ProtoTypesPointer go type ProtoTypesPointer ProtoType generated struct type CastRepeated struct Field ProtoTypesPointer protobufbytes repnameField castrepeatedProtoTypesPointer jsonField omitempty This adds support for using customtype with string fields along with corresponding test messages in thetestproto Currently customtype supports bytes and message types Strings have the same wire encoding and thus it seems logical to include support for them as well The immediate use case is for encoding big integers and decimals where the safest cross platform wire encoding is a string for gogoprotobuftypesTimestamp is generated by protocgengogo and imports gogoprotobufproto To avoid cycling import gogoprotobuf implement a fake timestamp And it does not implement newMarshaler or Marshaler interface which will cause the Marshal use the slowest path Then the global marshal info lock will be performance bottleneck A simple workaround fix is A better solution is use a real Timestamp instead of a fake timestamp To avoid cycling import we can import golangprotobuf and use Timestamp generated by golang protobuf go import ptimestamp githubcomgolangprotobufptypestimestamp type timestamp ptimestampTimestamp Then the performance will be highly improved This PR is also submitted to This is a workaround to Signedoffby TennyZhuang zty gmailcom Thie PR Use RWMutex to optimize getMarshalInfo and getUnmarshalInfo for these functions only n number of message type will hit Write and mnumber of message n will hit Read its the best case to use RWMutex instead of Mutex This optimization introduce huge improvement in our scenario We have worker and controller and work and controller keep heartbeat with gRPC They also exchange the job info with each other The message is like proto message Job uint jobid Some other info message Heartbeat repeated Job jobs About jobs in every Heartbeat and the heartbeat QPS in controller is about The controller handle the Heartbeat in about ms and the network latency is about ms but the client will use about s in maximum to finish a RPC call We use golang pprof block profile and it seems that almost all block is caused by one global Mutex in protobuf package After optimization in our use case the rpc call from client will only use about ms as our expected What version of protobuf and what language are you using libprotoc go version go darwinamd What did you do package main import fmt githubcomgogoprotobufproto githubcomskycloudtecprotov eventti func main foo eventtiEmailServerCfg Account testtestnet Password tes Host localhost Port Protocol eventtiEmailProtocolSMTP req eventtiCreateNotificationChannelReq Name test Etypes eventtiEventTypeeventtiEventTypeDEVICECONFIGUPDATED Type eventtiNotificationChannelTypeEMAIL Cfg eventtiCreateNotificationChannelReqEmailServerCfgEmailServerCfg foo Target nil fmtPrintlnreqString protoMarshalreq What did you expect to see exit properly What did you see instead nametest etypesDEVICECONFIGUPDATED typeEMAIL emailservercfgaccountsongtianyiskycloudnet passwordtes hostlocalhost port protocolSMTP panic runtime error invalid memory address or nil pointer dereference signal SIGSEGV segmentation violation code x addr x pc x a goroutine running githubcomgogoprotobufprotomakeOneOfMarshalerfunc xc c x x Usersworkgopkgmodgithubcomgogoprotobufv prototablemarshalgo x githubcomgogoprotobufprotomarshalInfosize xc c xc c c xc c e Usersworkgopkgmodgithubcomgogoprotobufv prototablemarshalgo x d githubcomgogoprotobufprotoInternalMessageInfoSize xc c e x d c xc c c x Usersworkgopkgmodgithubcomgogoprotobufv prototablemarshalgo x githubcomgogoprotobufprotoMarshal x d c xc c c xc b f x x xa x Usersworkgopkgmodgithubcomgogoprotobufv prototablemarshalgo xfe mainmain Usersworktrashcreatenotificationreqgo x e Anything else we should know about your project environment Got a grpc handler func h hello Echoctx contextContext req pbPayload pbPayload error var res pbPayload typed nil or can be not typed return res nil With default grpclibrary there is no panic protobuf returns to a client an error ErrNil errorsNewproto Marshal called with nil But with gogofaster grpc server crashes with a panic signal SIGSEGV segmentation violation code x addr x pc x a goroutine running githubcommyorghelloexamplepbPayloadMarshalToSizedBuffer x x ab d x x x bd x e x fca Usersun gosrcgithubcommyorghelloexamplepbhellopbgo x githubcommyorghelloexamplepbPayloadMarshal x x fca x x a a x x fca Usersun gosrcgithubcommyorghelloexamplepbhellopbgo xc googlegolangorggrpcencodingprotocodecMarshal x fca x xc x x a bb xc x b Usersun gopkgmodgooglegolangorggrpcv encodingprotoprotogo x googlegolangorggrpcencode x a x ab d x fca x x ab d x a bb xc x f x ca Usersun gopkgmodgooglegolangorggrpcv rpcutilgo x googlegolangorggrpcServersendResponse xc eac x f xc e xc ba x fca x x x xc a c x Usersun gopkgmodgooglegolangorggrpcv servergo x googlegolangorggrpcServerprocessUnaryRPC xc eac x f xc e xc ba xc fb x a x x x Usersun gopkgmodgooglegolangorggrpcv servergo x googlegolangorggrpcServerhandleStream xc eac x f xc e xc ba x Usersun gopkgmodgooglegolangorggrpcv servergo xd googlegolangorggrpcServerserveStreamsfunc xc a c xc eac x f xc e xc ba Usersun gopkgmodgooglegolangorggrpcv servergo xbb created by googlegolangorggrpcServerserveStreamsfunc Usersun gopkgmodgooglegolangorggrpcv servergo xa Generated code func m Payload MarshalToSizedBufferdAtA byte int error if m nil return nil ErrNil i lendAtA if lendAtA we must exit with an error Size method makes nil check i var l int l if mNumber nilpointer panic m There should be the check for a backward compatibility The entire application must not to be crashed in the runtime it must return an error The right logic was described here References added tendermint to the users list Signedoffby Marko Baricevic marbar yahoocom