 Description I am running a Bolt app locally proxied with ngrok and the Slack API Enable Subscriptions page will not verify the Events Request URL In the ngrok inspector it looks like the response is correct but on the Slack API page I receive the error Your URL didnt respond with the value of the challenge parameter but no other information What type of issue is this place an x in one of the x bug enhancement feature request question documentation related testing related discussion Requirements place an x in each of the x Ive read and understood the Contributing guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct x Ive searched for any related issues and avoided creating a duplicate issue Bug Report Filling out the following details about bugs will help us solve your issue sooner Reproducible in package version node version OS versions macOS Steps to reproduce I am following the Getting Started instructions on this page On Slack API page create a new Slack app for a workspace then create a new bot user Copy the signing secret and bot auth token On local machine setup new Bolt project Create directory npm init npm i S slackbolt set environment variables copied above create appjs and paste contents from instructions start app On local machine start ngrok to proxy http port On Slack API Events Subscriptions page enable events then in the Request URL field post the ngrok https URL followed by slackevents path Expected result Events URL is verified Actual result Bolt app responds to event URL verification request but the Slack API page is unable to verify the URL and displays the error Your URL didnt respond with the value of the challenge parameter Attachments Slack API Events URL verification error Request in ngrok inspector Response in ngrok inspector Summary This converts all middleware to be promise based as per Depends on NOTE I didnt include any documentation updates as got giant because of it Ill follow this with a pr for docs alone Requirements place an x in each x Ive read and understood the Contributing Guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct Summary A few edits to make the Getting Started guide reflect Granular Bot permissions Requirements place an x in each x Ive read and understood the Contributing Guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct Description APIs supporting Block Kit will respond with invalidblocks if the payload is invalid which the app will log with apperror callback But the error payload response from the API will actually include really helpful information about WHAT about the payload is invalid that I dont seem to have access to in that callback You can see the larger helpful error messaging in the network tab for the block kit builder img width altScreen Shot at AM src What type of issue is this place an x in one of the x bug x enhancement feature request question documentation related testing related discussion Requirements place an x in each of the x Ive read and understood the Contributing guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct x Ive searched for any related issues and avoided creating a duplicate issue Bug Report Reproducible in package version slackbolt v Steps to reproduce Use bolt to send an invalid payload to an api that supports block kit aka sending block type sections instead of section Log the error that comes through in the apperror callback See that the information about which block is causing the error is not included Expected result I would expect to at least have access to the information within the callback even if its not logged by default Actual result Inspecting the error object does not have any other information than the error string Summary Makes say ack and respond return promises Per discussion in I possibly changed a few things from the discussion above Ill leave comments Requirements place an x in each x Ive read and understood the Contributing Guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct Description When an incoming event fails to authenticate via Bolts authorizeFn the following warning is thrown Then the following error is thrown that the incoming event is not acknowledged Is this the expected design If listeners are not being called why do we need to call ack What type of issue is this place an x in one of the x bug enhancement feature request question documentation related testing related discussion Requirements place an x in each of the x Ive read and understood the Contributing guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct x Ive searched for any related issues and avoided creating a duplicate issue Bug Report Filling out the following details about bugs will help us solve your issue sooner Reproducible in package version node version v OS versions macOS Catalina Steps to reproduce With authorizeFn do not authorize an incoming event Expected result Incoming event is not sent to listeners receiverAckTimeoutError is not thrown Actual result receiverAckTimeoutError is thrown Attachments T APPPROCWEB ERR Error Authorization of incoming event did not succeed T APPPROCWEB ERR at ObjecterrorWithCode homevcapdeps nodemodulesslackboltdisterrorsjs T APPPROCWEB ERR at authorizationErrorFromOriginal homevcapdeps nodemodulesslackboltdistAppjs T APPPROCWEB ERR at authorizeResultauthorizecatch homevcapdeps nodemodulesslackboltdistAppjs T APPPROCWEB ERR at processtickCallback internalprocessnexttickjs T APPPROCWEB ERR code slackboltauthorizationerror T APPPROCWEB ERR original T APPPROCWEB ERR Error No matching authorizations for E SFGS WT Q SG T APPPROCWEB ERR at Appmoduleexports as authorize homevcapappsrcauthorizeFnjs T APPPROCWEB ERR at ApponIncomingEvent homevcapdeps nodemodulesslackboltdistAppjs T APPPROCWEB ERR at ExpressReceiverAppreceiveronmessage homevcapdeps nodemodulesslackboltdistAppjs T APPPROCWEB ERR at ExpressReceiveremit eventsjs T APPPROCWEB ERR at ExpressReceiverrequestHandler homevcapdeps nodemodulesslackboltdistExpressReceiverjs T APPPROCWEB ERR at Layerhandle as handlerequest homevcapdeps nodemodulesexpresslibrouterlayerjs T APPPROCWEB ERR at next homevcapdeps nodemodulesexpresslibrouterroutejs T APPPROCWEB ERR at respondToUrlVerification homevcapdeps nodemodulesslackboltdistExpressReceiverjs T APPPROCWEB ERR at Layerhandle as handlerequest homevcapdeps nodemodulesexpresslibrouterlayerjs T APPPROCWEB ERR at next homevcapdeps nodemodulesexpresslibrouterroutejs T APPPROCWEB ERR WARN Authorization of incoming event did not succeed No listeners will be called T APPPROCWEB ERR Error An incoming event was not acknowledged before the timeout Ensure that the ack argument is called in your listeners T APPPROCWEB ERR at receiverAckTimeoutError homevcapdeps nodemodulesslackboltdistExpressReceiverjs T APPPROCWEB ERR at TimeoutsetTimeout as onTimeout homevcapdeps nodemodulesslackboltdistExpressReceiverjs T APPPROCWEB ERR at ontimeout timersjs T APPPROCWEB ERR at tryOnTimeout timersjs T APPPROCWEB ERR at listOnTimeout timersjs Summary This pull request fixes refer to the issue for details Requirements place an x in each x Ive read and understood the Contributing Guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct Description Disclaimer Creating this issue doesnt mean the Bolt team is going to provide a proper way to support FaaS eg AWS Lambda Google Cloud Functions Cloud Functions for Firebase etc in the short run I wanted to create a place to discuss any future possibilities to support FaaS in some ways The challenge we have with FaaS One limitation you should know when you run Bolt apps on FaaS is that any asynchronous operations can be silently terminated once its internetfacing function responds to an incoming HTTP request from Slack Examples of asynchronous operations here are say respond appclient calls and whatever internally starts Promise operations separately from ack completion Lets say you want to create an AWS Lambda function that is free from Slacks second timeouts and the limitation I mentioned above In this case the following code is a solution js const App ExpressReceiver requireslackbolt import AWS requireawssdk const receiver new ExpressReceiver signingSecret processenvSLACKSIGNINGSECRET const app new App receiver token processenvSLACKBOTTOKEN appcommandhello body ack if isLocalDevelopment ack mainLogicbody else const lambda new AWSLambda const params AWSLambdaInvocationRequest InvocationType Event async invocation FunctionName functionName Payload JSONstringifybody const lambdaInvocation await lambdainvokeparamspromise check the lambdaInvocation here ack function mainLogicbody do something it may take a long time frontend internetfacing function handling requests from Slack const awsServerlessExpress requireawsserverlessexpress const server awsServerlessExpresscreateServerreceiverapp moduleexportsfrontend event context awsServerlessExpressproxyserver event context backend internal function for anything apart from acknowledging requests from Slack moduleexportsbackend async function event context if you reuse this function for other patterns need to dispatch the events await mainLogicevent return statusCode body JSONstringify message done One possible idea I came up with Let me refer to my comment in another issue One feasible idea is creating a FaaS support package as a rdparty one That means the package wont be managed by slackapi The authors of such packages can be anyone If someone starts such projects Ill be more than happy to support them As a first step Ill publish my prototype implementation in my own repository and will start a new GitHub issue in this repository I hope it will be a good starting point for people interested in FaaS support Even though my prototype is still in very alpha quality checking it could be helpful for the folks that may start new projects If Bolt changes its APIs and internals it may be feasible to have a rdparty generalized npm package that offers proper FaaS supports for Bolt Here is my prototype demonstrating it It doesnt support all the features yet but it just works for supported cases Here is a simple example code just pasted from the repositorys README js const app new TwoPhaseApp token processenvSLACKBOTTOKEN this receiver tries to get AWS credentials from env variables by default receiver new AwsLambdaReceiver signingSecret processenvSLACKSIGNINGSECRET appcommandlambda ack ack phase function compatible with current listener function ackack response thenasync body say phase function this one is invoked as another lambda function return sayHow are youthen sayIm good Now developers dont need to directly use AWS Lambda SDK AwsLambdaReceiver does everything for you Apart from the things specific to AWS this approach is applicable to any others not only FaaS In this design the two phases are Phase internetfacing handler responsible for request acknowledgment and synchronous things eg signature verification dispatching requests payload validation and responding a message as part of HTTP responses Phase internal function can do anything with the relayed request body asynchronously use respond to send a message to a user asynchronously Phase function is supposed to return a single Promise as its result The design makes easier to write code in idiomatic ways like using thencatch andor Promiseall for working with Promises Next steps If someone is interested in starting with my PoC prototype to build a rdparty library Im happy to donate my code its under the MIT license and will be more than happy to contribute to it as an individual To realize such rd parties a few changes on the Bolt side are still needed aoberoi shared a related proposal at Join the conversation to share your thoughts andor feedback What type of issue is this place an x in one of the bug enhancement feature request question documentation related testing related x discussion Requirements place an x in each of the x Ive read and understood the Contributing guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct x Ive searched for any related issues and avoided creating a duplicate issue Using appaction to monitor apphomeopenend fires twice when a user clicks on the messages tab javascript appeventapphomeopened async context consolelogcontextpayloadtab What type of issue is this place an x in one of the x bug enhancement feature request question documentation related testing related discussion Requirements place an x in each of the x Ive read and understood the Contributing guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct x Ive searched for any related issues and avoided creating a duplicate issue Bug Report Reproducible in package version node version v OS versions OSX Steps to reproduce javascript appeventapphomeopened async context consolelogcontextpayloadtab Expected result Clicking back and forth between the Home and Messages tab should appear in the console as home messages home messages Actual result Summary This pull request depends on The essential change which fixes is Requirements place an x in each x Ive read and understood the Contributing Guidelines and have done my best effort to follow them x Ive read and agree to the Code of Conduct 