Fixes cChocoPackageInstaller TestTargetResource setting optional pSource parameter when calling TestLatestVersionInstalled There was a change in TestTargetResource when passing a custom source to TestLatestVersionInstalled Previously the code was if AutoUpgrade and isInstalled result TestLatestVersionInstalled pName Name pSource Source else result isInstalled Current code it line in cChocoPackageInstallpsm if AutoUpgrade and isInstalled if Source string pSource pSource Source result TestLatestVersionInstalled pName Name pSource else result isInstalled which results in choco being executed as choco upgrade package noop sourcepSource customsource This is related to and adds a new resource parameter called UpgradeLowerVersions that causes the cChocoPackageInstall resource to call choco update instead of executing an uninstallinstall when the package is already installed and on a lower version This is in answer to and partly related to This resource allows control over config settings via choco config setunset It also has an option for querying the xml settings file directly This is for performance reasons as discussed in It is optional and not recommended for ongoing management but makes the resource much quicker seconds vs seconds see sample output below Sample output powershell normal mode VERBOSE SURFACE LCM Start Set VERBOSE SURFACE DSCEngine Importing the module C Program Files WindowsPowerShell Modules cChoco DscResources cChocoConfig cChocoConfigpsm in force mode VERBOSE SURFACE LCM Start Resource cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE LCM Start Test cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE cChocoConfig webRequestTimeoutSeconds Importing the module cChocoConfig in force mode VERBOSE SURFACE cChocoConfig webRequestTimeoutSeconds Querying choco config via CLI VERBOSE SURFACE cChocoConfig webRequestTimeoutSeconds webRequestTimeoutSeconds is in desired state VERBOSE SURFACE LCM End Test cChocoConfig webRequestTimeoutSeconds in seconds VERBOSE SURFACE LCM Skip Set cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE LCM End Resource cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE LCM End Set VERBOSE SURFACE LCM End Set in seconds querying xml directly VERBOSE SURFACE LCM Start Set VERBOSE SURFACE DSCEngine Importing the module C Program Files WindowsPowerShell Modules cChoco DscResources cChocoConfig cChocoConfigpsm in force mode VERBOSE SURFACE LCM Start Resource cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE LCM Start Test cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE cChocoConfig webRequestTimeoutSeconds Importing the module cChocoConfig in force mode VERBOSE SURFACE cChocoConfig webRequestTimeoutSeconds Querying chco config via chocolateyconfig xml VERBOSE SURFACE cChocoConfig webRequestTimeoutSeconds webRequestTimeoutSeconds is in desired state VERBOSE SURFACE LCM End Test cChocoConfig webRequestTimeoutSeconds in seconds VERBOSE SURFACE LCM Skip Set cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE LCM End Resource cChocoConfig webRequestTimeoutSeconds VERBOSE SURFACE LCM End Set VERBOSE SURFACE LCM End Set in seconds feedback welcome As discussed in here is support for specifying a minimum allowed version TestTargetResource returns true if the installed package version is greater or equal to that specified This helps when user are given permission to update to the latest version of apps not yet specified in DSC Originally I had intended to include a MaxmimumVersion also but on reflection I dont have a use case for this so its probably better to not include it for no reason One caveat that i welcome feedback on is that when using MinimumVersion the test is carried out on SystemVersion objects as opposed to strings for the Version parameter This could be confusing but I didnt want to alter the behaviors of Version as it is an existing feature Let me know if you have any concerns about this There is an unexpected behaviour thats getting the envChocolateyInstall as null value Im facing an issue to use the cChoco install package DSC because for some reason the envChocolateyInstall variable is empty Therefore I added a line to dynamically get the chocoexe sourcedue the envChocolateyInstall is empty When large packages are being downloaded WinRM can report there is an issue with envelope size The issue has been documented but needs investigation if we can resolve work around it without any changes on the end system See Slack chat for info THere is cChocoFeature but not cChocoConfig to manage config of Chocolatey directly For completeness a new resource should be added Internally we have moved away from cChocoFeature and instead use a custom resource Our custom resource reads from Chocolateyconfig xml to determine if any given feature is enabled rather than running powershell choco feature This gives us a pretty reasonable boost in speed for the routine consistency checks Would you consider us merging our changes upstream to this repo I can appreciate the idea of reading the config file might not be desired and possible considered antipattern As an idea of speed increase and thus the reason we went this way powershell PS D Code measurecommand xml Getcontent C ProgramData chocolatey config chocolateyconfigSelect SingleNodechocolateyconfigadd keycacheLocation value Days Hours Minutes Seconds Milliseconds Ticks TotalDays E TotalHours E TotalMinutes E TotalSeconds TotalMilliseconds PS D Code MeasureCommand choco config get name cachelocation Days Hours Minutes Seconds Milliseconds Ticks TotalDays E TotalHours TotalMinutes TotalSeconds TotalMilliseconds worth noting also seconds isnt exactly bad but we have massively varying number on this which was the other reason we made a custom resource For instance on my workstation the latter command takes seconds Something else entirely to look into but nonetheless the xml method is blindingly quick Thoughts and feedback welcome