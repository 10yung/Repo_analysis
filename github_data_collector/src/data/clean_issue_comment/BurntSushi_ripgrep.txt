My project currently uses a wrapper type around globsets GlobMatcher in order to implement Serialize and Deserialize The implementation is pretty trivial Does it make sense for the globset crate to implement SerializeDeserialize Id like to have them on both the Glob and GlobMatcher types for myself but its possible other types make sense This would probably want to be behind a feature flag If this sounds okay Ill file a PR I think this change is similar to the spirit of but that PR hasnt been reviewed yet as of time of this writing The GlobMatcher type holds onto the Glob object that was used to create it This PR exposes a reference to it through a getter My main use is that I have a project that uses globset by wrapping the GlobMatcher type in a type that I can implement Serdes Serialize and Deserialize on In order to get access to the original pattern I currently need to redundantly keep my own copy of the Glob struct to get access to its string pattern This API would enable me to only need to keep around GlobMatcher What version of ripgrep are you using ripgrep SIMD AVX compiled SIMD AVX runtime How did you install ripgrep yum install ripgrep What operating system are you using ripgrep on RHEL Describe your question feature request or bug I would like to use ripgrep in a way that I can tell it to ignore files on certain filesystems ripgrep can ignore certain filenames and paths and it can be told not to cross filesystem boundaries with onefilesystem Taking this one step further Id like to be able to say for example to ignore nfs filesystems A similar feature can be found in updatedb mlocate which has a addprunefs option used to Add entries in whitespaceseparated list FS to PRUNEFS The daily cron job for updatedb on my system does this nodevsawk nodev rootfs zfs print procfilesystems usrbinupdatedb f nodevs This basically looks in the kernels table of known filesystems and pulls out the ones marked nodev then tells updatedb to ignore files located on a filesystem that is one of those types It would be awesome to have an option for ripgrep to tell it to do something like that I very rarely want to search files under proc or run or so on This would help with that And this option would be especially useful to me to be able to avoid searching NFS mounts Obviously sometimes you want to be able to search NFS mounts but I have servers with NFS mounts that are terabytes in size and its just user data so I want ripgrep to ignore those and just search local filesystems I would like to see this implemented as an environment variable and a command line option To fix properly The globsetGlob type new function creates a new value with an str parameter which returns an ResultGlob Error object This is exactly what stdstrFromStrfromstr stdstrFromStr defines Libraries like clap use stdstrFromStr to create objects from provided commandline arguments This change makes this library usable without a newtype wrapper stdstrFromStr clap new Git looks for this file in GITCOMMONDIR which is usually the same as GITDIR git However when searching inside a linked worktree git is usually a file that contains the path of the actual git dir which in turn contains a file commondir which references the directory where infoexclude may reside alongside other configuration shared across all worktrees This directory is usually the git dir of the main worktree Unlike git this does not read environment variables GITDIR and GITCOMMONDIR because it is not clear how to interpret them when searching multiple repositories Fixes What version of ripgrep are you using ripgrep same in master I think How did you install ripgrep What operating system are you using ripgrep on Arch Linux Describe your question feature request or bug If I exclude a file privately in gitinfoexclude ripgrep ignores that file as expected but only when searching inside the main worktree In linked worktrees the file is not ignored If this is a bug what are the steps to reproduce the behavior sh binsh rm rf repro reproworktree git init repro cd repro touch committed git add committed git commit m initial commit echo ignored gitinfoexclude git worktree add reproworktree cd reproworktree touch ignored echo echo rg files rg files echo git lsfiles git lsfiles excludestandard others git lsfiles git lsfiles excludestandard others If this is a bug what is the actual behavior rg files ignored committed If this is a bug what is the expected behavior I think it should behave like git lsfiles git lsfiles excludestandard others rg files committed What version of ripgrep are you using rg version ripgrep SIMD AVX compiled SIMD AVX runtime How did you install ripgrep Compiled from source What operating system are you using ripgrep on MacOS Catalina Describe your question feature request or bug I think that passing a plain directory as argument to g should match files in that directory Moreover prefixing a match string with should negate the results This seems to the behaviour most of the time If this is a bug what are the steps to reproduce the behavior from temp empty directory mkdir a b echo hello atesttxt cp atesttxt b rg g a hello return nothing rg g b hello returns match from file in a If this is a bug what is the actual behavior Above script yields following showing output of negated search only sh tmprunsh atesttxt hello If this is a bug what is the expected behavior Should have yielded results for either both or neither preferably both the invocations in the reproduction steps What version of ripgrep are you using What operating system are you using ripgrep on openSUSE Tumbleweed Describe your question feature request or bug While working on reproducible builds for openSUSE I found that ripgrep man page content differs on different CPUs diff usrsharemanman rg gz SIMD AVX compiled SIMD AVX runtime SIMD AVX compiled SIMD AVX runtime The strings come from ripgrep srcapprs fn runtimecpufeatures If this is a bug what are the steps to reproduce the behavior use my rbk script from the reproducibleopensuse repo needs some setup and an openSUSE account or do a distributionrelease build on different CPUs eg I use kvm cpu qemu and cpu host If this is a bug what is the actual behavior The man page differs depending on build machine CPU If this is a bug what is the expected behavior The man page should be the same on every build everytime everywhere See for why this matters Using ripgrep I ran into a hang using ripgrep from GNU Emacs via helmrg on Windows Window creates a stdin and ripgrep detects that stdin exists and waits for data making it look like ripgrep is hung I was able to easily work around the issue once I saw that I could explicitly specify the directory to search Having this in the doc may save others confusion Also having the note about gitignores are only respected if git exists The man page intro currently contains ripgrep rg recursively searches your current directory for a regex pattern By default ripgrep will respect your gitignore and automatically skip hidden filesdirectories and binary files Could it be updated to ripgrep rg recursively searches your current directory for a regex pattern By default ripgrep will respect your gitignore files when a git directory exists and automatically skip hidden filesdirectories and binary files ripgrep will automatically detect if stdin exists and search stdin for a regex pattern eg ls rg foo In some environments stdin may exist when it shouldnt To turn off stdin detection explicitly specify the directory to search eg rg foo It would also be nice to mention why you need a git directory to have gitignores but that may be lost in time Thanks