The gemtestjava job has never been stable but I tried to make sure it would use the versionundertest in f d c Since that commit we had Hoe issues see c a a and racc issues see Now were seeing what I think is a real failure of the versionundertest changes from f d c and its blocking PRs from going green from pushd gems tmpbuild c gems tmpbuild c ls nokogiri javagem head n gemfilenokogiri javagem sha sum nokogiri javagem de aec ae ec f fa c e d f affa a fa a nokogiri javagem gem install nokogiri javagem Successfully installed nokogiri java gem installed gem list d nokogiri LOCAL GEMS nokogiri Platform java Authors Aaron Patterson Mike Dalessio Yoko Harada Tim Elliott Akinori MUSHA John Shahid Lars Kanis Homepage License MIT Installed at usrlocalbundle Nokogiri is an HTML XML SAX and Reader parser nokogiri v Nokogiri warnings nokogiri ruby version platform java description jruby ad e OpenJDK Bit Server VM b on b jit linuxx engine jruby jruby xerces XercesJ nekohtml NekoHTML popd tmpbuild c pushd nokogiri tmpbuild c nokogiri tmpbuild c pwd export BUNDLEGEMFILEtmpbuild c nokogiriGemfile BUNDLEGEMFILEtmpbuild c nokogiriGemfile bundle v Bundler version bundle config Settings are listed in order of priority The top value will be used path Set via BUNDLEPATH usrlocalbundle appconfig Set via BUNDLEAPPCONFIG usrlocalbundle silencerootwarning Set via BUNDLESILENCEROOTWARNING true gemfile Set via BUNDLEGEMFILE tmpbuild c nokogiriGemfile bin Set via BUNDLEBIN usrlocalbundlebin bundle add nokogiri skipinstall Fetching gem metadata from Resolving dependencies bundle install local Resolving dependencies Could not find hoe in any of the sources bundle install Fetching gem metadata from Resolving dependencies Your bundle is locked to nokogiri java but that version could not be found in any of the sources listed in your Gemfile If you havent changed sources that means the author of nokogiri java has removed it Youll need to update your bundle to a version other than nokogiri java that hasnt been removed in order to install What problem is this PR intended to solve Avoidable extra memory allocation While profiling a project to optimize memory usage the following came to my notice Allocated String Report nokogiri libnokogirixmlnoderb which is The explanation is that a string of any length String generates a new string even if string literals are frozen via the pragma Therefore if the above line was executed with indenttimes a times there would be an allocation of empty strings irrespective of indenttext This PR replaces this deterministic allocation with a single frozen string literal Hope the native method doesnt mutate it Have you included adequate test coverage No change in behavior Does this change affect the C or the Java implementations NA The existing signature conflicts with one added to JRuby Specifically the new signature in JRuby returns RubyArray which causes a compilation error on this line in Nokogiri because it attempts to use a more general return type We would prefer to keep the specific return type in JRuby If we patch JRuby then will never be able to compile any version of Nokogiri If we patch Nokogiri all versions of JRuby can compile current and future Nokogiri Versions prior to will be able to compile all existing releases of Nokogiri I do not believe the change in breaks anything at runtime since the JVM does not care about this particular return type mismatch unless someone actually returns a nonRubyArray object Fixes XmlNodeSet defines a toa method here JRuby originally defined a superclass toa method in RubyBasicObject that did not take a ThreadContext parameter However in JRuby we made another set of changes to pass ThreadContext through more methods including the toa in RubyBasicObject This added a new signature RubyArray toaThreadContext with the old RubyArray toa left deprecated As a result the method in XmlNodeSet no longer compiles because it attempts to return a more general type IRubyObject as opposed to RubyArray This change affects the Java gem and is an attempt to start using Maven artifacts for all the jar dependencies in Nokogiri See The commented versions cant be found on Maven Central Until we can resolve them they would have to remain as bare jar files in the repository and gem Next step for this PR would be to get the gem building using jardependencies and remove the properlyversioned jars from the repository Sometime between Sept and Sept code coverage broke and is being calculated before tests are actually run The loading mechanism must include the rubyversion specific path This is a fixup to commit acd aa d d b b ce e ad d What problem is this PR intended to solve Loading of fat binary gems fails on master branch on Windows with from CRuby x binnokogiri in main from CRuby x binnokogiri in load from CRuby x librubygems gemsnokogiri x mingw binnokogiri in top required from CRuby x libruby rubygemscoreextkernelrequirerb in require from CRuby x libruby rubygemscoreextkernelrequirerb in rescue in require from CRuby x libruby rubygemscoreextkernelrequirerb in require from CRuby x librubygems gemsnokogiri x mingw libnokogirirb in top required from CRuby x libruby rubygemscoreextkernelrequirerb in require from CRuby x libruby rubygemscoreextkernelrequirerb in require from CRuby x librubygems gemsnokogiri x mingw libnokogiriversionrb in top required from CRuby x librubygems gemsnokogiri x mingw libnokogiriversionrb in moduleNokogiri from CRuby x libruby rubygemscoreextkernelrequirerb in require CRuby x libruby rubygemscoreextkernelrequirerb in require cannot load such file nokogirinokogiri LoadError Have you included adequate test coverage Possibly we could implement a test queue for binary builds but so far there is none Does this change affect the C or the Java implementations Only the C implementation And only the master branch not the released gems ERROR Error installing nokogiri The last version of nokogiri to support your Ruby RubyGems was Try installing it with gem install nokogiri v nokogiri requires Ruby version dev The current ruby version is dev Describe the bug The rumor has it that nokogiri builds incorrectly From what I can gather it exports not hides libxml s symbols As a result if libxml so is loaded before nokogiriso nokogiri is bound to use the system library not the one embedded in the binary And as a resullt it has to check whether thats the case The solution is supposedly to add WlexcludelibsALL or fvisibilityhidden To Reproduce dockercomposeyml yaml version services ruby build volumes app Dockerfile dockerfile FROM ruby alpine RUN apk add buildbase imagemagick dev WORKDIR app Gemfile ruby source gem nokogiri gem rmagick rb ruby require rmagick require nokogiri dockercompose run ruby sh app cat etcissue Welcome to Alpine Linux Kernel r on an m l app apk info vv grep libxml libxml r XML parsing library version app bundle Fetching gem metadata from Resolving dependencies Using bundler Fetching miniportile Installing miniportile Fetching nokogiri Installing nokogiri with native extensions Fetching rmagick Installing rmagick with native extensions Bundle complete Gemfile dependencies gems now installed Bundled gems are installed into usrlocalbundle app bundle exec ruby rb WARNING Nokogiri was built against LibXML version but has dynamically loaded Expected behavior It produces no warnings Environment nokogiri v Nokogiri warnings nokogiri ruby version platform x linuxmusl description ruby p revision x linuxmusl engine ruby libxml binding extension source packaged libxml path usrlocalbundlegemsnokogiri portsx pclinuxmusllibxml libxsltpath usrlocalbundlegemsnokogiri portsx pclinuxmusllibxslt libxml patches RevertDonotURIescapeinserversideincludespatch Removescriptmacrosupportpatch Updateentitiestoremovehandlingofssipatch libxml laisintopbuilddirpatch libxsltpatches compiled loaded Describe the bug The Tutorials hyperlink on is broken FF and chromium on mageia linux v 