I ran homesick destroy dotfiles p and it unlinked all directories Funny enough thats what I wanted maybe this is a positional parameter thing where I should have done homesick destroy p dotfiles Anyways best of luck with homesick Ive been using homesick for a few years I dont commit to my castle often which is probably my problem I am very proficient with git and think homesick works the same way but I find it gets in my way more than helps because of some unique things about it As Im pretty comfortable with git Ill probably ditch homesick for just a bare git repo and a global alias I dont use many of the other features of homesick like multiple castles etc Thought Id share some feedback as I did enjoy homesick for a while some omitted homesick status homesick add u homesick diff staged homeawsconfig homesick diff dotfiles staged homeawsconfig homesick diff dotfiles config nvim homesick add homesick track homesick track homesick status That is what my brain did on a Monday morning It tripped me up though I wanted to add the entire confignvim directory but just running homesick add or track rather the pathing was weird homeconfig I think Anyways the end result was that homesick track added the nvim directory at the root of my castle For a while I thought it deleted all my files until I did a homesick cd and went looking for them I was able to recover them but in my opinion any add should work whether Im relative or not as git does Its also confusing to have the track command and all the staged commands I couldnt send to git I think the way to do it would be to go into the castle directory and run those commands with git natively Maybe Im doing it wrong or not using homesick correctly But if it helps to hear one guys experience then great Thanks for all the fish I keep my castle repos on a private server so every time I use homesick generate I have to go in and use git remote seturl origin to point the checkout to the correct URI This should be overridable by envariable or better yet a config file such as homesickconfig or XDGCONFIGHOMEhomesickconfig The latter approach would allow setting defaults for other commands similar to gitconfig Hi I think it would be quite convenient to have a feature which automatically commits andor also pushes new changes after you eg tracked a new file I know this feature from the password manager pass which automatically generates a new commit with the message Add generated password for foo When making changes to a file having is expressive commit message is very helpful I guess But when starting to use homesick most of the times you just track new files which could be autocommited with a fairly generic commit message Best Felix Autotests in spec do some tests and analyze result output of git command But on some locales there are localized messages from git and those tests fail One example looks like this is French locale As workaround you could set locale to C during the test or use machineparsable git commands like git status porcelain Sample patch is attached fixlocalespectestspatchtxt See Libraries like Rugged open the possibility of using git features implemented in Ruby instead of shelling out to git But should homesick still depend on having git installed at runtime The alternative would be to keep depending on git and to show warningerror messages when a command fails because git could not be found Related issues especially related with the new exec command users could use commands like homesick exec git push instead of homesick push CC technicalpickles christianbundy JCook I have started work on some of this on my refactor branch several of my branches If you would like to work on the branch with me let me know and I can accept PRs add you as a collaborator Ideas Make rubocop happy with our source code Separate implementation and specs into more files Reduce duplication Make things more modular Use more libraries to avoid reinventing the wheel Move each group of commands into their ownclass file For example symlinkunsymlink could be together We could also have spec files separated into these command groups Thanks to trobrock for some of these refactoring ideas Related issues Heres an example of running grep saystatus libhomesickactionsrb on homesicks source ruby saystatus git clone repo to destinationexpandpath green unless options quiet saystatus exist destinationexpandpath blue unless options quiet saystatus git init unless options quiet saystatus git init already initialized blue unless options quiet saystatus git remote add name url unless options quiet about lines removed for brevity The quiet and pretend options are often checked manually which leads to fairly complex looking code Instead I think it would be cleaner to use methods that handle quietpretend invocation for us I vaguely remember seeing something in Thors source code about a quiet getter method that is used in saystatus but I couldnt figure out how to set this yet It would be nice to use features built into Thor if there are any for this but worst case we can add our own wrapper methods Advantages Shelling out takes a while and you can get major performance and stability boosts with the right libraries We could save time writing ruby wrappers around command line functionality by using an existing library The code would be a bit less bloated with generalized filegitetc code placed somewhere else Many Ruby libraries give comfortable objectoriented interfaces to existing command line functionality File stuff Ruby has a lot of awesome commandlineinspired libraries built in including FileUtils which could easily replace many calls to commands like mv cp rm and ln Git stuff Grit looks pretty awesome as its what GitHub uses internally See Supercharged RubyGit Grit is deprecated and its readme recommends switching to Rugged 