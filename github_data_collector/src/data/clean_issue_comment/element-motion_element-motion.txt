 Applies motion with CSS no JS engine Motion between disconnected elements Motion between element view states Abstract motion behind a component API Execute multiple motions at a time Execute multiple motions one after the other Waiting Create intermediate elements during a motion Control the visibility of elements over a motion hide during show after Currently when animating an exiting component it ends up cloning the target element to keep it around for the duration of the motion see FocalConcealMove This works but leads to weird behaviour and more importantly isnt as performant Until there is an official solution or we can wrangle trying to use React Suspense cleverly lets introduce a component to persist the element for the duration of the motion As a benefit we also no longer need to write explicit motions just for exit animation An API could look like with react router js Route pathdetailsid match MotionPersistence match Somewhere inside the route there would be a motion It more than likely wont be top level though divMotionmotion div motion Motiondiv MotionPersistence Route Note Currently the Motion component has an in prop We could also do something with that perhaps Historically the in prop was always used for an element which never left the DOM And generally from a list view that persists behind some content to a details view which is loaded inout on demand js Route pathdetailsid match Motion inmatchmotion div motion Motion Route However that would also mean introducing more kB into the primary Motion component And mixing logic But the API is a little simpler Both APIs should enable persisting the element when being removed from the DOM over the duration of the motion Then there is the problem of applying motion Currently exiting elements are the origin and the entering elements are the destination whereby in the motion components you would setChildProps to apply some styles to the destination hopefully youre seeing the problem We want to setChildProps on the origin element How do We also want to know when the motion is finished In the current world the destination motion is the one that will do the actual triggering It ends up causing too many problems Instead of trying to be clever to try and compose them we should just have them in one component instead Move the code from both into a new component Remove docs for Scale and Translate components and deprecate them Add tslib as a dependency turn on the compiler option We cant easily compose things from className and keyframes ATM Since this library wants to try and do things via CSS animation over JS animation we need to come up with a solution API thoughts js setChildProps composable style style prevStyle prevStyle composable class via objects classNameStyle prevStyle prevStyle composable keyframes keyframes prevKeyframes compose composeprevKeyframes newKeyframes animationname Removes className from API deprecated first Adds classNameStyle to API Remove emotion dependency See GIF Happens in all browsers nooooo All upcoming tasks that will end up being a breaking change will be consolidated here The plan will be to keep master with v and keep releasing betas until its finally ready to go Hooks bump peer dependency of reactreactdom to v rewrite core with hooks Dependencies x bump peer dependency of emotion to v now a dependency Packaging x move motions to their own package means importing motions via elementmotionmotions package remove deprecated exports in elementmotioncore API change revealfocalreveal to use the same default clippath change reshaping container styling api to be used for all composite experiences flatten collector component API remove keyframes api It was a mistake having all style props at the top level If we look at a more standardised solution atm it would be via a theme prop I guess should it be a function should it be an object should it be style it is at the end of the day a style but not all styles are allowed to pass through this can be done as a nonbreaking change first and then remove the other styles after styles inside style prop take precedence diff ReshapingContainer triggerKeytogglershown style padding px maxWidth px margin auto padding px maxWidth px margin auto Need to really be scrolling though gottomoveitmoveit In the docs when I click on a sidebar link scroll down to read a bit then click on another sidebar link it doesnt jump me back to the top of the page For instance I can be reading Advanced Usage then click Custom Animations and Ill be halfway down the page docz uses reachrouter so this might help 