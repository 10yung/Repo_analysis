Is it possible to use this to make a MIDI plugin that can be used in Ableton Live I have tried several combinations of settings but I havent yet hit on something that works If someone can point me in the general direction I will be happy to do the legwork myself So far I have tried the fwdmidi example and executed the steps here but I didnt get any MIDI output One thing that seemed weird was that Live drops it into the spot for an audio plugin to the right of the instrument in the UI rather than the spot for a MIDI plugin to the left of the instrument As of PR we started seeing warnings for clippys missingsafetydoc lint Unsafe functions should document what preconditions have to be met in order to safely call those functions Remove all instances of A clippymissingsafetydoc in travisyml or whatever pipeline were using by then when resolved I was writing a VST for a HW synth to convert CCs to SysEx automation and viceversa while letting irrelevant msgs through unchanged Due to the lifetime on Event I couldnt just map incoming msgs to outgoing msgs but had to push those msgs that should be mapped to SysEx to a separate vec and then send that one afterwards so I have two calls to sendbuffersendevents one for the filtered input events and one for the payloads vec mapped to SysExEvents But I want to preserve the ordering between the input and output msgs ie not change the order of the param automation So this requires being able to return SysExEvents where the payloads lifetime comes from a vec outside of the mapping closure But currently its not possible I get error cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements note so that closure can access payloads note first the lifetime cannot outlive the lifetime as defined on the body at note but the lifetime must be valid for the method call at note so that a typelifetime parameter is in scope The lifetime that the incoming events have comes from this Any thoughts what the best approach would be to make this kind of use case more convenient Clippy identified that we should implement the FromStr trait for CanDo instead of just making our own fromstr function This decision came out of but I didnt want to do it there because it is a slight function signature change I think it should be pretty easy though Retroactively update CHANGELOGmd Figure out what notable changes happened in each cratesio release and put that stuff into the changelog file Format it similar to the format described in Keep a Changelog where needed In the future any releases should have an updated changelog before release EDIT never mind about the tagging stuff we already do that Removed from the issue Related See also This is an issue to track the TODO bullet point in the READMEmd that I removed in This TODO is very vague Are there particular examples wed like to add This is an issue to track the TODO bullet point in the READMEmd that I removed in This TODO is very vague Can we come up with a list of tests we actually want to implement This is an issue to track the TODO bullet point in the READMEmd that I removed in What still needs to be done Which opcodes still need to be implemented feel free to close this if theres nothing left to do As a rustvst developer I would like to see a document that lists out all the possible GUI approaches with their pros and cons The list should clearly outline any blockers and assumptions made for those blockers and speculations for possible workarounds or fixes to said blockers Requirement for Theres some text written here in the wiki 