Reflects ace a f afb ec a a a I think its time for Jawn to graduate to The only pressing issue I see before that can happen is scalajs support but apart from that theres not much activity that demands staying in the x series Thoughts Hi Erik Very nice piece of work indeed Recently i changed from play to your parser for my home brew json operator lib Because I have quite a lot if comments in my json i forked your lib and wanted to extend it so it can spit out comments or at least skip them Due to the clarity of your code this is rather easy to do I have a question about one design decision you made though You differentiate between parseStringSimple and parseStringComplex the only difference from a performance point of view at least seems to be the inspection of The price you pay is rescanning the string when it turns out not be simple after all Was this the sole ground for have two separate methods here or am I missing something Would one extra if statement in the scan make a big difference and not outweigh the disposal of work done If not i would integrate the methods scan regularly until the first and then if this happens switch to the collection into the CharBuilder But maybe you have already tested this and turned out to be a dead end I have tried to use the AsyncParser but I couldnt figure out how to get anything out other than a single jsobject as defined by my AST in this case Play JSON Assume I have something like name thing elements key a value alice key b value bob How can I get it so that each call to absorb will return zero or more elements After the results of SLIP scala contributors the ScalaJSON AST has finally been put into the scala platform see for more details Currently its a M release however a full release is expected in a few days if there are no major issues This ticket is to describe integration with Jawn and how it would possibly work A really ideal situation would be to integrate the scalajsonastunsafeJValue into the core Jawn parser and I would also be interested to see the results in regards to parsing Doing so would also automatically expose the standard safe AST to any users and would provide automatic interopt once the other frameworksjson libraries adopt scalaJSON If this doesnt work out it can always be added as either a module least ideal situation or a first class type that jawn exposes Let me know if there are any ways that I can help non when I use jawn lib some error happens below info javalangNumberFormatException For input string info at javalangNumberFormatExceptionforInputStringNumberFormatExceptionjava info at javalangIntegerparseIntIntegerjava info at javalangIntegerparseIntIntegerjava info at jawnsupportjson sParseranon jintParserscala info at jawnsupportjson sParseranon jintParserscala info at jawnParserparseNumParserscala info at jawnParserrparseParserscala info at jawnAsyncParserchurnAsyncParserscala info at jawnAsyncParserfinishAsyncParserscala info at jawnstreamzpackageanonfunparseJson anonfunapply applypackagescala How to fix it These are currently missing I know I can access each indexing eg get but how do I iterate over it val list jawnastJParserparseFromStringstuff get val stuff listgetstuff for item stuff printlnitem Not sure how applicable this is to Jawn but should we look at using to both improve the performance but more importantly the latencymemory characteristics of the parser There are some smart strategies here We should steal some of them 