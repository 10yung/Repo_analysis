Hey there I was wondering if support for specifying a list of files to run Fasterer on could be added It would be really nice if we could make it work with xargs I had this use case in mind echo appcontrollersapplicationcontrollerrb configroutesrb xargs bundle exec fasterer Report with links will be more informative libcoderb Use attrreader for reading ivars Running this code ruby usrbinenv ruby require benchmarkips ARR Benchmarkips do b breportreversefirst do ARR reversefirst end breportlastreverse do ARR last reverse end bcompare end Benchmarkips do b breportreverselast do ARR reverselast end breportfirstreverse do ARR first reverse end bcompare end we see a huge speed difference for this simple synthetic benchmark shell Calculating reversefirst i ms lastreverse i ms reversefirst is in s lastreverse is in s Comparison lastreverse is reversefirst is x slower Calculating reverselast i ms firstreverse i ms reverselast is in s firstreverse is in s Comparison firstreverse is reverselast is x slower Its pretty intuitive that it works this way Lets say our array has N elements and we want the last n but reversed We can either reverse it first making N swaps ie copies and then copy the first n elements making Nn copies or we can take the last n elements making n copies and then swap them n times performing n copies Im working in a detector for these opportunities but I dont know if Ill make it Currently it is possible to either ignore a rule for all files or ignore a file for all rules It would be nice to be able to finetune the configuration similar to these Per it is faster to use the argument method if the argument is a constant aka does not allocate an object From im seeing thats not the case Btw this is a really cool project cc timrogers Hi very nice program here neckbeard Just started using it and being very familiar with the fastruby benchmarks I thought that I would be nice to have RUBYENGINE specific suggestions I know you have your disclaimer and certainly we should not blindly do whatever the machine tells us but in the case of JRuby maybe others some of the suggestions are counterintuitive to what most people think is fast ruby Tailoring suggestions for the platform could be very helpful Thoughts 