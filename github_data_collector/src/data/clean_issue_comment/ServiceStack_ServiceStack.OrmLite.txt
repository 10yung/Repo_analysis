Motivations to Implement this feature OrmLite Insert Update Filters are well however they can lead into few limitations Large switch statements to check if the entity is the desired to process Put all the logic in a single place could lead in a very large and unreadable code There is no flexibility to add behaviour as a new functionality need to merged with the current delegated or it will be erased Proposal Interceptors They are basically classes that implement C IEntityInterceptor interface C summary Represent a plugin to perform operations for a given entity summary typeparam nameTtypeparam public interface IEntityInterceptorin T IEntityInterceptor summary Execute code before create a new entity summary param namedbCmdparam param nameentityparam returnsreturns Task OnInsertAsyncIDbCommand dbCmd T entity summary Execute code before update an entity summary param namedbCmdparam param nameentityparam returnsreturns Task OnUpdateAsyncIDbCommand dbCmd T entity This will be executed for each Insert Update call for an entity Benefits using this approach Fully Async Code for Interception Compatible with Async breaking change Multiple classes with different responsibilities Readability Separation of Concerns Flexibility to assign more behaviour without break any existing code More testable code that change entities through interception At code level Filters more controlled in a single place if in the future more operations needs to be performed Code implemented and unit tests added Usage C Aliasclient public class Client public string Email get set public string Domain get set public class IEntityInterceptorEmailAddressesPoco public string Name InterceptorName public Task OnInsertAsyncIDbCommand dbCmd Client entity return TaskCompleted public Task OnUpdateAsyncIDbCommand dbCmd Client entity entityDomain entityEmailSplit return TaskCompleted Registration is straight forward C OrmLiteConfigAddInterceptornew NewInterceptor Feature proposal Support Interceptors for baseabstract classes for common usage cases like Auditable classes Allow run interceptions in parallel with a configuration New overload with the connection in Interceptors that way the user can perform operations from an Interceptor for related entities or recursive loops 