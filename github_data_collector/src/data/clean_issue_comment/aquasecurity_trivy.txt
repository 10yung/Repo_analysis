Adds GitLab CI template with deep integration with GitLab Container Scanning report part of GitLab Security Product cf With GitLab CI Do not repeat IMAGE TAG Fix format cf Mention GitLab plan for Container Scanning report EE Ultimate com Gold plan Compliance with the existing GitLab Container Scanning Description Since Friday January CET UTC the vulnerability counts in most of my images went up from zero to an incredible amount When I run trivy light debianbusterslim I get the following output T INFO Detecting Debian vulnerabilities debianbusterslim debian Total UNKNOWN LOW MEDIUM HIGH CRITICAL LIBRARY VULNERABILITY ID SEVERITY INSTALLED VERSION FIXED VERSION apt CVE MEDIUM bash CVE CRITICAL TEMP B BAF LOW coreutils CVE CVE e fsprogs CVE HIGH deb u gcc base CVE MEDIUM CVE gpgv CVE LOW deb u libaptpkg CVE MEDIUM libcbin CVE HIGH CVE MEDIUM CVE CVE CVE CVE CVE CVE CVE CVE CVE LOW libc CVE HIGH CVE MEDIUM CVE CVE CVE CVE CVE CVE CVE CVE CVE LOW libcomerr CVE HIGH deb u libext fs libgcc CVE MEDIUM CVE libgcrypt CVE CVE CVE libgnutls CVE libidn CVE HIGH CVE MEDIUM liblz CVE libpcre CVE HIGH CVE MEDIUM CVE CVE LOW libseccomp CVE HIGH libss CVE deb u libstdc CVE MEDIUM CVE libsystemd CVE HIGH deb u CVE MEDIUM CVE CVE CVE LOW libtasn CVE HIGH libudev CVE deb u CVE MEDIUM CVE CVE CVE LOW login CVE MEDIUM CVE CVE CVE LOW TEMP DBAD passwd CVE MEDIUM CVE CVE CVE LOW TEMP DBAD perlbase CVE sysvinitutils TEMP A CE tar CVE CRITICAL dfsg CVE MEDIUM TEMP B B LOW It seems to have very old vulnerabilities I would expect to be fixed for years already like the CVE in tar Is this for real or an error in the database Additional details base image name container registry info Trivy version Since packages managed by OS eg apt yum apk etc may have unresolved vulnerabilities Itd be nice if trivy could have failson option which detects there are upgradablepatchable packages and return exit code when there are some fixed ones This makes us get an actionable alert from CI This idea came from snykio and would love to have same feature for trivy as well A lot of tooling in the container ecosystem is written in Golang unfortunately theres not an easy way to detect vulnerabilities there A first integration attempt could utilize functionality like go version binary in x or for previous versions to scan all binaries in a container and report back if they were built with a vulnerable golang version This script is generated by godownloader Close Install Trivy like the following curl sh Description Running trivy installed via brew install aquasecuritytrivytrivy just now on a docker image incorrectly detects a yarnlock and fails with an error What did you expect to happen Scan output for a python app What happened instead trivy skipupdate dokkupythonsamplelatest T WARN You should avoid using the latest tag as it is cached You need to specify clearcache option when latest image is changed T INFO Detecting Ubuntu vulnerabilities T FATAL error in image scan failed to scan libraries failed to analyze libraries failed to analyze libraries invalid yarnlock format Invalid yarnlock format Output of run with debug trivy debug skipupdate dokkupythonsamplelatest T DEBUG Severities UNKNOWNLOWMEDIUMHIGHCRITICAL T WARN You should avoid using the latest tag as it is cached You need to specify clearcache option when latest image is changed T DEBUG cache dir UsersjoseLibraryCachestrivy T DEBUG DB Schema Type UpdatedAt UTC NextUpdate UTC T DEBUG Vulnerability type os library T DEBUG OS family ubuntu OS version T DEBUG the number of packages T DEBUG the number of packages from commands T DEBUG the number of packages T INFO Detecting Ubuntu vulnerabilities T DEBUG ubuntu os version T DEBUG ubuntu the number of packages T FATAL error in image scan githubcomaquasecuritytrivyinternalstandalonerun homecircleciprojectinternalstandalonerungo failed to scan libraries githubcomaquasecuritytrivypkgscannerScannerScanImage homecircleciprojectpkgscannerscango failed to analyze libraries githubcomaquasecuritytrivypkgscannerlibraryScannerScan homecircleciprojectpkgscannerlibraryscango failed to analyze libraries githubcomaquasecurityfanalanalyzerGetLibraries gopkgmodgithubcomaquasecurityfanalv a ce bd analyzeranalyzergo invalid yarnlock format githubcomaquasecurityfanalanalyzerlibraryyarnyarnLibraryAnalyzerAnalyze gopkgmodgithubcomaquasecurityfanalv a ce bd analyzerlibraryyarnyarngo Invalid yarnlock format githubcomaquasecuritygodepparserpkgyarnParse gopkgmodgithubcomaquasecuritygodepparserv ea f ef bpkgyarnparsego Output of trivy v trivy v trivy version Additional details base image name container registry info The image is based on gliderlabsherokuish a herokulike environment for the herokupythonsample app with a runtimetxt living in the app directory All the python dependencies are installed into appheroku within the image DockerSlim minifies docker images by removing unused packages and files It would be nice to support images created using DockerSlim similarly to distroless images Currently trivy fails with an Unknown OS error tested with If you have a trouble feel free to ask Make sure youre not asking duplicate question by searching on the issues lists Im running a trivy server which can access the internet by proxy and I found trivy in client mode will still try to download apk index by himself when scaning some older images and will fail with a timeout which unnecessarily prolongs the scan time Some log trivy client remote someoldimage failed to fetch APKINDEX archive Get dial tcp io timeout T Z WARN This OS version is no longer supported by the distribution alpine T Z WARN The vulnerability detection may be insufficient because security updates are not provided Maybe the client should let the server download all the necessary files and better cache them