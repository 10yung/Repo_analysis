 Describe the feature request I would like to check whether MqttServer has already started before doing any action for instance PublishAsync but I dont have any possibility to do it The only way is to handle exceptions in a proper way Which project is your feature request related to MQTTnetServer standalone Describe the solution youd like Is it possible to add a property to MqttServer something like this public bool IsConnected cancellationTokenSource null I have to send a lot of small packets of data from a client machine that gathers the data to a server that processes the data In this situation the MQTT broker would be on the server side and when sending the data over wifi the client seems to be getting the Acks late and causing it to resend the data even if it was successfully sent to begin with this causes collision problems and after too many of these redundant data packets the broker disconnects the client machine and data is lost in the time it takes for the client to once again establish the connection This issue does not arise when the broker is on the machine that is sending the data but this set up is not possible for this use case The issue also does not come up if the client is set to not wait for Acks when the Quality of Service is set to AtMostOnce or when the client is slowed down for instance during debugging Here are a few snippets of the error messages The packet dispatcher already has an awaiter for packet of type MqttPubAckPacket with identifier Unhandled exception while receiving packetsExceptionMQTTnetExceptionsMqttProtocolViolationException Received packet PubAck PacketIdentifier ReasonCode at an unexpected time at MQTTnetPacketDispatcherMqttPacketDispatcherDispatchMqttBasePacket packet at MQTTnetClientMqttClientTryProcessReceivedPacketAsyncMqttBasePacket packet CancellationToken cancellationToken Feature request For my application I need to pass UserProperties in the CONNECT request There appears to be some support for it in MQTTnet on the protocol level but I do not see any way to pass in ListMqttUserProperty in IMQttClientOptions Many thanks MQTTnet Server When Client Disconnected chsarp ServerUseClientDisconnectedHandlera how to get the client Subscribe Topic List Describe the feature request For QoS there should be a permissions check prior to returning either the PUBACK or PUBREC message so that if publication would later be denied because of a permissions error then there is no surprise for the client and it will be advised of the fact There is a difference of behavior here between v and v In v the connection should be closed in this case while in v there is the ability to return a reason code as part of the PUBACKPUBREC message to the client Which project is your feature request related to Server Describe the solution youd like The PUBACKPUBREC should be deferred until the MessageIntercepter callback function is executed This keeps the processing of incoming publish messages in order and for v the channel would not be closed until after all of the earlier messages have had a chance to start processing It is possible that a QoS publication would not finish prior to the channel being closed For v the reason code for not publishing would be returned in order as well This does potentially slow down the generation of the ACK back to the client in the event that it is publishing at a high rate relative to the speed that the server is processing messages Clients should already be prepared to deal with the fact that they may want to publish messages prior to the ACK processing being returned to it Describe alternatives youve considered A different way would be to create a new callback function at the point where messages are enqueued for processing that does the permissions check This has two downsides first it allows for a potentially slow operation to occur in the read from the channel code and secondly it means that one may need to close a v session at that point and thus orphaning all of the messages which have been queued but not yet processed I am willing to work on this if you have a preferred method of dealing with this Allow for the intercept code to set a reason code rather than using a default which may be wrong The spec says that both the success and failure codes can be changed I am not totally happy about the way things are setup as something that sets Accept session to false and then true will get the wrong reason code Should it be changed to have a success and failure version of the result code and return the last one set For most uses what is there is going to be fine I think Describe the feature request Currently MqttClient has packet identifier provider and so the identifier is not exposed to client unlike libmosquitto Consider the case in which the client wishes to manage and clear messages from offline db on successful publish Assume the client publishes messages in a loop without awaiting and uses TaskWhenAll after the loop Here eventhough MqttClientPublishResult contains packet idenfifier since it was not generated by client it doesnt know which message succeeded and which failed Which project is your feature request related to Client Maybe related to Describe the solution youd like Could an API be provided for the client to provide the identifier Alternative considered Client could still publish messages one by one using await and based on the result it could clear the offline db But the client is unable to to full advantage of parallelism offered by asyncawait Hi PremiumBurger and me are currently writing our thesis about the topic Clientmanaged anonymous authentication and authorization for MQTT In order to create a working example of the concepts described in the thesis we really need the enhanced authentication as described in the official specification in chapter This pull request extends the current MQTTnet broker implementation with the ability to perform such an enhanced authentication Describe the bug When the username and password are verified clientAclientIdid usernameuser has been connected and subscribed successfully and then clientB clientId id username someErrorUsername request connection is rejected by NotAuthorized ReasonCode but the subscription of clientA is affected and clientA can no longer receive any messages Which project is your bug related to Remove the items which dont apply from the following list MQTTnetAspNetCore v To Reproduce Steps to reproduce the behavior clientA connnect clientB with the same id but an error username or paaword to connnect rejecte clientB by NotAuthorized ReasonCode query clientStatus by IMqttServerGetClientStatusAsync client found in the server but the clientA has a tcp connection with the server Expected behavior clientA is not affected How to get offline information I tested and found that Qos is also offline after reconnecting for a period of time but no offline data is obtained