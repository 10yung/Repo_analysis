 xmlrs xmlrs has noot been maintained in around years A new alternative with serde support has arised in that time quickxml quickxml This crate brings improvements in speed it claims its around times faster than xmlrs and times faster than serdexmlrs Its actively maintained and should also help with xmlrs quickxml Asyncawait syntax is now on stable asyncawait Rust We should take advantage of this API to make the analysis faster We can use the asyncstd asyncstd crate for IO access and the tokio tokio runtime to manage the thread pool in its version currently in alpha asyncawait asyncstd tokio what features might be missing etc We should run nightly or at least weekly builds against Rust nightly We can use TravisCI cronjobs cronjobs and only build for nightly by checking the TRAVISEVENTTYPE environment variable in the build script This should prevent unexpected API breakage cronjobs Running cargodeb will show the following error when trying to strip shell completions This is the error being shown striphomerazicanworkspacesupersupertargetreleasesuperbash File format not recognized cargodeb Command strip failed to launch because exit code It happens with the following files superbash superfish super This seems to be an issue with cargodeb Here is the reported issue cargodeb cargodebissue cargodebissue It seems that nonvalid UTF files prevent the creation of the srcindexhtml file and probably other files as well This is the error output for the LinkedIn apk WARN Seems that the package in the AndroidManifestxml is not the same as the application ID provided Provided application id comlinkedinandroid APK Funcom manifest package comlinkedinandroid Manifest analyzed WARN could not analyze distcomlinkedinandroid APK Funcomresxmlhometabmessagingxml The analysis will continue though Error stream did not contain valid UTF WARN could not analyze distcomlinkedinandroid APK Funcomresxmlhometabrelationshipsxml The analysis will continue though Error stream did not contain valid UTF WARN could not analyze distcomlinkedinandroid APK Funcomresxmlhometabfeedxml The analysis will continue though Error stream did not contain valid UTF WARN could not analyze distcomlinkedinandroid APK Funcomresxmlhometabjobsxml The analysis will continue though Error stream did not contain valid UTF WARN could not analyze distcomlinkedinandroid APK Funcomresxmlhometabnotificationsxml The analysis will continue though Error stream did not contain valid UTF Source code analyzed WARN There was en error generating HTML report stream did not contain valid UTF HTML report generated Hi Ive read the documentation about your tool and I have a question If I have an APK that has some of its code obfuscated by ProGuard can your tool still make reverse engineering on it And if it does what can I expect from its performance Thanks We are detecting false positives in SQL injections where the parameter is an integer for example We should improve the regular expression so that it specifically finds a paramString as a parameter shouldnt be too difficult Seems that InnoSetup is included by default in AppVeyor to create the Windows installer We should use it and automatically add it to our release Some links As you can see here filecoverage in both staticanalysis and results modules we have some files missing In the first we are missing the modrs file and the certificaters file I guess that this last one is because we are not running the coverage with the unstable features On the results module seems that the modrs file and the handlebarshelpersrs files are not being tracked The modrs file seems to be the same issue as in the staticanalysis module and the handlebarshelpersrs file could be related to us not testing those helpers and thus no code gets compiled into tests On the results module the whole report submodule is missing from the test coverage reports There are three files in this submodule the handlebarsrs file that generates the context for our HTML report the jsonrs file that generates the context for our JSON report and the modrs file that contains the trait used by both reports for easier use This trait also enables in the future to have more submodules that can generate reports I think that since we are not trying to generate HTMLJSON reports in tests they are not being tracked by the coverage report Also since we have no comments no documentation tests get generated In the case of the mainrs file for example the only reported line is the modulelevel comment This also brings into the table the fact that some files do not have reported lines apart from the comments as it happens with the mainrs file We need to add tests for all files so that they all get properly reported Each function should have a test and a comment filecoverage 