 Closes r therealprof Speed tests are needed r therealprof cc TeXitoi I dont see sense to built this code in each file that svd rust generates I propose to move it in new crate with will be dependency for pacs It should have short name Maybe pa or ra as abbreviation of Peripheral Access an Register Access I see only advantages no disadvantages we can simplify svd rust code remove some tricks in stm rs we can use Cargotoml for optionally enabling features like atomic operations use semver to control that crates have identical API avoid potential name conflicts when reexport genericrs Part of Blockers Add your blocking issues here What are you think about integrate form functionality in svd rust optional When this option is enabled we can do not merge mod TokenStreams in one and then split with form and write them in different files directly I think this can give us significant speedup in this case therealprof From Typically when setting or clearing bits of a register RMW in the form of regmodifyr w is needed which can be interrupted On the MSP architecture however there are instructions such as bis and xor that can modify specific bits of a memory location atomically This change adds APIs to the register proxies to take advantage of those instructions I also updated the MSP regression test cases though theyre still broken because MSP doesnt compile on stable As discussed on matrix we dont want to merge this until after the MSP improvement patch goes in so Im uploading the PR for feedback The implementation for interrupts generates a macro interrupt that takes the name of an interrupt a closure and optionally a struct of locals There are a few things that are unclear from the generated documentation Does the name of the ISR really matter This seems like an ARMism How does this handler actually get called The riscvrt core calls a function called traphandler which gets set by default to defaulttraphandler which is a noop Should the crate generated by svd rust generate the traphandler to call the appropriate ISR or should the rt crate do so As FromenumVariant for u is implemented in What do you think about implementing TryFromu for enumVariant It could look something like this in the generated code 