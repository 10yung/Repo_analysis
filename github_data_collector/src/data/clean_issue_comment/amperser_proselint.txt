 This PR updates pytest from to The bot wasnt able to find a changelog for this release Got an idea details summaryLinkssummary PyPI Homepage details This PR updates six from to details summaryChangelogsummary Issue pull request Add sixassertNotRegex Issue sixmovesdummythread now points to the thread module on Python Python and later requires threading and deprecated the dummythread module Issue pull request Remove support for Python and Python Issue issue pull request sixwraps now ignores missing attributes This follows the Python standard library behavior Issue pull request Add sixmovesdbmndbm Issue Add sixmovescollectionsabc which aliases the collections module on Python and the collectionsabc on Python and greater Pull request Readd distutils fallback in setuppy Pull request On Python withmetaclass supports classes using PEP features Issue pull request sixaddmetaclass now preserves qualname from the original class Pull request Add sixensurebinary sixensuretext and sixensurestr details details summaryLinkssummary PyPI Changelog Repo details This PR updates coverage from to details summaryChangelogsummary A performance improvement in didn t work for test suites that changed directory before combining data causing quotCouldn t use data file no such table meta quot errors issue This is now fixed Coverage could fail to run your program with some form of quotModuleNotFound quot or quotImportError quot trying to import from the current directory This would happen if coverage had been packaged into a zip file for example on Windows or was found indirectly for example by pyenvvirtualenv A number of different scenarios were described in issue which is now fixed Huge thanks to Agbonze O Jeremiah for reporting it and Alexander Waters and GeorgeCristian B rzan for protracted debugging sessions Added the quotpremain quot debug option Added SQLite compiletime options to the quotdebug sys quot output issue issue changes Programs that used multiprocessing and changed directories would fail under coverage This is now fixed issue A side effect is that debug information about the config files read now shows absolute paths to the files When running programs as modules coverage run m with source some measured modules were imported before coverage starts This resulted in unwanted warnings quotAlready imported a file that will be measured quot and a reduction in coverage totals issue This is now fixed If no data was collected an exception about quotNo data to report quot could happen instead of a report being created issue This is now fixed The handling of source files with nonencodable file names has changed Previously if a file name could not be encoded as UTF an error occurred as described in issue Now those files will not be measured since their data would not be recordable A new warning quotdynamicconflict quot is issued if two mechanisms are trying to change the dynamic context Closes issue coverage run debugsys would fail with an AttributeError This is now fixed issue issue issue issue issue issue issue changes If a x data file is the cause of a quotfile is not a database quot error then use a more specific error message quotLooks like a coverage x data file are you mixing versions of coverage quot Helps diagnose the problems described in issue Measurement contexts and relative file names didn t work together as reported in issue and issue This is now fixed thanks to David Szotten When using coverage run concurrencymultiprocessing all data files should be named with parallelready suffixes mistakenly named the main process file with no suffix when using append This is now fixed closing issue Fixed a problem on Windows when the current directory is changed to a different drive issue Thanks Olivier Grisel Updated Python support to a issue issue issue issue issue changes Nothing new beyond b changes b b An experimental run relativefiles setting tells coverage to store relative file names in the data file This makes it easier to run tests in one or many environments and then report in another It has not had much realworld testing so it may change in incompatible ways in the future When constructing a classcoverageCoverage object datafile can be specified as None to prevent writing any data file at all In previous versions an explicit datafileNone argument would use the default of quotcoverage quot Fixes issue Python files run with m now have spec defined properly This fixes issue about not being able to run unittest tests that spawn subprocesses and issue which described the problem directly The paths configuration section is now ordered If you specify more than one list of patterns the first one that matches will be used Fixes issue The funccoveragenumbitsregistersqlitefunctions function now also registers numbitstonums for use in SQLite queries Thanks Simon Willison Python a is supported Coveragepy has a mascot refSleepy Snake ltsleepy gt issue issue issue issue changes b b The HTML and textual reports now have a skipempty option that skips files with no statements notably initpy files Thanks Reya B Configuration can now be read from TOML files This requires installing coveragepy with the toml extra The standard quotpyprojecttoml quot file will be read automatically if no other configuration file is found with settings in the toolcoverage namespace Thanks to Frazer McLean for implementation and persistence Finishes issue The run note setting has been deprecated Using it will result in a warning and the note will not be written to the data file The corresponding classCoverageData methods have been removed The HTML report has been reimplemented no more table around the source code This allowed for a better presentation of the context information hopefully resolving issue Added sqlite module version information to coverage debug sys output Asking the HTML report to show contexts html showcontextsTrue or coverage html showcontexts will issue a warning if there were no contexts measured issue TOML issue issue issue changes a a The classCoverageData API has changed how queries are limited to specific contexts Now you use methCoverageDatasetquerycontext to set a single exactmatch string or methCoverageDatasetquerycontexts to set a list of regular expressions to match contexts This changes the commandline contexts option to use regular expressions instead of filenamestyle wildcards changes a a Data can now be quotreported quot in JSON format for programmatic use as requested in issue The new coverage json command writes raw and summarized data to a JSON file Thanks Matt Bachmann Dynamic contexts are now supported in the Python tracer which is important for PyPy users Closes issue The compact line number representation introduced in a is called a quotnumbits quot The modcoveragenumbits module provides functions for working with them The reporting methods used to permanently apply their arguments to the configuration of the Coverage object Now they no longer do The arguments affect the operation of the method but do not persist A class named quottestsomething quot no longer confuses the testfunction dynamic context setting Fixes issue Fixed an unusual tokenizing issue with backslashes in comments Fixes issue debugplugin didn t properly support configuration or dynamic context plugins but now it does closing issue issue issue issue issue issue changes a a Reporting on contexts Big thanks to Stephan Richter and Albertas Agejevas for the contribution The contexts option is available on the report and html commands It s a commaseparated list of shellstyle wildcards selecting the contexts to report on Only contexts matching one of the wildcards will be included in the report The showcontexts option for the html command adds context information to each covered line Hovering over the quotctx quot marker at the end of the line reveals a list of the contexts that covered the line Database changes Line numbers are now stored in a much more compact way For each file and context a single binary string is stored with a bit per line number This greatly improves memory use but makes adhoc use difficult Dynamic contexts with no data are no longer written to the database SQLite data storage is now faster There s no longer a reason to keep the JSON data file code so it has been removed Changes to the classCoverageData interface The new methCoverageDatadumps method serializes the data to a string and a corresponding methCoverageDataloads method reconstitutes this data The format of the data string is subject to change at any time and so should only be used between two installations of the same version of coveragepy The methCoverageData constructor ltCoverageDatainit gt has a new argument nodisk default False Setting it to True prevents writing any data to the disk This is useful for transient data objects Added the classmethod methCoveragecurrent to get the latest started Coverage instance Multiprocessing support in Python was broken but is now fixed Closes issue Error handling during reporting has changed slightly All reporting methods now behave the same The ignoreerrors option keeps errors from stopping the reporting but files that couldn t parse as Python will always be reported as warnings As with other warnings you can suppress them with the run disablewarnings configuration setting Coveragepy no longer fails if the user program deletes its current directory Fixes issue Thanks Dan Hemberger The scrollbar markers in the HTML report now accurately show the highlighted lines regardless of what categories of line are highlighted The hack to accommodate ShiningPanda looking for an obsolete internal data file has been removed since ShiningPanda fixed it four years ago The deprecated Reporterfilereporters property has been removed ShiningPanda issue issue changes a a Drop support for Python Dynamic contexts can now be set two new ways both thanks to Justas Sadzevi ius A plugin can implement a dynamiccontext method to check frames for whether a new context should be started See refdynamiccontextplugins for more details Another tool such as a test runner can use the new methCoverageswitchcontext method to explicitly change the context The dynamiccontext testfunction setting now works with Python oldstyle classes though it only reports the method name not the class it was defined on Closes issue failunder values more than are reported as errors Thanks to Mike Fiedler for closing issue The quotmissing quot values in the text output are now sorted by line number so that missing branches are reported near the other lines they affect The values used to show all missing lines and then all missing branches Access to the SQLite database used for data storage is now threadsafe Thanks Stephan Richter This closes issue Combining data stored in SQLite is now about twice as fast fixing issue Thanks Stephan Richter The filename attribute on classCoverageData objects has been made private You can use the datafilename method to get the actual file name being used to store data and the basefilename method to get the original filename before parallelizing suffixes were added This is part of fixing issue Line numbers in the HTML report now align properly with source lines even when Chrome s minimum font size is set fixing issue Thanks Wen Ye issue issue issue issue issue issue changes a a You can specify the command line to run your program with the run commandline configuration setting as requested in issue Coverage will create directories as needed for the data file if they don t exist closing issue The coverage run command has always adjusted the first entry in syspath to properly emulate how Python runs your program Now this adjustment is skipped if syspath is already different than Python s default This fixes issue Improvements to context support The quotno such table meta quot error is fixed issue Combining data files is now much faster Python as of today passes all tests issue issue issue issue changes a a Context support static contexts let you specify a label for a coverage run which is recorded in the data and retained when you combine files See refcontexts for more information Dynamic contexts specifying run dynamiccontext testfunction in the config file will record the test function name as a dynamic context during execution This is the core of quotWho Tests What quot issue Things to note There is no reporting support yet Use SQLite to query the coverage file for information Ideas are welcome about how reporting could be extended to use this data There s a noticeable slowdown before any test is run Data files will now be roughly N times larger where N is the number of tests you have Combining data files is therefore also N times slower No other values for dynamiccontext are recognized yet Let me know what else would be useful I d like to use a pytest plugin to get better information directly from pytest for example issue Environment variable substitution in configuration files now supports two syntaxes for controlling the behavior of undefined variables if VARNAME is not defined VARNAME will raise an error and VARNAMEdefault value will use quotdefault value quot Partial support for Python which has not yet released an alpha Fixes issue and issue issue issue changes a a Coverage s data storage has changed In version x coverage files were basically JSON Now they are SQLite databases This means the data file can be created earlier than it used to A large amount of code was refactored to support this change Because the data file is created differently than previous releases you may need paralleltrue where you didn t before The old data format is still available for now by setting the environment variable COVERAGESTORAGEjson Please tell me if you think you need to keep the JSON format The database schema is guaranteed to change in the future to support new features I m looking for opinions about making the schema part of the public API to coveragepy or not Development moved from Bitbucket to GitHub HTML files no longer have trailing and extra whitespace The sort order in the HTML report is stored in local storage rather than cookies closing issue Thanks Federico Bond pickle json for converting v data files to v data files has been removed Bitbucket GitHub issue changes a a Coveragepy no longer supports Python or The location of the configuration file can now be specified with a COVERAGERCFILE environment variable as requested in issue Namespace packages are supported on Python where they used to cause TypeErrors about path being None Fixes issue A new warning alreadyimported is issued if measurable files have already been imported before coveragepy started measurement See refcmdwarnings for more information Running coverage many times for small runs in a single process should be faster closing issue Thanks David MacIver Large HTML report pages load faster Thanks Pankaj Pandey issue issue issue changes Multiprocessing support in Python was broken but is now fixed Closes issue issue changes Only packaging metadata changes changes Namespace packages are supported on Python where they used to cause TypeErrors about path being None Fixes issue Python as of today passes all tests Fixes issue and issue Development moved from Bitbucket to GitHub issue issue issue Bitbucket GitHub changes details details summaryLinkssummary PyPI Changelog Repo details This PR updates rq from to details summaryChangelogsummary This release also contains an alpha version of RQ s builtin job scheduling mechanism Thanks selwin Various internal API changes in preparation to support multiple job dependencies Thanks thomasmatecki verbose or quiet CLI arguments should override logginglevel Thanks zyt Fixes a bug in rq info where it doesn t show workers for empty queues Thanks zyt Fixed queueenqueuedependents on custom Queue classes Thanks vaness RQ and Python versions are now stored in job metadata Thanks eoranged Added failurettl argument to job decorator Thanks pax r Added maxjobs to Workerwork and maxjobs to rq worker CLI Thanks perobertson Passing disablejobdesclogging to rq worker now does what it s supposed to do Thanks janierdavila StartedJobRegistry now properly handles jobs with infinite timeout Thanks macintoshpie rq info CLI command now cleans up registries when it first runs Thanks selwin Replaced the use of procname with setproctitle Thanks j Backward incompatible changes jobstatus has been removed Use jobgetstatus and jobsetstatus instead Thanks selwin FailedQueue has been replaced with FailedJobRegistry getfailedqueue function has been removed Please use FailedJobRegistryqueuequeue instead movetofailedqueue has been removed RQ now provides a mechanism to automatically cleanup failed jobs By default failed jobs are kept for year Thanks selwin RQ s custom job exception handling mechanism has also changed slightly RQ s default exception handling mechanism moving jobs to FailedJobRegistry can be disabled by doing WorkerdisabledefaultexceptionhandlerTrue Custom exception handlers are no longer executed in reverse order Thanks selwin Worker names are now randomized Thanks selwin timeout argument on queueenqueue has been deprecated in favor of jobtimeout Thanks selwin Sentry integration has been reworked RQ now uses the new sentrysdk in place of the deprecated Raven library RQ will look for the more explicit RQSENTRYDSN environment variable instead of SENTRYDSN before instantiating Sentry integration Thanks selwin Fixed Workertotalworkingtime accounting bug Thanks selwin Compatibility with Redis Thanks dashrai Added jobtimeout argument to queueenqueue This argument will eventually replace timeout argument Thanks selwin Added jobid argument to BaseDeathPenalty class Thanks loopbio Fixed a bug which causes long running jobs to timeout under SimpleWorker Thanks selwin You can now override worker s name from config file Thanks houqp Horses will now return exit code if they don t terminate properly eg when Redis connection is lost Thanks selwin Added dateformat and logformat arguments to Worker and rq worker CLI Thanks shikharsg details details summaryLinkssummary PyPI Changelog Repo details This PR updates coveralls from to details summaryChangelogsummary Features support coverage gt a a lta name quot quot gt lta gt Bug Fixes github fixup incorrect API usage c cab c cab lta name quot quot gt lta gt Compatibility this release marks Python as officially supported Earlier versions probably supported Python too but now we re sure lta name quot quot gt lta gt Features support support Github Actions CI c c Bug Fixes compatibility fixup coverageversion comparisons a a a a a a lta name quot quot gt lta gt Internal dependencies update pass urllib lt pin now that that s fixed lta name quot quot gt lta gt Bug Fixes dependencies pin coverage to lt since the current alphas are introducing breaking changes Once is stable we ll remove the pin lta name quot quot gt lta gt Features flag allow disabling SSL verification e b c e b c Bug Fixes git fix support for case where git binary is missing bbceaae bbceaae lta name quot quot gt lta gt Features api support pull requests on buildkite e e e e Bug Fixes cli ensure upload failures trigger cli failures b b lta name quot quot gt lta gt Features support add support for SemaphoreCI e a e a lta name quot quot gt lta gt Features git omit git info when git isn t installed ea ea instead of erroring The fixes the v release of quotsupporting nongit repos quot when the git binary is not installed Note that commit info can still be set with env vars even in nongit repositories see the docs for more info Compatibility python include python in matrix tests d d previous versions of coverallspython should be compatible with Python no code changes were required to make tests pass Internal remove pytestrunner as a dependency cbbfcd cbbfcd lta name quot quot gt lta gt Features cli allow execution as a module b a b a closes Bug Fixes paths ensure windows paths are normalized to posix e f e f closes lta name quot quot gt lta gt Performance git call fallback git commands in fallback cases only e b e b Features env support git env vars a e a e This change also adds support for nongit repos flags add ability to add named job f ba bf f ba bf Compatibility python drop support for Python dcb fc dcb fc lta name quot quot gt lta gt details details summaryLinkssummary PyPI Changelog Repo details This PR updates FlaskAPI from to details summaryChangelogsummary details details summaryLinkssummary PyPI Changelog Homepage details This PR updates gunicorn from to details summaryChangelogsummary fix address a regression that prevented syslog support from working issue pr fix correctly set REMOTEADDR on versions of Python affected by Python Issue lt issue pr fix show zero response length correctly in access log pr fix prevent raising excAttributeError when reload is not passed in case of a excSyntaxError raised from the WSGI application issue pr The internal module gunicornworkersasync was renamed to gunicornworkersbaseasync since async is now a reserved word in Python pr details details summaryLinkssummary PyPI Changelog Homepage details Bumps requests from to details summaryChangelogsummary Sourced from requestss changelog Bugfixes ContentType header parsing is now caseinsensitive eg charsetutf v Charsetutf Fixed exception leak where certain redirect urls would raise uncaught urllib exceptions Requests removes Authorization header from requests redirected from https to http on the same hostname CVE shouldbypassproxies now handles URIs without hostnames eg files Dependencies Requests now supports urllib v Deprecations Requests has officially stopped support for Python details details summaryCommitssummary bd v fd remove final remnants from ae a Add myself to AUTHORS ab Use comprehensions whenever possible c a Merge pull request from webmavenpatch be CVE URLs update www subsubdomain no longer valid a cd Merge pull request from requestsencapsulateurllib exc bbdbcc wrap url parsing exceptions from urllib s PoolManager ff c Merge pull request from jdufresnehttps b ad Prefer https for URLs throughout project Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details This PR updates APScheduler from to details summaryChangelogsummary Fixed OverflowError on Qt scheduler when the wait time is very long Fixed methods inherited from base class could not be executed by processpool executor PR by Yang Jian Adapted RedisJobStore to v of the redis library Adapted RethinkDBJobStore to v of the rethink library Fixed DeprecationWarnings about collectionsabc on Python PR by Roman Levin details details summaryLinkssummary PyPI Changelog Repo Docs details This PR updates future from to The bot wasnt able to find a changelog for this release Got an idea details summaryLinkssummary PyPI Changelog Homepage Docs details 