I am obfuscating a net framework application that targets framework A referenced assembly that I am also trying to obfuscate doesnt seem to get obfuscated when its TargetFrameworkVersion is set to Change its TargetFrameworkVersion to and obfuscation works as expected Does obfuscar support TargetFrameworkVersion The reproduced issue is available here Please note that the unobfuscated Debug build produces the expected Derived Base output while the obfuscated Release outputs Base Base Let me know if you need more details I tried to configure obfuscar on a desktop net core DLL but I get an error Loading assembliesExtra framework folders Done Hiding strings Renaming fieldsParametersPropertiesEventsMethodsTypesDone Saving assemblies Unhandled Exception MonoCecilResolutionException Failed to resolve SystemReflectionBindingFlags at MonoCecilMixinCheckedResolveTypeReference self at MonoCecilMetadataBuilderGetConstantTypeTypeReference constanttype Object constant at MonoCecilMetadataBuilderAddConstantIConstantProvider owner TypeReference type at MonoCecilMetadataBuilderAddParameterUInt sequence ParameterDefinition parameter ParamTable table at MonoCecilMetadataBuilderAddParametersMethodDefinition method at MonoCecilMetadataBuilderAddMethodMethodDefinition method at MonoCecilMetadataBuilderAddMethodsTypeDefinition type at MonoCecilMetadataBuilderAddTypeTypeDefinition type at MonoCecilMetadataBuilderAddTypes at MonoCecilMetadataBuilderBuildTypes at MonoCecilMetadataBuilderBuildModule at MonoCecilMetadataBuilderBuildMetadata at MonoCecilModuleWritercBuildMetadatab MetadataBuilder builder MetadataReader at MonoCecilModuleDefinitionRead TItemTRet TItem item Func read at MonoCecilModuleWriterWriteModuleDefinition module Disposable stream WriterParameters parameters at MonoCecilModuleWriterWriteModuleModuleDefinition module Disposable stream WriterParameters parameters at ObfuscarObfuscatorSaveAssembliesBoolean throwException at ObfuscarObfuscatorRunRules at ObfuscarProgramMainString args Been trying to configure obfuscar on a net core exe and DLL and it looks like since obfuscar is broken Is this a matter of updating Cecil Loading project obfuscarxmlProcessing assembly MLRecognizers Version Cultureneutral PublicKeyTokennull Unhandled Exception SystemBadImageFormatException Format of the executable exe or library dll is invalid at MonoCecilPEImageReaderReadOptionalHeadersUInt subsystem UInt dllcharacteristics at MonoCecilPEImageReaderReadImage at MonoCecilPEImageReaderReadImageDisposable stream String filename at MonoCecilModuleDefinitionReadModuleString fileName ReaderParameters parameters at ObfuscarAssemblyInfoLoadAssemblyString filename at ObfuscarAssemblyInfoFromXmlProject project XElement reader Variables vars at ObfuscarProjectFromXmlReadNodeXElement reader Project project at ObfuscarProjectFromXmlXDocument reader String projectFileDirectory at ObfuscarObfuscatorLoadFromReaderXDocument reader String projectFileDirectory at ObfuscarObfuscatorctorString projfile at ObfuscarProgramMainString args IEumerableT I am testing Obfuscar with a large solution containing many projects mix of VB and C projects total of million lines of code I am getting an error The error is ObfuscarObfuscarException Failed to get type definitions for WizInterfaces Version Cultureneutral PublicKeyTokenbce f f a ff b SystemArgumentException An item with the same key has already been added at SystemThrowHelperThrowArgumentExceptionExceptionResource resource at SystemCollectionsGenericDictionary InsertTKey key TValue value Boolean add at ObfuscarAssemblyInfoGraphctorIEnumerable items at ObfuscarAssemblyInfoGetAllTypeDefinitions End of inner exception stack trace at ObfuscarAssemblyInfoGetAllTypeDefinitions My understanding is that this line creates names that are conflicting with other names generated for types in ObfuscarRenameTypes I am not clear yet as of how to create a simple reproduction scenario I dont know neither how setting a value for MonoCecilTypeReferenceName impacts the values set to MonoCecilTypeDefinitionName As apparently it can be conflicting the fix seems to be to apply the smae logic defined here within TypeReferenceExtensionscs If I comment out this line the error is fixed What do you think Ive been testing Obfuscar on a large project with assemblies lots of XAML with styling and lots of generics and in order to make the obfuscation pass without crashing and get a working application afterwards Ive fixed a number of bugs Also the process now runs in about half the time from mins to min on my app All tests pass including a few new ones I added We are using coverage tools that builds a mapping between covered code and executed tests The benefit is that for a particular code change we can then decide which tests need to be executed Thanks to the mapping only the tests that executed the modified code during previous runs will be executed To do so we need the obfuscation to remain stable over time for inst we need the obfuscation of method Foo to remain the same over time otherwise the mapping we are relying on becomes useless The best way would be that the coverage tool should support the mapping file but it doesnt We used Crypto Obfuscator and its Cryptographic Renaming scheme for this Incremental obfuscation ensures that existing classes methods etc are given the same obfuscated name every time assemblies are obfuscated Any new classes methods etc are given obfuscated names different from already taken obfuscated names Problem is that Crypto doesnt seem to be maintained any longer and is not compatible with Net CoreStandard I checked Obfuscar code and also did some experiments looks like supporting a Cryptographic Renaminglike behavior seems simple to implement by adding an object key parameter that would receive the methodKey propertyKey values from the callers to the UniqueName methods we could do an MD checksum of this object as the name That would be returned instead of the A B naming generation which changes as soon as you insert members over time I checked using MD xxxKeyToString and it does the job Is this something you already had in mind What do you think Here is my code before public delegate void Action public class ClassA protected Action callback public ClassA callback AAA callbackInvoke protected virtual void AAA LogInfoThis Class A public class ClassB ClassA public void BBB LogInfoThis Class B after public delegate void bC public class f protected bC A public f thisA bCDelegateCombinethisA new bCA thisA protected virtual void A LogInfoThis Class A public class bq f public new void A LogInfoThis Class B Execute var b new ClassB bBBB Expected This is Class A This is Class B Result This is Class B error bug This is Class B ClassAAAA fA ClassBBBB bqA Delegate Action bC Field callback A What does A point to Similar to there is a crash when the main assembly references the other assemblys enum as a method parameter with a default value Version is affected Have a look at Please note that once the default value is removed from ProgramMethod OR if Obfuscation attribute is applied to Mode enum the issue goes away Unhandled Exception MonoCecilResolutionException Failed to resolve AA at MonoCecilMixinCheckedResolveTypeReference self at MonoCecilMetadataBuilderGetConstantTypeTypeReference constanttype Object constant at MonoCecilMetadataBuilderAddConstantIConstantProvider owner TypeReference type at MonoCecilMetadataBuilderAddParameterUInt sequence ParameterDefinition parameter ParamTable table at MonoCecilMetadataBuilderAddParametersMethodDefinition method at MonoCecilMetadataBuilderAddMethodMethodDefinition method at MonoCecilMetadataBuilderAddMethodsTypeDefinition type at MonoCecilMetadataBuilderAddTypeTypeDefinition type at MonoCecilMetadataBuilderAddTypes at MonoCecilMetadataBuilderBuildTypes at MonoCecilMetadataBuilderBuildModule at MonoCecilMetadataBuilderBuildMetadata at MonoCecilModuleWritercBuildMetadatab MetadataBuilder builder MetadataReader at MonoCecilModuleDefinitionRead TItemTRet TItem item Func read at MonoCecilModuleWriterWriteModuleDefinition module Disposable stream WriterParameters parameters at MonoCecilModuleWriterWriteModuleModuleDefinition module Disposable stream WriterParameters parameters at ObfuscarObfuscatorSaveAssembliesBoolean throwException at ObfuscarObfuscatorRunRules at ObfuscarProgramMainString args