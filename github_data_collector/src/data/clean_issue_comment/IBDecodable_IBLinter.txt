The use case for this new flag is to only lint the files that have changed This could help in larger projects where linting all xibstoryboard files could take a good amount of time This is also a feature present in other linters like SwiftLint and xiblint It would be great to have a mechanism like SwiftLint to specify the specific files to lint on the command line The use case is we only want to lint the xib files that have changes as opposed to every xib file in our directory This PR adds a tiny bit more documentation under the installation section Specifically Im happy to say this works with Mint out of the box Hi there So Im facing the issue which is actually very common for all other linters and formatters such as SwiftLint and SwiftFormat Ive created a file called iblinteryml in my project root folder and I choose to ignore all storyboards in ExampleStoryboards path yaml excluded ExampleStoryboards This all works as expected if I just run iblinter in the root folder But if I use path option eg iblinter path Example then IBLinter ignores my config file even if I run this command from the project root As I said this is not something specific for IBLinter SwiftFormat and SwiftLint have same behavior While I must say rubocop is different and respects config files from the project root With SwiftLint and SwiftFormat I was able to use c config option and tell the tools that doesnt matter which paths I want to check they still should use specific config file IBLinter is missing the c config option though Could this option be added Then I would be able to run iblinter config pwdiblinteryml path Example and all my custom rules exclude paths defined in the config will still apply At IBAnimatable we have a ton of UIKit subclasses with IBInspectable properties Some of these are Strings and can be very error prone to work with Example The border property accepts a String of either solid or dash If the user writes something like dotted we should show an error I think this is possible but the user has to tell us a All valid keys b All classessubclasses this property is used on Probably in a yml file That may seem like a lot of work but if IBAnimatable were to publish this yml file on their docs it could be reusable A common mistake is to have some sort of control or gesture recognizer as a subview of view and not have isUserInteractionEnabled set to true frequently on UIImageView In SwiftLint you can disable rules through comments in the source code This is a little more difficult for storyboards It would be nice to allow users to turn of specific rules for certain files Ive recently come to see your tool as well as IBAnalyzer and I feel there could be quite a powerful library coming out of the these two tools being combined Regardless of a partnership or matching functionality I feel the features would definitely compliment one another and provide a onestop spot for normalising and detecting issues with interface files Just throwing the idea out there loving the work youve done so far