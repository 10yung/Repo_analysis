Is your feature request related to a problem Please describe When writing client queries or mutations potential mistakes can be made but there is no way to debug the issues because the HotChocolate server always returns The value of input has a wrong structure Describe the solution youd like It would be great if an exception would be raised with additional information located in DictionaryToObjectValueConverter The exception or message should atleast containt fieldKey or the whole ConverterContext Add subscription interceptors to docs Add payload query string authentication docs Add example project for authentication on Apollo Relay SingalR I have paths in my scheme that are marked with the Authorize directive attribute but the code that was generated from dotnet build does not include parameters to attachchange authorization headers to the request other than setting a default Is there a workaround for now to addchange an auth header per request Using the remote query clients directly for queries that cannot be done via delegation are currently failing due to being unable to serialize in RemoteQueryClient This PR includes a test which shows this behavior Describe the bug enumerableany does not work on scalar arrays Expression of type GIAWebServicesCMDBRequestValidation cannot be used for parameter of type SystemCollectionsGenericIEnumerable HotChocolateTypesFiltersISingleFilter SystemString of method Boolean Any ISingleFilter SystemCollectionsGenericIEnumerable HotChocolateTypesFiltersISingleFilter SystemString Parameter arg The generated ServiceCollectionExtensions for StawberryShake generates the following for my client csharp omitted usings namespace Namespace SystemCodeDomCompilerGeneratedCodeStrawberryShake public static class NameClientServiceCollectionExtensions private const string clientName NameClient public static IOperationClientBuilder AddNameClient this IServiceCollection serviceCollection if serviceCollection is null throw new ArgumentNullExceptionnameofserviceCollection serviceCollectionAddSingletonIPolicyStagingClient PolicyStagingClient ommitted return builder To use this client one is expected to do something like this csharp servicesAddHttpClientNameClient config servicesAddNameClient However if instead we allow for configuring the http client through the AddNameClient like such csharp omitted usings namespace Namespace SystemCodeDomCompilerGeneratedCodeStrawberryShake public static class NameClientServiceCollectionExtensions private const string clientName NameClient public static IOperationClientBuilder AddNameClient this IServiceCollection serviceCollection ActionHttpClient configureClient if serviceCollection is null throw new ArgumentNullExceptionnameofserviceCollection serviceCollectionAddHttpClientclientName configureClient serviceCollectionAddSingletonIPolicyStagingClient PolicyStagingClient ommitted return builder public static IOperationClientBuilder AddNameClient this IServiceCollection serviceCollection serviceCollectionAddNameClientc the usage becomes much nicer Other such overloads might also be warranted When generating a client using StawberryShake the classes and interfaces should be generated with the partial modifier This allows the encompassing project to extend them Is your feature request related to a problem Please describe I added a name directive to my schema cause then I could write an extension method on IEnumTypeDescriptorT to emit the original enum names as part of the schema as opposed to having to stitch them together later This results in a schema that looks like this grahpql enum DiscountType AGREEMENT namevalue Agreement INTERNET namevalue Internet CUSTOMERBENEFIT namevalue CustomerBenefit directive namevalue String on ENUMVALUE This throws an exception when building the client because it adds its own name directive Unhandled Exception HotChocolateSchemaException The name name was already registered by another type Type name at HotChocolateConfigurationTypeInitializerEnsureNoErrors in D a s src Core Types Configuration TypeInitializercsline at HotChocolateConfigurationTypeInitializerInitializeFunc schemaResolver IReadOnlySchemaOptions options in D a s src Core Types Configuration TypeInitializercsline at HotChocolateSchemaBuilderCreate in D a s src Core Types SchemaBuilderCreatecsline at StrawberryShakeGeneratorsClientGeneratorValidate in D a s src Client Generators ClientGeneratorcsline at StrawberryShakeToolsGenerateCommandHandlerCompileGenerateCommandContext context String path Configuration config ClientGenerator generator IReadOnlyList documents ICollection errors in D a s src Client dotnetgraphql GenerateCommandHandlercsline at StrawberryShakeToolsCompileCommandHandlerBase CompileTCtx context String path Configuration configuration in D a s src Client dotnetgraphql CompileCommandHandlerBasecsline at StrawberryShakeToolsCompileCommandHandlerBase CompileTCtx context String path in D a s src Client dotnetgraphql CompileCommandHandlerBasecsline at StrawberryShakeToolsCompileCommandHandlerBase ExecuteAsyncTCtx context CancellationToken cancellationToken in D a s src Client dotnetgraphql CompileCommandHandlerBasecsline at McMasterExtensionsCommandLineUtilsCommandLineApplicationExecuteAsyncString args CancellationToken cancellationToken at StrawberryShakeToolsProgramMainString args ContractsCommunication C Git PolicyStaging src contracts ContractsCommunication bin Debug netstandard IfInsurancePolicyStagingContractsCommunicationdll Describe the solution youd like StrawberryShake should probably detect that a name directive already exists and not add its own Same for other similar directives Describe alternatives youve considered Currently Ive just deleted the directive declaration line from my schema in the client project However this means I cant just do dotnet graphql update or similar Is your feature request related to a problem Please describe Im trying to add a directive to a custom scalar type In GQL this would look like such graphql directive test on SCALAR scalar CustomerNumber test Describe the solution youd like Im not sure how best to solve this As far as I can tell the ScalarType type has a Directive property with a private setter which it always instantiates using ArrayEmpty for the directives Maybe adding a virtual GetDirectiveDefinition or something like that so deriving classes has a chance at adding directives is the best solution Describe alternatives youve considered Im not sure if any good alternatives exist except maybe going schema first But I would like for my code to define my schema 