Hi I have implemented the same architecture in kotlin but when Im mocking a UseCase class its not initializing my presenter test class is below private var presenterSetAddressPresenter null Mock private var mockContext Context null Mock private var controller Controller null Mock private lateinit var setAddressUseCase SetAddressUseCase Before fun setUp MockitoAnnotationsinitMocksthis presenter SetAddressPresentersetAddressUseCase presentersetAddressControllercontroller Test fun testUserListPresenterInitialize givencontrollercontextwillReturnmockContext presenterloadPreviousAddresses verifycontrollerhideRetry verifycontrollershowLoading verifysetAddressUseCaseexecute anySetAddressPresenterSetAddressObserverclassjava anyVoidclassjava Getting the NullPointerException on domaininteractorUseCaseexecuteUseCasekt my UseCase Class is init compositeDisposable CompositeDisposable thisthreadExecutor threadExecutor thispostExecutionThread postExecutionThread fun executeobserver DisposableObserverT params Any val observable thisbuildUseCaseObservableparams subscribeOnSchedulersfromthreadExecutor Line no observeOnpostExecutionThreadgetScheduler addDisposableobservablesubscribeWithobserver Could you please help or advice on this The rxjava seemed to make the domain not that clean There is a issue when running geadlew clean build androidapt plugin is incompatible with the Android Gradle plugin Please use annotationProcessor configuration instead Im using Android studio beta and gradle v Fix build tools double quotes deps with single quotes instead fix i have a fragment with two inner fragment For the outside fragment I write a presenter with a user case UserPressRedButton when the UserPressRedButton action is completed I have to update the presentation layer of the two inner fragment In which way can link all together Hi I am working on a multi module project and I have used as a starting point this example which helped a lot I am little bit stuck on this use case that I encountered Based on this clean architecture example lets say I need another library android module which will handle payments with google play It provides the entire billing provider integration and I decided to build it as a library as it will be referenced from other modules as well Once a purchase is being made I would need to update my wallet amount remote which is part of the data layer currently So my payment library will have a reference to it The issue I am struggling with is that from the payment library I need to provide to the data layer API call an instance of the data store factory Since I already have the data store factory injected as a singleton in the app module Application Component I am not sure if I can or should expose it to the library or I need to handle a new instance managed from within the library and not use Dagger for this specific use case and repository Thanks for any suggestions Hi all Im new here In my opinion there is only V and P in presentation layer is it right The domain layer and data layer look like the M in MVP If it is true why all the articles say that presentation use MVP instead of VP Hello and first of all thanks for the sample Its great and works pretty fine I was wondering as to which adjustments youd see necessary with this sample in order to have a single Activity with multiple Fragments application HasComponent becomes obsolete since it was used for only component usage This means that the Activity will build all Components Repositories necessary and be scoped during the whole lifetime of the Activity This means that a PerFragment scope will be necessary How would you implement it Hi all I am new to dagger How do I inject Presenter in activity in this architecture The application will crashed when the userListPresenterinitialize is called as the presenter is still null Thanks in advance screen shot at pm Hello I am thinking about using rhino in order to have some JS functions Where do you think is the best part to execute them I was thinking about having the following architecture Presentation layer triggers the execution of a script Domain layer uses the Data layer in order to retrieve the script Domain layer executes the script The script is possible to do complex calculations and operate over db By this approach we do our calculation aka logic inside a use case and in a background thread but we can not handle UI and we handle data from domain layer which breaks our architecture What do you think