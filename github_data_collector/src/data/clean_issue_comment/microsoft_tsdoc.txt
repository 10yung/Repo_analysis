I am looking to enforce documentation on the interfaces and all of its properties using eslint I have installed eslintplugintsdoc package in my project Is there a rule to enforce it Thanks Sometimes you have a generic base interface type that you extend from and you want to documenting a member of the extending interface without having to redeclare that member In this instance it would be useful to be able to document interface members in the interfaces description This is better explained in an example ts A generic building interface Building The total area of the building in sq ft area number Annoying and prone to breaking if the base interface changes A residential house that someone might live in interface HouseA extends Building The total area of the house in sq ft House area doesnt include garages attics and basements area number The number of people living in the house residents number A preferable solution A residential house that someone might live in member area The total area of the house in sq ft House area doesnt include garages attics and basements interface HouseB extends Building The number of people living in the house residents number Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Improves parsing for param and typeParam blocks to handle the following cases ts optional hyphens tsdocparamtagmissinghyphen param foo This is fine JSDocstyle type annotations in various positions with or without hyphens tsdocparamtagwithinvalidtype param boolean foo This is fine param foo boolean This is fine param foo boolean This is fine param foo boolean This is fine JSDocstyle optional parameter names tsdocparamtagwithinvalidoptionalname param foo This is fine param foodefault This is fine For each of the above cases a warning is issued and can be ignored via configuration In the case of the missing hyphen this fixes the case where the parameter name was not included in the parameter description When parsing out a JSDocstyle type or value in the case of a parameter default the parser handles balanced bracketsbraces quoted strings and escaped quotemarks Fixes This depends on and will remain in a Draft PR state until that PR is merged This adds support for synonyms for tags Fixes JSDoc supports synonyms for many tags and it would be worthwhile to support those synonyms for code bases that were previously migrated from JavaScript to TypeScript without requiring an investment in time to rewrite doc comment tags to support TSDoc For example abstract synonyms virtual augments synonyms extends default synonyms defaultvalue description synonyms desc fires synonyms emits param synonyms arg argument returns synonyms return throws synonyms exception yields synonyms yield link synonyms linkcode linkplain etc It would also be valuable for type parameter support allowing template as a synonym for typeParam The current TSDoc declaration reference syntax differs from the new proposed declaration reference syntax I would propose the following additional syntax for link and related tags as a means optin to the new proposed declaration reference syntax link betadeclarationreference link betadeclarationreference linktitle For example ts Normal link packageMyClass link packageMergedinterface link Mergedinterface Beta link packageMyClass link packageMergedinterface link Mergedinterface According to the readme param and returns should go together in a group like so ts Returns the average of two numbers remarks This method is part of the link corelibraryStatistics Statistics subsystem param x The first input number param y The second input number returns The arithmetic mean of x and y beta When this comment is parsed and emitted by the emitter blank lines are inserted between all the tags including the param and returns tag ts Returns the average of two numbers remarks This method is part of the link corelibraryStatistics Statistics subsystem param x The first input number param y The second input number returns The arithmetic mean of x and y beta These should be output as a group or at least have an option to output them as a group Currently the emitter seems to have no option or support for breaking lines at a certain length If a parameter description has a character block of text all of that text will be on the same line It would be really useful to have some sort of parameter or setting to automatically wrap text when a certain number of characters is reached in a line