We use frompython mainly to convert schemaObjectfield to edgeqlASTfield Since fields are typed anyway we dont really need to have the dispatch in BaseConstant we can just reimplement it in AlterObjectPropertygetast using the field type information GraphQL can do its own thing We dont have constant folding other than string concatenation so its not an issue for that use case either Bottom line the proper action is to kill BaseConstantfrompython Originally posted by elprans in This development tool allows removing all traces of EdgeDB from the specified PostgreSQL cluster Useful for cases when debugging bootstrap and setting up new clusters is expensive There are a couple of prerequisite commits that are tagging along this PR as well Constraints are overloaded callables and so require that the arguments of a constraint are specified when doing ALTER or DROP Issue schemaType now has an expr property that is nonempty if the Type is a type variant ie produced by an alias declaration The new isfromalias boolean computable is also added to simplify checks The REPL is taught to filter out type variants produced by aliases from lt and friends and a new la command is added to list aliases specifically GraphQL spec defines Int as int and Float as float specifically The definitions are actually very rigid and currently we dont quite adhere to these limitations when mapping EdgeDB types onto GraphQL The solution would be to add custom scalars like Int Bigint and Decimal so that we can map EdgeDB types in the following way int Int int Int int Int bigint Bigint float Float float Float decimal Decimal The actual number representations both in terms of input and output formats will adhere to valid representations of Int and Float since the parsing spec and output spec dont put a limit on the digits for either one of these So crucially GraphQL Decimal and Bigint wont have a special suffix like their counterparts in EdgeQL do This is not very important for Bigint as its perfectly compatible with all the other integers and differs only in the range However for Decimal vs Float the number actually has a different value so well have to be careful when reading these literals to infer the correct type so that the actual values passed to EdgeDB dont get unexpectedly mangled elprans this is the draft PR for inheritingpy Its a work in progress its down to mypy errors but there are unclear parts for me Some parts are totally work in progress for example the mindbending annotations I drafted for injeritingpy deltabases function the function InheritingObjectCommandapplyrebaseast seems to be never used in the tests I need help with the deltabases function and the three places with TODOs blush EdgeDB version alpha dev g b ec Steps to reproduce modbaybeta SELECT InternalServerError NoneType object has no attribute context Using left index or both slice indexes causes proper error message modbaybeta SELECT QueryError scalar type stdint cannot be sliced modbaybeta SELECT QueryError scalar type stdint cannot be sliced EdgeDB version alpha dev g b ec I tried removing constraint running an example from documentation and got confusing error modbaybeta ALTER TYPE User ALTER PROPERTY username DROP CONSTRAINT stdregexp InvalidReferenceError schema item defaultstdregexpdefaultusernamedefaultUserda a ee e b b d bfef afd does not exist Was my database corrupted somehow or that example is no longer valid in for master branch Type information modbaybeta d User type defaultUser required single link type schemaType readonly true required single link globalrole defaultGlobalRole default SELECT GlobalRole FILTER name Default LIMIT required single property avatar stdstr single property bio stdstr required single property createdat stddatetime default datetimecurrent readonly true single property editedat stddatetime required single property email stdstr constraint stdexclusive constraint stdregexpr required single property emailverified stdbool default false required single property id stduuid readonly true constraint stdexclusive required single property password stdbytes required single property username stdstr constraint stdexclusive constraint stdmaxlenvalue on lenstdstrsubject constraint stdminlenvalue on lenstdstrsubject constraint stdregexpr azAZ w Currently we dont distinguish between limited and unlimited precisionsize numbers in GraphQL Which means that by default it makes sense to treat Int as bigint and Float as decimal especially for variables This preserves the precision when its needed and can be downcast to the specific type the expression requires Since int is implicitly castable into bigint its possible to treat small Int literals as int and large ones as bigint Stop mapping bigint onto Float and use Int instead This technically breaks the sprict spec for Int and Float Introducing custom types would be a separate PR Issue EdgeDB version alpha dev g b ec docker image Python lib version a Docker version ce build a ea I run my client on a remote host each time I try to connect to the server CPU usage raises from to and stays there for a few seconds Top processes are This does not happen when I connect to database using CLI tool from host machine CPU usage on client machine is always low CPU information lscpu Architecture x CPU opmodes bit bit Byte Order Little Endian Address sizes bits physical bits virtual CPUs Online CPUs list Threads per core Cores per socket Sockets NUMA nodes Vendor ID GenuineIntel CPU family Model Model name IntelR XeonR CPU E v GHz Stepping CPU MHz BogoMIPS Hypervisor vendor KVM Virtualization type full L d cache KiB L i cache KiB L cache MiB L cache MiB NUMA node CPUs 