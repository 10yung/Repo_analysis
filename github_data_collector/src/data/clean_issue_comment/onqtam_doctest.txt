Sometimes you want to write a test that causes a process to exit or abort eg due to assertion failure Google Test offers a facility for testing these cases using subprocess spawning ASSERTDEATH I hope DocTest can offer this as well PS In some cases an actual exit or abort can be averted eg by overriding the assert macro in headeronly code or dynamically replacing the symbol for the abort or exit functions etc This would be flakier but not as heavy as launching another process Description Doctest will report exceptions even if code exists that uses Windows tryexcept StructuredException Handlers Steps to reproduce This test case will report a SIGSEGV even though the crash is handled by SEH ifdef MSCVER static void NoCrash try int p p except Caught TESTCASESEH Avoided Crash NoCrash CHECK endif This is only relevant for bug reports but if you do have one please provide a minimal set of steps to reproduce the problem Usually this means providing a small and selfcontained code using Catch and specifying compiler flagstools used if relevant Extra information Fill in any extra information that might be important for your issue If your issue is a bugreport definitely fill out at least the following doctest version v Operating System Windows x Compilerversion MS Visual Studio This code compiles MESSAGEkernelname check stdsetw i failed this code doesnt CHECKMESSAGEfalse kernelname check stdsetw i failed It gives me pathtodoctesth error static assertion failed with Cannot pass temporaries or rvalues to the streaming operator because it caches pointers to the passed objects for lazy evaluation doctest version v Operating System Devuan GNULinux Compilerversion GCC This is a feature request doctest supporting skipping test suites and test cases But if youve started running a test case it will either succeed or fail I want to have a function or a macro using which the testcases own code can decide Nope we cant really run the test lets mark it as skipped This is relevant when the conditions for running a test cannot be determined at compile time and are impossible or at least inconvenient to determine at testprograminvoke time when we would typically decide on skipping tests doctest version v Operating System Devuan GNULinux Compilerversion GCC Description Value parameterization appears to be on the roadmap for doctest After much difficulty I have managed to add my own implementation of value parameterization It works much like pytestmarkparameterize However each parameter name and set of values is a free function which can be used in multiple test cases This is also possible in pytest via range pytestmarkparameterizerange Unlike pytest it does not support assigning multiple values at once at the moment pytestmarkparametrizetestinputexpected To do so my code would need to be modified difficult Change PARAMETERIZE to accept more than parameter typename difficult easy Change OPTION to accept more than assignment Just replace k v with keqv and k v with keqv Usage Ive posted a shortened usage example here cpp PARAMETERIZErange int x OPTIONx OPTIONx OPTIONx PARAMETERIZErange int x OPTIONx OPTIONx OPTIONx OPTIONx TESTCASEGenerate the product set of all subcases int x y PICKrange x range y My implementation is here parameterizeh parameterizecpp My parameterization implementation is built off subcases and if you use multiple parameters in one TESTCASE doctests support for nested subcases doctest distinguishes subcases via name filename line number tuples If I construct a subcase tree filename and line number are not unique To ensure doctest distinguishes each subcase for each point on the subcase tree I pass in a unique name based on the stringified form of each OPTION between the root and the current node The PICK macro takes the leaf subcase name AKA the current parameter values and logs it via INFO The subcase name will show up in failed assertions until the object created by INFO is destroyed when its scope ends My subcase name generation is a bit ugly and adds a trailing after the final subcase its good enough for my own use case but should be fixed before upstreaming to doctest The macros are very fiddly and I am not confident they are free of undefined behavior My initial implementation had a useafterfree in PARAMETERIZE where inner stack variable was captured by reference and the resulting function returned a lambda with a stale reference This UB produced no visible signs on GCC and stdbadfunctioncall on MSVC I fixed this by capturing inner instead I still dont know what happens when you capture T parameter via Do you get a reference not a reference to a reference I developed my implementation based on doctest Since then seems to have changed how SUBCASE works My implementation seems to works fine on but it was not what I studied while building my implementation Extra information doctest version Operating System Windows and Linux Compilerversion MSVC GCC Description The Catch and Google Test Explorer Extension for Visual Studio Code has experimental support for doctest However several tests with the same name but in different tests suites cant be run Also the test results cant be displayed reliably inline in the source code This could be fixed if some additional information was available from the command line Could you add the possibility to list the test suites and test cases with file names and line numbers from the command line This would make it possible for the extension to work reliably and give VS Code users much better usability while using doctest See And Description It would be wonderful if doctest supported checking compiletime expressions and runtime expressions together Id like to check that my constexpr functions indeed work as compiletime and at runtime Example cpp templatetypename T constexpr T squareT const t noexcept if stdisconstantevaluated return t t t contrived but hopefully communicates whats missing return t t current TESTCASEonly happens at runtime AFAIU CHECKsquare CHECKsquare CHECKsquare error not caught proposed CONSTEXPRTESTCASEhappens at both compiletime and runtime CHECKsquare CHECKsquare CHECKsquare error in the constexpr case Extra information I doubt this is possible in C but it is certainly doable from C onward even if its a bit clunky for now staticassert is also not helpful here since only guaranteed constant expressions are allowed to be checked using a staticassert I would just like to add some weight to the requirement for a Junit reporter I know its scheduled for the release but currently it is what is stopping me from moving to doctest from Catch Otherwise Im very impressed with doctest Junit is a very useful format for interacting with CI systems like Team City Jenkins and in my case GitLab As such the output format does NOT need to support all of the Junit schema in fact it is better to provide the absolute minimum that will be parsed by these systems By the way the one that seems to cause the most issues is the classname attribute which needs to be present even though its not much use if the source language is not Java The tricky issues would seem to be Dealing with SUBCASES Junit seems to imply that the test statistics must be emitted as attributes in the opening tag of a testcase which causes a problem with a lightweight framework as we dont want to have to store intemediate results My thoughts on these points Is something specific to Doctest so I think you are the best person to have an opinion This can be sidestepped by NOT emitting the statistics attributes Most CI frameworks are just interested in detecting a failure tag In any event if we need to emit attribute tags it is fairly straightforward to build a postprocessor program that can be run over the file I built a simple one using a python package I found somewhere cant remember the name now It looks as though it should be possible to provide a Junit reporter by modifying the example XML reporter in fact by dropping about of the code I did a quick trial to confirm this but its not suitable for a PR as my understanding of the API and subcases is poor Description This is a releaseonly maconly issue so I would dub it relatively low priority doctest crashes even with the most simple test on mac with fsanitizeaddressundefined on this line pcout stdcout Steps to reproduce A single line simple test case CHECKtrue Build on mac with cmake DCMAKEBUILDTYPERelease DCMAKECXXFLAGSg fsanitizeaddressundefined Run test Crash on the line from above Cant be reproduced on anything other than mac and Release Extra information An example log from the crash ERROR AddressSanitizer unknowncrash on address x ce at pc x be bp x ffeeb b sp x ffeeb b READ of size at x ce thread T x be in doctestContextrun doctestimplh x bee in main doctestimplh x fff in start libdylddylibx x Address x ce is a wild pointer SUMMARY AddressSanitizer unknowncrash doctestimplh in doctestContextrun Shadow bytes around the buggy address x c b x c c x c d x c e x c f x c x c x c x c x c x c Shadow byte legend one shadow byte represents application bytes Addressable Partially addressable Heap left redzone fa Freed heap region fd Stack left redzone f Stack mid redzone f Stack right redzone f Stack after return f Stack use after scope f Global redzone f Global init order f Poisoned by user f Container overflow fc Array cookie ac Intra object redzone bb ASan internal fe Left alloca redzone ca Right alloca redzone cb ABORTING A travisci build can be seen here As per it would be nice to have a ADDSUCCESSAT to inform doctest of a successful assert in the same way ADDFAILAT informs it of a failed assert 