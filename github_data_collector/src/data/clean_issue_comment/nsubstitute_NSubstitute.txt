The following test crashes NUnit csharp Test public void Test ReceivedInOrderasync throw new Exception If I remove the async keyword then the exception is correctly propagated to the test Exception stack trace Unhandled exception SystemException Exception of type SystemException was thrown at NUnitTestProject TestscTest b dMoveNext in ConsoleApp NUnitTestProject UnitTest csline End of stack trace from previous location where exception was thrown at SystemThreadingTasksTaskcThrowAsyncb Object state at SystemThreadingQueueUserWorkItemCallbackccctorb QueueUserWorkItemCallback quwi at SystemThreadingExecutionContextRunForThreadPoolUnsafe TState ExecutionContext executionContext Action callback TState state at SystemThreadingQueueUserWorkItemCallbackExecute at SystemThreadingThreadPoolWorkQueueDispatch at SystemThreadingThreadPoolWaitCallbackPerformWaitCallback Project dependencies PackageReference IncludeNSubstitute Version PackageReference Includenunit Version PackageReference IncludeNUnit TestAdapter Version PrivateAssetsallPrivateAssets IncludeAssetsruntime build native contentfiles analyzers buildtransitiveIncludeAssets PackageReference PackageReference IncludeMicrosoftNETTestSdk Version From saying protected virtual is substitutable is misleading While technically possible hacky with the current API its not something we encourage and people should not expect to mock these members with NSubstitute By overridable we mean public virtual protected virtual protected internal virtual or internal virtual with InternalsVisibleTo attribute applied I have this test class using NSubstitute using NUnitFramework using System using SystemLinqExpressions namespace MyTests public class Tests Test public void Test var companyBL SubstituteForICompanyBL companyBLGetCompanyc new cRegionID ReturnsForAnyArgsnew RegionID var company companyBLGetCompanyc new cRegionID var dataRetriever new DataRetrievercompanyBL and this code in another project namespace MyTests using System using SystemLinqExpressions public interface ICompanyBL T GetCompanyTExpressionFuncCompany T selector public partial class Company public int RegionID get set public class DataRetriever public DataRetrieverICompanyBL companyBL This is null var company companyBLGetCompanyc new cRegionID The company var is null However when the code is all contained in the same cs file in the same project the value is not null Why is the value null when used in another file in another project NSubstitute version NET Framework version StackOverflow question Mock MicrosoftExtensionsLogging in Net core Following code is working in Net core but Net Core Environments MicrosoftExtensionsLogging Version NSubstitute Version Xunit Domain Class public class Service private readonly ILoggerService logger public ServiceILoggerService logger logger logger public void TestLogger loggerLogInformationTesting Test Class public class ServiceTests private readonly ILoggerService logger private readonly Service service public ServiceTests logger SubstituteForILoggerService service new Servicelogger Fact public void TestLoggerShouldLogInformation Act serviceTestLogger Assert loggerReceivedLogLogLevelInformation ArgAnyEventId ArgAnyobject ArgAnyException ArgAnyFuncobject Exception string Not sure whether this is a bug Any support would be appreciated Describe the bug When there is a missing binding redirect the mock does not throw an error when evaluating with ArgIs which make it hard to debug the issue It hides the fact that it could not load the assembly and simply return the default value when calling the method of the mock To Reproduce c code using DeepEqualSyntax using FluentAssertions using NSubstitute using NUnitFramework namespace TestProject public class SomeModel public int SomeProperty get set public interface ISomeInterface int SomeMethodSomeModel model public class UnitTest Test public void Test var mock SubstituteForISomeInterface var expected new SomeModel SomeProperty mockSomeMethodArgIsSomeModelactual actualIsDeepEqualexpected null Returns var result mockSomeMethodnew SomeModel SomeProperty resultShouldBe Test public void Test var expected new SomeModel SomeProperty var result expectedIsDeepEqualnew SomeModel SomeProperty null resultShouldBeTrue csproj file Project SdkMicrosoftNETSdk PropertyGroup TargetFrameworknet TargetFramework PropertyGroup ItemGroup PackageReference IncludeFluentAssertions Version PackageReference IncludeNSubstitute Version PackageReference IncludeNSubstituteAnalyzersCSharp Version PackageReference IncludeNUnit Version PackageReference IncludeDeepEqual Version PackageReference IncludeSerilogSinksTestCorrelator Version ItemGroup Project Expected behaviour It simply returns the default value when calling the method of the mock see method Test I expected to get a error to help quickly identify the issue For example in the method Test the unit test fail with SystemIOFileLoadException Could not load file or assembly SystemCollectionsImmutable Version Cultureneutral PublicKeyTokenb f f f d a a or one of its dependencies The located assemblys manifest definition does not match the assembly reference Exception from HRESULT x Environment NSubstitute version NSubstituteAnalyzers version CSharp Platform net project on Windows Additional context There were nuget packages using the nuget package SystemCollectionsImmutable but with a different version The package DeepEqual was using version The package SerilogSinksTestCorrelator was using version The demo is simplified In my case the issue was coming from a project reference that as been added to another project which make it hard to figure out what was happening When you specify the property GenerateBindingRedirectsOutputType it works again The error was happening in a unit test project see also csproj file Project SdkMicrosoftNETSdk PropertyGroup TargetFrameworknet TargetFramework GenerateBindingRedirectsOutputTypetrueGenerateBindingRedirectsOutputType PropertyGroup ItemGroup PackageReference IncludeFluentAssertions Version PackageReference IncludeNSubstitute Version PackageReference IncludeNSubstituteAnalyzersCSharp Version PackageReference IncludeNUnit Version PackageReference IncludeDeepEqual Version PackageReference IncludeSerilogSinksTestCorrelator Version ItemGroup Project Describe the bug Running Pack gives this output C Program Files dotnet sdk Sdks NuGetBuildTasksPack buildCrossTargeting NuGetBuildTasksPacktargets error NU The PackageIconUrliconUrl element is deprecated Consider using the PackageIconicon element instead Learn more at To Reproduce Try packing the NSubstitute project Expected behaviour Pack is executed without warningserrors Environment NET Core SDK Visual Studio Additional context See this discussion for more contextinfo I think it would be helpful if the partial subs page mentioned the need to add ItemGroup AssemblyAttribute IncludeSystemRuntimeCompilerServicesInternalsVisibleTo Parameter YOUR TEST ASSEMBLYParameter AssemblyAttribute AssemblyAttribute IncludeSystemRuntimeCompilerServicesInternalsVisibleTo Parameter DynamicProxyGenAssembly Parameter AssemblyAttribute ItemGroup Usually when Im reaching for a partial sub I need to invoke a public method that calls a subbed internal virtual It took me a long time to discover this assembly configuration While writing this feature request I actually found an nsub page that talks about this Unfortunately I never saw it while I was troubleshooting I actually gave up on nsub for that specific test and imported moq I mean why not both right Seeing moq crash gave me the insights needed to get nsub going again Im excited to see progress on making nsub crash too Is your feature request related to a problem Please describe A clear and concise description of what the problem is Ex Im always frustrated when Describe the solution youd like A clear and concise description of what you want to happen Describe alternatives youve considered A clear and concise description of any alternative solutions or features youve considered Additional context Add any other context or screenshots about the feature request here It would be nice if we could have an overload of Received that takes in a quantity I need to check whether a method is called at least once Im having to interrogate the ReceivedCalls and subsequently the ICall enumerable Im happy to add this but am unsure what tests would be wanted Thanks Sean Describe the bug NSubstituteExceptionsUnexpectedArgumentMatcherException should be thrown for a test however it is only thrown when the test is run in succession after another test To Reproduce Run A and B by themselves both will pass Run A and B by right clicking in the cs file and selecting Run all tests only A will pass using NSubstitute using NUnitFramework using System namespace Tests TestFixture public class CreditorMapperTests private IAbcContext AbcContext SetUp public void Setup AbcContext SubstituteForIAbcContext AbcContextCompanyInfoReturnsx new CompanyInfoArgAnyGuid Test public void A Creditor publishDocument new Creditor publishDocumentCompanyExternalId AbcContextCompanyInfoUniqueId Test public void B Creditor publishDocument new Creditor publishDocumentCompanyExternalId AbcContextCompanyInfoUniqueId public interface IAbcContext CompanyInfo CompanyInfo get public class CompanyInfo public CompanyInfoGuid uniqueId UniqueId uniqueId public readonly Guid UniqueId public class Creditor public Guid CompanyExternalId get set Expected behaviour Both tests should throw the Exception regardless of whether or not they were run individually or as part of the Run all tests in file Environment NSubstitute version NSubstituteAnalyzers version CSharp Platform NET Core Windows When creating mock using SubstituteFor method got exception CastleDynamicProxyProxyGenerationException Duplicate element CastleDynamicProxyGeneratorsMetaMethod To Reproduce Create two identical interfaces with one identical method in two namespaces Inherit one of the interfaces and define the same method sample setup csharp namespace firstNamespace public interface BaseObject string SomeMethod get namespace SecondNamespace public interface BaseObject string SomeMethod get public interface BaseFolder BaseObject string SomeMethod get Try create mock using SubstituteFor method like that firstNamespaceBaseObject mock SubstituteForfirstNamespaceBaseObject SecondNamespaceBaseFolder At first attempt please use exactly the same name for namespaces and interfaces Even small change eg FirstNamespace instead of firstNamespace magically fixes this issue Expected behaviour Allow creating mock for provided scenario Environment NSubstitute version NSubstituteAnalyzers version unable to successfully install Platform windows Visual Studio Express Edition version update Net Framework version Additional context Sample VS project reproducing the issue is attached here NSubstituteIssuezip Stack trace from exception at CastleDynamicProxyGeneratorsTypeElementCollection AddTElement item at CastleDynamicProxyContributorsCompositeTypeContributorCollectElementsToProxyIProxyGenerationHook hook MetaType model at CastleDynamicProxyGeneratorsClassProxyGeneratorGenerateTypeString name Type interfaces INamingScope namingScope at CastleDynamicProxyGeneratorsClassProxyGeneratorcDisplayClass GenerateCodeb String n INamingScope s at CastleDynamicProxyGeneratorsBaseProxyGeneratorcDisplayClass ObtainProxyTypeb CacheKey at CastleCoreInternalSynchronizedDictionary GetOrAddTKey key Func valueFactory at CastleDynamicProxyGeneratorsBaseProxyGeneratorObtainProxyTypeCacheKey cacheKey Func factory at CastleDynamicProxyGeneratorsClassProxyGeneratorGenerateCodeType interfaces ProxyGenerationOptions options at CastleDynamicProxyDefaultProxyBuilderCreateClassProxyTypeType classToProxy Type additionalInterfacesToProxy ProxyGenerationOptions options at CastleDynamicProxyProxyGeneratorCreateClassProxyType classToProxy Type additionalInterfacesToProxy ProxyGenerationOptions options Object constructorArguments IInterceptor interceptors at NSubstituteProxiesCastleDynamicProxyCastleDynamicProxyFactoryCreateProxyUsingCastleProxyGeneratorType typeToProxy Type additionalInterfaces Object constructorArguments IInterceptor interceptors ProxyGenerationOptions proxyGenerationOptions at NSubstituteProxiesCastleDynamicProxyCastleDynamicProxyFactoryGenerateTypeProxyICallRouter callRouter Type typeToProxy Type additionalInterfaces Object constructorArguments at NSubstituteProxiesCastleDynamicProxyCastleDynamicProxyFactoryGenerateProxyICallRouter callRouter Type typeToProxy Type additionalInterfaces Object constructorArguments at NSubstituteCoreSubstituteFactoryCreateType typesToProxy Object constructorArguments Boolean callBaseByDefault at NSubstituteCoreSubstituteFactoryCreateType typesToProxy Object constructorArguments at NSubstituteSubstituteForType typesToProxy Object constructorArguments at NSubstituteSubstituteFor T T Object constructorArguments at NSubstituteIssueUnitTest TestMethod in C NSubstituteIssue NSubstituteIssue UnitTest csline 