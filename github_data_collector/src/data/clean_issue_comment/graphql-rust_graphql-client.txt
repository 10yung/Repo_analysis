 I have a schema generated by a hasura instance that is causing the rust compiler to panic thread rustc has overflowed its stack Schema and query causing the issue rustcpaniczip I had some code working successfully with a previous schema but I added some tables and now Im getting a stack overflow Im wondering if theres some recursive relationships in my schema that are causing issues or just the size of the schema itself hasura generates a ton of schema mine is currently kb of JSON Hi Ive got the following mutation mutation InsertTransaction amount Int creditor uuid debitor uuid product uuid note String inserttransactionsobjects amount amount creditid creditor debitid debitor productid product note note affectedrows Furthermore I use the following code to generate my structs deriveGraphQLQuery graphql schemapath graphqlschemagraphql querypath graphqltransactiongraphql struct InsertTransaction If I send a request with a transaction to my server it answers with the following body data inserttransactions affectedrows but deserializing with serde leads to the following struct instance ResponseData inserttransactions None even as inserttransactions cleary is not None deriveGraphQLQuery help message unnamed operation Project fails to compile with the error above here are my imports use graphqlclient use wasmbindgenprelude use websysconsole deriveGraphQLQuery graphql querypath backendusersgraphql schemapath backendschemajson responsederives Debug deprecated warn pub struct Users usersgraphql query users id email querygraphql gql query Q a BFragment fragment BFragment on TypeOne b AFragment fragment AFragment on TypeTwo c schemagraphql gql type Query a TypeOne type TypeOne b TypeTwo type TypeTwo c Int during compiling rust Compiling graphqlclient v localstorage graphqlclient graphqlclient error E cannot find type AFragment in this scope graphqlclient tests fragmentcomplexchainrs deriveGraphQLQuery help a struct with a similar name exists BFragment error aborting due to previous error Is this my mistake The actual query that ive tried works on server side but not library Maybe related to The test on this issue was done on master branch eb and shows same error See cc mathstuf This is a placeholderWIP issue to gather what we need before a release The library has settled down a lot in the recent months and I think we can commit to stability in the GraphqlQuery trait and the generated code soon with a bit more work Feedback and ideas on things we have to do before is very much welcome Features Cut down unnecessary prefixing Figure out whether the CLI should be considered at the same time I would be interested in feedback from people using it Migrate the web client to futures We may want to switch it to an external library at the same time My preference would be surf Issue Improve the validation of the derive attributes Evaluate whether new features in the GraphQL spec input unions would require breaking changes Bugs x Breaking changes Remove graphqlclientweb it is a feature of graphqlclient now I think this comes down to there only being tracks right now It would be faster to do the WASM tests in a separate job pipeline cargo fmtprettier and cargo clippy can also be separate jobs as well cargo fmt is fast since theres no download and cargo clippy is just doing cargo check under the hood It also highlights their issues rather than putting them in the middle of the gigantic log I see just cargo install wasmbindgencli taking s almost minutes This could almost certainly be cached somehow Caching the target directory may also be useful if some good way of fingerprinting the thing can be found I think the biggest problem is the examples directories starting everything from scratch again I think it may be useful to fold them into the standard examplesfoobinrs pattern and add their oddball deps to devdependencies with comments as to why theyre there Each one is taking minutes and theres only right now Thoughts Im generating the client code with the CLI tool The generated file for a query GetData will look something like this with a custom scalar URL rust pub struct GetData pub mod getdata doc URL string type URL superURL Im struggling to find a way of defining those custom scalars outside of the generated file Is there a way to do that Or will that only be possible after 