The GridLayout class should have tests A good place to start is with boxlayoutspects This is a rewrite of the existing virtualdom package to be compatible with JSXTSX The JSX typings are assembled from Preact mostly and React some with some custom tweaks as needed The typings right now are good but it assumes every HTML element has all attributes available We can improve this in the future The typings support SVG but Im sure its not going to work yet Im sure Ill need to add some code to handle SVG elements properly It supports intrinsic elements and now also function components I still dont think we need support for classbased components since we already have widgets with their own lifecycle paradigm The purpose of this package is to provide a tool for easily rendering leaf content outofthebox with Phosphor This code is fast On my machine the included example takes just us to render updates For Phosphor my plan is to deprecate the virtualdom package and replace it with this For core widgets which make use of custom renderers I will make the renderer interface more generic so that users can implement their own renderers using any third party package React Vue lithtml etc The default renderers will use this package blink afshin ellisonbg jasongrout telamonian Hi sccolbert cc jasongrout blink afshin ellisonbg SylvainCorlay I have been working on adding editing capabilities to DataGrid and trying to have a flexible design so that it is possibly something that can be merged to upstream and useful for everyone It is still a work in progress and I would appreciate any feedback In a short summary it adds a new DataModel MutableDataModel ICellEditorController interface with a concrete implementation and ICellEditor interface with several editor implementations and ICellInputValidator interface with concrete implementations for some types I also added cursor movement using Tab Enter keys within body or confined to selections when there are any Editing is possible if data model is of type MutableDataModel and there is a selection model It is triggered using double click or typing Editing can also be triggered programmatically optionally with a custom editor and validator Editor type to use is inferred from metadata if the metadata follows the schema defined in otherwise if cell data is a primitive type TextCellEditor is used Cell editors to used can be setoverridden based on cell data type or metadata keyvalue pair match DataGrid example is modified to present most of the editing features including a custom cell editor CellEditing Some Documentation to help with PR Cursor movement Tab right Shift Tab left Enter down Shift Enter up Editing starts at cursor position and cursor moves to next column next row when next move step requires so Cursor moves within selection rectangles and jumps to next rectangle when next move step requires so CursorMovement Deleting Cell values setting to null using Delete key MutableDataModel which defines new method setData Cell Editor If cells have metadata information based on schema at type information is used to choose best cell editor for a cell TextCellEditor Default editor unless there is a better match and cell data type is primitive Editor for cells of type string displayed as a text input Field Metadata type string NumberCellEditor Editor for real number typed cells displayed as a text input Field Metadata type number IntegerCellEditor Editor for integer typed cells displayed as a spinner input Field Metadata type integer BooleanCellEditor Editor for boolean typed cells displayed as a checkbox Field Metadata type boolean DateCellEditor Editor for date typed cells displayed as a date picker Field Metadata type date OptionCellEditor Editor for cell with data types that have enum options displayed as a drop down list Field Metadata type any constraint enum list of options DynamicOptionCellEditor Editor for cell with data types that have options from previously entered values in the same column displayed as an autocomplete drop down list Field Metadata type any constraint enum dynamic This is not a standard schema format I extended it Editor Controller Manages editor overrides and instances Editors can be overridden based on cell data type and metadata keyvalue pair match Controller makes sure there is only one editor active at a time Validators Before values input are committed they are serialized and validated if a validator is available Validation error messages are shown using standard HTML form validation system TextInputValidator Checks for valid text entry Can check for minmax text length and regex pattern match requirements NumberInputValidator Checks for valid real number entry Can check for minmax bounds IntegerInputValidator Checks for valid integer entry Can check for minmax bounds Forcing Phosphor to be a singleton on the page is not nice for projects which consume Phosphor It means new functionality in Phosphor is not available for the users of those downstream projects until those projects update their dependencies For Phosphor which should hopefully be the last major version of Phosphor I think we can do better One idea that I have is to leverage Symbolforphosphorwidgets x and tag the Widget prototype with that Symbol for each minor release Since the Symbol is guaranteed to be global on the page it would let duplicate prototypes function just fine because we could guarantee they have the needed API Instead of using the instanceof operator we could have some convenience functions for checking the presence of the symbols This idea may have holes but its a good starting point I think CC afshin blink jasongrout For BoxLayout and SplitLayout these properties should be initialized when the sizer is created if possible In some cases the widget will be resized before the fit request is processed This means the initial layout will have stale data In the case of the SplitLayout this causes the initial layout to be completely wrong when one widget has a stretch factor of zero Im using OS X and the latest version of Firefox On master I recently noticed that a few dozen of the unittest for the FocusTracker and TabBar widgets were failing SUMMARY tests completed tests failed FAILED TESTS phosphorwidgets FocusTracker currentChanged should be emitted when the current widget has changed Firefox Mac OS X expected null to not equal null AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs activeChanged should be emitted when the active widget has changed Firefox Mac OS X expected null to not equal null AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs The strange thing is that I dont see these failures when testing using Chrome and I dont see the failures in the CI run on the commits I made in PR even though the CI also uses Firefox Not sure whats going on details summaryThe rest of the unittest failure logsummary should be emitted when the active widget is set to null Firefox Mac OS X expected null to not equal null AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs currentWidget should be set to the widget that gained focus Firefox Mac OS X expected Object flags layout to equal Object flags layout AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should revert to the previous widget if the current widget is removed Firefox Mac OS X expected Object flags layout to equal Object flags layout AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs activeWidget should be set to null when the active widget loses focus Firefox Mac OS X expected Object flags layout to equal null AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should be set to the widget that gained focus Firefox Mac OS X expected Object flags layout to equal Object flags layout AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs focusNumber should give the highest number for the currentWidget Firefox Mac OS X expected to equal AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should update when a widget gains focus Firefox Mac OS X expected to equal AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs remove should set the currentWidget to the previous one if the widget is the currentWidget Firefox Mac OS X expected Object flags layout to equal Object flags layout AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs TabBar tabMoved should be emitted when a tab is moved right by the user Firefox Mac OS X Timeout of ms exceeded For async tests and hooks ensure done is called if returning a Promise ensure it resolves should be emitted when a tab is moved left by the user Firefox Mac OS X Timeout of ms exceeded For async tests and hooks ensure done is called if returning a Promise ensure it resolves tabActivateRequested should be emitted when a tab is left pressed by the user Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should make the tab current and emit the currentChanged signal Firefox Mac OS X expected to equal AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should emit even if the pressed tab is the current tab Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs tabCloseRequested should be emitted when a tab close icon is left clicked Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should be emitted when a tab is middle clicked Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs tabDetachRequested should be emitted when a tab is dragged beyond the detach threshold Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should be handled by calling releaseMouse and removing the tab Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should only be emitted once per drag cycle Firefox Mac OS X expected to equal AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should add the pmoddragging class to the tab and the bar Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs allowDeselect should determine whether a tab can be deselected by the user Firefox Mac OS X expected to equal AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs handleEvent left click should emit a tab close requested signal Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs middle click should emit a tab close requested signal Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs mousedown should add event listeners if the tabs are movable Firefox Mac OS X expected to not equal AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs mousemove should do nothing if there is a drag in progress Firefox Mac OS X expected to equal AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should emit the detach requested signal if the threshold is exceeded Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should bail if the signal handler aborted the drag Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs should update the positions of the tabs Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs mouseup should emit the tabMoved signal Firefox Mac OS X Timeout of ms exceeded For async tests and hooks ensure done is called if returning a Promise ensure it resolves should move the tab to its final position Firefox Mac OS X Timeout of ms exceeded For async tests and hooks ensure done is called if returning a Promise ensure it resolves should cancel a middle mouse release Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs keydown should prevent default Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs contextmenu should prevent default Firefox Mac OS X expected false to equal true AssertionErrorbuildbundletestjs moduleexportsAssertionprototypeassertbuildbundletestjs assertEqualbuildbundletestjs moduleexportsctx name buildbundletestjs buildbundletestjs details As it says on the tin This could be a way to get rid of our GraphicsContext wrapper which tries to minimize state changes The Skia API is stateless so we should get a nice performance boost from just that Nevermind cutting out the whole browser translation layer Id like to create a keybinding that only works on macs Intuitively I might imagine something like json command notebookcreateconsole selector jpNotebookfocus macKeys Cmd Shift but I think that wont work in the current code we assume keys is an array throughout the code and this would make it undefined on nonMac platforms I could do this json command notebookcreateconsole selector jpNotebookfocus keys macKeys Cmd Shift but that assumes that the matching function at is never called with userKeys being an empty list I think thats valid are we guaranteed that Note that I cant do json command notebookcreateconsole selector jpNotebookfocus keys Cmd Shift because this would be translated to Shift on nonmac platforms which is not intuitive to me I think the current behavior of ignoring Cmd on nonmac platforms should be changed to invalidating a keybinding if it contains Cmd on a nonmac platform Fixes and probably a bunch of other issues This PR adds the hpass function and VirtualElementPass class described in There are still a number of unanswered questions as to the detials of their implementations For example should VirtualElementPass allow for children and if so how should they be handled Following up on a suggestion made by jasongrout during the latest Phosphor sessioncall I think we should add a pass thru vdom element that renders a real DOM element using a callback This could act like an escape hatch from Phosphors vdom and allow for composition with vdom elements from other libraries like React hint hint Given the structure of the virtualdom package and the updateContent function I think it would make sense to implement this via an hpass function with the following signature typescript export function hpasscallback host HTMLElement void VirtualElementPass This could exist alongside the extant h function During updateContent when a node with typescript nodetype passthru is encountered nodecallbackhost will be invoked and from that point on any diffingupdating will be the responsibility of the callback I think the most importanturgent use case for this is allowing for the blending of React vdom into Phosphor vdom The above pattern can mesh very nicely with ReactDOMrenderhost Component since that function does its own diffing This would allow Phosphor to better accommodate React while still avoiding any dependency on it Im currently prepping a PR based on the above cc jasongrout blink sccolbert 