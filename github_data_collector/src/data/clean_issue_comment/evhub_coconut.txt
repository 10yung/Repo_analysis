I was going throught the case studies for coconut tutorial and tried using addpattern python def factorial addpattern def factorialn is int if n Compute n where n is an integer n factorialn Test cases factorial print MatchError factorial print MatchError factorial print factorial print Now compiling with coconut factcoco mypy yielded CoconutWarning missing initcoco in package Compiling factcoco Compiled to factpy factpy error Name factorial already defined on line Found error in file checked source file Exiting due to MyPy error The code runs and all but I want to know if this is expected and desired output from mypy This adds a nowrap flag to the compiler to disable wrapping typedefs to resolve Im a bit mixed about the name of the flag I feel like its too ambiguous and Im very much open to changing it When Coconut has to do something that will obviously break typechecking outside of the header it should automatically add type ignore comment I tried to do something similar to this def someexpensivefunctiona a def fa csomeexpensivefunctiona fc but it compiles to code which throws SyntaxError assignment expression cannot be used in a comprehension iterable expression Hi Im trying to find out how to run coconut environment in Google Colab If there is anyone who succeeded in the work please share your experience Thank you in advance Jin When compiling to Python with target set to any version above x the type hints for functions and variables get wrapped in single quotes This breaks functionality with some libraries which rely on type hints such as pydantic I first noticed it with Coconut Version Ernest Scribbler running on Python but tested it out on the online interpreter with Python and with the same results Based on the documentation at it looks like it should be possible to use standard type annotation syntax For context I was originally testing to see if I could use coconut with fastapi Thanks to Microsofts language server protocol there are tons of opensource implementation of LSP in other languages there are even two implementations for python I would like to start a discussion on how it would look like for Coconut Also what about static code analysis like flake or pylint what would that look like Should compile python addpattern def f into python def uniquename f addpatternfuniquename when there are no additional decorators Should do the same thing Coconut does internally The setup and teardown is horrendous if you call parallelmap multiple times We should just use the same pool for all calls