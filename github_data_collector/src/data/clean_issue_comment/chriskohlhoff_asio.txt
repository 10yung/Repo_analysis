is it possible to have a coroutinests example of an async TCP client that uses the function asioasyncconnect It is to see what is the best practice for using this lib on the client side The following causes a compiler error when ASIODISABLEDECLTYPE is defined or when decltype is unavailable validmutablea x buffersequencebeginx Here validmutablea is a type defined in the unit test and approved by isconstbuffersequence and ismutablebuffersequence templates asioiptcpresolverasyncresolve resolves names inorder on Windows IE multiple name resolutions do not take place at a given time As I suspected getaddrinfo is used in a worker thread in the implementation I believe this can be improved two ways The lesser preferable of the two is spawning a thread for every resolution which is not feasible for obvious reasons or using a thread pool which would only improve the situation and would not solve it The latter of the two is by using GetAddrInfoExA with a completion callback or getaddrinfoa on Linux I havent tested on Linux outside of WSL which may still use getaddrinfo internally so I dont know if the limitation exists on Linux This would not work on Windows or Server R or before as per MSDN lpOverlapped is currently reserved and must be set to NULL since asynchronous operations are not supported However it would still improve most Windows use cases that do large amounts of name resolution ASIO is headeronly so building and installing it could be very fast however currently the build system always builds tests and examples In CI or production environments examples almost never need to be built Tests are not necessary in many cases This patch makes it easier to integrate Asio in a CI or production build environment by allowing to disable building tests and examples I have a device that is connected using a serial interface to the computer This device is an old one and from several old drivers I have developed a new one using boostasio threads etc I use the function asyncreadsome from the serialport class and it has been working without any problem using the serial interface However attaching a serialusb converter the device didnt work After some hours investigating I have found that the asio implementation of serial port works different if you are using the serial interface or the usb converter With the serial interface the function returns after have read bytes However with the usb converted return every byte The boost documentation is clear The function call always returns immediately but its surprising to me why this difference with the same driver device but using a converter Could you explain it The tag for asio seems to be missing Please kindly add it Thanks Useful for when using ASIO in a Windows Subsystem on Linux use case where the same source files are used by both Linux and Windows Currently the asioipaddresshpp header pulls in rather a lot of code echo include asioipaddresshpp g stdc x c I E wc l This is so excessive that it makes it difficult to see asioipaddress as a vocabulary type For example if we have an application header apikeyhpp that defines struct ApiKey int t keynr stuff stdoptionalasioipadress ip then all TUs that include apikeyhpp will pull in at least LOC even if they never touch the ip field of the ApiKey struct This bloat somewhat discourages one from using asioipaddress in places like these which is a shame because I think asioipaddress does have the potential to be a true vocabulary type I was able to workaround with this changes diff git aasioincludeasiodetailstringviewhpp basioincludeasiodetailstringviewhpp index f cebc d f a aasioincludeasiodetailstringviewhpp basioincludeasiodetailstringviewhpp if definedASIOHASSTDSTRINGVIEW include stringview elif definedASIOHASSTDEXPERIMENTALSTRINGVIEW include experimentalstringview include stringview else definedASIOHASSTDEXPERIMENTALSTRINGVIEW error ASIOHASSTRINGVIEW is set but no stringview is available endif definedASIOHASSTDEXPERIMENTALSTRINGVIEW namespace asio using stdbasicstringview using stdstringview elif definedASIOHASSTDEXPERIMENTALSTRINGVIEW using stdexperimentalbasicstringview using stdexperimentalstringview using stdbasicstringview using stdstringview endif definedASIOHASSTDEXPERIMENTALSTRINGVIEW namespace asio END TCP port number is of range however resolver still succeed on port number that is larger than the max port number It will cast the large number to unsigned short and silence the error c auto endpoints resolverresolve auto endpoint endpointsbeginendpoint assertendponitport failed endpointport equals to which is staticcastunsigned short 