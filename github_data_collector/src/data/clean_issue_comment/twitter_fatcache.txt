Were evaluating the potential benefits of deploying Fatcache and Ive run into a problem I havent been able to resolve The code compiles cleanly on the platform were using Ubuntu Trusty and the server process start just fine But if I run performance tests with memtierbenchmark the server process crashes with a segmentation fault for any nontrivial test configuration Ive tried running minimal configurations that use all defaults Ive compiled the v tag and the lastest code from the GitHub repo And Ive compiled with full debugging enabled and optimization O flag disabled The process crashes each time no matter which configuration I use Im hoping its a known issue or something dumb Im doing to setupconfigure Fatcache But since I havent found anything by searching public documents related to Fatcache I wanted to post here to look for clues Heres the stack trace from gdb in case it helps Program received signal SIGSEGV Segmentation fault memcpysse unaligned at sysdepsx multiarchmemcpysse unalignedS sysdepsx multiarchmemcpysse unalignedS No such file or directory gdb where memcpysse unaligned at sysdepsx multiarchmemcpysse unalignedS x ccfc in mbufcopy mbuf x f pos x ffff ff cf size at fcmbufc x ce c in mbufcopyfrom mhdr x b pos x ffff ff cf size at fcmbufc x c f in rspsendvalue ctx x fffffffea conn x ab msg x a it x ffff ef c cas at fcresponsec x aaae in reqprocessget ctx x fffffffea conn x ab msg x a at fcrequestc x b ae in reqprocess ctx x fffffffea conn x ab msg x a at fcrequestc x b f in reqrecvdone ctx x fffffffea conn x ab msg x a nmsg x at fcrequestc x in msgparsed ctx x fffffffea conn x ab msg x a at fcmessagec x c in msgparse ctx x fffffffea conn x ab msg x a at fcmessagec x e in msgrecvchain ctx x fffffffea conn x ab msg x a at fcmessagec x f in msgrecv ctx x fffffffea conn x ab at fcmessagec x f in corerecv ctx x fffffffea conn x ab at fccorec x f in corecore ctx x fffffffea conn x ab events at fccorec x f in coreloop ctx x fffffffea at fccorec x d in main argc argv x fffffffeb at fcc The release link in the README points to the Google code archive and there hasnt been any tarball release since Maybe you should make a new one or simply get rid of release tarballs if this does not make sense libfc is nonthreadsafe lib for using it as a independent storage engine hi manjuraj allow to set max simultaneous connections server shouldnt close listen fd when accept function occur error like the following snippet n pwritefd slab size off if n size logerrorpwrite fd d zu bytes at offset PRId failed s fd size off strerrorerrno return FCERROR when nsize pread or pwrite may interrupt by signal errno is equal to EINTR it should process on writingnot return an error Hi I am testing fatcache with libmemcached I have write a simple program and I found that during the working process the program consumes a lot of my memory My computer has G memory and the program can take all these memories The setup is like this OS ubuntu database mysql C library libmemcached Memory GB SSD Use a usb driver flash instead By debugging the program I found that the set operation needs a lot of memory So do you have any idea about this problem Is there any problem with libmemcached Looking forward for your replay Thank you very much Best Hi I received the following kernel error while running the fatcache kernel Out of socket memory Setup GB RAM TB SSD fatcache instances each with GB of memory each m i core box Running a memslap client creating thousands of connections K connections to fatcache When the free memory left is around GB I see the above error and memslap stops kernel Let me know if you need any other information Hi I noticed that GETs do not result in writes to the disk This makes sense for the common case Im wondering if there are cases where fatcache would be required to write to disk in the future eg support CAS maintain state of cache across power cycle BTW Is there a plan to support persistent fatcache that keeps state across power cycle Is a persistent memcache useful in real deployments Thanks Hi is fatcache currently in production use Im interested in contributing to optimizing memcache for SSDs and would like to start with performance analysis to expose optimization possibilities Should I start with fatcache or is there another deployment you would recommend Thanks In your summary you write that you have code in place to check for SHA collisions I suggest getting rid of that code and its performance overhead There are simply no collisions for reasonably short keys The chance of accidentally producing a hash collision for SHA is astronomically small Even purposely finding SHA collisions with brute force takes ca instructions Just do the math on how long your system would need to be running for that to happen The only reason for doing the check would be to protect against more elaborate attacks which a user might be able to inject It is unlikely that SHA will be susceptible to preimage attacks which would be necessary to for example retrieve other chosen data from the cache any time soon not even MD is More likely but still a far fetch would be a collision attack on SHA that would allow a complexity attack on your system If that ever becomes a potential threat you should migrate to a better hash as checking wont help you 