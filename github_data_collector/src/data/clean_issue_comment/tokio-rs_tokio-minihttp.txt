A type alias makes this code more manageable by reducing the repetition I was just wondering why the benchmarks on techempower has a very slow speed on multiple queries bench Decoder recieve empty buf twice after first complete buf Why decoder recieve empty buf twice It is issue for tokioio I found it like that diff diff git asrclibrs bsrclibrs index fc ca d asrclibrs bsrclibrs impl Decoder for HttpCodec type Error ioError fn decode mut self buf mut BytesMut ioResultOptionRequest printlnis buf empty bufisempty requestdecodebuf Run helloworld bash cargo run example helloworld is buf empty false is buf empty true is buf empty true On simplest GET request bash curl X GET v v Note Unnecessary use of X or request GET is already inferred Trying TCPNODELAY set Connected to port GET HTTP Host UserAgent curl Accept HTTP OK Server Example ContentLength Date Thu Jan Connection to host left intact Hello world Any way this PR skip parsing of empty buf as request that must improve tokiominihttp performance Sorry about my poor English To use its necessary to have access to a body of the request I just add couple lines for it Im trying to find a way to get access to the peers name ie sockaddrin equivalent but this information doesnt seem to get propagated past the tokioproto and tokioio layers Is this by design or just a missing feature If this is by design is the appropriate place to implement my idea something that needs access to peers name but also implementing a protocolservice directly atop tokiocore Really what I want is what is described in examples but with the socket andor peer name passed through to the service Ive seen a bit of data from alexcrichton s blog suggesting the minihttp framework built on top of tokio performs extremely well while sporting a fairly ergonomic design Unfortunately a couple of the links are dead and the current benchmarks on the page dont have any other frameworks for comparison Would the possibility of pushing a benchmark to the techempower benchmarks be something that you guys could do These benchmarks get a fair amount of traffic and promising results would increase visibility to the tokio project It would help validate any performance claims thatre being made about the project as well Right now in preliminary results rust isnt fairing too well across the board Techempowers github 