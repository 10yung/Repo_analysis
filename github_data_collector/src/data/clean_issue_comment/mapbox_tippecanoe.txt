Im curious about the following error Internal error Geometry delta is too big This is coming while tiling about million OSM objects buildings with the following flags Pf Z z d pf pk pg pD ps b Would changing to z d solve this for any reason Thanks I need to generate a tileset containing three layers boundaries at very different scales Id like them to have minzooms of and As far as I can tell there are two ways I can do this Preprocess the geojsons to add a tippecanoe object onto every feature with the minzoommaxzoom I want then process as normal Downside extra processing and Im not sure what minzoom will end up appearing in the tilejson for each layer Process each geojson individually into its own mbtiles file with zoom properties passed on the command line then combine them using tilejoin Downside extra processing and its harder to ensure that the total merged tile size doesnt exceed KB Ideally Id be able to do this in one step perhaps by passing extra flags to namedlayer tippecanoe namedlayerfilelowzoomgeojsonminzoom Even more ideally itd be possible to set all the configuration options for each layer in a separate JSON file rather than trying to jam JSON into parameters I have many vectorpbf how can I convert them to one big vectorpbf Or how to convert all vectorpbf to GeoJSON We recently noticed a problem with the mean accumulated attributes on our point and polygon tilesets It was first noticeable when we applied styles to display a property with the accumulated mean values I created a small set of points to illustrate the problem using public earthquake data from California earthquakespointszip Z z r clusterdistance useattributeforideventid accumulateattributedepthmean accumulateattributemagnitudemean Since this is such a small set of data its easy to predict what the mean values should be and the resulting tileset appears to incorrectly generate those values Although this is a point feature sample we noticed the same problem when coalescing polygons I have tried the sum product max and min functions and they all seam to work The problem appears limited to the calculated mean values Please have a look and confirm what Im seeing If this is a bug itd be nice to get a fix We have large datasets where the calculated mean value are important properties Hi I ran into some rendering issues that occur while tiling a dense parcel dataset with noclipping I followed along the great work and discussion in and My requirements are high precision rendering of parcel data at zoom levels parcel selection on the map so polygons should not be splitted Right now I am using the following command tippecanoe l parcel o parcelsmbtiles z Z dropsmallestasneeded extendzoomsifstilldropping noclipping detectsharedborders file json file json which leads to the following issue while rendering in mbview artifacts als appear on Mapbox JS iOS Straight line and polygon artifacts when overzoomed top zoom level x bottom zoom level x img width altBildschirmfoto um src width altBildschirmfoto um src The problems are caused be the noclipping option If I leave it out everything is fine besides the fact that large polygons are splitted on tile boundaries This behaviour is problematic if a want to select and show the selection of one complete polygon on the map Thats why I sticked with noclipping during testing Ive used the zg option with before without artifacts But it uses a max zoom of This leads to low precision at high zoom levels left max zoom level right max zoom level img width altmaxzoomlevel src width altmaxzoomlevel src nopolygonsplitting as mentioned in doesnt seems to have any effects anymore Using noduplication instead of noclipping screws up rendering completely as it generates a lot of artifacts and missing polygons Do you have any idea how to get rid of the artifacts and how to improve tiling for parcel data while preventing polygons from splitting Thanks in advance c implementation at Is it possible to calculated attributes dynamicallyFor example The value is relative to the current zoom level eg For a same featureon zoom the value is on zoom the value is Hello This pull request fixes the build script of this project Specifically it adds missing Make dependencies so that the targets of the project are regenerated correctly whenever there are updates to any of the dependent source files In this way the project is incrementally built and we no longer sacrifice time in clean builds ie builds after a make clean Note that this fix follows the best practices for tracking dependencies automatically through gcc MD For more details see here 