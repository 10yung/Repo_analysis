Describe the bug when spying gettersetter spygetwrappedMethod and spysetwrappedMethod are both undefined but spywrappedMethod is the original gettersetter whoever was written last looks like an override To Reproduce var sinon requiresinon var object get test return set testvalue var stub sinonspyobject test getset consolelog stubgetwrappedMethod consolelog stubsetwrappedMethod consolelog stubwrappedMethod stubrestore var stub sinonspyobject test setget consolelog stubwrappedMethod results can be seen here Expected behavior the first should be the original getter the second should be the original setter the third should be the undefined the fourth should be the undefined Actual behavior the first is undefined the second is undefined the third is the original setter the fourth is the original getter Fixes This is a tiny one but it means we can unblock NoamDev over in DefinitelyTypedDefinitelyTyped There was a typod header too i fixed in there If you want any more info adding to it let me know cc fatso Is your feature request related to a problem Please describe In we removed support for stubbing undefined properties aligning the behavior with how sandbox stubbing worked Later on we have made the sinon methods use a default sandbox to further align how the default methods and sandboxes worked Still as the thread in show this remains a sorely missed feature for some and while we had good reasons for removing it maybe we could appease the ones wanting it by making it an optin It remains a quite useful feature in some cases Describe the solution youd like I suggest adding a config field to the sandbox to allow defining fields fakes that are not originally defined by the objects we insert the fake into Something like sinoncreateSandboxallowUndefined true Totally not sure about the actual name of the prop though allowNonOwn Given javascript var obj a it should allow javascript sinonstubobj bvalue not defined anywhere on the prototype chain sinonreplaceobj c sinonfake Related to this but really a different case is props on the prototype chain As explained in the Solution paragraph in we deal with this differently today depending on whether we use spies or fakes var parent foo function var child Objectcreateparent disallowed sinonstubchild foo allowed sinonreplacechild foo sinonfake If we simplified the undefined and props on an ancestor problems into a single issue props not defined by the object whose fields are being stubbed we could align this behavior for our spies stubs and fakes under a default nonpermissive line and have an optin solution for those who want it By default you would then only be allowed to replace fields owneddefined by the object Having the optin for stubs and spies would not be a breaking change but as the sinonreplace method today allows stubbing defined props owned by an ancestor it would be a breaking change to disallow this by default Describe alternatives youve considered Two flags instead of one allowUndefinedProps props are not present anywhere on the prototype chain and allowShadowingFieldsOnPrototype to stub fields defined by ancestors I dont really see the benefit though Checking out I see that we do not have any release notes for v and v and what prompted the new major releases We should do something about this Purpose TLDR This PR fixes issue by adding quotes to diff values if said values are strings thus producing clearly distinct string representations and preventing the expected and actual values from being reduced to a single value Background Problem in detail When the expected and actual values of an assertion do not match but they have the same string representation for example the number and the string the output does not show the difference but reduces it to a single value In this example this output is produced expected spy to be called with arguments black black while this output was expected expected spy to be called with arguments red red green green Solution A solution was proposed in the ticket itself which was also implemented here adding quotes around a diff value if the value in question is a string This process is skipped if the value is undefined not a string or already wrapped in quotes An alternative solution was considered which involved adding a check for type differences without altering the output though this might still produce confusing output if the string representations of a diff are the same without making it clear whether a value is a string or not This situation can be seen in the expected output example above Instead diffs are now displayed as follows given the example where the string was expected but the number was found instead expected spy to be called with arguments red red green green How to verify Check out this branch npm install Run the test included with this PR Thanks to stubwrappedMethod of a stub was exposed But as long as this is not documented anywhere no one would use it I suggest you should document this feature Pay attention to the fact that the property is only defined when wrapping an existing method not when using sinonstub with no parameters Bumps puppeteer from to details summaryRelease notessummary Sourced from puppeteers releases v Big changes Chromium r Puppeteer now requires Nodejs v Nodejs v is no longer supported pagescreenshot now clips elements to the viewport New APIs pageemulateTimezonetimezoneId pageemulateMediaTypetype superseding the old pageemulateMediatype API pageemulateMediaFeaturesfeatures API changes New API pageemulateTimezonetimezoneId New API pageemulateMediaTypetype Deprecated API pageemulateMediatype is now obsolete Use pageemulateMediaTypetype instead New API pageemulateMediaFeaturesfeatures Raw notes aa chore mark version v c b test add pagescreenshot viewport clipping test f e docsapi improve pagewaitFor docs for the options object b test remove duplicate code from an example a featapi add pageemulateTimezonetimezoneId a f featapi add pageemulateMediaTypeFeatures dbb chore use map instead of plain object d featchromium roll Chromium to r fix avoid unnecessary zerodelays in input code ff chore drop Nodejs v support c ba f docstroubleshooting update Alpine Chromium versions docscontributing mention manual docsapi updates c a docsreadme correct Slack link c e fixcomment fix typo in Launcherjs dbb docsapi list Chromium version for Puppeteer v b chore bump httpsproxyagent to mitigate a security issue dc d docsapi clarify type method examples fff doccontributing clarify release instructions a chore bump version to v post details details summaryCommitssummary aa chore mark version v c b test add pagescreenshot viewport clipping test f e docsapimd improve pagewaitFor docs for the options object b docsapimd remove duplicate code from an example a featapi add pageemulateTimezonetimezoneId a f featapi add pageemulateMediaTypeFeatures dbb chore use map instead of plain object d featchromium roll Chromium to r fix avoid unnecessary zerodelays in input code ff chore drop Nodejs v support Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend Note This repo was added to Dependabot recently so youll receive a maximum of PRs for your first few update runs Once an update run creates fewer than PRs well remove that limit You can always request more updates by clicking Bump now in your Dependabot dashboard details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version unless you reopen the PR or upgrade to it yourself dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in your Dependabot dashboard Update frequency including time of day and day of week Pull request limits per update run andor open at any time Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details Purpose TLDR mandatory Remove unneeded branch logic and improve docs Background Problem in detail optional When looking into a user question it became obvious that the its not obvious at all that the docs for Lolex install config can be used when trying to configure useFakeTimers For one we added a prop configglobal to Sinons useFakeTimers config in that was quite superfluous it supported a use case that was already there using configtarget In this PR I remove some extra branching logic and also update the docs to highlight the lolex docs and the target prop How to verify mandatory npm test npm run builddocs Purpose TLDR mandatory give a concise one or two short sentences description of what what problem is being solved by this PR Example Fix issue by restructuring the colour selection conditional in method paintBlue Improvement to stubs doc Background Problem in detail optional When relevant give a more thorough description of what the problem the PR is trying to solve Examples of good topics for this section are Link to an existing GitHub issue describing the problem Describing the problem in greater detail than the TLDR section above How you discovered the issue if its not already described as an issue on GitHub Discussion of different approaches to solving this problem and why you chose your proposed solution Solution optional When contributing code and not just fixing typos documentation and configuration please describe whyhow your solution works This helps reviewers spot any mistakes in the implementation Example This solution works by adding a paintBlue method Then your reviewer might spot a mistake in the implementation if paintBlue uses the colour red Focus more on the basics of stubbing an objects function stub preprogrammed to throw exceptionreturn value Less discussion on spies Provide very simple code to test as an example instead of external librarys PubSub code Show why restoration of a stub is necessary How to verify mandatory NA because no code change Checklist for author x npm run lint passes x References to standard library functions are cached Purpose Add firstArg convenience property to fakes and spy calls Currently we allow getting the last argument for spy calls and fakes It would be nice to be able to get the first arg without doing args I couldnt find any open issues or feature requests for this Solution spyCallfirstArg This property is a convenience for the first argument of the call js var spy sinonspy var date new Date spydate spylastCallfirstArg date true fakefirstArg This property is a convenient way to get a reference to the first argument passed in the last call to the fake js var f sinonfake var date new Date var date new Date fdate fdate ffirstArg date true How to verify Check out this branch npm install npm test Checklist for author x npm run lint passes x References to standard library functions are cached 