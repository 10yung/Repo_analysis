fixes fixes According to the documentation you shouldnt use SETNX for locking and instead use the Redlock algorithm as described here Since theres already a redlockrb gem integrating it shouldnt be too hard The document here says RedisObjects automatically creates keys that are unique to each object in the format modelnameidfieldname But if two models in different namespace have same name The generated key will be the same For example rb class Group ActiveRecordBase include RedisObjects counter testcounter end class XXXGroup ActiveRecordBase include RedisObjects counter testcounter end rb Groupfirsttestcounterkey group testcounter XXXGroupfirsttestcounterkey group testcounter When setting a value that has an expiration time I noticed that redisobjects will first set the value and in a separate operation set the expiration time This is unfortunate not just for performance but mainly because when setting the expiration fails eg due to network issues ruby process interrupted you name it the value will never expire I have observed this problem in a production environment where values would stick around forever In our case this was very problematic Cache invalidation is a hard problem made easier by Redis since it can be done atomically with the operation that sets the value Unfortunately redisobjects doesnt seem to make use of that First off love this gem I just started reviewing it this week and I believe it will finally allow unlocking more potential of our redis server that is currently just used for resque We can now store and retrieve data values and objects in an idiomatic manner for a ruby programmer and seamlessly integrated into our AR models reducing unnecessary high volume of calls to the database for scanning that has been causing some deadlock nightmares As we start down this path it becomes evident that we need some sort of browser to do inspections of the data like we do with mysqlworkbench Using rediscli is a bit slow and too narrow of a field of vision when you want to move quickly through the data I tried using the redisbrowser gem and at first glance it seems to be a nice lightweight treelike browser solution yet when drill into my lists objects that use marshal true they show up blank Is there another solution or tool out there to visually browse redis objects that are created using the redisobjects gem and have been marshaled Or is there some way to connect these two gems so that redisbrowser knows how to unmarshal the data using redisobjects I have a use case where I would like to use SETEX call to set the key with expiration in single call Currently I am doing this in two separate calls and if possible I would like to avoid one extra call to redis Imagine a base class called service class Service ActiveRecordBase include RedisObjects lock mylock expiration minutes timeout seconds end And two subclasses Service class Service Service end and Service class Service Service end Now you can call Servicefirstmylocklocklockdo sleep end and when you check the redis lock object you will see a instead of a timestamp Any idea why this is not working as expected Thanks Class method lock defined in RedisObjectsLocksClassMethods conflicts with lock in ActiveRecordQueryinglock which makes it impossible to enable ActiveRecord Pessimistic Locking by Accountlockfind We can still chain the method like this Accountwhererid locktake but that is dirty and better be avoided This issue could be part of when include RedisObjects in model activerecords lock was override by RedisObjects I have the following lock defined in a class ruby lock service expiration minutes timeout seconds I have also tried several other variations ruby lock service expiration minutes timeout lock service expiration minutes timeout seconds for setting the lock up However when I use the lock and I cause a collision that should block the second thread for seconds I end up with the following error ruby Timeout on lock service servicelock exceeded sec It seems like it is not taking the options I am passing into the lock and just using the default Not that I think it matters but this is how I am grabbing the lock ruby serviceservicelocklock do I am on Ruby p redis and redisobjects Thanks in advance for any suggestions 