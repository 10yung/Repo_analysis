We are getting this error when writing from some of our users all Chrome Resetting their DB fixes it but that isnt a great solution Restarting the browser etc doesnt work it is permanently broken The only reference I can find to this error is here And indeed we switched to using idbkeyval based on the recommendation in that github issue but it happens with idbkeyval as well I dont think this is an issue with idbkeyval but I am hoping someone might have some insight into where this comes from Adding getAll update typescript version removed missingtypesdts Fixes Fixes Thank you goofballLogic for the major head start Found and merged the logic into one constructor and removed duplicate code Thought process If the Store constructor has support for a named object store then it should always exist after calling new StoredbName storeName Hi It would be really great to add a new function that completely deletes a custom database if it was used Basically expose indexedDBdeleteDatabasecustomDB and dbInstancedeleteObjectStorename Something along the lines of js import Store set from idbkeyval const custom new Storecustomdbname customstorename customdeleteDatabase I would like to see an Ethereum name or address added to the ethereum field of the packagejson file This will allow consumers of the project to know a cannonical address to send funds to For example Im building an application that will allow developers to automatically donate ETH to all of their npm dependencies that have Ethereum addresses in their packagejson files For If an object store is missing from a database reopens the database as the next version in order to allow upgrade to add the missing object store Because this lib use class in dist code it cant work in IE so we need to translate it with babel like javascript webpack config test mjs use babelloader exclude file return nodemodulestestfile idbkeyvaltestfile But webpack compiling failed with Would you accept a pull request to extend the API ever so slightly The idea would be to allow batched setting of data with a setMany async function setManyentries return storewithIDBStorereadwrite store entriesforEachentry storeputentry entryf Testing locally this allows for much faster batch processing Fixes This complicates the code a bit but I think its a reasonable way to solve It adds a new function close which closes the IDB connection If you call any other API after that the connection is reopened First off love this little library it saves me a lot of time Thanks for writing it According to Googles Page Lifecycle API best practices its a good idea to close any IDB connections when transitioning to a frozen state It would be convenient if this library provided a way to do this