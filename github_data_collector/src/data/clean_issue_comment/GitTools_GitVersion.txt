Theres a couple of broken images on Both of these Hello Please help me I use GitVersion I have master featureXXX release and featuresprintY branches featuresprintY is analogue for develop branch but I recreate it every weeks from master on sprint I deploy every commit in featuresprintY to test environment teamcity octopus deploy so I turned on feature mode ContinuousDeployment Everyting is ok build metadata number increased constantly for example sprint sprint I create release branch release from feature branches because not all features from sprint branch are releasing build it beta deploy to production and then merge to master I merge master branch to featuresprint branch After this point build metadata counter resets for featuresprintY branch So I have decreased version number and octopus deploys wrong package sprint sprint Can I do something I need always increase my version number for ContinuousDeployment branch GitVersionHelp When I execute Gitversion on my master branch I get json Major Minor Patch PreReleaseTag PreReleaseTagWithDash PreReleaseLabel PreReleaseNumber BuildMetaData BuildMetaDataPadded FullBuildMetaDataBranchmasterShace b df b a e a c a e cef b MajorMinorPatch SemVer LegacySemVer LegacySemVerPadded AssemblySemVer AssemblySemFileVer FullSemVer InformationalVersion BranchmasterShace b df b a e a c a e cef b BranchNamemaster Shace b df b a e a c a e cef b NuGetVersionV NuGetVersion NuGetPreReleaseTagV NuGetPreReleaseTag CommitsSinceVersionSource CommitsSinceVersionSourcePadded CommitDate If I go back to a revision using git checkout bash git checkout d cdf Then execute Gitversion I still get the same SemVer json Major Minor Patch PreReleaseTag PreReleaseTagWithDash PreReleaseLabel PreReleaseNumber BuildMetaData BuildMetaDataPadded FullBuildMetaDataBranchmasterSha d cdf fd a b dc accf a efafbae MajorMinorPatch SemVer LegacySemVer LegacySemVerPadded AssemblySemVer AssemblySemFileVer FullSemVer InformationalVersion BranchmasterSha d cdf fd a b dc accf a efafbae BranchNamemaster Sha d cdf fd a b dc accf a efafbae NuGetVersionV NuGetVersion NuGetPreReleaseTagV NuGetPreReleaseTag CommitsSinceVersionSource CommitsSinceVersionSourcePadded CommitDate Is this expected Issue Versioning seems to be wonkey when using Azure Dev Ops CI pipeline Explanation I have got a simple GitVersionyml file that was generated by the GitVersionexe yaml mode ContinuousDeployment branches ignore sha mergemessageformats I am following a GitFlow brancing strategy Initially everything was working fine I created a feature branch and the resulting NuGet package was published featureMyfeature name I then did a managed pull request into develop and the resulting build made a build version alpha I then created a RELEASE branch called release This resulted in a build beta I then did pull requests from the release branch to go to master that resulted in a build number ci the other went into develop and the version number went to alpha I have subsequently noticed that there is a bug so i created a bug branch which resulted in a build bugmybug What am I doing wrong as the versioning from the last release does not correlate to the next beta And how do I remove the build numbers from the build For extra here is the build pipeline I am using Annotation Hello I encountered an issue while using the latest beta version GitVersion v beta The problem is that the GitVersion task falls into stack overflow after the following scenario There are two branches master and dev master is the source branch for dev Push some changeset into the master branch master increments version patch number Merge changes from master into dev Run GitVersionexe onto dev branch stack overflow exception My GitVersionyml assemblyversioningscheme MajorMinorPatch mode Mainline tagprefix vV majorversionbumpmessage semver sbreakingmajor minorversionbumpmessage semver sfeatureminor patchversionbumpmessage semver sfixpatch commitmessageincrementing Enabled branches hotfix regex hotfix tag useBranchName feature regex feature develop regex development tag alpha increment Inherit preventincrementofmergedbranchversion false trackmergetarget true master increment Patch preventincrementofmergedbranchversion true trackmergetarget false ignore sha mergemessageformats Ive tried both GitVersionexe as well as GitVersion MSBuild task Log GitVersionTasktargets warning WARN Failed to inherit Increment branch configuration no branches found GitVersionTasktargets warning GitVersionTasktargets warning Falling back to dev branch config GitVersionTasktargets warning GitVersionTasktargets warning WARN Failed to inherit Increment branch configuration no branches found GitVersionTasktargets warning GitVersionTasktargets warning Falling back to dev branch config GitVersionTasktargets warning GitVersionTasktargets warning WARN Failed to inherit Increment branch configuration no branches found GitVersionTasktargets warning GitVersionTasktargets warning Falling back to dev branch config GitVersionTasktargets warning GitVersionTasktargets warning WARN Failed to inherit Increment branch configuration no branches found GitVersionTasktargets warning GitVersionTasktargets warning Falling back to dev branch config GitVersionTasktargets warning GitVersionTasktargets warning WARN Failed to inherit Increment branch configuration no branches found An image of my Git graph githistory PS There is a workaround if I disable inheritance on develop branch develop increment None But this case the develop branch dont use a version number from master After selecting Update AssemblyInfo files on the Azure DevOps Build Task v the parameter for Update Assembly File becomes available I cant work out how to pass multiple paths to this or if it is indeed possible Documentation in Read The Docs and the Task Tooltip dont offer any further clarity If it is infact only capable of taking a single path whats the best practice for updating a number of these in a targeted fashion Considering the case where there are Solutions containing SDK style csproj files and the odd old style project with Assemblycs files Cheers Googling for gitversion or gitversion docs the first hit is to gitversionreadthedocsio that has no index etc I dont know the reason maybe the docs were published there originally and they moved But it probably feels like a bit of a deadend for it to be the first hit for someone trying to figure out what gitversion is The newly introduced dependency on MicrosoftExtensionsDependencyInjection prevents the package from installing in projects which use older SDKs grafik grafik Since the App packages are explicitly referenced by the SDK you cannot simply upgrade to v Therefore the targeted builds should reference the proper version of this dependency ie NETCoreAppVersionv MicrosoftExtensionsDependencyInjection Is it possible to ignoreskip a range of versions Im currently on version and want to skip I could possibly write a commit message when I reach version to bump to but is it possible to do it in the yml file so I dont have to remember when to do the commit message hack