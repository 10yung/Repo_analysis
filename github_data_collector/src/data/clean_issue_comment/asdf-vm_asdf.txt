Also checkout specific tag of batscore instead of using master Firstly Im sorry if there is already a method to achieve named environments explained below in asdf in a simple way This feature request is probably a duplicate of but the issue was proposedclosed in and the feature didnt really gain much traction so Im making this again here The motivation of the feature Currently asdf allows installing different versions of the same interpreter for example the v and v of python A direct consequence of this approach Im not sure if its intended or not is that it allows users to install different versions of packages or does anything that touches the global state in a noninterfering way This capability is very very useful when managing multiple projects that use the interpreter since that means that one can carefully control the set of packages that are used in each project It allows reproducible environments or removalcleanup of environments when they are not needed However as asdf primarily being a version manager it only provides this isolation between two different versions of the same interpreter For example it doesnt allow have two instances of python v with different packages As asdf already provides the groundwork of managing binary shims and providing isolation it would be beneficial to provide the same capabilities in a more general method A detailed description of how the feature would work The asdfinstall command will be extended to accept a third argument the environment name as in asdf install name version environmentname The environment name will default to the version When the asdfinstall command is invoked the directory asdfdatadirinstallspluginenvironmentname is created and the usual process of invoking the plugin and building the environment should be executed This can be relatively easily achieved by just passing the environment name instead of version when calling getinstallpath The asdfglobal asdflocal and asdfshell should gain support for setting the environment name instead of a version and the shim scripts would then allow launching from asdfdatadirinstallspluginenvironmentnamebin and other commands like asdflist should also support the environments feature For example lets say that a user is developing three python projects one depending on and the other two on The user could execute the following commands shellsession asdf install python projecta pythonbuild Usersusernameasdfinstallspythonprojecta pythonbuild use openssl from homebrew pythonbuild use readline from homebrew Downloading Python tarxz asdf install python projectb asdf install python projectc cd projecta asdf local python projecta cd cd projectb asdf local python projectb cd cd projectc asdf local python projectc cd cd projecta python version cd Python cd projectb python version cd Python This would allow three python interpreters be installed on the system located on asdfinstallspythonprojectaprojectbprojectc Steps to reproduce On OSX run bats test Expected behavior Tests should pass as they were before Actual behavior Many failing tests are encountered And some tests hang indefinitely An example error I captured from a single test Userstrevorbrownasdfbinasdf line varfolders m bq tmj zf d w lk c gpTasdfXXXXed MwuLghomeasdflibcommandscommandhelp No such file or directory Environment OS asdf version v bde ae Summary This PR extends the feature added in to asdf global and asdf local Users can now specify the global or local version of a tool as the latest installed version shell asdf global python latest asdf local python latest asdf local python latest It also adds the ability to filter installed versions with asdf list shell only list installed versions of Python asdf list python In fresh install asdf pluginlist urls only outputs names and not urls If ASDFDATADIR variable is undefined it will assign an empty value to it so bash instances running with set o nounset can run the script without error Summary Changes plugin update to use separate function Summary Ive only just started using asdf and similarly to I have toolversions as a symlink to a config repository of mine Running asdf global global plugin version fails apparently due to a bug in relative symlink resolution Ive modified the relative symlink test and verified that it fails without my change to utilssh Fixes Hope this helps slightlysmilingface Summary Previously the shims directory was only excluded for system versions which meant that asdf exec would fall back to a shim if the install didnt have the desired binary If the shims are up to date this isnt a problem since we check the metadata but if those were out of sync the command would just infinitely recurse Im not sure what the reason was for the current setup but I looked through the uses of the function and Im not seeing anywhere it is required Fixes No issue Other Information I also made a small tweak to the config test to make it pass it was picking up my user asdfrc I would like to have a config option to have shims only at the end of PATH or to leave them out completely Currently the asdfasdfsh script is rather opinionated about where the shims should be The asdfasdfsh should respect the choice set in asdfrc I propose to add the following option to the configuration shimspath option Available options would be top default end none Before I make a pull request with this feature I am hoping for a green light that this contribution would be welcome Rationale Why would you want to use asdf without shims There are other options to leverage the version management that doesnt need them such as the direnv plugin Shims can get in the way especially when they shadow system tools I use the shims at the end of path only for catching the error message that the command is available in asdf but currently not activated I dont want to see this error message if a command is available in my PATH behind the shim Currently the shim intercepts calls to for example clear if I have python miniconda installed Making a config option available is the least disruptive way of achieving my goal other than a localonly solution The more disruptive proposal would be to suggest a change in the behaviour of shims to default to system if the tool is available on the system The proposed config option would be optin and very easy to implement only some changes in asdfasdfsh are needed