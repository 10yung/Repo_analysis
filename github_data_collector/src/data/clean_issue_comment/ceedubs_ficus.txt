 Ficus seems awesome at reading config files but what about writing or updating them There is nearly no reference to how it writes back I would be helpful if ArbitraryTypeReader offered a modesetting that adds a runtime check that all keys for a Config object were mapped into the instantiation parameters successfully and that no keys were left unmapped after instantiation Current behavior silently ignores Config keys that dont match a parameter when that parameter is optional Option or default value allowing simple typo bugs that could be caught at instantiation time to slip into runtime Example scala case class Testfoo String foo bar Option String val cfg ConfigFactoryparseString test fooTypo overrideFoo barTypo overrideBar val test cfgas Test test test worksheetTest TestfooNone note default values are not overridden This is a draft PR to implement using Guavas CaseFormat class for the camelCase to hyphencase conversion Created separate HyphenCaseArbitraryTypeReader trait and object existing ArbitraryTypeReader APIbehavior is unchanged that invokes a new macro that specifies a hyphencase NameMapper trait implementation that gets passed down to the extractMethodArgsFromConfig method Added a test case to ArbitraryTypeReaderSpec Probably could be reorganized a bit Please advise I have an example like this load embedded config with ficus in import netceedubsficusreadersArbitraryTypeReader import netceedubsficusFicus val config ConfigFactoryparseString a value b value stripMargin case class ConfvalueInt configas Conf avalue must configas Conf bvalue must def getConfconfigConfig Conf configas Conf val aConf getConfconfiggetConfiga val bConf getConfconfiggetConfigb where getConf does not compile What I want is to make getConf method working as a config parser which is given config part only without knowing what the surrounding key was currently I nned to do configas Conf key or else I do not get a Conf instance is it something missing in Ficus or am I doing something wrong HOCON specification recommends hyphenseparated settings over camelCase Using case classes like the following works case class MySettinghyphenseparatedsetting String but it is a bit clumsy in the source code Wouldnt it be nice to have an option to automagically convert camelCase into hyphenseparated 