Fix a few minor typos I tried using this by requiring the library in the aws lambda handler but i do not see the longer stack trace information Seeing an issue where once data on a stream will only be hit if there is an on data call somewhere on the same eventemitter object Ive spent an hour or so in the code trying to figure out the issue but I am stumped Could you give me any guidance on why a once would not be hit unless theres a on for the same event type Specifically I am seeing this using the nodepostgres module with longjohn included In their connection module I tracked it down to this javascript without this once below seems inconsistent thisstreamon data function var nop thisstreamoncedata functionbuffer var responseCode buffertoStringutf ifresponseCode S return selfemiterror new ErrorThe server does not support SSL connections var tls requiretls selfstream tlsconnect socket selfstream servername host rejectUnauthorized selfsslrejectUnauthorized ca selfsslca pfx selfsslpfx key selfsslkey passphrase selfsslpassphrase cert selfsslcert NPNProtocols selfsslNPNProtocols selfattachListenersselfstream selfemitsslconnect selfstreamonerror functionerror selfemiterror error If I dont add the on data the once data will never be hit while longjohn is loaded All I get is at Promiseresolvethen usrsrcapplibpromisesindexjs at processtickDomainCallback internalprocessnexttickjs Is this project still alive Im using TypeScript and would like to use longjohn conditionally just in dev mode Documentation suggests using conditional require if processenvNODEENV production requirelongjohn However TypeScript imports are restricted to toplevel making it impossible to do such conditional check without falling back to commonJSstyle require There is also a related issue having the ability to disable longjohn after require would be a sufficient fix Im writing some tests where I want longjohn on and others when it should be off I could just run the non long john tests first but itd be nice to just be able to turn it on and off depending on the sub test suite Is there a way Thanks in advance Francois The way how longjohn wraps EventEmitter is incompatible with other modules doing a similarsame wrapping I tested by creating a clone of longjohn incl modifiny the longjohn property of on and used it together with unmodified longjohn in following script javascript requirelongjohn var assert requireassert var EventEmitter requireeventsEventEmitter function onListener function onceListener function test var emitter new EventEmitter emitteronxxx onListener emitteroncexxx onceListener assertequalemitterlistenerCountxxx emitterremoveListenerxxx onListener fails on second call as onListener was not removed assertequalemitterlistenerCountxxx emitterremoveListenerxxx onceListener assertequalemitterlistenerCountxxx test requirelongjohnclone test For events registered via once the listener API returns different result if longjohn is used or not Reproducer javascript var assert requireassert var EventEmitter requireeventsEventEmitter function onListener function onceListener function test var eventEmitter new EventEmitter eventEmitteronTheEvent onListener eventEmitteronceTheEvent onceListener var listeners eventEmitterlistenersTheEvent assertequallisteners onListener assertequallisteners listener onceListener the following assert passes for longlohn case assertequallisteners onceListener test requirelongjohn test Looks like the longlohn implementation unwraps one level too much in listen for once listeners hello when i run my script with longjohn i receive the following js TypeError Cannot read property apply of undefined at TimerlistOnTimeout timersjs at JavascriptComputationcomputationRegistrydoAddlocalremotefn Userscdieringernodecoinstaccommontestmodelspipelinerunnerpooltestpoolutilsjs at JavascriptComputationrun Userscdieringernodecoinstaccommonsrcmodelscomputationjavascriptcomputationjs at Userscdieringernodecoinstaccommonsrcmodelspipelinepipelinejs at PipelinerunPipelinehandleRunCompletePipelinetryNextcb as tryNext Userscdieringernodecoinstaccommonsrcmodelspipelinepipelinejs at PipelineruncbtryNext as run Userscdieringernodecoinstaccommonsrcmodelspipelinepipelinejs at RemotePipelineRunnerrunasyncparalleluserResultsRemotePipelineRunnerruncb as run Userscdieringernodecoinstaccommonsrcmodelspipelinerunnerremotepipelinerunnerjs at Userscdieringernodecoinstaccommonsrcmodelspipelinerunnerremotepipelinerunnerjs at Userscdieringernodecoinstaccommonnodemodulesasynclibasyncjs at Userscdieringernodecoinstaccommonnodemodulesasynclibasyncjs at done Userscdieringernodecoinstaccommonnodemodulesasynclibasyncjs at Userscdieringernodecoinstaccommonnodemodulesasynclibasyncjs at Userscdieringernodecoinstaccommonnodemodulesasynclibasyncjs at Userscdieringernodecoinstaccommonnodemodulesasynclibasyncjs at Userscdieringernodecoinstaccommonsrcmodelspipelinerunnerpipelinerunnerjs at processtickCallback nodejs i think its a nodejs internal error any clue thx Noticed that the latest release is using utilisFunction in the code Problem is that if you are running Node x this function is not available in the util package Seems like this latest version is not a backwardscompatible patch and should be a major version Also the node engine attribute in packagejson should be bumped up to note that Longjohn will only work when running Node x I dont think utilisFunction was added until x 