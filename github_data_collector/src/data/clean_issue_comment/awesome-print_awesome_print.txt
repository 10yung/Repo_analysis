I see anumber of open pull requests needing reviews and merging Does this project need newmore maintainers awesomeprint should probably ignore trying to pretty print that class Ref Warnings ruby hash a ap hash Usersakshayrvmgemsruby gemsawesomeprint libawesomeprintformattersbaseformatterrb warning Capturing the given block using Procnew is deprecated use block instead Usersakshayrvmgemsruby gemsawesomeprint libawesomeprintinspectorrb warning Capturing the given block using Procnew is deprecated use block instead a nil After this change ruby hash a ap ap a nil In some big hash For example api payload There are sometimes text and many other keys and value Mainly when we use ap the wall object is print but when there is big text It takes sometime many screens and needs to scroll a lot just to see if a simple attribute is well set It can be good if we can truncate those text by passing a truncate param to ap like ruby ap myobject truncate or ap myobject stringtrucate and it will print on screen only the first th char of a string thank for this awesome gem and all your work Howdy There were a couple small changes to Rails model structure which should be accounted for in the new files in specsupportactiverecorddata Aside from that the appraisal changes should be pretty straightforward There are some CVEs known in older nokogiri versions that are causing this gem to fail vulnerability scans specifically CVE CVE and CVE Changes in this PR Fix Rails errors with sqlite details bellow Add Ruby to CI Allows errors with rubyhead to be fixed in another PR SQlite version compat with Rails New sqlite version arrived in February but Rails actually sqlite adapter was expecting This leads to failed builds with the following error BUNDLEGEMFILEhomediovaniDevelopmentRubyawesomeprintgemfilesrails gemfile bundle exec rake An error occurred while loading specextactiverecordspecrb FailureError ActiveRecordBaseestablishconnection adapter sqlite database memory GemLoadError Specified sqlite for database adapter but the gem is not loaded Add gem sqlite to your Gemfile and ensure its version is at the minimum required by ActiveRecord specactiverecordhelperrb in top required specextactiverecordspecrb in require specextactiverecordspecrb in top required Caused by GemLoadError cant activate sqlite already activated sqlite Make sure all dependencies are added to Gemfile specactiverecordhelperrb in top required Run options include focustrue All examples were filtered out ignoring focustrue Finished in seconds files took seconds to load examples failures error occurred outside of examples This PR sets to use sqlite which works with Rails I dont think we need a specific sqlite version for the tests so this is the easiest fix example a model Country with an attribute geometry containing the geometry to display on a map ie all the coordinates on the border There are long long long arrays which are unreadable in the console console which uses ai output Pryconfigprint proc output value outputputs valueai Is is possible to mark this attribute geometry in some way in order to not show it in ai output Now Mongoid models will display their alias field names in parentheses Rails builds are failing because the sqlite version being installed doesnt meet the requirements Rails sets This PR locks the rails gemfile to the same version requirement that rails uses It also switches to run against ruby instead of head which is now past and has several deprecations causing failures