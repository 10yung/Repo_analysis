 Input ruby recursive lambda do recursive here recursive is NilClass end Expected behavior infer the right type for recursive lambda Pathname subs signature should be same with Stringsub eval binding is optional This fixes issue Motivation Test plan Run tests on Ruby and it works ruby testtypespropsdecoratorrb Without this PR get the expected error homedevsorbetgemssorbetruntimelibtypespropsdecoratorrb in block in definegetterandsetter private method attrreader called for OpusTypesTestPropsDecoratorTestStringArrayAndHashStructClass NoMethodError Input ruby require sorbetruntime class AA extend TSig sig void def testpatchmethod putsunpatch end testpatchmethod instancemethodtestpatchmethod definemethodtestpatchmethod do puts patched testpatchmethodbindself end sig void def testaliasmethod putsunpatch end aliasmethod testaliasmethodold testaliasmethod def testaliasmethod puts patched testaliasmethodold end end a AAnew puts testpatchmethod for i in do atestpatchmethod end puts testaliasdef patch for i in do atestaliasmethod end Observed output testpatchmethod patched unpatch unpatch unpatch testaliasdef patch patched unpatch unpatch unpatch the patch method wont get called except the first one Expected behavior Not break the method patch behaviour optional Explain your change focusing on the details of the solution This is a great place to call out uservisible changes Move cancellation from preprocessor thread to message processing thread This document outlines the responsibilities of each thread with this change preemption WARNING Should not be merged until the PR implementing preemption is ready as it will regress performance in a very noticeable way I opened this separately to make reviewing as sane as I possibly can This is why I have this marked as WIP although its totally ready to review Ill illustrate the issue with an example Given the following sequence of edits Edit Introduces syntax error which takes slow path Edit Takes fast path but would take slow path with edit Edit Fixes syntax error which takes the slow path in isolation but would take the fast path when combined with edits In the world before this update the following would happen The preprocessor thread sees edit and enqueues it The message processing thread dequeues edit runs the slow path and blocks The preprocessor thread sees edit determines that it takes the fast path but not with edit and enqueues it The preprocessor thread sees edit determines that it takes the fast path with edits and cancels slow path and enqueues edits combined The message processing thread unblocks because the slow path is canceled dequeues edits and typechecks them on the fast path The end result Introducing a syntax error and fixing it is fast slow path In the world after this update the following will happen The preprocessor thread sees edit and passes it along to the message processing thread The message processing thread dequeues edit and starts a slow path which unblocks once it begins It then waits for more messages to come through The preprocessor thread sees edit and enqueues it The message processing thread dequeues edit sees that it takes the fast path but not with edit and schedules a fast path to run on the typechecker thread The fast path operation blocks until the slow path completes The preprocessor thread sees edit and enqueues it The message processing thread completes the slow path completes the fast path and then sees edit which takes another slow path The end result is much worse than before the user waits for slow paths and a fast path In the world after this update and preemption the following will happen The preprocessor thread sees edit and passes it along to the message processing thread The message processing thread dequeues edit and starts a slow path which unblocks once it begins It then waits for more messages to come through The preprocessor thread sees edit and enqueues it The message processing thread dequeues edit sees that it takes the fast path but not with edit and schedules a fast path to preempt the slow path The fast path operation blocks until it preempts and finishes The preprocessor thread sees edit and enqueues it The message processing thread completes the preempted fast path dequeues edit sees that it would take the fast path with edits cancels the running slow path and typechecks edits together The responsiveness of the above is limited by the latency of preemption which we aim to make fast There will likely be an initial regression for this specific scenario until additional performance work on Sorbet is undertaken to make resolver faster and to speed up the slowest files to typecheck Motivation Why make this change Describe the problem not the solution This can also be a link to an issue This is one giant step toward preempting the slow path and improving responsiveness Test plan If you did not write tests for this change replace the message below explaining why not Why we should be confident this change is correct If you changed the website please include a screenshot of the proposed changes See included automated tests Building on this speeds up TStructnew and also TPropsSerializabledeserialize for cases where we are mostly using defaults Most of the meat of the optimization is in reimplementingreplacing getdefault by creating a specialized ApplyDefault instance at prop definition time based on the type of any default andor factory option This lets us optimize the commoncase fast paths a primitive default or an emptycollection default a lot while also removing a branch hash lookup or two even in the slow path Specifically for constructors we also reduce the redundancy between WeakConstructor and strict Constructor as well as runtime branching by splitting up props into with default and without default and handling each collection separately WeakConstructor and Constructor can handle props with defaults identically while splitting on their handling of props without Motivation On my laptop produces a x improvement in the benchmark for constructing an instance mostly with defaults and a x improvement for constructing with all props set explicitly Also produces a x improvement in deserialization with mostly defaults with no effect on deserialization with props set explicitly Test plan Added tests here plus passing build in payserver Note a payserver build currently fails but all errors are trivial changes in error messages If this approach looks good Ill go ahead and relax the relevant tests to make them pass before we actually merge this Please let me know if Im missing something here Thanks Problem Id like to define a method that takes one of a few possible constant values For example ruby class Fruit extend TSig BANANA Tletbanana String APPLE Tletapple String sig paramsvalue TanyBANANA APPLEreturnsTBoolean def selfbananavalue value BANANA end end Id expect to be able to do this ruby Fruitbananabanana But not this ruby Fruitbananamonster truck I could use an enum But in my real example Im already using these string values in other places They can be returned from my model attributes and can be provided as params from a user I dont want to have to convert these values every time I interact with them Proposed solution My suggestion would be for Sorbet to support literal values in type declarations optional Explain your change focusing on the details of the solution This is a great place to call out uservisible changes Motivation This changes the autogen output to indicate whether the parent classes for printed subclasses are classes or modules This information needed to be plumbed through some of the autogen paths Test plan If you did not write tests for this change replace the message below explaining why not Why we should be confident this change is correct If you changed the website please include a screenshot of the proposed changes See included automated tests Input Gemfilelock with awssdkkms Observed output sorbetrbigemsawssdkkmsrbi unexpected token end class AnonymousStruct Struct Expected behavior it probably shouldnt error out Input bundle install Fetching gem metadata from Resolving dependencies Could not find sorbetstatic universaldarwin in any of the sources ruby v ruby p revision ee f armv llinuxeabihf gem v uname a Linux raspberrypi v l SMP Fri Oct BST armv l GNULinux lsbrelease a No LSB modules are available Distributor ID Raspbian Description Raspbian GNULinux buster Release Codename buster cat Gemfile ruby frozenstringliteral true source gitsourcegithub reponame gem sorbetruntime group development do gem sorbet end 