 Make sure that enablingdisabling of plogr is consistent with the debugme strategy Make plogr use the same output routine Show a worked example Document For some reason I couldnt make it work in a package Reprex follows First thanks for putting this package together it is nice having the ability to have debug statements in a package with almost no cost I recently started adding debugme to a package that I am putting together and noticed some issues with package datasets The issue is that after adding debugme to the package and activating it that the type of my datasets will change from dataframe to list I recreated the problem in a minimal package using the example package in Rstudio and debugme from rcran or master from github on R and as follows Data creation testdata dataframex y usethisusedatatestdata onLoad onLoad functionlibname pkgname debugmedebugme Then after loading the package the called test the type of testdata will have changed from a dataframe to a list If helpful I can provide the complete test package code that reproduces the error I did a little bit of digging and it looks like the error relates to the object set selected for inspection Specifically this line in debugmedebugme objects lsenv allnames TRUE In my test package I see this objects NAMESPACE S MethodsTable onLoad packageName hello At the start of the debugmedebugme function I have classtesttestdata dataframe After calling instrument on namespace objects assignobjects debugmeinstrumentgetobjects envirenv pkg envirenv The type changes from dataframe to list classtesttestdata list It looks like the instrumentation of NAMESPACE results in a change in the dataset in the package If I replace the allnames T to allnames F in ls objects lsenv allnames F Then my dataset works fine after loading as the ls now excludes patterns starting with dot This makes me wonder what the rationale for having allnames T is I am wondering if it is to ensure instrumentation of onLoad and friends or if I am missing something That will allow debugging subprocesses Use comments if possible Comments look nicer and they really have zero overhead It might not be possible as it probably requires reparsing the code especially if CRAN will include the source refs without the parse data Assertions Rethink debug levels Tagging Turn debugging onoff using Package names Debug levels Tags Function names File names Etc CC support Formatters defaulting to glue JSON logging basically some way to log composite objects that can be inspected Logging to a pipe or fifo to be able to inspect browse while the logging is active Interactive log browser an HTML widget would be nice Handle repeated log messages better Ability to stop in a browser if the debug message is active We probably just need to make sure that something like DEBUG if cond browser blah works In general rethink the annotation debug levels etc continuation of my Tweet Analogously to how you can produce debug messages using r DEBUG Hello world x x Id like to run assertion statements that have nearzero overhead eg r ASSERT x is integer stopifnotisintegerx This will allow package developers to add lots of internal assertions validating not only the contract of returned values but also intermediate values The above could be achieved by r DEBUG stopifnotisintegerx but the downside is that this will also trigger lots of DEBUGproduced output if such exists Not only may such output clutter troubleshooting but it may also have side effects conflicting with any troubleshooting efforts eg in a DEBUG statement may touch a promise think delayed assignment causing different results than when disabled Any assert framework should be supported so it should not be hard coded to stopifnot which comes with even more overhead in R assertthat checkmate Really enjoy using your package so heres another feature request Allow disablingsuppressing the time diff after each line per debug statement For more extensive debug cases I like to print the environment variables R DEBUG Full environment ncaptureoutputprintbaseSysgetenv Which gives the output excerpt mypackage Full environment CLICOLORFORCE ms mypackage Full environment CLUTTERIMMODULE xim ms mypackage Full environment COMPIZBINPATH usrbin ms mypackage Full environment COMPIZCONFIGPROFILE ubuntu ms mypackage Full environment DBUSSESSIONBUSADDRESS unixabstracttmpdbusVNMWlDe Oz ms mypackage Full environment DEBUGME inspecter ms mypackage Full environment DEFAULTSPATH usrsharegconfubuntudefaultpath ms mypackage Full environment DESKTOPSESSION ubuntu ms mypackage Full environment DISPLAY ms mypackage Full environment AFAICS there is no way to print a multiline statement from within a DEBUG statement and this might be out of scope Maybe there is a solution I dont see to have line breaks in the output created by debug statements Some ideas a defining some syntax to allow multiline output DEBUG NOBREAK message b exposing a function to users for checking if logging is enabled so I can check before I make a potentially costly call debugmeisEnabledlevel It would be great to have full timestamps in addition toreplacing the diff ones on the terminal as an option I want to use debugme for logging a web application and seeing when something happened should help identify issues What do you think 