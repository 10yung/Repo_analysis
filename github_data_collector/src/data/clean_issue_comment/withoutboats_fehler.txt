Closes The throws macro now takes an optional as TYPE argument If this is present instead of transforming the return type to Result it transforms it to TYPE parameterized by the return and error types The error type is optional as well if no error type is present the wrapper type is parameterized only by the return type This allows you to write throwsas Option to make a throwing function that returns an option It also supports other try types Syntactically these two should both work and be equivalent throwsioError as PollResult throwsas PollioResult However these do not work because of the way the return type needs to be wrapped in poll More thought needs to go into how to support the Poll types Considering renaming this library to exceptional The problem with fehler is of course how close the pronunciation is to failure Also the name fehler was based on this being a successor to failure but the crate that is a successor to failure in my opinion is really anyhow Would like to support rust throwsas Option etc The problem is with the throw macro If the try trait were stable we could instead run this rust return as coreopsTryfromerr But that would make this a nightly only crate Im not sure if Design notes Id make the syntax work like this rust throwsas wrap fn function ret translated to fn function wrapret Whereas rust throwserr as wrap fn function ret translates to fn function wrapret err This is why I modified the default error type feature to require an explicit Would be nice to have actually good documentation here