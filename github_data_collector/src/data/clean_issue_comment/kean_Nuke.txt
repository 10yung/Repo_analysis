Hello I am using the following code to set up aggressive caching for the pipeline let dataLoaderConfiguration DataLoaderdefaultConfiguration dataLoaderConfigurationurlCache nil let dataLoader DataLoader initconfiguration dataLoaderConfiguration validate DataLoadervalidate var configuration ImagePipelineConfiguration configurationdataCache try DataCachename comthebluegroundguestappDataCache configurationdataLoader dataLoader configurationimageCache ImageCache ImagePipelineshared ImagePipelineconfiguration configuration I released there is a memory leak at DataLoaderinitconfigurationvalidate method See the attached screenshots for more details img width altScreen Shot at AM src img width altScreen Shot at AM src img width altScreen Shot at AM src Hi Im using custom decoder for decoding images data swift struct SVGImageDecoder NukeImageDecoding func decodedata Data isFinal Bool NukePlatformImage Converting from SVG to Image swift ImageDecoderRegistrysharedregister imageDecodingContext ImageDecoding in if imageDecodingContextrequesturlRequesturlisSVG false return SVGImageDecoder else it takes a default decoder implicitly return nil I noticed that its firstly getting original data from disk cache assuming a memory cache is empty and then its decoding My custom decoding takes some time and its noticeable Is it any convenient way to store in a disk cache already decoded data in order to speed up loading I mean not to convert images every time the app launches just for the first time Is there a way we can customize DataLoader such that the image can be loaded from S using credentials Hello Im getting this error Nuke does not specify a Swift version and none of the targets Runner integrating it have the SWIFTVERSION attribute set Please contact the author or set the SWIFTVERSION attribute in at least one of the targets that integrate this pod Is it ok you add the SWIFTVERSION in Nukepobspec I am building a macOS version of an iOS app using this excellent library Unfortunately I am getting errors Type ImageLoadingOptions has no member ContentModes Type ImageProcessor has no member Circle How do you think that I can resolve this obstacle in my macOS app I see that SwiftUI integration is coming in January with Nuke on the trello board but in the meantime can you share the best way right now to load remote images into a SwiftUI Image component using Nuke let imageView UIImageView let task ImagePipelinesharedloadImage with url progress response in if let response response imageViewimage responseimage completion result in Display the final image I was wondering how to load multiple URLs or UIImage in a single UIImageView using Nuke Issue Gaussian blur CIFilter naturally creates gray artifacts at the borders of the output image A common use case when blurring an image would be avoiding these artifacts Proposed solution Add a new filter that extends the edge pixels indefinitely and crop the image to its original extend after blurring A Gaussian blur filter that clamps to extent to avoid the gray border artefact struct GaussianBlurClampedToExtent ImageProcessing Hashable CustomStringConvertible private let radius Int Initializes the receiver with a blur radius public initradius Int selfradius radius Applies CIGaussianBlur filter to the image public func processimage Image context ImageProcessingContext Image Get CI image let ciImageOptional CoreImageCIImage if let image imageciImage return image if let image imagecgImage return CoreImageCIImagecgImage image return nil Ensure CI image was retrieved guard let ciImage ciImageOptional else return nil Remember original image extent let extent ciImageextent Create image with infinitely extended border pixels to prevent gray edges from blur filter let inputImage CIImage ciImageclampedToExtent Create blur filter let filter CIFiltername CIGaussianBlur parameters kCIInputRadiusKey radius kCIInputImageKey inputImage Get filtered image guard let filteredImage filteroutputImage else return nil Get default context shared between all Core Image filters let context CIContextoptions priorityRequestLow true Create CI image cropped to original extent guard let imageRef CGImage contextcreateCGImagefilteredImage from extent else return nil return UIImagecgImage imageRef scale imagescale orientation imageimageOrientation public var identifier String return comgithubkeannukegaussianblurclampedtoextentradius radius public var hashableIdentifier AnyHashable return self public var description String return GaussianBlurClampedToExtendradius radius Alternative solutions Extend existing GaussianBlur filter with a Boolean clampToExtend option comgithubkeannukegaussianblurradius radius clampToExtend clampToExtend Heres an interesting thing I load many images form the net NukeloadImagewithdata options ILO into self Fantastic Eacgh image is loaded many places in the app or on the same screen No problem for Nuke Often these days you want a dominant color for use in shadows or borders Good online example lokeshdhakarcomprojectscolorthief For this you have CIAreaAverage or perhaps CIAreaHistogram Importantly CIKMeans is coming soon too which will be the goto choice For each of these images once the image is downloaded by Nuke in many places I run some processing if let aac imageareaAverageColor shadowLayerColor aac The code for areaAverageColor is below Would there be some way in the Nuke pipeline that For each of the s of images I want it to calculate areaAverageColor If I load the same image dozens of times it knows to calculate areaAverageColor only once and I guess some sort of callback to deliver the calculated value eg func nukedisplaycolorFound CGColor selfimageshadowColor colorFound or the like Does this already exist in Nuke or would it be a good idea Perhaps the ideas of picking out a builtin color should be builtrightin much as say blur is immediately available Nuke awesome var areaAverageColor UIColor guard let inputImage CIImageimage self else return nil let extentVector CIVector x inputImageextentoriginx y inputImageextentoriginy z inputImageextentsizewidth w inputImageextentsizeheight guard let filter CIFilter name CIAreaAverage parameters kCIInputImageKey inputImage kCIInputExtentKey extentVector else return nil guard let outputImage filteroutputImage else return nil var bitmap UInt repeating count let context CIContextoptions workingColorSpace NSNull consider also outputColorSpace NSNull contextrender outputImage toBitmap bitmap rowBytes bounds CGRectx y width height format RGBA colorSpace nil return UIColorred CGFloatbitmap green CGFloatbitmap blue CGFloatbitmap alpha CGFloatbitmap 