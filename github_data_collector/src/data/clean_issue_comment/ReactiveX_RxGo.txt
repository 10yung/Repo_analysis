The quality of the tests must be improved In my opinion we must get rid of any single timeSleep which leads to nondeterministic tests As a first proposition I created this PR Basically we can use a DSL this way go observables mockObservablest x x Each column represents an observable emitting item The first observable will produce the items and will close x whereas the second observable will produce the items and will close This code will produce observables from which iterating over the internal iterator where causality is guaranteed It means will be handled before before etc regardless of the execution context It is also possible to send an error item with the character e Hi Ive implemented Debounce operator tests resolves an infinite loop due to requesting a new iterator for each loop and break causing a short circuit of the wait group resulting in the Merge observable never terminating The emitter lambda of the Merge operator requests a new iterator in each repetition of the for loop For at least iterableFromSlice and probably in the general case of any iterable which does not consume the iterated iterableFromRange this repeats the first iteration infinitely The tests related to hot observables when creating a hot observable are not deterministic We need to fix them Since Im not doing much this weekend Ive decided to implement another one Im not really sure if Timestamped should be an exported interface and have an internal struct implementing it just like Observable and observable Let me know if thats the case Closes Hi teivah this is my first stab at contributing to a Go project and Im just getting started with Go From what Ive seen of the other implementations this one seems right but I might have missed something Could you please review my code so I can then add docs to the operator Closes We need to update travisyml file to use dependencies using Go modules instead of go get just like today We should create a PR to in order to document how RxGo fits in the existing ReactiveX ecosystem and to add RxGo documentation to existing operators Once the v becomes to be stable we need to update the README and the examples provided within the project 