Hi everybody Given the bootstrapping capabilities of Akka Management I dont think ConstructR adds any value any longer At least not to me Therefore I will at least retire as an ownermaintainer of this project If there is interest others could take over please let me know If not I will retire the project as well Ay Thank to have released version so fast However I saw that there is only a release for scala VS Its a issue or you dont release for scala anymore Today the path in etcd doesnt be modifiable It is hardcoded in the source code constructR I think it could be useful to allow one customisation of this path This issue regards only root and the subdirectories but not the final key Use case Some companies want to organise their etcd and give a formal structure of their etcds threes Have you seen Akka Cluster Bootstrap part of Akka Management This allows for bootstrapping clusters without central coordination Pretty cool IMHO I have tried it with dockercompose Works fine Now I wonder whether we need ConstructR any longer What do you think As discussed in I have removed the actorsystem stopping behavior modernized the ConstructrExtension by switching to the new style of extension implementation and added the ability to hook up event handlers to ConstructR failures for which I added a couple of tests as well In the context of this work I also removed the deprecated ActorDSL stuff from the multijvm test and replaced it with regular actor creation code as per akka guidelines The Constructr supervisor actor has a logic according to which Leaving the cluster also leads to actorsystem termination Failure of the underlying FSM must eventually lead to actorsystem termination About the first point it seems redundant and restrictive at the same time to take that decision at the Constructr level MemberRemoved is an event that can be easily handled by the userspace as it is akka public API and there may be multiple cases like our own that the actorsystem must resume operations even after leaving the cluster Generally shutting down the actorsystem just seems to be out of the scope of Constructr as an extension About the second point for reasons similar to the above what would seem more appropriate would be for Constructr to notify the userspace about its terminated state and let it decide how to handle it eg continue operation without clustering or shutdown but perform some sort of cleanup first etc The suggested approach here would be to propagate the failure related decision making to the userspace by elevating the ConstructrExtension class its functionality can be extended so that consumers may register event handlers for Constructr failure in the same fashion as the akka native extensions eg the registerOn handlers of the Cluster extension If backwards compatibility is required for these behaviors ie terminate actor system on failures we can add some configuration setting that will switch them onoff Also given that the ConstructrExtension will be used to provide new functionality it will be also a good chance to make it abide by the latest akka extension interface as per akka the ExtensionKey class has been deprecated This will have the extra benefit of course that the ConstructrExtension will be initializable both from configuration and source code as well Both lock and seednode entries get a TTL after which they expire at the backend Given this there is no attempt at the codebase to delete them when it is actually allowed These cases would be Lock entries can be deleted when single cluster node has successfully joined cluster and added itself to the backend Seed node entries can be deleted when a node is gracefully leaving the cluster While not deleting these entries does not create some catastrophic failure since they will eventually expire they do have some annoying side effects I have happened to experience the generation of a huge amount of occurences of the log message Couldnt acquire lock going to GettingNodes due to the existence of a lock that could have been released but has just been left to expire the reason becomes more frequent in the context of Newcomers to the cluster will have to wait for a whole TTL to join successfully in the case that previously existing nodes have just exited the cluster assuming will be addressed My suggestion would be to add two extra methods on the Coordination trait unlock removeSelf with default implementations that would do nothing to keep backwards compatibility and that would attempt to delete lock and seed node entries respectively on a best effort basis This means that the ConstructrMachine would fire forget these commands so as not to make the FSM code any more complex In the best case firing these commands will achieve the desired results and in the worst one nothing changes compared to how the FSM works at the moment As mentioned at this is one of the improvements my team would need in the context of our work which of course we will be more than happy to contribute via PR Your thoughts Closes Hi because of Tecsisaconstructrconsul I think it is necessary to add a close method to Coordination in order to perform resource release on system shutdown in a clean elegant way An example of such resource cleanup would be destroying the Consul session instead of just relying on TTL close would be invoked by the ConstructrMachine implementation of the onTermination hook If this is not useful to etcd we can just have a dummy implementation of close returning something like FuturesuccessfulDone I see this issue currently in constructr head Removing scalafmt allows me to test compile