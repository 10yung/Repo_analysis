Getting issues while trying to match the following query SELECT vcol vcol as colTemp col col as colTemp acol FROM table a JOIN table m USING s LEFT OUTER JOIN table v USING s LEFT OUTER JOIN table d USING s LEFT OUTER JOIN table t USING s LEFT OUTER JOIN table p USING s LEFT OUTER JOIN table USINGs LEFT OUTER JOIN table qc USINGs WHERE something AND vsomething AND vsomething but get was not expected next expectation is ExpectedQuery expecting Query QueryContext or QueryRow which error Trying to match the query as follows queryReg regexpQuoteMetaquery mockExpectQueryqueryRegWithArgs WillReturnRowsrs What would be the correct query string that wont have match issues When an expectation failed the SQL request would error suggesting the type of the actual expectation However it is not detailed enough to show exactly which expectation failed Consider the following simplified example detailssummaryExample codesummary go package main import databasesql testing githubcomDATADOGgosqlmock func InsertValuesdb sqlDB table string column string values interface err error var tx sqlTx tx err dbBegin if err nil return defer func if err nil txRollback else err txCommit stmt INSERT INTO table column VALUES for val range values if err txExecstmt val err nil return return func TestInsertValuest testingT db mock err sqlmockNew if err nil tFatalfcannot create sql mock s err mockExpectBegin mockExpectExecINSERT INTO tblWithArgs WillReturnResultsqlmockNewResult mockExpectCommit mockExpectBegin mockExpectExecINSERT INTO tblWithArgs WillReturnResultsqlmockNewResult mockExpectCommit mockExpectBegin mockExpectExecINSERT INTO tblWithArgs WillReturnResultsqlmockNewResult mockExpectCommit err InsertValuesdb tbl col if err nil tErrorfcannot insert values s err err mockExpectationsWereMet if err nil tErrorfunfulfilled expectation s err details The code would fail like this FAIL TestInsertValues s testgo cannot insert values call to ExecQuery INSERT INTO tbl col VALUES with args Name Ordinal Value was not expected next expectation is ExpectedCommit expecting transaction Commit testgo unfulfilled expectation there is a remaining expectation which was not matched ExpectedCommit expecting transaction Commit FAIL FAIL commandlinearguments s FAIL We know that the error happens because an ExpectCommit is not fulfilled but it does not suggest which of the three ExpectCommits failed This makes debugging test failure difficult I propose that Every call to ExpectXXX should record the stack trace eg with the stack trace we would know it is the ExpectCommit on line causing the failure Andor Add a WithCommentstringWithCommentfstring interface method to every ExpectedXXX type The expectation failure would include the comment WithComment is needed to distinguish between different Expect invocations in a loop where the stack trace would still be ambiguous eg go for i val range values comment fmtSprintfiteration d value s i val mockExpectBeginWithCommentcomment mockExpectExecINSERTWithCommentcommentWithArgsvalWillReturnResultsqlmockNewResultint i mockExpectCommitWithCommentcomment I have a query that I run that has a few sqlOut parameters Using gosqlmock it doesnt appear to be possible to have values injected into the Dest field of a sqlOut parameter when the query is executed added some functionality to make some sqlOut testing possible but it doesnt appear to be possible to fully test these types of queries For example here is my query I have in my code golang func r mgRepo ExecuteQueryctx contextContext area modelArea cluster string requestCount int MyGlobalData error var AvailableRangeStart int var IDBlockSize int err rdbQueryContext ctx rsProc sqlNamedTableName areaString sqlNamedMinBlockSize requestCount sqlNamedAvailableRangeStart sqlOutDest AvailableRangeStart sqlNamedIDBlockSize sqlOutDest IDBlockSize sqlNamedRequestingServer cluster if err nil return nil err if AvailableRangeStart IDBlockSize return nil errorsNewfailed to retrieve block return MyGlobalData RangeStart AvailableRangeStart RangeEnd AvailableRangeStart IDBlockSize nil This function validates that the AvailableRangeStart and IDBlockSize sqlOut parameters have been assigned checks that they dont have the default value of which means I cant run this function using a mock database without the errorsNewfailed to retrieve block error being returned Here is my test golang type CustomConverter struct func s CustomConverter ConvertValuev interface driverValue error if val ok vdriverNamedValue ok return valValue nil if val ok vsqlOut ok res valDestint return res nil return v nil func TestMgRepoExecuteQueryt testingT converter sqlmockValueConverterOptionCustomConverter db mock err sqlmockNewconverter if err nil tErrorffailed to create sql mock a int i int mockExpectQuerytestWithArgs sqlNamedTableName Contactlog sqlNamedMinBlockSize int sqlNamedAvailableRangeStart sqlOutDest a sqlNamedIDBlockSize sqlOutDest i sqlNamedRequestingServer test WillReturnRowsnil mgRepo mgRepo db db sProc test err mgRepoExecuteQuerycontextBackground modelContactlog test int assertNilt err Here is the test execution output bash RUN TestMgRepoExecuteQuery FAIL TestMgRepoExecuteQuery s myGlobaltestgo Error Trace myGlobaltestgo Error Expected nil but got errorserrorStringsQuery test arguments do not match argument expected int does not match actual int Test TestMgRepoExecuteQuery FAIL I have a function to get the primary key columns from a table How can I use gosqlmock to create a test case for this function Thansk in advance type Mvl Json struct syncMutex db sqlDB schemaName string tableName string mvlName string logger logrusLogger primaryKey string lobColunms string currentSeq int sequence primaryKey func m Mvl Json PrimaryKey mprimaryKey appendmprimaryKey primaryKeyColunm My code uses pgArray to read a text field Can I use this package to test this code if so how Thanks I am not clearly how it works sqlmock internal Here is my case A insert function go func insert sqlResult error query stmt err repoDbPreparequery if err nil return nil errorsWraperr repoDbPreparequery defer stmtClose result err stmtExecvalues if err nil return nil errorsWraperr repoDbExecquery values return result nil As you can see the return value of this function is sqlResult and error After I add below statements in my unit test this test failed go if reflectDeepEqualgot ttwant tErrorfrepoUpsert v want v got ttwant Got error repoUpsert sqldriverResultLockersqldriverConn xc ae resisqlmockresult xc c want sqlmockresultinsertID rowsAffected errerrornil I mock the return result using WillReturnResultsqlmockNewResult And the value of ttwant is sqlmockNewResult as well The return value of sqlmockNewResult is driverResult so I think thats why the error happened Is it necessary add reflectDeepEqualgot ttwant and assert it Or all I need is mockExpectationsWereMet Thanks for explaining I tried a nested query Instead of letting me know the regex is not valid or pointing out differences in the string literal versus the regex pattern it said query not expected and unable to match actual versus expected query respectively Please clarify the regex was invalid in the panic message or a compile time warning please Stack overflow question here Example of working query sqlMockExpectQuerySELECT EXISTS SELECT FROM informationschema tables WHERE tableschema public AND tablename myTable WillReturnRowsexistsRows Example of Invalid query unable to match sqlMockExpectQuerySELECT EXISTS SELECT FROM informationschematables WHERE tableschema public AND tablename myTable WillReturnRowsexistsRows Example of invalid regex query skipped in evaulation sqlMockExpectQuerySELECT EXISTS SELECT FROM informationschematables WHERE tableschema public AND tablename myTable WillReturnRowsexistsRows Ive found a case where calling dbClose in different ways only sometimes satisfies mockExpectClose For example if I call sqlmockNew and then call defer dbClose on the DB handle that is returned mockExpectClose is not satisfied However if I perform a nil check on the deferred result of dbClose then mockExpectClose is satisfied I would expect all cases of dbClose to be consistent either satisfy or dont satisfy mockExpectClose My goal is to catch nonnil errors from dbClose and ensure they are logged Test cases showing the behaviour golang func TestSQLMockDBClosePasst testingT db mock sqlmockNew defer dbClose assertNilt mockExpectationsWereMet func TestSQLMockDBCloseAlsoPasst testingT db mock sqlmockNew defer func dbClose assertNilt mockExpectationsWereMet func TestSQLMockDBCloseFailt testingT db mock sqlmockNew defer func err dbClose if err nil tFatalerr assertNilt mockExpectationsWereMet go version go linuxamd gosqlmock v Work done by MarcelHillmann to add column metadata but that pull request hasnt seen activity in some time When usingWillReturnCloseError on an ExpectedPrepare but not using transactionsClose is not returning the error given to WillReturnCloseError Expected behaviour stmtClose wantErr Actual behaviour stmtClose nil Heres a failing test function that should pass go func TestExpectedPreparedStatementCloseErrorDBt testingT conn mock err New if err nil tFatalfailed to open sqlmock database err want errorsNewSTMT ERROR mockExpectPrepareSELECTWillReturnCloseErrorwant stmt err connPrepareSELECT if err nil tFatalunexpected error while preparing a statement err if err stmtClose err want tFatalfgot v want v err want 