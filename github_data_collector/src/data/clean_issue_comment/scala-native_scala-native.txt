 Proposal rename one of the extern symbols in scalanativeunsafe or provide an alias for the def extern Motivation Im currently working on a compatibility layer for JVM using JNA using an annotation macro for extern to transform external bindings into the proper JNA calls While the conflicting symbols for extern work fine as long as the annotation class has no body this seems to break when needs to be materialized as a class when it holds a member in this case the macroTransform From the current implementation of BufferedInputStream relies on allocating an array the size of mark limit directly Combined with the standard usage pattern of setting marklimit to MAXINT this will cause a failure with at least the boehm GC The allocator will attempt to allocate a MAXINT overhead buffer directly and fail The solution is to handle mark much the same as harmony Allocate a conservatively sized buffer and resize as necessary llvm has been removed from homebrew in Yeah its probably installed on most systems Yeah my system didnt have it Yeah I spent an hour trying to debug this The API call to GitHub fails due to a change The author is always null so the Lightbend CLA call in turn fails Ready for review I have done an upgrade and tried to minimize changes via lots of trial and error Here is a list of changes that I couldnt avoid but it is upgrading from to Added format off in niocharset to avoid some changes Trailing comments are now aligned Wrapped return types are now are spaces instead of This is using the default but trying to alter these settings makes more of a diff Curly brace expansion when they are inlined if try and inside if The first are ok but I really dislike the last Note scalanativeunsafeTag and generated files have the most changes If anyone wants to see if they can improve on this just grab the scalafmtconf file and give it a try with a current branch Under certain circumstances the use of regular expressions seems to leak memory Here is a code fragment which illustrates the problem Symptom on my system Ubuntu LTS I observe a memory leak with the immix GC The process memory increases up to MB before it finishes without error With the boehm GC I dont observe this leak The process maximum memory use is around MB I dont have tested with commix since Im not working with the latest snapshot but with M Here is an issue that may be related to this The goal here is to simplify things for x So much time has elapsed we are getting behind and missing improvements In my opinion x is obsolete and dropping it will not affect users moving forward This will also reduce our CI load and making working on the project much easier Compilation fails when so files are copied in the lib folder SBTs unmanaged dependencies folder see The error is similar to the one described in this previous issue javalangUnsupportedOperationException Neither a jar nor a directory The solution can consist in using a different directory or to change the SBTs unmanaged dependencies folder For instance this additional settings will allow to use the lib folder to contain so files unmanagedBase baseDirectoryvalue jars This behavior should be described in the SN FAQ or in a new troubleshooting section