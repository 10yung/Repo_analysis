Fixes Similar to but this is more of a feature request oneOf method that allows you to check a value against multiple predicates Ive implemented it by doing the following js isoneOf item predicatesArray return predicatesArraysomepredicate predicateitem To use it js ituses is predicates for a true match expectisoneOfhi isfunction isstring isobject toEqualtrue Uses the typescript v feature asserts value is T to create assert variants of the is type guards The assertions are used to narrow types at compile time and to throw TypeError at runtime for values which are not of the correct type typescript import assert from sindresorhusis assertstringfoo Each method in is is wrapped and mirrored in assert Tests for is are duplicated for assert Notes The explicit typing in interface Assert is required for typescript to acknowledge the assertions Due to the assertions requiring explicit typing using property for isassertstring and so on would require using namespace is which was removed in This also means that assert needs to be exported separately Custom descriptions are used to enhance some assertion error messages The value is not included in the error message Could perhaps use Nodejs fitting AssertionError on the serverside but it would require an import Fixes See A new typescript language feature is slated for the v milestone asserts I think adding new asserts value is T variants of the type guardenabled functions in is would be very useful It would reduce the often repetitive ifnottypeofthrow pattern to a single line while narrowing types Example implementation typescript isassertedString value unknown asserts value is string if isstringvalue throw new TypeErrorNot a string detailsWithout asserts typescript function finput unknown if isstringinput throw new TypeErrorNot a string input has type string here details With asserts typescript function finput unknown isassertedStringinput input has type string here Function naming to be discussed Please see Issuehunt Badges img altIssuehunt badges src Issuehunt Badges It would be nice if this worked ts const a foo const b bar Both a and b is an object but TS only knows theyre any if isallisobject a b a and b is now known by TS as object Issuehunt content There is a open bounty on this issue Add more on Issuehunt Checkout the Issuehunt explorer to discover more funded issues Need some help from other developers Add your repositories on Issuehunt to raise funds Issuehunt content In some cases isinstanceof doesnt work and we need to use duck typing Something like js isequivalentobjectBeingTested members to look for boolean Used like this js if isequivalentmyAnimal Animalname Animalspecies Animalsize throw ErrorNot an animal Im not sure what is the best method signature but you get the idea Im also not sure what is the best name isequivalent is maybe incorrect as that implies testing two objects that are fully equivalent Maybe something like isduckTypeof isduckType isducktype