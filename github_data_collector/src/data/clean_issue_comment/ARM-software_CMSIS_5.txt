It looks like something changed recently in the indexpidx file crashing the SAX parser Parsing orgxmlsaxSAXParseException lineNumber columnNumber White spaces are required between publicId and systemId The current file reads like xml version encodingUTF index schemaVersion xsnoNamespaceSchemaLocationPackIndexxsd xmlnsxs vendorKeilvendor url timestamp T timestamp pindex pdsc url vendorARM nameminar version pdsc url vendorHoltek nameHT DFP version pindex index I would suspect that the PackIndexxsd requires a full absolute URL I am working on a CM based project my ported RTX with CMSIS seems too big over KB code space consumed I did some tailor now the code size is a problem to me according with It says the code size is KB for cortexM Is there anything I did wrong I tried a lot of configurations from the rtxconfigh my armgcc is configured as O Hello All I have a task of performing regression learning on a target board ARM Cortex A processor I have completed the tasks of data and feature extraction Now i am analyzing the performances of different learning algorithms GRUs and LSTM in tensorflow However my concern is that not all models has the software supports to be deployed on the target board Out of the software libraries privided by ARM for ML models i found out that only ARM NN on top of ARM compute library is the way to go However in the description of the compute library it specifies that it supports only SVM Binary Classification and CNN models I wanted to know if there is any other way of accomplishing this task Thanks in advance While I use osMessageQueuePut in ISR at a high frequency for a long timewhere I use a knob key to test I always get a HardFaultHandler error the following is the test code typedef struct osMessageQueueIdt mq osMemoryPoolIdt mp osEventFlagsIdt ef osMutexIdt mtx u ack int msgsize msgt static int msgputmsgt m void ptr int len void p osStatust st p osMemoryPoolAllocmmp ifp return memcpyp ptr len st osMessageQueuePutmmq p ifstosOK return return msgt msginitint max int msgsize msgt mNULL m msgtcalloc sizeofmsgt ifm return NULL mmq osMessageQueueNewmax sizeofvoid NULL mmp osMemoryPoolNewmax msgsize NULL mef osEventFlagsNewNULL mack mmsgsize msgsize return m int msgpostmsgt m void ptr int len int r ifm ptr len lenmmsgsize return r msgputm ptr len return r int msgrecvmsgt m void ptr int len int r void pNULL ifm ptr len lenmmsgsize return osStatust st st osMessageQueueGetmmq p NULL osWaitForever ifstosOK p return memcpyptr p mmsgsize osMemoryPoolFreemmp p return r static msgt msgNULL void uartrxcbu data u datalen int r keyt k evtt e data convert eevt EVTKEY ekey k r msgpostmsg e sizeofe ifr void guitaskvoid arg int r evtt e osStatust st msg msginit sizeofe ifmsg return while r msgrecvmsg e sizeofe ifr switcheevt case EVTKEY do nothing break msgfree msg int mainvoid osThreadNewguitask NULL NULL while TIP the uartrxcb called frequency is about timesms when the fault occur the caller is svcMessageQueueGet when I use timer to trigger all is ok Anyone have this problem or my code has some wrong Changed the trigger by usb or spi I get the same resultfault error the driver I used is stm driver library I dont think that its the driver bug thanks Corrected quick sort for constant signal Added NeonMVE exponential smoothing tests Added NeonMVE IIR functions tests Corrected order of static functions for bitonic sort Added armerrorhandler Added NeonMVE Cholesky decomposition tests Added NeonMVE Goertzel DFT tests Added median filter tests Added MVE support for logical operators Corrected Doxygen documentation Added intrinsics for GCC on Cortex A Corrected error for filters with LOOPUNROLL Removed tab characters from source files I have a cmakebased project targeting arm cortexm and I want to run clangtidy on my code When I attempt to run clangtidy I get this message CMSIS CMSISCoreIncludecmsiscompilerh error Unknown compiler clangdiagnosticerror error Unknown compiler my version of clang has clang instead of ARMCCVERSION maybe theres an option setCMAKECXXCLANGTIDY clangtidy headerfilter checks I could set to get this to work for the purposes of static analysis clangtidy doesnt need to linkexecute it just needs to be able to compile the code As a side note I think a good feature request could be to formally add support for llvm clang since it appears to be an unsupported compiler Nonfunctional change to rewrite this counting down whileloop into a forloop and also using array indexing instead of pointer arithmetic This is a little experiment how you guys feel about simplifying this code I hope its easy to agree that first of all this increases readability of the code and believe it or not makes the life of the compiler and autovectorisation easier I am in the process of fixing the vectoriser who is struggling with this counting down loop in the context of MVE and tailpredication but thought that a rewrite of this loop would be good too If we like this I think I will give a few more kernels a similar treatment The IAR DSP libraries were mistakenly built with debug info coresc h should be included instead of coreSC h 