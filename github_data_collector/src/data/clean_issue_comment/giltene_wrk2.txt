local counter local inspect require inspect request function wrkheaders xauthtoken counter counter counter return wrkformatnil path end function donesummary latency requests printstart of summary printinspectsummary QPS printQPS summaryrequests summaryduration printmeanlatencymean printpercentile latencypercentile printpercentile latencypercentile printpercentile latencypercentile printpercentile latencypercentile printpercentile latencypercentile printpercentile latencypercentile printpercentile latencypercentile printpercentile latencypercentile printend of summary end Hello This pull request fixes the build script of this project Specifically it adds missing Make dependencies so that the targets of the project are regenerated correctly whenever there are updates to any of the dependent source files In this way the project is incrementally built and we no longer sacrifice time in clean builds ie builds after a make clean Note that this fix follows the best practices for tracking dependencies automatically through gcc MD For more details see here Building LuaJIT HOSTCC hostminiluao HOSTLINK hostminilua DYNASM hostbuildvmarchh HOSTCC hostbuildvmo HOSTCC hostbuildvmasmo HOSTCC hostbuildvmpeobjo HOSTCC hostbuildvmlibo HOSTCC hostbuildvmfoldo HOSTLINK hostbuildvm BUILDVM ljvms ASM ljvmo CC ljgco BUILDVM ljffdefh CC ljerro CC ljcharo BUILDVM ljbcdefh CC ljbco CC ljobjo CC ljstro CC ljtabo CC ljfunco CC ljudatao CC ljmetao CC ljdebugo CC ljstateo CC ljdispatcho CC ljvmevento CC ljvmmatho CC ljstrscano CC ljapio CC ljlexo CC ljparseo CC ljbcreado CC ljbcwriteo CC ljloado CC ljiro CC ljoptmemo BUILDVM ljfolddefh make ljfolddefh Segmentation fault make Deleting file ljfolddefh make depsluajitsrclibluajita Error I am on macOS B Is there any solution for this Thank you Hello Are there plans to place some tags around versions for wrk Currently if you build master you get a version number of Should this be tagged Could future changes also get versions tagged If OpenSSL is not in standard location we can use it by setting OPENSSLHOME environment variable Does wrk support gRPC Port wrk changes cherrypick important updates from wrk master branch post release One of the valid nits with wrk is that it can overreport latencies by up to msec because the ratelimiting model uses the call aeCreateTimeEventthreadloop msectowait delayrequest c NULL to wait before sending a request if its time has not yet come Because of the msec resolution of the ae async frameworks aeTimeEvent and aeCreateTimeEvent this can end up oversleeping by up to a millisecond which ends up looking like a server problem when it is actually a load generator problem And the approach of forgiving up to msec is not a good one as such an approach would miss real issues IMO it is better to report pessimistic could be somewhat worse than reality latency numbers than ones that are better than reality But modern nix variants can deal with clocks at a much finer resolution than msec with eg nanosleep and timerfd and the events should really be using a much finer resolution eg usec would not be unreasonable The really cool code in aec and friends appear to have originated from redis and have not been touched in forever Id like to work to improve the basic aeTimeEvent in that framework to include microsecond resolution information along with a configurable quantum for actual time event resolution chunking The approach Id take would probably keep the current external APIs eg aeCreateTimeEvent which takes a msecunit time parameter and all the current fields in eg aeTimeEvent including whensec and whenms but add an additional whenusec field for the optional microsecondswithinthemillisecond amount defaults to that some APIs may supply We would then add additional APIs for those who want finer resolution eg aeCreateTimeEventUsec aeWaitUsec aeGetTimeUsec We would change the underlying implementations that currently populate and use struct timevals like aeProcessEvents aeApiPoll which already supports microsecond resolution to correctly populate and usecresolution information and will use a timerfd to support submillisecondresolution timing in epollwait rather than rely on the timeout parameter The benefit of all this will be much more timely wakeups for delayed requests and a less pessimistic reporting of submillisecond response time levels and better perthread handling when secthread requests rates are actually possible wrk was created in Nov as an example of correcting coordinated omission in a load generator It was basically a quick fork of wrk at the time with minimal changes needed to achieve the purpose created by giletene and mikeb as a result of a quick conversation at QCon SF The project turned out to be way more popular than I thought or than originally intended Wrk seems like a very solid base but people looking for constantrate capabilities and proper not susceptible to coordinated omission latency measurement seem to have picked up wrk But since we had not put any real work into maintaining or enhancing wrk over the years Im sure wrk has added quite a bit in the years since that we should simply catch up on One simple way to do this is to follow Vizzinis directive and go back to the beginning Since applying the changes to wrk years ago was fairly simple and since we had not strayed very far from the original work done in we can just pick up the latestgreatest wrk and apply the same logical changes to it that we did back then to get an up to date wrk with all the wrk goodies It took me and mikeb only a few days to do it the first time and applying it again should be even shorter I would prefer that we do this before starting to add any new features from PRs that have accumulated over the years and any new features we want to add that are wrk specific eg Id really like to add a hlog output support which has long been part of hdrhistogramc Once we apply those PRs and additions catching up with wrk will involve much more work Does anyone out there want to volunteer to do this catch up to latest wrk work This PR adds support for specifying and for benchmarking multiple HTTPS endpoints in a single wrk run Our main motivation of running a benchmark over multiple endpoints is to allow benchmarking of eg a whole web application instead of the pages andor restful resources that make up said application individually Most of the heavy lifting is done in a LUA script multipleendpointslua The script allows for specifying an arbitrary number of HTTPS endpoints to include in the benchmark Endpoints will be connected to in a random evenly distributed fashion After a run finished the overall latency will be reported ie theres currently no breakdown of latency per endpoint Furthermore this PR introduces a change in wrkc that will force a thread to reconnect ie close socket open socket using current value of wrkthreadaddr each time wrkthreadaddr is set from a LUA script Lastly the PR includes a patch by janmejay to handle remote connection close dongsupark identified this issue during our testing Known Limitations Please note that currently benchmarking multiple endpoints requires threads connections as we close reconnect as soon as a thread assigns wrkthreadaddr which impedes ongoing async requests There are a number of ways to remove this limitation and we are actively investigating However wed like to start getting early feedback on our direction hence moved to create this PR with a known limitation