The still unreleased develop version of storehaus is not binary compatible with the current versions of Finagle This PR updates them to recent versions by using the twitter Bufs provided in the new finaglex clients and removes ChannelBuffers which were obsoleted with the release of netty We use storehaus in a bunch of places in our infrastructure I hate to say it but we really regret the decision now since storehaus is so far behind on its Finagle deps Is upgrading them a possibility Id be willing to contribute in someway if its deemed plausible The explanation for put didnt match the signature of this method corrected that if the Set K is empty that you get you can just return Mapempty Redis doesnt like empty values The main goal of this PR is to update Finagle to the new version for using new and improve Finagle features and performance and also one day migrate Storehaus to Scala The Scala cross build is still kept valid using Finagle new Finagle versions beyond are not compatible with Scala any more which includes of course Finagle Scala is not added to the cross builds yet since the Scalding dependency is not yet available for Scala all the other dependencies are already Scala compatible updating their versions Hello everyone When i use memcache in storehaus there is an error I change the memcache port to And the code is below import comtwitterstorehausmemcacheMemcacheStore import comtwitterconversionstime import comtwitterfinagleredisutilCBToString StringToChannelBuffer import comtwitterutilAwait object MemcacheTest def mainargs Array String Unit val client MemcacheStore defaultClientmemcache localhost seconds val store MemcacheStoreclient new Threadnew Runnable override def run Unit try for i to storeputitoString SomeStringToChannelBufferitoString catch case e Exception eprintStackTrace start new Threadnew Runnable override def run Unit val start SystemcurrentTimeMillis val num try for i to Awaitresultstoregetnum match case Somevalue printlnCBToStringvalue case None printlnNone catch case e Exception eprintStackTrace val end SystemcurrentTimeMillis printlnend start start error info is below comtwitterfinagleServiceTimeoutException exceeded seconds to memcache while creating a serviceconnection or reserving a serviceconnection from the serviceconnection pool memcache at comtwitterfinagleclientDefaultClientanonfun applyDefaultClientscala at comtwitterfinagleclientDefaultClientanonfun applyDefaultClientscala at scalaFunction anonfuncompose applyFunction scala at scalaFunction anonfuncompose applyFunction scala at scalaFunction anonfuncompose applyFunction scala at comtwitterfinaglefactoryRefineryinitRefineryscala at comtwitterfinagleclientDefaultClientanonfun applyDefaultClientscala at comtwitterfinagleclientDefaultClientanonfun applyDefaultClientscala at comtwitterfinaglebuilderClientBuilderbuildFactoryClientBuilderscala at comtwitterfinaglebuilderClientBuilderbuildClientBuilderscala at comtwitterfinaglememcachedKetamaClientBuildercomtwitterfinaglememcachedKetamaClientBuilderlegacyFAClientBuilder Clientscala at comtwitterfinaglememcachedKetamaClientBuilderanonfunbuild applyClientscala at comtwitterfinaglememcachedKetamaClientBuilderanonfunbuild applyClientscala at comtwitterfinaglememcachedKetamaClientanonfun anonfun applyClientscala at comtwitterfinaglememcachedKetamaClientanonfun anonfun applyClientscala at scalaOptionmapOptionscala at comtwitterfinaglememcachedKetamaClientanonfun applyClientscala at comtwitterfinaglememcachedKetamaClientanonfun applyClientscala at comtwitterfinagleGroupanonfunmap applyOrElseGroupscala at scalaruntimeAbstractPartialFunctionapplyAbstractPartialFunctionscala at comtwitterfinagleGroupanon anonfun anonfunapply applyOrElseGroupscala at scalaruntimeAbstractPartialFunctionapplyAbstractPartialFunctionscala at scalacollectionTraversableLikeanonfuncollect applyTraversableLikescala at scalacollectionimmutableSetSet foreachSetscala at scalacollectionTraversableLikeclasscollectTraversableLikescala at scalacollectionAbstractTraversablecollectTraversablescala at comtwitterfinagleGroupanon anonfun applyGroupscala at comtwitterfinagleGroupanon anonfun applyGroupscala at comtwitterutilVaranonfunmap applyVarscala at comtwitterutilVaranonfunmap applyVarscala at comtwitterutilVaranon anonfun applyVarscala at comtwitterutilVaranon anonfun applyVarscala at comtwitterutilVarObserverpublishVarscala at comtwitterutilUpdatableVarobserveVarscala at comtwitterutilVaranon observeVarscala at comtwitterutilVarclassobserveVarscala at comtwitterutilVaranon observeVarscala at comtwitterutilVarclassobserveToVarscala at comtwitterutilVaranon observeToVarscala at comtwitterfinagleGroupclassrefGroupscala at comtwitterfinagleGroupanon reflzycomputeGroupscala at comtwitterfinagleGroupanon refGroupscala at comtwitterfinagleGroupclassmembersGroupscala at comtwitterfinagleGroupanon membersGroupscala at comtwitterfinagleGroupclassapplyGroupscala at comtwitterfinagleGroupanon applyGroupscala at comtwitterfinaglememcachedKetamaClientinitClientscala at comtwitterfinaglememcachedKetamaClientBuilderbuildClientscala at comtwitterstorehausmemcacheMemcacheStoredefaultClientMemcacheStorescala at comhustgridleesfWrappedMemcacheStoreMemcacheTestmainMemcacheTestscala at comhustgridleesfWrappedMemcacheStoreMemcacheTestmainMemcacheTestscala at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at comintellijrtexecutionapplicationAppMainmainAppMainjava It seems the high concurrency read and write operation to memcache causes the problem Any suggestions to solve it Do anyone knows how to use hbase in summingbird programs Looking for help Its basically a todo from Hi everybody Here is storehouse implementation for postgres Need your review and comments 