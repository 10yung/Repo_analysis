hi i am looking at your project now i want to make some request processing and i am currently doing a malloc for creating an auxiliary structure i notice the presence of a coromalloc can i follow my approach or is advisable to use the coro functions to create the structure that is only used by the request I cant run make benchmark even after this fork of weighttp is installed pinalzokspiDownloadslwanbuild make benchmark Built target bin hex Built target generateautoindexicons Built target mimegen Built target generatemimetypestable Built target lwanstatic Built target testrunner Running benchmark Using homepiDownloadslwanbuildsrcbintestrunnertestrunner for lawn This script requires a special version of weighttp which supports JSON output Get it at make CMakeFilesbenchmarkdirbuildmake CMakeFilesbenchmark Error make CMakeFilesMakefile CMakeFilesbenchmarkdirall Error make CMakeFilesMakefile CMakeFilesbenchmarkdirrule Error make Makefile benchmark Error A quick skim of its source code doesnt reveal any JSON related code in fact it doesnt even take a j argument Hello can it handle TCP UDP service server IOT applications are next future If yes How If not Why Regards I ran into this error after build and load with original lwanconf Did I miss something localhostbriteFaaSruntimelwan buildsrcbintestrunnertestrunner Loading configuration file testrunnerconf Could not drop capabilities Invalid argument error number Ideally this would be a struct lwankeyvalue member in struct lwanconfig Then every response will unconditionally serve any headers in this member This might be really useful for securityrelated headers that you wish to apply sitewide for example HTTPStrictTransportSecurity or ContentSecurityPolicy Personally I would plan to have the following c static struct lwankeyvalue headers key contentsecuritypolicy value defaultsrc self key xframeoptions value SAMEORIGIN key xxssprotection value modeblock key xcontenttypeoptions value nosniff key referrerpolicy value noreferrer key stricttransportsecurity value maxage includeSubDomains key NULL value NULL Thansk for merging the websocket branch into the main May I ask is there a websocket client built in I am load testing lwan using wrk load test Sending requests on connections However the number of outstanding incoming requests is limited by the number of IO threads and cant go over it I kept a counter to track this info I thought coroutine support in lwan will allow for more requests to be sent than the number of IO threads Wonder if I am missing something Thanks Peter Is it possible in a current implementation of coroutines to wrap the callbackstyle functions and to use them from coroutines Is it the corodefer function only for free some internal stuff At the moment there are two init functions lwaninit lwaninitwithconfig As a sidenote the naming convention of these functions is somewhat confusing The first function implicitly reads from a lwan configuration file with the same name as the binary being run The second allows you to pass a configuration struct and therefore should allow for not needing a configuration file to be present Unfortunately using lwaninitwithconfig does not escape the need for a configuration file Lwan still requires a minimal config file when using this function roughly listener Ideally using lwaninitwithconfig should escape any need for a configuration file Perhaps a configuration file if one is present should still be honored though I am unsure if thats actually preferable but it certainly should not be required It looks like the specific culprit here is trysetupwithconfig reproduced below for ease c static void trysetupfromconfigstruct lwan l const struct lwanconfig config if setupfromconfigl configconfigfilepath if configconfigfilepath lwanstatuscriticalCould not read config file s configconfigfilepath quiet key might have changed value lwanstatusinitl I am hoping this can be modified such that if config defaultconfig it skips the check for the config file path Does that sound reasonable Are there any assumptions I am making which mean this needs to be done in a different way or that this cannot be done at all