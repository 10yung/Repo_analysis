Given that PING before connection activation turns out to be useful across various usecases enabling and also disabling when using Lettuce to disable the handshake with RESP we should undeprecate pingBeforeActivateConnection See also Feature Request In Redis it is now possible to authenticate either using a simple password legacy or using a user password AUTH secret AUTH default secret See ACL documentation section in Redis Doc Is your feature request related to a problem Please describe No Describe the solution youd like Just support new features of Redis Describe alternatives youve considered No alternative Teachability Documentation Adoption Migration Strategy Adding new parameter to the auth method and URIs Obtain the client id Im running Spring Boot RELEASE with the default orgspringframeworkbootspringbootstarterdataredis dependency and Im observing this problem for quite a while now For all this time Lettuce was the underlying Redis client I created a redis message listener bean like so in my RedisConfiguration Bean RedisMessageListenerContainer redisMessageListenerContainerRedisConnectionFactory connectionFactory MessageListenerAdapter listener MessageListenerAdapter listener MessageListenerAdapter listener loggerinfoConfiguring redisMessageListenerContainer RedisMessageListenerContainer container new RedisMessageListenerContainer containersetConnectionFactoryconnectionFactory containeraddMessageListenerlistener new PatternTopicListener REDISCHANNEL containeraddMessageListenerlistener new PatternTopicListener REDISCHANNEL containeraddMessageListenerlistener new PatternTopicListener REDISCHANNEL return container After a couple of weeks sometimes months the listeners will all stop receiving messages over the channel they subscribed to Checking Redis itself tells me that Redis is still up and running and also the pubsub mechanism still works fine when using rediscli Only the java Redis clients seem to not receive anything anymore After restarting my application it works again Refer to for original impetus Currently Lettuce provides a RedisURI with a list of Sentinel nodes My request is there is a way to create a shared SentinelTopologyProvider that caches this list and addsremoves dynamically additional Sentinel nodes Example I connect with sentinel nodes but entire cluster is sentinel nodes In the background Lettuce would a After a delay seconds suggested by Redis Sentinel documents a refresh of all Sentinel nodes is made Additionally discovered ones are added lost ones sentinel reset are removed b Subscribe to the pubsub topic and watch for new sentinel nodes addedremoved Im assuming that information is available mp de brings up concerns of complexity and of security Obviously the former is inarguable though if it works like I think it would it would be no more complex than the standard masterreplica refresh As for security thats why its an option not required Implements Feature Request First of all Have you checked the docs GitHub issues or Stack Overflow whether someone else has already reported your issue Maybe the feature already exists Problem I call redisClientconnect If connection fail I get exception In some cases it is expected behaviour But my server can live without Redis So I dont want to kill server if Redis down I want to retry connection later in background By the way this is exactly how the rediscli works Solution Introduce a ClientOption allowDeferredConnection If true and connection cant be established at init then just left it in closed state isOpenfalse Reconnect later in background using ConnectionWatchdog A clear and concise description of what you want to happen Add any considered drawbacks Issue created in response to Bug Report Current Behavior Command timeout is ignored in period of adaptiveperiodic refresh Expected behaviorcode Command timeout should be respected in this state Environment Lettuce versions RELEASE Redis version Possible Solution I assume that refresh is blocking the eventloop and timeout can not be executed during this period Additional context Reproducer can be found here Feature Request Support for ACLs w Redis In worlds where multiple users exist we may want users to do perform different Redis operations We may also want to restrict them to specific keys This will help securityconscious users and enterprises restrict clients and users to the least amount of privilege required to perform their function With the planned implementation of ACLs in Redis ecosystem drivers should begin aligning to support this In Antirezs words When ACLs are useful You want to improve security by restricting access to commands and keys so that untrusted clients have no access and trusted clients have just the minimum access level to the database in order to perform the work needed For instance certain clients may just be able to execute readonly commands You want to improve operational safety so that processes or humans accessing Redis are not allowed because of software errors or manual mistakes to damage the data or the configuration For instance there is no reason for a worker that fetches delayed jobs from Redis to be able to call the FLUSHALL command Commands in Scope Currently w Redis Multiple Arguments for AUTH username and password ACL HELP provides help information listed below ACL LOAD Reload users from the ACL file ACL LIST Show user details in config file format ACL USERS List all the registered usernames ACL CAT category List available categories List commands inside category ACL SETUSER username acl rules Create or modify a user ACL DELUSER username Delete a list of users ACL GETUSER username Get the user details ACL GENPASS Generate a secure password ACL WHOAMI Return the current connection username Error Checking No Permissions when a user does not have permission to a command or key when error for commands or keys Username does not exist getuser deluser References 