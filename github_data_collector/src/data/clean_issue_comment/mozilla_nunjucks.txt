Im wondering if theres anyone with experience integrating templates with fusebox bundler Would there be any useful docs to point to Ive been working on a plugin to make with blocks precompile correctly and the current solution Ive had to end up with is essentially string replacing them to block statements with randomly generated names Id quite like to be able to just push my own WithNode into the parse tree and then compile it to a simple frame pushpop on either side of the body however extensions only have acess to preprocess and parse Could that change I was tempted to push a bunch of Literals to dump raw JS out to do this but it seemed unnecessarily hacky Jinja calls functions passed to template only once at render time Nunjucks seems to be doing so every frame function mapstylexy if Statefov x y return normal else return explored var maintem nunjucksrendermainhtml stylemapstyle HTML for y in range div styleheight px for x in range span stylemapstylexy xspanendfor div endfor If I put a breakpoint or even worse consolelog in mapstyle I can clearly see its being evaluated every frame flooding my browsers output The chokidar is an optional dependency yet it is on version which involves vulnerability of kindof package as follows ctorName in indexjs in kindof v allows external user input to overwrite certain internal attributes via a conflicting name as demonstrated by Hence a crafted payload can overwrite this builtin attribute to manipulate the type detection result Please upgrade the version to the latest Is it exists eslint plugin for njk files I want to lint my nunjucks templates When rendering a template string I am getting the error Code generation from strings disallowed for this context Is there a way to bypass the step where we compile the template into javascript I think thats where its failing and I do not need that step since all I have is simple String with some jinja expressions and in it Even renderForString throws this error Sometimes extName is string but sometimes extName is custom tag instance Seems like it is intended behaviour but how Why Summary Proposed change Update optional dependency chokidar from to This fixes the warning users get when installing warning nunjucks chokidar fsevents One of your dependencies needs to upgrade to fsevents v Proper nodejs v support No more fetching binaries from AWS smaller package size There are also performance improvements and fsevents no longer has to be built at install For more information see The API of v is the same as v except that dotfiles are no longer ignored by default I dont think this is relevant for nunjucks The minimum node version is bumped from v to v but im not sure if that matters considering v is no longer in maintenance Checklist Ive completed the checklist below to ensure I didnt forget anything This makes reviewing this PR as easy as possible for the maintainers And it gets this change released as soon as possible Proposed change helps towards purpose of this project Documentation is added updated to describe proposed change Tests are added updated to cover proposed change Changelog has an entry for proposed change if userfacing fix or feature Tick of items by replacing by x Summary Replace yargs with commander which is only used in binprecompile This PR does not break command interface because they have the same logic and options Both yargs and commander can implement the same options for bincompile but commander pulls in dependency while yargs pulls in dependencies directly and maybe many others indirectly It seems most users of nunjucks use it as an library not a cliprogram and they may not like many dependencies pulled in by yargs in their projects like me Checklist Ive completed the checklist below to ensure I didnt forget anything This makes reviewing this PR as easy as possible for the maintainers And it gets this change released as soon as possible X Proposed change helps towards purpose of this project X Documentation is added updated to describe proposed change X Tests are added updated to cover proposed change X Changelog has an entry for proposed change if userfacing fix or feature As the documentation states here you cannot do anything asynchronous inside a macro in fact it silently fails It would be really useful to be able to use async filters inside macros and it would provide a much more consistent user experience