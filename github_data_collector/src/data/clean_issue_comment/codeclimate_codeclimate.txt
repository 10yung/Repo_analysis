Only installs enabled images by default Closes Ive disabled the structure and duplication plugins in my codeclimateyml file however when running codeclimate enginesinstall those two plugins are still installed The eginesinstall command should not pull engine images that are disabled explicitly and will not be used codeclimateyml version plugins structure enabled false duplication enabled false checkstyle enabled true config checkstylexml docker images codeclimate REPOSITORY TAG IMAGE ID CREATED SIZE codeclimatecodeclimate latest d fbd cfd a days ago MB codeclimatecodeclimate ee c weeks ago MB codeclimate enginesinstall docker image pull output docker images codeclimate REPOSITORY TAG IMAGE ID CREATED SIZE codeclimatecodeclimate latest d fbd cfd a days ago MB codeclimatecodeclimatecheckstyle latest fec cdafcfac days ago MB codeclimatecodeclimate ee c weeks ago MB codeclimatecodeclimatestructure latest c b months ago GB codeclimatecodeclimateduplication latest fb d bb f months ago GB tldr This helps CodeClimate engines not need intimiate docker host knowledge which permits the usage of CodeClimate outside of dockerindocker setups In particular this permits for easily running CodeClimate checks in Gitlab while retaining Docker layer caching vastly improving the runtime of each build In contexts like selfhosted Gitlab we sometimes have a context where we have an invoking runner like Gitlab CI running the Docker executor which exposes the Docker socket to the running job so that the running job may invoke its own Docker jobs on the host Gitlabs toplevel job will set up some filesystem context builds mounted as a Docker volume in the Gitlab case Right now Gitlab can only support CodeClimate in a DockerinDocker runner because CodeClimate performs volume mounting for the individual engines via Dockers volume flag which mounts not the path from the invoking container but rather a path on the docker host This requires that the path passed to CodeClimate as the CODECLIMATECODE variable match the real host path and in the Gitlab CI case we dont want that so we have to hide the host with a DinD approach However this means that we also dont get any layer caching between jobs which makes running CodeClimate prohibitively expensive as all the engines etc have to be downloaded for each job By supporting Dockers volumesfrom mounting option we can instead tell the engines to inherit any mounts from the invoking orchestrator This permits CodeClimate to allow the toplevel context set up a Docker volume bind it to the orchestrator and then allow the orchestrator to pass that to invoked children This sidesteps the issue of the Engines needing to know the actual host path as long as the orchestrators code directory is mounted the children can just presume to use it asis To accomplish this we just a name the toplevel container and b pass that name via the CODECLIMATEORCHESTRATOR env var docker run interactive tty rm name codeclimateorchestrator env CODECLIMATEORCHESTRATORcodeclimateorchestrator env CODECLIMATECODEcode volume PWDcode volume varrundockersockvarrundockersock volume tmpcctmpcc codeclimatecodeclimatewrapped analyze In the baremetal case this doesnt change anything were mounting the real host path which then gets passed to the individual children mounted on the code mount While not immediately pertinent to the CodeClimate PR In Gitlab we can invoke the Gitlab codequality image like so yaml script CONTAINERIDdocker ps q f labelcomgitlabgitlabrunnerjobidCIJOBID BUILDSVOLUMEIDdocker inspect CONTAINERID format range Mounts if eq Destination CIBUILDSDIR Name end end SOURCECODEcodeCIPROJECTDIRCIBUILDSDIR docker run rm name codeclimateorchestratorCIJOBID env SOURCECODESOURCECODE env REPORTFILENAMEglcodequalityreportjson env CODECLIMATEIMAGEcodeclimatelatest env ORCHESTRATORIDcodeclimateorchestratorCIJOBID volume varrundockersockvarrundockersock volume BUILDSVOLUMEIDcode gitlabcodequalitylatest SOURCECODE Because this job must be executed in a context that is visible to Docker we can query Docker to get the current jobs container ID and from there get the volume ID mounted as CIBUILDSDIR We then volume mount that volume as code and specify code as the host location of our code to be evaluated The orchestrator will use the passed volume as code which is then passed onto the engine jobs allowing the entire process to run against an ephemeral Docker volume rather than requiring a known path on the host See Library Definitions on floworg and flowtyped s install command Hi First of all Im sorry if this isnt the right place to raise this issue but I found it a bit unclear as to where this type of request actually belongs If it belongs somewhere else please let me know and Ill raise it there Anyway The cppcheck engine has been updated recently most importantly IMO its now using cppcheck but the Docker image over at Docker Hub hasnt yet been updated Therefore Id like to request that the official image gets updated Thanks This seems similar to When running codeclimate analyze or just directly invoking docker in a project with any nodemodules folders the command hangs for a while usually in my case just over seconds before actually starting analysis If we do any of the following the analysis runs as speedily as expected Remove all nodemodules folder in the project Remove Read access from all nodemodules folders Mount empty directories to the nodemodules folder via docker flags eg bash docker run rm env CODECLIMATECODEPWD volume PWDcode volume varrundockersockvarrundockersock volume tmpcctmpcc this is the magic flag that fixes the issue volume codenodemodules codeclimatecodeclimate analyze nodemodules is in our excludepatterns setting in codeclimateyml and even if we wait for codeclimate to start with all the nodemodules folders intact the engines dont run on them but it seems the excluded files are still being scanned before any engines start up Some output Without cleaning up nodemodules docker run rm env CODECLIMATECODEPWD env CODECLIMATEDEBUG volume PWDcode volume varrundockersockvarrundockersock volume tmpcctmpcc codeclimatecodeclimate analyze I T INFO starting engine structure D T DEBUG configjson content seconds With cleaning up nodemodules by any method mentioned above docker run rm env CODECLIMATECODEPWD env CODECLIMATEDEBUG volume PWDcode volume varrundockersockvarrundockersock volume tmpcctmpcc volume codenodemodules codeclimatecodeclimate analyze I T INFO starting engine structure D T DEBUG configjson content second Moving forward codeclimate should probably slowly and iteratively enable the frozenstringliteral true magic comment throughout the source files Theres currently several uses of strings in a mutable way After this is done the StyleFrozenStringLiteralComment cop should be enabled Hi Were running code climate on a React project and we have noticed something If we have a stateless component that exceeds the allowed number of lines of code like jsx const SomeComponent return div dozens of lines of code div As expected we get a code smell saying Function SomeComponent has X lines of code exceeds allowed But if we change the code to the equivalent jsx const SomeComponent div dozens of lines of code div We dont get any code smell The same thing happens in regular es nonReact code Why is that Is it possible to fix this Thanks breaking this out from please add support to the nodesecurity plugin to configure preprocessors so that we can run nsp against yarnlock Error Message error CCCLIAnalyzeEngineFailure engine structure ran for seconds and was killed Description I am getting consistently a timeout after seconds of running codeclimate cli locally Seems like its attempting to download a HUGE collection of docker images and times out because of this I installed the app locally from the brew tap indicated on READMEmd of this repo What is the expected behavior Should I also manually install those images Might run out of disk space tho seems a bit strange Thanks Questions Is this an issue with codeclimatecom Nope using codeclimate CLI Is this an issue with a specific engine Nope using defaults Is this an issue with your Docker installation in general Nope Docker looks happy Are you invoking docker run codeclimatecodeclimate without other options No Are you having trouble using this project as a gem or not via Docker No Make sure your problem exists in the latest version of the CLI and any engines youre using the following commands will update everything followed the steps running latest and greatest Reproduce Include the exact command youre running CODECLIMATEDEBUG codeclimate analyze f html codeclimatehtml and its complete output I T INFO starting engine structure D T DEBUG configjson content enabledtrue channelstable includepaths migrations nodemonjson CHANGELOGmd Dockerfile knexfilejs READMEmd gitignore seeds prettierrc eslintrcjs dockercomposeyml codeclimatehtml gitlabciyml build envexample flowconfig data codeclimateyml src debug D T DEBUG docker run docker run name ccenginesstructurestableaa d f ee fda e cf bce c capdrop all label comcodeclimatelabel f b fa f ea f logdriver none memoryswap net none rm volume UsersmatiProjectskycproviderapicodero volume tmpcc a c b b bb configjsonro user memory codeclimatecodeclimatestructure D T DEBUG engine stderr Unable to find image codeclimatecodeclimatestructurelatest locally D T DEBUG engine stderr latest Pulling from codeclimatecodeclimatestructure attempts to download a loooooooooooooooooooong list of images which obviously times out error CCCLIAnalyzeEngineFailure engine structure ran for seconds and was killed D T DEBUG backtrace usrsrcapplibccanalyzerraisingcontainerlistenerrb in finished usrsrcapplibccanalyzercompositecontainerlistenerrb in block in finished usrsrcapplibccanalyzercompositecontainerlistenerrb in each usrsrcapplibccanalyzercompositecontainerlistenerrb in finished usrsrcapplibccanalyzerbridgerb in block levels in run usrsrcapplibccanalyzerformattersformatterrb in enginerunning usrsrcapplibccanalyzerbridgerb in block in run usrsrcapplibccanalyzerbridgerb in each usrsrcapplibccanalyzerbridgerb in run usrsrcapplibccclianalyzerb in run usrsrcapplibccclicommandrb in execute usrsrcapplibccclirunnerrb in run usrsrcapplibccclirunnerrb in run usrsrcappbincodeclimate in main Indicate what you expected to happen and what happened instead Expected Analysis to run and be captured in a nicely formatted html file Received timeout s Include your operating system how you run Docker eg Docker Machine and the version of Docker youre using Mac OS High Sierra Docker mac client Include the output of the following commands uname a Darwin MatisMBPfritzbox Darwin Kernel Version Thu Jun PDT rootxnu RELEASEX x docker version Client Version ce API version Go version go Git commit e fc a Built Tue Aug OSArch darwinamd Experimental false Server Engine Version ce API version minimum version Go version go Git commit e fc a Built Tue Aug OSArch linuxamd Experimental true env grep DOCKER 