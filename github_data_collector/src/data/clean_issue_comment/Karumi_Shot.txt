I want to run yours plugin I do gradlew executeScreenshotTests Precord But get some errors Task presentationdownloadScreenshots Pulling screenshots from your connected devices Task presentationexecuteScreenshotTests FAILED Saving screenshots FAILURE Build failed with an exception What went wrong Execution failed for task presentationexecuteScreenshotTests javaioFileNotFoundException UsersivanAndroidStudioProjectsandroidclientpresentationscreenshotsscreenshotsdefaultcomkgprojectpresentationRegressSuitetestdumpjson No such file or directory But I found this Json at zip archive screenshotbundlezip What I should do to avoid this error Thanks in advance Version of the library comkarumishot Expected behaviour Recording screenshots on Windows with Nexus Android connected via ADB over WIFI Actual behaviour The task gradlew executeScreenshotTests Precord takes the screenshots pulls and saves them and the report but the process finishes with Execution failed for task appexecuteScreenshotTests javaioIOException Unable to delete file C app screenshots screenshotsdefault metadataxml The same task works fine on Linux Ubuntu Nexus ADB over WIFI The same task works fine using USB connection Nexus Win The same task works fine with Samsung Galaxy Note ADB over Wifi Win Steps to reproduce execute command on Windows in AndroidStudio Terminal or PowerShell tested on Nexus with android targetSdkVersion minSdkVersion custom testInstrumentationRunner public class ScreenshotAndroidJunitRunner extends AndroidJUnitRunner Override public void onCreateBundle arguments ScreenshotRunneronCreatethis arguments superonCreatearguments Override public void finishint resultCode Bundle results ScreenshotRunneronDestroy superfinishresultCode results shot gradle settings shot appId myAppId instrumentationTestTask connectedDebugAndroidTest packageTestApkTask packageDebugAndroidTest Test class LargeTest RunWithAndroidJUnit class public class FirstEspressoTest Rule public ActivityTestRuleMainActivity mActivityRule new ActivityTestRuleMainActivityclass Test public void settingsArePresent throws InterruptedException Threadsleep ui interaction onViewwithIdRidactionsettings performclick take screenshot TakeScreenshotUtiltakeScreenshotsettingsArePresent mActivityRulegetActivity check result Context targetContext InstrumentationRegistrygetTargetContext onViewwithTexttargetContextgetResourcesgetStringRstringactionsettings checkmatchesViewMatchersisDisplayed TakeScreenshotUtil class public class TakeScreenshotUtil public static void takeScreenshotString name Activity activity throws InterruptedException Threadsleep LogiTaking screenshot of activitygetLocalClassName named name InstrumentationRegistrygetInstrumentationwaitForIdleSync ScreenshotsnapActivityactivityrecord I can not delete the file metadataxml manually when AndroidStudio is open I tried to run the command from PowerShell with AndroidStudio closed but I get the same error Version of the library shot with facebooks screenshot testing plugin with gradle Id like Shot to tell me if it finds some reference images that are not being used while running it When you decide to rename your tests it often leaves some orphan screenshots so I think its great if Shot displayed a warning in that situation Expected behaviour Show a fallback image when there is no reference image to compare with in the HTML report Actual behaviour When the reference image is missing we are showing a broken link in the HTML report Steps to reproduce Create a new screenshot test in your application and run screenshot tests with shot by executing gradle executeScreenshotTests The HTML report will show a broken link like the image below ignore the gray rectangles slice Version of the library Our current implementation compares the recorded screenshots used as a baseline and the new one taken from the device using a pixelperfect strategy We should provide a config value we can use to compare the screenshots letting the user consider two screenshots as the same even if some pixels are not the same This is the code we should modify Id count the number of different pixels as a percentage before considering the comparison as a failure The tolerance value should be easily configured from the buildgradle file The current implementation of the reporting system is using Freemarker to render the HTML template shown to the user as a result As the support for Scala is not so good we need to migrate the templates to Scalate Cover the image comparison implementation using real images and improve unit tests written for the main class named Shot Integration tests will be hard to implement but we should at list write unit tests 