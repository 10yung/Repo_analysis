This project is deprecated Try We actively develop it and it uses indented pug syntax instead of ugly tagtag Hello I know that the package is deprecated but our production code depends on it So the thing is that your code mutates the original coffeescript module and this affects the other code that depends on the original module coffeeloader for webpack gets broken in my case This PR fixes the issue by making coffeereact clone the CS module and then mutating it to keep the original untouched Could you please merge this in and publish a fixed version to the npm Newer version of coffeescript compiler generates sourcemap files with extension jsmap instead of map Certain toolchains also expect sourcemap files with jsmap extension It would be nice to follow the behavior of coffeescript compiler Running this from the command line I can pass the m flag and it will produce a source map eg cjsx cm will produce both the js file and the source map file However running this in a node in fact Jest context I want to do const coffeereact requirecoffeereact var compiled coffeereactcompilesrc bare true map true And have complied have both the compiled JS code and the source map I want to do this so I can write the source map to the file system for later use At the moment putting the map true option in this context seems to have no effect Im not sure if this is possible Or if not perhaps this is a feature request Given unclosedcjsx html div div div Running sh cjsx unclosedcjsx Yields sh SyntaxError Unexpected end of input unclosed CJSXEL With no line numbers For comparison the latest Babelpowered jsx yields sh Unterminated JSX contents div div div Probably related to jsdfcoffeereact now has a Chat Room on Gitter jsdf has just created a chat room You can visit it here This pullrequest adds this badge to your READMEmd Gitter If my aim is a little off please let me know Happy chatting PS Click here if you would prefer not to receive automatic pullrequests from Gitter in future The following code div fx bdiv generates an error at compile time It compiles fine using babel and div fxdiv compiles just fine As another less minimal example div labelt audience bindStatename updateName compiles but then produces Generated by CoffeeScript function ReactcreateElementdiv label taudience bindState true State true name true me true updateName true e true callthis which makes no sense When using tabs for indentation code like this Text stylestyleswelcome Welcome to React Native Text compiles to ReactcreateElementText style styleswelcome t t t tWelcome to React Native which messes up the layout stylecolor xfff seems pretty natural as js allows xfff I like that notation better than using a string fff There wouldnt be a time when youd give color a single pixel value ie color px would never happen so it should be safe Actually to use this notation of passing a number as a color youd have to enforce always using digits as you wouldnt know the difference between xfff and x fff samplecoffee class Button render super paperbutton classNameruibutton ruiformcontrol onClickbuttonClickedtextpaperbutton is translated to samplejs Generated by CoffeeScript var Button bind functionfn me return function return fnapplyme arguments Button function function Button thisrender bindthisrender this Buttonprototyperender function return Buttonsuperrendercallthis ReactcreateElementpaper button className ruibutton ruiformcontrol onClick thisbuttonClicked text return Button Note that the ReactcreateElement doesnt give the right output 