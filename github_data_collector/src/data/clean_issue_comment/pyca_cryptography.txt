 This is a proof of concept that makes the setuppy detect the names of the OpenSSL libraries to use rather than relying on CRYPTOGRAPHYWINDOWSLINKLEGACYOPENSSL being set I wanted to get an idea of whether this is something that might be worth finishing off considering that x support is going away in It might be useful for backporting to if that happens I dont know whether we need to worry about the fact that this could change behaviour in environments where both the new and legacy libraries exist but the newer libraries are broken in some way In this situation cryptography will either build successfully but now against the legacy libraries or the build will fail and with errors about the legacy libraries rather than the new libraries If this is a concern then I think an environment variable would need to be set to allow detection of the library to use in which case this change might not be worthwhile This is a RequestForComments implementation of verifying X certificate against set of intermediate CA certificates and set of trusted CA certificates It provides the following API certificateverifyintermediates trustedroots checkcallback If a trusted chain cannot be built NoValidTrustChain exception is raised Otherwise the method returns list of trust chains lists of Certificate objects each starting with self and ending in one of trustedroots The interface is an attempt to get the best of the new and the old worlds Go verify OpenSSL verify The goal is to balance between principles do not provide unsafe defaults and do not make The Right Thing too complicated Differently from Go the method Takes no verification options in arguments as the former can be arbitrarily complex Any additional checks must be done in the callback Does not by default trust to any system trust roots requiring the caller to pass them explicitly Note does cryptography provide an easy way for the user to do so if needed like OpenSSLs SSLCTXsetdefaultverifypaths Differently from OpenSSL the method Requires to pass the singlecertificate verification callback not just providing possibility to call X STORECTXsetverifycb The callback receives the full chain to which the checked certificate belongs and the index of the latter in the chain not the fat context like int verifycallbackint ok X STORECTX ctx Remaining tasks which should be done Understand what more testing is necessary and write corresponding tests Update the documentation Provide example callbacks which would probably in addition to the default callback check KUEKU extensions perform CRLOCSP checks Additions are pure Python and do not depend on any backend but quickly looking I have not seen a way to implement the method in x baseCertificate So I have put it the quickanddirty way into hazmatbackendsopensslx Certificate which is probably not the way it should be done Closes I want to have custom extension handler to read and write values for custom OID With the current implementation its a bit hard to do extension handlers are registered in the encodeasn py in a constant So I thought it would be great to have the possibility to subclass a Backend class and override handler in the subclass I am not very familiar with the source code of cryptography so the solution proposed maybe not the best one It also introduces two more hash lookups Please tell if the solution does not fit somehow Manylinux image got released some time ago One of things it brings is support for x architectures Cryptography is using Travis CI so two things can be joined and used to generate wheel files for aarch and ppc le architectures Amount of software installed to be able to run pip install cryptography would be cut Also install times would be nicer published in shows this library is a fantastic choice for symmetric crypto tasks but at the time was a bit confusing for asymmetric crypto Have the identified issues already been resolved Wycheproof just landed a bunch of new vectors We need to add tests for them testvectorsaeadaessivcmactestjson testvectorsaegis Ltestjson testvectorsaegis testjson testvectorsaegis testjson testvectorsdsa sha p testjson x testvectorsdsa sha testjson testvectorsdsa sha p testjson x testvectorsdsa sha testjson testvectorsdsa sha p testjson x testvectorsdsa sha testjson testvectorsdsa sha p testjson x testvectorsdsa sha testjson testvectorsecdsabrainpoolP r sha p testjson testvectorsecdsabrainpoolP r sha p testjson testvectorsecdsabrainpoolP r sha p testjson testvectorsecdsabrainpoolP r sha p testjson testvectorsecdsabrainpoolP r sha p testjson testvectorsecdsasecp r sha p testjson testvectorsecdsasecp r sha p testjson x testvectorsecdsasecp r sha testjson x testvectorsecdsasecp r sha testjson x testvectorsecdsasecp r sha testjson testvectorsecdsasecp r sha p testjson testvectorsecdsasecp k sha p testjson x testvectorsecdsasecp k sha testjson x testvectorsecdsasecp k sha testjson testvectorsecdsasecp k sha p testjson testvectorsecdsasecp r sha p testjson x testvectorsecdsasecp r sha testjson x testvectorsecdsasecp r sha testjson testvectorsecdsasecp r sha p testjson testvectorsecdsasecp r sha p testjson x testvectorsecdsasecp r sha testjson x testvectorsecdsasecp r sha testjson testvectorsecdsasecp r sha p testjson x testvectorsecdsasecp r sha testjson testvectorsecdsasecp r sha p testjson testvectorsed testjson testvectorsgmactestjson testvectorshkdfsha testjson testvectorshkdfsha testjson testvectorshkdfsha testjson testvectorshkdfsha testjson testvectorsprimalitytestjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaep sha mgf sha testjson testvectorsrsaoaepmisctestjson testvectorsrsapkcs testjson testvectorsrsapkcs testjson testvectorsrsapkcs testjson testvectorsrsapss sha mgf testjson testvectorsrsapss sha mgf testjson testvectorsrsasiggenmisctestjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson x testvectorsrsasignature sha testjson testvectorsvmac testjson testvectorsvmac testjson testvectorsx asntestjson testvectorsx jwktestjson testvectorsx pemtestjson testvectorsx asntestjson testvectorsx jwktestjson testvectorsx pemtestjson x testvectorsx testjson testvectorsxchacha poly testjson cryptography fails to build with compiler errors when compiled against an OpenSSL that has Certificate Transparency CT disabled Build warningserror summary Several error use of undeclared identifier SCT Several error use of undeclared identifier CTLOG Several warning implicit declaration of function SCT is invalid in C Final error buildtempfreebsd CURRENTamd opensslc error unknown type name ctlogentrytypet static ctlogentrytypet cffidSCTgetlogentrytypeSCT const x Reproduction Environment Operating System FreeBSD CURRENT r amd FreeBSD clang version tagsRELEASE final based on LLVM OpenSSL dfreebsd Sep via ports with CT option disabled configure openssldirusrlocalopenssl prefixusrlocal noct Python cryptography PyPI sdist Full build log attached cryptography noCTbuildfailurelog Im trying to create a code showing Elliptic Curve Diffie Hellman key agreement with more than two parties Im stuck after exchanging a key I get a shared key which is a bytes value Is it possible to load this sharedkey as a new public key Here is the beginning of my work python from cryptographyhazmatprimitivesasymmetric import ec from cryptographyhazmatbackends import defaultbackend alice ecgenerateprivatekeyecSECP R defaultbackend bob ecgenerateprivatekeyecSECP R defaultbackend carol ecgenerateprivatekeyecSECP R defaultbackend Bob computes gab gab and sends it to Carol ab bobexchangeecECDH alicepublickey Carol computes gabc gabc and uses it as her secret abc carolexchangeecECDH ab will fail as ab is not a public key object Carol computes gbc gbc and sends it to Alice bc carolexchangeecECDH bobpublickey Alice computes gbca gbca gabc and uses it as her secret bca aliceexchangeecECDH bc Alice computes gca gca and sends it to Bob ca carolexchangeecECDH alicepublickey Bob computes gcab gcab gabc and uses it as his secret cab bobexchangeecECDH ca printabc bca printbca cab printabc cab printabc I think Im missing something very simple python aesgcmpy total cost time AFALG total cost time cryptography Thanks to Python socketsendmsgafalg function