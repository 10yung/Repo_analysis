This functionality didnt make sense and makes it difficult as a drop in replacement Could this be reprogrammed to mimic the legacy gzip starenv bash echo hello testtxt starenv bash gzip f testtxt ls testtxtgz starenv bash gzip f testtxtgz ls gzip testtxtgz already has gz suffix unchanged testtxtgz starenv bash pigz f testtxtgz ls testtxtgzgz Tested on Fedora and CentOS The compilers are OSprovided on Fedora on CentOS The IPP version tested is update which can be obtained from Intel freely The zlib I used here is Steps to reproduce the error build the patched zlib with the instructions here set LDLIBRARYPATH to make pigz dnf install pigz link to the patched zlib ldd which pigz to confirm the link use pigz to compress some file no error at this stage try to decompress the compressed file will give error like invalid compressed dataformat violated gzip t or corrupted invalid deflate data invalid stored block lengths pigz t The same error happens on sourcebuilt pigz The zlib linking type to IPP shared static did not change the behavior However Ive tried that said patched zlib do works with other libraries such as HDF These tools are serial anyway Im not sure where the problem comes in Avoid using pigz with the IPP patched zlib for now Improve makefile compatibility Such as building ipk for openwrt Signedoffby kenwong mdzzxm scom Hello on my server Xeon Suse Linux Enterprise HP ProLiant DL Gen When I use pigz and specify the number of threads in this example zcat AmP R fastqgz pigz p outfastqgz I get this error out of times pigz abort internal threads error Strace log says write T nTCACCGTGCCAGACTAGAGTCAAGCTCAAC read Ml v Ce Q f F pigz abort internal threads error write NB H VGYBGX write ATGCCTCGTCATCTAATTAGTGACGCGCATGA write NB H VGYBGX EPIPE Broken pipe SIGPIPE sisignoSIGPIPE sicodeSIUSER sipid siuid rtsigprocmaskSIGBLOCK HUP INT PIPE TERM XCPU XFSZ HUP INT PIPE TERM XCPU XFSZ rtsigprocmaskSIGSETMASK HUP INT PIPE TERM XCPU XFSZ NULL rtsigactionSIGPIPE sahandlerSIGDFL samask PIPE saflagsSARESTORERSARESTART sarestorer x fb a sahandler x bc c beb c samask HUP INT PIPE TERM XCPU XFSZ saflagsSARESTORER sarestorer x fb a rtsigprocmaskSIGBLOCK RTMIN RT HUP INT PIPE TERM XCPU XFSZ getpid gettid tgkill SIGPIPE rtsigprocmaskSIGSETMASK HUP INT PIPE TERM XCPU XFSZ NULL rtsigreturnmask EPIPE Broken pipe SIGPIPE sisignoSIGPIPE sicodeSITKILL sipid siuid killed by SIGPIPE If I dont specify the number of threads it runs like a charm Also a different ziptool like pbzip doesnt have any problem at all Prime runs without any problems for h no bad sector detected ram has been tested and is okay I think there is no hardwarefailure Also on another server same Software and OS different hardware there is no problem at all Can you help me with this issue Thanks Are there any tests that go along with pigz Wed be interested in using pigz as a library in our application slicerorg and would want to support Windows Linux and Mac with a uniform build system that supports native compilers eg Visual Studio not mingw CMake has been our goto solution for that so it would be great if pigz had CMake support Has anyone looked into CMake for pigz before Added a define block for AIX to call bit version of open and stat Fixes issue on AIX to compress files larger than G the opnestat calls need to be replaced with stat open I will try to attach a pull request with a fix When running pigz without a terminal for example via crontab and a compressed file already exists its not possible for pigz to ask the user to overwrite or not This causes pigz to fail with an error message pigz abort write error on txtgz Inappropriate ioctl for device It would be more useful with something along the lines of pigz abort compressed file exists txtgz or perhaps better pigz skipping txt compressed file exists txtgz It would also be useful to have a nooverwrite option pigz Fedora x I tried to compile pigz on windows mingw and successfully done it with some effort but the solution turned out to be simple implement fsync using windows native functions I attach patch file so you can check it out Hope you will find it useful There are two versions of fsync one using FlushFileBuffers and second using commit You can choose whichever you find appropriate there seem to be no difference in performance Files are somewhat excessively commented so should be no problem reading them Both versions of fsync work well I tested them on over k files of all sizes from B to GiB Compressed tested with gzip and pigz and decompressed to make sure they are not corrupted and they were fine Hope you will like it and use it in future release pigz winfsync diffgz 