 The repo is still using Swift should upgrade to Swift or Its pretty excellent and its just begging for a Reactstyle API Few can make this happen joshaber Any interest joshaber This ones a biggie sorry I wanted to get the demo working in decent shape before PR What weve got is Add Switch element for UISwitch Make Button lay itself out correctly Make Button respect more control states Use isEqualToAttributedString when possible Add contentInset and scrollIndicatorInsets to TableView Spruce up the demo with a fancy navigation controller The changes seemed to have exposed layout bugs in other chunks of the framework so well tackle those later The layout of elements in the table header is wonky when you switch between demo screens and on first appearance Curious if you have ideas about the causes there joshaber We call reloadData every time we diff a TableView and that kills our selection Ill work on this one just putting it here as a reminder Current thinking is we need to make Element equatable and not call reloadData unless our row data has actually changed Thoughts joshaber Sometimes it would be nice to be able to customize a Components behavior from outside after the render For example I want to set some scroll view insets after a component is realized and subclassing component seems like a bit much What do you think Now that protocols can have concrete implementations we should revisit whether Few can be designed around value types and protocols sparkles The Input element does not seem to follow the childAlignmentStretch property I have attached a screenshot Im bad at designing but these colors are used for clarity of the issue wink and the example view code I believe my code is right as the Welcome Label and the bottom border views are stretched BUT please let me know if it is something with just my code innocent Screenshot duh ios simulator screen shot jun pm Code even more duh swift return ViewbackgroundColor UIColorlightGrayColor justificationFlexStart childAlignmentCenter directionColumn children ViewbackgroundColor UIColororangeColor childAlignmentStretch directionColumn width marginEdgesleft right bottom top paddingEdgesleft right bottom top children Label Label in let l LabelWelcome textColor UIColordarkGrayColor font UIFontboldSystemFontOfSize marginEdgesleft right bottom top lselfAlignmentCenter return l Input Email InputtextColor UIColorblackColor placeholder Email keyboardType UIKeyboardTypeEmailAddress returnKeyType UIReturnKeyTypeNext borderStyle UITextBorderStyleRoundedRect marginEdgesleft right bottom top Border View ViewbackgroundColor UIColordarkGrayColor height marginEdgesleft right bottom top Input Password InputtextColor UIColorblackColor placeholder Password returnKeyType UIReturnKeyTypeDone secure true Border View ViewbackgroundColor UIColordarkGrayColor height marginEdgesleft right bottom top We use flexbox for layout but different terminology We should use the same so its easy to share existing knowledge and resources Thisll obviously require changes to SwiftBox Currently each component rerenders itself when its state changes This works but its less than ideal Consider a component A which renders a component B If both update their state in the same runloop component B will be rendered twice once by itself because of its state update and once when component A rerenders itself We should start each rerender from the topmost dirty component I dont think there are any correctness problems here but its certainly less performant 