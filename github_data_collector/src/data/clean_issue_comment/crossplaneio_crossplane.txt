 Thank you for helping to improve Crossplane Please be sure to search for open issues before raising a new one We use issues for bug reports and feature requests Please find us at for questions support and discussion What problem are you facing Please tell us a little about your use case its okay if its hypothetical Leading with this context helps frame the feature request so we can ensure we implement it sensibly As part of the template stacks work we want to migrate the appyaml to a file named stackyaml The stackyaml lives at the root of the stack resource folder Or for stacks which are just git repositories it lives at the root of the repository How could Crossplane help solve your problem Let us know how you think Crossplane could help with your use case Well want to migrate this in a backwardscompatible way so the phases will be something like this Support both appyaml and stackyaml in the stack manager but change all of tooling to generate stackyaml and change all of the documentation to talk about stackyaml instead of appyaml Change all of our stacks to use stackyaml instead of appyaml and to build them into the right location in the stack Notify all of the stack owners that we know of that the migration is occurring Eventually stop supporting appyaml Thank you for helping to improve Crossplane Please be sure to search for open issues before raising a new one We use issues for bug reports and feature requests Please find us at for questions support and discussion What problem are you facing Please tell us a little about your use case its okay if its hypothetical Leading with this context helps frame the feature request so we can ensure we implement it sensibly As part of developing template stacks well want to have automated integration testing set up Testing should be happening as part of all of the work that were doing but Im opening a separate ticket to track the initial set up because the research and initial spinup work could take longer than the incremental improvements to the tests How could Crossplane help solve your problem Let us know how you think Crossplane could help with your use case Theres already a manual integration test but well want it to be as automated as possible This could mean using one of the existing endtoend testing harnesses that we have in the repo It could also involve using the kudo test framework Other suggested lines of research Test API Servers controllerruntime Test clusters sigtesting Thank you for helping to improve Crossplane Please be sure to search for open issues before raising a new one We use issues for bug reports and feature requests Please find us at for questions support and discussion What problem are you facing Please tell us a little about your use case its okay if its hypothetical Leading with this context helps frame the feature request so we can ensure we implement it sensibly As part of creating the template stack controller weve integrated an early version of the controller with the stack manager However wed like to have the controller be more robust and hardened before we consider it ready for general consumption Currently a user must explicitly enable it by hand if they want to use it How could Crossplane help solve your problem Let us know how you think Crossplane could help with your use case Im going to start by dropping a bunch of miscellaneous items in here and then we can reorganize them or split them out in the future There is only ever one template rendering per CR duplicate events should be deduped Error reporting is complete enough to be helpful for debugging errors should be logged and recorded Helm chart should support a parameter for enabling template stack support when the chart is installed Parentchild relationships are tracked so that users and garbage collection can discover the relationships RBAC permissions are set correctly Parameterize helper images where used as suggested in this comment Template stack controller failure should not affect stack manager failure Template stack controller should gracefully handle a CRD not existing yet Use directories other than usrshare as the helm engine working directories Helper image sizes are optimized we may move this into a separate issue For example by using alpine instead of ubuntu Improve code coverage for the template stacks code to test coverage Improve management of image id tags in a way that works well for local testing and in production latest with no image pull policy sets the pull policy to Always which isnt good for local development I was noticing these in the logs recently when integration testing locally E reflectorgo githubcomcrossplaneiocrossplaneworkpkgpkgmodk sioclientgov fbdaa c d toolscachereflectorgo Failed to list unstructuredUnstructured the server could not find the requested resource The template stack controller should support running in a hosted crossplane control cluster which has special considerations The template stack controllers render phase should run with appropriate permissions Any jobs which are created should also run with appropriate permissions Thank you for helping to improve Crossplane Please be sure to search for open issues before raising a new one We use issues for bug reports and feature requests Please find us at for questions support and discussion What problem are you facing Please tell us a little about your use case its okay if its hypothetical Leading with this context helps frame the feature request so we can ensure we implement it sensibly In we worked on creating a first version of the shared template stack controller in an experimental state As we reviewed and discussed the changes we realized our existing frameworks for determining whether a changeset is ready for merging didnt quite cover the situation we were in because we were intentionally merging something which is experimental and which must be explicitly enabled by someone who knows they want to use it How could Crossplane help solve your problem Let us know how you think Crossplane could help with your use case We should think more about how we want to handle new unproven experimental features or systems that were developing Some considerations would include Whats the definition of done How do we get them merged without them potentially affecting existing functionality How do we explain experimental things to users to set expectations properly What sort of test coverage do we want in this type of situation Thank you for helping to improve Crossplane Please be sure to search for open issues before raising a new one We use issues for bug reports and feature requests Please find us at for questions support and discussion What problem are you facing Please tell us a little about your use case its okay if its hypothetical Leading with this context helps frame the feature request so we can ensure we implement it sensibly We want to have the template stacks experience evolve over time while also having a solid plan for what the First Edition of it will do and look like This is a continuation of a discussion around a gist the discussion was happening on the gist and over email I want to move it into an issue so its easier for others to follow along How could Crossplane help solve your problem Let us know how you think Crossplane could help with your use case Heres a gist where the experience is being sketched and discussed The result of this issue is that the discussion will be settled down and therell be a plan Related links This is related to a separate discussion about how to incorporate the kustomize engine into the template stacks experience that discussion explores options for configuring the transformation of values from a CR to a rendered kustomization What problem are you facing was talking with jbw displague and rathpc and would like to add a targeted variant of gcpcredentialssh to stackgcpminimal that accept commandline variables or env variables for PROJECTID that a skips all the prompts if PROJECTID is specified and b only outputs the creds JSON so we can provide easy bootstrap instructions so users can curl bash gcpcredentialssh from an EasyGCP getting started page copy paste the output of this curl bash command into the Provider Secret Note that stackgcpminimal is designed to be forkedcopied so infra owners can create a custom infra configs with more or less resources created as part of their standard configs which may in turn require more of less service permissions that the generated creds needs to have access to Keeping the creds init script secret service account creation permissions granting in the stackgcpminimal repo is a more maintainable pattern that also simplifies the customization UX when forkingcopying How could Crossplane help solve your problem Add a targeted variant of gcpcredentialssh to stackgcpminimal above Thank you for helping to improve Crossplane Please be sure to search for open issues before raising a new one We use issues for bug reports and feature requests Please find us at for questions support and discussion What happened Helm enforces validation of the resources before deploying them and that means sending them over to clusters validation endpoint and fetching the result back However in Kubernetes and above versions DeploymentSpec object has a few fields typed IntOrString which results in the following validation which is not supported by Kubernetes before yaml maxUnavailable anyOf type integer type string xkubernetesintorstring true Please let us know what behaviour you expected and how Crossplane diverged from that behaviour How can we reproduce it Get a or Kubernetes cluster and try to install Crossplane with Helm Or you can just run the following to see the error helm template crossplanealphacrossplane The following works just fine skipping the validation helm validatefalse template crossplanealphacrossplane So you can do the following helm validatefalse template crossplanealphacrossplane kubectl validatefalse n crossplanesystem apply f Helm works OK kubectl allows disabling the validation if youd like but Helm does not provide a flag for disabling the validation Help us to reproduce your bug as succinctly and precisely as possible Artifacts such as example manifests or a script that triggers the issue are highly appreciated What environment did it happen in Crossplane version Helm Kubernetes Include at least the version or commit of Crossplane you were running Consider also including your Cloud provider or hardware configuration Kubernetes version use kubectl version Kubernetes distribution eg Tectonic GKE OpenShift OS eg from etcosrelease Kernel eg uname a Description of your changes Adds more context to the Stacks Guide about the KubernetesApplication resource being created by the Wordpress Stack The additional text here helps to explain the mention of KubernetesApplication that immediately follows these changes Get the name of the Kubernetes Application resource which is the top level workload definiton for our Wordpress instance Related to Checklist Please run through the below readiness checklist The first two items are relevant to every Crossplane pull request I have Run make reviewable to ensure this PR is ready for review Ensured this PR contains a neat self documenting set of commits Updated any relevant documentation and examples Reported all new error conditions into the log or as an event as appropriate For more about what we believe makes a pull request complete see our definition of done documentation examples definition of done Thank you for helping to improve Crossplane Please be sure to search for open issues before raising a new one We use issues for bug reports and feature requests Please find us at for questions support and discussion What problem are you facing Please tell us a little about your use case its okay if its hypothetical Leading with this context helps frame the feature request so we can ensure we implement it sensibly We have an encountered a few recent situations where API docs have not been regenerated when a new type has been added or an existing one has been updated How could Crossplane help solve your problem Let us know how you think Crossplane could help with your use case We should check that generating API docs does not cause a dirty branch in our Jenkins PR pipelines when we run checkdiff Environment roles which can be easily identified by their crossplaneioscope environment labels should not be confused with the crossplaneadmin role lukeweber pointed out that the current assignments of environment scope labels includes crossplaneadmin The crossplaneadmin clusterrole should not have the environment scope label While included as an example this was not the intention of This PR changes the crossplaneioscope label used for the crossplaneadmin to system and updates the design doc to match the intention Briefly describe what this pull request does Be sure to direct your reviewers attention to anything that needs special consideration We love pull requests that resolve an open Crossplane issue If yours does you can uncomment the below line to indicate which issue your PR fixes for example Fixes Fixes How has this code been tested This scope is not used by aggregation so it does not affect any generated roles Only discoverability has changed kubectl get clusterrole l crossplaneioscopeenvironment NAME AGE crossplaneenvadmin m crossplaneenvedit m crossplaneenvview m kubectl get clusterrole l crossplaneioscopesystem NAME AGE crossplaneadmin m Before reviewers can be confident in the correctness of a pull request it needs to tested and shown to be correct In this section briefly describe the testing that has already been done or which is planned Checklist Please run through the below readiness checklist The first two items are relevant to every Crossplane pull request I have Run make reviewable to ensure this PR is ready for review Ensured this PR contains a neat self documenting set of commits Updated any relevant documentation and examples Reported all new error conditions into the log or as an event as appropriate For more about what we believe makes a pull request complete see our definition of done documentation examples definition of done 