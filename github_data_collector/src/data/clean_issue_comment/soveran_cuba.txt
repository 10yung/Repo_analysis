Hi Would make sense to allow empty strings as a default param value While it makes sense to prevent empty strings from being captured from a request the current implementation discards both empty params and empty defaults as they pass through the control flow See Would you be open to a pull request addressing this or would you guys be interested in tackling this small change Background ScenarioUsecase I have a PORO JSON presenterserializer wrapping an instance of data object which together return validation errors Id like Cuba to pass the empty strings to my presenterobject and could do so if I could set empty strings as my default Currently Id have to have a second on true block that Id rather not have cluttering up my code This fixes an issue where settings are added to Cubasettings after inheriting from Cuba are not picked up by the child classes The problem is described in issue If a setting does not exist settings are looked up in the settings Hash of the parent class using Hashdefaultproc The settings Hash is still deepcloned so settings are still overridable Cubasettings state Procnew ok class A Cuba end just does not work some with singletons lambdas methods etc I solved the problem for myself with this plugin which does implement a configuration with inheritance on class level Cubaplugin CubaApiConfig Cuba state Procnew ok class A Cuba end and the value of can be changed later and A will see the change as well Cubaplugin CubaApiConfig Cuba state ok Cubasettings state ok class A Cuba end Cuba state notok Cubasettings state notok p A state notok p Asettings state ok making a deep copy during class instantiation is also tricky since order of when the class gets defined does matter class A Cuba end Cubasettings state ok class B Cuba end p Asettings state nil p Bsettings state ok although A and B are essentially the same class but were defined at different states of Cuba having those A and B in their own files and require them makes it even harder to understand what is going on require a Cubasettings state ok require b p Asettings state nil p Bsettings state ok again using the cubyapiconfig plugin makes the code more intuitive require a Cuba state ok require b p A state ok p B state ok since intuition varies from person to person I would like to know other opinions BTW I would happy to prepare pull request to get something like cubyapiconfig into Cuba and deprecate the current settings finally need to mention that I do like this little cuba framework a lot I am about to switch my railsapi server to cubacubaapi and the new setup is so much easier to understand I can understand the whole lot including cuba by reading half an hour code 