Perhaps mainly for myself who keeps forgetting PR notoriously lacked support in poloniusparser for the new facts used in liveness computations This PR mainly implements move error reporting It also No longer assumes child is transitive ie actually maps some ancestor relation children are now direct children ie childDaughter Mother but not childDaughter Grandmother This means it is now safe to simplify the generation code in Rust This closes the Polonius part of Does the elaboration of move paths mentioned by Niko Removes the strictly unnecessary imprecision with regards to move paths addressed in the review of my previous PR The principle is this compute the transitive closure of move paths a move of x moves all of its children an initialisation initialises its children and an access to x accesses all of its children Note that this should only compute closures over actually accessed paths as they are generated from Rust use this to figure out which move paths are maybe initialised used in dropliveness maybe moved after being initialised use those to compute definitely initialised paths by simply doing definitelyinitialised maybeinitialised maybemoved use those to compute move errors moveerrors accessedat definitelyinitialised Left to figure out x Should we elaborate path accesses to include their children My gut feeling is both no and doesnt make any difference x How should we report move errors from Polonius Left to do x Verify that move error reporting actually works that small thing x Verify that the revamped more precise move path tracking doesnt break the dropliveness part of regionliveat Writing at least some tests Document everything in the book this would also address Of course all of this massively steps on the toes of PR This is more or less blocked by which would make it easier to report back move errors This PR starts describing the input relations preliveness More details about the liveness relations and atoms will be coming later Marked WIP as Im unsure about a couple places specifically and could use feedback in general r nikomatsakis Polonius should emit events for Rustcs midlevel profiling at least capturing how long it spends in the various calculation phases I propose something like this poloniusrefactor Green is new red is removed bold is a module and regular font is a fact Facts are grouped based on the inputs they require to compute As mentioned in this review comment the function generating the varmaybeinitializedonexit relation needs to be documented Currently the each Poloniu Algorithms compute method performs initialisation analysis then liveness calculations and then the actual Polonius implementation This means a lot of code duplication and in the case of the hybrid algorithm that all of this happens twice I suggest the following for a minimal modification to the current setup the publicly visible compute method still takes the gigantonormous AllFacts for now internally these facts are split up into internal data structures consumed by the various compute methods the calls initiating initialisation and liveness calculations happen in outputcompute