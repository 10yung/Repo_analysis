Because we attach new wrapped context to support translations the other resources dimensions colors that were trying to get from the Resources rely on initial Resources and in result we get noncorrect values if androidconfigChangesorientation attribute is applied for the Activity in Manifestxml Also the onConfigurationChanged method isnt called for any custom views Changes Override all remaining methods in PhilologyResources and used the baseResources field to get all values except text resources Create CustomView and update the sample project to test configuration changes How to test Run the sample project Observe text is changing on text view at the bottom on orientation change Describe the bug When reading a custom attribute for a custom view component we are using the TypedArray returned by ContextobtainStyledAttributes This function is invoked on a PhilologyContextWrapper provided by Philologywrap The current issue with this TypedArray instance is that its getString function does not return a translated text Thats why we need the ViewTransformerreword where we basically obtain the resource id of the String and reapply it on the view And thats why the android framework also fails to set a translated text from a custom attributeweve added the support in but its still handle this manually This is handled currently by transformer package implementations for various components To Reproduce Replace this reword implementation with private fun TextViewrewordattributeSet AttributeSet StringRes val text contextobtainStyledAttributesattributeSet intArrayOfandroidRattrtextgetString StringRes val hint contextobtainStyledAttributesattributeSet intArrayOfandroidRattrhintgetString if textisNotEmpty setTexttext if hintisNotEmpty setHinthint Run the sample and see the TextView components missing translations Expected behavior The ideal case would be to help the framework use a correct TypedArray instance containing translated strings This would help us get rid of ViewTransformerreword but this is the ideal case In order to ease the life of other teams would be nice to have a lint rule that will prohibit the usage of the TypedArraygetString letting devs now that it will not return a translated text This should be a temporary solution while we search for a real fix Library version v Describe the bug ActivitygetTitle method returns untranslated label we set in androidlabel attribute in the AndroidManifestxml and we cannot intercept it The workaround is to read label of the activity directly from the AndroidManifestxml and after that request string by this id from repository ActivityInfo activityInfo getPackageManagergetActivityInfo getComponentName PackageManagerGETMETADATA String label getStringactivityInfolabelRes Expected behavior ActivitygetTitle method should return translated label Library version Describe the bug Updating Appcompat library to on the app side stops Philology intercepting the text value on devices with API levels Since the problem doesnt reproduce on versions bellow rc most likely it is caused by the d commit diff with the description Turned out to be a gnarly framework bug on API levels The test was failing due to the application Resources seemingly being updated when it shouldnt have been Worked around by always using applyOverrideConfiguration on those API levels to force a new Resources instance To Reproduce Update the Appcompat by changing DependenciesAPPCOMPATVERSION to or change implementation DependenciesappCompat to implementation androidxappcompatappcompat just for the sample module Run the sample app Expected behavior Philology should replace the text in the sample app based on the device locale Actual behavior Philology doesnt replace the text in the sample app LogsScreenshots img src width Library version How is the performance of this library Is it fast Does it increase screen rendering time I am an Android developer from China What is the use of this project for the application I have used the method to set only the String files of different countries Forgive me for not posting an app on Google Play