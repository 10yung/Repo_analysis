A check was missing in the code and after adding it everything working fine What kind of change does this PR introduce check one with x x Bugfix Feature Code style update formatting local variables Refactoring no functional changes no api changes Build related changes CI related changes Other Please describe What is the current behavior You can also link to an open issue here What is the new behavior Functionality is working as expected Does this PR introduce a breaking change check one with x Yes x No If this PR contains a breaking change please describe the impact and migration path for existing applications Other information Below code treegrid template not considering ngxdatatablecolumn nameName isTreeColumn true width treeLevelIndent ngtemplate ngxdatatabletreetoggle lettreecellContext button disabled treetreeStatus disabled clicktreeonTreeAction span ngIftreetreeStatus loading span span ngIftreetreeStatus collapsed span span ngIftreetreeStatus expanded span span ngIftreetreeStatus disabled span button ngtemplate Im submitting a check one with x bug report search github for a similar issue or PR before submitting Current behavior Describe how the bug manifests Expected behavior Describe what the behavior would be without the bug Reproduction of the problem If the current behavior is a bug or you can illustrate your feature request better with an example please provide the steps to reproduce and if possible a minimal demo of the problem via or similar you can use this template as a starting point What is the motivation use case for changing the behavior Describe the motivation or the concrete use case Please tell us about your environment Operating system IDE package manager HTTP server Table version Angular version Browser all Chrome XX Firefox XX IE XX Safari XX Mobile Chrome XX Android XX Web Browser iOS XX Safari iOS XX UIWebView iOS XX WKWebView All browsers where this could be reproduced Language all TypeScript XX ES ES Im submitting a check one with x x bug report search github for a similar issue or PR before submitting feature request support request Please do not submit support request here post on Stackoverflow or Gitter Current behavior allRowsSelected in datatablecomponentts contains only conditions related with default values without displayCheck like below get allRowsSelected boolean let allRowsSelected thisrows thisselected thisselectedlength thisrowslength if thisselectAllRowsOnPage const indexes thisbodyComponentindexes const rowsOnPage indexeslast indexesfirst allRowsSelected thisselectedlength rowsOnPage return thisselected thisrows thisrowslength allRowsSelected also onHeaderSelect doesnt contain any limit from displayCheck and it doesnt use allRowsSelected onHeaderSelectevent any void if thisselectAllRowsOnPage before we splice chk if we currently have all selected const first thisbodyComponentindexesfirst const last thisbodyComponentindexeslast const allSelected thisselectedlength last first remove all existing either way thisselected do the opposite here if allSelected thisselectedpushthisinternalRowsslicefirst last else before we splice chk if we currently have all selected const allSelected thisselectedlength thisrowslength remove all existing either way thisselected do the opposite here if allSelected thisselectedpushthisrows thisselectemit selected thisselected Expected behavior allRowsSelected should contain also conditions related with displayCheck function So if we have rows on page but we can mark as checked only of them limited by displayCheck allRowsSelected will be set on true if all elements are checked not What is the motivation use case for changing the behavior Describe the motivation or the concrete use case Please tell us about your environment Operating system IDE package manager HTTP server Table version Angular version Browser all Language all Im submitting a check one with x x bug report search github for a similar issue or PR before submitting feature request support request Please do not submit support request here post on Stackoverflow or Gitter Current behavior The header can sometimes allow to select all rows when the checkbox selection mode is on I guess The issue is that select is an alreadyexisting event name used for text selection That means that if I select some text inside a header cell this will trigger a select event as if Ive checked that checkbox That means all rows are selected and the table emits a select event Expected behavior There should not be any conflict between the two events Reproduction of the problem See When selecting the text inside the input in the header three events are logged into the console What is the motivation use case for changing the behavior Not having a bug Please tell us about your environment Not relevant but MacOS Chrome latest Table version Angular version but the behavior should be the same everywhere its a standard Browser all Chrome XX Firefox XX IE XX Safari XX Mobile Chrome XX Android XX Web Browser iOS XX Safari iOS XX UIWebView iOS XX WKWebView Only tested on Chrome but the behavior should be the same everywhere its a standard Language all TypeScript XX ES ES TypeScript Workaround for now wrapping the content of each header cell with a selecteventpreventDefault Changing the event name seems to be the best option for the long term but introduces a breaking change Im submitting a bug report Current behavior I am using ngxdatatable component in a host component in which the columns are provided through an input property like this ngxdatatable bmTableV ngIftableProcessing rows sliceRowData headerHeight headerHeight columns formatedColumns columnMode columnMode cssClasses cssClasses rowIdentity rowIdentity rowHeight rowHeight scrollbarH scrollbarH scrollbarV scrollbarV selectCheck selectCheck displayCheck displayCheck selected selected selectonSelectevent selectionType selectionType sorts sorts sortType sortType trackByProp trackByProp rowClass rowClass virtualization virtualization messages messages activateactiveEventevent resizecolumnResizedevent summaryPosition summaryPosition summaryRow summaryRow summaryHeight rowHeight scrollscrollEventevent ngxdatatablerowdetail ngIfrowDetail detailRow ngtemplate letrowrow letexpandedexpanded ngxdatatablerowdetailtemplate ngcontainer ngTemplateOutletrowDetailtemplate context implicit row ngcontainer ngtemplate ngxdatatablerowdetail ngxdatatable I am passing the column cellTemplate in the input property with the columns property and the template is put in the same host element below above code like this ngtemplate letcolumncolumn letrowrow letvaluevalue defaultCell appbmtablev defaultcell column column row rowappbmtablev defaultcell ngtemplate ngtemplate letcolumncolumn letrowrow letvaluevalue letindexrowIndex customCheckboxTemp bmslider isChecked row selected inputId tableChecktableIdindex labelVal inputVal changeCheckappendSelectItemseventrowcolumnindex isDisabled row disableCheck columnisDisabledbmslider ngtemplate When the page loads for the first time everything works normally with the correct updated values inside the host element and the table But when I apply some filter and change the table inputs with new values and inline with the change detection mechanism the new values are reflected fine but when triggering the slider event which is within the cell template it is using the old host component reference and the values within this context of host is outdated and not matching the current values When slider used to mark rows selectable or not param e param row param column param rowIndex appendSelectCheckboxItemse row column rowIndex ifechecked row disableCheck ifthisselectCheck undefined ifthisselectCheckrow column rowIndex echecked false Here the this takes initial default values and not the latest values coz of which the event emitter get observers which otherwise in the component has observers Subscriber thisselectEventemitselected row value echecked Expected behavior this host component reference should have latest values and not the outdated ones so that the event emitter works as expected Also as seen in the bodycellcomponentts file this Viewchild has static true and not set as false Is this the issue as it is statically resolved ViewChildcellTemplate read ViewContainerRef static true cellTemplate ViewContainerRef What is the motivation use case for changing the behavior Describe the motivation or the concrete use case Please tell us about your environment MACOS Table version Angular version Browser all Language all TypeScript XX ES ES Im submitting a check one with x X bug report search github for a similar issue or PR before submitting feature request support request Please do not submit support request here post on Stackoverflow or Gitter Current behavior By default when you set selectionType cell the entire row highlights when the bootstrap theme is applied This is because the bootstrap theme doesnt have the same notcellselection theming logic as the material theme Expected behavior Only the selected cell should be highlighted Reproduction of the problem but change the theme to bootstrap What is the motivation use case for changing the behavior Bootstrap cell selection should still work as expected Please tell us about your environment not applicable Table version Angular version Browser all Chrome XX Firefox XX IE XX Safari XX Mobile Chrome XX Android XX Web Browser iOS XX Safari iOS XX UIWebView iOS XX WKWebView all Language all TypeScript XX ES ES all Im submitting a check one with x X bug report search github for a similar issue or PR before submitting feature request support request Please do not submit support request here post on Stackoverflow or Gitter Current behavior Click on a cell Hover over to the cell to the left or right of it no activate event gets logged to the console Expected behavior Activate on a cell level should occur regardless of whether or not the activate is in the same row Reproduction of the problem Click on a cell Hover over to the cell to the left or right of it no activate event gets logged to the console What is the motivation use case for changing the behavior I would like to know whenever the user enters any cell via mouse Please tell us about your environment latest Chrome Table version Check whether this is still an issue in the most recent table version Angular version Check whether this is still an issue in the most recent Angular version Browser all Chrome XX Firefox XX IE XX Safari XX Mobile Chrome XX Android XX Web Browser iOS XX Safari iOS XX UIWebView iOS XX WKWebView All browsers where this could be reproduced Language all TypeScript XX ES ES Im submitting a check one with x bug report search github for a similar issue or PR before submitting feature request x support request Please do not submit support request here post on Stackoverflow or Gitter Current behavior variable is not accessible Expected behavior variable is accessible in the template What is the motivation use case for changing the behavior Im trying to get access of an external variable distance inside of a cell template Therefore Im looking for a way to tell the template the variable like this I know that this is not working but how can I achieve this Unfortunately it is no option to enhance the objects of filteredSkaterlist with the objects of distaneList ngxdatatable rows filteredSkaterlist ngcontainer ngForlet distance of distaneList ngxdatatablecolumn nameDistance propdistance ngtemplate letskaterrow letdistancedistance ngxdatatablecelltemplate distance json ngtemplate ngxdatatablecolumn ngcontainer ngxdatatable Please tell us about your environment MacOS Chrome Angular ngxdatatable latest release Table version latest Angular version Browser all Chrome XX Firefox XX IE XX Safari XX Mobile Chrome XX Android XX Web Browser iOS XX Safari iOS XX UIWebView iOS XX WKWebView Chrome Language all TypeScript XX ES ES all Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details What kind of change does this PR introduce check one with x x Bugfix Feature Code style update formatting local variables Refactoring no functional changes no api changes Build related changes CI related changes Other Please describe What is the current behavior You can also link to an open issue here Virtual grid with variable height rows is not repainted after scrolling or repaint is delayed What is the new behavior Repaintingrefreshing happens right away Does this PR introduce a breaking change check one with x Yes x No If this PR contains a breaking change please describe the impact and migration path for existing applications Other information This is very old bug I hope you can accept this fix soon I need to patch the lib on the fly for the time being to make grid refresh itself 