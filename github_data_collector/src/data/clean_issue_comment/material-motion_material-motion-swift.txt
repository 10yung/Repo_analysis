 It will help a lot Hi just curious if you are working on making this compile with Xcode Thanks There are two classes of problem with regards to resistance perimeters Velocity Tossing velocity beyond the perimeter should be affected accordingly Tossing within the perimeter should have no effect on the velocity until the object moves beyond the perimeter It should not be possible to move beyond the perimeters maximum length Velocity If we drag beyond a resistance perimeter and release in a direction moving away from the resistance perimeter then we should reduce the velocity accordingly The current behavior allows you to toss an object while extended beyond the resistance perimeter with full velocity resulting in the view noticeably extending past the resistance perimeter One option Minimize the finalVelocity if were beyond the resistance perimeter This isnt perfect and doesnt solve the case where were within the perimeter and toss quickly towards the perimeter Extending beyond the perimeter We should never be able to move past the perimeters maximum length This is possible if we only apply resistance to the draggable part of a tossable interaction for example One option introduce an intermediary property in Tossable that we write both draggable and spring to and then connect a rubber banded stream from that property to the output property This may be the most promising solution Its currently a MotionObservableBool It may be easier to use if its a reactive property internally This may require exposing AggregateMotionStates state property This may require that our transition context subclass UIPercentDrivenInteractiveTransition We should validate the various animateAlongsideTransition APIs as part of this task Doing so will require building a transition that includes both traditional UIKit code and a customiz Material Motion transition We dont support applying operators to pathbased animations driven by Core Animation If ArcMove is able to calculate its path on initialization then it should set this to the tween sub interactions path value during initialization Some interactions connect properties to subinteractions or other values eg ArcMoves runtimeconnectarcMovefrom from to to to tweenpath This only needs to be done once Closure of this task involves auditing our interactions for any runtimeconnect invocations and ensuring that if theyre connecting subinteractions together that were only doing so once We do not currently support ObjectiveC for Material Motion We can provide certain levels of interop with the Swift library though this will need to be done on a case by case basis Some easy wins Supporting transitionController in ObjectiveC for customizing the transition that should be used This would still require that transitions be written in Swift While implementing the visualize operator I encountered problems with some interactions behaving incorrectly when multiple subscriptions were made to the upstream The original implementation looked like so swift let visualizationSubscription selfasStreamtoStringdedupesubscribeToValue value in labeltext prefix stringValue highlightalpha UIViewanimatewithDuration highlightalpha let subscription selfasStreamsubscribeAndForwardto observer return visualizationSubscriptionunsubscribe subscriptionunsubscribe But this caused the contextual transition demo to behave incorrectly