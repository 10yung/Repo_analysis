 and enable html video conversion in the pyplot animation jupyter notebook Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend the size of the entire state velocities are ignored This is a common use case and dramatically simplifies the wiring Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Remove deprecated method CalcFrameGeometricJacobianExpressedInWorld and instead use CalcJacobianSpatialVelocity This issue follows deprecation of other Jacobian methods from issue and PR With the new VelocityImplicit Integrator Euler integrator we will have at least four implementations of NewtonRaphson iterations in our implicit integrators This PR Moves the convergence check in each iteration which was written based on Hairer from each implicit integrator into the parent class ImplicitIntegrator In other words it refactors the easiest component the convergence check and makes the convergence behavior consistent between the integrators It will also simplify PR by moving the logic for this convergence check to a common location Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend PR changed how friction coefficients are to be defined for drake applications Currently when parsing SDF files we hijack the surfacefrictionode values In URDF files we use the drakecompliance tag to get friction youngsmodulus and dissipation Those have all been supplanted by the new uniform paradigm We need to deprecate and then remove this dependency Because its in parsing its not a straightforward compiletime deprecation Itll have to be onetime warnings when parsing files Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend MBP offered an interface that would set hydroelastic properties after the fact and attempt to push it through to SceneGraph This was a shortterm stop gap effort However There are now mechanisms to set these either during parsing or registration It doesnt work with SceneGraph in its present state And there are no invocations of this API any longer Well simply remove it updating the documentation where appropriate Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Previously we had AddSoftHydroelasticProperties and AddRigidHydroelasticProperties to facilitate setting valid properties without having to worry about the nitty gritty This does the same for more general contact material properties and then makes use of it throughout the code base Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Was added to Anzu due to build issues in Drake SeanCurtisTRI if you could elaborate Wed like to bring it back into Drake and add more features so its comparable to RenderEngineVtk namely adding color and label images The main benefit is that we believe the purely OpenGL based renderer will be a faster implementation compared to those with VTK We will also be able to better profile the OpenGL calls and benchmark it against the other render engines to confirm this theory Currently there is no proper way to configure the lighting in our rendering engines A temporary method to configure the position of the single default light is in but is not intended for public usage Things that we could configure include Number of lights Source Type for example point vs directional vs spot vs area Anchor for example scene vs camera Position Color Attenuation Focal Point Available options for lights in VTKbased render engines can be seen in Render Engine API should be generic enough to handle different implementations of Lights eg not all rendering systems support area lights cc SeanCurtisTRI 