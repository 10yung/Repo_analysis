Added support jsonobjectgetn setn deln for non nullterminated strgins Please review it Thanks It would be worth to add a Swig template to generate interfaces in other languages Enable pedantic strict prototypes and treat warnings as errors Resolve several cases of function declaration isn t a prototype Werrorstrictprototypes Resolve format p expects argument of type void but argument has type const jsont aka const struct jsont Werrorformat Use it when loading a JSON number and jsonstrtoint returns ERANGE and the number is positive Only falling back on the new type as a last resort only before issuing a parsing error ensure minimal breakage in backward compatibility Add the ossfuzz badge in README to see bugserrors found by the OSSFuzz integration at a glance I build my current projects with both gcc and clang and have a pile of docker images running so far builds in a test setup The clang memorysanitize build is very unhappy with jansson The compile flags that Im using are CC clang CFLAGS g Og fsanitizememory fPIE fnoomitframepointer fsanitizememorytrackorigins CPP clang E CPPFLAGS fsanitizememory fPIE fnoomitframepointer fsanitizememorytrackorigins I also use Wall Wformat Wnovariadicmacros Wcastalign Wnovla Wextra but those are more or less optional I believe that just running make check with the clang memsan build will show the errors I made a minimal test application that uses the jansson library and just loads the JSON Server Name ChrisDev from a string and that shows the problem Ive been playing with the config files for building jansson to try to get a memsan build but I fear Im missing something obvious this is way outside my experience Specifically this log output caused by not passing o flag to clang in conftestc and it fails with main not found which is a accurate but not desired checking how to run the C preprocessor clang configure error in homechrismzjansson configure error C preprocessor clang fails sanity check I posted some basic code fixes to the google groups that allow me to use the jansson source directly in my project and get it to compile Sadly the couple of fixes I made dont allow memsan to actually run down in the lexer theres an error that I dont really want to have to fix Im hoping someone who actually understands the code already can do that Running it inside my code I get the following problem Uninitialized bytes in interceptormemchr at offset inside x WARNING MemorySanitizer useofuninitializedvalue x e a d in parseobject buildschrislistenerListenerjanssonsrcloadc if memchrkey len x e bc in parsevalue buildschrislistenerListenerjanssonsrcloadc x e e in parsejson buildschrislistenerListenerjanssonsrcloadc x e cb in jsonloadf buildschrislistenerListenerjanssonsrcloadc xf a d in digiflexConfigurationFileLoadConfigdigiflexConfiguration bool buildschrislistenerListenercommonConfigurationFilecpp x eb in UpdateRedisConfigchar buildschrislistenerListenermaincpp x eb c in main buildschrislistenerListenermaincpp x fbca f in libcstartmain lib libcso x xdaa d in start codelistenerlistenernew xdaa d Uninitialized value was created by a heap allocation xdb e in malloc llvmprojectcompilerrtlibmsanmsaninterceptorscpp x e e in jsonpmalloc buildschrislistenerListenerjanssonsrcmemoryc x e b in lexscanstring buildschrislistenerListenerjanssonsrcloadc x e d in lexscan buildschrislistenerListenerjanssonsrcloadc x e a in parseobject buildschrislistenerListenerjanssonsrcloadc x e bc in parsevalue buildschrislistenerListenerjanssonsrcloadc x e e in parsejson buildschrislistenerListenerjanssonsrcloadc x e cb in jsonloadf buildschrislistenerListenerjanssonsrcloadc xf a d in digiflexConfigurationFileLoadConfigdigiflexConfiguration bool buildschrislistenerListenercommonConfigurationFilecpp x eb in UpdateRedisConfigchar buildschrislistenerListenermaincpp x eb c in main buildschrislistenerListenermaincpp x fbca f in libcstartmain lib libcso x SUMMARY MemorySanitizer useofuninitializedvalue buildschrislistenerListenerjanssonsrcloadc in parseobject The code changes required to build in clang from email Modern C demands that printing pointers be done only after casting to void static int loopcheckhashtablet parents const jsont json char key sizet keysize snprintfkey keysize p json snprintfkey keysize p void json This is only used in the conditionally defined code that follows so should be moved in with it static uint t buftouint char data if definedWIN definedUSEURANDOM You print one buffer into a samesize buffer with extra context and while it might be valid the compiler complains because it doesnt know that I went with added context others might prefer TEXTWITHCONTEXT or whatever define JSONERRORTEXTLENGTH define JSONERRORCONTEXTLENGTH define JSONERRORSOURCELENGTH Then used in the code static void errorsetjsonerrort error const lext lex ifsavedtext savedtext iflexsavedtextlength snprintfmsgwithcontext JSONERRORTEXTLENGTH snprintfmsgwithcontext JSONERRORTEXTLENGTH JSONERRORCONTEXTLENGTH s near s msgtext savedtext msgwithcontext JSONERRORTEXTLENGTH msgwithcontext JSONERRORTEXTLENGTH JSONERRORCONTEXTLENGTH result msgwithcontext static void errorsetjsonerrort error const lext lex result msgtext else snprintfmsgwithcontext JSONERRORTEXTLENGTH snprintfmsgwithcontext JSONERRORTEXTLENGTH JSONERRORCONTEXTLENGTH s near end of file msgtext msgwithcontext JSONERRORTEXTLENGTH msgwithcontext JSONERRORTEXTLENGTH JSONERRORCONTEXTLENGTH result msgwithcontext I thought I could reopen a bug but apparently not This is from Ive run into this now compiling jansson under the xtensaesp elf compiler Its because Wformattruncation is passed in from the upper level Makefile I also threw in a warning about an unused function is a decent article about handling the issue Although personally Id be inclined to use pragma GCC diagnostic push pragma GCC diagnostic ignored Wformattruncation pragma GCC diagnostic pop Error message redacted componentsjanssonhashtableseedc warning buftouint defined but not used Wunusedfunction static uint t buftouint char data CC buildjanssonloado CC buildfreemodbusportportserialo redacted componentsjanssonloadc In function errorset redacted componentsjanssonloadc error near directive output may be truncated writing bytes into a region of size between and Werrorformattruncation s near s msgtext savedtext redacted componentsjanssonloadc note snprintf output or more bytes assuming into a destination of size snprintfmsgwithcontext JSONERRORTEXTLENGTH s near s msgtext savedtext redacted componentsjanssonloadc error near end of file directive output may be truncated writing bytes into a region of size between and Werrorformattruncation s near end of file msgtext redacted componentsjanssonloadc note snprintf output between and bytes into a destination of size snprintfmsgwithcontext JSONERRORTEXTLENGTH s near end of file msgtext cc some warnings being treated as errors make loado Error make componentjanssonbuild Error make Waiting for unfinished jobs I use the Jansson packv in keil v The hardware I use is stm F ZET When I create a project without ucosIIEmbedded operating system jansson works well But jansson in ucosII task there is some problem of jsondumps when integer is in Json c int mainvoid hardware init NVICPriorityGroupConfigNVICPriorityGroup delayinit LEDInit uartinit before enter ucos char a id dataCode data apstamode physicalequipmentid ssid wifiname passwd wifipassword ip jsont jsondata jsonerrort jsonerror jsondata jsonloadschara JSONDECODEANY jsonerror char out out jsondumpsjsondata JSONENCODEANY printf r n before enter ucos r n out r ns r n r n out freeout jsondecrefjsondata enter ucosII OSInit OSTaskCreatestarttaskvoid OSSTK STARTTASKSTK STARTSTKSIZE STARTTASKPRIO creat start task OSStart start task create other tasks void starttaskvoid pdata OSCPUSR cpusr pdata pdata OSENTERCRITICAL ENTERCRITICAL OSTaskCreateled taskvoid OSSTK LED TASKSTK LED STKSIZE LED TASKPRIO OSTaskCreateled taskvoid OSSTK LED TASKSTK LED STKSIZE LED TASKPRIO OSTaskSuspendSTARTTASKPRIO suspend starttask OSEXITCRITICAL EXITCRITICAL LED task void led taskvoid pdata after enter ucos char a id dataCode data apstamode physicalequipmentid ssid wifiname passwd wifipassword ip jsont jsondata jsonerrort jsonerror jsondata jsonloadschara JSONDECODEANY jsonerror char out out jsondumpsjsondata JSONENCODEANY printf r n after enter ucos r n out r ns r n r n out freeout jsondecrefjsondata while LED delayms LED delayms The output is like that json before enter ucos out id dataCode data ip ssid wifiname apstamode physicalequipmentid passwd wifipassword after enter ucos out id dataCode data ip ssid wifiname apstamode physicalequipmentid passwd wifipassword Issue Without this pragma building with clang and Wall I get the following In file included from imapmboxeventc usrlocalcyruslibsincludejanssonh error unused function jsondecrefp WerrorWunusedfunction void jsondecrefpjsont json usrlocalcyruslibsincludejanssonh error unused function jsonerrorcode WerrorWunusedfunction static JSONINLINE enum jsonerrorcode jsonerrorcodeconst jsonerrort e usrlocalcyruslibsincludejanssonh error unused function jsonobjectset WerrorWunusedfunction int jsonobjectsetjsont object const char key jsont value usrlocalcyruslibsincludejanssonh error unused function jsonobjectsetnocheck WerrorWunusedfunction int jsonobjectsetnocheckjsont object const char key jsont value usrlocalcyruslibsincludejanssonh error unused function jsonobjectiterset WerrorWunusedfunction int jsonobjectitersetjsont object void iter jsont value usrlocalcyruslibsincludejanssonh error unused function jsonarrayset WerrorWunusedfunction int jsonarraysetjsont array sizet ind jsont value usrlocalcyruslibsincludejanssonh error unused function jsonarrayappend WerrorWunusedfunction int jsonarrayappendjsont array jsont value usrlocalcyruslibsincludejanssonh error unused function jsonarrayinsert WerrorWunusedfunction int jsonarrayinsertjsont array sizet ind jsont value And ditto everywhere else janssonh is included This patch has no effect on the code built but allows callers to turn on full warnings safely with clang