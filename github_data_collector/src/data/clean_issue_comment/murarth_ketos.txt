 ketos define x define x hello x Traceback In main define x execution error type error expected string found list define x hello Would something like this be planned to be added to ketos is related in the sense that letrec and define in this way would achieve lambda recursion as well I thought it might be fun to have a logo for the project Ill attach some ideas I had This pull request would add a basic time module The module provides two functions utctimestamp and localtimestamp that return the current time in UTC or your local timezone as the number of seconds since January st The module uses chronooffset to get the time in UTC and your local timezone and will add a dependency on chrono version If anyone would like to write a more complete time library I can help This module is currently an minimal implementation containing only what I need Im trying to create a function that returns a function that calls itself I tried this lisp define multo ex let f lambda n if n ex f n f println s multo But it doesnt work because the lambda cant refer to f inside the definition How do I achieve this I tried to specify a struct name as a field type ketos struct foo a string foo ketos struct bar b foo bar ketos new bar b new foo a fails Traceback In main lambda In system function new execution error type error for field b of struct bar expected foo found struct foo a fails ketos struct baz b struct baz ketos new baz b new foo a works baz b foo a works The error confused me for a while until I realized the type for all struct values is struct Could it allow you to specify a struct type for a field Also the definition for bar was accepted even though there is no such type foo every attempt to create a bar will fail to typecheck I was noodling around in the code and discovered that as far as I can tell the bytecode interpreter decodes the binary instructions to Instruction when a function is called not when the bytecode is loaded This means that every time a function is called it has to redecode all the instructions On a benchmark program fib implemented the dumb way on Linux AMD it spent about of the time in ketosbytecodeInstructiondecode the highest of any function as recorded by perf I havent successfully made it decode the bytecode and store the result only once yet but once I manage Ill post comparative benchmarks here The following code rust deriveClone Debug ForeignValue FromValueRef IntoValue struct example test u Gives the error error E wrong number of type arguments expected found omitted deriveClone Debug ForeignValue FromValueRef IntoValue The documentation tells you how to create doc comments but it is not clear what they are good for Maybe give a hint at how to use them use code documentation print documentation It might make sense to have a function help that prints the documentation like in Python It would not be terribly useful at the moment because it seems that the builtin functions and operators dont have docstrings Ive extracted Vim definition files to separate repo haulethvimketos to simplify installation and reduce amount of updates for Vim users I hope that this is ok I dont know what kind of example you want in the examples directory but here are a few simple programs Tower of Hanoi lisp define move n from to via cond n panic expected integer larger than n println Move disk a from a to a n from to else do move n from via to println Move disk a from a to a n from to move n via to from move L M R FizzBuzz lisp define fizzbuzz a b if a b do let divisibleby rem a divisibleby rem a cond and divisibleby divisibleby println FizzBuzz divisibleby println Fizz divisibleby println Buzz else println a a fizzbuzz a b fizzbuzz Extensible FizzBuzz lisp use list map define isdivisible a b rem a b define tags Fizz Buzz define evaluate i let finddesc lambda tag if isdivisible i first tag last tag desc format a map finddesc tags if desc format a i desc define fizzbuzz start end if start end do println a evaluate start fizzbuzz start end fizzbuzz 