While extending my knowledge of neural networks I implemented a neural network library in Javascript It has capabilities similar to ConvNetJS but both training and testing are x faster while still running in a single JS thread on the CPU I did not have time to prepare such nice demos as there are for ConvNetJS I guess you can use ConvNetJS for learning and experimenting and use my library when you want to train a specific network Also my library can load pretrained models from ConvNetJS JSON and Coffe coffemodel it is only kB The basic example provided here does not seem to work because the output was always Proof I tried changing this line var reward action into var reward action and got the same result which is Code Example START CODE var brain new deepqlearnBrain inputs possible outputs var state Mathrandom Mathrandom Mathrandom forvar k k k var action brainforwardstate returns index of chosen action var reward action brainbackward reward learning magic happens here state MathfloorMathrandom Mathrandom brainepsilontesttime dont make any more random choices brainlearning false get an optimal action from the learned policy var action brainforwardstate END CODE Should fix There is a problem with this line the shape of the input vector is basically hardcoded here when given to the networks forward function Which makes it all break apart in line Where we try to check for existence of those dimensions Please create type definitions for TypeScript I have tried to use ConvnetJS with x images however I have a problem with image display Can you help me please how can I predict the average value of an amount of data in an array For example i am use real currency using all the data in an array var balance How can I predict that the average balance is k and corresponds to of the total of all the array I was looking at some examples and in the below it can predict what will be the next number of the array in order of to var mydata var trainer new convnetjsSGDTrainernet learningrate momentum batchsize l decay var learn function for var j j j for var i i mydatalength d i var data mydataslicei i d var realvalue mydata i d var x new convnetjsVoldata trainertrainx realvalue var predictedvalues netforwardx consolelogdata data value realvalue consolelogprediction in learn stage is predictedvaluesw var predict function data var x new convnetjsVoldata var predictedvalue netforwardx return predictedvaluew learn var item consolelogpredicted value for item is predictitem is it possible to learn deeply to predict the average values of an array Thanks a lot for the help url at sixth paragraph But wait it looks like the network only assigned percent probability to this input being a and percent to it being a is it a get from corresponding picture If i run a deepqlearn regression times using brainvaluenettofromJSON I would expect the actions to improve I dont see any significant improvement which is leading me to believe that I am not using the store and reuse correctly Does anyone have this working var net declared outside global variable in window scope function start var layerdefs input layer of size x x all volumes are D layerdefspushtypeinput outsx outsy outdepth some fully connected layers layerdefspushtypefc numneurons activationrelu layerdefspushtypefc numneurons activationrelu a softmax classifier predicting probabilities for two classes layerdefspushtypesoftmax numclasses create a net out of it var net new convnetjsNet netmakeLayerslayerdefs the network always works on Vol elements These are essentially simple wrappers around lists but also contain gradients and dimensions line below will create a x x volume and fill it with and var x new convnetjsVol var x new convnetjsVol var probabilityvolume netforwardx consolelogprobability that x is class probabilityvolumew prints var trainer new convnetjsTrainernet learningrate l decay trainertrainx 