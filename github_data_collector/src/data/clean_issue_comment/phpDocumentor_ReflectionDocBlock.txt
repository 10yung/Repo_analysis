When an anonymous class is given to a context it is unable to resolve the classes of properties in the docblock even if they are imported By removing the error on the given line phpDocumentorReflectionCommon I was able to get it to function however it was still not resolving the namespace of the property Code sample I use the reflectiondockblock to extract types from properties defined on phpunit test cases Since PHPUnit implemented improvements in their type hints the type resolver fails to parse types for some properties arraystringarrayintstring seems to be an issue in particular An example test failure on my side Zalas PHPUnit Doubles Tests TestCase TestDoubles Inheritance InheritanceTesttestitinitialisesparentprivateproperties InvalidArgumentException PHPUnit Framework arraystringarrayintstring is not a valid Fqsen phpunitdoublesvendorphpdocumentorreflectioncommonsrcFqsenphp phpunitdoublesvendorphpdocumentortyperesolversrcFqsenResolverphp phpunitdoublesvendorphpdocumentortyperesolversrcFqsenResolverphp phpunitdoublesvendorphpdocumentortyperesolversrcTypeResolverphp phpunitdoublesvendorphpdocumentortyperesolversrcTypeResolverphp phpunitdoublessrcPhpDocumentorReflectionExtractorphp phpunitdoublessrcPhpDocumentorReflectionExtractorphp phpunitdoublessrcPhpDocumentorReflectionExtractorphp phpunitdoublessrcPhpDocumentorReflectionExtractorphp phpunitdoublessrcPhpDocumentorReflectionExtractorphp phpunitdoublessrcPhpDocumentorReflectionExtractorphp phpunitdoublessrcPhpDocumentorReflectionExtractorphp phpunitdoublessrcTestCaseDoublerphp phpunitdoublessrcTestCaseDoublerphp phpunitdoublessrcTestCaseTestDoublesphp in order to make conversion of existig Description to custom Description class easier eg new MyDescriptionClassorigionalDescriptiongetBodyTemplate origionalDescriptiongetTags implement custom tags which might want to allow or require this character in the tag body A leading square bracket might not be necessary for standard tags but StandardTagFactory allows registering or overriding of tag implementations which might want to accept this character right after the tag Is this really meant to be that way the render method of Description allows to pass a formatter to format a the tag but always encloses the result in braces Renders this description as a string where the provided formatter will format the tags in the expected string format public function renderFormatter formatter null string if formatter null formatter new PassthroughFormatter tags foreach thistags as tag tags formatterformattag return vsprintfthisbodyTemplate tags This would mean that some kind of reparsing is always needed to get rid of them Is it meant to be that way Somehow I think it would make more sense to add the braces inside the default formatter This way custom formatters could output whatever they want without having to deal with the braces again Edit I made this change By this change its easy to override the default DescriptionFactory without having to do a copy pasteimplementation override create in DescriptionFactory let parentcreate create a default Description and then create a custom description object using whats in the originally created This way its easy to overcome the behavior of always created in the standard Description output which I do not really would like to have there when I use the formatter to turn inline tags into markdown syntax When a tag body starts with a an exception is raised public function createstring tagLine TypeContext context null Tag if context context new TypeContext tagName tagBody thisextractTagPartstagLine if tagBody tagBody throw new InvalidArgumentException The tag tagLine does not seem to be wellformed please check it for errors return thiscreateTagtagBody tagName context Is there a reason for that We try to use some kind of markdown syntax in our project and the parser failes on a tag like see xxx yyy Is there a description somewhere where to hook in to do some preprocessing In the new version many things are declared final and it looks quite difficult to extend or I just have not found the right place to hook in method line fails to come back from parseTagBlock in DocBlockFactory togglecheckboxitem Toggle checkbox item method togglecheckboxitem However this doc block works minus the m at the end of the method name togglecheckboxitem Toggle checkbox item method togglecheckboxite Im still debugging what comes from the call below DocBlockFactory result key thistagFactorycreatetrimtagLine context as the tagLine goes in but null is returned If you have any ideas in the mean time that would be great I am using the latest release Thanks When parsing a docblock generated by I recently noticed how arguments would always get the type Void When rebuilding the docblock suddenly you have void foo everywhere Ill try to get some more insight in whats happening and a clear reproducable case but this report is to let you know in case I dont get around to it anymore method static Foo Bar bazarray context array will get this Method name method methodName category arguments array array name context type Void isStatic true returnType Compound description Description edit Think this is the problem from quick glance at least when NO type hint is provided It would not explain the problem with array context array like above When parsing multiple classes defined in a group only the first class keeps the fully qualified namespace php use My Namespace Foo Bar Will result in My Namespace Foo and Bar I am using this package in the open PHP language server which provides static analysis for any IDE through the open language server protocol One of these features is Go to Definition This is currently implemented for the actual PHP code through nikics great PHPParser where every node has a file startend offset so I can calculate which node the user clicked It would be nice to have this feature for types in docblock tags like var too but the tags dont have any startend offset data Would it be possible to add this