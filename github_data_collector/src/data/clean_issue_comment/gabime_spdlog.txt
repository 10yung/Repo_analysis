fmt library support compiletime format error checking using FMTSTRING can spdlog enable this spdlog has a formatter interface which one can implement to create custom formatters This is not needed however for most cases if one needs only a minor change or addition to the patternformatter Currently the patternformatter has a hardcoded switch in patternformatterhandleflag to create flagformatters by flagcharacter which isnt really extensible I propose the following changes Instead of the hardcoded switch store character flagformatter somehow maybe a char createfunction in a map or something similar Create a public api to allow clients to register their own flags This would make it possible to implement a minor change or addition without the need to write a whole new formatter and reimplement whats already existing in the patternformatter Hello Im updating the spdlog package for Debian and Im no longer easily able to run the tests against the installed headers due to the removal of the standalone testsMakefile Here is the current setup this is after copying the contents of the tests directory from the libspdlogdev package to the temporary working directory cmake DSPDLOGBUILDTESTSON DSPDLOGBUILDTESTSHOON make CFLAGSDSPDLOGFMTEXTERNAL make test And the current result The CXX compiler identification is GNU Check for working CXX compiler usrbinc Check for working CXX compiler usrbinc works Detecting CXX compiler ABI info Detecting CXX compiler ABI info done Detecting CXX compile features Detecting CXX compile features done Found PkgConfig usrbinpkgconfig found version Checking for module libsystemd Found libsystemd version CMake Warning dev in CMakeListstxt No cmakeminimumrequired command is present A line of code such as cmakeminimumrequiredVERSION should be added at the top of the file The version specified may be lower if you wish to support older CMake versions for this project For more information run cmake helppolicy CMP This warning is for project developers Use Wnodev to suppress it Configuring done CMake Warning dev at CMakeListstxt addexecutable Policy CMP is not set Double colon in target name means ALIAS or IMPORTED target Run cmake helppolicy CMP for policy details Use the cmakepolicy command to set the policy and suppress this warning Target spdlogutestsho links to target spdlogspdlogheaderonly but the target was not found Perhaps a findpackage call is missing for an IMPORTED target or an ALIAS target is missing This warning is for project developers Use Wnodev to suppress it Generating done Build files have been written to tmpautopkgtestu TQBqautopkgtesttmptests Scanning dependencies of target spdlogutests Building CXX object CMakeFilesspdlogutestsdirtestfilehelpero In file included from usrincludespdlogcommonh from usrincludespdlogspdlogh from tmpautopkgtestu TQBqautopkgtesttmptestsincludesh from tmpautopkgtestu TQBqautopkgtesttmpteststestfilehelpercpp usrincludespdlogfmtfmth fatal error bundledcoreh No such file or directory include bundledcoreh compilation terminated Hi Firstly thank you for a great library We are using it for storing the logging information using the UTF format but sometimes the tools we are using on Windows for viewing the logs dont show the specific characters correctly when the UTF encoding is not recognized or manually set It would be very helpfull if the log file could contain a byte UTF identifier BOM that would suggest the tools the encoding of the content gabime would this be something you could be willing to include into your repo If so I would be willing to contribute in getting it done So far Ive made a fork of your repo and implemented this functionality into a branch and verified everything works fine As you can see at the interface is fully backwards compatible Is it going the right way If so how shall we proceed further Thank you Martin Tested using VS To reproduce cpp include iostream include spdlogspdlogh include spdlogsinksbasicfilesinkh include windowsh int main use Bash from Git for Windows touch applog tail f applog auto filelogger spdlogbasicloggermtdefault applog spdlogsetdefaultloggerfilelogger spdlogflusheverystdchronoseconds spdloginfofirst change system time to an earlier point then press enter C time getchar then you wont see this line spdloginfosecond for Sleep return Similar to issue But caused by MSVCs buggy implementation of stdconditionvariablewaitfor According to cppreference this function must use a steady clock File periodicworkerinlh cpp SPDLOGINLINE periodicworkerperiodicworkerconst stdfunctionvoid callbackfun stdchronoseconds interval active interval stdchronosecondszero if active return workerthread stdthread this callbackfun interval for stduniquelockstdmutex lockthismutex THIS LINE if thiscvwaitforlock interval this return thisactive return active false so exit this thread callbackfun I try to replace stdmutex stdconditionvariable to CRITICALSECTION CONDITIONVARIABLE then the problem disappears This is an updated version of fegomes PR from last year I made an effort to give as much credit as possible by merging in his code before updating and modifying it I updated the implementation to adhere to the current coding standards added test and added support for alignment of custom tags Your hesitations to accept the MR may still be valid but I thought I would open a new MR for others to see there is an implementation that compatible with the current Feb spdlog These changes allows to use custom types as thread identifiers to get more information inside formatters I faced with problem in spdlog when I tried to print thread names which were named by pthreadsetnamenp function Because thread identifiers under Linux received by syscall there is no way to get pthread identifier to use it in pthreadgetnamenp function But now thread identifiers can have any type can be received from any function and can be printed with any custom code this is the most confusing one Some examples all in tweakmeh to use pthread on Linux define SPDLOGCUSTOMTHREADT pthreadt define SPDLOGCUSTOMTHREADIDGETTER pthreadself SPDLOGCUSTOMTHREADIDPRINTER can be not defined if pthreadt is integral but if it is not then this macro can be defined but be empty in case if you dont want to use pattern formatter to show what you can do with this struct customthreadt sometype somevariable int value define SPDLOGCUSTOMTHREADT customthreadt define SPDLOGCUSTOMTHREADIDGETTER customthreadt define SPDLOGCUSTOMTHREADIDPRINTER fmthelperappendintmsgthreadidvalue dest I think you should look at this as just a suggestion of using custom thread types because I hope someone have better ideas to implement this This feature will be really useful Hi Im curious to know if there is any implementation of sink in SPDLOG based on Windows event log I will be grateful if anyone let me know Thanks spdlog uses stdconditionvariable However stdconditionvariable does not use monotonic timer It means that when system clock is changed it does not work expectedly One solution is using pthread with pthreadcondattrsetclock mattr CLOCKMONOTONIC instead of stdthread Hello it seems like there is a problem with daylight saving time because the method spdlogsinksdailyfilesinknextrotationtp just adds hours on return Kind regards Mario 