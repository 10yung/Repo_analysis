The DEVICE descriptor alone is not enough for full fledged USB class eg Communications Audio dissection Read CONFIGURATION descriptor twice First time just with the mandatory bytes and then using the wTotalLength to get full CONFIGURATION Do not attempt requesting full bytes as many devices do not return the descriptor in such case While the DEVICE and CONFIGURATION descriptors are not allowing full dissection for all cases eg HID devices need also report descriptors knowing the CONFIGURATION descriptor makes the dissection possible in many cases Hi pcapinject doesnt provide any way to retrieve hardware timestamps for transmitted packets Hence as a workaround we are currently opening another instance of pcap and listening to own packets to get the timestamp and it happens to be software timestamps On debugging the code on our platform pcap was using tpcaketv And as described by kernel documentation packetmmaptxt we got to know that tpstatus field will be updated to determine timestamp type being reported In lineno of pcaplinuxc after the check of tpstatus field We are checking the tpstatus field for TPSTATUSTSRAWHARDWARE and TPSTATUSTSSOFTWARE and it happens to be TPSTATUSTSSOFTWARE always for transmitted packets Any info on how to get tx timestamp with libpcap would be of great help There is an issue with xcode x Seems to compile to bits and generate a lot of misalignment issues BR HAVELIBNL is the result of checkfunctionexists checkfunctionexists stores its results in cache As such setting BUILDWITHLIBNL to FALSE after the initial CMake run didnt work This patch fixes that Set CMAKECLIBRARYARCHITECTURE for newer versions of CMake The CMAKELIBRARYARCHITECTURE is a metavariable that is set from the value of CMAKE LANG LIBRARYARCHITECTURE in at least onward Ref Committed change to a separate branch to avoid merge commits I need the to filter for only outgoing packages of a specific port Apparently Apple removed it in its own version of Tcpdumplibpcap tcpdump Qout nnSX c w packetpcap port XXXX tcpdump cannot parse term at tcpdump invalid expression out I successfully compiled Tcpdump on macOS but im getting another error tcpdump version tcpdump version libpcap version Apple version tcpdump directionout nnSX c w packetpcap port XXXX tcpdump en pcapsetdirection failed Setting direction to PCAPDOUT is not supported on BPF When trying to build libpcap im getting this clang error linker command failed with exit code use v to see invocation make libpcapdylib Error libpcap version Apple version OS nameversion macOS Configure flags unknown macOS defaults Im running into an issue attempting to read a pcap file using kqueue where it gets a certain number of packets into the file and then gets stuck kevent doesnt ever return that the file descriptor from pcapgetselectablefd is ready for reading and my test code just sits waiting forever A simple gist with the test code in it The sample file Ive been testing with If this would be a better question for the mailing list let me know and I can repost it over there This work is based on PR while taking into consideration the review comments which caused the PR to be closed by the original author xpahos I use pcapfilter to capture TLS ClientHellos and ServerHellos It works for both IPv and IPv but for IPv I cannot be as specific as I would like to be IPV TLSCLIENTHELLOS tcp tcp xf x and tcp tcp xf x and dst port IPV TLSSERVERHELLOS tcp and src port and tcp tcpflags tcpack and tcp tcpflags tcpsyn and tcp tcpflags tcpfin and tcp tcpflags tcprst IPV TLSCLIENTHELLOS ip and tcp and dst port IPV TLSSERVERHELLOS ip and tcp and src port I would like to be more specific with my IPv filters so that I dont have to deal with so many extraenous packets in user space In order to do this I believe we would need better support in pcapfilter for IPv higher level protocols I note that the man page for pcapfilter has the following to say about it Note that tcp udp and other upperlayer protocol types only apply to IPv not IPv this will be fixed in the future Thanks