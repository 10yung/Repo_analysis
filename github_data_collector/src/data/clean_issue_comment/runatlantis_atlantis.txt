Generated by f to maintain your repo please consider fchurn We have Atlantis running in a cluster on Project A and want it to manage resources for a cluster running on Project B The pod running Atlantis is using kubernetes service account mounted which has the necessary access to Project B to handle all google provider terraform But as soon as it attempts to do kubernetes provider planing it fails because the cluster on Project B does not know the service account from Project A I have attempted to exec in to the pod running Atlantis and via TF logs which show that its trying to authenticate with the mentioned service account the jwt decodes to something like iss kubernetesserviceaccount kubernetesioserviceaccountnamespace atlantis kubernetesioserviceaccountserviceaccountname atlantisdeployer sub systemserviceaccountatlantisatlantisdeployer There is no corresponding k s service account or namespace in Cluster B as Atlantis exists only in Cluster A Does anyone have a similar use case working Or should atlantis run in the same cluster as it is trying to manage and I am just misunderstanding that completely Hello I am going through the Test Drive tutorial on a ubuntu WSL running on a windows pro machine I am getting this error on my demo repo anyone have an idea whats happening Error goroutine panic This is a bug invalid page type gopkgmodgithubcomboltdbboltv cursorgo x a gopkgmodgithubcomboltdbboltv cursorgo x a b c gopkgmodgithubcomboltdbboltv bucketgo x cbc gopkgmodgithubcomboltdbboltv txgo x b ea gosrcgithubcomrunatlantisatlantisservereventsdbboltdbgo x b e b gopkgmodgithubcomboltdbboltv dbgo x a ef gosrcgithubcomrunatlantisatlantisservereventsdbboltdbgo x b b gosrcgithubcomrunatlantisatlantisservereventslockinglockinggo xecaf gosrcgithubcomrunatlantisatlantisservereventsprojectlockergo xee df gosrcgithubcomrunatlantisatlantisservereventsprojectcommandrunnergo xee a gosrcgithubcomrunatlantisatlantisservereventsprojectcommandrunnergo xee d gosrcgithubcomrunatlantisatlantisservereventscommandrunnergo xecef gosrcgithubcomrunatlantisatlantisservereventscommandrunnergo xecc usrlocalgosrcruntimeasmamd s x b Here is my console atlantis testdrive Welcome to Atlantis testdrive This mode sets up Atlantis on a test repo so you can try it out We will fork an example terraform project to your username install terraform if not already in your PATH install ngrok so we can expose Atlantis to GitHub start Atlantis Press Ctrlc at any time to exit githubcom username kennedy To continue we need you to create a GitHub personal access token with repo scope so we can fork an example terraform project Follow these instructions to create a token we dont store any tokens use atlantis for the token description add repo scope copy the access token GitHub access token will be hidden forking repo fork completed terraform found in PATH downloading ngrok downloaded ngrok successfully creating secure tunnel started tunnel starting atlantis server atlantis server is now securely exposed at creating atlantis webhook atlantis webhook created creating a new pull request pull request created opening pull request opening pull request failed please go to on the browser atlantis is running press Ctrlc to exit C shutdown signal received exiting Thank you for using atlantis For more information about how to use atlantis in production go to Hey there we need a way to ignore tfvars files in the default plan Currently we are autogenerating our repo config and it is lines of yaml and tends to cause issues with rebases merges Would you accept a PR for this Addresses Read commit by commit Attempted to isolate changes Did not implement this for other VCSs Github is my primary concern right now This will only hide apply comments because IMO plan comments are important enough to have unminimized because they impact actual systems and thus may be useful when people need to audit changes or figure out whathow things broke I didnt test the entire flow but did test my new code in isolation go func TestSparkt testingT c err NewGithubClient githubcom goodsparkbot GETYOUROWNKEY if err nil tLogfclient error v err tFailNow r err modelsNewRepo modelsGithub goodsparkasd if err nil tLogfrepo error v err tFailNow err cHideOldCommentsr if err nil tLogfhide error v err tFail See for how it ran I see this PR references API deprecation doc but apparently actor object still as of today contains username field and i get was missing fields Key PullRequestEventCommonEventDataActorNickname ErrorField validation for Nickname failed on the required Error when receiving payload lkysow I guess this PR needs to be reverted It would be cool if Atlantis could add a label to a PR that currently held the lock This would make it easier to see at a glance which PR was currently blocking without needing to view the web UI or look through comments It would be a huge architectural improvement if we can turn the Atlantis server into a stateless container with external transactional storage for locks An abstract keyvalue store that implements the Backend interface seems to be a good start We can start with a simple implementation such as the leveldb and the community can add more implementations Rationale A simple keyvalue store removes the requirement to manage the database schema Any ACIDcompatible database can be turned into a keyvalue store Nowadays we have plenty of cloud providers for a hosted solution eg DynamoDB Benefits HA and autoscaling is easier to achieve with stateless architecture Fits well with modern hosting option eg Knative Cloud Run If atlantis Hashicorp are to turn Atlantis into a hosted service it will be easier to provide a hosted keyvalue backend Related Hi Could be fine to integrate a command to launch test like terratest before merge something like atlantis test Do you have that or something like that in your roadmap This adds flag to handle 