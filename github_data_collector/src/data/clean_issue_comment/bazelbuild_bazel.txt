I couldn t find any documentation why modules was not enabled even though users explicitly specify it Tracking issue on Bazel Configurability Roadmap As a precursor to optimizing multiplatform builds with trimming and better action caching we need to understand how much inefficiency there currently is and where it comes from This issue covers a tool you can run over a project to describe this information as precisely as possible Beside helping optimize todays builds this provides clearer guidance for ongoing trimmingoutput caching efforts This is the follow up of Gerrit Code Review project had an serious build corruption incident Because of partial upgrade of httpfile rule the final artifact was shipped with the file called caffeineguava jar however the content was actually caffeineguava jar The most annoying fact about that build corruption incident is that it is almost went unnoticed and especially disappointing is the fact that the CI successfully verified that broken patch set and voted Verified How could that happen and what must be done to rectify the problem and prevent it from happening again How could that happen Gerrit CI is using docker images with prewarmed caches so that the current caffeineguava jar was shipped with the docker image as the part of the repository cache Because in the patch set of only the URL was upgraded but the hash value was missed to be upgraded there was a repository cache hit and the wrong file was delivered and final artifact was corrupted what must be done to rectify the problem According to this design document repository cache API was extended with canonical id concept to fix similar issue related to the httparchive rule Unfortunately httpfile was missed to be upgraded even though it is using the same extended repository cache So that trying to use canonicalid would fail with ERROR homejenkinsworkspaceGerritverifierbazelgerritWORKSPACE externalcaffeineguavarenamed no such attribute canonicalid in httpfile rule Therefore the httpfile rule must be updated first to offer canonicalid attribute and prevent it from happening again The httpfile rule in Gerrit build tool chain must be amended to use the canonicalid python diff git aWORKSPACE bWORKSPACE index faac a d af ad aWORKSPACE bWORKSPACE mavenjar sha d f ced a ced beeed bb CAFFEINEGUAVASHA a ee ec dee bae e bda b bc bedd bfbbaaf d e TODOdavido Rename guavajar to caffeineguavajar on fetch to prevent potential naming collision between caffeine guava adapater and guava library itself Remove this renaming procedure once this upstream issue is fixed mavenjar httpfile name caffeineguavarenamed downloadedfilepath caffeineguava CAFFEINEVERS jar sha a ee ec dee bae e bda b bc bedd bfbbaaf d e sha CAFFEINEGUAVASHA urls CAFFEINEVERS httpfile CAFFEINEVERS jar canonicalid caffeineguava CAFFEINEVERS jar CAFFEINEGUAVASHA With patched Bazel and with this diff in place partial upgrades of httpfile rule would fail the build bazel build headless INFO Invocation ID c bb e ac bfbc aeeb a DEBUG homedavidocachebazelbazeldavido c f f b b b c c f externalbazeltoolchainsrulesversioncheckbzl Current running Bazel is not a release version and one was not defined explicitly in rbeautoconfig target Falling back to DEBUG homedavidocachebazelbazeldavido c f f b b b c c f externalbazelskyliblibversionsbzl Current Bazel is not a release version cannot check for compatibility Make sure that you are running at least Bazel INFO Call stack for the definition of repository caffeineguavarenamed which is a httpfile rule definition at homedavidocachebazelbazeldavido c f f b b b c c f externalbazeltoolstoolsbuilddefsrepohttpbzl builtin homedavidoprojectsgerrit WORKSPACE WARNING Download from failed class comgoogledevtoolsbuildlibbazelrepositorydownloaderUnrecoverableHttpException Checksum was da aee e c b fe e a ff cd d be dfa b c d ad but wanted a ee ec dee bae e bda b bc bedd bfbbaaf d e The fix for httpfile is here The fix of Gerrit build tool chain on top of it is here Resolves c f d f ce fcf fb a e f afb a d changed legacy globbing without a test to prepend to any targets starting with It did not change the skyframe globbing logic which means incrementality bugs Fix this issue by doing the escaping just before glob returns its result which is a common path for both glob implementations Fixes For Gerrit Code Review project we should be able to produce plugins without transitive dependencies The dependencies are included in Gerrit cores gerritwar One use case is to create protobuf library The problem is that when such artifact is used as dependency for javabinary transitive dependency protobufjavajar is pulled into the javabinarydeployjar This is unnecessary because protobufjavajar already included in gerritwar The real life example is checks plugin The usual idiom is as the following python protolibrary name cacheproto srcs cacheproto javaprotolibrary name cachejavaproto deps cacheproto javabinary name foo mainclass Dummy runtimedeps cachejavaproto The final artifact foodeployjar contains the full protobufjavajar One possible workaround is to use deployenv that was added by ulfjack and lberki in However thats is somehow convoluted way and force us to create an intermediate javabinary artifact that we dont actually need python javabinary name protobufjavaenv mainclass Dummy runtimedeps comgoogleprotobufprotobufjava javabinary name foo mainclass Dummy runtimedeps cachejavaproto deployenv protobufjavaenv Now the final artifact foodeployjar only has the protobuf classes without transitive protobuf library Ideally the native javaprotolibrary rule would offer a way to exclude transitive dependency on protobufjavajar The workaround is pending for review Description of the problem feature request Hello I am trying to run shbinary which is in bzl file inside a directory called hello and it looks like def testshellname nativeshbinary name name srcs scriptsh What I am trying is referring it from another projects WORKSPACE like below gitrepository name hellorepo branch master remote gitgithubcommyorghellorepogit loadhellorepohelloshelltestbzl testshell testshell name test But I get the above error which is shbinary cannot be in the WORKSPACE file used by externaltestshell Feature requests what underlying problem are you trying to solve with this feature Run a shell so that I can perform something using a WORKSPACE file Bugs whats the simplest easiest way to reproduce this bug Please provide a minimal example if possible Replace this line with your answer What operating system are you running Bazel on MacOS Whats the output of bazel info release Just like bazel build ERROR UsersmynameprojectsmyprojWORKSPACE Traceback most recent call last File UsersmynameprojectsmyprojWORKSPACE line testshellname test File privatevartmpbazelmyname fd aec a a ada d a c externalhellorepohelloshelltestbzl line in testshell nativeshbinaryname name srcs script shbinary cannot be in the WORKSPACE file used by externaltest ERROR Error evaluating WORKSPACE file ERROR error loading package external Package external contains errors If bazel info release returns development version or nongit tell us how you built Bazel bazel is installed using scripts from Bazel website not from source Whats the output of git remote geturl origin git revparse master git revparse HEAD Replace this line with your answer Have you found anything relevant by searching the web Didnt find anything relevant Places to look StackOverflow GitHub issues email threads on Any other information logs or outputs that you want to share Can shbinary not be used from WORKSPACE If the files are large upload as attachment or provide link Description of the problem feature request When globbing a directory containing source files or directories starting with the output of glob is not deterministic Bugs whats the simplest easiest way to reproduce this bug Please provide a minimal example if possible cat BUILD genrule name test srcs subdirsrcs outs testoutputtxt cmd find cat subdirBUILD srcs glob printsrcs srcs filegroup name srcs srcs srcs visibility visibilitypublic cat subdirohnotxt bazel build test DEBUG UsersjmillikinsrcbazeltestglobcolonsubdirBUILD srcs ohnotxt BUILD INFO Build completed successfully total actions touch subdirBUILD bazel build test DEBUG UsersjmillikinsrcbazeltestglobcolonsubdirBUILD srcs ohnotxt BUILD ERROR UsersjmillikinsrcbazeltestglobcolonsubdirBUILD no such package ohnotxt The repository ohnotxt could not be resolved and referenced by subdirsrcs ERROR Analysis of target test failed build aborted no such package ohnotxt The repository ohnotxt could not be resolved What operating system are you running Bazel on macOS and Linux Whats the output of bazel info release release Windows environment variable name can contain brackets for example ProgramFilesx C Program Files x This variable is necessary to configure Visual Studio toolchain If the variable is missing next sequence fails vcvarsallbat typescriptbat if exist ProgramFilesx TypeScript typescriptbat is called from vcvarsallbat if TypeScript Visual Studio workload is installed Work in progress