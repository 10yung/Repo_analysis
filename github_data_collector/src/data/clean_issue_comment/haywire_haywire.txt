Its in here maybe this could be adopted Hello I have fixed the cmake build system of your wonderful library so it is not dependent on your old scripts and can be easier integrated into other projectswithout using Externalprojectadd function and also added fix to compile for Windows using MinGW Maybe this is related to or possibly I setup a new machine and started fresh but now I get this error Added route Address Port Threads Balancer ipc Parser httpparser TCP No Delay on Listen backlog Maximum request size Listening malloc error for object x fff cb pointer being freed was not allocated set a breakpoint in mallocerrorbreak to debug Program received and didnt handle signal IOT This only happens when a client connects to the server Booting it works fine Maybe this is related to When I build and then run the server it stays running until a client tries to connect Then I get this error Added route Address Port Threads Balancer ipc Parser httpparser TCP No Delay on Listen backlog Maximum request size Listening Assertion failed streamtype UVTCP streamtype UVNAMEDPIPE streamtype UVTTY uvwrite unix does not yet support other types of streams function uvwrite file srcunixstreamc line Program received and didnt handle signal IOT Running on macOS No clue what version of haywire Im using other than HEAD as of this morning Just a minor fix This will fix the windows build Tested with VS and VS x cmd window This PR adds the ability to disable http routing in Haywire and route all requests to a single callback rootrequestcallback The common usage scenario I envision for this feature is operating other http frameworks that include their own routing on top of Haywire One example would be ASPNET Core MVC the rootrequestcallback would start ASPNET Core s middleware pipeline and MVC would handle the routing Currently to support using libuv across multiple threads we create an event loop per thread We load balance connections across these event loops by passing connections in supported ways TCP connection is passed from the primary event loop with the socket listening to the worker event loop over IPC Create an event loop per thread that each opens a listening socket using SOREUSEPORT so the kernel distributes across sockets in kernel space Separating this out of httpserver would clean things up significantly I would also consider even making this its own library libuvdispatcher outside of Haywire since this could be useful to any TCP server using libuv that wants to use multiple CPU cores Where this is used is here Investigate whether using mlock and munlock would be beneficial to keep the request buffer pages in memory and avoid swapping