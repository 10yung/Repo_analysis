PosonQueue middleware publishing messages with error without any errrors but they do not appear anywhere in the rabbitmq Queue with selected name is not created either Looks like that PR was merged a while ago and new version was released So its time to upgrade go modules Thanks The chiRouter is not used and I believe it is not intentional I have added tests to cover the expected behaviour go fmt has added a small diff in pubsubgo Also out of curiosity is there any benefit to do wait makechan struct go func wait serverClose return func closewait instead of directly return func serverClose Thanks Event Sourcing Completeness As of today we have a fantastic infrastructure to build a complete Event Sourced system with few components Messages PubSub Routing Middlewares And we have few components related to Event Sourcing following the CQRS docs However I would like to track the completeness of Watermill based on what you are trying to accomplish Completeness could mean either it supports the feature with some level of abstraction andor has some documentation about it helping to implement by themselves These are some notes of what I think the completeness list would be but feel free to send feedback about it I am more interested in starting a discussion and have a thread for it Commands Command Bus Message bus for commands Command data structure representing a command Command Handler handles the incoming commands Router routes the incoming command to its command handler Validations validates the command before dispatching the command Events Event Bus Message bus for events Event data structure representing an event Event Handler handles the incoming events Event Store stores events Snapshot a snapshot of the event stream Extra Also add some extra abstractions or documentation helping people to deal with common use cases Idempotence refers to the ability of a system to produce the same outcome even if an event or message is received more than once Aggregate Id This field is used to associate the particular event to a specific Aggregate Root Causation ID the ID of the command causing an event or the event causing a command dispatch Correlation ID the ID used to correlate related commandsevents Aggregates Aggregates is comprised of its state Aggregate Root public command functions Command Handlers and state mutators Event Handlers Aggregate Root data structure representing an aggregate Process Manager Process Manager is responsible for coordinating one or more workflows It handles events and dispatches commands in response Saga Saga distribution of multiple workflows across multiple systems each providing a path fork of compensating actions if any of the steps in the workflow fails Read Model Projection Read Model Projection read model can be built using an event handler and whichever storage provider you prefer Thoughts Some initial PoC Have you seen yubabyte db Its open equivalent to Cockroach It uses a Postresql api have redis api and cassandra api too but its all done with the underlying yugabyte engine Pretty cool and its basis is event driven It called the READ ONLY instances Tablets cute name SO i noticed you only have mysql diver at the moment EDIT My mistake Looks like you have a postresql driver happening here SO i think this might be perfect for using the DB as a Message queue yugabyte has a proper CDC engine so its possibel to listen to changes and then populate the PUB SUB tables as needed A the moment i think the engine is Java based OMG SO i raised this issue and it looks like they are sort of going to make it work with golang Currently you are not able to use middleware per handler in clean way you can still manually wrap the handler function or have separated router It would be nice to be able to add middleware per handler As a good reference point you can use chi router Basically we dont need to have kafkaconsoleconsumer we have mill instead It would be nice to replace it in all examples I didnt use Eventstore so probably some design discussion is needed As I remember there was some mechanism that may fit pretty well to PubSub abstraction To check Because why not To implement this PubSub you would like to check because of similar characteristics of implementation It may be useful for in the future