I was just curious to see how my SPA behaved on my Samsung smart TV It just gave me an empty window This doesnt matter much to me but I think it could have been nice if my SPA at least could show some message like This app requires XYZ To start with Id have to figure out which browser features to test I tested my smart TV browser using whatsmybrowserorg and the results were available at Heres the results Operating system Linux Javascript enabled Yes Cookies enabled Yes Flash version Not installed Java version Not installed Websockets supported Yes WebGL supported Yes Language nnNO Browser size x Screen size x Color depth bit AdBlock enabled No Your full user agent string is Mozilla SMARTTV Linux Tizen AppleWebkit KHTML like Gecko SamsungBrowser TV Safari My SPA does not use Bootstrap or jQuery I coded the needed CSS myself not too much Do the results listed above tell what this smart TV browser is missing I just tested a SPA I have made with npx apprun init spa on an iPad and noticed that the component links that normally appear to the right of the Project Name were not showing at all Instead I got a burgerlike menu element on the far right but I did not get access to my components from that menu it was not responding to clickstaps This can be observed in a freshly built AppRun SPA eg in Chrome when selecting emulation of an iPad screen size in the developer tools I guess that this has something to do with Bootstrap There may be some configuration details missing In your book page I read Notice that we use className to represent the class property in JSX instead of class That is also what one does in React However when I create a new SPA by doing npx apprun init spa the file maintsx that I get contains a lot of classNamenav That made think that I could use class instead of className in other tsx files as well and it seemed to work Could you please explain I have just created the basic SPA by doing npx apprun init spa Now I want the apps state to take care of more than just the component name Home About Contact I may eg want to have a counter on one of the components In the basic SPA one gets the impression that the component name is the apps state state Home but right now it seems that its not necessarily so Im a bit confused Hi while not a bug it would be nice if we could get AppRun built in strict mode As yysun has indicated in its a goal To that end I started taking a look but thought that Id throw a few things out for comments Improve the creation of apprundts Right now since its not auto generated from the code there are situations where the main type file is out of sync with the code I would suggest that we need to make this file as auto generated as possible One possible move in this direction would be to move lots of the types into the srctypests file that exist right now We could then convert this into a declaration file and use it to build the src and then copy over during the build process Thoughts deprecated exports in apprundts In the vain of cleaning up the API there is at least a comment in this file indicating an obsolete API update If this is actually the case we ought to make an effort to deprecate it given the change was made years ago conflicting types Right now I see that there is an Element type defined which conflicts with the DOMs definition We could namespace the types and play well with others or we could change the name to AppRunElement or something of the sort Preferences There is still lots of combing through the code to clean things up but those seem to me to be some first questions to answer and most of the rest ought to be mechanical Cheers Peter Presently AppRun doesnt support XML attributes on SVG elements The major problems are attribute names and namespacing Attribute names The problem is that JSX doesnt allow in attribute names React overcomes this with camel casing so that xlinkhref and friends becomes xlinkHref We could alternatively use directives to implement this functionality so that xlinkHref and friends under the hood becomes xlinkhref Im not a fan of this approach so opted for camel case replacement My approach also supports user defined namespaces although frankly I wouldnt expect people to be using them Namespacing Presently none of the attributes for SVGElements have namespaces used when setting or getting values That has been added Downsides of the implementation The namespace prefixes and their mapping to dialect are being stored in a global variable I suspect they ought to be stored on a per element basis so that one part of the DOM tree can have different valuesdialects than another part of the tree etc Thoughts NOTE This pull request is the same as but I moved it off to a branch In this line we see that recursive component creation passes the ancestor down in the parent variable vs vdomchildren vdomchildrenmapchild createComponentchild vdom idx This means that in this line were using the ancestors cache if rendering the ancestor and the parents cache if rendering the parent I have observed cache miss and recreation of components for that reason sometimes with missing subcomponents but that last part could be a problem on my side I tried using vdom and ran into other issues with missing elements Im also not sure about the intent here The issue with a global cache might be ID collision a local cache would fail on a drag and drop but thats a lesser concern Either way I think it would be good to make sure it is used consistently on directive doesnt appear to work I think because of the issue you mentioned in However onClick does seem to work with a couple of exceptions First the type definition for the decorator is wrong The type definition shipped with the project is for a decorator not a decorator factory typescript export function onEname E options EventOptions void However the way it is recommended to be used is as a factory in Changing the definition to the following makes it compile correctly typescript export function onEname E options EventOptions target object propertyKey string symbol void It appears this issue is caused by generating the dts file by hand Is there a reason you arent just having TSC generate it for you using the declaration true compilerOption in your tsconfigjson I believe webpack will combine dts files for you when you bundle However after getting past that error it leads to a new issue import not found on Im not sure what is causing this one Effectively import on from apprun is failing to locate the on decorator at runtime Other imports are working correctly and Im not sure why this one is missing Perhaps webpack is stripping decorators during tree shaking For the class that extends Components you might want to do something after its rendered In that case instance needs access to the root element This change is to assign the element and remove the reference when its done unload to clean up