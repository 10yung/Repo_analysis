Thanks for the great tool Im trying to use gocui to display image as But seems like display is not good as true color terminal So is there any setting for gocui to enable true color BTW Im using iterm which pixterm can display image perfectly How can I set the cursor at end of the content when clicking a view Thanks Now will put the cursor at the position that clicked which is weird No need to convert here its already a string Hi everyone I figured you would be interested I published a go package I wrote to help me handle complex text formatting in a gocui interface In particular this package contains string manipulation functions that handle properly wide characters chinese japanese and ANSI escape sequences The package is here Describe the bug Weird look on iTerm vs Terminal Im still tweaking my configuration but i always have that kind of behaviour Im running oh my zsh on both iterm and terminal Screenshots macOS Built in terminal Terminal iTerm iTerm Desktop OS macOS High Sierra I have this problem with multiple application created with GoCUI I think an edition refers to a version of some published material If I understood the intent of the documentation correctly perhaps it should be editing mode or simply edit mode How can I update the UI I am outputting logs to the UI properly so that it updates automatically rather than updating when I manually press the updown arrows I am using the ioWriter interface func cGui clientGui Writep byte n int err error cGuiguiUpdatefuncg gocuiGui error logCounter logCounter fmtFprintfcGuiviews logging strconvItoalogCounter stringp return nil return lenp nil The above works however if multiple things write to it at once then the logs get jumbled on the console The image below is the output as you can see lines have been jumbled with the lines and the number on the left is the logCounter variable from above and should be consecutive If I do func cGui clientGui Writep byte n int err error fmtFprintfcGuiviews logging strconvItoalogCounter stringp return lenp nil It works but I have to manually do something like press a key to get the log output to appear Thanks I dont know if you want this change or if youd rather handle this differently Im using gocui to handle the errors thrown at different points in the lifecycle on keybind etc and I needed a common place to put them Since gocui has its own lifecycle I felt it was appropriate to handle the errors by returning them to their appropriate handlers This posed a problem when I wanted to display an error in an alert using gocui instead of returning My thought is that as my error handling gets better some would exit like now and others would be gracefully recovered from Calling guiMainLoop after it exits doesnt work because the goroutine for termboxPollEvent is initialized more than once causing multiple keypresses among other things So this PR separates that initialization from the actual main loop so that I can recall the main loop after gracefully recovering after an error Ex go guiMainLoopInit for err guiMainLoopEventHandler if err nil err gocuiErrQuit return else if err nil guiUpdatefuncgui gocuiGui error return viewsAlertWithTitlegui Error errError n nstringdebugStack 