Hi I noticed two minor bugs with how failure to open serialtube is handled The exception thrown is serialserialutilSerialException rather than PwnlibException which is the one thrown by all other tubes when opening fails After the program exits another error is thrown in automatically called close which is caused by earlier unsuccessful initialization Here is a small test case make sure the port is actually busy before running this piraspberrypi cat apy usrbinpython from pwn import import serial import traceback loginfoTrying to open a serial port try s serialtubedevserial except serialserialutilSerialException as e note wrong exception type here logwarnFailed to open a serial port logwarntracebackformatexce loginfoAfter opening serial port piraspberrypi PWNLIBDEBUG python apy Pwntools does not support bit Python Use a bit release Trying to open a serial port Failed to open a serial port Traceback most recent call last File apy line in module s serialtubedevserial File homepilocallibpython sitepackagespwnlibtubesserialtubepy line in init interCharTimeout File homepilocallibpython sitepackagesserialserialutilpy line in init selfopen File homepilocallibpython sitepackagesserialserialposixpy line in open raise SerialExceptionmsgerrno could not open port formatselfport msg SerialException Errno could not open port devserial Errno Device or resource busy devserial After opening serial port Traceback most recent call last File homepilocallibpython sitepackagespwnlibtubesserialtubepy line in close if selfconn AttributeError serialtube object has no attribute conn Additionally documentation for the serialtube module is quite lacking as in there is basically no documentation and you have to look at the source code to see eg how convertnewlines is handled This is closely related to subprocessed tests of pwnlibui and processes dying randomly but only on py Any ideas of how to solve this are greatly welcome Tiniest of edits to the readme Ive been playing around with VS Code and the Windows Subsystem for Linux trying to get some of my projects working with that environment Im having an issue that I think might be related to the VS Code output terminal Heres an example that breaks when I try to run tests from from inside the IDEs built in testing framework but not when I run from the IDE command line I imagine it has something to do with the way VS code imports the module into its own testing framework Code That Breaks python import unittest from pwn import class TestExerciseunittestTestCase def testremoteself conn remoteftpubuntucom resp connrecvlinedecode printresp selfassertIn resp if name main unittestmain Thrown Exception ImportError Failed to import test module runtests Traceback most recent call last File usrlibpython unittestloaderpy line in findtestpath module selfgetmodulefromnamename File usrlibpython unittestloaderpy line in getmodulefromname importname File projectsrandompwntoolstestruntestspy line in module from pwn import File locallibpython sitepackagespwninitpy line in module pwnlibargsinitialize File locallibpython sitepackagespwnlibargspy line in initialize terminit File locallibpython sitepackagespwnlibterminitpy line in init terminit File locallibpython sitepackagespwnlibtermtermpy line in init setupterm File locallibpython sitepackagespwnlibtermtermpy line in setupterm updategeometry File locallibpython sitepackagespwnlibtermtermpy line in updategeometry hw fcntlioctlfdfileno termiosTIOCGWINSZ OSError Errno Inappropriate ioctl for device Hacky Fixes Just shimming out the initialize function works for my specific use case But that probably kills other terminal functionality I might want in the future and it makes command line output way less pretty python import pwnlibargs pwnlibargsinitialize lambda None Resources When using Pwntools with Python there appear to be multiple issues when stepping with pdb In particular the below issue arises I think this is related to terminal handling since NOTERM resolves the issue pdbbrokenpy python usrbinenv python m pdb import time from pwn import x x x x Without Pwntools the q command works pdbbrokenpy Userszachrigglepdbbrokenpy module import time Pdb n Userszachrigglepdbbrokenpy module from pwn import Pdb q With pwntools the n command works but q throws an exception pdbbrokenpy Userszachrigglepdbbrokenpy module import time Pdb n Userszachrigglepdbbrokenpy module from pwn import Pdb Userszachrigglepdbbrokenpy module x Pdb q Traceback most recent call last File Userszachrigglepyenvversions libpython pdbpy line in main pdbrunscriptmainpyfile File Userszachrigglepyenvversions libpython pdbpy line in runscript selfrunstatement File Userszachrigglepyenvversions libpython bdbpy line in run execcmd globals locals File string line in module File Userszachrigglepdbbrokenpy line in module x File Userszachrigglepdbbrokenpy line in module x File Userszachrigglepyenvversions libpython bdbpy line in tracedispatch return selfdispatchlineframe File Userszachrigglepyenvversions libpython bdbpy line in dispatchline selfuserlineframe File Userszachrigglepyenvversions libpython pdbpy line in userline selfinteractionframe None File Userszachrigglepyenvversions libpython pdbpy line in interaction selfcmdloop File Userszachrigglepyenvversions libpython pdbpy line in cmdloop selfcmdloop File Userszachrigglepyenvversions libpython cmdpy line in cmdloop line selfprecmdline File Userszachrigglepyenvversions libpython pdbpy line in precmd marker linefind TypeError argument should be integer or byteslike object not str Uncaught exception Entering post mortem debugging Running cont or step will restart the program Userszachrigglepyenvversions libpython pdbpy precmd marker linefind Pdb The installation instructions still links to the dev branch I am the packager of pwntools for Fedora We had to drop the package for Fedora due to the lack of Python support With Python now supported I am reviving the pwntools package Rpmlint a tool related to Fedora packaging identified some possible problems in pwntools First it appears that Python shebangs remain in some of the source files python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineinitpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineasmpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinechecksecpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineconstgreppy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinecyclicpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinedebugpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinedisablenxpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinedisasmpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineelfdiffpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineelfpatchpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinehexpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinephdpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineshellcraftpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlinetemplatepy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineunhexpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcommandlineupdatepy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibcontextinitpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibtermreadlinepy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibtimeoutpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibtubesbufferpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibutilshstringpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibelfdatatypespy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibencodersi xorpy usrbinenv python python pwntoolsnoarch E nonexecutablescript usrlibpython sitepackagespwnlibencodersmipsxorpy usrbinenv python These should be removed or replaced with usrbinpython I think Second there appear to be a number of zerolength files python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibencodersarmalphanumericalphanumericpy python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesaarch doc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesaarch androiddoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesaarch androidsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesaarch freebsddoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesaarch linuxdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesaarch linuxsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesamd androidsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesamd linuxsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesarmandroidsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesarmlinuxsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatescommonfreebsddoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatescommonlinuxdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatescommonlinuxsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesi androidsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesi cgcdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesi linuxsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesmipsandroidsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesmipslinuxsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatespowerpcdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatespowerpcandroiddoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatespowerpcandroidsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatespowerpclinuxdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatespowerpclinuxsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesthumbandroidsyscallsdoc python pwntoolsnoarch E zerolength usrlibpython sitepackagespwnlibshellcrafttemplatesthumblinuxsyscallsdoc Writing a script and having psenddata be the last thing without some sort of hanging command like pause or pinteractive while being debugged with gdb will kill the process but not say it This ends up making gdb say the process died somehow without pwntools telling you that it killed it I dont know if this is something to do with how Linux handles it or if gdb is keeping something alive after the kill which makes it impossible but if pwntools kills the process I believe it should say it Added a method maps in class process which returns the list of memory maps of the process with all the details in procpidmaps In order to parse and store the information of procpidmaps new classes were included in pwnlibutilproc MemoryMap and MemoryMapFlags The functionality of ELFmaps was not changed to avoid breaking compatibility however it could be modified to add the full information of the maps An example of the use of this new method from pwn import p processbinsh x Starting local process binsh Starting local process binsh pid for map in pmaps printmap c rp fe usrbindash rxp fe usrbindash rp fe usrbindash a rp b fe usrbindash a b rwp d fe usrbindash b d rwp f b rwp heap f ab d f ab f rp fe usrlibx linuxgnulibc so f ab f f ab rxp fe usrlibx linuxgnulibc so f ab f ab c rp a fe usrlibx linuxgnulibc so f ab c f ab c p b fe usrlibx linuxgnulibc so f ab c f ab c rp b fe usrlibx linuxgnulibc so f ab c f ab ca rwp ba fe usrlibx linuxgnulibc so f ab ca f ab d rwp f ab ea f ab eb rp fe usrlibx linuxgnuld so f ab eb f ab rxp fe usrlibx linuxgnuld so f ab f ab rp f fe usrlibx linuxgnuld so f ab f ab rp fe usrlibx linuxgnuld so f ab f ab rwp fe usrlibx linuxgnuld so f ab f ab rwp ffe a ffe a a rwp stack ffe be ffe be rp vvar ffe be ffe be rxp vdso We should try out the actions button some day as Travis CI sometimes behaves ridiculous It also suffers from checkpointless builds so the caching is not as effective as it could be