 name Bug fix or new feature about Fixing a problem with Redux PR Type Does this PR add a new feature or fix a bug Fixes a bug Why should this PR be included It fixes a typing issue I and some other folks have with the combineReducers function Checklist x Have you added an explanation of what your changes do and why youd like us to include them x Is there an existing issue for this PR it is closed but many people are still affected x Have the files been linted and formatted x Have the docs been updated to match the changes in the PR Have the tests been updated to match the changes in the PR x Have you run the tests locally to confirm they pass Bug Fixes What is the current behavior and the steps to reproduce the issue Unfortunately I failed to create a simple reproduction example Still it happens that TypeScript would fail to infer the proper generic type to combineReducers function In my case Im doing something like this ts interface FooState interface AppAction extends ReduxActionstring interface FooAction extends AppAction interface FooAction extends AppAction type FooActions FooAction FooAction function fooReducerstate FooState action FooActions FooState return state Type error Argument of type ReducerCombinedState fooReducer FooState FooActions is not assignable to parameter of type ReducerCombinedState fooReducer FooState AnyAction combineReducers fooReducer fooReducer works combineReducersfooReducer FooState fooReducer fooReducer What is the expected behavior I would expect TypeScript to infer a generic type automatically How does this PR fix the problem It removes explicit anys which appears to help TypeScript to infer a type Im not sure why though manshrugging Could this be a bug in TypeScript More specifically the first generic type of ReducersMapObject is a state which is already any by default and the second generic type is A extends Action which is Action by default and not any So the fact that the second generic type is any confuses TS for some reason PR Type Does this PR add a new page or update an existing page Adds the new Quick Start page Checklist x Is there an existing issue for this PR Have the files been linted and formatted What docs page is being added or updated Section Introduction Page Quick Start For Adding New Content What kind of content category is this page tutorial howto explanation reference The Quick Start page is a form of tutorial but intended to demonstrate the fastest easiest correct way to use Redux without explaining why things work this way Who is the intended target audience Beginners who know nothing about Redux yet What knowledge are we assuming they have JS syntax ES asyncawait object spreads React components hooks Other HTTP AJAX fetch What are the intended results or takeaways from reading this page Readers should be able to mimic the demonstrated patterns to create a basic ReactRedux app that does some CRUD work What is the most critical info they should learn Redux is a tool for managing state outside of your React components The Redux Toolkit package is the simplest and recommended way to use Redux Key ReactRedux APIs configureStore createSlice useSelector useDispatch Immutability is vital but either requires handwritten updates or use of RTKImmer magic Status Hacked together this initial skeleton of a page So far Ive done Figured out how to use MDX with Docusaurus Added reusable components for Note including multiple styles based on the Cypressio docs and DetailedExplanation Created an empty Quick Start page Added some initial what is this and why would I use it content Added instructions on creating a project I got stuck with some yak shaving when I realized that using the diff highlighting format leaves the diff signs as copyable characters and ideally Id like them not copied or selectable I tried playing with userselect none and the firstletter selector but its not quite doing what I want Putting this up for ongoing feedback as we work through this cc taniarascia bpas What docs page is being added or updated Section Introduction Page Quick Start For Adding New Content What kind of content category is this page tutorial howto explanation reference The Quick Start page is a form of tutorial but intended to demonstrate the fastest easiest correct way to use Redux without explaining why things work this way Who is the intended target audience Beginners who know nothing about Redux yet What knowledge are we assuming they have JS syntax ES asyncawait object spreads React components hooks Other HTTP AJAX fetch What are the intended results or takeaways from reading this page Readers should be able to mimic the demonstrated patterns to create a basic ReactRedux app that does some CRUD work What is the most critical info they should learn Redux is a tool for managing state outside of your React components The Redux Toolkit package is the simplest and recommended way to use Redux Key ReactRedux APIs configureStore createSlice useSelector useDispatch Immutability is vital but either requires handwritten updates or use of RTKImmer magic Notes and Suggestions Need to make it as handson and interactive as possible Use as a fake but working backend Note PUT POST DELETE dont actually change anything Add Prerequisites section at the start of the page Dont waste time explaining other things here Key references examples Styling Right now every production website that uses redux is shipping lengthy error messages that are better suited to development Example Reducer t returned undefined when probed with a random type Dont try to handle nINIT or other actions in redux namespace They are considered private Instead you must return the current state for any unknown actions unless it is undefined in which case you must return the initial state regardless of the action type The initial state may not be undefined but can be null My rough guestimate is that you could reduce the minified version of redux from characters to more like characters by replacing these long messages with terse generated error codes like throw code Seems worth it for potential savings of more than PR Type Does this PR add a new page or update an existing page Adds the Quick Start page Checklist x Is there an existing issue for this PR x Have the files been linted and formatted What docs page is being added or updated Section Introduction Page QuickStart For Adding New Content What kind of content category is this page tutorial howto explanation reference tutorial Who is the intended target audience Redux users who want to quickly bootstrap their next project with the latest technologies What knowledge are we assuming they have Very minimal Redux knowledge no prior Redux Toolkit experience needed Basic JS andor React knowledge What are the intended results or takeaways from reading this page To be able to gain just enough Redux and Redux Toolkit knowledge to be able to start their next project They can learn Redux more indepth in later tutorials What is the most critical info they should learn Learning the basics of Redux and Redux Toolkit and how to tie those basics in to building vanilla or React based apps TODOs Add CodeSandboxes to ensure the code runs properly Add more links throughout the tutorial Add links for external resources at the end of the page CRA introduced project templates Based on that information we should be able to define a cratemplateredux package that sets up Redux Toolkit and ReactRedux automatically in the same way that CRAs default template sets up React automatically This would make it even easier to get started with Redux PR Type Does this PR add a new page or update an existing page moves around the Ecosystem Core Concepts Three Principles and Prior Art page Updates the Getting Started page Checklist x Is there an existing issue for this PR x Have the files been linted and formatted TODOs x Add entries to the Netlify websiteredirects file x Ensure that there arent any more broken links throughout the website due to the pages being moved around Barebones tutorial part of PR Type Adds a new category Tutorials Adds a new page under that category Barebones Tutorial Checklist x Is there an existing issue for this PR Docs Rewrite MetaIssue Tutorials x Have the files been linted and formatted For new content What kind of content category is this page tutorial howto explanation reference Tutorial Who is the intended target audience Newcomers to Redux who might also be relatively new to Javascript What knowledge are we assuming they have Basic Javascript What are the intended results or takeaways from reading this page They should know What an action is What a reducer is in the context of Redux How they could use an action payload What an action creator is How to create a Redux store How to use storegetState and storedispatch What is the most critical info they should learn Actions are plain Javascript objects that have a type property Reducers have the signature state action newState and should cause no mutations or sideeffects An action can be given a payload to provide additional information beyond type to a reducer An action creator is a function that returns an action createStore takes a reducer function as an argument and returns a store which uses that reducer storegetState retrieves the current state held by the store storedispatchaction updates the stores state by passing its current state and action to the stores reducer Other notes This page is quite long I think that if used it would be more suited to having Barebones Tutorial as a subcategory under Tutorials with a single page then dedicated each to Actions Reducers Payloads Action creators and the Store but wanted to check what thoughts were on that before I made that change It also might not be the style of thing that you want on the docs I think the material is probably more naturally suited to a videoish thing No offence taken if thats the decision as I can reuse this elsewhere What docs page needs to be fixed Section Structure Files as Feature Folders or Ducks Page What is the problem The Style Guide strongly recommends Structure Files as Feature Folders or Ducks this might not be desired in some projects and may discourage sticking to other recommendations Action creators and reducers colocated While Ducks does provide colocation of action creators and reducers if my understanding is correct this works against the N nature of actions to the reducers that handle them The style guide strongly recommends Allow Many Reducers to Respond to the Same Action by structuring action creators and reducers together using Ducks this seems to be impeded As stated in Some users do choose to bind them more tightly together such as the ducks file structure but there is definitely no onetoone mapping by default and you should break out of such a paradigm any time you feel you want to handle an action in many reducers Id argue that a codebase that sometimes uses Ducks and sometimes doesnt is less maintainable and less understandable than a codebase that uses a single structure consistently Using Ducks for a new reducer to start responding to an existing action this would require a break out of the paradigm refactor My fear here would be that those who dont realise they need to go to the effort of making the refactor just dispatch another action to target its corresponding reducer going against Avoid Dispatching Many Actions Sequentially Components colocated with actions creators and reducers In addition to structuring action creators and reducers together the Style Guide also shows components Todostsx structured alongside the action creators and reducers todosSlicets Ive always thought of the tree of Redux state as independent to the tree of React components being able to use a single version of truth piece of state from Redux across many components in the application is where Ive extracted lots of value from Redux If many different components want to use a single version of truth piece of state then the tendency would be for more and more code to migrate to common This feels like abuse of common and perhaps a smell that Ducks is not the optimal structure for some projects What should be changed to fix the problem If my reasoning is not flawed state at least that a deliberate choice must be made between Ducks style or railsstyle see and outline proscons of each My own opinion at present would be to advise that if unsure prefer the railsstyle Id be happy to create a pull request with proposed edits if this is deemed a valid direction Theres a lot of great docs sites and teaching content out there both for Redux and for things completely unrelated Id like to see what specific things we can learn from these other sites and how we can apply those to improve the Redux docs Suggested Sites for Comparison This is not an exclusive list if theres other good sites or tutorials we should learn from please comment with the site and what ideas we should take inspiration from Docs Sites React Vue Angular Ember NgRx Django Tutorials Dave Ceddia A Complete ReactRedux Tutorial for Beginners Valentino Gagliardi Complete ReactRedux Tutorial for Beginners The Definitive Guide Mark Erikson Redux Fundamentals Workshop slides User Survey I put up a survey over a year ago asking for feedback on improving the docs The survey results are browsable here Dans Thoughts Dan specifically commented a while back on Twitter My biggest regret with Redux is explaining it in terms of API instead of how to think in it I underestimated the temptation to twist it into a familiar conceptual model and that it s flexible enough to allow these contortions When people say I dislike Redux they might mean completely different things And they often have nothing to do with Redux itself but with how the code they worked with is structured or with the examples they learned from If you copy paste some action creators and reducers handling FETCH actions over and over and over again you re probably using Redux in a different way than I imagined people would do I m sorry for all the repetitive code you felt you needed to write That s my fault Same goes for having actions with types like SETA SETB SETC and dispatching them from a longass async action creator Also not how I imagined people would do it Again sorry I didn t explain this clearly