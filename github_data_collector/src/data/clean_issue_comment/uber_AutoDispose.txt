If compound extensions do make their way into Kotlin we could leverage them nicely in AutoDispose to do something like this kotlin fun T ScopeProviderObservableTautoDispose fun testscope ScopeProvider scopeapply myObservable autoDisposable subscribe or class Worker ScopeProvider fun run workObservable autoDisposable subscribe Please include the library version number including the minor and patch version like in the issue text Library version If you think you found a bug please include a code sample that reproduces the problem A stacktrace alone is ok too but may not contain enough context for us to deduce the issue from Repro steps or stacktrace I have an activity class and a Coordinator class I passed instance of activity lifecycle through the constructor to coordinator Then inside init function i subscribed to lifecycle when onStart method called I supposed that this subscription will bind to onStart onStop however it was bind to onResume onPause Here is a little bit an example from my app kotlin class Coordinator private val lifecycle Lifecycle Activity lifecycle LifecycleObserver private val scope ScopeProvider AndroidLifecycleScopeProviderfromlifecycle init lifecycleaddObserverthis OnLifecycleEventLifecycleEventONSTART fun onStart This subscription will dispose when onPause happen But why I am making subscribe inside ONSTART event controller watcher rxProfile autoDisposablescope subscribe Gives us a lot more coverage and ensures theyre kept at parity as well as avoiding duplication Theres a few different facets to this kotlin code coverage android code coverage both instrumentation and unit tests java code coverage exclude generated lifecycle adapter And then collect these all together under a single root codeCoverageReport task