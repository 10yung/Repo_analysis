 ProxyKit on ASPNET Core Implement a typed ProxyHanlder and inject a scoped service inside its constructor c public class ProxyHandler IProxyHandler private IScopedService scopedService public ProxyHandlerIScopedService scopedService scopedService scopedService c servicesAddSingletonProxyHandler Alright well get the expected result Error while validating the service descriptor Service Type AppProxyHandler Lifetime Singleton ImplementationType AppProxyHandler Cannot consume scoped service AppIScopedService from singleton AppProxyHandler To resolve the issue we going to change the ProxyHanlder to scoped lifetime c servicesAddScopedProxyHandler servicesAddScopedIProxyHandlerProxyHandler And again well face another issue Cannot resolve scoped service AppProxyHandler from root provider This issue made by this line in the ProxyMiddleware Only the singleton lifetime services are allowed to inject in a middleware constructor We could resolve this issue by injecting the ProxyHanlder in the Invoke method instead of the constructor I could open a PR adds damianh i am weary to propose the addition of one of my libs to someone else projects but figured you might find this useful if not happy to abandon this one I converted half the snippets if you like the idea i will finish the rest Support set timeout dynamically Use cases I want to leverage endpoint routing internally and on additional capabilities on ProxyKit APIs Description Endpoint routing will allow embeddeding of ProxyKit into the routing table rather than just being a terminating middleware It will allow for interesting additional scenarios such as extrating route parameters for use in proxying decisions AspNetCore introduced endpoint routing However ANC required netcoreapp which is not LTS ProxyKit aligns with latest LTS version of AspNetCoreand dotnet core as they are now shipped together netcoreapp is not LTS so will drop that now that netcoreapp is released Alternatives None Additional context None Use cases When a proxied request fails eg returns an internal server error I would like to see this in my logs as a warning or error Description To reduce noise I only log warnings and above When the forwarded request fails eg anything but XX level http codes I would like to have an easy way to log it without having to drop my log level to info or create custom Logging filter Currently it seems to log any response regardless of the response code at the info level Alternatives Could potentially use NLog filtering to log the messages Im interested in logger nameSystemNetHttpHttpClientProxyKitClient minlevelInfo writeTodatabase filters when conditionendswithmessage OK or not containsmessage End Processing actionIgnore filters logger Versions To reproduce start websocket server in localhost create a mvc project proxy websoket to localhost Expected behavior The agent functions normally Actual behavior The current websocket agent will disconnect immediately upon success to localhost Workarounds chang the localhost to ip is work Can we use polly to create resilience and transientfaulthandling at WebSocketProxyMiddlewarecs private Task ProxyOutToWebSocketHttpContext context var relativePath contextRequestPathToStringTrimStart var upstreamUri getUpstreamHostcontext var uriWithPath new Uri upstreamUriUri relativePathLength relativePath var uriBuilder new UriBuilderuriWithPath Query contextRequestQueryStringToUriComponent loggerLogInformationForwarding websocket connection to uriBuilderUri return AcceptProxyWebSocketRequestcontext uriBuilderUri if this line var upstreamUri getUpstreamHostcontext move to above the var relativePath contextRequestPathToStringTrimStart Will give proxykit to do some custom routing things ability by change contextRequestPath property at outside Could you modify this code please Thank you Forward the request to the specified upstream uri AspNetCore shipped with a feature to propagate headers Add a recipe that shows how it can be used with ProxyKit Also add example of doing same with an extension method which would allow finer control than the ANC middleware 