See for the discussion in graphqljs Apollo Federation requires that we return the schema as part of the Service field to help the gateway understand all the fields See Fetch Service Capabilities This schema should not contain the directive definitions but should contain all the directives on the types and fields This PR adds a new option to the SchemaPrinter includeDirectiveDefinitions which is on by default Setting it to false will remove the definitions from the top of the schema GraphQLEnumType currently contains a hardcoded Coercing internally which cannot be set or modified by developers It would be useful if we could provide a custom Coercing for enums in the RuntimeWiring as it is with Scalars This would allow us to represent GraphQL enums internally by our own enums without matching names or other classes According to the order of the encoding should be done later so this was moved to AstPrinter from AstValueHelper The relevant tests were also moved to the AstPrinterTest file to test the string returned by StringValues in value Failing tests in the AstValueHelperTest file have been modified to ensure correctness with the issue Add failing tests to showcase the current problems with values to Ast via default values printing add new internalInputValueToAst method to Coercing to convert internal intput value into ast See for the same GraphQLjs issue This is a rough and ready merge of with the conflicts SOMEWHAT resolved to allow us to see what has changed This does not compile and we would need to do a true fix up to accept it I just wanted to use GitHub to share the differences in a rough sense Ultimately the original PR should rebase master with their intended changes Describe the bug We have a GraphQL query that calls a DataLoader that should combine several items into a single batch It appears to be combining all but the last item dispatching the request and then dispatching a second batch containing the last item When the query show below runs we can see that StoreServicegetNumEmployees is called five times followed by EmployeeCountBatchLoaderload with the five IDs After that completes StoreServicegetNumEmployees is called again with the last ID and then EmployeeCountBatchLoaderload is called once with the last ID Rearranging the query always result in the last chunk of the query being run in a separate loader If the query was ordered first second last group getNumEmployees would be called three times EmployeeCountBatchLoaderload would be called and then getNumEmployees would be called three times followed by another call to EmployeeCountBatchLoaderload To Reproduce Using javagraphql which includes javadataloader The resolver public class StoreResolver implements GraphQLResolverStore public CompletableFutureInteger getNumEmployeesStore store return storeServicegetNumEmployeesstore The service public class StoreService public CompletableFutureInteger getNumEmployeesStore store BREAKPOINT ON NEXT LINE COUNTS SERVICE CALLS return employeeCountDataLoaderloadstoregetStoreId The data loader Bean public DataLoaderPairString Boolean Integer employeeCountDataLoader return DataLoadernewMappedDataLoaderemployeeCountBatchLoader The batch loader public class EmployeeCountBatchLoader implements MappedBatchLoaderString Integer Override public CompletionStageString Integer loadSetString storeIds BREAKPOINT ON NEXT LINE COUNTS DATALOADER CALLS return CompletableFuturesupplyAsync Call the repository and process return a map of Store ID employee count And the query query first storeid id numEmployees second storeid id numEmployees group storesids id numEmployees last storeid id numEmployees Describe the bug The graphqllanguageAstValueHelperastFromValue method encodes String objects according to JSON aka graphql encoding rules However its to early This should be done in the AstPrinter So all the graphqllanguageAstValueHelperTest that dpo encoding are wrong To Reproduce type Query field arg SomeType name special String with n chars and chars and so on Int input SomeType name String Throw this at the AST print to find out This PR adds an analyzer which produces a query execution tree for a query A query execution tree is a tree representing a query where all fragments and merged fields are resolved 