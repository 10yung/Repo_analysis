 edition slightly more functional style using operator over unwrap Implementation of Refer to In std the linked list was implemented based on Box type But its wrong Box uses Unique which requires that it the referent of the pointer should not be modified without a unique path to the Unique reference This effectively means that Unique doesnt allow aliases but this rule violated by the prev pointer which point to the same node as a Unique Probably related to the latest changes in traviscargo Hello there I noticed the follow solutions possibly more I may have missed use the libc crate and are written in ways that will fail to compile on nonUnix system handleasignalrs use libcSIGINT declaration inputisterminalrs use of the libcSTDINFILENO constant outputisterminalrs use of the libcSTDOUTFILENO constant Reimplementing the solutions such that they are crossplatform would be ideal However if thats not the direction of this project I still feel as though a small comment warning about OS requirements would be a courtesy for people trying to build them There has to be a way to sanely do anonymous recursion with closures but this is the best I could come up with rust use stdcellCell fn main let id a a as Fnu u let fib fibp Cell Fnu u fibp Cellnewid fib n u if n n else fibpgetn fibpgetn fibpset fib as Fnu u println fib Im not planning on submitting a pull requestposting this to Rosetta Code because no one should ever do this but Im posting it here in the hopes that someone knows how to do better Id like to open a discussion about howwhat we could do to help smooth the process of getting the solutions here on Rosetta code and the solutions on Rosetta code here less of a priority This would definitely be a cool problem and likely involve using html ever or whatnot For a first go itd be best to start with some sort of cargo run invocation that would go and check notifying the user if any arent the same Hi I was working on the power set problem only after finding that there is already one I have taken a different approach Is there a reason why the Rust power set present in this repository is not present in Rosetta Code Replace Vec usage by iterators The issues below lead people to collect iterators into a Vec instead of returning them Blocking issues Lack of a yield keyword This forces you sometimes to declare a new struct if you want to return an iterator Of course you must implement the Iterator trait for it and write a function which returns an iterator of this kind Lack of anonymous return types This makes iterator composition very painful Affected code Roots of unity Sieve of Erathostenes Aks test for primes Range expansion Anagrams Almost prime Isaac Cipher Return unboxed closures Blocking issues Lack of anonymous return types Affected code Function composition Currying Other We should be able to use const fn to replace our compiler plugin in in Compile Time Calculation Should we port the tasks that are already on rosettacodeorg to current Rust Some of them are in Rust and I believe will need some adjusting to keep compiling Others may not even be possible at all with the current status of closures eg the Y combinator one I believe modifying them and holding them here would be a good way to make sure they stay up to speed with the language changes instead of letting them slowly bitrot Below is a list of tasks that currently have a Rust solution Some of them have already been recreated here too but a good number of them arent I think it would be also a nice task for people new to the language who want to try their hand at modifying something that is almost working What do you think x doors x Bottles of Beer x AB x Ackermann function x AKS test for primes x Anagrams x ArithmeticComplex x AveragesArithmetic mean x Binary digits x Binary search x BitmapWrite a PPM file x Bitwise operations x Bulls and cows x Check input device is a terminal x Check output device is a terminal x ClosuresValue capture x Combinations x Comma quibbling x Commandline arguments x Comments x Concurrent computing x Count in octal x Deal cards for FreeCell x Dining philosophers x Empty program x Entropy x Enumerations x Even or odd x Factorial x Fibonacci nstep number sequences x Fibonacci sequence x File IO x File size x Find limit of recursion x FizzBuzz x Gray code x Greatest common divisor x Guess the number x Guess the numberWith feedback x Guess the numberWith feedback player x Hello worldStandard error x Hello worldText x Hello worldWeb server x Horners rule for polynomial evaluation x Increment a numerical string x Infinity x Integer sequence x Knapsack problem x Knuth shuffle x Letter frequency x Levenshtein distance x Lookandsay sequence x Loop over multiple arrays simultaneously x LoopsBreak x LoopsContinue x LoopsDownward for x LoopsFor with a specified step x LoopsInfinite x LoopsNested x Luhn test of credit card numbers x Middle three digits x Mouse position x Mutual recursion x Nqueens problem x Ordered words x Playing cards x Program name x Quine x Random numbers x Read entire file x Reverse a string x Roman numeralsDecode x Roman numeralsEncode x Rot Scripted main x Sieve of Eratosthenes x Singlylinked listElement definition x Sort an integer array x Sorting algorithmsInsertion sort x Sorting algorithmsQuicksort x Sorting algorithmsSleep sort x String case x String concatenation x Strip whitespace from a stringTop and tail x Sum and product of an array x Sum of squares x The Twelve Days of Christmas x Towers of Hanoi x Unicode variable names x Unixls x Vigen re cipher x Y combinator 