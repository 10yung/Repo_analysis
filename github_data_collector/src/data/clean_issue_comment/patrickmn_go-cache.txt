Hi I am having a doubt What happens when cache memory gets full and we try to set new values in it Actually I am using this library in a project But somehow I suspect there is some issue in setting data into the cache Somehow empty value gets set in the cache Can this be due to memory issues Please help This is convenient when you need to lazily compute a function Theres one problem If the compute function takes a lot of time to process it will lock the whole map until it finish recommended to add a parameter on callback function like func c Cache OnEvictedf funcaction int key stringvalue interface I found that there is no method can get multiple value in gocache I think this method is a useful for users If its possible I can make a PR for it It could be nice to be able to retrieve Items that are in cache but already expired I have an expiration time set at min and a cleanup time set at h Im querying a remote API and I want to be able to use my expired Item if the remote API is not answering to keep my service running Ive been playing with something like this the last arg is the one defining if the object is expired go func c cache GetEvenIfExpiredk string interface timeTime bool cmuRLock Inlining of get and Expired item found citems k if found cmuRUnlock return nil timeTime true if itemExpiration if timeNowUnixNano itemExpiration cmuRUnlock return itemObject timeUnix itemExpiration true Return the item and the expiration time cmuRUnlock return itemObject timeUnix itemExpiration false If expiration ie no expiration time set then return the item and a zeroed timeTime cmuRUnlock return itemObject timeTime false This allow me to renew my cache if the object is expired and the remote API is answering or use my cache if anything wrong is happening Not sure if this is of interest for many others or the project in general but it was useful for me and thought Id share My use case is pretty simple and I wanted to keep it simple by adding this so I can use it as a selffilling cache The many different ways that Cache looks for values is duplicated all over so I didnt bother refactoring that all to use this callback unless this idea is of use to others in which case I can do that too I presume there are performance implications to doing that though can you benchmark this go func djb seed uint k string uint var l uint lenk d seed l if l d djb loopd k return d d func djb loopd uint k string uint var l uint lenk i uint loop if i l goto exit d d uint k i i goto loop exit return d Some business caching logic depends on the exact values used for expiration and cleanup of the cache Rather than store these twice what if the cache provided readonly methods for obtaining these values Can you support gomod 