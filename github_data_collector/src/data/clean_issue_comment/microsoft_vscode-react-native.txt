Fixes Feature request to allow debugging expo without expo login or internet connection I understand that expo uses an account and an internet connection for some features but debugging does not use any of expos cloud features The expo cli allows development without logging in and without an active internet connection Actual Behavior Run Debug in Exponent Expo prompts login a Esc or leave username and password blank OR b Internet connection does not exist Debugging fails to launch Expected Behavior Run Debug in Exponent Expo prompts login a Esc or leave username and password blank OR b Internet connection does not exist Debugging launches on LAN or localhost Software versions ReactNative VS Code extension version VSCode version OS platform and version macOS NodeJS version React Native version Expo SDK version include if relevant expocli Outputs Include if relevant Output of the Debug Console View Toggle Debug Console a Error ApiV Error Must provide a username and password to log in b Error Error getaddrinfo ENOTFOUND exphost It would be easier if i can only run logcat without running command React Native Run Android on Device just to start logcat when im disconnected my device from adb and reconnect my devices because when i disconnected my devices and reconnect logcat not showing new log from monitor Actual Behavior connect device to adb run command React Native Run Android on Device logCat Show in Output Panel disconnect device from adb need to repeated step just to run logCat Expected Behavior connect device to adb run command React Native Run Android on Device logCat Show in Output Panel disconnect device from adb reconnect device to adb run command React Native Start LogCat Monitor Software versions ReactNative VS Code extension version VSCode version OS platform and version Android Oreo NodeJS version React Native version Expo SDK version include if relevant Not used As for now extension uses Q promise package for async operations Migration to asyncawait API will allow to remove redundant dependencies from the code base and also make it more consistent and reliable The extension has experimental support for React Native Hermes debugging At this moment we know about several issues related to Hermes debugging Please see the list of known issues below The table of problems consists of two columns first one illustrates the problem when debugging the app with Hermes enabled using prototype of the debugger in the extension second one when Chrome is used for debugging the app If you faced new issues with React Native Hermes debugging with React Native Tools please send them to the commentaries section of this issue The list of issues The debugger doesn t show Global Closure variables The debugger provides only Local variables function scope Google Chrome displays Global variables but Locals arent shown Debugging using VS Code RNT Hermes debugger prototypeDebugging using ChromeResolved img src altdrawingimg src altdrawing The debugger doesn t show value of numeric variables Debugging using VS Code RNT Hermes debugger prototypeDebugging using ChromeResolved img src altdrawingimg src altdrawing The debugger shows additional VMunknown calls in Call Stack brThe debugger displays all the calls as well as Google Chrome but also adds unknown calls Debugging using VS Code RNT Hermes debugger prototypeDebugging using ChromeResolved img src altdrawingimg src altdrawing Logs for problems The debugger doesn t provide complete object data For example Date object Map object there is only an object name without internal data If an object contains an array the debugger doesnt display the objects data Google Chrome displays some objects correctly but not all eg Map object The debugger doesn t provide properties containing in this object See the issue Application crashes on debugging Map and Set objects Debugging using VS Code RNT Hermes debugger prototypeDebugging using ChromeResolved img src altdrawingimg src altdrawing img src altdrawingimg src altdrawing Logs for problem table row Logs for problem table row The debugger doesn t show local variables if there is any array definition in a handler function brThe debugger remove local variables data only when it comes an array definition Google Chrome displays arrays data See the issue RuntimecallFunctionOn returns an empty value on debugging Debugging using VS Code RNT Hermes debugger prototypeDebugging using ChromeResolved Before the array definition brimg src altdrawingimg src altdrawing After the array definition brimg src altdrawing Logs for problem Description Facebook released Hermes JS engine and implemented it to React Native Android This engine is compatible with Chrome DevTools Protocol so we need to investigate how to implement Hermes debugging in React Native Tools Important notice Currently Hermes doesnt fully support Chrome debugger protocol so there are some gaps in its implementation If something not working as expected will be noticed like object inspector bugs in the extension debugger then the same thing should be tested in the latest Chrome Run app attach to it in Chrome check how Chrome debugger behave in the same debug scenario Here is the Hermes debugging issues list Implementation roadmap x Run Android scenario support x Attach to packager scenario support Debug in Expo scenario support Expo doesnt support Hermes yet heres a roadmap for adding it x Support debugging on Android devices x Support debugging on Android emulators x Command pallete commands support x React Native Reload App x React Native Show Dev Menu x React Native Run Android on Device x React Native Run Android on Emulator x React Native Run Element Inspector x React Native Start Packager x React Native Restart Packager x React Native Stop Packager Support existing debug scenarios properties x cwd x target x env x envFile x trace x address x port x logCatArguments x runArguments x skipFiles x launchActivity variant Support multiroot workspaces x Add tests After I built my app on my devicesimulator I dont need to rebuild it every time I start working on it so I need a launch configuration that only starts and attaches to the packager For now Im using Attach to packager but every time I launch VSCode I need to run it twice because the packager control buttons in the status bar are missing So I run Attach to packager so that they appear then start packager then run again Attach to packager I know its possible now with three clicks but it feels unintuitive when it can be one click Related issue Currently debugger uses particular version of ws but as RN team has start bumping ws version that is used in RN for proxy debugger server this version may be inconsistent with the one is used in the extension To avoid any future problems extension should use ws version that is installed in the debuggee app Some time ago experimental support for React native Windows was introduced and at that moment debuging of both UWP and WPF platforms were added Since that time no further work were continued Currently React Native Windows has two main implementations current which is Cmade and will be cosidered as deprecated in the future and vnext which is targeted to future React Native versions and will be rewritten in C to engage new RN architectural features such as JSI Here are the list of things that must be done to support newer React Native Windows versions that were made after retesting extension for RNW apps reactnativewindows vnext x On Debug UWP scenario packager throws mutliple Error jesthastemap Haste module naming collision for vnext UWP app Reproduction steps Clone sample app it was created by following Getting started guide shell git clone gitgithubcomruslanbikkininrnwapp git cd rnwapp npm i Install VS Code then install React Native Tools extension Open rnwapp directory in VS Code Press Debug button Select Attach to packager debug configuration in drop down list and press play button Eventually attach process will stuck x Endpoint for bundle has been changed from localhost indexbundleplatformwindows to Appwindowsbundleplatformuwp Issue tracked here on RNW The debugger cannot attach to the application in launch scenario immediately after building the application possibly connected with the fact that RNW application dont waits the debugger to attach and shows errors on application start up because debugger is not attached x The RNW application generates appbundle instead of indexbundle this causes a prewarming issues x Couldnt run current UWP app due to several Couldnt find source file errors while running reactnative runwindows Need help from RNW team Support for current is going away Is there any documentation about this x Couldnt add WPF platform on new RNW version because looks like its not supported yet Need clarifications from RNW team WPF support is going to be dropped off Is there any documentation about this x Attach to packager scenario doesnt work Need investigation Reproduction steps Clone sample app it was created by following Getting started guide shell git clone gitgithubcomruslanbikkininrnwapp git cd rnwapp npm i Start app reactnative runwindows Wait until Chrome debuggerui tab is opened and app is loaded then close Chrome tab Install VS Code then install React Native Tools extension Open rnwapp directory in VS Code Press Debug button Select Debug UWP debug configuration in drop down list and press play button Eventually you will see errors in Debug Console window Show Dev Menu Reload app command palate commands arent supported Once issue is fixed we can fix this As for now extension supports only Attach to packager debug configurations for Haul Please leave your feedback in this issue vote if you are interested in further improving of debugging support for Haul for example adding support for Debug in AndroidiOS configurations You can even name your own improvement that you want to see Please like this post to vote