 State and module declaration everything works fine except for when accessing this inside of a MutationAction When checking this inside of an action I get the following Which populates all properties as expected However logging the context of this inside of a mutationAction yields state getters commit dispatch rootGetters and rootState instead of all of the properties of the class I am unable to access the state from a mutationAction and get undefined when trying to do so export default class User extends VuexModule Action public async USERGETAUTHORIZATIONLISTACTION const res await getRoutesApi Cannot read property getters of undefined What if rescode const list resdatalist thisUSERGETAUTHORIZATIONLISTMUTATElist return res return res Why Cannot read property getters of undefined when i use await I create Module in indexts import Store ActionTree from vuex import getModule from vuexmoduledecorators import cartModule from storecartindex let cartStore cartModule const initializer store Storeany void cartStore getModulecartModule store export const plugins initializer export cartStore but when I try call to action in Component import cartStore from store Component onClick void cartStoreadditemthen I have error Uncaught in promise Error ERRSTORENOTPROVIDED To use getModule either the module should be decorated with store in decorator ie Modulestore store or store should be passed when calling getModule ie getModuleMyModule thisstore but if I add in the component import cartStore from store import getModule from vuexmoduledecorators import cartModule from storecartindex Component onClick void cartStoreadditemthen protected created getModulecartModule thisstore Its work why why its happened Hi I use nuxt auth module for Authorization Start using this moudule it is not working When I use axios create a plugin accesor for axios module How I create an accessor for auth module looking through the issues and having myself various problem during setting this up with nuxtjs and typescript is this ready for production Or is it just safer to just go with typed vanilla vuex modules When updating the vuexmoduledecorators version in my application to I encountered an error in browser console RangeError Maximum call stack size exceeded I searched for a reason a long time but it turned out that the cause of the error in the class property name I prepared an example to demonstrate the situation I am no longer used in code store as name of the property but the information may be useful to someone I think having different values for root value and namespaced value modules instead of setting both to value helps being confident that namespaced module is used in this case maybe its obvious but well I think its clearer this way I have the requirement to pass my module objects to a plugin which dynamically registers it for me Therefor I require to be able to save the module in a variable after its compiled And I need to add some extra props to that object as well on the root level of the module Is this possible Hi there I try to unit test a module with name Because the framework itself is tested I tried to modify the test case to have a nd one with reset state However the exact same test fails if its executed twice I copied the whole testbecause I wasnt sure if random execution order was enabled The nd time the test runs the initial state has the count set to and not reset Is this intended If so hows it possible to reset the module to a clean state I tried several options to test my personal module but didnt have any luck either Thanks for your time effort and the great decorators Regards Marcel Could there be a section added to the README explaining how to unregister and register decorated modules dynamically rather than them always being part of the main store