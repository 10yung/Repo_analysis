Im trying to add rawwindowhandle to rustsdl which requires running bindgen to get the right bindings but the build fails with a bunch of import errors in pixelsrs The project builds fine without bindgen so it looks like the references to the pixel format enum values needs to be updated use sysSDLPixelFormatEnum instead of sys Would I be ok to fix this myself Some were i others for mouse were u It cannot be negative because its not an error variable so its always positive and thus safe to use u here Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend As discussed in issue I tried searching through the existing issues and didnt see this discussed so Im opening this issue mostly for information Feel free to close it if it doesnt apply here for some reason Im not really a user of SDL anyway just got referred to the unsafetextures solution when discussing scoped lifetimes elsewhere The underlying issue is that features are compilerwide If Ive got a project with a binary crate that depends on rustsdl and a third party library crate that also depends on rustsdl then specifying one of these crates to use unsafetextures will change the API for both of them Or alternatively if Ive got a project that compiles just fine without using unsafetextures and then I add a new dependency that also depends on rustsdl but specifies the unsafetextures feature then my original project will fail to compile This isnt limited to compilation fails though The implementation of Texturedrop changes based on that feature as well So if one crate depends on the Texture cleaning up on Drop then even if the crates somehow manage to compile all of those textures will start leaking if another crate in the same project depends on the unsafetextures feature As long as there are no third party helper libraries for rustsdl that handle Textures this isnt really a problem If these start appearing then the unsafetextures feature may have an effect of splitting the ecosystem into libraries that require unsafetextures and libraries that are not compatible with unsafetextures Some of the errors returned by the library implement the stderrorError trait and some are just Strings I propose all errors returned by the library implement stderrorError to simplify error handling for consumers In the cases where we only have a String to return this can be wrapped in an enum that implements Error This would of course be a breaking change Would you be interested in a PR for this Hello there I recently have been trying to get multiple viewports to work using rustsdl but havent been having much luck I have some code that looks like this rust window is x running loop cornflower blue clear color canvassetdrawcolorColorRGB canvasclear set viewport to be top left quadrant canvassetviewportsdl rectRectnew i i u u canvassetdrawcolorColorRGB canvasfillrectrect draw rect calculated from ndc to viewport dimensions update viewport to be top right quadrant canvassetviewportsdl rectRectnew i i u u canvassetdrawcolorColorRGB canvasfillrectrect draw same rect canvaspresent However when I run I only see this If I swap the order of the top left and right quadrant I see this instead So it appears only the first viewport set is rendered Ive played around with adding an extra present but then I wind up getting some horrible strobing effects where one quad draws fine and the other flickers nonstop Is what Im trying to do something that should be possible or do I need to draw to an offscreen texture first and then present those Apologies if Ive missed something blindingly obvious Thank you very much for your time Tom Im really struggling to design my app with some of the limitations of lifetimes related to fonts I basically have a struct that gets initialised on my app start and doesnt get dropped it looks like this pub struct Context pub canvas Canvassdl videoWindow pub texturecreator TextureCreatorsdl videoWindowContext pub input Input pub tff Sdl TtfContext I was able to get around the texture lifecycle issue with unsafetextures is there a way I can do something similar with fonts Likely optimized away by the compiler since not marked as volatile OS Windows Rust active toolchain stablex pcwindowsmsvc default rustc e Steps to reproduce Run cargo run example renderertarget release Expected rotating rectangle on screen Actual black screen Note All OK in debug mode Potential fix using the volatile crate This PR tries to address Issue Remarks Id like to get rid of the magic numbers here and create constants for these boundaries what would be the best way to do this Ive added custom messages to the assertions I dont know if this is desirable or not Big plus a MacOS system user thats able to test this would be awesome 