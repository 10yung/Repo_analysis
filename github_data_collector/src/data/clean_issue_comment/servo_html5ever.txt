Instead of using Vecextend with usercontrolled piles of nodes which could trigger arbitrarily large heap allocations use space that was already allocated when constructing the tree the parent pointers can serve the same purpose as a recursion stack Also I think the previous implementation would remove all the children of a node even if there were still other strong references to that node so this implementation should be more generally correct I cant find release notes I cant find a changelog I cant find what has changed in the API so Im struggling to update my code use html everrcdomHandle RcDom could not find rcdom in html ever It seems like has been a major change of the API and RcDom has been dropped entirely all of my code is incompatible and I dont even know where to start fixing it html ever v is unaware of the decoding attribute QualNamenewNone ns localnamedecoding doesnt recognize the name Is there another way to create the attribute The implementation in is fairly simplistic and does not reflect the complexity described by The documentation explains well what is the local name in general from HTMLXML perspective but doesnt say anything about its usage in this particular Rust implementation For example How to get the name as str How to compare the name against several names in match How to create a new one new says its a Simple constructor function but its absolutely not simple because it requires an instance of a peculiar AtomLocalNameStaticSet type Atom StaticAtomSet and PhfStrSet are not reexported in the crate so I cant see their documentation Theres LocalNameStaticSetget that appears to return something stringlike but when I call qualnamelocalget it seems to match a different method on Atom that requires an undocumented argument I would be great to have an example or more explicit docs that shows how to search and modify the dom or did I just not find that srcmainrs rust use stdfs use stdioCursor use stddefaultDefault extern crate html ever use html everparsedocument use html everdriverParseOpts use html evertendrilTendrilSink use html evertreebuilderTreeBuilderOpts use html everrcdomRcDom fn main let buf fsreadfailingexpectUnable to read file let mut buff Cursornewbuf let opts ParseOpts treebuilder TreeBuilderOpts dropdoctype true scriptingenabled false Defaultdefault Defaultdefault match parsedocumentRcDomdefault opts fromutf readfrom mut buff Cargotoml package name rustwarcstreamingparser version authors Jacek Wielemborek d tahgmailcom dependencies html ever thread main panicked at assertion failed cissome homed tahcargoregistrysrcgithubcom ecc db ec html ever srctokenizermodrs stack backtrace stdsysunixbacktracetracingimpunwindbacktrace at libstdsysunixbacktracetracinggccsrs stdsyscommonbacktraceprint at libstdsyscommonbacktracers at libstdsyscommonbacktracers stdpanickingdefaulthookclosure at libstdpanickingrs stdpanickingdefaulthook at libstdpanickingrs stdpanickingrustpanicwithhook at libstdpanickingrs stdpanickingbeginpanic at checkoutsrclibstdpanickingrs html evertokenizerTokenizerSinkdiscardchar at panic macros html evertokenizerTokenizerSinkstep at homed tahcargoregistrysrcgithubcom ecc db ec html ever srctokenizermodrs html evertokenizerTokenizerSinkrun at homed tahcargoregistrysrcgithubcom ecc db ec html ever srctokenizermodrs html evertokenizerTokenizerSinkfeed at homed tahcargoregistrysrcgithubcom ecc db ec html ever srctokenizermodrs html everdriverParserSink as tendrilstreamTendrilSinktendrilfmtUTF process at homed tahcargoregistrysrcgithubcom ecc db ec html ever srcdriverrs tendrilstreamUtf LossyDecoderSink A as tendrilstreamTendrilSinktendrilfmtBytes Aprocess at homed tahcargoregistrysrcgithubcom ecc db ec tendril srcstreamrs tendrilstreamTendrilSinkreadfrom at homed tahcargoregistrysrcgithubcom ecc db ec tendril srcstreamrs rustwarcstreamingparsermain at srcmainrs stdrtlangstartclosure at checkoutsrclibstdrtrs stdpanickingtrydocall at libstdrtrs at libstdpanickingrs rustmaybecatchpanic at libpanicunwindlibrs stdrtlangstartinternal at libstdpanickingrs at libstdpanicrs at libstdrtrs stdrtlangstart at checkoutsrclibstdrtrs main libcstartmain start And heres failing file compressed with zip failingzip This is needed for speculative parsing in Servo where one needs to send the tokenizer state between threads I created a Sendable trait which is implemented by both the Tokenizer and the TreeBuilder Servo side PR Hi for issue I was writing a small TokenSink implementation And to be honest it took me good halfhour to hour for that simplistic implementation I think what we might need is better docs and possibly some convenience method One pain point was adding following part rust let tokfeed mut input tokend Do we need a different tokfeed and tokend methods Can they be let tokexec mut input One thing that also irked me was that I couldnt have implemented was to have tokenizer abort when encountering anything that isnt Text token This is a feature request for the ability to correct bad input by stripping away parts that are not conforming to the spec This is mostly useful for sanitizers especially for pages that want to ensure that their contents are valid HTML This is a feature request for html ever because of the intimate knowledge of the spec required