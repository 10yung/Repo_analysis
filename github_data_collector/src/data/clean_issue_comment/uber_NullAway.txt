Thank you for contributing to NullAway Please note that once you click Create Pull Request you will be asked to sign our Uber Contributor License Agreement via CLA assistant Before pressing the Create Pull Request button please provide the following A description about what and why you are contributing even if its trivial I fixed by printing the inner class as well as the field name eg Barfoo whenever the field is not from the outermost class in the file The issue numbers or PR numbers in the description if you are contributing in response to those Trying to solve If applicable unit tests I fixed unit tests Add support for JEP Records Preview to NullAway This depends on upstream support in Checker Framework I dont think that support for records in Error Prone is strictly required There are bug patterns that will throw exceptions or print incorrect warnings when compiling code with records However since those bug patterns can be disabled I dont think that NullAway depends on those issues being fixed in the same way it depends on the issues in Checker Framework being fixed As I mentioned in the upstream issue my modified copy of NullAway is giving me useful feedback about records java record FooString a Nullable String b java Foo x new Foonull error because a is nonnull Foo y new Foo null ok Systemoutprintlnyalength ok Systemoutprintlnyblength error because b is nullable Thats a toy example but its also working with real examples I changed all of my recordlike classes in one project to be actual records classes or so with a mix of nullable and nonnull properties and the compiletime feedback regarding nulls seems to be as good as it was before If I introduce an error like removing a null check on a property of a record before dereferencing that property NullAway correctly identifies the error To give a sense of scope these are the changes I made to NullAway to get there diff diff git anullawaysrcmainjavacomubernullawayNullAwayjava bnullawaysrcmainjavacomubernullawayNullAwayjava index a c dbf b anullawaysrcmainjavacomubernullawayNullAwayjava bnullawaysrcmainjavacomubernullawayNullAwayjava public class NullAway extends BugChecker set of all nonnull instance fields f such that some constructor does not initialize f SetSymbol notInitializedInConstructors SetMultimapMethodTree Symbol constructorInitInfo if entitiesconstructorsisEmpty if classSymbolgetKindnameequalsRECORD constructorInitInfo null notInitializedInConstructors ImmutableSetof else if entitiesconstructorsisEmpty constructorInitInfo null notInitializedInConstructors entitiesnonnullInstanceFields else public class NullAway extends BugChecker do nothing break default if memberTreegetKindnameequalsRECORD do nothing break throw new RuntimeException memberTreegetKindtoString stategetSourceForNodememberTree public class NullAway extends BugChecker case ANNOTATIONTYPE return false default if kindnameequalsRECORD return false return true Not too bad right Im sure that Ive missed corner cases and therell be more to it but for the most part it seems like records can be treated like regular classes See for further discussion There we added a bailout check to avoid a crash but we should understand what is going on here cc shas Use Present annotation on the return of the method that is assuredly returning a nonempty optional Following test should pass Test public void OptionalEmptinessPresentTest compilationHelper setArgs ArraysasList d temporaryFoldergetRootgetAbsolutePath XepOptNullAwayAnnotatedPackagescomuber XepOptNullAwayUnannotatedSubPackagescomuberlibunannotated XepOptNullAwayCheckOptionalEmptinesstrue addSourceLines TestNegativejava package comuber import comgooglecommonbaseOptional rgcheckerframeworkcheckeroptionalqualPresent import comgooglecommonbaseFunction public class TestNegative class ABC present OptionalObject getTheOptionalint x ifx return Optionalofnew Object return Optionalofnew Object void foo ABC abc new ABC no error since present annotation on the invoked method abcgetTheOptional gettoString doTest Consider the code in a Foojava file class Foo Nullable private Object foo private static class Bar private Object foo Currently if Barfoo is not properly initialized the user will get an error like FoojavaXX error NullAway NonNull field foo not initialized private Object foo With only the line number XX giving any indication that this refers to Barfoo not Foofoo Given the file name the user will naturally check Foofoo see its Nullable and be confusedlose confidence in the tool even though the warning is legitimate for Barfoo This is a rare corner case but it is bad UX and could be fixed by printing the inner class as well as the field name eg Barfoo whenever the field is not from the outermost class in the file This is low priority but would be an excellent first issue for someone dipping their toes in NullAway In its not quite smart enough to follow this public AppEngineWebXmlProjectStageConfiguration build PreconditionscheckStatesourceDirectory null No source directory supplied PreconditionscheckStatestagingDirectory null No staging directory supplied return new AppEngineWebXmlProjectStageConfiguration thissourceDirectory thisstagingDirectory thisdockerfile thisenableQuickstart thisdisableUpdateCheck thisenableJarSplitting thisjarSplittingExcludes thiscompileEncoding thisdeleteJsps thisenableJarClasses thisdisableJarJsps thisruntime That is in a Builder inner class Im using PreconditionscheckState from Guava instead of PreconditionscheckNotNull because an IllegalStateException is slightly more appropriate here than a NullPointerException Whatever the exception type though the return line cant be reached when sourceDirectory or stagingDirectory are null However Nullaway thinks these can be reached in that case X If you think you found a bug please include a code sample that reproduces the problem A test case that reproduces the issue is preferred A stack trace alone is ok but may not contain enough context for us to address the issue X Please include the library version number including the minor and patch version in the issue text Found this false positive in the code while using class Aclass class Name Nullable String firstName Nullable String lastName Nullable String middleName Contractnull true public boolean isBlankNullable String string return string null stringtrimlength private ObservableInteger filterThenMapObservableName observable return observable filtername isBlanknamefirstName namemiddleNamenull filtername namelastNamenull mapname namefirstNamelength This gives warning NullAway dereferenced expression namefirstName is Nullable at mapname namefirstNamelength Can nullaway check the default package ie in the top directory of the class path Neither XepOptNullAwayAnnotatedPackagesfoo nor XepOptNullAwayAnnotatedPackagesfoo seem to work Lets consider the following example java import orgjavamoneymonetaspiDefaultNumberValue import javaxannotationNullable import javaxmoneyCurrencyUnit import javaxmoneyMonetary import javaxmoneyNumberValue import javamathBigDecimal import javautil import javautilstreamCollectors class Scratch public static void mainString args CurrencyUnit czkCurrency MonetarygetCurrencyCZK ListPriceVersion prices ArraysasList new PriceVersion PriceTypeEXFACTORY null czkCurrency new PriceVersion PriceTypeEXFACTORY DefaultNumberValueofnew BigDecimal czkCurrency pricesstream filterprice pricegetValue null collectCollectorstoMap PriceVersiongetType price pricegetValuenumberValueBigDecimalclass public static final class PriceVersion private PriceType type Nullable private NumberValue value private CurrencyUnit currency public PriceVersionfinal PriceType type Nullable final NumberValue value final CurrencyUnit currency thistype type thisvalue value thiscurrency currency public PriceType getType return type Nullable public NumberValue getValue return value public CurrencyUnit getCurrency return currency public enum PriceType EXFACTORY the NullAway reports NullAway dereferenced expression pricegetValue is Nullable Which is correct but Ive previously checked that its not and now it would be cumbersome to check again just to make the compiler happy Is basic control flow analysis of streams out of scope of this lib or would it make sense to support details summarymaven effective pomsummary xml plugin groupIdorgapachemavenpluginsgroupId artifactIdmavencompilerpluginartifactId version version configuration combineselfappend compilerIdjavacwitherrorpronecompilerId forceJavacCompilerUsetrueforceJavacCompilerUse source source target target compilerArgs combineselfoverride argWerrorarg argXlintallfallthroughprocessingserialclassfilearg argparametersarg argXDcompilePolicysimplearg argXepDisableWarningsInGeneratedCodearg argXepOptImmutableKnownImmutablejavaxmoneyCurrencyUnitarg argXepConstantFieldWARNarg argXepClassNameWARNarg argXepDivZeroWARNarg argXepEmptyIfWARNarg argXepIterablePathParameterWARNarg argXepLongLiteralLowerCaseSuffixWARNarg argXepAnnotationPositionWARNarg argXepEmptyTopLevelDeclarationWARNarg argXepEqualsBrokenForNullWARNarg argXepFunctionalInterfaceClashWARNarg argXepInvalidInlineTagWARNarg argXepInvalidParamWARNarg argXepMissingDefaultWARNarg argXepNonCanonicalStaticMemberImportWARNarg argXepPrimitiveArrayPassedToVarargsMethodWARNarg argXepRedundantOverrideWARNarg argXepRedundantThrowsWARNarg argXepStaticQualifiedUsingExpressionWARNarg argXepStringEqualityWARNarg argXepUnusedExceptionWARNarg argXepConstantFieldWARNarg argXepMultiVariableDeclarationWARNarg argXepMultipleTopLevelClassesWARNarg argXepMultipleUnaryOperatorsInMethodCallWARNarg argXepPrivateConstructorForUtilityClassWARNarg argXepUngroupedOverloadsWARNarg argXepNullAwayERRORarg argXepOptNullAwayAnnotatedPackagescomcogvioarg argXepOptNullAwayTreatGeneratedAsUnannotatedtruearg argXepOptNullAwayAcknowledgeRestrictiveAnnotationstruearg argXepOptNullAwayKnownInitializersorgspringframeworkbeansfactoryInitializingBeanafterPropertiesSetarg argXepOptNullAwayExcludedFieldAnnotationsjavaxpersistencePersistenceContextorgspringframeworkbeansfactoryannotationAutowiredarg compilerArgs annotationProcessorPaths combineselfappend path groupIdcomubernullawaygroupId artifactIdnullawayartifactId version version path annotationProcessorPaths showWarningstrueshowWarnings configuration dependencies dependencies dependency groupIdorgcodehausplexusgroupId artifactIdplexuscompilerjavacerrorproneartifactId version version dependency dependency groupIdcomgoogleerrorpronegroupId artifactIderrorpronecoreartifactId version version dependency dependency this only adds our custom LibraryModels groupIdcomcogviopmgroupId artifactIdbuildtoolsnullawayartifactId version SNAPSHOTversion dependency dependencies dependencies plugin details I am using nullaway version and When i am trying to exclude the package indemomyappmodels indemomyappmodelsdao not working Sample code taskswithTypeJavaCompile if nametoLowerCasecontainstest optionscompilerArgs XepNullAwayERROR XepOptNullAwayAnnotatedPackagesindemomyapp XepOptNullAwayUnannotatedSubPackagesindemomyappmodels 