In javascript style guide According to rule if i trying to access property key of opts by using dot notation or square bracket there is chances of type error Why Because if opts receive null value when handleThings function invoked then default value empty object not assign to the opts argument So this is happen then user will get uncaught type error Example function handleThingsopts consolelogoptsnotificationEnabled handleThingsnull When you run this code you will get an error called Uncaught TypeError Cannot read property notificationEnabled of null I noticed that babelpresetairbnb added the following stage proposals in v babelpluginproposalnullishcoalescingoperator babelpluginproposaloptionalchaining Are there any rulesguidelines for these features The maxclassesperfile rule is enabled in rulesbestpracticesjs but there is no mention of this requirement in the docs If this is a best practice Id like to know why The following comment implies that there should be no new lines at the beginning of a file But that is not what the rule is configured to do Currently the rule allows one empty line at the beginning of a file which seems strange For example Dog js This is how my dog class should be with no empty lines at the beginning of the file class Dog Dog js I accidentally put a new line at the beginning of the file but the Airbnb eslint rules dont care about this and give no errors class Dog Dog js I accidentally put two new lines at the beginning of the file the Airbnb eslint rules care about this and throw an error class Dog It looks like maxBOF should be changed to maxBOF correct me if I am wrong When rounding data it is recommended to use the method under math for operation of pure numeric data and parseInt for string type numbers which is more semantic and more in line with the definition of function parameters Part The current Airbnb config has the importextensions ESLint rule turned on However the reasoning for this is not given on the official style guide and even the fact that the rule is turned on at all is not documented on the style guide For example there should be a blurb added to the section on modules that says something along the lines of bad import foo as foojs good import foo as foo Question Can this be added documented Part I searched around for some justification for this rule In ljharb says that Youre not supposed to use the extension there The best practice for file extensions on imported code is to omit them which is why our config requires that as well and the only time you should use extensions in requireimport paths is if youre importing JSON files or if youve made any nonstandard changes to allow requires of alternate extensions like css or svg or jpg With js jsx or mjs files you should always omit the extension Question Why exactly is it best practice that they should be omitted Is it just so that ES style module imports moreclosely mimic the old CommonJSstyle imports If so that seems like a superficial reason And related Even Mozilla has file extensions in their official documentation for the import statement So is there disagreement about what is best practice or is Mozilla in error here Part In some users bring up the fact that the importextensions rule breaks code written for browsers without any transpilation ljharb counters with browsers do not care about extensions whatsoever only node does From a technical standpoint browsers do not care about file extensions But the fact of the matter is that on a lot of websites or even most websites JavaScript files are served to the browser from a public subpath or something similar that maps to an internal file system So at least for a lot of websites the file extension is required in the import statement for ES style modules to work ljharb also says Regardless youll want to always use a bundler and transpile to CJS for the forseeable future If you make a different choice you may want to override some of our linter settings all of which assume youre following the best practice of using babel and a bundler I can understand that if most of the people in the JavaScript ecosystem are using a bundler then the Airbnb default settings should be designed for people bundling However bundlers can handle file extensions just fine Question Would it make more sense to flip the rule and always require extensions That way any particular piece of JavaScript code will just work in both bundledenvironments and nonbundledenvironments Part As a final point here Id like to reflect on why Airbnb has decided to enforce ES style imports at all The style guide gives the following justification in the modules section Why Modules are the future let s start using the future now But why exactly do we need to start using the future now In my mind it has to do with transpilation The hypothetical moreverbose version of the above sentence might read something like the following Why In the future all browsers will support all of the latest JavaScript features And when that day comes you might feel the need to convert all of the modules in your application to ES style in order to get the code uptodate But there is a way to avoid this future workload simply write your application with ES style modules now and use transpilation in the meantime until browsers catch up One day transpilation will be unnecessary and your code will just work Modules are the future so let s start using the future now If this is indeed the reason why we should start using the future now then I can totally get onboard with the decision to require ES style imports as a ESLint rule being future ready seems like a good thing But if the end goal is to make transpilation unnecessary then enforcing the importextensions rule seems like a step in the opposite direction because it forces code to be transpiled for perpetuity Link to the translation of the React Style Guide in Bahasa This might have been gone over before but a common practice for event handlers currently documented as on is to start them with handle as in handleClick This is seen all over the React docs including the home page and it allows a clear convention for names of props on vs handlers defined on that instance handle Since some people might allow usage of on as the method name of a handler is there any opposition to add handle before the on entry for the reactsortcomp rule Just for be more visual i was create a logo for readme Enforces the existing airbnb style guide rule about default parameters coming last in eslint by using defaultparamlast As this rule was introduced in ESLint I bumped the eslint version in packagejson but I am not sure if that is the right thing to do This is my first PR in this repository 