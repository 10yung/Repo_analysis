 skynet service hadnt GetServiceConfig function it change to NewServiceInfo func main tutorial TutorialService config skynetNewServiceInfoTutorialService configRegion Development service serviceCreateServicetutorial config defer func serviceShutdown waiter serviceStart waiterWait However I found the exception panic runtime error invalid memory address or nil pointer dereference signal xb code x addr x pc x f a e I want to really start looking at skynet should I be using skynet however I cannot see any clear docs on Getting Started Either golang or the Ruby In a nut shell I want to run on my local machine create some Services and see what I can come up with what are the easiest coolest steps to get this going I think this would really helpful for people that want to get to grip oon this beast Thanks Add functionality so we could possibly do sky command FOO and because its not a recognized command it would be forwarded along to the service This would allow implementors to leverage sky for custom things they may want to enable or disable etc Rather than a direct string comparison we should investigate doing something like so that we can have more loose version requirements sky cli should not crash when builddeploy panics etc it should display friendly error message use ioutilReadDir to add tab completion for location of builddeploy config In the event of an entire doozer outage whole cluster is down we would still be able to run in an offline mode due to the fact we are maintaining internal lists of services Services The concept would be that on the service side when we notice we have no more instances of doozer to try we mark ourselves in an offline mode and dont send updates to doozer if we unregister we start hard rejecting traffic We retry to connect to doozer at a set interval and when doozer comes back online we reregister ourselves Client Clients have a list of services so they can still use the pool of connections they have when they notice they have lost all connectivity to doozer after X failed attempts to a given hostport it will manually remove that instance from its pool and the internal instance list so that no new connections are opened to it We retry to connect to doozer at a set interval upon reconnecting we rebuild our internal instance list from scratch and cleanup any pools that we have open to instances that are not in doozer anymore or have unregistered themselves The important thing to note here is that we want to make sure when doozer comes back online any of our wait calls and things like that we get a new revision because if all nodes went down the revision count will start over This isnt a huge priority but i think it would be a cool thing to do at some point to further the concept that skynet is built around that Everything dies it would be nice to have a utility maybe as part of sky and providing it a config file to ensure the number of services exist For Example Region needs to always have a minimum of instances of ServiceA at version Region needs to mirror Region things like this so that if a node goes down loosing services on this node would make the requirement fall under the threshold and the cluster can rebalance by finding new nodes to deploy instances of these services to in order to ensure set minimums 