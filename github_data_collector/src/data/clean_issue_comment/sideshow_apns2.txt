 What version of Go are you using go version go version go linuxamd What OS and processor architecture are you using go env GOHOSTARCHamd GOHOSTOSlinux What did you do Using the Channel example I am trying to push upwards of notifications each with a payload of circa bytes APNS limit is KB What did you expect to see Using connection and workers I expected to see notifications being sent in parallel multiplexed over the H connection and for the workers to process all notifications APNS reporting Max Concurrent Streams What did you see instead I see notifications sent initially but then nothing is transferred until ACKs are received at which time another notifications are sent Again nothing more is transferred until ACKs are received This continues to repeat Further Information APNS RTT is ms Server in London so this takes a long time to process with a ms delay after every pushes Looking in WireShark it appears that APNS are allowing TCP window scaling yet bytes in flight seem to stay below KB at all times If I open two connections from the same server and share the workers so each alternating the speed is much quicker If I create connections and spread the workers over the connections evenly then this is quicker again Of course in the multi connection scenarios the stream limit on each connection is not fully utilised As mentioned above it appears that the inflight bytes are staying below KB at all times on each connection despite APNS advertising a wscale of I see that the Receive Window starts at KB but rapidly increases According to Wireshark the receive window on the APNS side is quickly growing to over KB but looking at the in flight traffic there appears to be a ceiling below KB that is being hit with generally circa KB in flight It doesnt appear to be a CWND issue usually around Current Thoughts My feeling right now is that I am coming up against some sort of buffer limit be that a default within my networking stack or something in the GOLANG NET code perhaps Alternatively is there some sort of limit related to H PUSH again perhaps configurable I have already reached out to sideshow about this who has confirmed that using multiple connections achieved much higher throughput Whilst I can create multiple connections I have created without any issue and this reduced the delivery time to acceptable levels I would really like to get to the bottom of this and feel that with the upcoming depreciation of the older APNS API that many of us would like to get this sorted I should note that I do have a DTS ticket open with Apple around this and whilst that hasnt uncovered anything of significant interest I could use it in conjunction with any feedback here if needed Wireshark graph Here is a Wireshark window scaling graph showing how the traffic is not approaching the receive window img width altapns tcpdumplimited src Thanks Fixes When I call apns it sometimes returns a timeout and the process will shut down I am using go version go darwinamd I have seen and I understand that they have solved itbut there will still be problems My code func ApplePushNotificationServicedeviceToken string parameters string fmtPrintln deviceToken parameters cert err certificateFromP FilehookupAPNSp filename p if err nil logFatalCert Error err notification apns Notification notificationDeviceToken deviceToken notificationTopic comprefermehookup payload payloadNewPayloadAlertparametersAlertBodyparametersBadge SoundsoundwavCustomkey val notificationPayload payload client apns NewClientcertProduction res err clientPushnotification if err nil logFatalpush Error err fmtPrintfv v v n resStatusCode resApnsID resReason error log push ErrorPost dial tcp lookup apidevelopmentpushapplecom on read udp io timeout Go standard crypto package only support unencrypted PKCS private keys so this function cannot parse encrypted PKCS private keys func parsePrivateKeybytes byte password string cryptoPrivateKey error var key cryptoPrivateKey key err x ParsePKCS PrivateKeybytes if err nil return key nil x ParsePKCS PrivateKey not support parse encrypted PKCS private keys key err x ParsePKCS PrivateKeybytes bytepassword if err nil return key nil return nil ErrFailedToParsePrivateKey I tried another resposity it works maybe you can merge into your project Hi I read the code of clientmanagergo and I have a question about mutex For example one part func m ClientManager Addclient Client go mmuUnlock mremoveOldest mmuLock two part go func m ClientManager removeOldest mmuLock ele mllBack mmuUnlock if ele nil mremoveElementele func m ClientManager removeElemente listElement mmuLock defer mmuUnlock mllRemovee deletemcache eValuemanagerItemkey It seems that it can not need two mmuLock The below codes are right func m ClientManager Addclient Client go mremoveOldest If I just use mmuLock once it is not good for high concurrency Can you answer me about this question I appreciate it Please ensure that you are using the latest version of the master branch before filing an issue Also make sure to include logs if applicable to help reproduce the issue by setting the GODEBUGhttp debug env var What version of Go are you using go version What OS and processor architecture are you using go env linux amd What did you do Heres my code simulate the situation which reach the MaxAge go cert certificateFromPemFilecertpem manager apns NewClientManager managerMaxAge timeSecond for resp err managerGetcertProductionPush apns NotificationTopic apnsTopic DeviceToken deviceToken Payload payload fmtPrintlnresp err timeSleeptimeSecond What did you expect to see ClientManager create a new client and the underlying connections of old client should be closed by GC or call clientCloseIdleConnections What did you see instead netstat and lsof shows that number of open connections keep increasing Maybe ClientManager should close idle connections on removing old client If do this so what if another goroutine using the same client while we call clientCloseIdleConnections ClientManager is a great class it would be nice to have a version of this class TokenClientManager which works for JWTAuth token based clients It looks like this could be done without too much effort make the Get method take a tokenToken change cacheKey to be based on tokenToken instead of tlsCertificate make Factory take a tokenToken instead of a tlsCertificate When you try to send data with an invalid certificate you get this error Post http Transport peer server initiated graceful shutdown after some of RequestBody was written define RequestGetBody to avoid this error This makes it look like a connection or implementation issue while it is not When looking at the http logs you can see that the gateway is explicitly telling you why they are cutting connection the certificate is wrong APNsConnectionCuttxt The interesting part is http Transport received GOAWAY len LastStreamID ErrCodeNOERROR Debug reason BadCertificateEnvironment While it would have been nice from the Gateway to use the usual status error code to tell that the certificate is wrong it does not If there is an easy way to read GOAWAY frames to return an error that includes the eventual Debug field from Transport it would be great to use it If not you may archive this report Version go Env running on darwinamd same issue with a static binary on linux HowToReproduce posting one silent push notification with an invalid certificate observed on prod gateway Observed clientPush returns a connectionimplementation error Expected clientPush returns a error that includes the Debug field of the associated Transport when available The default golang http connection pool is good but lacks some important features which would be useful for the apns library There is currently no way to have a minimum amount of TLS connections open throughput There is currently no way to have a maximum amount of TLS connections open avoids exhausing resources Similarly there is no way to control when connections are opened or closed Connections are currently not opened until the first request is sent There is currently no way to connect before the first push is sent There is no visibilitystats into how many tcp connections and requests are currently active There is no ability to control pings an keep connections alive from the pool See issues Ideally we want to write a custom connection pool to address the above issues It should have reasonable defaults so that no configuration is needed out of the box but provide the correct settings to customize for those that are using apns at scale Document common APNs gotchas and errors devprod gateway etc x Examples of how to use with go channels and go routines Document Client timeout behaviour issue Document ClientManager and concurrent access safety issue Document Generating correct pemp certificates issue and issue 