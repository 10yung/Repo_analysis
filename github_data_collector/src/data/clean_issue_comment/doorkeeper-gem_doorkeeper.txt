 Summary Revocation of tokens on first use doesnt work with enabled hashtokensecrets Steps to reproduce Call DoorkeeperAccessGrantrevoke User tries to grant again get OAuth Error invalidgrant error when using oauth gem Expected behavior User can grant again after user revokes grant And create new AccessGrant Actual behavior AccessGrant does not care revoked or not AccessToken uses where revokedat nil System configuration I confirmed with adding a rough scenario to spec of master git revparse HEAD c df caf c f accb af c aa eb git diff diff git aspecrequestsflowsauthorizationcodespecrb bspecrequestsflowsauthorizationcodespecrb index eb f ea d b aspecrequestsflowsauthorizationcodespecrb bspecrequestsflowsauthorizationcodespecrb feature Authorization Code Flow do accesstokenshouldhavescopes public write end scenario revoke do visit authorizationendpointurlclient client scope public clickon Authorize DoorkeeperAccessGrantfirstrevoke DoorkeeperAccessGrantdeleteall pass when delete visit authorizationendpointurlclient client scope public write clickon Authorize authorizationcode DoorkeeperAccessGrantfirsttoken createaccesstoken authorizationcode client accesstokenshouldexistforclient resourceowner accesstokenshouldhavescopes public write end scenario returns new token if scopes have changed do clientisauthorizedclient resourceowner scopes public write visit authorizationendpointurlclient client scope public Steps to reproduce Step bundle add doorkeeper Step bundle exec rails generate doorkeeperinstall Actual behavior This error is shown Ruby version ruby p revision x linux Gemfilelock details GEM remote specs actioncable actionpack nio r websocketdriver actionmailer actionpack actionview activejob mail railsdomtesting actionpack actionview activesupport rack racktest railsdomtesting railshtmlsanitizer actionview activesupport builder erubi railsdomtesting railshtmlsanitizer activejob activesupport globalid activemodel activesupport activerecord activemodel activesupport arel activestorage actionpack activerecord marcel activesupport concurrentruby i n minitest tzinfo arel bcrypt bcrypt java bootsnap msgpack bootsnap java msgpack builder byebug concurrentruby crass doorkeeper railties erubi ffi ffi java ffi x mingw ffi x mingw globalid activesupport i n concurrentruby listen rbfsevent rbinotify rubydep loofah crass nokogiri mail minimime marcel mimemagic methodsource mimemagic minimime miniportile minitest msgpack msgpack java msgpack x mingw msgpack x mingw nio r nio r java nokogiri miniportile nokogiri java nokogiri x mingw miniportile nokogiri x mingw miniportile puma puma java rack racktest rack rails actioncable actionmailer actionpack actionview activejob activemodel activerecord activestorage activesupport bundler railties sprocketsrails railsdomtesting activesupport nokogiri railshtmlsanitizer loofah railties actionpack activesupport methodsource rake thor rake rbfsevent rbinotify ffi rubydep spring springwatcherlisten listen spring sprockets concurrentruby rack sprocketsrails actionpack activesupport sprockets sqlite thor threadsafe threadsafe java tzinfo threadsafe tzinfodata tzinfo websocketdriver websocketextensions websocketdriver java websocketextensions websocketextensions PLATFORMS java ruby x mingw x mingw x mswin DEPENDENCIES bcrypt bootsnap byebug doorkeeper listen puma rails spring springwatcherlisten sqlite tzinfodata RUBY VERSION ruby p BUNDLED WITH details Steps to reproduce Following the guide on custom token responses Rails now gives me deprecation warnings about the two constants that I setup The guide works and my custom responses are working But on running rspec Im seeing this alan rspec specrequestsapiv passwordscontrollerspecrb DEPRECATION WARNING Initialization autoloaded the constants CustomTokenResponse and CustomTokenErrorResponse Being able to do this is deprecated Autoloading during initialization is going to be an error condition in future versions of Rails Reloading does not reboot the application and therefore code executed during initialization does not run again So if you reload CustomTokenResponse for example the expected changes wont be reflected in that stale Module object These autoloaded constants have been unloaded Please check the Autoloading and Reloading Constants guide for solutions called from top required at Usersalanprojectstwinlitewebconfigenvironmentrb Finished in seconds files took seconds to load examples failures Expected behavior No deprecation warnings Actual behavior See reproduction steps System configuration Standard rubyrails app with devise and doorkeeper for our api endpoints Doorkeeper initializer ruby configinitializersdoorkeeperrb Doorkeeperconfigure do orm activerecord resourceownerfromcredentials do routes baseuser BaseUserfindfordatabaseauthenticationemail params email if baseuser validforauthentication baseuservalidpasswordparams password baseuser end end apionly userefreshtoken grantflows wpassword skipauthorization true end DoorkeeperOAuthTokenResponsesend prepend CustomTokenResponse DoorkeeperOAuthErrorResponsesend prepend CustomTokenErrorResponse Ruby version Gemfilelock details summaryGemfilelock contentsummary GEM remote specs actioncable actionpack nio r websocketdriver actionmailbox actionpack activejob activerecord activestorage activesupport mail actionmailer actionpack actionview activejob mail railsdomtesting actionpack actionview activesupport rack racktest railsdomtesting railshtmlsanitizer actiontext actionpack activerecord activestorage activesupport nokogiri actionview activesupport builder erubi railsdomtesting railshtmlsanitizer activejob activesupport globalid activemodel activesupport activerecord activemodel activesupport activestorage actionpack activejob activerecord marcel activesupport concurrentruby i n minitest tzinfo zeitwerk addressable publicsuffix allowable ast awseventstream awspartitions awssdkcore awseventstream awspartitions awssigv jmespath awssdkkms awssdkcore awssigv awssdks awssdkcore awssdkkms awssigv awssigv awseventstream bcrypt bettererrors coderay erubi rack bindex bindingofcaller debuginspector bootsnap msgpack bootstrapemail actionmailer nokogiri premailerrails rails builder bullet activesupport uniformnotifier byebug capybara addressable minimime nokogiri rack racktest regexpparser xpath capybarascreenshot capybara launchy childprocess cliver cocoon coderay concurrentruby connectionpool crass cssparser addressable databasecleaner debuginspector devise bcrypt ormadapter railties responders warden deviseinvitable actionmailer devise difflcs docile doorkeeper railties dropybara erubi factorybot activesupport factorybotrails factorybot railties faker i n faraday multipartpost ffi figaro thor friendlyid activerecord globalid activesupport hellosignrubysdk faraday mimetypes multijson honeybadger htmlentities i n concurrentruby imageprocessing minimagick rubyvips jarowinkler jbuilder activesupport jmespath jqueryrails railsdomtesting railties thor json kaminari activesupport kaminariactionview kaminariactiverecord kaminaricore kaminariactionview actionview kaminaricore kaminariactiverecord activerecord kaminaricore kaminaricore launchy addressable letteropener launchy listen rbfsevent rbinotify rubydep loofah crass nokogiri mail minimime marcel mimemagic methodsource mimetypes mimetypesdata mimetypesdata mimemagic minimagick minimime miniportile minitest monetize money money i n moneyrails activesupport monetize money railties msgpack multijson multipartpost nio r nokogiri miniportile ormadapter parallel parser ast pg phone poltergeist capybara cliver websocketdriver premailer addressable cssparser htmlentities premailerrails actionmailer premailer pry coderay methodsource publicsuffix puma nio r rack rackprotection rack rackproxy rack racktest rack rails actioncable actionmailbox actionmailer actionpack actiontext actionview activejob activemodel activerecord activestorage activesupport bundler railties sprocketsrails railscontrollertesting actionpack x actionview x activesupport x railsdomtesting activesupport nokogiri railshtmlsanitizer loofah railties actionpack activesupport methodsource rake thor rainbow rake rbfsevent rbinotify ffi redis regexpparser responders actionpack railties rspec rspeccore rspecexpectations rspecmocks rspeccore rspecsupport rspecexpectations difflcs rspecsupport rspecmocks difflcs rspecsupport rspecrails beta actionpack activesupport railties rspeccore rspecexpectations rspecmocks rspecsupport rspecretry rspeccore rspecsupport rubocop jarowinkler parallel parser rainbow rubyprogressbar unicodedisplaywidth rubocopperformance rubocop rubocoprails rack rubocop rubyprogressbar rubyvips ffi rubydep rubyzip sassrails sasscrails sassc ffi sasscrails railties sassc sprockets sprocketsrails tilt scenic activerecord railties seleniumwebdriver childprocess rubyzip shouldamatchers activesupport sidekiq connectionpool rack rackprotection redis simplecov docile json simplecovhtml simplecovhtml slacknotifier spring springwatcherlisten listen spring sprockets concurrentruby rack sprocketsrails actionpack activesupport sprockets thor threadsafe tilt timecop turbolinks turbolinkssource turbolinkssource tzinfo threadsafe unicodedisplaywidth uniformnotifier warden rack webconsole actionview activemodel bindex railties webdrivers nokogiri rubyzip seleniumwebdriver webpacker activesupport rackproxy railties websocketdriver websocketextensions websocketextensions xpath nokogiri zeitwerk PLATFORMS ruby DEPENDENCIES allowable awssdks bettererrors bindingofcaller bootsnap bootstrapemail bullet byebug capybara capybarascreenshot cocoon databasecleaner devise deviseinvitable doorkeeper dropybara factorybotrails faker figaro friendlyid hellosignrubysdk honeybadger imageprocessing jbuilder jqueryrails kaminari letteropener listen minimagick moneyrails pg phone poltergeist pry puma rails railscontrollertesting rspec rspecrails beta rspecretry rubocop rubocopperformance rubocoprails sassrails scenic seleniumwebdriver shouldamatchers sidekiq simplecov slacknotifier spring springwatcherlisten timecop turbolinks warden webconsole webdrivers webpacker RUBY VERSION ruby p BUNDLED WITH details It would be useful to us if we had a supported mechanism to reference the final token in the aftersuccesfulauthorization callback Currently the callback added here passes the current controller to the block Looking at the internals I can see the controller has a token instance variable We can access this with some Ruby trickery but it would obviously be better if there were a publicsupported api to the token Our specific use case involves saving some arbitrary data to the user object after token is issued This data is passed along from the original OAuth request via the state parameter We access this via controllerrequestparams state in the callback which is good enough Im not sure how this could potentially be implemented The most nonbreaking way would probably be to add an argument to the block but it seems a bit kludgy Steps to reproduce Im currently connecting to doorkeeper models on a second database so I can directly verify tokens Im using activerecordoptions to call establishconnection to the other database but it creates a new connection per model Is it possible to share a connection Expected behavior Create one connection Actual behavior Creates connections one per doorkeeper model System configuration You can help us to understand your problem if you will share some very useful information about your project environment dont forget to remove any confidential data if it exists Doorkeeper initializer ruby configinitializersdoorkeeperrb Doorkeeperconfigure do activerecordoptions establishconnection Railsconfigurationdatabaseconfiguration Railsenvrealsavvy end Ruby version Gemfilelock doorkeeper details summaryGemfilelock contentsummary Place your Gemfilelock content here details Steps to reproduce What we need to do to see your problem or bug On RakeFile frozenstringliteral true Add your own tasks in files placed in libtasks ending in rake for example libtaskscapistranorake and they will automatically be available to Rake requirerelative configapplication Railsapplicationloadtasks DoorkeeperRakeloadtasks Doorkeeper installed and configured with Rails Actual behavior rake doorkeeperdbcleanup fails with message rake aborted NameError uninitialized constant DoorkeeperAccessToken usrlocalbundlegemsbootsnap libbootsnaploadpathcachecoreextactivesupportrb in block in loadmissingconstant usrlocalbundlegemsbootsnap libbootsnaploadpathcachecoreextactivesupportrb in withoutbootsnapcache usrlocalbundlegemsbootsnap libbootsnaploadpathcachecoreextactivesupportrb in rescue in loadmissingconstant usrlocalbundlegemsbootsnap libbootsnaploadpathcachecoreextactivesupportrb in loadmissingconstant usrlocalbundlegemsdoorkeeper libdoorkeeperrakedbrake in block levels in main usrlocalbundlegemsrake exerake in top required System configuration Ruby with mysql and ActiveRecord Doorkeeper initializer Doorkeeper is working fine in endpoints and even on rails console But rake cleanup task is not working Ruby version Gemfilelock details summaryGemfilelock contentsummary GEM remote specs actioncable actionpack nio r websocketdriver actionmailer actionpack actionview activejob mail railsdomtesting actionpack actionview activesupport rack racktest railsdomtesting railshtmlsanitizer actionview activesupport builder erubi railsdomtesting railshtmlsanitizer activemodelserializers actionpack activemodel casetransform jsonapirenderer beta activejob activesupport globalid activemodel activesupport activerecord activemodel activesupport arel activestorage actionpack activerecord marcel activesupport concurrentruby i n minitest tzinfo addressable publicsuffix ansi arel asciidoctor ast axiomtypes descendantstracker icenine threadsafe bcrypt bootsnap msgpack builder byebug casetransform activesupport childprocess chronic coderay coercible descendantstracker concurrentruby connectionpool countries i ndata sixarmrubyunaccent unicodeutils crass databasecleaner descendantstracker threadsafe devise bcrypt ormadapter railties responders warden difflcs docile domainname unf doorkeeper railties dotenv dotenvrails dotenv railties equalizer erubi factorybot activesupport factorybotrails factorybot railties faker i n faraday multipartpost fastimage ffi globalid activesupport graphiqlrails railties sprocketsrails graphql httpaccept httpcookie domainname i n concurrentruby i ndata icenine iniparse iso iso jarowinkler jmespath json jsonschema addressable jsonapirenderer listen rbfsevent rbinotify loofah crass nokogiri mail minimime marcel mimemagic methodsource mimetypes mimetypesdata mimetypesdata mimemagic minimime miniportile minitest monetize money money i n moneyrails activesupport monetize money railties msgpack multipartpost mysql nethttptimeouterrors netrc nio r nokogiri miniportile oga ast rubyll ormadapter overcommit childprocess iniparse parallel parser ast pry coderay methodsource pryrails pry publicsuffix puma pundit activesupport rack rackattack rack rackcors rackprotection rack racktest rack rails actioncable actionmailer actionpack actionview activejob activemodel activerecord activestorage activesupport bundler railties sprocketsrails railsdomtesting activesupport nokogiri railshtmlsanitizer loofah railties actionpack activesupport methodsource rake thor rainbow rake rakeprogressbar rbfsevent rbinotify ffi redis redisobjects redis responders actionpack railties restclient httpaccept httpcookie mimetypes netrc rspeccore rspecsupport rspecexpectations difflcs rspecsupport rspecmocks difflcs rspecsupport rspecrails actionpack activesupport railties rspeccore rspecexpectations rspecmocks rspecsupport rspecsupport rubocop jarowinkler parallel parser rainbow rubyprogressbar unicodedisplaywidth rubocopfaker rubocop rubocoprails rack rubocop rubyll ansi ast rubyprogressbar rubythumbor rubyzip sentryraven faraday sidekiq connectionpool rack rackprotection redis simplecov docile json simplecovhtml simplecovhtml sixarmrubyunaccent spring springwatcherlisten listen spring sprockets concurrentruby rack sprocketsrails actionpack activesupport sprockets thor threadsafe tzinfo threadsafe unf unfext unfext unicodedisplaywidth unicodeutils validemail activemodel mail videoinfo iso nethttptimeouterrors oga virtus axiomtypes coercible descendantstracker equalizer warden rack websocketdriver websocketextensions websocketextensions whenever chronic PLATFORMS ruby DEPENDENCIES activemodelserializers addressable bootsnap byebug countries databasecleaner devise doorkeeper dotenvrails factorybotrails faker fastimage graphiqlrails graphql iso jsonschema listen mimemagic moneyrails mysql overcommit pryrails puma pundit rackattack rackcors rails rakeprogressbar rapidocum redisobjects restclient rspecrails rubocop rubocopfaker rubocoprails rubythumbor rubyzip sentryraven sidekiq simplecov spring springwatcherlisten validemail videoinfo virtus whenever BUNDLED WITH details Summary As discussed in the automatic revocation of old access tokens can lead to problems when multiple physical machines clients share the same set of credentials eg multiple web servers behind a load balancer However the revocation was implemented to make the fetching of tokens more efficient since it did not perform well for large amounts of tokens Therefore this pull request implements two changes filtering by the TTL of a token when fetching tokens from the database thus also reducing the number of fetched tokens making the automatic revocation introduced in optional disabled by default Considerations I decided to disable automatic revocation by default My reasoning It was a breaking change introduced in so it was a surprise for anyone upgrading from and below I am not sure if there is real demand for that feature or whether it was purely out of performance considerations But I can at least imagine the demand Fetching based on TTL is not working when you set a customaccesstokenexpiresin since we could not guarantee that the tokens being filtered out would be considered as expired by the custom strategy I am pretty sad about introducing this piece of works different depending on configuration and I am not sure whether we should at least point it out in the documentation Meta I am making an issue from a pull request discussion on PR Description PR introduced automatic revocation of access tokens when the same client already fetched an access token The problem is that multiple processes of the same client may request and cache tokens in their local memory Subsequent requests to get tokens by other processes can end up revoking an in use token that another process has cached Example scenario Process A fetches token A and stores it in memory Process B fetches a token doorkeeper determines to not send the existing token A either reuseaccesstokens is off or the tokenreuselimit has been reached Server revokes token A Server generates and returns token B Process B caches token B in memory Process A attempts to use token A it was unaware token A was revoked Expected behavior An application split across multiple processesservers does not need shared state to handle access tokens Disclaimer I did not yet crosscheck the OAuth RFC on whether clients should be allowed to fetch multiple access tokens but I am pretty sure it is at least not explicitly prohibited Actual behavior Two processes of the same client can inadvertently revoke each others cached access tokens Compatibility note I would consider this a breaking or at least IMPORTANT change that should be mentioned in the CHANGELOG So depending of the outcome of this issue we should either note a breaking change starting in or at least one introduced there and fixed later PoC for Doorkeeper plugins system Allows to extend Doorkeeper without the need to patch internals or create PRs to main repository Something similar but not inspired by to official AWS Ruby SDK TODO x Implement plugins registry x Implement plugins invocation with context Collect namespaces places where plugins can be used Extract some existing hooks afterbefore auth into plugins Add specs Add documentation for plugins Example of usage ruby class Plugin def initializeoptions options options end def runcontext puts selfclassname invoked end end TestPlugin ClassnewPlugin TestPlugin ClassnewPlugin TestPlugin ClassnewPlugin TestPlugin ClassnewPlugin PluginWithException ClassnewPlugin do def runcontext raise StandardError test exception end end InvalidPlugin Classnew DoorkeeperPluginregisterTestPlugin namespace accesstoken DoorkeeperPluginregisterTestPlugin namespace accesstoken options key DoorkeeperPluginregisterTestPlugin namespace accesstoken after TestPlugin DoorkeeperPluginregisterTestPlugin namespace accesstoken before TestPlugin DoorkeeperPluginregisterPluginWithException namespace accesstoken shallowexceptions false DoorkeeperPluginrunforaccesstoken TestPlugin TestPlugin TestPlugin TestPlugin DoorkeeperPluginregisterInvalidPlugin namespace accesstoken ArgumentError InvalidPlugin must respond to run method DoorkeeperPluginregisterTestPlugin namespace accesstoken ArgumentError TestPlugin already registered for accessa DoorkeeperPluginregisterTestPlugin namespace accesstoken DoorkeeperPluginregisterTestPlugin namespace DoorkeeperPluginregisterTestPlugin namespace accesstoken DoorkeeperPluginregisterTestPlugin namespace accesstoken DoorkeeperPluginregisterTestPlugin namespace accesstoken ArgumentError namespace must contain only letters digits and underscore Reallife example ruby class FakeAccessToken def destroy puts Token destroyed end end class AccessTokenPlugin def initializeoptions options options end def runcontext puts selfclassname invoked accesstoken contextfetchtoken accesstokendestroy end end DoorkeeperPluginregisterAccessTokenPlugin namespace accesstoken appcontrollerstokenscontrollerrb token FakeAccessTokennew DoorkeeperPluginrunforaccesstoken token token AccessTokenPlugin invoked Token destroyed 