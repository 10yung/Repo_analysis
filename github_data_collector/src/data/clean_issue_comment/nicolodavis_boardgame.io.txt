Hi Does this framework support horizontal scaling Which means stateless multiple nodejs instances behind a load balancer central state storage ex MongoDB redis It seems that single point of failure might happen in this framework Correct me if Im wrong Thanks Your test pluginplayertestjs is OK const gametest playerSetup A plugins PluginPlayer const TestClient Client game gametest debug true numPlayers multiplayer Local eslintdisablenextline const App TestClient playerID but with Phases it seems that Gplayers const gametest playerSetup A plugins PluginPlayer phases test start true js turn onBegin G ctx if ctxturn ctxeventsendTurn this is a noop This check prevents the endTurn because the Events class is attached at a point where the turn was here but by the time the event is processed the turn is incremented to There are lots of analysis options that would be opened up if it was possible to collect more information about what happens during games when using Simulate For example if the sequence of moves could be accessed it would mean that we could see how often different kinds of moves are used If midgame states could be accessed then things like average scores at different points in the game could be looked at If the enumerated moves could be accessed then the average branching factor could be calculated Rather than picking specific things and making them part of the game state I propose enabling code that uses Simulate to pass in handler functions that will be called as the simulation reaches particular events entering and leaving stages turns and phases I guess and that the Bot enables a handler function to be specified that will be called when a bot has enumerated its moves for a turn With this approach it should be possible for code to grab what it needs without adding to the overall state overhead Right now we allow adding all players or other players to the set of active players and they can make moves in any order However you might also want them to be able to perform actions one after the other all inside the same turn The documentation for the AI framework is lacking currently only giving an example of enumerate without giving much context about how to use it I had to dig into the code to see how and when the bots were instantiated and what their API was When using the outofbox MCTS in a game where the number of available moves and therefore number of possible game states declines as the game progresses the time to calculate the best move reduces over time In other words the time to calculate N iterations reduces as the turn count increases Currently the iterations value is hardcoded when the bot is instantiated This should be updated to accept a function much like the objectives function that can return a dynamic number of iterations to support scenarios such as increasing the iteration count as the game progresses while the cost in time stays relatively flat The AlphaBeta library offers an alternative solution which achieves the same effect of taking the same amount of time running the algorithm for as many iterations as it can until the wall time expires which also seems like a great option When its a players turn update favicon with badge using This helps the user to play longrunning board games while doing other things by notifying them its their turn Any plan for out of the box in game chat support This would be very helpful Is there any reason why ctxcurrentPlayer is string rather than 