 Description This replaces a mviish implementation of a movie search with a reusable implementation of MVI Considerations First things first this is the first iteration There is lots of room for improvements in our implementation of the pattern and for covering more use cases like screen orientation one time events like navigation dialogs etc Furthermore this PR introduces documentation around our implementation of MVI and the different components In the previous implementation the SearchResultsViewable and SearchInputViewable did expose callbacks for user actions and methods to render a view state The SearchResultsPresenter did register for these callbacks and forwarded the user actions to the SearchResultsModel Furthermore it observed the state from that model mapped it to a viewstate and forwarded this to the abovementioned views The SearchResultsModel was responsible to implement the business rules and to expose a stream of state changes according to them We replaced the views with a single MVIViewSearchAction SearchState which exposes an ObservableAction and renders a SearchState Furthermore we moved all the business logic into the SearchMiddlewareSearchAction SearchState SearchChanges which exposes an ObservableSearchChanges These SearchChanges are then observed by the SearchReducer which maps them to a SearchState And finally we introduced the BaseStoreAction State Change as a use case agnostic class which collaborates with the above components to connect the different data streams Data Flow Highlevel DiagramSequence Diagram MainView Untitled Paired with gbasile zegnus lgvalle MichalNovoda Add functionality to demonstrate how this architecture would handle network errors consider retry Add functionality to demonstrate how Analytics would work in this sample This PR adds checkout screens so that we can add a full endtoend shopping flow test Still work in progress as the app cant run There is an issue in Appkt where DaggerAppComponent isnt being recognised Possibly just a configuration issue 