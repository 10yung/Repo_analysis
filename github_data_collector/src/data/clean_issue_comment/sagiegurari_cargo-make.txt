Describe the bug Running a task that launches npx webpackdevserver causes a hang in windows when exiting To Reproduce Install node npm etc Create a minimal webpack project and install webpackdevserver Start the webpackdevserver via npx directly npx webpackdevserver config webpackconfigjs ControlC to break out No problem so far can type on the console task manager looks clean all good Now try via cargo make Create following in Makefiletoml taskswebpackdevelopmentserver script npx webpackdevserver config webpackconfigjs Launch it via cargo make webpackdevelopmentserver Starts fine ControlC to exit Appears to exit but then terminal is messed up cant enter text Also task manager shows additional consoles this is after hitting controlc in the terminal but before closing the window entirely Error Stack None its just that the terminal becomes unusable Features Description There is a feature for additionalprofiles but I think its a little limited at the moment or maybe I dont really get what they are for Today Im using the env section in tasks for specifying a feature set to test For example I have dnsoveropenssl or dnsoverrustls features that need to be tested separately What Ive done today is have an optional FEATURES environment variable that is set on a per task basis for example toml tasksdnsoveropenssl description Run all with featuresdnsoveropenssl workspace false env FEATURES featuresdnsoveropenssl CARGOMAKEWORKSPACESKIPMEMBERS cratesprotocratesnativetlscratesrustlscrateshttpstestscompatibilitytestsutil runtask name all fork true The issue is that this requires a task per feature This is fine except that it means that for each task type say all compile test wed need a counterpart for the code coverage task which would be a lot of duplicated config If the only env var was the FEATURES variable this could be handled with just the cli parameter for setting environment variables but then we couldnt also restrict the set of crates to test with CARGOMAKEWORKSPACESKIPMEMBERS since not all of them support the same features It seems like this would be a great use for profiles but its not clear how to do that at the moment where say you could combine the FEATURE profile with a CI DEV or RELEASE profile Maybe Im misunderstanding the docs or possibly Im trying to solve this problem in the wrong way Describe the solution youd like Allow multiple profiles to be combined via CLI arguments eg console cargo make all p ci p dnsoveropenssl Load order would be left most first to right most maybe Code Sample toml envci CI true envdnsoveropenssl FEATURES featuresdnsoveropenssl CARGOMAKEWORKSPACESKIPMEMBERS cratesprotocratesnativetlscratesrustlscrateshttpstestscompatibilitytestsutil Would you be interested in having debian packaging in the repository Currently maintaining this in a fork for PopOS So Ive noticed a few issues with the kcovcoverage task that is in the default library I dont feel comfortable putting up a PR against the base makefile toml but would be happy to if you see it as desirable The first is that I believe coverage data is overwritten when multiple tests are run The next is that the current grep match statement for collecting the tests isnt general enough And finally macOS is now supported though Ive personally run into issues with it so continue to leave it disabled Overlapping coverage reports I have two strategies for this Create a new directory for each kcov run First is a top coverage report per crate then also a coverage directory for each test executable run Youll notice that to facilitate this I broke out a script for kcov as well a See here for the per crate target b See here for the per test crate For the test matching I grabbed a project cargowith which uses the metadata from cargo to get all the tests I was thinking we might want to grab all targets in cargomake and build some ways of filtering those and offering the ability to wrap those in the same way as cargowith as I think it would be useful Now I customized the cargowith project to run all tests with a given command and that hasnt landed in that project yet a see install here b see usage here c the PR oncargowith And finally mac build heres the install code I used for that Now I found it beneficial to split the installer from the kcov task itself to ease testing the build of kcov not sure if thats something you want Also thank you so much for this project I think its definitely the missing automation tool for Rust and really fit my needs perfectly I really appreciate your work on this Thanks Features Description On linuxmac the exe is not locked while running so if the min version is defined we could also have cargomake validate and self update if need and configured to do so naturally windows is out of scope here this is based on discussion in Describe the solution youd like toml config minversion selfupdate true In case the min version is higher then installed and selfupdate true cargomake will first trigger self update and then restart restarted process would NOT support self update Adding documentation example of a working CI build using cirrusciorg cirrusyml The list all steps throws a list of all steps split by category print steps only prints the relevant flow that was asked execution plan with a lot more detail need to think of a clearer format that passes on more information more clearly based on conversation in This is continuation of seems that the rust envsetvar api is not supporting it as is at the moment Closes markdownlintdisable firstheaderh nomultipleblanks firstlineh requiredheaders Problem Description Rather than only supporting inline code why not have a path parameter How about going further and making that path one of URL or URI see RFC for file URI If URL allow for a SHA sum to specified Potential cargomake becomes a package manager What do you think 