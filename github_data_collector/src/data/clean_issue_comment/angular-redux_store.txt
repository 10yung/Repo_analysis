 This is a feature request bug report usage question What toolchain are you using for transpilationbundling angularcli Custom ngToolswebpack Raw ngc SystemJS Rollup Other Environment NodeJS Version Typescript Version Angular Version angularreduxstore version angularcli version if applicable OS Link to repo showing the issus optional but helps a lot Expected Behaviour Actual Behaviour Stack TraceError Message Additional Notes optional This is a feature request X bug report usage question What toolchain are you using for transpilationbundling X angularcli Custom ngToolswebpack Raw ngc SystemJS Rollup Other Environment NodeJS Version v Typescript Version typescript Angular Version angularreduxstore version angularreduxstore angularcli version if applicable angularcli OS Windows Version OS Build Link to repo showing the issus optional but helps a lot Expected Behaviour npm installs angularreduxstore on angularcore without warning Actual Behaviour npm WARN angularreduxstore requires a peer of angularcore but none is installed You must install peer dependencies yourself Stack TraceError Message npm WARN angularreduxstore requires a peer of angularcore but none is installed You must install peer dependencies yourself Additional Notes optional This is a feature request bug report x usage question What toolchain are you using for transpilationbundling x angularcli Custom ngToolswebpack Raw ngc SystemJS Rollup Other Environment NodeJS Version Typescript Version Angular Version angularreduxstore version angularcli version if applicable OS macOS Link to repo showing the issus optional but helps a lot Expected Behaviour angularreduxstore is working fine with Angular Actual Behaviour Seems not to work with Angular Stack TraceError Message zoneevergreenjs Uncaught in promise TypeError Class constructor Observable cannot be invoked without new at new ActionsObservable ActionsObservablejs at epicMiddleware createEpicMiddlewarejs at reduxjs at Arraymap anonymous at reduxjs at RootStoreconfigureStore angularreduxstorejs at new StoreModule storemodulets at createClass corejs at createProviderInstance corejs at initNgModule corejs at new NgModuleRef corejs at createNgModuleRef corejs at ObjectdebugCreateNgModuleRef as createNgModuleRef corejs at NgModuleFactorycreate corejs at corejs at ZoneDelegateinvoke zoneevergreenjs at ObjectonInvoke corejs at ZoneDelegateinvoke zoneevergreenjs at Zonerun zoneevergreenjs at NgZonerun corejs at PlatformRefbootstrapModuleFactory corejs at corejs at ZoneDelegateinvoke zoneevergreenjs at Zonerun zoneevergreenjs at zoneevergreenjs at ZoneDelegateinvokeTask zoneevergreenjs at ZonerunTask zoneevergreenjs at drainMicroTaskQueue zoneevergreenjs at ZoneTaskinvokeTask as invoke zoneevergreenjs at invokeTask zoneevergreenjs at HTMLScriptElementglobalZoneAwareCallback zoneevergreenjs Additional Notes optional I need one store across all the modules does any one have idea how to achieve this This is a feature request bug report usage question What toolchain are you using for transpilationbundling angularcli Custom ngToolswebpack Raw ngc SystemJS Rollup Other Environment NodeJS Version v Typescript Version Angular Version angularreduxstore version angularcli version if applicable OS windows I have tsconfig with the following settings compilerOptions strictNullChecks true strictPropertyInitialization true these are very useful settings but they dont work with select decorator For example Component selector approot templateUrl appcomponenthtml export class AppComponent select private entities ObservableIReduxEntities This code causes error Property entities has no initializer and is not definitely assigned in the constructor I know that I can use ngReduxselect entities instead of select decorator But it would be great if select decorator worked with my tsconfig This is a feature request X bug report usage question What toolchain are you using for transpilationbundling X angularcli Custom ngToolswebpack Raw ngc SystemJS Rollup Other Environment NodeJS Version Typescript Version Angular Version angularreduxstore version angularcli version OS Win Link to repo showing the issus optional but helps a lot Expected Behaviour Implemented ReduxThunk Called a reduxthunkaction via dispatch No compiler errors Actual Behaviour Compiler error Stack TraceError Message TS TS Argument of type dispatch any getState any void is not assignable to parameter of type AnyAction Property type is missing in type dispatch any getState any void but required in type AnyAction Additional Notes Workaround Cast the returning function of the reduxthunkaction as AnyAction any Example return AnyAction any dispatch getState This seemed to be fixed a while ago but might have been broken again in commit This is a feature request bug report x usage question What toolchain are you using for transpilationbundling x angularcli Custom ngToolswebpack Raw ngc SystemJS Rollup Other Environment NodeJS Version Typescript Version Angular Version angularreduxstore version angularcli version if applicable OS macOS Notes I have a normalized state shape where entities are indexed by id The entities are rendered in a list which is controlled by a form of filters and sort options Im using Epics to observe the form actions to update an array of filtered sorted entity ids ts interface Entity id string name string interface State entities id string Entity entityListIds Arraystring ts Component selector entitylist template ngcontainer ngIfentityListIds async as entityListIds entity ngForlet entityId in entityListIds entityId entityIdentity ngcontainer export class EntityListComponent selectentityListIds entityListIds ObservableArraystring Can the EntityComponent use the entityId input with the select decorator ts export class EntityComponent Input entityId string select entities thisentityId entity ObservableEntity Im wondering if this is possible with instance methodsproperties or if I have to inject the store Im also interested in scenarios where the input changes and how to handle that with the select pattern This is a feature request x bug report x usage question What toolchain are you using for transpilationbundling x angularcli Custom ngToolswebpack Raw ngc SystemJS Rollup Other Environment NodeJS Version v Typescript Version Angular Version angularreduxstore version angularcli version if applicable OS Mac High Sierra Actual Behaviour Any update to a store will trigger another round of select even if that specific data has not changed For example ngReduxselect MyStore myData subscribe with the following states State Root MyStore myDatadatanull someOtherDatadatanull State triggers select to fire expected since myData has been updated Root MyStore myDatadataSomeData someOtherDatadatanull State triggers select to fire unexpected since myData has not been updated Root MyStore myDatadataSomeData someOtherDatadataOtherDataUpdated Expected Behaviour ngReduxselect MyStore myData subscribe should only fire subscriptions when there are changes to myData not changes to MyStore overall In the example above State should not trigger my subscription Additional Notes Im marking this as both a usage question and a bug because Im not sure if this is just an issue with the store as a whole or if there is some way I need to have configured my store or I can be doing something different in my implementation This is a bug report What toolchain are you using for transpilationbundling angularcli Question I wrote this up on StackOverflow trying to get any help It is definitely an angularreduxstore issue though I deleted my library distmylibrary and ran disttest the application and the same issue is occurring 