As of the most current iOS version using a filter such as uppercase or lowercase causes the rendering to fail with an error such as the following Object does not conform to GRMustacheFilter protocol in tag uppercasedepthString at line of template I dug into the debugger on the error and noticed something strange when this line of GRMustacheExpressionInvocationm is executed img width altimage src The value filterExpression and argumentExpression look fine but why is filter a BOOL Without being familiar with the internals I so far have no idea how it could arrive at this state The strange thing is that this works without error on the simulator also iOS I also tried lowercase for kicks same results When I remove the filter it works on both device and simulator I am using GRMustache currently the latest Any idea of what the issue may be Im not doing any crazy multithreading so a memory stomp seems unlikely and besides I can reproduce this every time based on the input If I try to import this library in a mm file I get this error when compling PodsHeadersPublicGRMustacheGRMustacheTagh Cannot initialize a variable of type const GRMustacheTagType with an rvalue of type int Im using the latest version Probably related to I am trying to include GRMustache through Swift Package Manager but I end up with this message UsersDesktopChaseDMFToolbuildcheckoutsGRMustacheswift error invalid target name at TestsCarthage the name of test targets must end in Tests Also note this is a command line tool app Please can you release a new cocoapods version The version in cocoapods repo is not in sync with the latest version in your repo any updates There is a crash in GRMustacheImplicitIteratorExpressionm when running on OS X It seems that the issue is related to the initialize function in that simply modifying the function voidinitialize instance self alloc init into voidload instance self alloc init would make it wok on OS X It seems that GRMustache preventNSUndefinedKeyExceptionAttack no longer exists Is that correct If so shouldnt we update the FAQ and remove the JRSwizzle dependency Id like to add the static libary to a project but it is not compatible anymore because of lacking bitcode I also didnt find an xCode project to build the static library with that flag enabled Is there an easy way to solve this Im not sure what your requirements are for adding a new operating system to GRMustache but I wanted to start a conversation with you about adding tvOS support to the project Im using GRMustache an app for tvOS and would love to have support officially included so I dont have to work about tracking patches Let me know what else I need to do Add a tvOS target to the xcodeproj and rules to the makefile to build a tvOScompatible library Enable Bitcode for iOS and tvOS its required on tvOS GRMustache v follow up to PR Update documentation Make sure we have Core Data tests More common tests between GRMustache and GRMustacheswift New x Frameworks for iOS x Frameworks for OSX x Frameworks for tvOS in tvOS branch x Carthage support Fixed x Issue Breaking Changes x GRMustacheOSXframework targets OSX x GRMustacheiOSframework targets iOS x Improved compatibility with GRMustacheswift x Shared tests suite with GRMustacheswift x Common behavior for standard types x NSArray only recognizes the first last and count keys x NSOrderedSet only recognizes the first last and count keys x NSSet only recognizes the first and count keys x NSString only recognizes the length key x Standard Library x The standard library is no longer loaded by default x New zip standard library filter x Explicit support for Mustache lambdas x partialpartial provides dynamic template inheritance Drop support for x xx short syntax x GRMustacheTemplate templateFromStringerror does no longer look for partials in main bundles resources x The new protocol GRMustacheKeyValueCoding replaces GRMustacheSafeKeyAccess fixes for good x No more support for unsafe contexts x GRMustache no longer uses objectForKeyedSubscript for objects that respond to this protocol This behavior now requires explicit conformance to GRMustacheKeyValueCoding 