This PR removes the color from logfiles while keeping them if they are outputted to the console This is done by additionally filtering for FileHandlers during the hook call I also added a new test that explicitly creates a log file The file doesnt contain any ANSI codes after the test has run I am not sure if the output has to be regenerated Best would be if you could take a look before merging it If they do need ot regenerate let me know Ill add them in a new commit Closes Issuehunt content details summary bIssueHunt Summaryb summary Referenced issues This pull request has been submitted to Logged exceptions shouldnt contain colour IssueHunt has been backed by the following sponsors Become a sponsor details Issuehunt content Hello I used your project in my own code I download it by pypi but I found some differences with your project just like code in your project python def excepthookexc value tb formatted ujoinformatexceptionexc value tb writestreamformatted STREAM code in pypi python def excepthookexc value tb formatted formatexceptionexc value tb writestreamformatted STREAM MD betterexceptions targz bd de cf e b bd e bd c It seems that you didnt update in pypi after you changed the code this commit Initial implementation of hyperlinks set BETTEREXCEPTIONSHYPERLINKS to activate This is not as useful as I expected as there line numbers cant be implemented yet Id probably still use this though I assume this needs tests I havent looked at how to do these yet TODO Dont output hyperlink for filenames like console Im a little unsure if this is what the issue here is cited But I believe this stops producing colorized output for my version of betterexceptions I find it annoying when tracebacks only show a single line for a frame when that frame may be executing a multiline expression or frame and that single line leaves out critical context I see that betterexceptions doesnt address this Heres an example python import betterexceptions betterexceptionshook def divx y return y x a b div b a Output Traceback most recent call last File UsersalexhallLibraryPreferencesPyCharm scratchesscratch py line in module a File UsersalexhallLibraryPreferencesPyCharm scratchesscratch py line in div return y x ZeroDivisionError division by zero In particular this doesnt show the function div or the argument b which causes the exception at the top It seems that multiline function calls generally show the last line containing significant tokens ie not the trailing which is often not going to be what the user wants There was a discussion about solving this and showing all the lines of a multiline statement in the traceback It doesnt look like thats going to happen anytime soon but a change has been merged which shows the first line instead of the last so in the example above it shows div in Python I just tested it Some tools such as IPython and Sentry show a few lines of context before and after the line that the traceback points to This context may be useful in its own right and some users may want something like that But I dont know how useful it is and it makes tracebacks significantly longer I dont think that should be the default And I suspect its partly done as a crude solution to the multiline statement problem Its easy to parse the source file and find the statement node containing a given line Ive done it in other projects Wed need to think a bit about what to display for compound statements eg if statements but overall I think its very doable Then we can show the whole statement being executed without unwanted additional context In most cases it would still be just one line The obvious problem is how to format the display of variables when showing multiple lines of source code Id like to brainstorm this issue Some thoughts The current system of labels with vertical lines looks great I think it should still be used where possible even if that introduces inconsistency and some frames are displayed differently from others For statements with two lines the current system can still work by showing variables both above and below the source lines ie some label lines point up and others down and the whole thing would look somewhat symmetric The problem really arises with or more lines Theoretically we could just insert the current variable labels below each line so the variables and source lines would be interleaved This is probably a bad idea as it would make the source much less readable The simplest option is to just list the variables below the source lines enhances this method slightly by highlighting each variable in the source and in the list with a unique colour instead of using syntax highlighting I dont know if this actually improves readability It may be useful to optionally show all the local variables in a frame and not just the ones directly relevant to a line or statement This is probably the only suitable way to do that Variables could be shown at the end of a line This is what the PyCharm debugger does Screen Shot at However horizontal space runs out fast Similar to point a single frame could have multiple systems for displaying variables eg a mix of and But that would probably be confusing and a bad idea One day we may want to display the value of expressions like a b where evaluating that is safe eg if typea is dict The current system of labels would not work well for labelling all three of a b and a b I am using Macos and I am unable to use the navigation keys to jump into my previous Repl line Instead it showing me escape characters AbdulsAirbetterexceptions abdulniyas python m betterexceptions Python v fd b Jul GCC Apple Inc build dot on darwin Type help copyright credits or license for more information BetterExceptionsConsole import sys A This is what I am getting when I press Up arrow I tried the same in my python interpreter but it does shows me the correct result Python v fd b Jul GCC Apple Inc build dot on darwin Type help copyright credits or license for more information import platform import platform It shows the correct result when I press Up arrow I think sysinteractivehook is not getting called in order register the readline while initialising betterexception Repl So if I do the following in betterexception Repl I am getting correct result Python v fd b Jul GCC Apple Inc build dot on darwin Type help copyright credits or license for more information BetterExceptionsConsole a A while clicking up arrow Traceback most recent call last File LibraryFrameworksPythonframeworkVersions libpython codepy line in runsource code selfcompilesource filename symbol single REPL x b A betterexceptionsreplBetterExceptionsConsole object at x a File LibraryFrameworksPythonframeworkVersions libpython codeoppy line in call return maybecompileselfcompiler source filename symbol single REPL x b A codeopCommandCompiler object at x a function maybecompile at x e File LibraryFrameworksPythonframeworkVersions libpython codeoppy line in maybecompile raise err SyntaxErrorinvalid syntax REPL x b A n File LibraryFrameworksPythonframeworkVersions libpython codeoppy line in maybecompile code compilersource filename symbol single REPL x b A codeopCompile object at x a b None File LibraryFrameworksPythonframeworkVersions libpython codeoppy line in call codeob compilesource filename symbol selfflags codeopCompile object at x a b single REPL x b A n File REPL line SyntaxError invalid syntax import sys sysinteractivehook Register the readline Now onwards the navigation keys are working Hi This is intended to fix finally As discussed I replaced localegetpreferredencoding with STREAMencoding Just in case I added a fallback to ascii if STREAM has no or invalid encoding attribute For the tests the encoding can be configured with the PYTHONIOENCODING environment variable in place of LANG and LCALL Also I had to remove encodingpy and include it directly into colorpy to avoid circular dependency Hopefully this should solve reported encoding issues Issuehunt Badges img altIssuehunt badges src Issuehunt Badges Currently if the output is to a terminal then an exception that gets logged will also include the colour escape codes This is not really ideal since they will just show up as raw escape codes in most editors making the log harder to read So it would be great if the logged exceptions could skip the colourcoding even if the current terminal supports colours The output to the terminal itself should still be coloured of course Thanks Issuehunt content details summary bIssueHunt Summaryb summary Backers Total img src altissuehunt width height issuehunt Submitted pull Requests remove color from log files Become a backer now Or submit a pull request to get the deposits Tips Checkout the Issuehunt explorer to discover more funded issues Need some help from other developers Add your repositories on IssueHunt to raise funds IssueHunt has been backed by the following sponsors Become a sponsor details Issuehunt content repr might trigger database queries in Django and then eg pytestdjango might throw an exception that disallows this Therefore when using betterexceptions from a debugger it might crash it there I think the call to repr should be protected against this venvlibpython sitepackagespdbpy in formatextraexception fmtexc listbetterformatterformatexceptionetype evalue tb Vcsbetterexceptionsbetterexceptionsformatterpy in formatexception for line in selfformatexceptionvalue tb Vcsbetterexceptionsbetterexceptionsformatterpy in formatexception formatted coloredsource selfformattracebackexctraceback Vcsbetterexceptionsbetterexceptionsformatterpy in formattraceback formatted colored selfformattracebackframetb Vcsbetterexceptionsbetterexceptionsformatterpy in formattracebackframe filename lineno function source colorsource relevantvalues selfgettracebackinformationtb Vcsbetterexceptionsbetterexceptionsformatterpy in gettracebackinformation relevantvalues selfgetrelevantvaluessource frame tree Vcsbetterexceptionsbetterexceptionsformatterpy in getrelevantvalues valuesappendtext col selfformatvalueval Vcsbetterexceptionsbetterexceptionsformatterpy in formatvalue v reprv Vcsdjangodjangodbmodelsquerypy in repr data listself REPROUTPUTSIZE Vcsdjangodjangodbmodelsquerypy in iter selffetchall Vcsdjangodjangodbmodelsquerypy in fetchall selfresultcache listselfiterableclassself Vcsdjangodjangodbmodelsquerypy in iter results compilerexecutesqlchunkedfetchselfchunkedfetch chunksizeselfchunksize Vcsdjangodjangodbmodelssqlcompilerpy in executesql cursor selfconnectioncursor Vcsdjangodjangodbbackendsbasebasepy in cursor return selfcursor Vcsdjangodjangodbbackendsbasebasepy in cursor selfensureconnection E Failed Database access not allowed use the djangodb mark or the db or transactionaldb fixtures to enable it 