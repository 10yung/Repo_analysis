not sure if this should be add next to sh or to keep it sorted like this A small addition that adds a format flag with two options table which is the existing functionality and json which formats the output as a JSON object to facilitate automation and integration with other tools Heres a small demo of why I did this running the tool on itself cargo run formatjson Compiling loc v UsersbarnabykeeneDesktoploc Finished dev unoptimized debuginfo targets in s Running targetdebugloc formatjson Bourne Shellfiles countcode comment blank lines Haskellfiles countcode comment blank lines Terraformfiles countcode comment blank lines Adafiles countcode comment blank lines Solidityfiles countcode comment blank lines Luafiles countcode comment blank lines Groovyfiles countcode comment blank lines OCamlfiles countcode comment blank lines PowerShellfiles countcode comment blank lines Rubyfiles countcode comment blank lines Handlebarsfiles countcode comment blank lines Rustfiles countcode comment blank lines YAMLfiles countcode comment blank lines Pythonfiles countcode comment blank lines Tomlfiles countcode comment blank lines Cfiles countcode comment blank lines Markdownfiles countcode comment blank lines Gherkinfiles countcode comment blank lines Zigfiles countcode comment blank lines Reasonfiles countcode comment blank lines Nixfiles countcode comment blank lines Pure JSON is ugly I considered making it pretty but decided it would be pointless since this feature is intended for piping to other tools for automation etc Such as jq cargo run formatjson jq Finished dev unoptimized debuginfo targets in s Running targetdebugloc formatjson Solidity files count code comment blank lines C files count code comment blank lines Also if youre using NuShell then you can play with the data a bit more cargo run formatjson fromjson flatten pivot get Column count Finished dev unoptimized debuginfo targets in s Running targetdebugloc formatjson code comment blank lines None I d like for loc to take an option that allows counting of any arbitrary file extensions It could ignore blank lines without knowing the specific syntax Perhaps a few generic formats could be defined such as poundcommented and Clike The former would recognize this style of comment the latter could ignore lines with only end brackets I m not sure if LOC already does this for C JS etc and would recognize this and this style of comments Alternatively extensions could be treated as other existing languages I might alias hdbs to html From a purely utilitarian point of view counting lines in unknown formats is still useful even if the comments can not be identified I m personally curious to see hdbs handlebars statistics but this issue could resolve or nearly resolve many other specific requests and so on Example syntax might be loc myfolder includeextensionshdbs loc includeextensionshdbs parseashdbshtml loc includeextensionshdbspyw parseashdbshtmlpywpy loc includeextensionsacmeconfig parseasacmeconfigpoundcommented Seems like loc only recognized frag and vert etc as GLSL but not fs vs etc I think it should accept both and check the file for the languageas it could be mistaken as F Simple additions to flush out Clojure support Differentiates on cljcljscljc files and makes the comment heuristic a bit more accurate IMO This PR fixes multiline comments for python and for languages where begin and end strings are the same It does not fix because python uses the same characters as comments for multiline strings but at least it fixes following cases python This is a module docstring a b c This is a module docstring Hi thanks for the great tool Looks like loc wont check for a leading when inferring a language is this on purpose eg cd tmp mkdir loctest cd loctest echo ahhhhhhh rs touch go loc Language Files Lines Blank Comment Code Rust Go Total In my own experience this confuses loc when you have scripts that share the name of suffixes