Youll excuse me if this is a dumb question Im looking to in lieu of a subscribe fn send back an iterator I think this would be how to do it but this indeed seems to spin forever What am I doing wrong Can I convert a observable to a generator or iterable zrxfromlistrange toiterator In linux build with optional dependencies pip fails to install pyqt recent release It seems that some other projects have the same issue Disabling this specific version should do the trick for now This PR adds a default scheduler TimeoutScheduler to timer operator when one wants to trigger oneshot with a datetime Under the hood observabletimerdate is in charge of this particular configuration Example python from datetime import datetime timedelta import rx from rx import operators as ops date datetimeutcnow timedeltaseconds rxtimerduetimedatepipe opsdoaction lambda x printfnextx lambda printcomplete run Bonus basic tests Unfortunately they dont test this case nonlocal statements To continue the discussion started in Ive quickly reviewed all the operators in rxcoreoperators and I suspect we may have the same issue for the following operators Also Ive not checked static operators yet so this list might not be comprehensive delaywithmapper line Subscription delay observable should be subscribed with the same scheduler as the source observable expand dont know exactly disambiguation needed Seems OK join line pairwise line throttlefirst line Should be schedulerinstead timeoutwithmapper line When the timeout observable completes and wins the race the other source should be subscribed with the specified scheduler tomarbles line Once and are merged it would be worth doing a maintenance release with the few fixes that we did since July Hi there Im trying to build an RPM for Rx at and I was wondering if you would mind to include the unittests in the published source packages on PyPI so that I could include test execution in the build process This PR adds a new parameter subjectmapper to operators groupby and groupbyuntil The purpose of this is to allow the enduser to specify a specialized subject that will be used to push elements for each grouped observable This factory should be implemented as a function that returns a Subject object This is especially useful when chaining groupby with toiterable where a ReplaySubject is mandatory instead of a Subject More details in Example python rxof pipe opsgroupbylambda x x subjectmapperlambda ReplaySubject opstoiterable opsflatmaplambda groups rxfromlistgroups opsflatmaplambda group group Ive tried to keep theses changes aligned with rxjs as much as possible More readings from rxjs The following piece of code does not produce what I expect subscription of numbers whose modulo is not zero because of take python def testbrokenself numbers of numberspipe opgroupbylambda x x optake optoiterable opflatmaplambda list fromiterablesortedlist key lambda g gkey opdoObserveronnextlambda g printgroup modulos s gkey g oncompletedprintgroups complete onerrorprinttb opflatmaplambda g g subscribeonnextlambda e printsubscr s e onerrorprinttb oncompletedprintTHE END timesleep Yet both this python def testtoiterablethenfromself numbers of numberspipe optoiterable opflatmaplambda list fromiterablesortedlist subscribeonnextlambda e printsubscr s e timesleep which shows that emitting an iterable and then flatmapping works ok as well as this python def testgroupingbehavescorrectlyself numbers of numberspipe opgroupbylambda x x optake optoiterable opflatmaplambda list fromiterablesortedlist key lambda g gkey opdoObserveronnextlambda g printgroup modulos s gkey g oncompletedprintgroups complete onerrorprinttb opflatmaplambda g g subscribeonnextlambda e printsubscr s e onerrorprinttb oncompletedprintTHE END timesleep which correctly produces groups complete THE END group modulo rxcoreobservablegroupedobservableGroupedObservable object at x a a ed subscr group modulo rxcoreobservablegroupedobservableGroupedObservable object at x a ab d subscr subscr group modulo rxcoreobservablegroupedobservableGroupedObservable object at x a abad subscr subscr subscr subscr subscr subscr numbers are indeed absent seem to show that its the combination of groupby and tofromiterable that is causing the problem Or I could be completely missing something obvious but Ive been banging my head on this for a couple of days now Came up with those simplified tests but the initial usecase is porting this piece of java Reactor code to reactive python if you need to know Following up on I was tired of not being able to use the new rx alongside the old So I forked made a small commit that batch renames the project and took the name rx on PyPi So you can now install rx version with pip install rx While still having older rx installed as rx I released I plan on shadowing further releases And eventually deprecating the package when old rx is dead